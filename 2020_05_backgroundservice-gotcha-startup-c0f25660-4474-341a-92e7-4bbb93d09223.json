[{"_id":"31bcaab0-9c56-11ea-b0e3-bdab050ee6fd","postId":"2020_05_backgroundservice-gotcha-startup-c0f25660-4474-341a-92e7-4bbb93d09223","postUri":"https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-startup.html","replyTo":"","authorEmailEncrypted":"rFHWAWp9VCoF/2mwZM7BeAzENz1xyDSuU3TcQEYOIEhqfPmyiZJVzlnukG80rmLTXwrHBAwtmkZVGCPftbZIta2BFUMPzRzz0TVy7ga0z1vlOTzz9H2Bh10ZNbgW5rEt2YtVxgt9SzeAAQC31UB0R2S2cILPM0sltvJahrMiiieb7Q5FuKr20J9MYXuh+iab81TyaWHLomMGrsZomb2fzqoNjAeSbNGbu/06piGB0aWEqY3JOp9SSBCMbdzf6rEWXkvPdmafM350K8T2R6fFVawWRDPpsdkwRag96vSoteeL+DaPPA2sP65Eh9Yrv2WdcV4gIVLjTKqRi1o4Rn4bT7+WXBv5GmI/XnCM5yibJxQmdNjsLv3eM5+djPQCT8KnTVdtRsPaoaTYtTT07R1Glnq1zRQpuVsr7ryXKHHAT1V5ymrlWsGTf9Pvh+vkAZTuZv+g6//+X/a8D0gfKc2K681Ozc7v/6YZdjLPLsYcTlXlyt/P94QhbmkGOkQ8uyPCVBPAkZfWPEgTkRQFJRH4VYy5K4ht/qRJ15XUoroFWpnOY0KNBSvaEA10Be9o1lTvqh4SSph06KZIu/DsEM1dWy+KLC4UjZ9PorsSKqTw1WPQVsH3/Upc7zl5pT888l2rvfx79is7J0x5eMjquzQse5kFbV+cFAwqB1sMUrd308w=","authorEmailMD5":"6f25f32f67fa686d49c3c78fb08de819","authorName":"Andy Pook","authorUri":"","message":"One work around is to add `await Task.Yield()` as the first line of `ExecuteAsync`. This \"releases\" the Task so that the startup can continue.","date":"2020-05-22T18:01:00.618Z"},{"_id":"1c03fed0-e6e3-11ea-9079-2db0408f6b32","postId":"2020_05_backgroundservice-gotcha-startup-c0f25660-4474-341a-92e7-4bbb93d09223","postUri":"https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-startup.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Jack A.","authorUri":"","message":"I've run into this recently. I share Stephen's dislike of `Task.Run`, so I ended up using the `await Task.Yield` approach. Fortunately I already had a bit of framework wrapped around `BackgroundService` so it was a one line code change to add this behavior to all of my background services, rather than having to remember to add to each one. Thanks for the link to the github issue; I've added my vote.","date":"2020-08-25T14:56:09.320Z"},{"_id":"fcb46310-3c07-11eb-8c57-49788d2cfaad","postId":"2020_05_backgroundservice-gotcha-startup-c0f25660-4474-341a-92e7-4bbb93d09223","postUri":"https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-startup.html","replyTo":"","authorEmailEncrypted":"As5tyJq0M4rTbJ0XS7zt7VKjOFQFlSpVUqV9vhoADVb3grdegeBOvRtEN/LGhPJGavgZINZBkX561wAFLw9DZvq15gfyUlcoeAqnYhxhjIy7W4uXz2vIL6kVX3Ys2+yD50sk8EHmrGAPmRnuLmrStID47an8MvFudLK4R/VOyjYRlwEq6ips//664b3HKUB/2nCzUpfLu+OHMJLI1nWFGCV/7NxmQWcPBLfqh2SShO7awpHtq80R5gfkNbXnk3HvJifWQAa+3Q1jaPAsdb5ikkk+D/2EbchTSJX1vAs7sflIbJkqvgENsB7ykCS/7OpFcV7WgXpAjDchl7D0M/7dx2/qAbkK1orVCXifS0Y31nief8P3ueAPzK4RcYCu6ih1juw5FSaH4/twzpoztzpdMVbcyTOlOrC4fpp1YukHLYn3k50hUVQftBB4K/H1kdyV855qsjF6GCAGZbN/KDBVnnCBVYd2ghXa1ELxeshJeuQv6bVic4yfpQFlJna9GIftNxjudV6uyIniSV8RuHep7DNYhNmbi0GjXzrLnHrdFfL8F3rkKOsChtuxoOUiQsd3aWTeL1KDAMhwe59mYV4Q0HhHXmX4sO3wf7sVT7ZK3RGbDBd/BFs/eLqMPKyoXW6PivPKsCWA/Yvy0XlqcyxObO/6f7sRZ3nEc6LNM5CdaUo=","authorEmailMD5":"ab05ca62e5edd533acc1bcb08adc80e8","authorName":"Caixeta's","authorUri":"","message":"If instead Task.Run() we use return Task.Complete? That will not imply the same result?","date":"2020-12-11T23:24:16.971Z"},{"_id":"fef9f300-3c17-11eb-822c-c94680cea00a","postId":"2020_05_backgroundservice-gotcha-startup-c0f25660-4474-341a-92e7-4bbb93d09223","postUri":"https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-startup.html","replyTo":"fcb46310-3c07-11eb-8c57-49788d2cfaad","authorEmailEncrypted":"cC9tkDG6o/jnwWZTTPbB3Wu9VwM98WUz1Z5QukYI0QPGn7wH/66ouQkyklAB2r1IWhL9eU4dNc7GtKwJJb61mtcm3szmXYhToD6SsJ6vl9/Rq4XUQ4LihGUiiJB0Wg2z8aPMYKrhofzaRI1i4U5IncF6hs9ohQ92pAudU5stx+3AIoTECacDIPyWKcsFzj+JSzmphMFa0PmHF8O63jF8tjp2P+dwVBZwSEnVbNf46QvgsxzC9YWGyVZQTsOyX4scjIzG5IjHmlvbYWKRhcuYayv735CTplT/c0Zpogq+yv94Oswg1FD1K7oRlvQvSESHqT07mSiKYo8h+2Q4enzWzig240G7q5SOIl/4hHGYFUEKsEaZ7y73a6ZP/k6X9UxGhAvlHMKpqfmdfeva5cwoL6oyAGAAdw2tJ9npMKDUoc2Gm8IzeCovUI8uPXWH+yrQx7qUIV/fXtG0UvMRlGZD+RwQ4Dcx3Rs7Vce0RUIL9PDyhg+ElC1eHV7r2GPN3WolUXtxhY9xhTa3OS7UHC41ol5A2xQbp+BxHR8pYz+we1cH5HqsInUuoHK4IGeje2A6hYgLwlOiuS/rWz7iraRx5UxJnAyOXXsobZtoi8J8tG3Yda/y+d2AGblc+hiRVXZgg9vivtEJ9ZLMyAu1Egc+vgBeH86MaRwLnA45Q1/LFC8=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"The question is, when would you return it?","date":"2020-12-12T01:18:52.709Z"},{"_id":"2e2000b0-dcea-11ec-beea-6b98b825127f","postId":"2020_05_backgroundservice-gotcha-startup-c0f25660-4474-341a-92e7-4bbb93d09223","postUri":"https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-startup.html","replyTo":"83eaa550-dce4-11ec-9a00-c996e924c03f","authorEmailEncrypted":"FoUkZqh2mxdYDZMo2XPOsyYDE7TZ9f2clkzCQG0ZZCzjlwzUB65rJM1mSW76cnPPvCgllOjQY6au4hPhOzAce6y08q9u9zP+zLETereWJGnpN7oFFh7CIieDCKpJRwW4LFga2Xu8jcOR2cO54IFYf/J2TIpSWTABQWqKa1azG7ucY42vDTbFAmk0J2nhXThiJatZDQOPV6K+EuTNMuzSiv2TXIex5ydriTvLcOmIC7EMmPbkmSmdlXujhvbKNU1EqBUlbHZZ8bAhvEBH4wGf8PkHz3GYltU1Z9QqO5kIfQV1yg9JSpIw00IMzsT2SAcSY9Jiq6PMJ+m7p7dbR84Zr8svUdCTaGfd9mlyj7JzeFSsMmApRuWG+3lsT35tO8nlUoM3889hHldsMY8T3m1mwszAp7iHoHcSwc9kG4J/N28lwktvP90PEQ4ap8fXMtkxvg1MoeJIBkH7RodMFAXd5M7MNhZLPQVBnqIv1Rg7bvqh9h76AOwPx3lCxHtyi6NjrQ2GkOQNP+LmHF7Yw/OE8P5LxtnTi95TdCiomGWRue9ttnvUH87kF1T8bDn/ehNO+s6aY2zWmet5qk8jnCUxT4NxynaTzdOEA2opKhBIaQ4wglSvaFT9Wvg/U3RxM6g0L+MIsKdcuozRBe0NG3l4/JkU5GvP9EWORtWN7vHznPg=","authorEmailMD5":"c5a82c9d49550abe8703272ef858cb18","authorName":"Eric Lynch","authorUri":"","message":"Correction.  In my case, it turns out the \"await Task.Yield();\" was not solving the problem.  I had a Task.Run hiding in my code that was actually solving it.  I switched back to that approach.  All of the rest of the information in the original post was accurate.\r\n\r\nSorry, if I've added to anyone's confusion.","date":"2022-05-26T11:51:29.804Z"},{"_id":"83eaa550-dce4-11ec-9a00-c996e924c03f","postId":"2020_05_backgroundservice-gotcha-startup-c0f25660-4474-341a-92e7-4bbb93d09223","postUri":"https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-startup.html","replyTo":"","authorEmailEncrypted":"gnV0SXYG9Y7kXbwR0llOrPObcSgl4rIKrhnYdl8TELPlaT4jQox09bUTSAZae6J/03sA48iba6NF4DCZWselL1mJUtBBujPt7NeRPw8Agk2fVCY9GIBvfLh1BBECOz59j7lUBiiI5Nfou+HWZl6RX8wc3EGcTB8ZgO11AvmfEgcQ+C1q/IIIwWlHiOItTeHuXwSWxjZubZsnh/CAnVsmcMq+Wi3NF+CNyh9sO+MI1zQfLGN1BXZfVKooAkrRiNQwjj0BojjMPwn2C+ll4BGFmoHGTl1S0NnkoAQdKfKNbcJvSy4AW62B83zI3DLsu0M6iP3+D8naqXG3Qqup7VF1eiZ8cEP0MGacPfYy2elnV3I7T3qSMvY1evWTipa2l/qYwf45ae6tX4b9Ldg2Fb+8Ry9OXKdQFnznllQbrnIPQ+CMazBb5eJN3s3MOqETOLjmt19em0VbXCiTpJODG+RSg52pUafsucu4xykBrHuVamc9xz+17qSxNxQp1Ss25SOtZopXgEjAGodSKqlw14NIQN6YBJ4nPgwfbJMz8J1aLdBLEXF81YA7XavpGyvgawP3idgYaw1/GmNx+2hz4hRXPCTdgMj4NxHSaoLFqnKNhqW2MprBtV2T5g+lpWSiSM63cAZjdJzGoissDODOOP5XnLz+7/SRRdNNfy4PZq9++nA=","authorEmailMD5":"c5a82c9d49550abe8703272ef858cb18","authorName":"Eric Lynch","authorUri":"","message":"Wow!  Thank you for this post Stephen.  I <b>already</b> sometimes struggle a bit with async/await. This was driving me nuts!\r\n\r\nIn my case, I was implementing a hosted service as the \"main\" for a Console app.  No matter what I did, I couldn't seem to get my service to run after the application lifetime had started.  \r\n\r\nReading further in this thread, I opted to use the suggestion of adding \"await Task.Yield();\" at the start of my service.  This workaround instantly solved my issue.\r\n\r\n In doing this, I found a couple of other roadblocks (specific to this usage) that took much less time to figure out.  I'll share them here...in case it saves anyone else a little time.\r\n\r\nFirst, I used Dependency Injection in my constructor to get the application lifetime and a logger.\r\n\r\nThen, in ExecuteAsync, I added a try-catch-finally block.  The \"catch\" was necessary to log any unhandled exceptions; otherwise,  BackgroundService swallows them silently.  The \"finally\" clause was necessary to invoke the IHostApplicationLifetime.StopApplication; otherwise, (somewhat obviously) the Console app will never finish.\r\n\r\nThanks again, Stephen.  You're a lifesaver!","date":"2022-05-26T11:10:56.848Z"},{"_id":"871b4370-dcf2-11ec-9ac6-0d52c0a36a91","postId":"2020_05_backgroundservice-gotcha-startup-c0f25660-4474-341a-92e7-4bbb93d09223","postUri":"https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-startup.html","replyTo":"2e2000b0-dcea-11ec-beea-6b98b825127f","authorEmailEncrypted":"MFxedk1g5SWTCapcOOsU6uDS49HMbLs9h1xmUiUSHadFTcdt3T2C/gXpOtd8cYtQk7xtmelp13wPUA5PyjvvRaCJ/Sk0cE+G7PmpCP4jHfKWA4POoCzw/3lxlh6daKzlL9JWg+Qbm9f3hpQxCG48JKLM/w/pDvBCQ0qkPq776YPXz+D1aFo1KEpI2UTp4WsRuBeBVpDnXdjMCilV1bzVry6Xe2wCFbFHKA8G9YQ/xI9jwznUqhUT3kRO1bcH8pnNrM3d8mjctSJ+P+W6SfCt4yjaDaVfoOMWnVk/slFHH0ahiXeGoCuEXHXLruhJCwumT8DyfrJN1le3oGArnHwjyW1FGhoiegtKLqwhfRoT4QJpuFcYXs73MxsK2GXB0fax33ygyB2AzxkUkFD0XoIrMGHj1iOhQnYAz6Xy+hTJfZej63Kv6HW/zYDbETwnhh/nUTSMFDALm0bOlSpByXMb0KwJ5sJhHs33d+wAGIc3ZtdohNW9uPbb7MARFX4VjRbj2LpCV7VI8TeY5t7MmXQL7zPtgO2CTXXRhSFA+AeOsvSN6zQhlzoGxb8L0LIPO23PGznADYXRwq/OVaVKWOoabPf0fVSbIKVFsPsJXhzqkx+/ap/0QNlhiTgRdSTYJ5EEGlv+0XxYoohoitzJdZRJFi/lDlsqxf6hYANLvARQJsY=","authorEmailMD5":"c5a82c9d49550abe8703272ef858cb18","authorName":"Eric Lynch","authorUri":"","message":"Final correction.  Boy, I do apologize!\r\n\r\nBoth \"Task.Run\" and \"await Task.Yield()\" were producing similar results, solving half of my problem.  The unpredictability of log message order (from ILogger) was not helping me diagnose and solve the issue.\r\n\r\nUltimately, I had to do the following to solve my whole problem...\r\n\r\nIn my constructor...\r\nCreate a TaskCompletionSource.\r\nUse \"IHostApplicationLifetime.ApplicationStarted.Register\" to register a method that sets the result for the TaskCompletionSource (when the application truly starts).\r\n\r\nIn my ExecuteAsync...\r\n\"await\" the completion of the TaskCompletionSource.\r\n\"await Task.Yield()\" so that the \"gotcha\" in BackgroundService doesn't block the application from starting.\r\n\r\nPrevious approaches failed after about a half-dozen iterations.  After hundreds of iterations, using the new approach, and checking the boolean that backs my TaskCompletionSource (instead of my unreliable application log), I am now confident that this \"magic\" recipe works.\r\n\r\nThis was so much fun I wonder if it wouldn't have been easier to simply roll my own BackgroundService! \r\n\r\nAnyhow, thanks again for the advice of others on this thread, it was invaluable in solving many of the issues I encountered.","date":"2022-05-26T12:51:15.093Z"},{"_id":"743c46b0-ffba-11ec-8278-c132177ae00a","postId":"2020_05_backgroundservice-gotcha-startup-c0f25660-4474-341a-92e7-4bbb93d09223","postUri":"https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-startup.html","replyTo":"871b4370-dcf2-11ec-9ac6-0d52c0a36a91","authorEmailEncrypted":"t4I6b3QgqBoug3wH33+u4bqE3xPt5oztBecz0t1b/saejclOCwV7hqvBr8pY6w1mWF5RtRonEXDFxl9TIF9xmiQeecMYhfKJBb0vOKqEkrnVUChgK9TAAl3iMvfIAErT6sxjJq+olTWrVB8xwHKDbsRJ05b8rQ9jJmpSC7tkUcOgYlN/8jiDTWLGF1xQKqpbZtv1DgU6xOgklLABdXWJU+L/8ADuxdi57CBpAsrBRztj70CiEn8pVqa7V+dn+z9Yh/sRSGuDppevlzMcoAWULRrd9BO7iJDMmxM9W+7g7d/4tAw3BIeRLZOfgZwIksnD/HisdN1o+GmYf/QaZ9TeKm4EOwNY+4Kn4gMHgpuK2K+jH66nMO5BBsZoLxfGwpvgrMCIeW39y6UtoyZwT5yVUBOdr8bmpXDZcIH160o5H91RxmpBY2YFJMKQ+WZckTksPRyUoUjmmiqFWpd1JjglKP61xahvcaEgt0cwSHKoevkE7LliNr4qQHCR48kzjQlL9jmowypKS6m7ZFzg6ATzxEFthz2IeLthKHo6mA5jKdGsF/9/fvzKtUD+LPd9Zh51mM87Qhn/wP9/RKNIs13R+qQB4KdxipUxELrRMRBXf+EWTq48U55GvG4dmHeODUIRexZiaAIfXJ63wIWDvPxktMT6CQMdKB0oYIT9hRksZYo=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"If you read the full series, you shouldn't have any problems. The `TaskCompletionSource` shouldn't be necessary; `Task.Run` (along with `try`/`catch` and `StopApplication` as mentioned in a followup post) should be all you need.","date":"2022-07-09T19:08:02.208Z"},{"_id":"54abe2c7-7a1d-4f44-9ea7-5763b99e6f3b","postId":"2020_05_backgroundservice-gotcha-startup-c0f25660-4474-341a-92e7-4bbb93d09223","postUri":"https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-startup.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Alex","authorUri":"","message":"Is there any reason not to pass `stoppingToken` into `Task.Run`  if you're using this work around?","date":"2023-06-28T10:32:15.4172248Z"},{"_id":"f795521a-9632-4bd8-b197-949598fce272","postId":"2020_05_backgroundservice-gotcha-startup-c0f25660-4474-341a-92e7-4bbb93d09223","postUri":"https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-startup.html","replyTo":"54abe2c7-7a1d-4f44-9ea7-5763b99e6f3b","authorEmailEncrypted":"a/ExznSg/L7klWIZ+UKzcOSJ9k60k0mySqJoSXYxtrEYlhEDIiVbq5HX2vtmE8qjILDerPhKTYenkxo8VTPAnEkIw70XCps+JIgPHsbOFyTQcqayMX39DFeLnALxrlkOqIox0yTYcsYyPziSplcPke5dgoLtvBQ4XP7P0+2LCRRWFQo05gV1U2qpFrcaLXKoGF9tnuRrBv9q7PidpCcrrw8Wzv2cODf0A3Gh9Gw7rzVl9ZXZWUvVXWT9PRMOau4xrc2jQcumDObo8IioU/ylvJwTkGEl6N8NFCXjsDGpu7RqjzXQ2NX1xbgfk420wClcmsFp9dL0Cy3LXv/dZFcD6AKifko/aGMUEVrguriW6t6pL4TWFZcESIQbrXbk3SR/r/2up+xM7ufGUW3m4yMQ3NZ2g7VWsk3X+FJe3B/4RfWP+EGfdBVBhPafxgpKKIQ5TKB8Di7sHfSgEvMP1e5hTrJUVDs977fCm8lDPwiHattw5qyVLF9gkRX/Qu3EaF/A+Z1wXDsCCs0iGEI5chlVprlVVwWB1D/RErj6tDpC2mSJdgBmlu1JB0Yym2jUAO0xLlumbs0SOFOscehvu/EP/HABEKEQK+POod3dY7Vnfmf7qW62uUfdUbUoQehzeZ8fYozp+naIDRiCfd5x37E4mqkpLBfM/IaYqZoM79ySuso=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"I prefer not to pass the token into `Task.Run`, because I think it misleads developers who maintain this code. Specifically, think about what that token would do.\n\nWhat most developers _think_ that token does and what it _actually_ does are two different things. Most developers think that the token would cancel the work done by `Task.Run`. But that's not what happens; that token only cancels the _scheduling_ of the work done by `Task.Run`. And the scheduling happens immediately, when the token is not cancelled (unless the host immediately shut down for some reason).\n\nSo, passing the token will do absolutely nothing other than mislead other developers.\n\nI'm aware that there are some \"helpful\" diagnostic systems that suggest you should pass the token. They are wrong, IMO.","date":"2023-06-28T11:53:56.6259218Z"},{"_id":"03fbe138-d208-48d6-bb2a-7ce17c3c4230","postId":"2020_05_backgroundservice-gotcha-startup-c0f25660-4474-341a-92e7-4bbb93d09223","postUri":"https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-startup.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Jan","authorUri":"","message":"There seems to be an update on that front:\nhttps://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.hostoptions?view=dotnet-plat-ext-8.0\nThe HostOptions received new properties in .NET 8 like ServicesStartConcurrently ","date":"2023-11-30T13:13:33.8800841Z"},{"_id":"e00efd9e-9453-4fac-bcfa-6bda0ab6b10c","postId":"2020_05_backgroundservice-gotcha-startup-c0f25660-4474-341a-92e7-4bbb93d09223","postUri":"https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-startup.html","replyTo":"03fbe138-d208-48d6-bb2a-7ce17c3c4230","authorEmailEncrypted":"u4p5suKh0Ngza9SzZZYoXR2G2npa/P+r617oGxYfUNkpquQHi8z4+83wWICpskoFPsmUE5TVlAS/BlzYcWU+Z/RR2CSljir74UOhOsCm3V492SAEk0K4vnXPM5Zlmh/mOFP5pUso39msBJ9jaBoRH1UUzYihNHTwLaKyAPLu1JQAjIxv5qkM6lcTPNEa3KtwTUBS1EEfv9QBxGdCXdd6tJusfPTDPEa+ehhshy5GW/1OtBcF7MET0memq2p8EP8q/jqXVdgTtXqcY0MgGG7ZMw8geya3x2zagVyI19XQyByqNZFGfoKmiLxq/2DsTx2RDLkU2kxjYQ5FsDBW6R/9Gn0vFaxGdnOAI6I52fNPYcdG5RS+oXoKMCpPhgV8H2N1E6cB2PfDxlFn7E8mtiqvhxViwX0vA5j93HLVA2cw+42HkMo4lID+wt/7q2wtZW/DMyqdiTOvjFYZuB4pMFYpVjkAua/WUG9Nb0vQ2sNTRff33MUMxqrDz/pbK+IJMVE1AYbHLw3mOqUOLO+GIbZpy7q1kPCd0PJKgBxmYVmbQTpApAB+hn35NIlIcgh4rcEgp91RIdMJqrw8zEWsiwUznjlZWpRHO9YZgpe1WikUNBlGAFSTG0+YS8w3F+6cTJXiiSSg8KswmHwoV5WBsW692XiGpUNWkwg75EPkV/Moo9s=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"The new flag will start all the background services and then asynchronously wait for them all to complete. But it still has synchronous starts, and `Task.Run` or equivalent is still needed for synchronous background workers (or workers that *start* synchronous).\n\nThis is not the first time someone thought that flag would solve this problem, though. I'll add a note to this post explaining that the flag doesn't solve this problem.","date":"2023-12-01T13:22:55.2550952Z"}]