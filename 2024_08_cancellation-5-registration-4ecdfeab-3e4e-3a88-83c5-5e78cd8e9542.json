[{"_id":"d34cad3b-5f41-42fd-84eb-d32aa9e24afa","postId":"2024_08_cancellation-5-registration-4ecdfeab-3e4e-3a88-83c5-5e78cd8e9542","postUri":"https://blog.stephencleary.com/2024/08/cancellation-5-registration.html","replyTo":"","authorEmailEncrypted":"syK4nMH110UxB6Q7nLazCcDjYE8cZ7rcE2+vDtPbg0OsKg/FH5Sqo1w+WuJX8FAAKchaPXft14afgeK8dQjs0dQWVKVx3Mt955amjmQHbImQRm2yLUcraxOyYxqKI5cQI/o+mHgE4h2eP99RClYQXqutwNDsTF8/Z/SPJ6SozaXKKQHZZO0Eeq1iOrYEDwL+tet6hEMR0a8dZHmq5Lh94Vs5hss7Z97g8goGg7DUv5pBis/wLsu0pfQQWgnbry7Smqp7edc2MeTgMMPMnLIuqCHnLVmZf3YQGLI/4jTRnuJmcsO/HNYsr24TTC7jhfCQv/KSvNE55ctUDs6ddt65BE90Gqdo+GrRMKJcC5oPFI4cyS/KFcpYllIJdG3hcqvaAelgADKsmp6v0+xfgivvBFci/UXBLHm6yMu350CWHzcQM2ORYxn+quy64FPZ03Tvx9b172WiTAzN1bW8GHIYgoCT2AlffiVuzZDsogp5QHZOdjJ8yfLywp1ktCmCj/58l5FabqPFZ2VYCNDppdMgQC1b+oCobszHxkp2KkqF8+S6EWu/XY9hpI0+Aqv5OIc1SrZI4dDafR91v/6daNElLJz/Z0y4ywWL0Up696Mirg+T5ukPXV4uUPQwdoX3E+GcIhfMc6HOJXWAp59NiYftRQibpYg+bv9T1xioP8f362s=","authorEmailMD5":"24500a7c5c1960f99f8c496b5f125e59","authorName":"Kyle","authorUri":"","message":"If the callback is called, does the code still throw the OperationCanceledException after it finishes?","date":"2024-08-12T22:01:09.1984369Z"},{"_id":"57ebe78e-c978-4016-9365-1e90fccc48e0","postId":"2024_08_cancellation-5-registration-4ecdfeab-3e4e-3a88-83c5-5e78cd8e9542","postUri":"https://blog.stephencleary.com/2024/08/cancellation-5-registration.html","replyTo":"d34cad3b-5f41-42fd-84eb-d32aa9e24afa","authorEmailEncrypted":"pi+4MoEu4fxkllBrWhfb90aoh+mwjwEkrdQll3vcCx3DlbTWqqgLYc+vC8mt7ZsviIAVd6ItVn4yPe4BI3Gq+v24l6foVoUUWwi3tkS+0RIERt//59Qj+3IG4W/hPu9pJFtqYhszw+BL7oVHVsvSh59WrYI/q37aXt+l++rJw02i+fSjebnZEfj7/o9AwHVIT3hwFVcF7CBv13ix9igQchPBVwdA3/SD1JZeKpaexot6DxQUaKwJAH2O74r7U7kvvprFo3NW/CqrDsDXIa34na0AROGWwFZHUEo6XczK+OEwoffFhMuAedvXq69aHgh+WY2Xnfy8REwL+2caeS0ZOP7gRo5oarB6dYRNYBjk74lsD4rZKr2FXQVVm5aWGJ300i62Zfswu1yprad7xaa0vFRIRRWQDUXn1WF7NmIURdorui8QEdPYCsdTOfvfKd9+z2CI45BS3JqXvyVFl8de8yU0wfz7qFyPadHT5C0NZVxVAk2eBX7Ol4kJLJhaxItadfNHQVTi9NaMX7d4VZf48PdK+53yN9EDu8Sf2yPd1G6zxK0zHdq1OVC+D0iyEsExPRUnJNLo0Uth3CUHUTDL5/J1xxfcmNWXNyaLAyZEVH5EonBqK6vrBJ1b1UNjVELrDsFC2iG4mBp2gRN3KUMtaEerh+1KwaZlMSPcc57Q3f0=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"That depends on how exactly `StopSomething` is implemented.\n\nIdeally, there would be some `TaskCompletionSource` controlling `SomethingCompletedTask`, and `StopSomething` would transition that task to a canceled state. In that case, the code would still throw `OperationCanceledException`.","date":"2024-08-15T07:56:38.2692442Z"},{"_id":"e9968512-0251-46c4-a72a-6f1f00b4f4e7","postId":"2024_08_cancellation-5-registration-4ecdfeab-3e4e-3a88-83c5-5e78cd8e9542","postUri":"https://blog.stephencleary.com/2024/08/cancellation-5-registration.html","replyTo":"","authorEmailEncrypted":"sQ5f1K9Lo+EfIltnRs/2ZeZXW56tUYpGJK0dAbekLOqTck3fvxaWdi4jD5dBssuy+05G1UsJSnO2aCeXsfl0tUGmzyFFrzl+oaWYjrYEbrgMqe3Ase6WOVHjdqVVaOfTfnr35qoSRk9BTV7ICAwer22YoaPoy4tbTFMlj7cSc5Bg+xIkQscP4aQ4vIP5lvtCk7yAyMXTPZrVRy5T1qw1K1fzH4858LsTvv//tbvV1BmFWzznTIGtlDfAdkzsi/KgsExxDsgbCvbgH0Nzx9m1o+jO3kr6V705qt1+KyXbO5zsf2U5XB3SU1k7BImj+Vktp18XHlUL+KxaXHz1xRX/uurXt9rBNZCFLlu5zY9wDS6zxNcOcX57/qdJReRXZqc77z4N6ByxVRApV2QYefZuUB/rjJjFFLU73fqfgnpdOhPuCojRSlzqtkV319z19f091C8/6y5q96PxQQfyvZCHrcVss1Lkk84XzHfcmPEwVzD04nbR6JlvXQ6raHdlpSu1nkGciuMu/sBrFb3994ASAHXvtqtaXhSWMBNI7rLO5lzjg6VmeraPt4lbil2XtWTKloU0gIeudUtqGHzWgmHpdzHHXxU2xpWfvV/+GkElKuSCGdu+9OWnO1TPsnQ5tjTjmOkJG99xYlHh+FVMfW2PSmngOeeSfnizWSUt44/yiJ4=","authorEmailMD5":"1dfe9bfd3f2841cc61668989b9d1ac81","authorName":"Grant","authorUri":"https://grantwinney.com","message":"Regarding this line of code (where you create a variable that's never used, to use a `using`  statement to properly dispose of the registration), is this necessary if the `CancellationTokenSource` itself is properly disposed of?\n\n```cs\nusing var registration = cancellationToken.Register(() => StopSomething());\n```\n\nLooking at the `Dispose` method in the `CancellationTokenSource` class, there's this line of code that appears to do what's needed (although come to think of it, it _seems_ better to explicitly handle disposing resources than just setting a variable to `null`, but I'm not sure if it actually is...):\n\n```cs\n_registrations = null; // allow the GC to clean up registrations\n```\n\nThanks for another helpful article! I've been catching the `OperationCanceledException` and didn't look closely enough at what the `Register()` method was for. Great to know.","date":"2024-10-06T23:30:32.8641295Z"},{"_id":"826eaf92-88a4-48ac-98c7-172afbf09f89","postId":"2024_08_cancellation-5-registration-4ecdfeab-3e4e-3a88-83c5-5e78cd8e9542","postUri":"https://blog.stephencleary.com/2024/08/cancellation-5-registration.html","replyTo":"e9968512-0251-46c4-a72a-6f1f00b4f4e7","authorEmailEncrypted":"DBj2/X0ETvH+JR43/C7QNEQ80/Fwz6/fwsV3+h6HkGPqlUv/OWZioORsgkdVGsuZu5mN5HPoqjD75+4PzSqqAcgKb8YU3kC3Gu6LpFwCU64DdoQV66Xj/isP8v/fvOR0aR2YNIZZA5cTHOZX2wBN6CvF9GU6/ahG+93vlvchz21bwdAN5cmxbl/d2cB9iZCDmY4SlLgY1dvm/wSd/xmO/mlI5uO0ddFFpwq//RnQeEP8kJd62qNpkgCrf+dggBhLqEg+J/8yzNhl/EZagxYND1JXDk4/GrRRyGpzWTxU4WZJR6mRjHguRgiMBdq+reJED9MhP0+qOoXp20N/KdkLrXy3ReujI/Snfb9p0E6Oe9dvBLmAhW6Y8AeNKyo59mCC56tXPmN2R5xMnzYJPZEpG/4ZVOcmZ/f1j2AJRuL8EYW3ddqRT45imPJPoTis733lJ8Xuj29AScjcxWfxCTG3uxoW2Mb8t7BIAv2GQKby8Hz+3NDCjfalhIM0xHhfNQRsmP2GkfZw529wkOwMEwJf/ZR9gTYYLlWEwBTBvbGmUrqbOHfOBQZJSsqnQa8W9hg8bbIMmwX4uVA0cC4lKww5iVW6gmOEw8Ok/CYE/zNTEAD1EgDQCEzJkqqOLUj+Vj8FuEW6tOsQGtQKkv7X1jwK7ouB5QgnZmQvqIa4oY6tQGo=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"It depends on _when_ the `CancellationTokenSource` for that token is disposed, not just _whether_ it is disposed. Some CTSs are very long-lived, and I have seen code that doesn't clean up registrations cause resource leaks in that case (that have become actual production issues).\n\nRemember that the registration is a callback, so by calling `Register`, you're extending the lifetime of that delegate (and all of the objects it reaches) to the lifetime of the CTS. By disposing the registration, the delegate lifetime is the _shorter_ of the CTS or the registration. In the general case, code shouldn't assume anything about the CTS lifetime from a token passed into it; and the natural corollary of that is that code should always dispose its registrations.","date":"2024-10-07T01:57:24.5929604Z"}]