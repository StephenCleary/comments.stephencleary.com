[{"_id":"0c934de0-ac21-11ea-a7cb-7fc17b390aa7","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"b16b3150-ac1e-11ea-a7cb-7fc17b390aa7","authorEmailEncrypted":"hEMJGLVkamzhrLT0G8cyGbisHubg3V/lMnI4t0D0wMZ2QxfCljQeaDVIpSLsvOHG7so8Pvoo2fXdXdewyhJodA+D/u2r7oBzciBR4Nz/9VxzY2xLn1Oslt721RqueMJB7o6cw7xGu4P8nutCFzDgMziYQr7OxAYKczubNZLnRkSIPsHqSlatf29Wk0I1YA/ykpet0YRNYrvl672dHGu/HizBCZn5nGbrQGR/iu4IGPdr6b/+rsxXh9zMjC9DoPyFB2FPlr7O942K67giZ/q0lJRpGTcVzIc/hu/6m3PS4adUhSTvv8vbibVLujFhFXi6OB0A64+VVYUgzXYv4iSoeWAxxkMoj1lBgXSpE65xxoKzI/hYFgq0ehr5hXg66tToMNuo8Ia4tiFIFzSfj4Zjjl09nj6VJL7myxPVJTzdbYjzkI7xGF4fUsxv5pR7s2Xzeg4vxPZ7BHB9PDUrJcVpiD5KKec9NHtFks8gIX881fSbgJmYV7gxb3kSMqd6MekhloM+H4aA21Lh8mnqruScU8joPifkWgYHq0TN0PC8cLINHYBdytc5VBsEGaqBsmPR55VLhQs9W0JpqY3FN/QJTjRjdXilXB/XlmPtA+CF448MKrUeVhYviSVFoldReytMi11E4/tY7tdSoPcdLV+YZ1KHh1a12K++s7goxBt+C7Y=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Yes, it does.","date":"2020-06-11T20:20:53.535Z"},{"_id":"56836600-ac04-11ea-a2fa-83fbea504ee9","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"6070f290-abfa-11ea-a725-f7ae09b4319b","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Zack","authorUri":"","message":"Maybe as extension methods, for legibility:\r\n```\r\nbool LogAndPropagate(this ILogger logger, Exception exception, string message, params object[] args)\r\n{\r\n    logger.LogError(exception, message, args);\r\n    return false;\r\n}\r\n\r\nbool LogAndHandle(this ILogger logger, Exception exception, string message, params object[] args)\r\n{\r\n    logger.LogError(exception, message, args);\r\n    return true;\r\n}\r\n```\r\n```\r\ncatch Exception(e) when (_logger.LogAndPropagate(e, \"Unexpected Error\"))\r\n{ ... }\r\ncatch Exception(e) when (_logger.LogAndHandle(e, \"Unexpected Error\"))\r\n{ ... }\r\n```","date":"2020-06-11T16:55:22.224Z"},{"_id":"6070f290-abfa-11ea-a725-f7ae09b4319b","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"","authorEmailEncrypted":"jJMtiDzp9QXhIzF9Flp19RmQl25jGjvEMnJgDTQC/qV1bj4G9DCQ7GpIq0kEKNUJahdE7D02L0BNtFKSXJYfQUSp78EavsxUTI2glcYqJzhjMs7jp6rRb7pXnOeYxjgeqzOt2b3RexNGi1y6MhLweO0LYvEMXp8rwtPZ3XMe+FqhOpxeeZHl/Pqd85LiUh8/NkGUZxpwVV45K4b+IQf6WrPSRvJSjULtNy/zwBrMKgOsdWpM0Ut3+BD0vs8c9V+NreblNML8P/c4ur0Q88dwYcEX1j7enuaZikpN5jQiTxKH/dYmewPMGVLtqYdqUbfygABFpnxci6gSQ33ti7heWgP3k4f2bF1v87MzxBK5OLLa0+T5SvWm4Lstc2F9ZcMiOBIsNvEQgbPsyvhwvgw3e5ne9q8IoC2eK0CqqArAxvKVnhP/HZ674JCJQbQ9DJEK254hspjG3kxIzh4pslA1H9Na3t+PHDrahC3wIL23AXAHeZbWj8hMRKlptwZaFkEAT2KHEEM1BMOdjLvqgSNLQrJnyDS+wmMcJQgRj0mXW+gImpYX9IfF/LpDA8IZlX/r89cQS7pzlAvFDjgv90MoomXSkcmfLE9l83jlCrQMywvS+5JfFDMwWph3nr4Me+pWVTRpfyMCz1o+DRwVLr7VfzGnoR8/HMFNPcrypfENndw=","authorEmailMD5":"c8f5403ee72fd97cb86642a33637adc3","authorName":"Paul","authorUri":"http://paulwheeler.dev","message":"This is brilliant, I had never thought of doing this!!\r\nI think the only thing I will do differently is name the True, False methods to something that indicate their usage a little more explicitly like `LogExceptionAndContinueUnwind(action)` instead of just `False(action)`.","date":"2020-06-11T15:44:04.258Z"},{"_id":"630881d0-ac04-11ea-a2fa-83fbea504ee9","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"6070f290-abfa-11ea-a725-f7ae09b4319b","authorEmailEncrypted":"Vl/eomdiDQo+V0INXXcm2eZo6eSoQkKuMfOa01DSNUy+KVH4v+bAMeagwzRcq0bMhSwlOlocz79Qou9Ct0T7zVif0E8Mm+kHN/7/zHGqtvhrke83I6vLbj6bBVZdeYe8EutDaKBo0pF3SVEMYIAhs3HViu/XVhPJnf9POQrbU8YTYveDnPmDZMuc8VaZ/SQFtwnq12jesaWiHqo73vnYMqLVyHA6fu0LksluizsrxQFRyxQIEjIo1tSDhH0dJSlfoYzQQNfMINgqjUPCOFRe8A3kaXw+1UEDfV7T+tC7J9P2V0E7m5wMyPFlqS/7/fVAenjTlh52tAUvvtTzbjBNmMy9ZP7VY5rCRJhO2trgoUu53qd9S2fX6R7/k+XKi5qOFTy06yeBYrcE22xULiqwnyXU/fgsWthLy66/7jEf+lIX/oj5erpG24+ILk1ZU6hnhxZVyvtOO1oh/VzIeqlp0arvaQKyYtQp+r1v3XR8aLwTr4NLnBZw4TBGGlkfJxNeHmb3T4Ux6b1Nv6nhHLEZr9zeov/G4Y0FNWzAw2YF6UubsepTUYNjTg9j83ibEUNmWw2zbSSaLvhxNwWbsBRACXOpam4OkqWSnUZub7XuF5tt10btfBHSSbsuhUR0z3i6Q1BO53tG1qMDv/Bk3DqiaAg7aPTCaqcbrOeoBrBC5Tw=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Yes, that's one option. I named them `True` and `False` because they just cause a side effect (which can be anything, not just logging), and then return the specified value. But it may be worthwhile to make actual logging functions that return `true`/`false`.\r\n\r\nI just really wish it worked for asynchronous code...","date":"2020-06-11T16:55:43.245Z"},{"_id":"9b7d47f0-abe9-11ea-b64e-ed8d1e1942af","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+NitoPrograms+%28Nito+Programs%29","replyTo":"a73a6030-abe6-11ea-b64e-ed8d1e1942af","authorEmailEncrypted":"rSB5/fLrvLrpyfjhPs/ZDqPgyn46zXQFknj2837VXhkKH8a4sZQznoZmVYEqJTMVhH25FoFHxpDmqGKR/wgwpfKJgwJaRG2bXp51ZHF1JJOman9dIxJu65RSg5DIRxOoUOe+Ci2FMZxn3nZX5dktQW29CfEE6DYP+ocLVzhZHnEC+ikiKJMZSZye+Y+LuZoWHLVapYIfdFXVMKdPtLQQxgvo21QhKjsAVvU2HAsTlyozsUHZXN1DiC1tHf3yNZoWQ+5l/zwrgnuDau5X0cZB7s856VRLOUb6A4G5aafzpdbuxh/SpvhzYpjNwKDFI6AdmUSkMdiJRNAs0SYwehuMX5gw3fEgoRZUH5yLjkuPmwXB41GgIBjpTXJGbOG8NIP7CuL1LUjrlDcihPWJoXeu9KfZLsS60fZvooFPgUytq0q98sfeJnIeubNmu1s0HlUsZbg4QXi8wWuAtiD6rddMlH6pruhGO6EDYTDtfsTilOSqaX4WxeIsJgfWMaouDuJRLkij5IouwlC2pUQLfcLJqtsNpxoVfpS9phQYIRwtIEB6sLIccdsErUDHIh1YC4ESxmN9V2Y12TqCEj6JlDfXpQUuF2bRxlULdZRznkU/5lpifil6qOyKcu2ATMfMcLvLET0x93Vegnqi/ZA5eQJDa0Pors/S2hWLFqmgrNtvdUI=","authorEmailMD5":"05f5df46fc12fbf8299f33b474f1e418","authorName":"Viktor Nikolayev","authorUri":"","message":"Here is the problem \r\nhttps://github.com/aspnet/Logging/issues/677","date":"2020-06-11T13:44:01.480Z"},{"_id":"9d651ef0-abe2-11ea-b64e-ed8d1e1942af","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+NitoPrograms+%28Nito+Programs%29","replyTo":"","authorEmailEncrypted":"WcIOkkPD5Uxmo2Pfqu9BNmsSgsqAL3bY/0BdHSBiG3o1lUAXONm90DV6qDRytNm2DKRTbhDhwSGJWWk13k7TP6VmSr+dZ+skn9bVGI20svw2o0AQjASJmv5xvhVCDkci5qxP3rRGGHkb0yDiSXZqIpEQbWVudoh3g3G7++SEuvmmMJ29FhFVDNc+oTeyNQkIsh/dzI8Ai02RC/oicawWvVXcw18mOiGX1sny4bNACvn+bhvpDOZlqmi/h4FfcyhofhXlTOT6c7uQJUOZkWrqrVnptcTjDO3fcran3UevpsqEDj1atMb446J1ZcTKixfEB/zCvGrSgsOmwBOqqLNga6TNB5mgRb+ferW+z+pkLJR9+OK5ltR9kiHEj3JY8dxDwrBAl4LqPeH4AJehAwTYDo0KOrr40xIzPNg56hfCsxr+xsFx9Okzo2SHo07JFFf8iPhgb5sTtowmyzelVEH1AZuIz4Uj6a+f0ajMgyNLEjadQ7LaNtjpKvxl4iOSoGonW9Ygn+aXJlZkrv/knEB1QT5aQy69BiCU2oOfrCtnFOEs7VFfrQgRhvppuzP0jPZa7HZufmYl3mr1ENVBX1d1ealEbVezVWm5GsmOqIFOZdNwubyvO0l5JXtHJw6J17SfxymooUTGYt3KDfPxb6fsI8/QPBaNxGxJpuJC6NULVyY=","authorEmailMD5":"05f5df46fc12fbf8299f33b474f1e418","authorName":"Viktor Nikolayev","authorUri":"","message":"Hey!\r\nThanks for the article.\r\n\r\nWhat if we have an `await` statement inside `try-catch` block?.\r\n\r\nAfaik context won't be preserved in that case.","date":"2020-06-11T12:53:58.273Z"},{"_id":"a73a6030-abe6-11ea-b64e-ed8d1e1942af","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+NitoPrograms+%28Nito+Programs%29","replyTo":"9d651ef0-abe2-11ea-b64e-ed8d1e1942af","authorEmailEncrypted":"qHLf8IYnLlMGD+XHJdHR9RrQxATK0ZxGcI55FzcljPR3FNCydzNmTL3BHaviwHNzkkqfK1jgk7L19Spw1RWP61XgNzJBgDq8CYnVhh5YFAKpOKhUXLiUib10GWMDG49lqrsbwUTzxfXORr+YSs51fC9YmxNTRZbLmmMG8Pi1v6YrXw+Q6J92P2RfFndieaFsxU1Bl6/62nNGEtQXdDY+Gs9AXdlmsxNV6kZBY0POf1rP3c7dphEkbGXe8HvXx69S29ri+n7HsMCyNTxcN7XXDYeHGjZrk8urHI5pJwIfDsFz11z1eLJWGSWOUm3hrI1DhTzjvqHjF2936I47ay/0BOtX+FIVYnviftUzohN0HWR1Xmd17Qko0bZ0zeBocXhlBnIuK6lOQ2ErN72krc98U7yY5Jcr5nzmiouwmtzjcDtxOXcDCwcTvFz2cvK5s/rWIxMvs0W9fdsiufv9Ig6ODKfO0lF4rXm/VHOChqGk87vMdD30mlMw3z90HU0dfu4mKMyh25OLCGkZne/0FprT15mEZD01hW2PoBcvm37PT4paZsgmVi3MVQPLbH1N2etJfmDWNLNaOaYED/ATzwdNftyYPAFbAAfIW6pAQYG3tDGPjnUdwZkq6hbpqx6XQs6tZ/l/LmplXY9kUHtBMRz3fRDxnTLsgo6iMlXJbf9+wJI=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"All modern logging providers use async-aware contexts, so there's no problem with using `await`.","date":"2020-06-11T13:22:52.715Z"},{"_id":"b16b3150-ac1e-11ea-a7cb-7fc17b390aa7","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"huss","authorUri":"","message":"doesn't this feel kinda hacky though? It feels like we are using exception filters in a way in which they weren't intended?","date":"2020-06-11T20:04:01.659Z"},{"_id":"bb252760-abeb-11ea-b64e-ed8d1e1942af","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+NitoPrograms+%28Nito+Programs%29","replyTo":"9b7d47f0-abe9-11ea-b64e-ed8d1e1942af","authorEmailEncrypted":"juWZi11fdABeff31QpKXRoeqc7N+cTaklpm6IWr1Gain7eWuPNT9Kc32H5yS4YFlpHP73RyjlaaWu1IP7Cqh/0G38iRYbriUk394BNbMxmVyGvYQtF/NBrEFJHSwvYJBnWdmNjRA5CQ8HYmV0WMtMXVHZ8Ozl9WlXI5XQa7Yz0rN6/hFecC34nozrIMGjIEpbuQGtfmvD5OxyQWJEuaREo0+cgDP9QQM+5aHXxMgT4BVlZhma/+P4qgw687prc0IpA0Sr3tT45NAMz2XxBHvj+HL+46dIrb703xmwGA99GyVoIygsPehLbxGdL9eaepSiDBDbliZk04VIVHT3i8IX93IqHFVYr4q0+wEXXlGBeXmaaK1NU2lTZ/SdSRgjCvnjNdqPAIvbqNZ1YlkRbFh9RsoTR4DUTwnprZXZOA8hOexkObRDuBIzkLQ5BE4x6STrXILMZ2Ced8A9WWPQDc3W/wvICEiIdGcWkcMsnt88adeqiBKEZdv5oJVCUAMpP0iIUv6UtbVpd3jNSoZQbyfENjBAE/VUd8AhZuF9E43LQzEmklcE75OmY4cWr9GGVb4viSht43tV09CsoZGPdnGNTLEIMl+xrH7E59vliSY+qYmp/9LIKou8evmMVkW07gDTLbgvZMsQklHCb6kPBtPY4b2bNhxu027j9vryFiEx7k=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Ah, I see. Yes, the `async` would interfere with the exception filter, preventing it from seeing the logging scopes.\r\n\r\nWhat ends up happening is that the exception filter runs where the exception is thrown - *at the point of the `await`*, not where it was *originally* thrown.","date":"2020-06-11T13:59:13.585Z"},{"_id":"1217b6e0-acba-11ea-b559-03adaf551e6e","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"19620120-acb6-11ea-b559-03adaf551e6e","authorEmailEncrypted":"gDZLzw3u0JHc8tSBgoSdhgEz19tZ5XK7xetHKHG2FSckPh30/six+qSJloLW23dQxV9GyZkDaR6RPE9vCaqlCtdjQCFE1ne92S/o6rA4q3nBuk5zDtWbNlljYJuyJlbCj3+JIpefnyEzSojAXa60f6JMWL3ehh70TLeonG7jeJLv8EGCXyrAOHxLcbhkfgHRt7710VsvqpY9RVTQEX9BuImOW+IBmi9nV+JMrUY4lKoca6JZ1p4/UBQZox1fNLYSNC2RBl20zJnl2PHxKx6gQ7wi/Mi6KQ6wbQsLtTkopHxWh593rs20CTbDOR5NOl9q7oqenhuwRN/+p61uwmecmlzQiQIiLBS5/JGbwq3q4sIInaKJNRHnL7CABgPwZyLoesbKESL681r6WLz2ZROcmE9xzBzEReDU6KGmO4rw6ZuozxD6jcCVOYRvBgvgrX3bV+DHLXW1ivLeTlGP7kHuqZDTem24Fo2RCWpYEN9qYDn+j4LuhAxCPKgCrihQsjqBJgdBCBPKsMzplWoOrhR35JkEbtubeB2V65YjJD26/GDOVt2LEnBvhIijgofG7g1zlRZSvlgILFSVl9r7f5VS9uSIKHB6pm5EZ5Hde+qF56z6+Pu385I0A5rEhI3gAqp8t65fv/ZeMQSFeQM+ZXtaH5FbvHRRxw60mT39EMH2K5g=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"The `False` method is for when the `catch` block does something *other* than `throw;`.","date":"2020-06-12T14:36:15.765Z"},{"_id":"19620120-acb6-11ea-b559-03adaf551e6e","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"","authorEmailEncrypted":"e7FZM23h+C9XNVAxhQTJVFagjM1Mu+eUTYRGIau5J+JXJaIUjxQfkUtiCN/TUo9d39fuVLLRmLk/hCRePzScc615CKIDcG0zNutK37jKNLutglKJfU56trJ3Wbtv9hqNWFHC4Qh/7J/ic5Bz/MiFMz3u10kEB9idOLoNEARjUpuqi9HjkzrhzTmkih/oOOtx3Iaimq6Yh2EgHug5a8y+AO+5nyx0cLQ+o2L/Bjj9ywSgn45UX7fLfWgnqSs9x3u7seC8NUVGSZjYz/dDrwDl+KzWkKzVbWYzD6eI6cqHduSimrkL/R9PNVzSEgjXRZWTf9OB5qSLd5zxQoxqe+DWogBg1a/5K3vuUvOvt+4ruISLgDmpH/jjXsrVeuQMZPgSLRwGoW2syQ00dNN/aV75CppquMVv20M4J9A78YHLLOvL+JECiwBSa/vIvrEoSYM0qRImCR0wWph4ABdIQvzEuxLQdqw6upxrG/GKvoOmsqcQ3wRNKPIiDYL1InVeG06Oa2uyH0i5jUYTJQ05wRDWRy3g5K/Kmdb0cTz7L+xk1lwRnVc3x4NBcOdpWr4chP6am6KeDJnnSAN8haCwIwg2931m/1pnUQTJOPVECkstKkHGX2VwF6sKYgZG7VGNx43qFjX7u9Il60gSK2e4KPbf47s60IxjTS3oWaPPAYn6Gcw=","authorEmailMD5":"84b83058bc6f6bf7a2d9a998c3a63854","authorName":"Olivier DALET","authorUri":"","message":"This looks useful, however, I still don't really see the point of the False method: would you be using True(...) in your example, it would result in the same effect as your catch block contains 'throw'.","date":"2020-06-12T14:07:50.116Z"},{"_id":"eea66570-ac8d-11ea-8223-3d1371d776ab","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Alastairtree","authorUri":"","message":"Thanks useful. I seem to recall the default setup in serilogs asp net core global error handler also already does this, so lots of people may be doing this already without realising","date":"2020-06-12T09:20:18.478Z"},{"_id":"09ab44a0-b26d-11ea-add9-33f87736df0c","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"","authorEmailEncrypted":"Cqrmr/fBzbB89+Ftg42XZOM7aEJf3+m95AAc1o31M/32qiV1VVQiFnLnRNwrL4bOfo8axtRV8zuNfLlw8fKNesZXvqlOyeee/voozOZsdP6NcCE+yg8oOGuE+AxDaDj69CmMAwNI9R/GpzOpCnsLoe7YSjn0FdvBuCvL4ZHODPfTNmqpjCCv6Gvf6eagSHCL/ZNQnptM7Ho4bqaAtmz3TuJTlpnyuBg7jGJRUEOqcX1CpKWNj1de/5+VQ4wCNRe299GLOQXp8a3N60C1iQW63uromtMtIDCuKPIMF4qL/XlxJV9zNhbuyZMcebxQ+2q0H3ATC9xYi6rXikmmjdX1RnPUh3wGiBCpO0I0NmS5fSOpzwDg2KOKpvwbtTqRP3BjlNT82I4znAz+doIfaoJViCNU0MPIHJLJfuMwXTixTYkRYccnJIHGU6sQa7N50vyVuGgeFKl9rxV4hE+YryVF+vXrMGrGtDixdWVJQY6s6anamRTOmI225SoG3gfqjMXvDZnUvsKpsDgsrtDEWh1+4RIOiOF4DreWzQd3+mWwjvYPOTI2ZyhT0jKHdqxT0AAInOVPx6PtJnMv6omLchsgXroZsCp8xkOU7cZbnZYfFB2vhP00UnasInjsQTTo73LoSm8UNPnJPIVDGMlpVt/JUs/PuT2J8/CBlSmdB+IgjWE=","authorEmailMD5":"421217fde63e533d70a5bbd5e18082f5","authorName":"Shane","authorUri":"","message":"We have been using the pattern below to preserve callstacks, I'm interested to try exception filters and see how it compares.\r\n```\r\ntry\r\n{\r\n    ...\r\n}\r\ncatch (Exception ex)\r\n{\r\n    _logger?.Error(ex);\r\n    System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(ex).Throw();\r\n}\r\n```","date":"2020-06-19T20:39:57.429Z"},{"_id":"cabbd090-b29c-11ea-9f8f-e16f5efb5a82","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"09ab44a0-b26d-11ea-add9-33f87736df0c","authorEmailEncrypted":"AMUpbZlKDDx4KyASiIRX5RyxyBlrpd4YXiw0UR+g7OcHQJrR/Sc4YFyhwqhBqNrY7ANmxwO6wiWRrkuXAI8aoOGcxldyApI0HkZl1k6//9pZ4IfVjB8rlG9yub0KDGvWBIHKoamVZ24jeAthoHpyq/7mUrtKymE5I1zpvUNz7o1IC41WGX81tDSZuTEoD/xCQjTDY+JCKxPFRfyMvuQOZkkxteh2n5BbIB+nvKkqdRIeo6wfNawBBMEyRfSHnlzEqCfq8UVvPVw2CfCS0Rk7kGovjhdQkWUATx0+2TUQbpavfZnVIZpRVoZrYYfZgNM8bHVRkBdR1lxc1vfmmyqXWhfdZj5i6pV+NfbJWiqQTt58wDz2D2n+Oll+jy2nd6Mr2S5VNmSL3BNa0m6mvhSkty7bG1GA4ZCWDTmy/2NIaRW+AnVOEhh1ApjnUNiR9lwnwk60z/XBEZV5HK3U3KXBSU9ipnauyDJi7rlHRY6A4EJ7nUxF2WqCuuaafFHlli2yymhOV+FZtH0HPcJufXfyHnXAe12vQG/kKmMazw3ZiabYCaZXXmx86bPWbcvkukEW3D7Ex+WjVGudHv5A36RDuh+rt7kP3dz6ZJL/59h9Uxegiv6ZghBAC2IJ7kDtvhRE+kowo13SIeSj5d3zajMm9ZoKkHLCtbrvAujxE6/jhAs=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"If you're within a `catch` block, I'm not sure if `ExceptionDispatchInfo` does anything different than `throw;`","date":"2020-06-20T02:21:47.672Z"},{"_id":"559d5f30-cce7-11ea-8389-71cd6896da40","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"f9c96f10-cce0-11ea-a9e0-b5aaa9f7d429","authorEmailEncrypted":"gExT12PaHfKOM/ddRvXvclzrhm6AJkFvb0adDMPklPk3OJoiX2Eylvzuuc0Qy25U1qLC2oHm937kMhypc+mwA+Ac3Ij3MTIKwA+Z6gBclEhQHXAKTCZs5r1lelUpEsys3WdkX5aSm1JGqtNqezmMK7b2mRqlfcdUpppWn2opMQDMMk2eabQyLfcPMmy2y7totpaQx0yWN8tUlfk3FzmVjy2D4y4ORVziAmA2z90UE64ucdMpgdcLGIeRsGloK3YjvqHdBbYZwiTRSiUnlu3rIo8dxCnYMJmiMj0nMXQPtN2AEg+LDZTLesrpLsxnGXjDvHBU9U0poZOpfAD7UmI86jWZrg+fKQQnMmmkZ0/pFlFpcuYvpp/+k91pSHj6Iyp8s/0V/Tkdm04DvXLsRC4Djla+xcEFMOM+3/RTVtHtJgvmNbGHgyDrVML/8ayr6CFLoLskOsld8l7j1VOiOjJ2li8Xf6gM3IE0qIW9emxY9IrtB1a/pyTqqOoRbGHdSF9+akkU4d21zP82wd6sFloMlw7TbAzwFbaUSP0J77I6X1upL1HPnOfmJT3ck7Hw3U9fgYw+iclKfZiFL10bBmf+UjcX7A+gcDjWjYTBEDNQdowIPDWNI9iNkNqqs8AwxOZp+bvStc1mZKQ7lZ+aHVYl35VR/uF9fZtGjfxXsoLTJF4=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Yes. In this case, you would always want the `catch` block to run, so you would want the filter to return `true`.","date":"2020-07-23T13:20:53.745Z"},{"_id":"f9c96f10-cce0-11ea-a9e0-b5aaa9f7d429","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"","authorEmailEncrypted":"fUVZbLqqD8muhUfAktHIQaDvNnekM1E5ZaBztU+ha1eLEmFkZvna2GrVfTq6E88RPI04G1WZbZGAZYTC2foT9t+NUB5/bwS38N9qwNn1fos+ivWiW6/7K4oe4m3SVAO1ty4eeaI+/gMS3BLbbj+qMfQ88/aaErhiXi9+eNIFAim60FHoo5U/YRn32C0V6jY0IiETyjffXmDEeRNxPX5EsIb3O2F7re3AwciqJUITWj91LQbBc4v/Si5nE+q0NOJdNq9xiny8vEOW1TU4WW9qgTlpfBSXL5Y4c+6X7loYzvapfX1viiP8QG0sL+FLHlBd1844c09n2GS0xQvvau745xZsIGnp8IsEsFylKTL0bi9BwYOBH8b8mTl5497TSy5X8R3UiosY3pxbHZw92O/SzlQHFaRqZDS5pxN92/MITw0vss2eue1P4ISyxRFZ9YT6igwDdle6uscQDxWFPZXI8CdxulP5pvJUCECG8iFAVJ5Kgom2aqfAXvnMDfEgbUqjPaJbF/TWcI80Pxekh13RbweAtvOH5/py731ImlKLhOv7i9yipg7tn6g4YKQcuepvMvPvlGVUY6jnG/P0wcgB1FUnqV1FCp9KJanCSQAQ0M8U0QxEc0Gf/kwbQ8yA9j9Rv7ieG9mIiH4fMtPJodfPxBrrt4kZAwjn3bFK+81Qx+I=","authorEmailMD5":"67cca6565ce823a15b01bf82b213b967","authorName":"Enrico Massone","authorUri":"","message":"Hi Stephen and thanks for sharing. \r\n\r\nJust a question: suppose that I have a `catch` block where I want to create a custom exception (by wrapping the original exception) and throw it, instead of the original exception: \r\n\r\n```\r\ncatch (HttpRequestException ex) \r\n{\r\n   /* I want the consumers of my code to handle StudentsApiClientException only, in order to have a simpler API */\r\n   throw new StudentsApiClientException(\"Unable to send a request to the students API.\", ex);\r\n}\r\n```\r\n\r\nIn this case, I should use the `True` helper, right ? Because this is basically a way to handle the original exception, correct ?\r\n\r\nRegards.\r\n\r\nEnrico.","date":"2020-07-23T12:35:22.597Z"},{"_id":"6ccf4460-d279-11ea-846e-e9920a5fecd2","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"pete","authorUri":"","message":"Do not log errors that you throw, you will end up with multiple log entries that are about a single the same root cause and you will only confuse others and likely yourself when reading logs.\r\nIt's a terrible practice, don't do it!","date":"2020-07-30T15:29:14.934Z"},{"_id":"66da39d0-fc12-11ea-9423-c9d5459c4183","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"6ccf4460-d279-11ea-846e-e9920a5fecd2","authorEmailEncrypted":"I3ZzAiOFvhLkcci/CtQ+u7MtwXaBg1GoxpKAH0BnlyHeZuvEbTd8Pnl9YgPCmTsfYSGO7hDf69jyBHn9y+WjnunG++aez4Jf07ntUfSNIbwDoUCzMrRSX8iJW98hnuUoWaj4if0qvnZZnvVEnzAqSuWTBj3meDlkkUo2znnt1llJg7azokpXMgG1hVfismsGtw6mJOT6ZCUSEa0H6kHyQ3hgQQba11PHpnaHB4wOkRQhlcxTEpcN1LsmNVqY0sg9czUq+ylTKmU4YrsAy8ud76w6t5Kpjp3kWFxMe1cHMYoJh+tzgEWKPBBWBzHrQ2ZFHFU+mT2ABPWNicn8LprM5d3greuT2/Yu4LL4GAFCOiGQMZSOFFBTRxhriYlJmy587JNbR5L/nF0c6vKroTykb54FoY0nIpwSK7OhQcB1DUhV0TKIBqP0PrCNY5Tut4bm0TBHxbKzd5V9lU/w51/nndmjrRiQhAOMEXIED5Z3mv6+if0M0UQXMMAx/ntGMRjA/pBpbr6wNkZmsn2ywOkk0+YtDQNgJiEqdNCsgyME3sOnmoss411xMolnTScj1EE3jI8sc8hkli9nef+Mpf0MjMWhwCPRR3Vx3n2yFrEjcm8/Ztq/p1U2Mm3jzNlQbO+lEV7Ny7hCVHeGfeFNhrnJyUskECwPYMkjTS93ApQYEME=","authorEmailMD5":"52c1ee2fa281a382362618009ecbc6d7","authorName":"Marc Lewandowski","authorUri":"","message":"This was my first reaction as well.","date":"2020-09-21T13:57:35.679Z"},{"_id":"ef0fef30-fc7a-11ea-bd1b-0bfa4c095bfa","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"66da39d0-fc12-11ea-9423-c9d5459c4183","authorEmailEncrypted":"ptmw/+Hk1RmJIs5DjnnQRiauWLUusYYF+0wJZd0Z49oiCYllLDmW7O0nFPJy0R9rcHYBtmG/3R8KbQXvy9GnDW7LtN3tPuEWdtZUwYFViBwPKRRQ++i46Dxyv3PuHw3UIs26q9OBq4PBDE8z60kP7+fdPGRYIQJ5x94ru321MnqOzdTk6drVQ7Kd1e9ZMmSoicAMoHTGro7rUiAM74OcVDHpS+QfNpqilh9viDrsfi36Di1f3if4lvD+5d4lawo6QVrQ0yk0D3TIlMZTxQMvPi4/NUY3gTwptIYwqkeh8sNcM3Ie8qqtuGwdo3ae6aC2iyFeCF04BJ7nq0SR93T9SoSqaMrn9nCm0rv/RpZzQi78UZzODOMyHpZko2p9dAZ0Wx+6TF2DrNKEQIUrRkJZBK9zpEX9VpPRIqV+lRCB1xuV0lkhrBTDOBeGvQxddHF25D+F/z/UjgQfDJLO9KZBZgHacQ76TDj9+W5EuNGI1NoyFWqw3Y5SnyjCzPLv7KWC+MUZT2PscQwpH4tF/ex/N+34DYvsBMtc59KjNXL7K03C4c4bfh00gVjBSXcoCHFGjx7DV8RQxENBq3GMN+beCgb4HoPv16B7hq/dtUJHfiIJOzp7NCytvRYQT6jU3BVJ++wmcVN6/KVrP9SuHm7751X8CF566eiTxmmDiwxQ6n4=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"I'm not understanding the objection here. This pattern is for top-level exception handlers; they are logged at the point of the throw, but the code to do so is at the point of the catch, so I don't see the problem.","date":"2020-09-22T02:25:51.701Z"},{"_id":"572e3440-2b61-11eb-8cee-8fa79486417c","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"8faa6080-2b5e-11eb-8cee-8fa79486417c","authorEmailEncrypted":"F6ClIrXqmhEM+Q2TYnQYtZ++ikVUVCjaz5zHF13HjjyuTPqZRjdLW+1uuYtUJgwR0T2NXz3V4pbKzGVPVE13EecothX6zDbtmqG5SmGj8y8nUZ58tvcFKP5YhzlRw9XlkaxCQWr+U1qjlcraqwwLY2c2M3RorOGUlhus8aV3XG1d0ILa5BR8KRi9S5UwArzhvBnP2PtzOT6JHYWQu4yjBh2F8aQIgyyE8EP0r3iB10jCKu+FT9/twOs0dQf1f5FNqi9z+SnCsLcN7Bwgz7z84J++tCURhuOT4+sxx0zZJN2ZrQjHBoN2/YRt3QhikNAxy7hkgMTP9zCetnB1oIl15DOuEYRW7tRVF21UMOmZVYS+IjawBXFsCQTr+vvr9A1kAZB+2f+VQdM5Ddsd5yBewsWHkE8Rbw8fDnPnO5G0Ae/iN3jnx2tMLyDcKTdYgc+q5T57gtXnIBZfeia2UtQlhsCCW+SpQIPj72/St6pofnf2tgY1eP4mWB3hP0jhySjzKxKAiUgW5evMW/e1R90zihSGq/Hsp2hnvmVZUgmdKDwLp6/fXFZGj0CKYu40yAFEYs+MfM1kWu4wGjOuxq6srlcOajP4UscuNeXRsyQcg4jPjohsvtpRN/GJauZLSzYNMh5O4isK72YcpNbfUOLbp1MEuT+8v0OsrF8UjgchBYE=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"That's a fine approach, if you can do it everywhere.","date":"2020-11-20T18:51:04.163Z"},{"_id":"8faa6080-2b5e-11eb-8cee-8fa79486417c","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"","authorEmailEncrypted":"d/YwpKCqrPCWob41LGj/gVpMGGBwj2HnUCjwGu/Qf7p9UBORg4PgedJ9hube3xmWO8dC+yDRXU18JEqX/D/q91+QuEI/FEyOaG+qGELdm7jgyrMxn9QlAIiJLx7TIQziNSrJftT5pd2+Rv7/HG0hy3j3EbFoh1lH8QYuHDcGCN6Ov8D8kMnTMRrKmjDFCIqNAGile0fMMjXpvZ73WO0/z4/Z0chCx0xKIUibm9kAqHyEZSaaym+OqhO3RZbucOx1jPQOJvIHMbherZO+bxJVlei78hdEiXfIHwalXaSqEON0bTteOwc5Q0UTP2q2XrCK/i8RyHA4OZyHQezC7mZF9uFUGyp6vGIwpc5ObM2Fa8pRyOiOqA+KFlW4iUmzxl1P0XqcUADEaD62vIS+yX0XhpjuQ6GfRq5cIfjwVAQTq+PiJmfu2Q05T1Bgr+9lYTAVzavrvRGSznameuRFFmMeRJn6M7jAmsZuF12JAX2UrZPXkYriMjUCC7WKL336peUSCCvG5cLyHRUKRJiz2dWVXFhZTLA3sHOGhIDrdlfdTFxD5WrGeuanR2YCK1tASEWo6vP2H1NhAXCEGwlgPoznoFJPI+8a0SHr42d5uihpc0um5KlI8IE3NK1sJk/v9uimh3/Bu7Xs1lAhxxMCAanjGdY69C25jLjJTi6dt1Zrfuk=","authorEmailMD5":"a1ff38f3fbd7c8d46093ed62c43c065a","authorName":"sx2008","authorUri":"","message":"To keep my bussines logic free of logging dependencies i use the following pattern:\r\ntry\r\n{\r\n   var customer = context.ReadCustomer(customerCode);\r\n}\r\ncatch(Exception ex)\r\n{\r\n    // fill your exception object with useful information\r\n    ex.Data[\"customerCode\"] = customerCode;\r\n    ex.Data[\"ConnectionString\"] = context?.ConnectionString;\r\n    throw;  // and throw it again\r\n}","date":"2020-11-20T18:31:10.509Z"},{"_id":"e136c200-39b8-11eb-8a6f-1982a8984614","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"","authorEmailEncrypted":"we5bhXy6lQXzMfXmbJmFSltkwdXeteJ9ASpHAQyAT3xbaXOVs94aycztJeWj5Ga71HVsHvJGSlE/LZfIc4F3rbDxLu3NxmBqE/pdavRwqlo8Qne0vvo5ZEwHgYB7H+6KkgQzLsMY6CWx3ZR0hPa2vW9XIQICoahO6bLQfdXSV5sqlfYlhrnf6r2+Ih/lV40HtPTivJz3tIzXzf8uJl2kcz4ugYBlXwURFXy/iEN1oQT1qTLnQK1HkP9PN11ixoIchuZOdyKvn99iLhAlE54v+Y8Wj8kgnwSFu5WoM5hUU0KaTfoAXV9khD08b9xUhOQYNoOE2aWySn9MnIecguCEmK2vLu51FgPG8kv0Jr+zAeSB2W9jwZZxu9TF8iLsfGHblWZe/02Qp2DbcZZRKc2aQaUBbFawQ7ZPHwf2OnzTku0srN9/TRecmcmB/cObX9Q118mFXh0TylhEirBJkR97Ki+F4pZ100yQy04BA/Zzje/YIcFJlygGaShjqzueyp0BIhmHyoNgsxm0zhNGluHmj2nzcip8Gs/cLYYVWFAwz2oyd4SNVHoueKd+OK+E+dhhEnXzXBxpZcoKgtysodZXhcDmZs+pVskDTsfrO4kB6X/epsgp0TjVQLjfQrMfqfnm+tGn4OdnMB5u+oxKSjAJ6/qIsi10g5Ddz+gBh3YDdwQ=","authorEmailMD5":"a43b6fb99e31f71b0492f54c1426da29","authorName":"Christopher","authorUri":"","message":"I wonder if Async threads could attach some \"PointInTime\" information (variables, code lined number (derived from the symbol file/AOC optimizations included or not), or maybe I've spent way too much time with Xamarin.Form emulators that it made me think in curious ways.","date":"2020-12-09T00:52:58.293Z"},{"_id":"e3439d70-39c2-11eb-8159-85976fda40da","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"e136c200-39b8-11eb-8a6f-1982a8984614","authorEmailEncrypted":"Nv/3QBetuPB1i1OJl9c7ka07INx6fXe8u8ENbSoLlClJgG1ECZ7UIghIvjHXLAqAbPhuYlDnyU7AoK5ktacUy9Ja15b1N3fEzOJ2YUNJY1/CoeswzR4TYZCmkc/+kKEjfLYE9ofSQCwhQS0yxiA7O6btCqIubnyfttPTzKHmpCKPzvAAiB/fjJLsJY6PNwYoAw0BUa6iQEXbNZCjYdo+xIcYwtVK6+8MJv+8KAMg9GASd50HCvWARUqrzx8gZDuf8eAPdszj/k3DSSZntDY2D2JiZthZvAXn4N7PEqA498Jrb80Yqw0PuIxoi4R+E0vVTzFsijC29ni7IOAFSbjiO5Quh9HOjoVsoxKMWM3BkHT7odg/2xg+zZJCVdFj3PS+op+/fkZQ0hufXo2J8X9var6eLQFDmvbHZF3CNygdGPJ8KZiVT4Zs6aHo+hTzg/Ye6bEtPKorKtaSmuKJh2vNVsZDumwxehC/HvACwWUbw6go3XLM8V45Uk6C0zc9ED6gb5UaJ6bBq/4KVlIn66Lgq1OKkVpZz0EiZA1Oh3fheleoNlFYKtG+sOP/S6mHwQkq0/F912zvCLA/1Q1jpE4+8C9jCPCtUPe20VPu/dRcJswsjohi9fj5MZyXCyYrmQ5iI82Ahqukh7rtGYlaMV5pEzJkJfLtaF5wQQ6925DIYK0=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"That's the idea behind my [Nito.Logging library](https://github.com/StephenCleary/Logging): it automatically captures the logging context when exceptions are thrown, and then that context can be (manually) applied when doing the actual logging.","date":"2020-12-09T02:04:36.755Z"},{"_id":"30def1e0-9a5f-11eb-a59b-69a8b94b22f1","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"53a99950-9a5a-11eb-a59b-69a8b94b22f1","authorEmailEncrypted":"oZiPfciioLEb4tGrv1/RHfJOePxE925wKiRB0Pfpy83sXoz/YwaUsNBGugu1Y/vQJusoReiAlvcyevW7gmrQ7lO6OuWJCd49Nqa3EK0yTTO2v2CFpx9yhRnfIOcAmRv9lfScnYmgM0p9tBSztozVZI7K0lgSm+RQ7Pdfq5FzrcK6GAdS1oOzPX/Pt905hBjGxEiML78DJvW9C7tGEqKrshrUGHHT4TSgyczs30zXKDJJNSzPHNP3mkR6kP3ybv7gPT8Z90UrzGnxdH1I3TVnJPRDI39ZtdQf3rgVpnpl0Hvb3F9L5PKphd4C/drhA7L6VV9CS/eeXTKlUZo3vv2uM6Wv4sim0/Mh/PqqKiQnN0QhLUuxcfWLWeNguIAjs3hL4k+A5SD425GVu1cv6EgtKn9Qd80/ljpeREopGWx0ECFjp7mwru90jWFnpK47+pv/Q/TuNbM+dEcqK86Nfzik5DBisCha+8VVYtBwmsGYG1Nva+HTTzzH9jXAbXsRHPAulPfX/HrijFsaMYcQCuOuWqBowRYZYv6b82QJeIwS8IVaWTvvZk7VqF0YPyyVQepqJBu4h5+hIHMLftrWsesBbvZTZwV8w+gYbCN50v8aY/9ZRGc4Br1OqxrOHprN6psI0WXD3hUsTc20EtR6G7fbSoDJgpfe7FsZYnmM3SSsrq8=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"`throw;` works for all methods. If you have a `void` or `async Task` method then yes, you can omit the `throw;`.","date":"2021-04-11T00:45:20.055Z"},{"_id":"53a99950-9a5a-11eb-a59b-69a8b94b22f1","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Enrico","authorUri":"","message":"Is it really necessary the `throw` instruction inside of the `catch` block when the `False` helper method is used ? \r\n\r\nI mean for sure it makes the code clearer to a reader and sometimes it is needed to make the compiler happy (when the methods holding the code returns something), but for methods returning `void` or `Task` it seems to be redundant (if my understanding of the pattern is correct).","date":"2021-04-11T00:10:30.932Z"},{"_id":"66d7df90-9a65-11eb-a59b-69a8b94b22f1","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"ebf19c70-9a60-11eb-a59b-69a8b94b22f1","authorEmailEncrypted":"eNCxOLktRsIcp7biFPz1sZCF9xbrqz53QFC4hgl9d4lroYyIbA8DusJyIBzHlvN9bze5l5lA8CRGymmVCs5OctpMK8Dim/qViC/e1tupzKUGJenv1435aKcXXTcGq7QzoKYN+DLPTKSLyz6C03na2mZdT2EDqy1PF25UMFcyRJainZT6QrmLHOuZu3v2JStQjKKwJcdXBuwzSislHGF0d8NY8HxqiSGGnhZLAAbZ0vDXny/9pJXNYDLQS0SJA7FxdtNZrXQV5C0Uu9/O4grX1MDEfhJYI+QIl47douHdApzamccshje6sXI4vb6O/7gWKe1QuKLnSRhjIaANPtxW3c2SlkP/z7eJ+RZJXQVJj3J7G7j1tD7Mn7avSev7TCXEAO95UxZr/jb0RrOdn40jHuLT9SH90ntWAEaCeQ6SsXBpGNn5KC9NX7/XQwzCACKXTcpbxBiyqbsFDJoD0UAhVeo7N7Goc3rFfiwnp8xil8xmXy+y6sD53YbSmbLnD2DorIlvPzYPYJyLWR0Hl05PTsW3U5yD0OFDk+Gz8/Ru5iIj1KjjfleJYVso4Kgt/2eN9T5Mvfv+SXpMsK2LO485sP+ZlSj0Kb5uVIqNOKJtDcgoawaG83FyAN+9fSR/pT3MTf0j+LritV+bHpPeoZEl43IdsLH+0z3YuIQM7e7pcRU=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"That's correct. The `throw;` is just to pacify the compiler; it's never run.","date":"2021-04-11T01:29:47.498Z"},{"_id":"ebf19c70-9a60-11eb-a59b-69a8b94b22f1","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"30def1e0-9a5f-11eb-a59b-69a8b94b22f1","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Enrico","authorUri":"","message":"Totally makes sense. \r\n\r\nBasically when the `False` helper is employed the `catch` block is never executed, because the catch block itself does not match the exception. Correct ?\r\n\r\nThanks for the clarification.","date":"2021-04-11T00:57:43.352Z"},{"_id":"3baca660-0910-11ec-b01e-757f10d01bf8","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"","authorEmailEncrypted":"HYg2i71mLrBAJhx+xEBOL09dlASRv2+POe+fLQObfUWX0+EJ7oqyybeBXg0+zgANVMF//MEiMExUPkCqzxgv1ViTjgLuUqb0rH8Szjd3iz3nqLySXvMQeqwLI7i0WMr0GZaapfJnjCZiU200ynr5udvn/vlxOtSPlPDqneQSzLfK+KlVakrlbQhEia9/2dBf9UzPvxyrtv3es3yDR6FHQw1MtsmwCp/Ry8yzgV4lvSszIL6O0TTiKPBXoNM2JH1iGfKYVQXGZH1qMy4hMoRs7l83jrbJxkEzxEPQehPEbVeGrqbl3UDxOiuf6EoxEzLdI7yRt2Gxj6PKKHRtYpLmhcSbZXGnuHolwYvvAsMED9tP0ZhTogwz/qxdBnCGxU27swtb/BlPSmEDAde8h//8cMaFGYffu6q74wSAzXPE1JW8FS4c73+1+KVOMcCGb2nIQTvrld9K4YjOG0IPPtUZuk5S7Xd/lJFEUYgpNLRWzuaAtnc9dV0lozGMgZXSmnE6GYlrQ+e+JzG9cvU5G/FZ/aGInrAKzGSLLJWSQv65jI1Swl4jxdvzDR+LkD4TWqTwNEozs/cxIaHcp2/3Crf1wbEJUeBM0BCdUNmZrze+nmvqiZQCZUuJJMOjBZMbCsTBvRhsFQVSDOIP5NRIqQcrOmEZ8trMVg20TgP6Uqd8K3U=","authorEmailMD5":"df9b1cab1c92b5a3ca9707a26333f53b","authorName":"Siavash Mortazavi","authorUri":"","message":"Hi, thanks for the article. I've tried this in a sample code and honestly, cannot understand the benefit. Here are 2 things: A. I usually log the exception on the outer-most block in the call chain, because if I log the details on every catch (or its exception filter), I will end up having redundant pieces of info. Then, B, I log the whole stack trace, and gladly Exception.ToString() is overloaded to dump the whole unwound stack. So, by combining A and B, I can have the detailed log of call chain and the line number of calls, from inner most block that has caused the actual exception, to the outer-most caller. \r\n\r\nSo, I cannot understand what extra \"data logging scope\" can an exception filter provides. Could you please provide more insight? \r\nI also tried to put a breakpoint on the 'when' clause to see if the variables in the current stack (in current try block) can be read, but unfortunately that's not the case, either.\r\n\r\nBy the way, when you use False, the catch block never get executed, so I think you can short-circuit it with an empty block like \"{}\". By using that and do the logging in your False method, the code can be more concise:\r\n\r\ncatch (Exception ex) when (LogException(ex)) {}\r\n\r\nThank you so much.","date":"2021-08-29T21:29:46.898Z"},{"_id":"289ebea0-0f82-11ec-89e2-71c6940e3f6b","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"3baca660-0910-11ec-b01e-757f10d01bf8","authorEmailEncrypted":"RFcSZgbqnavonNXXHQ945hLm5qMzQbQvBALTRfvafEmd4KvShm2srT8ALObDTUF/I88I8oA4ykfkJFY7C4af3xpI9flemGH5eMPu2c/ZBx/XqHvPlKozRVI1boGxEawc/YXVN4tpOvPtKUEjLjRdJuykMp9rKBHkoOC/itHObRRg9VVxeLYyOFR9x8yDOqEOI3RRTvZBw6DhxEWEwMf405Gohsg9VFEvBGAqt29gWMuIpvEaTEMEf84CAt921zjQDAjv+YvMFbn46JadI0j1yD1lQxz7SEjT/7+FOdxeUvNHbUIG8KJGBxn+7AKZ41o6jpIWyb5QwtHMa0u+ZEOg6xsDTF2k1JtqKBh/k9Zwu8TuLNroCWR0DIVAZrdBu7EwZ2JY9GhgFf+4BU0KgraH8pyKpiX2EyajmXPGpXgcbpQEBDN5Pdj019nhn4XC3P7sB/4w0d3cWkzt2BsY90fKnhRFfNErJmpbEjTVOj2JwE0EgV3ufBbRaZz8pZI+qV3JBACCkmUlmMRi70oXtLD703pk83+eFyNgsFaeZDHixT5bOWiqd4EzXsxI3pHe+pCZyOwXraMVnoKH7ZcPGqOjW5gYAPwrHJ5wMJY3a/UchSH8WVIDzlXmOUZWknbEFkPXBRtYhr0fpIwzkOlJ6pEsY9zHIvN5TsFbsFG8wKYAUT0=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"The point of \"logging scope\" data is that it's values that are often useful when debugging. One common example is a user id. The fact that the \"apply user id middleware\" is in the call stack only tells you that a user has been logged in; it doesn't tell you *which* user was logged in.","date":"2021-09-07T02:20:24.448Z"},{"_id":"f26d5960-aebc-11ec-94de-ef7f6ca0e518","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Spud","authorUri":"","message":"This is interesting, but as a one man dev I much prefer the simplicity of:\r\n\r\n* top level function that sets up an AsyncLocal dictionary (ambient context), and does a try/catch around all business code.  \r\n* Log a single JSON message (with any business attributes in the dictionary, like account_id, user_id, api_operation), and if an exception happened or if request succeeded.","date":"2022-03-28T17:31:48.912Z"},{"_id":"9a02c620-b02e-11ec-82e2-516ed88685ae","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"f26d5960-aebc-11ec-94de-ef7f6ca0e518","authorEmailEncrypted":"qQIfc/wP8EdjmmhbnMhwx7SN/0fKluJPJcpfkKOvEtJW2huGF+Pi9hZI8GLE4cXPoRk4q7IS5yPQfpVToDIRN/8yoE18pV7JHUcU95Sm45iVkqsshgfz9vuU/G21A8OphiXXNe24eK3ezYUGtTre2czQceMwrhCILVzxCYIAzzT8v8L9zvK4GdiSAQexP9EG2s/KIEgHgD3Pe2+kAdaeKfnhw4nIn1mAoZSidqBYc6L+as7SjsD5NvWSQExMEuNOeuDaxbcPW/1UfnXUP0OTkO6shEvgpM6UtmPBHLEtdrpk8DFyhPhU0JLxRzrJ8OYniM/nNLJXx8j5aSFW9aGAZS9Tou2ZTlnEISYVZdWj+nJ14y8fg0rhjCcM8wOzAOASNodPuYI1S1XnAG8DFO7erOX5yDAJzpHN9AQro+zRBIXXTm1cSiijDUkujb1g/V5TVQSruSpVAKJUxt8WLvvVt14X+D/PdymDKKkwwearS9loQVrj2Y0lo0VhHFLH957P26LoZ5AUaxAmEWXFsVMgJczH00gzcD4OyoYg1yx9gak6qwbAAxiaw5ESzfrQ+51u5aTLMZHOKUud3F+j1qusEEkj5GpVVJM0zXmrQowThnt1HA43iOCVc9ui8XyCOZrHH8iBrG8CFABWJ/TUabjKabsryG7qF2yzx0Y60uWf8eA=","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"If you mean you're storing mutable data in an `AsyncLocal<T>`, then I can't recommend that. In the general case, I recommend [storing immutable data](https://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html).\r\n\r\nIf you were very, very careful about how and when `AsyncLocal<T>.Value` was set, and if your mutable data is all threadsafe, then storing mutable data *might* work. But I always store immutable data, myself; the edge conditions around storing mutable data in async locals are too scary.","date":"2022-03-30T13:37:54.202Z"},{"_id":"034e3000-b0f3-11ec-81c4-b35731576ab0","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"124219d0-b0af-11ec-a952-2fb4cc7a5584","authorEmailEncrypted":"ciuCmRKz8mNozq5P/3KxvemVT5vJDXxs44lEJ2DtPh4RpnyMvHFPs2G0tjYADAIPIvxHtYuMAiH9eGKFKWgKu9UKACgnz8Vyu8cRHr4RUEQ8uy3FIiJPwPgkLQ82HQY8Xi+CVcizCvLj5TXZEMMMOkYSFCsp6GsA1L1KfIPATwSdB54w8TCTY6ICZ1aNSC00bpmq0XGcsFO3sCpKF0/+TOxGtQKoiNfTYIF0+FJwAaqsdtZkom9l4wg/z/NwqFI54gin9ofb+CYihezon/y1b8jkn4ibnGbeZGX08yUM/QUmrMvp83vb6nL2mfhEOP4mRboR/J8TvmpKjxW34n9bsgMitcqIXZYg7mH2JVekvEgI4h5d0NR3hTsiileMq7uHcN5jMq4f7DhurrIymP36fCIMHNMG/LOQZh1CFd86qyH33jz1Ff6etF2bvbIlTWMcQjioszy6kgE58in9l17Qqio0GCnM5I5zTCBfr2TyrGmJrH0ViWMr6d3aD0nEhtF/jRTYzYVA6q8JYs2smXkiEFeIG47YQ6E8jCZ7fnyGeXGIz0Sxl0i5k82CtYsAXUXwcQdzi2A58R4G5TXPSOu1uyDqKAS0HWt/YYvVsNw6LwZFmm5aHijv+f1VA/VUu98JkNB85r1s1KJnHupMiqSxbAt3rdku8DIUV/06zRN2eyI=","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"What you're proposing is exactly as safe as `HttpContext.Items`. I like to leave open the option of, e.g., `Task.WhenAll` where the concurrent paths can each set their own scoped data. I don't use that kind of code on *every* request, but it happens often enough that I have a general rule of only using immutable data.\r\n\r\n> Will threads or async win the future?\r\n\r\nBoth. ;)  Async is really about more efficient use of threads. It's not either/or; it's both/and.\r\n\r\n> Also, I like the ability to use exceptions for things, even signaling a 403 not authorized -- what are your thoughts on performance here. Is capturing the stack trace too inefficient? Should the industry look at perhaps a \"throw without traceback capture\" optimization?\r\n\r\nI also like using exceptions for \"out of band\" responses, although I respect the arguments that it violates good design rules. It's just so convenient that I often do it anyway. I haven't had any performance concerns with it; those kinds of exceptions are a small percentage of all requests.","date":"2022-03-31T13:03:52.368Z"},{"_id":"124219d0-b0af-11ec-a952-2fb4cc7a5584","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"9a02c620-b02e-11ec-82e2-516ed88685ae","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Spud","authorUri":"","message":"This is asp.net / kestrel, simple http handling.... I would put a pointer to a dictionary in asynclocal, so the pointer is immutable (modulo GC relocation?) but the data is obviously mutable... don't think I need a concurrent dictionary because I'm not using multiple threads to handle a single request.\r\n\r\nI don't see how this is less safe than getting the HttpContext.Current (whatever it's called) and throwing stuff into its .Items grab bag...\r\n\r\nI read your blog about the stack and am not sure I would run into that complexity... I would just be adding attributes while processing the request, and destroying it all at once at the end.   And of course, not starting two threads that diverge or conflict in any way with what they would push/pop.\r\n\r\nInteresting thought experiment... never before have I imagined an \"immutable stack\" concept being useful for anything...\r\n\r\nBy the way, I noticed your point about this exception trick not working with async.  I personally like async a lot, it's explicit about what's happening and seems pretty efficient.  What do you think? Will threads or async win the future?  Also, I like the ability to use exceptions for things, even signaling a 403 not authorized -- what are your thoughts on performance here.  Is capturing the stack trace too inefficient?  Should the industry look at perhaps a \"throw without traceback capture\"  optimization?","date":"2022-03-31T04:57:31.615Z"}]