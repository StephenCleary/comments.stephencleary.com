[{"_id":"7aa5dd6f-e581-3ce4-9f17-fbce0b26a547","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"Actually, that's a very good question - one that I haven't really addressed anywhere else. I would say use AsyncSemaphore (or AsyncLock) if you're already using AsyncEx or if the asynchronous methods on SemaphoreSlim are not available on your platform (check out the MSDN links in this post to see which platforms they support).  \r\n\r\nIn situations where you have SemaphoreSlim available (and you're not already using AsyncEx), then I would use SemaphoreSlim. SemaphoreSlim has slightly more awkward usage because you have to use a finally block instead of using, but it's not hard to write a disposable type that cleans that up.","postId":"2013_04_cancellationtoken-behavior-with-asyncex-1260b370-12c7-3bdc-bf6b-afac585327f5","replyTo":"","date":"2014-05-10T00:45:54Z","timestamp":1399682754},{"_id":"80439f90-34b5-323c-8cc3-e00c20b3975a","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"So, to ask the stupid person question here, why would I choose one or the other?","postId":"2013_04_cancellationtoken-behavior-with-asyncex-1260b370-12c7-3bdc-bf6b-afac585327f5","replyTo":"","date":"2014-05-10T00:18:09Z","timestamp":1399681089},{"_id":"c7d3a450-2416-11ed-85f1-d95c93eccca8","postId":"2013_04_cancellationtoken-behavior-with-asyncex-1260b370-12c7-3bdc-bf6b-afac585327f5","postUri":"https://blog.stephencleary.com/2013/04/cancellationtoken-behavior-with-asyncex.html","replyTo":"","authorEmailEncrypted":"qOdch6xKEfjpM5J20u4W7PJuc64KwruZmy7vClZ51tiafC4UfXQakfXXqwJnvXLC3eKqaFBZRE02O6zS45FeXdy4+CzaQBnw2Hy1mpraJt4xhSqXtYgnl0evVMDZD05TuBJmd+APTO3SFwYmaImqnZcBEhO3cw7SBBphSlj0eL8Lz3VaLjOi+ERD2hjBU2jrinS22E+WxaxB1rlvG5HzC8jSqhjVxHigocEwKmSHvesc1BajRreYTfquhNtNZxjcKLYTS5E1DbXN8SsX1Kkww3DoLzqMN51+D4p82IQUmBBYWNJy48Vxr2jo3arVtASVFwqxP04g7BBDgFxi4MBmVu1KFsBAKGIGRSKGaQZOO24h8+PrPfJ7YucBSN+iYQwVRJlfPkLKXC8MzL5zAcQyn6Ypx1BcXxqeAJJ7KgiQ/cOJXRliT4Iw9ZOuxnIsbT3HFNaeOHKd2SHrdhrejkWXDclByZzZ3rcGJP8tnaYbj/SfM1MlsUncDFzDUbp1fMHGtclo3emaBRPdmFd+FVptgV4Xj+dpCDh8CHBVdPs0o6NR6vC8l/VkQ4iijxXS1tXwl7jUz/D2CEEoajdUAZs5dbefS0bWOHE4lwdGIuRMQ8zVkt/0wyRkWb7XsH7xL83aMAS9navv38WtlBUkgUKpZzF3lEqTRf/7xp+2DVWFXqM=","authorEmailMD5":"b2afb7e356d278742f347baacf6489a5","authorName":"James Kidd Smyth","authorUri":"","message":"how come this spins up the semaphore max count threads..\r\n\r\n            List<Task> tasks = new List<Task>();\r\n            for(whatever)\r\n            {\r\n                await semaphore.WaitAsync();\r\n\r\n                tasks.Add(Task.Run(async () =>\r\n                {\r\n                    try\r\n                    {\r\n                       await WhatEverAsync()\r\n                    }\r\n                    catch (Exception ex)\r\n                    {\r\n                        Console.WriteLine(ex.Message);\r\n                    }\r\n                    finally\r\n                    {\r\n                        semaphore.Release();\r\n                    }\r\n\r\n                }));\r\n    }\r\n\r\nBut this doesn't \r\n\r\n            for(whatever)\r\n            {\r\n                await semaphore.WaitAsync();\r\n\r\n                await Task.Run(async () => -- DIFFERENCE\r\n                {\r\n                    try\r\n                    {\r\n                        await WhatEverAsync();\r\n                    }\r\n                    catch (Exception ex)\r\n                    {\r\n                        Console.WriteLine(ex.Message);\r\n                    }\r\n                    finally\r\n                    {\r\n                        semaphore.Release();\r\n                    }\r\n\r\n                });\r\n\r\n                //System.Threading.Thread.Sleep(100);\r\n            }\r\n\r\n???\r\n\r\nThanks in advance","date":"2022-08-25T01:39:38.048Z"},{"_id":"ff740690-24c3-11ed-890e-190900e04442","postId":"2013_04_cancellationtoken-behavior-with-asyncex-1260b370-12c7-3bdc-bf6b-afac585327f5","postUri":"https://blog.stephencleary.com/2013/04/cancellationtoken-behavior-with-asyncex.html","replyTo":"c7d3a450-2416-11ed-85f1-d95c93eccca8","authorEmailEncrypted":"lnTk1YfXaNCMhK7J0ESv7mQq0pb/J5ITLKvglBCTeaf5lDqfPpNz9Zzp8GdQNnQGtoYtwU8Y5jTAqoPXbmukg4lxs9l0ZDuaQXj3w/8fxaEdqiQqzloMSr9lswFEuLhaNqcCNXKrHBS7YNbquGZH/m72jlf7MOT55esWCk+hXgT/T0fxUvA9i6KuYBjHH/hXXPZPieopyhXByJvTOnc51GnGFhfYaTy7mPXYDzNZ6dYJ/QkoCH4Me0OFbpxR/bhjM64lAbuO5SvtplwNvZTpdyiDhbCD8S0/jLv2a4o1IQ2sTxrVWxgFYbP4j95KOMzSowdBllEO+C7CoeS5enD2+epXik10Y2PJGHUMLby2rY4hIEqTprd+x4Dzdorbr2ZMzzC3aIe86CY8jPIGAxSoglgUDvKigdpzXmQpqqrdP5+/6HzP3cMnsMeQiq138J1mbMSqLBLKzfOuPilwONW0ps29cg8FzCIatbFR4R2elPR6rD4ZZYd/4t61L05KyRWwuLO5s08pAy2z1jU0XcNZm3I0UzZEgJyr25Uk2Ph6AQ2cA4Gxdktv1v8xPXwvqAvWKT74puybxDSexjoCjposPizYRDnwHchbWkMzmORkXe5FNXt2OG6Pf6Ku2LRlhyZazMnlq29GTNyB4PDjc/3cvZO6+spI9eIDjGZBnVl/3P0=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Because in the first example, each time the loop body runs, the semaphore is taken and then a task is started and added to a list. In the second example, each time the loop body runs, the semaphore is taken and then a task is started and then the loop body (asynchronously) waits for the task to complete.","date":"2022-08-25T22:19:34.301Z"},{"_id":"c2846750-296b-11ed-9621-d7f08e71ff9a","postId":"2013_04_cancellationtoken-behavior-with-asyncex-1260b370-12c7-3bdc-bf6b-afac585327f5","postUri":"https://blog.stephencleary.com/2013/04/cancellationtoken-behavior-with-asyncex.html","replyTo":"ff740690-24c3-11ed-890e-190900e04442","authorEmailEncrypted":"QT1N66m6dK6KY4ltsFh25rQBKfq7QLAkrDFpnmIlHi62cuDd+S20UZwSGzr3vsLTiLPGaZx/G44O42E5qt/0uEsytcvpsnCnoYR0NNqrMOpwQ3sMToKztUePjC5WX+e99SSGiI4ftpIZwT86/tnkX9AfuXaH2FdxiORONyGcOEGf+XvmTt4TYJlUYzsqtujJaI+q6MW68PlbO+73Ie+CIzhQPuFpDrwThrXb61azrXnJEu/ZeCEEtPgIanmtemRsuQkoJrUXbGig5GQiWElDDlQ0bHNiicao5U7XmMLVErVjJIPDgSCqFWfETvLBnXBhYjwJkQIaJ7XmyElgAA31rz8GkezbMk0yvlx6uQ0x2keOIWBwajsKF+B1bd7+P6Sq/cUDh9cBR57T0EUxEmNxxUWLzRA+uPRnnqPq0UOWfpbaMIC/oihpooSzJeqsH8jF+BhnEooNfIwdznp/PQp7dgVju7uq87JBmnz0FOO45rtwFmQfvKTDmz+LkSy66tqEEpAmLnXDpk48uV3fjY1x7FjQxoGhv7aoAhqS8umwntbsiHzMxzXbSglA8L9lxgT0mLnSu47BCLXrC7qhDxYmhKQrUCjiEgE/HBuEty5Uf+6hPnbbmwXapY0YsyUtnfl1pYCIbttGG4/cMPc6TTWzLrOZ+Th52w323hnkUy/8QYY=","authorEmailMD5":"b2afb7e356d278742f347baacf6489a5","authorName":"James Kidd Smyth","authorUri":"","message":"Doh.  Thanks, it must have been a long day :{","date":"2022-08-31T20:30:32.226Z"}]