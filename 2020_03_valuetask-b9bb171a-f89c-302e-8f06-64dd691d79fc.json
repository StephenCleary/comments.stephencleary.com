[{"_id":"d3203640-7282-11ea-9719-774f52685bc8","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"","authorEmailEncrypted":"aNcCdVabwRqnCO8hj7gVqdPwBxb0bjdCR5lgGGQW6J1KrDq2JIXS8QCzopjTP3gO5n+A0DLACqLlR0iXahdDOJYb5L4Aey6b5MGvuZIu1aPJTJxAnDoy8Ze6LfM4UOGCCOA3xsnqoa3ufidYluytf+AHxRsRYoxiWuBp6T4jybLavSIDmyIX2ojjBQBZej8S8Qy2xWyb/zx351E/W6JxVbvAl3g40tdquZF3V3H7YP9Ub9NIa0e8MEcq3HcIR6YH/LEwT2T8VQHHw5HpPSVmzj9vo3ESA/0Czd/1YzfHtyRTtHSHPLP1KvdOZPaaIS3vENCs6LgO6k2CBFH7HropaHkwxGrSK/hUsTYWUk4qnYbRSVs/nDd2wi3d6MzKjTY3eiJG6/M7Ao4h/kJcC5VtXj8FhSgdTkaSZvttc1B6FwGLKDmLfgVLOFdUedSPFYPwXNvTG6eQo1Nxrs1QpK6t3W91RTyHznXPBMZcEABtzu9hDSb47IvObRwp8QtBra6Gs86d2gTe2+Ujdoffv44zBdZU5zkmmqDJ2bgUuSytbegscixQnYLgHhFOnewzScb7fUF4CSgwcLmCBbgIit7+ZaK6Te2f5nbkGzFEJ9Jxs3hIMWZ5BsO2KzptGs06VpDpRwdPa82k8j4cmlyOR/F/5AMHWu3zrKxEWZw/2K+/ClE=","authorEmailMD5":"b5d720646701a0f61a5f782c9181c9d0","authorName":"Joel","authorUri":"","message":"Thanks, very informative. Do you have an idea why ValueTask was designed with these pitfalls? The async programming stack is already riddled with gotchas (sporadic deadlocks when blocking, and async void exceptions crashing the app come to mind) and one would have thought ValueTask could have been a chance to design an easier and safer way to do async programming in dotnet. Naively, it seems to me that some of these would have been easy to avoid - for instance by not providing a Result property if it is never to be used anyway. There must be good reasons why it was designed this way, no?","date":"2020-03-30T12:34:40.389Z"},{"_id":"0a9ba260-7393-11ea-8495-f752a76fa479","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"d3203640-7282-11ea-9719-774f52685bc8","authorEmailEncrypted":"rJRx4cYAGIfni0LPH9ql2ZxXk77M+HgE/vgOqzHakLmSlLMvPDtw6oqcMoi6/z/c6VtG5nLx1mJiZ3oIETLFEC89Dmz8Dir+1SXXOrDF+6s33MGXa8c6LuBH4U4qfjkSSRWgDUrM2ch9xKZJ/1VEI3jVJZONfmMOxQ0OGux2EmY6+jQfYJuxxkZb4jtOvT1hAGs7Os4v8dnX1J9KYVJRoNS8v07tgZh+jiffR6+rsC/XUnvUdz1t/JEUkiwCQ+8blinZxiD90H9iPNyhHqGXq1U6bqcXZAmz499OL9ZPgpxuHHUF6blliOAKxSV7Ch1urFbioIkXf1z1rnUZIt/sXs3a1fLAsJg0mpsmObT9XI0IeqXgZb098V6AiNweTjg8lxc+1McyLs/Vie6cFo8iHLGYeBnwq13S7QVrTiZccddA3teKzGswqveM28alNIreysYkDYxyuTFaJOJk9WaIzpYZO+OReIU5l1O0daYlfM1ZOmXV/Doh8O1tW6rxFHmW+C6iGMP4B4ngM7Nu42hWl2RtJ+wj4BaTZ/55R3E2gwsQ780jUlfLfjqqNIQiJ1NADkvmVPLFof4HKe9XSDswew1UUpID9rxbZFacGYS9nQdin9RwNFTnK+HkpLX61/uSCdeMk1dHgmK9kJvTfUfmUGtweq8tAtP8YQ0+0dWiv0o=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"`ValueTask<T>` was specifically designed for performance, and performant programming generally correlates with more pitfalls.\r\n\r\nSpecifically, `ValueTask<T>` had to be a mutable struct, and no matter what you do, those are hard to make without pitfalls.\r\n\r\n`GetAwaiter().GetResult()` was unavoidable since that's how the compiler works. Having a different name for the `Result` property would probably have been a good idea, although \"Result\" *is* the most natural name.\r\n\r\nThere's another whole question about whether `Task<T>` should have been the future type at all; an alternative design was discussed where a different \"Future\" type would have taken the place of `Task<T>` (which was borrowed from the existing TPL). At the least, that would have given us a chance to make blocking more difficult.","date":"2020-03-31T21:03:16.554Z"},{"_id":"73dbc1b0-7393-11ea-8495-f752a76fa479","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"c321f930-7346-11ea-a733-6f32ed7bd8cf","authorEmailEncrypted":"uJZ/sBSnC//q7rcV4KhTFe9i7r/Ao6EgDaLFYJhs7x+OJbnQgvzkjbEnGFYV+AfleLe172TzkHMk9ptA2crRuwkXrlF5HhzPzYTZ3DQRTeNgQWyywXdfvtBEkP6kXfQA3utAeAZRijm3nBiZXEteaAZ2OZrTImVnQd41SwofZ2a8+KUhmsjWcSvJuW1f9opkXGrZuhWaDaX7jxYnGei2n1lWIE5SmZT+xjQrKfi2jTR51r0Pe/SxMlA098nV5FKPHr9TCZ3vKFZxkVQBp5Meh1wldpJNPV278UWtCkvd/TaaqVDX1gD2yunVv4vtPVpaoZum8UNH4v7TD/mnb8x7ez4pZwUNXGoR5KPRyGdLY8790e1i4c+HGwbjsaQxTciT2efXqP9GauUzDU49WlAdfnBffdRekzE5pdTGR22hCkWWirAM9DY1V9jyu4VdgqC9nSpu2dwAHddH6nDqAStj4RxzUNlgRzHXnQHyEC3gA/wdGTYv6kmu+jrAYj+Wd25GCq4bhQVrFVPdh3W9eUfQIZsGcqWDh1AvE2fx632SwELLccKqys1mixKMnJiA+t6Y9vowtNCu6WguCoDLg1IjCk5YI2pDnNi737L4owreMIEmIslq3hkKCg8G5j9Vs32TOsSBY9/cESznXBs02WhySivdY58HtVYdVSpG3+zEi58=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"There's [at least some](https://github.com/microsoft/vs-threading/blob/cbf19ee4c51c6a8aea891cfbb6232c086a7a76ff/doc/analyzers/VSTHRD002.md) in the vs-threading analyzer package.","date":"2020-03-31T21:06:13.111Z"},{"_id":"7401d960-7369-11ea-861a-e78c08903b96","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"","authorEmailEncrypted":"q/hTb5JUhMTiFwKIAbmkGmZu+FVQD40oh8t99DduBoxFjLN7vmX4Y/LgKwvWz9bqb1u3TfTx2Gg2fpduq5mjS7FPr8wIv5Q32Nh+45BMkWH36pJdziNdR5WF5VQ2SD3lWTJKMKk/9rudqTrD7+cXrnf3Kn2qOeF1ntDoR4L/0Y4tMStRB7mUwoz+vZ/reDbaXN+AJ9x/JKq6S0FM/FWwAFggTuAvVunH/PAFwW48ZmpGksKGYQSAj3716Va81wA6jrivrDwziBeJOkvMpNgDK1QdzB+Y188VEBisRXO4Vr4gV64nrss6ryEh6cO+kj9Lrso9EtnK2L63SP/APgoj54WlJ8yWRDRTVRU0Zyflszqy+DzstDFhdRwagcV5qXuFcIA7MAPg6+7KBUFB2C4KnkF6QxNM3hnuq1PviSQlaZxFF8qeHm2Ibk7UcSeNg6G581E0j3MUniLGfksxZaZ1WNrt0QWdweOIKWDtd52fno+AakmKTwj4KrDkyhxYw7zwDNUrmsMIEL+jtK0KsQ8+Ni9u/4jMbJmruUGTksWmKWobXz9tAk2Kah1O70mEHorbdXeBVZidUOf6JXDK20EP95jzcmEObnlGTain58fgc6AJ7cyZ0yt4S2GQJL7WBt2SGJaFNlX7OCsAz/wfwjEwiH2MulRMq5i7mCUHZrHhYtI=","authorEmailMD5":"b044b7de20d387bcb22182e0a6f39cbd","authorName":"D.R.","authorUri":"","message":"In your Concurrency Cookbook you describe the situation more like \"always use Task, only if you really need the performance for some low-level stuff then switch to ValueTask\" (at least it appaers to me as such). This blog post is now more like a \"always use ValueTask if possible\".\r\n\r\nWhich is your general advice?","date":"2020-03-31T16:05:34.566Z"},{"_id":"c321f930-7346-11ea-a733-6f32ed7bd8cf","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"","authorEmailEncrypted":"A5/vA8PIxgIc7Kq939xCSIFoP6ZXaR0HULKNsi2anEdKr+LGSbeKxZxo7NYUVX8laBO8XHwE5xycCdK/+udlYcGysGXUg3XL9jDz+e1tqFVG03sS7pcm8yU019BWb2d063dt1kieRRB33ernXXqzjDColkZLJ1EAg4UVJyoiXx/5suJImTxuxVU3OIX8gP5pwgJFSaXTkYuJbz993YdGd5zj4aZXUKwUD0HE4ZTBiyMtt5AxKSeh+MqNYQXj7v0KHWiJaxD5A+5WaXrZmKFCuWa70E+WI2PyV7g811mUB+X29XMLU4skXxD5hvWoissu9hcEjHIrXH6/2YkK4YfOMUhjFr2prfozndNPamkkJLWLFeNcKwlj+q/PdqLj1bJQxBPpNIyeSVD8goN5b8VpM+ihs09i0TNUVRuYMK5KpKCUpHrDktI5tFTidL4VAJBNjSGWkZ9p5mGMK8vpCC3yzTe9FkVq4iSoaV2uD08gMRpVK8r0IujUURcjNlFVhXn0Nhww+eKLOEWONk4BGQC3dr5VQbVtovWXE3LbXn7BjI0wAH6fAqSIQLPyHthpneCA6L1X8WD3s63vfYFCWmXitscNcGX33wUVca8G2hDiYxG2Dr6Vbtr2mP3TL38hrRxpCLusu3ZKfabEq8OKUMDP93iPyZEXYGdlRkJv7YCweSg=","authorEmailMD5":"078b61f4e6f93716b54bb5fb434c8a60","authorName":"Jason Bock","authorUri":"http://www.jasonbock.net","message":"Are there analyzers from Microsoft to enforce these patterns? If not, sounds like an opportunity to write them so people are automatically warned ;)","date":"2020-03-31T11:57:14.908Z"},{"_id":"fa0acce0-7393-11ea-8495-f752a76fa479","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"7401d960-7369-11ea-861a-e78c08903b96","authorEmailEncrypted":"f2IdSxThgl/rJGc3PUqLMWm/fyat4KmQFIRAxeGtETFJiZmEy0peMddtd/Mjkp9L8dYIZ1foDb4R/xy6h2KZUnGCD48lPjG1TmatdpVHN2xmbVTv4N2GQuC1z0+1PwDm5dX6/IOOhkztzuhE+6bIc6fBpyZC6sPpaIj/LXheCn1ckKUX9LYTP6xEXwVGixm8xEo3lWCbwQwi1iAczti+fGcAqWLUGZauLq+7LvfwdXUz+oaV74IK1+FppChNGPvjQBxrVtAvC2HxKbm7T4NgLXRRaNj3Nn78NbK9LWfSKSZuwl8fL3j0EAYrfMT+5s/sE8VcXe5o9B0FOm62zLlJ8XjYhsTLZndkIBx7QCs8Rh+mUKJnWrOTH9WVtMlDQNv39Jr4HCni2YmQomRDiiqpFxOmCoKDYDcKCiUbuzCsFmgM3N+1oIhdhAZKDQSRYwQu/DJT/Oy1QtX+wtnTKf/N6HHAGuiXGKgVy8zJBhBUzcrOznbl5FmDkLo9fyCNN379++FgOIDgSG0ONDiULkcwn4LOSjN5/zGITyNntYpeWGazNJox4HNqRB5c0j1NoqBTbQHqpxAl+yRWhrruPUr0ZWtrB4WItajA3FsfW9NUyuCAz9uoGnc9YJ1CS613hKLhc6uJLVoV1QS8Ke7f/gExtff9z1fCuuu+2oSI7psqWm0=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"This blog post is just giving advice on how `ValueTask<T>` should be consumed. `ValueTask<T>` is becoming more popular in libraries and the runtime.\r\n\r\nMy advice *right now* is to still use `Task<T>` unless you need the performance of `ValueTask<T>`. But I expect to change this position. I hope in a few years (once developers are more comfortable with `ValueTask<T>` and aware of its pitfalls), then I expect I'll change to the \"use `ValueTask<T>` everywhere\" position. There are some [other very smart people](https://blog.marcgravell.com/2019/08/prefer-valuetask-to-task-always-and.html) who recommend using `ValueTask<T>` everywhere now; I expect to agree with them in the future, but I'm not there yet.","date":"2020-03-31T21:09:58.276Z"},{"_id":"3e29e250-7441-11ea-8656-7996ea07e3bb","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"0a9ba260-7393-11ea-8495-f752a76fa479","authorEmailEncrypted":"LmV1vxTinD1YlLsMby9el2dVUfY5TqKJwm25knGBkZBlSb2Ev7Pr5VwG0O/AA6URfm9KfWSmLaQkIggvzc7xGuPdXP3VYqvQa0jRCTAWuwrrpBO9hvgp5m2UkWO0a9RcNEJMteYyKd0eovvcgj3XYnIjEdC+MoRznSfyoYazJUh3pUwTJ+R8tSzvaJ7I8f0gWfl5u4b4ZtwptUiBPOy1n8XezuLlt1I/2V8546r1w15nguch4o2w6oYuDFJC7JeKZ+Q48jeR0R+9fS0q0GrpQOFz1y9dq3rEJ3m60649sWkxXzq2c1Sgvn4j6pJjGTxlupQuLCD4WB4IhcAAzdwIsHzvUz/IsTXpvTWMdS6roU2cV7xuBWnn31Dtde2tAQ2qqmnRX8Eag7ufH2PnqPegJrsiusYrZatJODBcYntin1ncg/vFJNjC0Gu0pqVpHF0ZaQPiup7X1tRYvQC4sAUp1elT9YIQy1WEGjRNKVA5jzdQ/U4th0uZbIQ5D8r/dbFQKB5Y0eC02sbod5AnlybmyUesyFKrhQ9lHtexbh8S4CxkVucWYNKT6R6CaVh7R/JOsIO5bUntgHwj9LMbACjVrJGTgENLyhlimP2yk1+e3fRHdtyZ+IeVfsy5E5Xr7ZltyMUgKUViWXv3wMyHNEmQSXZzghfsSiMNjrsk6lvpxmc=","authorEmailMD5":"b5d720646701a0f61a5f782c9181c9d0","authorName":"Joel","authorUri":"","message":"Yikes. Well I guess I should just keep avoiding async as much as possible. I'm not good enough a programmer to remember to avoid all these pitfalls.\r\nThanks for a great blog!","date":"2020-04-01T17:50:15.515Z"},{"_id":"378f77d0-7b2f-11ea-ad62-6df548050b57","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"c3d34560-7b29-11ea-b5a8-518f823328a0","authorEmailEncrypted":"TR8qqoGrnoz2dRU4wuU+vUmfqDcDu0NQw2RH5b8MBJF1lhunh1DhiQVqVsv3vZTiF4+H3Zs9H/4EM7VWdPM6SR25vS9hXo0xjoW5TzzgD2VjjQ7qXgQ5h1ON3RLrdCghup3MEQvSFDE0unk/gkuyCF9C89HNFcyzb5gkZqqhhIzOH7s63ACIdjPxt4sjSFuf7v8AQYFrIXQ2xpj88Q+OIEPtbxu38nMK17HCzhKBdOLrPYbni25zivcnLocdqKspfWk6AdaIi6fNSaPHptx64zlPAUpbfRnSROmw3HAjTB0CxAMCcu50yOxaohI1LwrvRPUZHc4F/VwQoGBfd1k1RaHC1VsEOxnP1hTk8B3KohKtablsNoI6LTXBYjJWnVUQIw+M0HjCFWckNIa8OBFqqY9U2bO64AMb9pdOQ18coNWrHBHf2v60X8aCvdybRabRtQGuyLTpYvThhkrkzzRpzni98MhRLn3SplTeuUbAMPL1B1th2L/14JJ1XuWJNRMLGGh2Zem+ySNm2XMONHp5R+Jfdw+xJNX9de3YMeCNea4h0IwkJ1FEdAXmWp6JCfLnlzklVYVFRz/S790W6W+PEa6yg+NW3vlLNmP6e/wYtnkR6YOVMX7AGjCcPrgJC141P9qGLik+MmncwQgomDQVuH8fje32SbEAxIlMU1ZgNuA=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Disagree.\r\n\r\nProgramming as a whole has things you need to know, and each OS has things you need to know, and each runtime has things you need to know, and each language has things you need to know, and each type has things you need to know.\r\n\r\nIt does add up considerably, and it is *not* easy to keep everything in your head at all times. I do think a different pattern would have helped here, because the way it is now is exactly like another pattern with *completely different semantics*. So it's not easy or natural to assume the same code will behave completely differently when you change a variable from `Task<T>` to `ValueTask<T>`.","date":"2020-04-10T13:28:51.637Z"},{"_id":"c3d34560-7b29-11ea-b5a8-518f823328a0","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"3e29e250-7441-11ea-8656-7996ea07e3bb","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Arbiter","authorUri":"","message":"If you're not good enough a programmer to remember stuff like this, you're just not good enough a programmer.","date":"2020-04-10T12:49:49.995Z"},{"_id":"d905b860-1669-11eb-a31a-11fc6816b26e","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"f7bbde70-1663-11eb-b051-e57aaab1653d","authorEmailEncrypted":"rxlVe1XzariXZP2NC8HLfG4yP7uwF/nxh7vur/Xfh5alVngdieX5NIPqA7bp5TG3abHAaer+A049Q3hEzlcjenWrNMGtKYA5k+YWaM3ciGrtCaXXPHA1xeklloi4KuVigIjtloDWzPYojbk76Fc/N4m6yeiD492JmZgfeaHy+WunVweafTXg5JaEIqFDGRIsY1AYsVjuOXGid/kGbVtRl3AuKuTvcbLtY5hfu3brNU51Y7V9yf5Z6w7iqTwOVL0iClEuhZ9A2DHnVm5rr5hu/nX4y1/cvXCOlTDzxEn4Im4HcTMRx84qRtzC5UcZqi+03O1tCIZkp1Ql2ugEuJvKUEIzSp6nWFp6k1QFiVpcaQc5BKmHAxpvGxYA1OSSTIlx4u9rqh1pic1aNQCC0iO+UhqtagHxbVcK0FU4VwrCn5qluWH7rkLF4X8LDslizHwrna/f3svrfZ6PS5tLMjz5xXBb+RWttsuZQQlaVf9TgkqkuT0LkgXK7QGe3aVYB8s9W9r/6MUh7wnBt2o+rcDPqs4u0huNBRNn9eeJrHl+S5bRCoHjDcmQJpn+DoUFzcDfDBbdLGNessNgMknpdZfUmbqE8qiPzs87ON4tdFps3drWZrxIQTMox8Q9xicDz3+xPiivl+24lmQU9xNsVcyoGOThKUrCGkQuWkqMQjgIGVw=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"`Main` cannot return `ValueTask`.","date":"2020-10-25T02:29:03.631Z"},{"_id":"f7bbde70-1663-11eb-b051-e57aaab1653d","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"","authorUri":"","message":"Even if I use 'await' everywhere, all the way back to 'async Main', isn't *that* in fact calling GetAwaiter().GetResult()? How is it possible to truly follow the rule of never calling GetAwaiter().GetResult() on one of these ValueTasks?","date":"2020-10-25T01:46:58.206Z"},{"_id":"1e983080-1f05-11eb-ace7-4d6445a11c3f","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"","authorEmailEncrypted":"u6SX+sHAzhfLXbL0eAfQ5iounWa1Rm+gl296cs3CUhNPz8h8zKamqNHiyt52R+cx/eQQK2xwona6+TFEpvgGL2/1KfIx01gh+FA730LnWvFt07sSeH5utiwHf8WfbVKtX12Xhgcfs4UpCbrDeOOBFtaDVWrMH++oElu+v65YVvhRWwxNENDlr5vfi9Dotdeo8apMS91zBoU5ZmqyhSlbnhmHZBuhTCrmzx8KaB2M1BG+v3hArNKV4prXJHfmZVnVSNwPdWFKJZNSl3jSw2uWBaOz9uQ949vE2agyjlIz4YNvmfBE+XBQff8Ho7AHtKG6tBtfS3XwhBEUDPe9UkPm84AZq+p/G/1cUaBVcGw/o6jhWU+oOSMnrG2qLEuly49/Rcj6jFFyIKbOUVdKG6nFXvEndRRKTMXn7xkVDu7WywLWFqSiuefNjL2d3vtTn8Pnkwq4oERJe9wgjQQDPwZdIsfM/19Q0c03iMVI/5R9un7oAApmFWXg9DQOmObN20L1e8QfJT2ndQ+iZsCiQ7XOYuNgjfS3D5tFwh6XgjKiCprEXWLBVUtkzDjrGn2gKAOTP8iHKzhSP52JpZyH4ldAvVGIyYZMQCYqZLRi8nWpWYgKMP4gmz279cKQ66XqwHf+GaCybIV6txizm2LMWp1kdgoeybyhPeYp//xmunn3NcY=","authorEmailMD5":"461c91244a98caf34fb8de0e85d2f798","authorName":"Brandon","authorUri":"","message":"> The problem is that these code patterns do not always block when used on a value task. The resulting code has undefined behavior.\r\n\r\nThis took me totally by surprise! I had no idea `ValueTask` is so volatile. Do you have any other examples of .NET stuff that produces undefined behavior while being easily accessible?","date":"2020-11-05T01:20:41.600Z"},{"_id":"5d0190e0-2294-11eb-a090-3b27858fcd8f","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"1e983080-1f05-11eb-ace7-4d6445a11c3f","authorEmailEncrypted":"u+UD8mgaoKBf4RBbzAggm4k2CfeL9yVRgQnzbSdqB5sbQcrYmkiDxf69TnzC1GP+n6sSFg1wocDeYS5mbkTz08le9QGt62F0moVYzhZkT1EHE3iTEko8WFaUQJkCuZodbUTkju1wZxA6bFc3AHZcm7vnH9miVnt9zwXmyiOPHwz/yyxqYlD//W69arYiCaeNKVVJcLN/le8nlhuKWFoAXkMiqI6YvW6bun+IZ7a4vxZDwgBd8NJUdQqWaYVvF/p4TAjmk7NW6H6lJbP/Oz/hWH7/Hsl6VIzGamk0pBO1zEt5nRR0McaV8G1HX/u6fsDRUqMNh/ovFV5YZsr4BF6KOR0bSWaLlJ/oJ1dqlNFG5Rsmei13s2xiaO2z7klZUQ4rivWe/T+i2zlX4KxdyOMjv0rfga7JdcDuTtxCza6adqQWVNNF5dl7vc15lERD3m0C/c4tQyYGLg46/td7b9byC1qLjhTru32yrseoS0qzrt5pIpXwwrWBLKSXz7iRffgPO94xQdX2mOOZlKNJuVJGrGwzM03Mz2K1XttR1ioLrrBepxUPB6UsS2BSIJ96C5d9NiHuGLjY5FoJG3pxF0yXxfB0DdKqR1PrzSqthF4LrFNULohR60+/MTK/JTWpWmN0FX3GFBtNPrQzPdEeTeAhRqFRXuZgnMcPRWuReOjPfiE=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"I think it is surprising because developers are used to being pretty free with `Task<T>`, and `ValueTask<T>` is a lot more restrictive *while keeping the same API*. I wonder if it would have been better to change the `ValueTask<T>` API to be prefixed with `Dangerous` or something like that. :)\r\n\r\nAs for other pitfalls, the only one that really comes to mind is mutable structs, which can behave oddly when they are a `readonly` field. Many (most?) of the enumerators in the BCL are actually mutable structs.","date":"2020-11-09T14:03:37.810Z"},{"_id":"01e7d0c0-38ce-11eb-bd92-0d7160b16954","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"f7bbde70-1663-11eb-b051-e57aaab1653d","authorEmailEncrypted":"KnkqVLisGtovutl0kj4GU0EgNvgBp4p5O1tmPPyE2HLd6QT7WY8phiJLt6Q+IQqjOZGk8FsAkbPHLYhuv2RHB0SRCwiTCHcd/1QMnpDeRRNbkIkYU5QMBjal8EyJ2GVVVasBeGIRuUSOl7aFCduC6XYD9Xhm89Wk95rKo+pgB7cX4rNYPSMZ4y4ZeAxXaKYci+IQzIhT73NY7v3RQiYfx5e6Koi4HZpoynkGNVakPyTtz3lRypNkHkzFSkPd+eEm60BdThroQsgiSj4bmfINhx0jVbVGZJx63V886H2xHm8r+mwNXQfhqAx7p9KtvpY+Sk3yNe8/cUhmgwNLqtT/zZN7F2oXNtre3T7CZaZqFRC0K5jac+HCAItFWvw7hKjqxewoYooydYRWM+j6+FphQKTeppjVrhNH/PRAfwUPLM1KHGgyypW7XqAEIjzmOuXUkGWK7hz0JDXc+fID0TnpbJ2MV9AiCr+89mIplC8jhWRhmqZTyPE80pw9zbp7yR6eEWtiiY3odEf5kE1iKMekB+w3iY/yS1lzMm3ng/ZOGDzxgooL8+Pdvr1GWQ0CL1mlprxg+Z9oI3+yZc7EKfLEWb9wAVWpYVpo8Uivr3pR3bpEdlrTkWkNHybAdaR4GKXEMG540OwLusUCjQf65jdlvihk/9V8mxEeCO5qyBmFFpo=","authorEmailMD5":"e6c5c7c14bc32251ca80dbb406485ce7","authorName":"Theodore Tsirpanis","authorUri":"https://github.com/teo-tsirpanis","message":"`GetAwaiter().GetResult()` on `ValueTasks` must not be called when the `ValueTask` is _not completed_, i.e. when `GetAwaiter().IsCompleted == false`. If you check for `IsCompleted` first, you can call `GetResult()`.\r\n\r\nIn fact, that's roughly the code the compiler emits when you write `await foo`, with `foo` being either a `Task` or a `ValueTask`. It first checks for `foo.GetAwaiter().IsCompleted` and if it is `true`, it calls `foo.GetAwaiter().GetResult()` and continues syncronously. If it is `false`, the task has not yet completed, and using `foo.GetAwaiter().OnCompleted()`, it schedules a callback for when the task completes. When it happens, it tries again, with the task now being surely completed, and the `foo.GetAwaiter.GetResult()` call being as a result always legal.","date":"2020-12-07T20:51:41.416Z"},{"_id":"16c8e990-38f9-11eb-ac97-ad207232592f","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"01e7d0c0-38ce-11eb-bd92-0d7160b16954","authorEmailEncrypted":"od7XdGvkeVZRzHct3MenNki3bcPcnP/f3gAdiZmsxG6ngQYs4nzTUbdEkbj1j/l84d2njpcUVg6XlcNm+bQgAVhcT4rCQnrAMd6u4Q2AUicWaQIRcZ1UiJPCqqAjI7JjFc41ILEYFTPDQBAnHfGUAjeLYx1kA7Ctji2hqQ9Q9AtW3fWU/isJ4fmsXjjk8TrbMz4LOj9P0Ox306/j1226dcfmqmlYpP8D1RI3lo1SXfZhsmECH4LkX7U9/mM0MUrCDTt6tijBB7Kzv/iB1PBBYwFYpHPF5O7XUpBXVoapY8InZ0vsW2oy7Mrhjtdazd4gRfGyfQWJhx6CJpU0YX6dNRmYAiJFLqjAWUG2hKwCihmCJuNjLjJlti15HIFLqfvLYdmpVIkCRnb8vWmdZGXQ7aERuR0C3oPyc2LFjO9uhnQIpkSXGaPlbL2OkqBohz6vQRE+gC3TagW9kIQ7e73p5HWmVKujPM8DNqYD4ZQVIJHa5T1bo3rpi0LolSlFtDMvNIkSsE5u1EDoCAEaeUF8cGswX5Sb4Klp8PzzCNbU59ANoCHb+wly2lWrmZsNcDoufEaJm0VqDP7PbMWx8x7O6Qo7QKWO9QHdiNWQvEVcU017+ODWoMzeaB+t0+rXkod65omtoZAMgLgNQPcCqG7T/k4i5azSTAj6LcFVP5VOkg8=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Yes, you can call `GetAwaiter().GetResult()` *exactly once* and *only after it has completed*.","date":"2020-12-08T02:00:04.755Z"},{"_id":"e06c95a0-763c-11eb-9c6c-ed0d94f8c29c","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"","authorEmailEncrypted":"V4H43ZBcq2MNZfFfVTRQCMtNUwsnvwam9ODOpkcQYaF6mVDSF7Wm3mVmfr3egMkQfrFida3eudWvXPtIQSX75sWLG8BHNpluBLn9hoIiPtrEmtXT03ZVL0EQADScdOklcXeljTPR91BqNKk0BoAJz73D2JANqezMyo8Ay7mJnjI8M9CjUSrrK/ENqgYwvGxaBd82+XUeLyGelaegJ4KUyCDhmpyMDjvhh2BDN8qfU2mx6KzHIeFZsn39kTUjF5tRHp/9mFOvoH1Do49OXwlogT9gdFtCaK5B+XVOKXyKBZBqcuCjFdJrId27Jw0qpsMXMX0uncX5WPNxFwiOcPIE15lGfq95xq3ziE/JspDJlQS3rz1oh/5LUxyuAwdNQyT/ohSrRE0nFy1GR44FEdUZkvekhDJvhHDtNFvzGJ7VGgCDcGZThn1ulXYp72NvOf/4NfHyQdWql6mLcBcQEynaEAhON04MWFRRtkFt9V6vuq0ZY1tilJlzbq8O8CeoyNM29qfhjXAKP9XbdOpp3iMOgE4dF6vncHaSaGFk8Jj6s8YnBIC7nFQYb3zXTUgcK3CFVBuQMKkrhXdr0VUhPaBSEQubKNgkK6ppFGcqRGl6MTsrtybFN4WhkM9b0RheOHKDyZFN+GSx4OF5/n5ID5GsTsAUZiQoX4cZ63fDndKRqKU=","authorEmailMD5":"bac49a5e551462450167dbc0b4c0b122","authorName":"Vlad","authorUri":"","message":"Thank you for your work!\r\nIn the article you are saying:\r\n\r\n\"But if your code does an await more than once, or wants to use Task.WhenAll or Task.WhenAny, then it should not await the value task - it should convert the value task to a reference task (by calling AsTask) exactly once, and then only use that reference task from then on\"\r\n\r\nDo you mean that the same ValueTask shouldn't go into Task.WhenAll (or Task.WhenAny) and be awaited after, like that:\r\n\r\n------------Example 1\r\n\r\n`ValueTask<int> someValueTask = getMyValueTask();`\r\n\r\n`await Task.WhenAll(someValueTask);`\r\n\r\n`int actualValue = await someValueTask; // WRONG!`\r\n\r\n--------------Example 2\r\n\r\n`ValueTask<int> someValueTask = getMyValueTask();`\r\n\r\n`await Task.WhenAll(someValueTask); // CORRECT!`","date":"2021-02-24T01:09:00.318Z"},{"_id":"5c098280-87f0-11eb-a855-5582c59c7d03","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"e06c95a0-763c-11eb-9c6c-ed0d94f8c29c","authorEmailEncrypted":"YY4QAO/jXvn4v/j51MSFslEpfDll1R+Pv/wAHNVY4evIBSglzO/B/dL6Qjf+Icf7beeUarv3bMr94TPZNOYhxt+LwCcLiNHgBYwGzK4it5wUAFh8pWGybzYmgwsL4j/DHoYGOTJEghElDnfTuQEwBgrq0OeHjFbAhzM3lx6ZU7Gs3Q6yG3jko4POsE31ZdcalQMdq8MhjrDV9cXZKFPYDV0XyBdJvN46Bb+xXsxn5Vbzed8mAp2stTZivbF9Pn6lwhPMEwC/zp4kAwZaGIMicqkDS6yr9B5ro3i/Ta57r0mHJVF6Ph+TSnOrnIxDM8QYtkWVoGZWieFrwuLi9/+vwQ5oOPdqw0mOpm9DqONni9YFA1pv9Y4GkQNzh78AlAHZaFhsdNc9WydlcDrL+IpHrNAJ7WTKAASdZPm/sZJUyQlZ2OASzLrIksuza9bgMD8luKzxgLbzT8nWsUa43aNqB+Bvca7yWC6ZEbsRvHkZxuufqCHKSvspkNZMJFSzQuYI4vh8kF2p4u18X3mMpqP6nNRL2MiSwakWGvJCEVh9t8+wjBjDKLgVId52gG+xZ+PgsdozdSy+L7TSkeNSnQBTj5oPj0hmcIJKr6oW+gLqs8h8MrE1H7t71NHWud1q3ink901tkkNftACs/QrIUr5W4srxqu9gxP7ChYMm+LEgqk0=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"I mean that if you want *any* of these:\r\n\r\n- `await` more than once.\r\n- `Task.WhenAll`\r\n- `Task.WhenAny`\r\n\r\nThen you should call `AsTask` once and then use the task from then on. You can't pass a `ValueTask<T>` to `Task.WhenAll` at all; the code won't compile.","date":"2021-03-18T13:46:37.281Z"},{"_id":"7bbe0370-e629-11eb-935e-d73f91f54c03","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"","authorEmailEncrypted":"RuWqzwNAzkZtrjsXvd0RRNK+WT6mEMXWPeWhBO8V5BJz2W5rYsP212zViKpsZQlmu9R5dPzWsFe12D8zjO1CM9TkA0GgXHSdLmzkMTVCmN60qmrgUQAEKkjhb7VOcRr0Kewbm7CeZcXTE+dlOGsOtdks/NBCE3/HIEbaXIBGbaJjs1gfVdarn+QfG8+ULslQOUrdmxP0DcALvMx/b5T3vQ2/I9Y2OLXq6vYuPwHmQRD2GP6u9f9WvNa26HLVdJM9gmLHEc944jqrIDFxQNwYYtlrMbjgpiOHC0qa/VPaa2cBagQ6sxdUvKpJSxrIw9h0ET3hfCrrV7hKHnOoyI/a7wQ5kMLxhSm7/d8Vt8n1luwCrS7JUAtBIjAtAhUQ7CKq9LMOMrg914/Sfwv217uRMIG02ojeIluMaXrs0wlYNy9Hdt29MgTcWHuubfWBhmcxkjAB9CcW3u6kjpxLh4R7iAVYQspT43i19CtoY7psKsAStZg2xJh8dNJrOzdDPLcyY+N0XDCMNtYRageVwWWX7iAUQCo2xNSTsmyVhDdExQ4op7tpFHF9/4qgfOPUsrBJKfBYPVJWj+af0tZZD6JDp/9BzIW701W8mDlzI6RHszqqcPBc81jGm1P/HcPw6efB9Xn+UQyz1J1VGAnAF471tKwzrudP3DFgnnPpLFzMnjU=","authorEmailMD5":"0f074d2abf230e3e7221578cc352fbd6","authorName":"True Goodwill","authorUri":"","message":"Can you consider writing about what happens when a value task is IGNORED, ie, in a fire-and-forget scenario? CA2012 says it can result in degraded performance if the target method pools objects for use with ValueTasks. How does one correctly ignore a fire-and-forget value task?","date":"2021-07-16T11:32:21.184Z"},{"_id":"fb5c1dc0-e637-11eb-8a15-2368fa826762","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"7bbe0370-e629-11eb-935e-d73f91f54c03","authorEmailEncrypted":"QwT6flmp4R8TMjU7qRhjwRzE3+JGV5yGClHRI5LnTBH5yycr3AIYlE4haOUd6C3o8IntL7VK92wGNZj1As0oSyTbMylaNaBQxOWCjmSUkXGxtFtprra6/OErkqiVPPOESXSEH0qPhqUUPNmrIixTD49WlpsTbZoo2z2rbZGVABOyJ7YQYrUGY+EjyaJtm1gex2A1WP4JH/A51l6kOmamopCSH9IWwYdF0AeepvsoPPOmYksAk/J/6MgTJRab/Am56Z6uFVD1WRxhHCtVqnGFed4iaMFDKWDZcpDEc9WgtYwaGL3Pt5FGaqT8yeopny5xex2ggZ1dTA/IOc95tK3roaVZl43x5+WYseIJgjmMIlVYJjuytrvoULlKitDQYvw4g5t2vkhfvvcDSeggZ0C6G7sS6gTCRnzeim/IpIBhhwqGbPgfjK7qEi1ND84fBeyXbYH8jyHRjt/YyDDUZuXlCHn4v3eyWsA8/+LLSkn5ZPqztIyjlpXMnWkStSWZlx8Hyx6ThEWSbo2zu+LjbxvvyoBl5Fm58RXZpXFxXkyMPobvhBxeAtJZG4snId2gG3UrXV7fb+seUY2NxdAWB2WVE6hOOivvcjpI9M3XeRwPbjCNmMnoPwstVg9b1phgXcPQDKrlpMAgwXvf24dLY1/EUtVjmR096ujQrOkvwCj6rJs=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"That's a great idea! Ignoring a `ValueTask<T>` *could* result in degraded performance, because `ValueTask<T>` sources are often reused, and the result has to be retrieved before the `ValueTask<T>` source can be reused. It's very likely that in the next version of .NET Core all `ValueTask<T>` instances created by the `async` keyword would be pooled by default.\r\n\r\nIt *might* be possible to avoid the performance degradation by calling `AsTask()` and then discarding the `Task<T>`, but I'll have to look into the code to be sure...","date":"2021-07-16T13:16:08.443Z"},{"_id":"1dec96e0-fde3-11eb-aa75-9be8881f7018","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"","authorEmailEncrypted":"NyHq5+E7KnL39wVl1W5gCVIrZJYJzoA1bwSV8VBt3X1jdIJeYsFxi3phEj5uzcFGlh19gEKBj0JWNwRfouxbW/kXS20SxZvHfBJOf2EdPOjZokzimHGsIf64Y8Tep6VgENqj1K2ypwLAhou5HAxLIg4+mCKyAaFaXrhFlecZ5Cv1e6RwPPuVFiB7uP7vO6fbv8JB9OtPs1qfoGEIdge8AjOwTaHpchTxBZFWy+zVi1M1oVdGDNzHNtV/mb01QYMknP04yLLQQw5SLGgZ9UedoDH3gH0Y0hVvZl7wxIw9ZLV6m5wwI3oW+RZZzRbSF2SfLo0XNikP4fxZg3zj6G+BFlRC+56s87HIu22AzISpJ498C8qeZ7kntVVQ9yCJS4If+E+2lZtf7gwBNk76/+Z3jhrQDGy/kEsVjViccN1fXe2c0GELYYbErXwWdFlx6RaLc6UtD4gjlXaCahS45Zh5Lmn36xrpSt+VxgGDZFlegEeKSbnO+eji6McnLa1KHEB7lTXwv6WsaN/fwn6qaY+t6tWrrfEZQLNeHOzrvLFNFkUhIuzjKfwk4PbxjJA52VXIVc5FYBLZSanTJMnwb/EtcXOG5l/pKSPkTFwDF83THzoC6P7/h/rfGiz2dQgMwoqt4OXK/4rDEruJG7V4leBPP9aLnaI/BAzp2uYL24ANsJk=","authorEmailMD5":"2573015ad9048b8334f589952e804751","authorName":"Adam","authorUri":"https://codedog.pl","message":"Thanks, this is better than official documentation. I learned a lot.","date":"2021-08-15T16:09:06.849Z"},{"_id":"3a40b410-88e5-11ec-a3b6-e3c8cc2ff473","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"","authorEmailEncrypted":"nTYh7oUMsOMCmPZ/xGTn28TwCq0gk5oOB7bOVxaKwDNriT/rl4QT97vZLZlvqJkQKN75xeofQNtI1W/V1T9XbEeeQTvDN3tAbP7w5BWSvi2ZoujScqU2oTf3ycpwjKJNxsw6a/aKIrnoabugpKx/wKIIgn9pIXaqWIWIueKSdZizffcB90eePU2zqOt9zo86humXgwj6shbVFJVyhti0OFD7mN58OXObB3+nky9R6jIoJcOAo42Mln/xlKU337HEXmQYsPUy/mxxlOJUSEqq34AjwNaOoef+078qdK7O6J52j6EVuORrRbY53sT/DfX5xetQ9J56/V2CxrV9sCLLWOgfRsKtZBzQ2gbfc6yb+X7ywzUTwOMA9idZdXOgaXCmcH/GUjft7a/JaKBkqLfilHQLtLOXrRvc7oEMNAaQzs1WN+ZTL6rTIiO06BebGW88IBBaSo7anzTm18gjlf5BxKHC3RZOkEDcaQbRhBqX6bHMJR85nqpVfmBW58Kannm9Kk+jYXbPGOvoTt2hvHXM65O62sONpxXUQ3pwtFry9DIUlqfwf2ajpk36tBZb5FBafcBdUIt7sa3lkURlUq91+81fftEntVwQ70Lp6AYm3/mbI6kfBfKxg7P+k6p7c+0zN1a1z/lOUmU2aOWzQZh/lcEun3kD5dzXfpO9gmoS1XU=","authorEmailMD5":"f7abea1038a8022e39d84f6c6642cde3","authorName":"Brandon B.","authorUri":"","message":"I didn't know where to put this question, but I'm going to go with here because it is ValueTask related.  I think I am understanding why you would use ValueTask when needed (i.e. an existing interface contract as stated in your book), but based on your older blog posts on Task.Run etiquette (Hi, my name is Brandon and I have wrapped synchronous tasks in Task.Run) I'm less confident it would be a good idea to introduce ValueTask in trivial/semi-trivial use cases.  I get why it could be more beneficial in some use cases than the corresponding Task counterpart, but not so much at what point it becomes beneficial to introduce over a synchronous method call.     \r\n\r\n    async Task DoStuffAsync()\r\n    {\r\n        var x = 4 * 2; // simple operation\r\n\r\n        var y = TheDoubler(4); // same operation via method call\r\n\r\n        var z = await TheDoublerAsync(4); // same operation but awaited using value task\r\n\r\n        await ActualAsyncStuff(); // I solemnly swear this method is doing real asynchronous work and not just synchronous work wrapped in Task.Run\r\n    }\r\n\r\n    int TheDoubler(int n)\r\n    {\r\n        return n * 2;\r\n    }\r\n\r\n    ValueTask<int> TheDoublerAsync(int n)\r\n    {\r\n        return new ValueTask<int>(n * 2);\r\n    }","date":"2022-02-08T13:44:24.954Z"},{"_id":"91e2c710-8b6c-11ec-acf1-c908b2ed19dc","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"3a40b410-88e5-11ec-a3b6-e3c8cc2ff473","authorEmailEncrypted":"h1bDECfqFu42J3DA8bi2tN7qBjQfLMJnkaQ06hi5WJYiOl2SG7Twhi4iLiaf5hSjuB4Hu+oQ4nJDjtY+hBOFdLXAWkpo+T5Yd6OvD2kbLKWczN26UpgaHA+f9bu339QmeY5y70lyFPIhGEE5K2QDKrrfd6QSdpZ+UltdYdkXlyNHtqy6uDvs5UjNYJMRtLEJnCuBEJkCgyKi2gGMN31AWT93IRjhmss21e7UiJYIarQixJ+3mPqcQHGirNH0LckBdnsofNEAEFj5Bk7RyBc7oCiqqsPkK8mYKxw0eCKXXXUg0uAfWA8Jie8cVouVsyrqhDv9OJqGhmHc9pX6rvsm+v0goV/5Hgyxe7XwrYHTv+c2vlhXrk3gPJ//NZi4NjPYF8PONfwzCLypyZLuIpCkvC05ZbnpZzfCdFqiUMEQwagxsGYRpx2hZHC90NuL1NJGqK2qXdWRO9Hk+rSdAkIJEzPitI22JCzahGn+eo7L4yVZ1iD/9rut56CCXOf32w3D+GTBwbQ/a5eIQ8UAAS9JbelQGoZ6XIyAP3vox14Ujrqv1X7Y8YwnSK5a2eAiqVxChFAtLz73vONxYwzjMPXfQQGbXeeE8NdW4fkBtzFwg8l4U3VqekjLXmBR7idPTxu0LvsQkBJnLhvvwbT3/QDXCDw+In4Egqv8UJ+uuBGKIx0=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"> I'm less confident it would be a good idea to introduce ValueTask in trivial/semi-trivial use cases.\r\n\r\nYour example code is doing synchronous work and then wrapping it in a `ValueTask<T>`. I don't see any point to that; it's adding the wrapper for (AFAICT) no benefit at all. `ValueTask<T>` doesn't change how purely synchronous code should be written. Synchronous code should still have a synchronous API, just like it always has.\r\n\r\n> I get why it could be more beneficial in some use cases than the corresponding Task counterpart, but not so much at what point it becomes beneficial to introduce over a synchronous method call.\r\n\r\n`ValueTask<T>` gets most of its benefit in scenarios where the method may complete synchronously. Say, if you're making a network call but your code returns a cached value instead. Then `ValueTask<T>` avoids the allocation of a `Task<T>` instance, which is a small savings but can add up over time.\r\n\r\n`ValueTask<T>` also gets a benefit if the implementation is able to pool its tasks. In this case, again it avoids allocating `Task<T>` instances beyond what's used simultaneously.\r\n\r\nIf you do need to shift synchronous work to the thread pool, `Task.Run` is still the best solution. There's no API returning `ValueTask<T>` for queueing thread pool work yet.","date":"2022-02-11T18:58:16.400Z"},{"_id":"beb2e9d0-b102-11ec-845d-89b9f1e7372e","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"91e2c710-8b6c-11ec-acf1-c908b2ed19dc","authorEmailEncrypted":"KxyGJ6RMPSVTF4gKtplHCw45P8kN0WDoGa7hGdYu47y0fxQLX6LI9Ze2pv5MThQgR4GXJd/fWqLSxYBeGT8ovxkv/sXei8QIHCh5CtcvSTCjaYWdTP5qooRStROfkoYw9DvqXTcAm5ojfcVmazoIFfI72b96/kZMpT4lOiLVu7QaHQALIrhKYg373e6p1DyGVe37uziIVFXB86uX1SJRu1EaV2StAniJotmL5gMjHLAPgf6qn2Pc1IdpL3PJ4XvTVqpGZIrEykOIQlvyQQXvvubmST4mklrwh8HH2IuINgpUl8PVpizsgzlOEGSF66PtOqwRiuwY+LrebMZAANegtNgeqsLNEvk/oBBcIgOudpnUQ9z/OQhwbuhd/IfhtSe15gNcU28h0yNCxvIxj0aSUvBbQucK7qerMem31bsWHj7BMmZg8QSx2ZVRMwR67+SpOdYkw4hUGLluH0qKEtAe6rILXprR/wrCMWKwRDHBYeinvg/uCMJ8MShZqVyW9w1rg+W/MFnJEIQC92N61V5h9WgMPZdVsS8gUengpVFrKxlKRrpDNslWzNJXxrcTG4ykmUwHhyXBA1GvowT4WhtxEtidsjhZ9Q6pqf7fLr/T7AO2h0bgeIdSYkYzJRyfl0+SqDmvAMTS7ypSjfWy1sfp7uodcMe/8WFNy+j8S8WiUhw=","authorEmailMD5":"f7abea1038a8022e39d84f6c6642cde3","authorName":"Brandon B.","authorUri":"","message":"Thank you!  My confusion came from some of the common examples shown when talking about ValueTask (such as https://github.com/davidfowl/AspNetCoreDiagnosticScenarios/blob/master/AsyncGuidance.md) where a similar operation is shown.  I have seen this example in a few different places and was starting to question my newfound understanding of not using asynchronous wrappers for synchronous operations.  Now that I know I'm not misunderstanding, I think I will suggest an edit to help prevent other noobs like myself from that same misunderstanding.  Thank you so much for helping me understand this topic better!","date":"2022-03-31T14:56:29.192Z"},{"_id":"1d44a5b0-ffbe-11ec-8278-c132177ae00a","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"beb2e9d0-b102-11ec-845d-89b9f1e7372e","authorEmailEncrypted":"amT1GM/X8u4BO33fr4cAGN+BHlRJx7hY5FUU7NFBVYoPVvbOWfnnrDCugU+kDU7WPn+LgZfY4rtUVIu+B5Uhsm0UFLB4yUZqy7KYIPfS7jSpPbxZy/EOeoW4AWoKwDq/MYdZEIpCWMk4JBRLIVvKUbaVDrO8id753c/GZJV+Uq8QPUbA49mkdnb9wmUp8yy30JJWZuZDmSAeL4pUnF/t7uZrN6a3x4C222SPESRd/SOc8lpdx2t62lEPYv7cFIsSSvBwIxL/JLRjN+Pfc5NZc9hjHALy7mpxux3CjtcyUDLc4hvq8PQWKNqO5mSES5ins1A1QBXwkYSWFuVVvxHCp4grwE9yudqa+cCIACfvaFoEi2XIepnZQtFJ3jG/35AIn6Mk8CDIiF/GK6F7outybUYej51umQvErfqH6hvddoSUWeA4si9pnPEWrI0G8cOhOYl2uoMj3VfLnhBYtT4zL3c3b9UCA1+lmZWIv66woD/d8PtO44TJWll28leAQy7A50M4FD8qFYNWdUKyu3ZVDBfO0jvJ+D4muDxCuc1jRkhQ+g7ebfz/fA7016E28l3cVG/zaNAz5xR9eBHxVNrs++77ahbumhl4bNHmH0Nh3OklXlWp8tGGlKkjCaRZjpivYuTzg3FrWDByuD5eOtAUMtaTPftBt02ihnkNC12NeDM=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Glad it was helpful!","date":"2022-07-09T19:34:14.294Z"}]