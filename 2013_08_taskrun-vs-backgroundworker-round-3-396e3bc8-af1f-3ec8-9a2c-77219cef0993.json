[{"_id":"5490cd10-1568-11eb-94f5-3b85f1c028fc","postId":"2013_08_taskrun-vs-backgroundworker-round-3-396e3bc8-af1f-3ec8-9a2c-77219cef0993","postUri":"https://blog.stephencleary.com/2013/08/taskrun-vs-backgroundworker-round-3.html","replyTo":"","authorEmailEncrypted":"LpbK7WtTwuuiIrTx86Rhmr1xei+I4ZYAeLXAjIhLMwa4YUKkdNw53cj2BWvIL8ceM5atFXNHRIQM51JK298jPLU/SVPyTV75/3DQhTmkFNOtuR4P2+agk5cXEIa1NCUNs2NyZmNAvpqBVfzz9eJ5G/+3zT2hiLwLXdI2ws0cvIqBqaSItn/wT6W3f73MwHFoy8g3w+zF2B/cy+X0L5MOQVvKBbWLrXIAnEBVgE+NVSg3IxsW0V2BN3RQGoeKtMk2lfsnfj+A0zDl5igPmgF8m+QbkMPFcidR/0qVDpZxEvNAYOxwa98YjmPOZEThm0ajvFWG4yMcq1nToT4eP7kc9nD3HHpXUnAFSR/miidvyMKyylbdX4ipmhQ+LK9VQNt3H7nJRNSa/VYfq2BxxEksoI2i5v6YdVh6xkHGNlrz+C/WNzp6s4di/T/S8sYTSeBhBrg0aZL2cyR5TQHKIF46JsYiz3TIfegRRrx0OMGfMjoaIaWwStQOSqumcSQcguLKi5fBwpj7+Xbpg+CXQ+YPWxBMczKLddbt2lRqIv0JwOvFkOUKPZWTL0nk+ZcQ0W4XK06rJUB8kMwnRDj5bb6fN0V7YNjNvxXYlpD4QYyKKPmJvC1gNAIBJfrecUk2A3X8fILTjFw5SUHFkS5WHnP0rzLG/D48UeTPknnktkJC2H0=","authorEmailMD5":"422642413ad2afc4854e811b6d4bc390","authorName":"David","authorUri":"","message":"This series on replacing BackgroundWorker is great!! But, you left out 1 feature of it that I can't figure out how to replace using Task.Run... IsBusy. In my WPF app relaycommands I have the buttons and stuff disable when BackGroundWorker.IsBusy. How do I get that functionality via Task.Run? THANKS","date":"2020-10-23T19:45:40.763Z"},{"_id":"b183e8f0-1657-11eb-b2ea-877e283118d8","postId":"2013_08_taskrun-vs-backgroundworker-round-3-396e3bc8-af1f-3ec8-9a2c-77219cef0993","postUri":"https://blog.stephencleary.com/2013/08/taskrun-vs-backgroundworker-round-3.html","replyTo":"5490cd10-1568-11eb-94f5-3b85f1c028fc","authorEmailEncrypted":"dkQ70yn8NNx5EZgnDWbDo6zC/iDbkTZzfBig1oHXyBlxc56unEUFZ+HbelQYigb377/TG+DPtp+ZMe6B4FJHnzq2yfKgM0aGNi4QqTOzPOcHnqxgjTuqMVBC0z/LNIqfE+miYyEiJEUcI5xnEolO87zxcq91joCget8CmCx0HXBUm90i/KmiLNVKjIx/SPpWZCjnvBNuOrIJYUfCQs6lLsdex8OsXYHvN2qI3HngK6fVCLzxtcy8/gh7YEZjXaMmyOASymZuiDkIrDIbwUhOlM6GIIl5nfOx4oz3lx2UEbDuGI1i2HDrVV9CTf32IEGzXjUws2pvBP+3kFa+7s4RScxdgfDht4m7rzfVsZT/DbXNwANdO1hKL0wnfKzxslsrZdt1ypMsTjJhlVutsZD77bUke37mDklp0bTKFmCdylUeL68OREvI3BReRgPejCjOR1ybnfbrgXyL6GhDidbc7UfkAnmYtNzb3N4sJ9tNjGD4KwfM8Vx7k/eR7nXuc8tlJIfrn8J1B3J0moleCPK3Vb9O6ov40r/n4VfFCp9x2GFy0zJWCpoyReFpq0ZC3s29bILe2UiCNCuxoHID1Sgpy+MMbqDeMPAQ7yMzBvkpwk1AcvTPgP04ku9iQYkPE1z2aBXnuD4hx7jbGcY2iSDBHbL2G/70r0x7QKuojGFQdgA=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"I'm not sure how WPF would work with `BackgroundWorker.IsBusy`, because that property won't update any data bindings (`BackgroundWorker` doesn't implement `INotifyPropertyChanged`).\r\n\r\nFor `Task.Run`, you can manage your own `IsBusy` property, and you can implement `INotifyPropertyChanged` for it, too:\r\n\r\n```C#\r\npublic bool WorkerIsBusy { get { ... } set { ... } }\r\nprivate async void button2_Click(object sender, EventArgs e)\r\n{\r\n    WorkerIsBusy = true;\r\n    try\r\n    {\r\n        await Task.Run(() =>\r\n        {\r\n            Thread.Sleep(1000);\r\n        });\r\n    }\r\n    finally\r\n    {\r\n        WorkerIsBusy = false;\r\n    }\r\n}\r\n```","date":"2020-10-25T00:19:06.414Z"},{"_id":"35cdc940-8a48-11ec-94c8-75b4580ded12","postId":"2013_08_taskrun-vs-backgroundworker-round-3-396e3bc8-af1f-3ec8-9a2c-77219cef0993","postUri":"https://blog.stephencleary.com/2013/08/taskrun-vs-backgroundworker-round-3.html","replyTo":"5490cd10-1568-11eb-94f5-3b85f1c028fc","authorEmailEncrypted":"vDurg9m+KHvx0ugOodOLEMw9YuZn6pG1K6puh64oT+7C8qbvn/3E9f91nVDBPlYtOPe8QWoIYrCTrcOubG1Z82ma8qr86QzTmRjVsyNvPnAyEy7EaU1tl0Hg9LVN2yZGjKP39ePFAFF2nZLmCCVK0hH8uR/oIovQzSgmoNxgUYtYa/b29jARNrys/si1saRD7UKWxhIRdsC6USprmz9J1Uf48hPzJLDPJ1CMnpQfdg/XrGu+mllksptxiFlZLVoa/vnwChR6u3hh5QyclCX97uirGsvrws+yN7QAZZlKtqMnuvjNO38Hl4YbwTJCqG8Lkw1B6jMdw0+CFb3BxYjr02kqUPpzFBxLd/95hH5+Jh4TXq6p8I4OyJ2Du2Ow4uPei3SRP+hGBQMUZfkNeLb+udSTM91JCqfBKgJri0656uB3eqPYZ9Yu4vDwyQyGNpvj0NZuIqPBgKCpXSLkjl/hn7ca7wzMJRfjiwDYdJ2zIv72K+X8ENNw/Hc59X18ZhV2TXJPPPCzWfED/sLxASBb+l+5LaUijuNbZwagMt1yN8vogojGyu+FKNgxblNQfo/WD9NXuTBLbioMMhKO1XS20OLpwl1P22AA01QLOY9R7d9cEFqE5izJxxmyyqsAuY1fsk6YcOtOHL3o0Hq7Oz9IdP6//hup4wu6WZtcgSBuuhc=","authorEmailMD5":"f0176878232c68b92d38ee15b297c223","authorName":"Artem","authorUri":"http://indemos.com","message":"Using code provided by Stephen, you can set \"infinite\" delay to keep task always busy. \r\nTo stop it, you can pass cancellation token. \r\nTo start it again, execute Run again.","date":"2022-02-10T08:05:28.834Z"}]