[{"_id":"8e37c470-a139-11ec-a08f-53cc30e916bb","postId":"2022_03_cancellation-3-detecting-cancellation-8b525936-6562-34ae-94c1-4dc6f19d6004","postUri":"https://blog.stephencleary.com/2022/03/cancellation-3-detecting-cancellation.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Patrick Borgogno","authorUri":"","message":"Hey Stephen\r\n\r\nThanks for the great blog and series.\r\nFor the first code block you are explaining how it ignores any OperationCanceledException's.\r\nMight there be a mistake?\r\nThe exception is ignored in the sense of not catching it, it will be thrown further up the chain.\r\nAs I understand it, the \"catch ()\" and \"when ()\" are not in a \"when, then\" but more in a \"if and if\" relationship.\r\n\r\nThanks again\r\n\r\nPatrick","date":"2022-03-11T12:48:31.504Z"},{"_id":"4b033a10-a2d1-11ec-a84c-8facc0185c43","postId":"2022_03_cancellation-3-detecting-cancellation-8b525936-6562-34ae-94c1-4dc6f19d6004","postUri":"https://blog.stephencleary.com/2022/03/cancellation-3-detecting-cancellation.html","replyTo":"8e37c470-a139-11ec-a08f-53cc30e916bb","authorEmailEncrypted":"bpQICdhYQwUKuevos39x8UtfbLfS46rSOt8Vrf+oFGzRcez/O2foWD+w9kE/ZCT04EDtiNTTMEkSDPj2/qclzYSTO3K9c3VvJgH8VxjTt/W4fen56iRXXjC2hApYt+y1lE80WXUYM2c4QahJL7IE3L9ZhqyFyJ0U/+J10pP+IQrZ4rsIAeGQiQB2T5ABHicS8cx5ZDeYdiG8OeVYOtrUOanratjXEdNVSCvZxcMGP6BMBbzYtOHpjzYeCMK4oo/rw/tsTKMniTXymG2kG6kQ7Tl7NIAD21NsxpcHNmDKfkeVbGmhqRAzEVUp59SozHQXwIXpFxi1Pt3xpBHD+NFUsJYWSb7qthRLmvWewg3qfNmAQ48TXyKGfVy0z4fjgp7bhEPC9vzJRsR78DAHOh3GkkBO5HAXVRZUJ/1754j4Q7O8nEwAPUk2noSL+AkYJRU06ahHni3u+mQ1M8fxafsxPXuIuk3UoQ/++6IOd5GUaUK8u0tejtpQZUw7BpbzaIe2xCeMai0yCnjmteWlGbwqcFrzOdmwyP+SegiyDLJOoXE+fP2ADW3+5mCXfqw+BuVsvBRpgpjVq8VguhZZZVLf3wqzHL6LO2bFyTZQcgvUBoYG5cVpUkIL6bjAw/tKlrKcaDOFtBSJVkSAKymDIps0gb++Ix7WbGMKINQdyLi3Bhg=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Ah, I meant \"ignore\" in the sense of *don't* catch and handle, i.e., propagate the cancellation exception; not \"ignore\" in the sense of catch-and-ignore. Sorry for the confusion!","date":"2022-03-13T13:27:13.507Z"},{"_id":"2041fbe8-37e4-418d-811b-35faa738754b","postId":"2022_03_cancellation-3-detecting-cancellation-8b525936-6562-34ae-94c1-4dc6f19d6004","postUri":"https://blog.stephencleary.com/2022/03/cancellation-3-detecting-cancellation.html","replyTo":"355edc71-7c39-4f90-80dc-4f6f0db6fce3","authorEmailEncrypted":"ogekGN6GpYWA6xUMNX68GDxFrjZ8ViTq4O1k7dVNLPniNR/fMkLWwDml+RHgvxqSt8DVMpvQZYqT8vOOLBWzruypDx4XU55A5RFCrXeEUuHsdVA/nwBUZaRf3R1jwx/f5Li2je6THZAJW0+JAcQUevQPzbZZwqLHRCWP1Orn2KLqJ9vj0RcW9s5a1VryAp3XSPtbcyJ9uN6uvsZNU9P3/XBojTZ87/D7CtmPOyD2Lbb/toEas0QP12P9zetwB96QOYpW9Mlt0EVmLWezYpHFPUf5JQ3yCyEhpPy2wNwl7FRYJ6EEQgVJcGXt4WUvj4Hk5/0a2eM+mORW6GL0tAk8cW2MsfBB5YgsV6lkT1Cvl60Yhj32T9rOEq4U4Z2/gtKg3EE2ziXboU5EaHgU7ZlT1zjXpwkXGA8RUz8i4bYrD6mSNqNZOn0oOV9Xu63NaDEcRE2mZ91SKvIbvQTXNlsWdiiRZcHPV2uKAEnUt63KQbjEVz4Ve4h6+lLzypfk0bnDE8imm67ZIN/DKjRrHa/wSjYnuJnHHZ9utpCTekqnyY/mVvpBP7pEV7/7l+Brv8KOrjF60RaNkijUqq0Bpog6EM8m6xCFz+nYSq6Cx7FdNIFtwbpBgHWkldbjOU1Oiezd2kiYxrPtjreJ3egklaSXgoeGZ4Ub7Zn++wULlHiiFy4=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Yes, as noted in my post, `OperationCanceledException.CancellationToken` isn't really useful in practice.\n\nI'd say that the best solution is going to be the same as any other code (the fact that it's ASP.NET doesn't affect the answer): you'd have to catch `OperationCanceledException` and then check the `IsCancellationRequested` of your request cancellation token. E.g.:\n\n```C#\ncatch (OperationCanceledException) when (!context.RequestAborted.IsCancellationRequested)\n{\n  // this was a timeout, not a request cancellation\n}\n```\n\nThis doesn't actually check \"was the request cancellation the reason for the cancellation\". It checks \"after cancellation happens, is the request canceled\". And that's good enough IMO.","date":"2023-01-03T14:48:37.1677375Z"},{"_id":"355edc71-7c39-4f90-80dc-4f6f0db6fce3","postId":"2022_03_cancellation-3-detecting-cancellation-8b525936-6562-34ae-94c1-4dc6f19d6004","postUri":"https://blog.stephencleary.com/2022/03/cancellation-3-detecting-cancellation.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"","authorUri":"","message":"What would be the best practice for ASP.NET Core?\n\nI want to monitor request cancellation, but the cancellation exception can be thrown for some other reason from some other place.\nComparing HttpContext.RequestAborted to the CancellationToken on the exception doesn't work - they're different, even when MY code calls ThrowIfCancellationRequested on the cancellation token injected by ASP.NET Core.\n\n\nHow can I tell the difference between an exception thrown due to request cancellation, and something else (like a call to some http client with timeout etc.)?\nCan request cancellation happen simultaneously with some other reason for cancellation, like some async call to HTTP/DB etc.?\n\n\nWhat is the best practice there?\n\nThank you so much for your blog, it is incredibly helpful.","date":"2023-01-03T11:31:08.7197318Z"},{"_id":"d3cdc453-ac2d-45b4-8de4-b9a862e19fc1","postId":"2022_03_cancellation-3-detecting-cancellation-8b525936-6562-34ae-94c1-4dc6f19d6004","postUri":"https://blog.stephencleary.com/2022/03/cancellation-3-detecting-cancellation.html","replyTo":"2041fbe8-37e4-418d-811b-35faa738754b","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Thank you so much!","authorUri":"","message":"","date":"2023-01-04T15:03:19.3312409Z"},{"_id":"e1973313-aa97-4a6c-bd29-8c4941284f7e","postId":"2022_03_cancellation-3-detecting-cancellation-8b525936-6562-34ae-94c1-4dc6f19d6004","postUri":"https://blog.stephencleary.com/2022/03/cancellation-3-detecting-cancellation.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"","authorUri":"","message":"The documentation for [Task.IsCanceled](https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.iscanceled?view=net-7.0) reads \"The task acknowledged the cancellation request on its already signaled CancellationToken by throwing an OperationCanceledException that bears the same CancellationToken.\"\n\nIs this incorrect documentation or am I misreading this?  My own testing seems to suggest `IsCanceled` is true just by throwing OperationCanceledException, regardless on if or which token I supply in OperationCanceledException's constructor.","date":"2023-02-03T01:44:58.8619302Z"},{"_id":"44a9b90c-4b85-4513-9e48-2a1542c76fa1","postId":"2022_03_cancellation-3-detecting-cancellation-8b525936-6562-34ae-94c1-4dc6f19d6004","postUri":"https://blog.stephencleary.com/2022/03/cancellation-3-detecting-cancellation.html","replyTo":"e1973313-aa97-4a6c-bd29-8c4941284f7e","authorEmailEncrypted":"vFmLI3FrfIIUePl0Z0a8jagXTbNG2+z3lgU7GC9psCumRW+QiscQr59iH1w/vb15yM5q39EbKC5QCpF+qYG5SjgIvPlazRw/cAxJGoi7lVuYZ9WCuiO25LaPyiLn7L816rFgWkDVHmsowDB5glKWLuhhCnLSYHB4uhumsJQkTmy2wbZykNjNuiac2T1TyC891jl9P/UInyazJKrQ3Y9ZejWHT97LbYbz3VvawdxGdBUmoh8Sps40gffnqzlUmJ++X49W+NXyDyrb5uCiZAV1077+SgAiUgwPDN31eC7ex6pEvS23arn2xWslV5wL1hHFH1/YTafSxqC9eizPhU+oSKOWowUEc4aW+8HYDXMVWAl6L4RixcUyh6LBF62yy0tmRkgpZ3LLuNk+xagMMoxlsgLl3qQ8zyTJpRGA2fGY2SWozKA9Xdw05gApVxOTopUMIxlTajfOqQGgB0chfmGR8yK87hGuo4Yv3kH2/3cZ4985npDxuUU09dAjGmQMDbm82mb0HAezyfsDIhXKC2mm4S4ZfeCqrfIKGzpxjuG60CTJowQE4j0vPpNEWIw6EwdGhlgmnu8UGCv0z4YRpj1eq4+1sK91bDLHzSkPdA0AfsQa7a6cfDFMD+mzoGjIIj3vTcWzvC2HOaCpBibJan3QCFu71xvX1pupKW8B0HgbYNo=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"It's not clear what `CancellationToken` that documentation is referring to. It's not the `CancellationToken` passed into an `async Task` method. I would expect it would be the `CancellationToken` that is passed to `StartNew` or `ContinueWith`; `IsCanceled`, `StartNew`, and `ContinueWith` are all low-level TPL members that existed long before `async`/`await`, and there's sometimes some surprising behavior in the edge cases.\n\nI haven't tested it out myself yet, but I wouldn't be surprised if `IsCanceled` is set to `true` for any `OperationCanceledException`, in which case, yes, the docs are likely out of date.","date":"2023-03-07T23:33:33.7181928Z"},{"_id":"a19e45f9-be86-409c-ad6e-039722a19adf","postId":"2022_03_cancellation-3-detecting-cancellation-8b525936-6562-34ae-94c1-4dc6f19d6004","postUri":"https://blog.stephencleary.com/2022/03/cancellation-3-detecting-cancellation.html","replyTo":"e404f960-98a2-40b5-961e-0255a960617e","authorEmailEncrypted":"fvWW5jTl8Qtm3Vd8WgR/O22LqG723HcLdi0sG73e0QUOs0UAXxwRD/JX7qOh2XKM+DYQUJ2MqTAfA+4ierpshBreu8c5Fsk+uEDdwdI7URvA/sJwMWrt/vMOvekhWrLiY9i898nN0JfX6XEeXghwVRTebJRIz4f8fI/9OwwLKQpmcQwrb8MJfs+QxSB9NjLvwh6UWPoMJsoE/bD4KoU3yAlHi4purRdGHPl4KULIcrkWL8VXzKdWGIiOIrP0XEUi6GBm8PAJy7zU1cpwm7zvp0ZWoTmgGAbav5eGUbHUct4lLa4hItTrIS8DIZSygWoTBXiV0KB0YkYPg7v8M4xE5SWPe1dSdynQPx3lkpuC1NhLqiwiFo5uEcIys+7h6qXOIM+vYK6iijaeOLVhvw45gUfSMjLny5Ib/q9NG5IqMvANITgcPZPQ+DnvDfXpT8SFRLe85mxw4iObsWrHZjXCa1+tn/edWylll02GEdyGRpWN2YWSvXjpJxk3e4xGrDseatmBopxM+/NV55UHnL3Dhw9jHxy1H2mTL0DZQvEd0zmxI27ImzyaAS6a/JaIUVQwoQGFYCewxkFLUAh5G8NnQpIzUNEacn39riC/s9iiHnCYKYiN5v95cdJ7XbWMmt15gWIZ7L+5GM3WpO6JFgyCOODSW1L8/xNcQI1NnUtStqU=","authorEmailMD5":"381537313bdcfe657db68a2b2189869a","authorName":"Stephan Golux","authorUri":"","message":"Thanks.  This was helpful.  I am using the older stack with much of the weirdness you describe.  I think I am figuring out that TaskCancelledException can be a proxy for a network timeout.  I had been logging previously, but now I will be logging actual time in flight, HttpClient.Timeout, and determining if this may be the issue.","date":"2024-02-07T19:28:13.2703409Z"},{"_id":"e404f960-98a2-40b5-961e-0255a960617e","postId":"2022_03_cancellation-3-detecting-cancellation-8b525936-6562-34ae-94c1-4dc6f19d6004","postUri":"https://blog.stephencleary.com/2022/03/cancellation-3-detecting-cancellation.html","replyTo":"efa918ed-efd4-4580-a7ef-ae07d4b41656","authorEmailEncrypted":"eW4Za7PpNWz9Iu2+GtyiCC1QqY32qpBl6NuUeifSjoJqO5BgbtJ8dSjiYjF14FQXRfpEpV4KtSgsX1WiqNb093EgxeV5VJZ/oby4LWJLRFFJBLJnAyWhq2w/c3+xfWRzzeb072cNrnOIQrqGsQg2hRd2+FcRiGDh9tKXMrv2C6BaEaSeS0wzGfyPYZPfEhCYSi44496/Wdg1WoTaxKYVWpCAdc1oyL2VqD8VfDu2aj7L9GTq0KXJyzOMwc+zT6b0xDOwNbx4TF4dcokh+OF4UwxO499VbXRpb0ThZU9FbiCwBRjCI0ffRjzsUaDwd/xOiT2h0L2z+S88GeKR/3cNdfFad//0FfoVXYj7P4W9B+AZvY+iYKqsQK3dtFCcOBxMl1hmOEopv+dvJ3gPcpwPTZ+smySojpjXhX1ZFAOs5LnOts1yCT0QfA0sih/tO/Dvi+Jcw2+GUQDCXBBpnKr/zPvUjzjizc96aakT1mnjYbXFxg9S5eHECkuTl3ft26Bh1aVOrMPF578ZsfDRFt8q0u4ymKG67zRt5V3+UCeVKJtxkzJ2zXNWdAHxlgInJ6BYnDEoiVwPnUb75oxXw0P7a90zxecePVJaAgyGRbE/3udvZnA59jNVrRxU2U60yVT487USbUiJQnSSn5mWw8vi7JBsW9mbfJWzgL13bF95s5E=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"I can't say off the top of my head. If you're on ASP.NET *pre-Core*, then `HttpClient` is built on top of some extremely old networking code. If you're on ASP.NET Core 2.1 or newer, `HttpClient` uses the newer `SocketsHttpHandler` which is modern networking code. The older networking code is more prone to weird edge conditions and things like parts of the stack being unavoidably synchronous.\n\nEither way, your first step is to catch the exception (I assume you're already catching `OperationCanceledException`) and logging the entire exception if it's not expected (i.e., your own cancellation token isn't canceled). Once you have the exception stack, then you can take a guess as to what's going on.","date":"2024-02-07T16:34:59.5912525Z"},{"_id":"efa918ed-efd4-4580-a7ef-ae07d4b41656","postId":"2022_03_cancellation-3-detecting-cancellation-8b525936-6562-34ae-94c1-4dc6f19d6004","postUri":"https://blog.stephencleary.com/2022/03/cancellation-3-detecting-cancellation.html","replyTo":"","authorEmailEncrypted":"ubsSc1tgL/0a8aIfWeN2A2f8woQjJnpo1HVVyoKPN0OULvBiYMzy4iq+57kdXI6N5i/0Cy0+nr/xeJbfFxA4AbRtvGh01gUr+NBDj2rQ81K++UZ3UhwVuJFUi7aOe89OmM0INsnaE3YqbleiRMk3hWd1gQHYx/7ypfuDdw1PhGf+omhyYQF6XWO7+EpyVOEi6zPGd7dST1EaCUIHih2+MDgJSHoDOhv9aBkzVq063Ngov0nNlV+iyNUq9D011dcidHYPQ6G0NQLP8c/eSccApSNs77RveJbsd8yOVUgvzyQQ4VOsoFYDmzjZFOpKTyzmVCD5b3q3UKfG+2MbSmAFPxJuhCNhNlaZnQb/2dUu21L6Cw9YJPNxcTDkl7Eo69zWktZMpwJ1y3I/NSLMyP4mNWVJp0To0jtV/M742BmEVfiP4wbBu8GBKMvltOYconrtL5gYFmXbr4IZY/7hvqYH2cPKXCM6OMgPtbRk0b8cVJatR+S1zLHI7tK8FjjuAha/9DQ35F6XwBhsJkEjxn07VadOhlymGiikZgglTS4s0rw59aegnY2j6SVEd5XsSaQ1PK0bzaPsTJcRATUqjJHTKAaLkRz6tThpPeZvhlg/YT2whqs3Fkl6qhKP0u3nytTmnLblZhR0utw9gr6kZpAgc5VJyzFys8Z1WVxfhr95fM8=","authorEmailMD5":"381537313bdcfe657db68a2b2189869a","authorName":"Stephan Golux","authorUri":"","message":"I am using a 3rd party API, using HttpClient to invoke restful services from an ASP.NET application.  I am set up so that if there is a need for my application to cancel a request, I do that with my CancellationTokenSource.  That part works fine.  However, it appears that my awaited invocation to HttpClient.SendAsync() very occasionally (maybe once in every ten thousand invocations) throws a TaskCancelledException, which doesn't come from my own cancellation.  Both the documentation and the support for the 3rd party is unhelpful in helping me understand why.\n\nI am trying to understand what this might mean, and how to respond.  Currently that is just an unhandled exception that bubbles up through my code as an unexpected integration failure.\n\nI suppose my question is whether you have experience or insight in understanding this given the black box I am facing, and how you would think about best practices in handling?","date":"2024-02-07T16:11:03.6706802Z"},{"_id":"59acaa4a-18cf-426d-8121-0c847058dd64","postId":"2022_03_cancellation-3-detecting-cancellation-8b525936-6562-34ae-94c1-4dc6f19d6004","postUri":"https://blog.stephencleary.com/2022/03/cancellation-3-detecting-cancellation.html","replyTo":"","authorEmailEncrypted":"uLGKjkwoE8YSmJHmHi0QmJ1Pa+uF+GC7aSHnchw0In4UX1HZCnhAiXALxq9jltSGqSeorXKvoyolB8pWV3GzhYaUOmJfQzb4USxBQOU3YZzZtBnE1maBbUL6EekMRWStmcBClHrG7YcJbEARG10h0MgcUzkZBRh6/nDSElHUyddaf1dFPUTD7LLC6AxLB7ccmcmGUwOy7M/I8EM5zI9EXcEXKj+C2QHq05oD5RH7z1s2ZMEwLuaeJy/zVsxu+jAyXQo0SIGa14P1IFs0F5P4ZMTpJMcsjikjgUr+PuEa+IxcJEyKNkCjjZq7fUQNJElDYnulS1wdlZxL52Hja8rcIJ2807U+sdeLcwFsaZsHUzeEI0t/u6bMzMJ0aODeQ95aoVIqaUNqS7DS/nwVpoIRZhHwRWiHwQwY1S2oVTbiATz/riV2pxo2bPsevyzds5bsDQj5V5RwExkMjYezpwV+VJiv/9kVvpItNLBTAGzFRz/O4tEGONdb126nE+VuQJ5fv5xXwIdAvNTFR2V8Ydu4SCc83zUmuKU7XeIMcawDzyzJS6CWSnsEM0mG+p4DUOVx4nUP8NxS/UgL6JyqS2BtMYAbX83srRXTENss1nhmT0anGVOvXram9rkwMgdNPqLGgasPv7o1rC1ncS/QIEuS4Nr+ZK09h6Wku4J3BYTYpXI=","authorEmailMD5":"1dfe9bfd3f2841cc61668989b9d1ac81","authorName":"Grant","authorUri":"https://grantwinney.com","message":"Always enjoy reading your articles on async.. good examples and easy to digest. Thanks for that!\n\nI have a question about something in this article, regarding this statement:\n\n> If your code must do something different when a cancellation happens, then you can handle that in a catch block. Well, first, I’d recommend taking a step back and asking yourself if you really have to do that, because **it’s unusual and raises concerns about the code design** _(my emphasis)_, and it can be difficult to test as well. But if you must:\n\nWould you say if we want to provide feedback to a user that some job has been cancelled, that catching the `OperationCanceledException` is the correct thing to do? Or would you say there's a more appropriate way to accomplish this?","date":"2024-10-06T21:56:22.5314736Z"},{"_id":"ccb46248-9523-40ea-822c-55db604141db","postId":"2022_03_cancellation-3-detecting-cancellation-8b525936-6562-34ae-94c1-4dc6f19d6004","postUri":"https://blog.stephencleary.com/2022/03/cancellation-3-detecting-cancellation.html","replyTo":"59acaa4a-18cf-426d-8121-0c847058dd64","authorEmailEncrypted":"rCL1Xd7I4zCHLX/rFPWZXXYI3HnOg5HfcLngbB9ivtj6TrzNYPXtZfVb51EpaB/lYgPP2+s4g+hquzN7rsjJS+BWenqtBkxsGxnXZzRd0xVVOESBBZMkJYxHKhZYV/UeJwQCI0uRVR6jHt1/72FwMnfXbmJplfnKZpSfK1EHZW5IHeoWtFo3CVEMaWfWQnmJR/ZNG0NlLPAsZrKhprgDwKwaoVPc0ZbpG/GpDF4IX/ERb1Oe1QkIx6bd7wrLEa7RuWvRXjT/SnJTmoR+J+xe7uM6T7WjBobMOXOawFJXfTvKf4J8CPINEYJU03CSCbEbm97yjUU1wjLoFGP3KMUETQI+J66JvaiGDX31n2uL/smlRp+l7MCiOVWm1BwQxJA8JUlYR7AcfMi8qJJ1PE82sG7oUhS3KoyaldxjR79xbmUNAgCz7ypTfEy34s3tGhZX+u5/EWrygqqgpvNP1RS+NrznXrBN8HhUsBVUBRCUHAzYnwLN+uOROvDNXuXk5DifscUx6ii0dqpewJRsspXYOZ2sz75VlNFnmvBBPm8U2sCg/AEkoysd2dBNtWemzPlgSGY9pC9vHiCrjhVu+WnxIP6f9+yCriqIX57J+RRdxAycFqGIVPHtEkpwohXY7O0UfvoSoODmFvcr6NrUq3hcnP8tP7ZL9Krlz3UFg7ZVWJc=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Yes, that's fine, and that's how I would do it.\n\nBy \"do something different\", I meant more like different program logic - something other than handling cancellation. E.g., \"do A, unless the user cancels, in which case do B\".","date":"2024-10-07T01:52:45.9021514Z"}]