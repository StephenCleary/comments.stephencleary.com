[{"_id":"e60aa50b-efc0-30ca-af78-087860f19554","authorName":"Alexander Turok","authorEmailEncrypted":"","authorEmailMD5":"","message":"Being posted on my birthday this feels like a personal gift.) Thank you for a very helpful post!)","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2012-11-10T04:38:01Z","timestamp":1352522281,"authorUserId":""},{"_id":"979dc165-d208-3b6a-bab8-8d59bfd9e99e","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"Nice post. Give a better understanding about Asynchronous in C#. Thanks! :)","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2013-02-12T09:43:39Z","timestamp":1360662219,"authorUserId":""},{"_id":"858e3ed5-3751-3d39-bb67-4704294466d8","authorName":"Joro S","authorEmailEncrypted":"","authorEmailMD5":"","message":"Being somebody who is currently trying to \"formally educate\" himself on the subject, I feel that mentioning explicitly the synchronous blocking behavior of Task.Result property would have clarified a lot. I read most of the referred answered questions and most all of the people having the problem were expecting a magic to happen and return the result from the task - a magic similar to what async and await give us, hiding the complexities of CPS programming from us.  \r\n\r\nHere's what MSDN has to say about Task.Result property:  \r\n(from here [http://msdn.microsoft.com/e...](http://msdn.microsoft.com/en-us/library/dd321468.aspx) \"http://msdn.microsoft.com/en-us/library/dd321468.aspx)\")  \r\nRemarks  \r\nThe get accessor for this property ensures that the asynchronous operation is complete before returning. ","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2013-03-04T09:01:30Z","timestamp":1362387690,"authorUserId":""},{"_id":"2fadabb7-8790-34b2-ab8f-e50120a16286","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"This saved my day!! Thanks very much","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2013-05-25T00:05:42Z","timestamp":1369440342,"authorUserId":""},{"_id":"a5ece6b0-b1c0-3532-a87a-89c8e025dd2e","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"This was very helpful. Every code example wrapped the HttpClient portion with Task.WhenAll or Task.Wait. You explained the deadlock that I suspected. Thank you.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2013-06-21T02:46:30Z","timestamp":1371782790,"authorUserId":""},{"_id":"c0aa9e50-07fc-38f2-9341-4bc9bce0ef7c","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"The ConfigureAwait(false) saved my bacon! Tacked it onto the end of GetAsync() and 3 or 4 hours of painful struggle magically disappeared. Cheers! Richard Hammond","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2013-07-25T13:25:15Z","timestamp":1374758715,"authorUserId":""},{"_id":"3977220d-0733-3870-be56-dafb767ffdc0","authorName":"Edouard Paumier","authorEmailEncrypted":"","authorEmailMD5":"","message":"Hello,   \r\n\r\nFirst of all, thank you very much for your post. It saved me a very long investigation, I believe.  \r\n\r\nI just have on small question. What does it mean, for the asynchronous call, to not collect the synchronization context?   \r\n\r\nIn my case, I'm in the opposite situation. I got an In-Memory WebAPI server, which I call from a long stack of non-async methods, which in turns is called by MVC (don't ask me why a MVC server would send a request to an In-Memory WebAPI server, I feel we would drift away ;) ). The non-async method waits for the response of the call to the SendRequestAsync of the in-memory server, and in a MVC context, it's the deadlock.  \r\n\r\nTherefore, I either have to change all that stack to make it async (and I don't even know if that's possible), or to simply drop the synchronization context capture from the In-Memory WebAPI server, using Configure Await.  \r\n\r\nI assume there are some data that would not be available anymore? What's the con, what would I loose?  \r\n\r\nThanks a lot.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2013-08-22T11:46:01Z","timestamp":1377171961,"authorUserId":""},{"_id":"35191810-a26e-3238-8b06-25a7c5134b12","authorName":"Stephen Cleary","authorEmailEncrypted":"vagrVQ1v4o+d4Nl2UDMXw+HJGzWnf9nGuKGci1Zd1L0Zyoj04d+e12wkppoI5lSnRn4HJhmndl/N4lHjJifv2WoOhxqoBOeWqserhqqTuIHtU42tv4UaeacGSSFBqM55RTS15n1zya9hejT9QVA3qOkipVpVCzXvg0joRO33+uhDIJEybH9XDDC8hwexUo2O026ubEvHmz077LK7c7tFo3GXRAi/o+uolbKDl8dggIDOt/hrdJsmqLmfm4vL9M8rK4yPeSxOWJzR8CD/m/E3OR1jsRplR72GHw9P6y3GVf46M4s7rhG9IklscJWbJO2K0A2kIzIZjoSzykNXNmQsqW/8O0+Hdy8Ay6nXO7lLARE7Qx6WjrRk61XF3PImcuVU8aE7Jab8U8LODasNZ6ccvoob271QeKoRUcSYIz5fncpS3SEszb3jCwu3s08dzUXt6j5rnPCiUpok95GhZ2//rP9Ixn0/EXTkpXhdU0NmtonUhFt/a8xqqZ0Vo/qEkiccpm7kGVlX9PL0PV9O3EjwvZVvJ5DUe/a0tTjxt8rNn5fE9SXBO9TPy0q2kNubASsceqerf9z98Igindww3x7fneRsAb1TRhNH59rfJ8j9d1QEEGxZ9ENdZFotj8CBoZ3tDs4e3AiernizXtocb/Ovjxi8xHrhsJqUhZ2WoajZM+U=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I assume you mean WCF instead of MVC. It sounds like the root host is still ASP.NET (i.e., your WCF is hosted within ASP.NET).  \r\n\r\nYou can look at your current context by doing a \"Debug.WriteLine(SynchronizationContext.Current.GetType().Name)\".  \r\n\r\nTo solve the problem, it's best to actually make everything async (WCF in 4.5 does have built-in support for asynchronous implementations, and if you make your server async it won't affect your clients at all). If you can't do that, then you can put in a workaround such as ConfigureAwait. Stephen Toub describes several options here: [http://blogs.msdn.com/b/pfx...](http://blogs.msdn.com/b/pfxteam/archive/2012/04/13/10293638.aspx \"http://blogs.msdn.com/b/pfxteam/archive/2012/04/13/10293638.aspx\")  \r\n\r\nThe disadvantage to ConfigureAwait is that you lose your request context after the first await. So you can't access anything on the HttpContext, or depend on things like culture being set appropriately.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2013-08-23T00:59:07Z","timestamp":1377219547,"authorUserId":""},{"_id":"0e8ffee1-9ec6-3bd6-8145-c296bfc737ce","authorName":"Adam Miller","authorEmailEncrypted":"","authorEmailMD5":"","message":"I'm using .net 4.0 is there a ConfigureAwait equivalent?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2013-11-13T23:42:41Z","timestamp":1384386161,"authorUserId":""},{"_id":"2b943f4e-bf3e-32ce-ae75-b86b9863720a","authorName":"Stephen Cleary","authorEmailEncrypted":"Hxm77kE6zIGXJyTODoS3iz0Imb64m/MDlXBlmxnZiiM1KhGMfm7Oz+gUGl3MowtICcTH6k7eGDTrnIKAHrVOYiDB6loy80JerNd+emtg2bgl2nFAd0L4hHUTzUg2K3tXcZ+3S3I8zWzReaDCCDLaO8mLXJTwmTFDUYydWk8yer1NGBOoV7yIgGRl+N5a3N/xgRGBff4l7/5itN5jHxhnCNeuGO85HAEl1AkFMAc/95CaoLTHiRSG8ol1ZmYWyy9Szre6WUmgcUnrJ0fToTyX3TdgiAw897Cx2gBsz6dNmg0THik8I3qFlPpz1T9WU9TPjFFfTJykgjlbGET0FwOLTTxH0mfB2Z8iBX88BkuQtkCvDVsJxPJ+PKnoIVL0IqxzvK+qYCAtsu3iVSdkr8DCIvLCAKzMVBTMaT11uouGZiYENTWpEVjw2clSWr0OV0AslI6imLdSledpztiIikFtJGRXs9VKBrHXyNaVJawoN6JfJRRPvDC39W3WXE84bTzueKqg5By3f0NV33rKyz557Onz0A/JTCmCXwtFZvIbrNnbu1E/OLPOJdFLaxLuD76jImOaL7kWL4SqFsjDHq9fZl2UwITULZojE7uBESakvkZ2M0BUCq91d2g7vNI4y5VrICVk0TMuGrV6/2E0Vp5Uquv/aUQOOdEuqVAas+iIuo8=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"If you have Microsoft.Bcl.Async installed, you should have ConfigureAwait available.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2013-11-14T00:53:53Z","timestamp":1384390433,"authorUserId":""},{"_id":"4baabd4a-6985-30a5-bb25-38bccb51ae6e","authorName":"Joe Enos","authorEmailEncrypted":"","authorEmailMD5":"","message":"Is there any way to detect a deadlock? I just tried your WinForms example and see exactly what you're talking about - looks like it will hang forever without ever returning. I doubt there's anything we could do at compile-time, but at runtime, is there a global \"deadlock detection\" concept or anything that would help troubleshoot something like this? Like in SQL Server where it will eventually kill off one of the connections that's involved in a deadlock.  \r\n\r\nOf course if we build things properly, deadlocks won't happen, but I can see this potentially being a common mistake.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2013-12-02T22:43:20Z","timestamp":1386024200,"authorUserId":""},{"_id":"131b4b66-dad3-346b-b894-137a2b37cfda","authorName":"Joe Enos","authorEmailEncrypted":"","authorEmailMD5":"","message":"Cool, makes sense. Thanks.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2013-12-03T19:49:31Z","timestamp":1386100171,"authorUserId":""},{"_id":"51981bca-f694-31f0-be59-a4e6a94c229d","authorName":"Stephen Cleary","authorEmailEncrypted":"Tegg6d/wranHWY9gkJjdmMUmrKy2BYeSo3tNdrB4wepPwyhTWie+8GfPuJ8V5vK+61h/yhu5LzQjQHK6HCGizRkamHvguMo8UPN9D9nUU8F//9S2oMwK2RSL+jMfVtcAKW1UfRX6pwNjGKO6Snl+Un6i7OB9s1kGfDYqh+7OPXPMR4BZM7MKJKmNf1yyulYlkzimIWBpQjH6a5IYRVqTwaeOXLL+GwohFnhAiqjEfBoL4Z7faY+C/wgBKwq+OdSdND7N3haBt2u3d5RaJAGX0jxYrTY1xdslwWvZkaNl+jS7+6I+SWBN58zKQoMxW56kVHBSIp+HP8Z6dH+KBNB85UfN8ePzjUSGOmoG/ay58OIfe91P+bS4F05AqCfJ7cFHdQPHu1rk1Acw197QMrBINtCy70p+z2yHAhpZTNp3PpyrGv7cNMRvna6NaBHmtNkjb1zAF5BLZnbKpUb2Em1ecErZv61HeAlZWBpfrI+R7gjlrOOPuQ2lY57XHtFCqJ+Geb8SZCcbtFuEn38i8hgHGzN9dFOhv3Zu7B5BGUAw33Aed8+qPx5jQKqTRde6dCBjC6rG3QWozWRj7WSGgAf/kE53zL+uGEyLCYXQeW1tlMlNTi98EUdkWCAGN7MBNZLe7blRhC4ArXu5LimsTNDzELIqJG3/dLPLHGueOXlv0ts=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"The problem with deadlock detection is that you have to hook the Wait or Result calls; this should be possible with the profiling API. Alternatively, Joe Duffy has a blog post on deadlock detection but you need to provide your own SynchronizationContext (in this case, it would need to be a wrapper for the WinFormsSynchronizationContext): [http://joeduffyblog.com/200...](http://joeduffyblog.com/2008/02/27/hooking-clr-blocking-calls-with-synchronizationcontext/ \"http://joeduffyblog.com/2008/02/27/hooking-clr-blocking-calls-with-synchronizationcontext/\")  \r\n\r\nEither way, it would be quite a lot of effort. I think it's not worth it; in most cases, if a deadlock happens, it *always* happens. So we're not dealing with a deadlock caused by a race condition; this is usually just a one-time learning experience, not a dormant bug kind of problem.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2013-12-03T06:50:45Z","timestamp":1386053445,"authorUserId":""},{"_id":"4a95efe7-2c06-374b-9421-bf8ebcf5c826","authorName":"Todd Nichols","authorEmailEncrypted":"","authorEmailMD5":"","message":"After reading this the clouds lifted. Thanks a TON for this post.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2014-03-05T22:13:03Z","timestamp":1394057583,"authorUserId":""},{"_id":"545d9cc3-fd93-3460-bc04-707cdbc8e877","authorName":"The Answer","authorEmailEncrypted":"","authorEmailMD5":"","message":"Hey Stephen,  \r\nThanks a lot for all the article you've published thus far. They are super useful.  \r\n\r\nI have a question for you. In your code solution 2 above  \r\n\r\npublic class MyController : ApiController  \r\n{  \r\n public async Task Get()  \r\n {  \r\n var json = await GetJsonAsync(...);  \r\n return json.ToString();  \r\n }  \r\n}  \r\n\r\nNow if you make the Get() method async and you call GetJsonAsync() and if this method is a long running process, wouldn't the request just return back to the client without actually waiting for the GetJsonAsync() call to complete. Could you please shed some light on this.  \r\n\r\nThanks.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2014-03-14T20:47:48Z","timestamp":1394830068,"authorUserId":""},{"_id":"858ac585-d7bd-36c4-9362-4505882f510a","authorName":"Stephen Cleary","authorEmailEncrypted":"E2W3mkIMsSxAkXbqbPFD3cMNB7E+2pbeiGOZoXv+D4mkLjIFEl1yW4J7rTJQfOCMZBWVjWzzawM4uy5UyKfUvFnb6qtDfVqpytCaQ826Dm91Lprm0V3tgr0NaJtp7yl2CloHADYykQVob9mGE6wILkdNoQznmHICEwNWOrmjpZA0d1mixrj3Ytqucb3e1rFvvTyEwzbmQ5hiK9b5DdSI6KdKLBD6Tqog0owBDoX707BsouYWNC5/3ZAUDmXtb5lsignZKVBQOqT5isn+kCtb4mr7dRQt77JWQ5Pt2u5AFbuJKwPy/0I9PPv/QJ8zEg6VbATNnEVRu54ROWmiRMetf4rceMhHAqi8X3XQVxDDZalFm5mKHYZ5vtuPawZucI1tAN00a1z+QZI9mIWkhQsVGueT9TF08OKDu7dU26UuGu1M0QGbnZaJbYil6VORgE/wh0ulFrd90WIMS1k+ErsZrl4pAoYYVU16izONtVq9Ws8KERy8K3guq+mui+iVzoB75MJaQN3ZzT56bq3B3P6NDt8zsdXlNZPPcKYTugW/cH782NoZA+AqF+N7vKVVA18uQr1hd55U4HbrS5cBx2Y3MjJCeKaJKKOhaKRIkF0g/jCC6XwsQZPYYwvWRHfx+ZZZmHMmxTpsDANrV4C7XpZwlrkKYENV5g54gFp3hBu4HUA=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"No, it will not return to the client. The ASP.NET MVC runtime sees that the action is returning a Task, and it will (asynchronously) wait for that task to complete before sending the response to the client.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2014-03-19T17:06:31Z","timestamp":1395248791,"authorUserId":""},{"_id":"a5a69ee0-8cc7-389d-a6b6-de91bbd3909e","authorName":"anurag sahay","authorEmailEncrypted":"","authorEmailMD5":"","message":"This comment has been removed by the author.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2014-04-26T22:47:11Z","timestamp":1398552431,"authorUserId":""},{"_id":"d0fd57ba-c2d8-3b73-bbfe-a2c9f553a1fd","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"I would bring this piece of information way up in the blog. ConfigureAwait(false) causes a lot of headaches because HttpContext.Current stops working.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2014-04-26T23:33:55Z","timestamp":1398555235,"authorUserId":""},{"_id":"6f4cb468-6a02-3f3f-b380-2e45ba361621","authorName":"Stephen Cleary","authorEmailEncrypted":"PJej9Bvik08xlhuTg7udaA1cueY+cJNqhk7wrJFvpyhU8dDf1tclbZmKgwhDIQRRpsXEeVkWjis+cjsAVq42fQnGHPFC6WiQsM64ScQGner+fQoiSi3xRFK32K1btDJ+b6Sie8SpX0dt+fx91W9UZT9sJdWLFHiW5zPaKUyp5prkecR772+t92ALUHK8/noxeuCk8p99itCNC4qYfHxqnl5eTVLnIQHMg1EDIgQl2Fy6hhb9xA1qH4TzTGowGXi2nFse1xdOBfmJ3nww1csQSDWH2cXCCvxZNxaXV0o1zFmnr5mR1hlo0fc/88YqX8SGMJ9OZGqt1DYCkNG16NdI0JubIqiYDluJKO7CJnOIegxzkVLuPvLhuSHWpvGjUO+SUmFbdBS6Jow/J+egNyf+PlGIiLj+lRAqCJ1m336U5kQiPZL2S88IuZxSMr8KyPFZknqyy0jBLn0Spcacjwk1U/mLRPgfUEgRMY9Kfwx41Pvk6J2hMAij75ZqYGR7rmYhfzHnDeyQyVi00iLoCV3U5GxzwvV3M2gZjOU03qvjrBQxBUdYpRzY0mv322oiP6NrjoM3HSYnBg+HZCtf5WgFucXDl737Xyt4p+/9V2LtE72b3ldFTndmIWL3KT1YGNCYzOBtlIRRIYcLRR47594GiufbGLfxMNe9FJPvjGIJ1wY=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"There's no point in blocking on an asynchronous operation in ASP.NET. Take a step back and think about what you actually want to accomplish.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2014-04-27T01:13:12Z","timestamp":1398561192,"authorUserId":""},{"_id":"a9088361-0232-30c1-9c0b-0e1a92fa286d","authorName":"Stephen Cleary","authorEmailEncrypted":"JP9OTJZT6w7UdqJNVepKgfvPADAeF4LqGZzvid11p00Pq7ZH+hxmkv7i5o1k9VwuBiEz2Td4W3QTvG6dOd7p/vkLdNJlz9JrotfFvA4cQYaypuvnuOeTg6Rqr2oTJaDZMOWm6r1ndL6TfCBqn/oAcqQoI+u031UPfogsb+2F/KLJy285jk+Eldmuk5+Y9REyyw7d0ID93T/uCFv6xNd8y80Ca4pKegnWv6sn6zCI20HFS3Xw8GQ0/psiutqN/p8mGnbYM5qJOWsG2zbu5kDMXZCriIvSES3J/0Yw5ywa6GD4c1ydGF2ooAtDImg4RQthwJchTfkEc3KfJJiY/8kDhZqiSoyOeg3Ox31MoT9R5c96CwXhHkJ2C0vacu0oW/7mgVpFnk7jGJBJ/V6WE6ioRvTJPhXjPUOhPDlAfb05iEEYPBMLsbET97T6O31LuUcEks3fusXRDziwNTSt0KD4UN2Kh5ZhrRd2EhieomVHyBpojBN8FTGSB5BblVSr+0XWBnvPhgLSmWfon3CzCM69bx8QMUUXPkpwIi4BXNOmE0a2ZkXuMaU/FRVXwMwHPfEYVM3nC0Lx15AojvtoRsSZ5Ue/Xi4u87PYNypN4oULPhEW3XEzq7xErCc/TdLpuNIUxWTXJ+7lqyM2JhOQBgCEuoj6Hd3bjfJ9hOxzcZhBH0Y=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"The decision of whether to use ConfigureAwait(false) is independent for each method. So, in your example, if GetStringAsync does not need the context after the call to SaveChangesAsync, then it should use ConfigureAwait(false). The same goes for the caller of GetStringAsync, etc.  \r\n\r\nYou'll find that ConfigureAwait(false) ends up being in every async method that does not need the context. This can actually act like a kind of divider in your code; e.g., if a ConfigureAwait(false) method is in your UI layer, maybe it should move into a library; and if a non-ConfigureAwait(false) method is in a library or domain layer, then it should probably be moved out or refactored to use IProgress instead.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2014-05-06T16:16:22Z","timestamp":1399392982,"authorUserId":""},{"_id":"f6df9666-5f24-306f-9a44-d0341f2ac071","authorName":"Doremon","authorEmailEncrypted":"","authorEmailMD5":"","message":"Thanks for this information. Do you recommend setting .ConfigureAwait(false) for all async calls in case of multiple levels of async (e.g. GetStringAsync method calls dbContext.SaveChangesAsync(), so it should also do dbContext.SaveChangesAsync().ConfigureAwait(false)?).","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2014-05-06T05:54:50Z","timestamp":1399355690,"authorUserId":""},{"_id":"580d10b3-6002-3658-8514-0d572c0df99a","authorName":"Alan","authorEmailEncrypted":"Gek/rQ+qDD4EkuHnfu2nZfTjvofVrULk2QqMc1ykwhPHBmkNaQhfZTu/GE2AH+AlND2HYOmxRginCKahr6iQ9mCforudYj1JS4AQIcyFAr4reVYCjL7BLLVvaoXRbLOGBxCq5ij1BN3ukhMT1BZA45O9SS+0vXEToeBfn1vONQi70EsEckCIHfUQ0wqHIYVK1U+VFfMTgZSlV7NZ4/9wkB3j4/Cy7AcbDrOGRtLa9K7LHCoi1skFOhkGpNxLTePPVmrYXsXDm/cE+PpPYVwN8rgDZ4dp71WvJDmb3leo2Fj/pI++pVyoHWyTCJkb56Sa8QSkaVHdWxfPz+E1ZG6Ao+WqjYOHM5jyuZBIWsd1GfYkOzv1iIZsqmZsPM2Lv0sJL9yKFMlaFd/NJ5TVCDPV0oQH5FcuCA9ghutEwDRDF57xG/VWWXg3kpW2TUa517GqjWOPdTNdmjCI/a8rxKn2OJ79LvGBJ5apC5xZwS16RU5MSocv8fMnUmWjeuALccXbP44flVL8dGrQNAplYs9lRmBHneghhUqpPEq8z258DOLZO5I6RY1J2Y1G0niFEufULFgwNhHTu/2mz6MTvdEdYoxkY10KBCMX8999A7eoQvYX1XXpJQ8kbr77ZxhgX7Y9hbc8QjqtWR3JG+8NzHZtFl9+RLqIH3P2jkk8OPEdTAU=","authorEmailMD5":"77bc87278652ee1d0b74cf4fe97f4ed8","message":"Thank you for posting this, Stephen, and for taking the time to clearly and concisely explain all of this.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2014-06-13T13:09:25Z","timestamp":1402664965,"authorUserId":"disqus:disqus_pbqrmE9MG5"},{"_id":"0a4ff6ad-963f-33e9-b85e-5aced672119f","authorName":"Ed Chavez","authorEmailEncrypted":"LOYgwMQBqAciDPKQCsW1yBYM8hsvYQkYiNp3n7/1mxSjdhjZBXI3+hA9gx21b9JZ4x470t/Fgna3gTVq90nL2ynQ9oSx2BwVYX15VtGvdu8l8QMoCPZMmj3FSOrZqcII0CwlqV9VliGHpMZYqu4RJswXzAOM479mxviKiz8Dfn3hgvRBU2F69yZSiNxzUr7CHsO2jkra9E3SEz38ig2bLRm02xhRf9l/R39gY1N0SrHlVMWyNdSefch+w9sn/QgyS02pxSL8merFqYPQZBvJOCW1+M3lVJGTvcSAVDii2gNgQ4ZzRHXLCS2NK6ar8Z6626Okc7617SAcHZUhGeagWsz6Xx4VhLP0GjpuiweGSH9lLR3B8NMXtoa3M06n0AGXQBe5Ic2QjkzysVYrPpTUbRfkW5+h9s83bIuz88lu7nyvW5DnSh3otyFjaz5bxYjl8HeTRp4LwayWVWCcmCw0UcMSg7VF1YHeaxf8rac55wR0hioPChGRcZs8+EwssJM3GeW9cyFk4zrNs5/XQmvej8YSz7PxdPL8R22NaIZGL6dUE0rIMj2tWjsyTeeOXE418tJtmSSmRRCAKruufG7y2pyoYmq5XvVYZ9JWbpzjHJgy2lM/NHA+jazxQkb4fxDExl28JmjWB37WcVfn2PPMqNw+4KLFGNNul1oGLByXc9E=","authorEmailMD5":"a368a438821317d80a5913198e430b70","message":"No kidding...it's been 2 years since your post and still, I'm guilty as charged. Dropped on this 2 yr old post in my almost Quixotic quest to see if I can do async in WebPages. Got it to work based on this post - though the \"use both\" is a mystery still...\r\n\r\nI'm getting away with it via ConfigureAwait on the top level request and if there are other async calls that's where \"async all the way\" occurs. Is this what you meant by \"use both\"?. Seems to work...\r\n\r\nThanks for posting this - am realizing how much I don't know about (yes, late bloomer). Hopefully your book will change this (just got it). Thanks!","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2014-07-12T05:18:49Z","timestamp":1405142329,"authorUserId":"disqus:disqus_k1OetduG0j"},{"_id":"61d229be-050a-3854-8739-74751916ba76","authorName":"Stephen Cleary","authorEmailEncrypted":"Tu51Rw6GjWlkAq+JnK2xiY/N9KElaJbjO2YZsbFBiLY5T6tEE72YKEdZsNGMKFz5aISzBvf/XaGwUJ5290rQ4WrBvnvR6HOZ35o1UfXtzQhGNm9kpom6O6VABoMP05vfL0mE8i0WG5apLzQqLgQ61VGQvCx06OES2Na5Db0yxIyZ3leAgrrxKHZrTvJH9uFu/qXmTOnFv0aXn2s/cfhix6fwC7WcCL+N86XvMxbYZGPfUEJewh5hUqycUEvGYHn70KbQC4zjsZQL635yE07BUbwt7lUlaNKP2X5E/YSmoKYKBA2WLT/XaJ5+7Mwz63tS7hcYhMOVuYz80hzuC540fOUzBlEWlwuR9GXdwba0yNJJouTZm0mDQk+JRA84aAAklzO5BWnwrisq8XpCjhvIqknMerigwnsSy/QK4e5sfkdmw/MCtskI9IY/0HEdQi6a0Wx30vUm+jrxaXlEB2NH1dqAjyPSJV+UpEkTvIZZUf/rAESFAyf65m9FjpuA0uruubnsDa54URB/tf3p4FLjw29/vgBWQWQYzvNPZNzR0ui02/DdSTxg9ki0Z9b4bGTcWAC1/KCnBU/4gtcFCW2ATpPAf36gK4CL+7CvePBrIID0xw8EASX7xoVlHzFiCCdTiQxgmwFQaLqOUN1yp9MIDoPfTO3z9LqD3FXbG923Tkg=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I recommend using ConfigureAwait for any await that you can. This is usually all await calls *except* the top-level request.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"0a4ff6ad-963f-33e9-b85e-5aced672119f","date":"2014-07-20T17:28:05Z","timestamp":1405877285,"authorUserId":"disqus:stephen_cleary"},{"_id":"dcae6040-8dd3-3a15-93d3-7d27c7f2fbd4","authorName":"fred","authorEmailEncrypted":"cRuuR6dIPBimPClG120/hu5q5f930HUkY36FuJpEdGubTJLuxKCdrwJyHtAafUNruJhMmNSjrhZth601R++JnNZ0x8JNrZhNyPlG+E3saPXhZ6p2SwfYfuYrq8J0V9ArNrdMqKzfhJUoHSAr4Avht6sSu43aZH+a6Acn/WoOLZb9cvWiYVvxl22+BHLvUVukbOJyGcihCnHV+ERemT6VbJhZKq8iEm9IdgYhRYQ+Bo5i0zSN+ga/MXi4bgnNw8+KjqekR4RShfuS8hosQ/BWkfA90AwGmjJmkZnoxcCKCSrto1tk1kblOh53Nt9HZlSOHmpKnFQTm0aBnFnaWO96qX4GqbQRYXpHvfC2P6ouDRAWF653S2hmyyQj0ew3zXqVsW/DlSKrBP8/TcJmBX6ReKn8rnlgg5lGLPzs828OCnARKKLzG5IAQxg7oAj7PNzrqfQrZG6Tnuo5DLl52E3M4VIzjRCy4R88DcjuoxgNbEJ1Jd6MYu/CekVutGXUCijZSxsdpGuLtTN4OGVlHh6YN4wUB/NvBrNVK6ykBX1B5TqG6OWSJb6wGOVW1FjqGRJs/T5P3FdAUEb3mm+FcUiHC+QWAKf/W26ehmNy5wp5PqHek4CM6HmKOfgu/H6G7CCi++c5Ppy+aquHtok6Zjp5NDgGCDGWnlda417R2nrnhzw=","authorEmailMD5":"d61245c33aae0a801f7ac706b884b6e5","message":"Your font is a bit big","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2014-08-22T15:52:29Z","timestamp":1408722749,"authorUserId":""},{"_id":"4d68e660-af9a-3444-ba89-797d965daba7","authorName":"Ibrahim","authorEmailEncrypted":"Jf36HpqBdCEDTDxmgLFwPFZGbnt69JXu/WKk5loUUqRYEqr718YvvAntu2v4BWB23RDQoULdKgLx4mk4+iVgz7FBKKDEF4fmT3L3F+3Qk5LfpTKzpmW295Hi15F/ENuiek8KfAt2Q3qRUYmtURPkgpI/A0EkufT9NpWun5f4TaLXC90zzoJGV29HRyyPw8RkcQ6itHdHSugv1duIpBkc9kvXl73V4N3KGsTYzTq0XnDkEC80QYo73jLGFBRlGvh0d+MqbN73v3FK9ldWsFV0AV+rE2FwU1t2mVlFuQe1cL9ZdQvwPhRVwU+u2ky+82ga/u6ZiIIGr4JTzHwtBuUVLrB2zbq0qzn8QtqvoRxgG6r9NysKyS/PVPw4rwft4sLn05p42vwDErKMuGF84xttDfLxncIyXtVLnm/K4kOKhRKGtOlTqWtZdKLHmAd6LWDxMcnJxFEkiAuJFHdP2PirfW6UCeiQe8cEKwPxMIgKM+r1xHaXCc10OZJu9jEfOLTz9mVDAwSCMt5l9HfqlfzRgeyYOidzuhMdPdRASbKc9pij9QNVSc3iNm2qSRLQ83Lar/pHZOKmVpdsT72TEJhmr4g096i41P83q0rcSeK6DocqziHGNGpXEagY11vSBgG14yRvIqzi+j6tEBZO8R8bOocg61UePGIatpsPJYBhAGc=","authorEmailMD5":"9b6b1ef9d92de1784d74f0d74941a99a","message":"Really helpful post. Thanks.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2014-08-26T06:12:40Z","timestamp":1409033560,"authorUserId":"disqus:ibrahimdisqus"},{"_id":"8c80ee29-3baf-3e5f-94e2-da7adc31a006","authorName":"Tommy Sadiq Hinrichsen","authorEmailEncrypted":"QUuAXi+BkRJn5FOD/+Z2xmUuFD9BDPoL1iA+K275lWzDkw0Evw44OY1apEQTJLN2GEuNtCieMq2lgLueCTThq06THrI6EgKidOnC5MsFinV+e9ik5ycgFDiN6d2tDLRcfR3qqxHQP+XFNycSfehk9LGAona0quDojWKe9CnuREIoHSXORIsdmUs+yU4ymMf+2jcfiwbBOmd9BYmCOdPNhAEWeHHyYsB3Asn1Oco7RNZNdYLOAMu6IKYF04zPwSLLiEyLSTLohyAd8gJkTCk7Vd3D2XVCJXDdjvfQJ8VAlJHG6qO7QNsnS3DyXYJaGCirHpKMdg7mGIFdT8fR2m74vdJUoKT8Rc0TMVdlfq/oPP6VkgAICHFPSl+aq/ZdBgxl8XOmjDsc3Iy41byXBgvZ9fN4mT4zuA07sGLRd6uPDfNEjVvXL0QbtSUe7Hf5tfrLbZYSKba/ow8Qc8AzOtAPH4X2Yj3BGwUiIh7EaC/loQzJ3lyEEK0FBQi7GFzIdDbM1W/pGuXn7odDRyOrtdX++zdbeiA/JrF+GPwPXZmhesu0TXpV1MH5dp8BIYg+N/HvdGAFZEO9DryMdLWmfPMCfn48Sn5zVfEYSOj6TESFqRsTLbthaYJQuQwNg6jI1S8zThVJCXRKsvGVUry/7v8diliR2bmCMmbWz/e7fC4Ot1Y=","authorEmailMD5":"4d09ae82c6ea4a5c31d31e83ef0bb9bf","message":"Thx, this helped with a problem I had for 2 days now.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2014-09-02T13:41:06Z","timestamp":1409665266,"authorUserId":""},{"_id":"32c7dddd-175d-3d37-8968-e1bb5b85645b","authorName":"Anthony","authorEmailEncrypted":"l+PG608dqkNZPB5+OE0n29VJOk0F9IuAoVRyGL/ENeML58WJrZmnUZFtoZxD48rkeX7UNoiOf7qoRtkXR/t9r3TFCPSVd1lIPsnqPBg+OiOT/lJeSkSeZgTgvHrAnZsqY2JZK8HwWnQqwzS4gSpuAaYq6JaZKb3OpZ5yQA3uIJn7mq3DEx8uzk81lTqX/MAA79otB8wnfCDhE8SmokJW9wkLhBz41gzLgvr1X9bR8okDl9bGtOW3wh6eEBsCoDl1Qujx8v89GrspScvpb02dC/EVgigvLKcLMeIzb052roekKkooSROtNZom7rAD/1k+Xu6Yrwft2iRmHnXJ5GA9sIIx7zDGfgHJqaMv5/hcplmHVUXES3p+T5tWW0mFFt0fgou5HJj7PVzU4agWIEe2XgeUfpEQLojQASOqdqkPBoPcI1Fk75u5DdckR5mMXimHvsAPCgu0Pod0p9fJtXSmc2hcyLk6KTp3qQpZKb8EhuboJy0oiA1VdDQxLYHdz2WYpnovEmU/l1Jbald7H/HntFQf2KnkPoXb3zU8xTUnDsIa3LGcffRuy+gxd/ecFZuSP/x6nHQuZtHakfdwlwCUS8dRwGbgKTbxY9rijAIp2HfFE/VXN/uPt3vod3F4vrw+Oe+7gMjm6OxGkQB/ri9pwP5I8ptl0qIThy30kaSJaEg=","authorEmailMD5":"657f338955d79aa0599059751723c6f0","message":"Thanks, everything makes much more sense now !","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2014-09-09T08:49:30Z","timestamp":1410252570,"authorUserId":""},{"_id":"646b261f-a3b9-3e2c-a9ca-b8a6a78466ae","authorName":"Peter H","authorEmailEncrypted":"X97j2XPKdF4rcaWUINhNVaK8GrUXg7ga8TdcQOQBqgtiGdA85l3biFNzGWZg1bZpHX/rIXwoTCID11pDNZBl3ch+svW4Zj9YSRAzMOSJmiw4Lw9lMbI8EdEVpkpuSA6+x+9c6QyZ3poCcEZJf54Q+oCox3y8pLFGMMqDZ2fy4iQfnVEtDOIMGdvuEKXNaA4CYK1DNRhjMHru8FyEPNJfU3HvmtBSHnflQIcjtqaWkA7rODMACfgMTK4GnEnjw4KUC6MDKVs2fATmeZ3aDuwp/ddbOjo3IhYhSOAFP2kt/ElosedAuI6rORDptU+yjIuust6bT2MzJlJU5qr6Y2+sidySkh8ovzer8jHaU4ehTlpiQzcSskarcDzu4h6OWLrwADjv7nIcIJQGLyVfENbhxsSF3EsAFxA6Vpl98OVav53HxYmOM0OsR/g7P1YE2eWI+DQBBolBUsKfwynhH9dUpBH6OoJISyhuULpsFlEt70hyL7L28A/7tnGIimyqo2l7IbJa/8axW4hhxgYaYT/NTgzQ7zxsqiMlsbdUn9sd20uz9IFY+TZT77eqc7UsEcBg3SA3iEeJWNOoHlE8Jyetv++76MgZU0DAkqMNzUE+nheEIM9wzDEJEfpU0sjicfJAK5FIO0ck/6/gkuTCwlsLKxecB2xYJgGObFxGHJSb2/A=","authorEmailMD5":"e4d448fe79820066f2c0dc7b6a0a3496","message":"Fantastic post. This helped me out of a conundrum which could have had me stuck for many hours to come.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2014-10-24T10:26:16Z","timestamp":1414146376,"authorUserId":""},{"_id":"b4327312-0569-35c2-8992-9d9c39bb60dd","authorName":"alphadork","authorEmailEncrypted":"C3fElw1M+x69NgThNWDg4WKRlZiMLYqoKMP2+MNo4DiICTvg5YeLgAPaCmGaQYLOHeYuTIex4oNu1ulFwQCNlAeAXDQ9s+vGUMZ77LL7nrUKP11qot6BF1lO490n2CGpMP7Vht80zdp+cTs5DSmYsMPxFF4MvwwOx4nM87C3QKODDPfgbcTJU2O0tkBWeWbSFlRtGrWdNGFRTbQ/LFm1PCRVqfDkjVkJky+stMUwTNicOCqcCGi4QsAAmeqxWEFAMHst9gG3Oog+agOAMxaST7pb+xLjxhWXAY+7J55nVc9VnUJrqoCx+93NAys/uvhR66SlQY9uEDdFNZhm7an9IFoH4DPOtEsV7rAHqFsWVYBrUIn0Pe3pmxeM0zgCWpE04yLUqL/bcEWgod5t5zYdtjJrnrS9qNkWfBMdGNEersws7ilG0ka0nXtgsZ/ePVLDapUMiiEkNczLn4Ozqa04m220vyPECcDIRS3rY36chcJxCLQKYBJB5JTh1qeuHleW9dQFA74ESSfZSIwv08NO7Y5w/ia+4LpTFf6lo0d5IhTBdL+N3+0feg+bG11cHSogB63oNXEQN+uWk7PnEFp6PD/Kfq37gZ2ztYNq/A/cA3BXttoSowSPVlxRssO8iKyiVfoR74i97azTz3vMUWTq7l0kDLxWyTeikUt+Gxb68s0=","authorEmailMD5":"a3dd2551dfa0e39c054ff5e32824b539","message":"Clarity is a beautiful thing! Thanks for the post -- also -- loved the intro to the book. I'll never drink coffee again BTW.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2014-10-24T08:42:33Z","timestamp":1414140153,"authorUserId":""},{"_id":"96503b28-d00f-3693-801a-d9113ce95532","authorName":"Sampath Lokuge","authorEmailEncrypted":"giYaFnzPqBa0wB+gLLg4t0cl38gEOcw+PGLv47byj/zhclBwdxIjRkIy93XVEG1t3+D7TLq7OngpA6h4t56a3NpBJcZFrNSxA/y/bmJ4HNdF1mYoKDAyoUVz2mxAMB2VY3C7863Plw1htQkHk/4zKanxPvB0vwhcb4S3vD8kxEUgMA4cxIHlcalpBKcPBR4pUzVryqIsCPoE1LEEq+yA4JNCV+fD29DEWyEyNBcGbyEWazAQgWdXpIwJu+LUyV0y/yajYiwXp+/mdMt1Fag9ExHt5v0DrNWAwSDK97zEpkJ+4clkMxQ3t87Vc77RvreUqFAfQdrTASviYGyNqHyXIx2TXpDSvkJ+9t3nnjf/OoE+26mhfxij53TriFoLKhs9tQcGdzZZPiqT9wyHZxmdvxzeqApmqdC67A3zokC1oWXWBQ6ROLdUznz8Twv/CWjg57oIwG8/ZsUaIuHjKKljCBg/Euan1B19hrzuXRW6L9kpfys5EBQ+HqPnyQU+XdS/ed4VV8XwBZlGu0jR8+5ANAaX1LUCk1p5wDALDdlg3nlGMMa1wCVGq2so3at/UjMfU5mv9oGmjvmZ25iGL0FcSJ3IZTucOCoLkQo1S2qpqdSh0o+og068LE0Z2PMMT9JAk8+wIMyB9NNZYNQVAeGOsStxCIhan1kRR10pVWJZIQU=","authorEmailMD5":"38e2dada2990af52ba6c55463cfbeaf1","message":"Thanks.It's working like a charm.I have used \"ConfigureAwait(false)\" method.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2014-10-27T20:01:21Z","timestamp":1414440081,"authorUserId":"disqus:sampathlokuge"},{"_id":"c09e7fb4-6444-3378-a975-c1126416fd86","authorName":"Ireneusz Patalas","authorEmailEncrypted":"Mq37blXOJAYlkZGIQ1GeYCkeoJyWCOFzlZRrgcvnma2iNtYM16NJCp2t5YBqKYqQvITmH3v7U5Yt00/kkC7wSmzHb7jh7Loeh3AT54TPryOM8DZtDb69lJo3///RzsQIMhSmnk4RUYczO6Qr65mSa8vJjUDN1Y3ZZYYBqQ9M2F8iuzOHogTY9TwTde9kXM6rVxAvkmmJXY9gMHonYWOUnOSlFUiHomggJqWSU+Xza0T+K153cy/871jA5gDrPeMZks7Dq5LIRILAko2RoCjM9RQLCNZri+Yr2NeHzguicFgDx9BttcRXTq08/4u91owN3wquzAhOHEIah5elpBRw8mvxuBh2NDQFxAxq+tQ/PRwSSnxuImUvDxKY9G735tnsmTXGSn2xEc9AiClzg8b1cXSCDQCs5HqL5AjR8sJzYwjuU6oicCP4bmPqauUGzplnYky72GNRVPngVrAeQrA25KOtuySDVlSM6GNsuysx7omSAZsXjWZWeSR+SWPmtobEPw+e8/wauqpPl19/9UmdJLcPxvb0M/ijg5TZLCBJdzOGhuAJGh7JBpD1NB24Rvj9nrw1c4UmsomDMdS9VSYJYZvku0bfP0WJhgTGiyQe9g+yyMgDXSiGdveeI7wFr1J9ub1t1mLM/43XpxNf1CB1dWTY8qyWlmRGtwrMNLBgM4Y=","authorEmailMD5":"3892e1206cca25d573ebb7cd198d6a69","message":"Hi guys, I'm just struggling with the same problem, but these hints don't help. To make sure it's nothing else in my application I've isolated the problem to the simplest code possible. The inner API is very simple (created from wizard):\r\n\r\n``\r\n\r\nThe outer API just calls the inner one and adds another item to the list:\r\n\r\n``\r\n\r\nNothing fancy so far. I thought I did the async/await handling correctly. The point is it begins to choke when I try to make 10 hits to the outer API at a time. I'm using Fiddler for that and for the inner API it works flawlessly even with 1000 requests at once. For the outer API which is calling the inner API under the hood it goes flawlessly for about 5 requests. For 10 (or more) at a time all of them stuck for about 100 seconds and then fail (sometimes all of them, sometimes only a part). Those which fail do not return any response (*[Fiddler] ReadResponse() failed: The server did not return a response for this request. Server returned 0 bytes.*)  \r\nI've already tried with single instance of HttpClient, but with no luck. Any idea what could be the problem? When I do the same from console app (multiple HttpClient calls in parallel to the inner API) then it works fine, so I guess it has something to do with thread pools being used by ASP.NET. I've also tried to reproduce the problem on a different machine and it's the same. In case anyone wants to try, here is the source code: [http://www.fidek.org/WebAPI...](http://www.fidek.org/WebAPI-HttpClient.zip \"http://www.fidek.org/WebAPI-HttpClient.zip\") It's a test project, the url is hardcoded, so you need to modify it to your needs. Just call the outer API multiple times at once (Shift-R in Fiddler on the request - easy way to replay it given times) and see what happens.   \r\nAny help appreciated, I'm struggling with this for a day and can't find a solution...","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2014-10-30T12:38:20Z","timestamp":1414672700,"authorUserId":"disqus:ireneusz_patalas"},{"_id":"2a6b4f1b-ebea-39d6-8d9c-4ec8e9349d90","authorName":"Ireneusz Patalas","authorEmailEncrypted":"HkiQRmCbIKrfIUhvFJgeMj3tuWtkpld1wtQxf4ROAUaNb92sEyNfgaUD+a8MePhOtLprDVpLiO9dKhJvgtTdXsL1y2YcDU1LqLL+D6nurFNHCSusOylyMiVh+pPvNIacmks/HReJegC0o38zP8atdmqWyHNtf9geV7nfJLuFtt23arHsKtVzh5evGDSXpbG6Lu/PCEyFJe6AQoiVbWajQhqAwUCDd5TGeSCt3hK/ATAJa7jaHhWwTinBicg9dJ7y04xje3GZb3sbT2+kbU05TMDdlnU+ZZPyn4Dd8ZimNtY6r/jHxzDhtReN99erxryOGfWasMWGCW8yCE8mghlYVPdUqHh8lGv38VR0B5+seE2mQPfNN9dY6TXCYeS0t4pGVxQg8HPaCljHSEHN2D9NIwim6XgPpX02DzIK34CZqtZr0n4WvJqTxvPvt6nEEEgdiTiTAbj/WknxWur3KSnKH6T5c501CJdirybhaL9n1RXEB9bec2DV/67txnVwmd6otKUZq9Ix4DxnVYuqMuq5I2Uo2fELvthcrQLjoIoYc/kQclVBNBni89rig+Io0EUn5dte79vJcL3JvdWkFQ24hfNgfZp5ZZFfsZXWTkpnOGJ2T55+/UCgUyNKCxHGYQ9ap2gSl1ny15Hj7vNlJoN7DBAoenSGjPe6jInR0f1xJU4=","authorEmailMD5":"3892e1206cca25d573ebb7cd198d6a69","message":"Ok, so I'm gonna answer myself :)   \r\nI found the problem by accident. The situation only occurs when both apps run on the same AppPool. I just changed one to a different one and now I can do a 1000 at a time as well... fortunately it was only an issue on dev environment. However I still don't exactly know what's the root cause. Seems like the requests from both apps deadlock with each other on the same apppool. Why does it happen? Anyone?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"c09e7fb4-6444-3378-a975-c1126416fd86","date":"2014-10-31T08:31:22Z","timestamp":1414744282,"authorUserId":"disqus:ireneusz_patalas"},{"_id":"e767ed95-511c-3241-a06f-0b48ed2db80a","authorName":"Stephen Cleary","authorEmailEncrypted":"XkfvGT7PlWu8d1QOXpW7rjF81OZ+cN8aCyTSo/ASU4OQR3MrI9QK2ep5HyVyaPG4JOUXW3jgWhVAYFqWUSfAteBNNjiF4nTh2hZDlJ8/LfAGxtzUBkQcbYiMO8CS3cH6X+yyzFOB0Gq3y3YxOohjHDFitB1BjUQwHIWJs8EYF8jXmP/rTyaoZZSHbv/jCrx9OmBlhWWghmZDklEZplg5rfn/zejqCxY98IVqprzorR9bCVl/Ui2R5i0Fv3qUj1GixIu0pPHNQyYI/ru2RTlT/7wMWoXSHClXHtrIBcoz1HHc1wjBaSsw264NxpZ3SXCUJhs8HHOQzXKQENrEfVK7jI1G1qzaE+gaPklTOqTwDsSvNbdDDMyCG1YsltJoPb24BhOr7t1a0fCnGaTtY9iqC10Cpv3QM2TY+70wJg4j5Rd2c1Qs3lZI+ys+kp5czdgQJPixH2ireH4V4Ja2oWnIrtEz4jNKnnULTtk8MjwXyHG2ivXkGEm/F9Fy7fwlOpsrTgnqhU/ym4rht987EaL8L8TP9bMgR1hFO9FwMfBmN7CcDRt9R9O7JHHVhmfqRWDch+ezs/QX33y9SA4M33FTS2e0cAjvZFujByvXviy07KH2iZNmjY9/eL2nZuFuxeTQcShH5RJz8tM5Xezo8ggHAO0U7PfeVTmSTDGo/Cu8OfA=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I don't know why that would be happening. Could it be related to session state?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"2a6b4f1b-ebea-39d6-8d9c-4ec8e9349d90","date":"2014-11-03T23:12:14Z","timestamp":1415056334,"authorUserId":"disqus:stephen_cleary"},{"_id":"818dfcf9-5139-3f91-98c5-a6fb8f1e85b7","authorName":"Ireneusz Patalas","authorEmailEncrypted":"fre61FChhQXiwQ3UD2OreLoG3JA/xlMyyDUsDVGQLMVMGWbNf+RjC/tCzlMUk+jKFke04WxZG7iUmyB7+V+2laqb8zKf4yLLq/rEZiKc7eT+BcJy7FXn8cHjYiiFl1f3im+UwOnrSr/2iecb9Sxdh3Dl59y4gfcQN/XVGdMAO4fs8K4XKckLWRAUdM/oHM8yu/Q/L26QP7qWkodTyrWqRy57PBHs/et5m2zFxM8+PZWfpwofju3/HmRPc+Uz5rqkUytFSh2ZhlnYBZEMZ4q+pr3UCzsZjjbuwcGUa3mjOGoFmacqr64aOgMAQDUkxCfo2eDJWO63fOeI17zEcvlPJ6W6Z9LZ0bEEFiVOnxZDTnvq4NJ15F+Seb/PXvELKUx4FNHKE6R7dCJQZATkryHbO/rccxG50XviTWo9qtbsYItELli9mnYkpUvV7zAX/9sy+RGs6GzOA7HqaIaV0VFmBjwi+uppgkojL43jOBT1yHfU87Hsf5QzhE/ZtcT3P6Oj+PpwakwBDfYhf9h6VxBGBAIe7257JWgO8+4B5L806P/vIR8bRTSC6U/b2Wu9H2KKJwFjuU7UnYGfpr2dKIGDF29AALAWP1eapr7Qelbq4wQBsOB3UDWd1x/ITiwiGkFJ0J6KdrvYkSN6FUuAnvTyHE81en3Jk1nbT9ef1/GDtBg=","authorEmailMD5":"3892e1206cca25d573ebb7cd198d6a69","message":"There is no session at all. Have you tried running it for yourself? Does it deadlock as well when run on the same app pool?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"e767ed95-511c-3241-a06f-0b48ed2db80a","date":"2014-11-04T12:11:32Z","timestamp":1415103092,"authorUserId":"disqus:ireneusz_patalas"},{"_id":"5fe81e58-ed21-3874-a367-eed3e46e8910","authorName":"Stephen Cleary","authorEmailEncrypted":"OdOemEPHE86fEc14Xp3WNZ50xQEz01MMS4QaWcM8nZHSoFhIshaTUBr5ge5RbtFFZLHnlGHtaRS4KRFStVzsQznrGTWjBYXB3B1JBHmErbZ1ntifupVivPwG+5jvAM8do/+JQCAIfOu/AL9066sQDjGywyuNExYBGzywNA0891UaxVt/Kqxv+DYStGruI2q0ihBxH93pEgmKpxJ6LxKqOg3BAgPQZDDrBkCTT2s1v+YiSkjk9lFnkCYz4VUbsSwyIB1O76hz85c2knk+cWaWq8E9NLLpQnKnN0IeiEbaDBO8Bu+FNqzMRVvGrpYk21zBGHQC2LT31Q95c9Nj8NPUIvb9DS2BxVvJMKQVhMHG30RacMoIsneizAbJxv8DDTi3c9tFJgAjE6xC5YG8Rp1YqGd7F+VjGJn88t7Rx0ZtcKo1ZrEjmgajXVOX3+BRgFDzanAiwFPs9eLJGpGStkXVd+zSny9id2dVuZ6YEoZxkJeKIZvwGLngTuS38V/JwKxKPDmVcIk1WsOQSo6+r3TPl0cWRRQmqef7K4WraMS2L5nmKoHAqnUc/ZcUls2nllsBw/FUj5JcvmTEqYcuVEPoG+6+fPfbXHWveSRpSLJrCZm/qFe8clzwNPLegYwf2RNFO4cZVw9ghaepuoPn0k1WO/PXVykelJ7GA+ctOqXLK4k=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"There's a session state by default unless you explicitly disable it. I have not had a chance to run it yet.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"818dfcf9-5139-3f91-98c5-a6fb8f1e85b7","date":"2014-11-05T20:02:48Z","timestamp":1415217768,"authorUserId":"disqus:stephen_cleary"},{"_id":"79b767b1-4f74-3e85-b37d-888f2ba3497c","authorName":"Saurav","authorEmailEncrypted":"AwalemSNEivV+qyZ4C/FwvOno5qsc2M1u23gPUr6+l09x+QdIuUQRAc3HwPDKGFv2PrUCrN2qOC1EW6/EZGA602PP/Q2ByvmYFTmg8YlH+kgvz518GNZsBIAZx1TQblsEs/1cd+Yy7ZDFUBK3kHtjVUiAyK6Kg45qOoldTcEL1h0JrAPHTbGT2miKbulwF+OPiCdcp9QhRJKCrCIv3+fVhrC3qtDehllu1pQPHuYTK5+oJpj3td4wTDMfCZuI9hTZHNpZKu08F6JQOwVT2Uf2poJX/Udr5L5YSB7SICDS7aVPIgUX8OC1wVbQgH5grW8JAT85FAfFr1957g4KG19HGXPVV0AX1RDrqUmOfO4AAuunQDpeJ+aEm4L/xd8fvuBkLV8la7jUJiggfXK2T1fyrjeah/FJr2tNBaNPtanQxWL7OUQHklUZHywSPU6eirGZIve8kyt6P79AkdrZBDLFK/4ZFrxu6cnnukF7S+xYD4AA5tj8yL1qer1R+LDDHKot9QxsQfm2CCE8cdhfp2UW1CFUM/tG7Ss+LV+hD9W9UR0oQLp+eQRsveMppx8EXLYah6jWqja4wHkZIiHVryMB/M+CQxI0mLxeMCQkgx6m2yKltugVA4ymmPZ3OZxieRN10hWr0KOQKWtr0kz1qaLlswrRfDGVc2SJj2ObApHgY4=","authorEmailMD5":"c3787ecfcf2037d405102513f6b64b94","message":"Perfect article for my current problem. I stumbled across the same problem.\r\n\r\nI have a Windows 8 application. In OnNavigatedTo method of my first page i want to call a library method which internally calls await on a task which fires http request. I can't change the library code.\r\n\r\nSo i guess the second approach of making the top level method async should work for me.\r\n\r\nIs my OnNavigatedTo method the top level method here ? , can i make it async and let it wait asynchronously ?\r\n\r\nRegards,  \r\nSaurav","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-01-07T16:38:52Z","timestamp":1420648732,"authorUserId":""},{"_id":"e0b7b401-9314-34cb-9204-55e9b1aa80bb","authorName":"Stephen Cleary","authorEmailEncrypted":"st/6OcY/E3huiDUC2fi3cZ15wWYgdTvRgyXhzFc7qkCLXnKcwhT6E4OjTEpaNJi+SU4sc0axIr99R0NKa/MwHMO89zhsTEYrE1GMm/yOrkk99I9qVAzY6Kg0ozVqsE5zZAM9UAv358fGRN7AuGawYAeorW+fBrUVt4riDb9Olhboj7ikcoRdBucJlW+aG1ZFiCv74inAPRsve8XvzxxQ0KrnlJ9B6h8lDvSvhJqC5j0BzNzzKXT2poHfrC9zLMzAG5urmtOZdo42FTPIPcihidfPOAulamnPak5kho6l5Y/Bs8yUzQ21IygJyT7UrGZBSp3O56Cmeryoa52WxBo+Bh425zLDuvGztWyt7PqybvpLl6Cql8M0tMHkPN1hlbsHnzyUMgsV23+BhtY6tc6niqKU2Jf+GyPZW6mu2k+OH0NURIPVrUZnVmBJlS5MuJG9fmztEGc3+SKUbl3jiVXWdpcfTzux2LEvKvpco6/lOxXnQY9b8iLUsjoK5gugkKgCXwQISs+WDEpAKpQYhDgVe93IHwzWmtCEJ5LaFTDSASnO92gw9XVwZS33zVIdkBHzSFzbqecG1Kpd521+WvNu+uz8b98mYqcQQCZt6QLBBmVi+/RIBJj5Z/rWSMjdR11F9q0I/52pfGUXD5ypGQELqnekOcKiLFUK2gU8L2QGu4w=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Yes, OnNavigatedTo would be the top-level method, since it is an event that is invoked by the runtime.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"79b767b1-4f74-3e85-b37d-888f2ba3497c","date":"2015-01-08T03:36:37Z","timestamp":1420688197,"authorUserId":"disqus:stephen_cleary"},{"_id":"dc02ba96-d453-3071-8850-77c9d43ef78b","authorName":"Stephen Cleary","authorEmailEncrypted":"B7sjqvcTqybfydzltUQFp8BfJVfHYIb5kzHVMf0w3T51BrGPMezJNeIXwxFTuj2dSS721E60JShHDlUwPPbi1N0fC2Vae6jwoxAlD7aYiTLebADmvVJowje8LSYpZC3ZH6yCe7sYbjNnlk/VEq24mdaSFnMTd0gQHbQhpcHDud7wr8KXKzMMrQKG1iy3xSZfJDSD/dufqGfQwC31SM22JnNEy5tmHioryjQeqTIRXgvn7VA4j8D0aPzpAyko5WD/nScU1/TMDyr5MQVHmEs9JKYFGyFiMLJX1JK3f1/Cmt72xLK4nMkFfj/7cHs+eMgnLQ2jQnQCOSS0ykYHarX7kGAHv7fp8Ej4IDe8oXWU+PtTI4PZHyzKRWn1TxxEw0ibpkzCluFJoZ7oBB4Q0GMEGMzB2cwhUXhp9dROLS96b0FP1M1jlzXhwZMoIvIFMBCDaXqXe9fKIUs2qA2lJf/CtrxxV5qUtBxArQL0fSc03H9Ga4e+tLlzv5gr0ZEOGwjs5upncbo94lf2HJW7p10crgrJK9IBfKSAWi6QadXZvBwj0zAfbWG6G8rylf3t7TjRyo6huRGy42yUQY04LykpcKdtL7qtWu5rlZPZgbIszRBx12HcU8vhLjnvHt5FN/0v2N85RD2ZN+nxhnilA0MHue/1de4c157PIZ4Evf7MDz0=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"You're welcome! :)","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"af9439b8-da8f-3e9f-af51-18e21e4e2944","date":"2015-01-09T02:08:33Z","timestamp":1420769313,"authorUserId":"disqus:stephen_cleary"},{"_id":"34a692c7-5c46-306e-9d73-5df819c8dd86","authorName":"Stephen Cleary","authorEmailEncrypted":"hoZ5y/Vcr3dSJ3VAHYf4+CkqZRzfqsuAoKxLgmmrWEAww34jTwUXtsi/X33l7RGk5917+hmjLLdwsymaO/DXVy/VHLp4sGIwYGA4fXHh93Q2NDsKjdm5aiF/b/CZ/e7o6d40mQG0gevyVvin14ZNQji0GCxrKPdlEADQ5Oh/HtiPaqUo744C6urRRSjTqZxYMpyOVDMq0LC8WF4KkhicMeK14DVLu8rc3xcSaq/5w0n6EO+zmwpmUb42SVDXIXr7HNr/C7IqQmYcmlcL3BisAn43LgWjlfIpoleXV+HB9J6B+YXKOF/tBr6S4R/B+MgzkmtPv0VkfcBsyCA95knxfKOYre9BlMAvqjLMQdHT+uMHIAqZmFp0D+Dc13wWZWK0JFp8WmColPCLCEXr/XFrtqSrvoV4iZCpldhWsm5ZjXI1ajp9wSbLYiOD/j0Jp7rN2YcOl/svoq8o35xlkT4YdPDXdRWTqNz7YXUbd7vuM2zqLIy2mH9MDrKW4Zo0U5AL2q/6Fdt87pUmimik8UT0gzmDjAFekT0t7mQRl7yecAeP3izkLgUHAseRUJpVilOY7tp6nNHUtwH6YVPSnGEvtHZwpYzGaXhnCEGG+dYbfzTJWjZqkXbq+j7fIUTlw6PQnt9UavI5vgpPJHdnPra/HAaAmmAujvk81Iqn8is7G5Q=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Actually, the problem isn't the SyncCtx. Each request gets its own SyncCtx, which is independent from all the other ones.\r\n\r\nAlso, the problem (and solution) doesn't have to do with async vs sync. Async on ASP.NET only returns the thread to the thread pool; it does not return a response to the client.\r\n\r\nWhat you're most likely seeing is the ASP.NET session state behavior. A \"session\" is shared between the requests, and (by default) each request will want read/write access to the session state. This is what causes all the requests to wait for each other - because they each want that write lock. To work around this, disable session state whenever possible; i.e., apply [SessionState(SessionStateBehavior.Disabled)] or [SessionState(SessionStateBehavior.ReadOnly)] to your controllers.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"afcdbab2-aeaa-3ce6-b8df-bc9876183b86","date":"2015-01-22T18:07:20Z","timestamp":1421950040,"authorUserId":"disqus:stephen_cleary"},{"_id":"afcdbab2-aeaa-3ce6-b8df-bc9876183b86","authorName":"Cherie","authorEmailEncrypted":"YnUvw2mgfDZIm9rUAnR89Cah+G+9BshozWIc3rdxr9jk/IuvTo9yoZLQnpbmanITbqjILIm2/5b27UC1DkELHzWxPf+cL9gmS8j0vozxOluQ5O5Q2A8via/57MuJVDIihjbALKCOB1TyC4zAli55SGZqNA6BaOESOTrWrck0PIDMimDuaDVBvyvMgigsTipQJ2Vg/HsVI7yfP0+A79hq7Oyk/J3ZAk5Vw+yNFBY57qlNEhYke/v6JoVbmDPJMQgO+vfbU9d2TVFFjcYY0yEB68XEEQ566MOgYKJ09ols/QDyRsz4zbRYx9tJ23NnMtPd0tpeKSf/XWaLnUcw1iqNuD9YXvQXorbIAgKCfApAKFCrtVin5h0C9RZpZDyq/ZlE683+Vs/WQh0+ZdC3jtGe98KcJdnsjJGFYA/bCxV1gZAGaE1S356/VtequL82mt9/tsqoZa+LaQOHqB/bjxM4Hp/xVjgWQnJ8D60WVbfx6xjCdbLLA/OPktcwzRA3aCbLM4mu0KwwLlm3lq3GmDWGu1PwfUZc5hdsp71LReX0rUMPoPl02J8MrYbA44TIkJyivSC5qdpLtEPpJhKtTcLtIp7/oyuRN+2NQ9+F5suDw2ZkEVUY7fGuXIk16kYmtrpuNnbAHhLQoq6ovMeMVSxz/c1YjflSHSz4XZ6W66dLVms=","authorEmailMD5":"e0d78c9fad417af042647d56544078ee","message":"Thank you so very much for the post!!!  \r\nI have question about SynchronizationContext. I have a MVC5 app that triggers multiple ajax calls to load a page, and one of it is slow and other calls wait for it. After reading the MSDN resource you provided, I am surprised to know my MVC5 will not process async ajax calls at the same time even if I change them to use AsyncController. Is there a way to make the ajax calls not waiting on each other?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-01-22T17:43:50Z","timestamp":1421948630,"authorUserId":""},{"_id":"d06f2d76-7fd7-3bca-80ca-9382104c775d","authorName":"Cherie","authorEmailEncrypted":"PNR5gYtmMsnBU6duSb7et5M3zbZOoNCquunF+ZZrfo6EX2/HlzBQvLPGdCsTDEP/Xr73wQCntL68cSFd8eLdhVw05bVnTkl0cVhZnwqq85mDI/s0uiGp0w2LmWJCMCsCcMOx3OkTf/Iv/4cjsri72JZin8jrdYEd6S6emSI3plOhk1Z+8mCcyyPYOUMCvS8YRoeO7HDBCjhD399YLKlkZHHXxkHv04hLPRqpTokkQ5K8za/ugvDFmO3jgVE27Xgt5MCj3hcKb6lbaSw+LEW1ntO5PtHvRgPYCcE1csMH3hqt4kS7jScSkVhMkpO4j1rP88UT5QOeEjx2K8Z3btoizDq/rYf44LHK4HS04Ts0DnmCTwt4FnhoGGeHnTauqJ/c5HEasPj03iIJaTPJKAxuvKMiZIVM7uXUb+tvek2a2mDKeYfsXx4tGQ3H6I1R38ob4vbe+O7G1C0HM7TRFOWPbE/E5nf5nrSlWiWS2pFPQC8FgvaYIzJr5Ndhc6pGBhtCJqRRsLBZTtTcqg0YBUmrLleQ7q5AVpcsScpVb+aPP3Lpzz+LeI/PVYe+3SroSlaJGgsz5eRelrhq7KIwkkHO5xC/AIlo5PC58+RVsCdQkRqFnR2KpBHN7fn5zBC8he/a9DF9vg33qAyAXCiyy/t12oX34D6w0QmJJ8Yqyd/rk2c=","authorEmailMD5":"e0d78c9fad417af042647d56544078ee","message":"OMG! You are a life safer! Thanks a ton for quality and quick response!","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"34a692c7-5c46-306e-9d73-5df819c8dd86","date":"2015-01-22T19:15:27Z","timestamp":1421954127,"authorUserId":""},{"_id":"95cc32ee-675f-35b7-a613-cb03dcff17d4","authorName":"kylelib","authorEmailEncrypted":"fsu9iso2Q1uAAGeqmfalvQGXr+QfYhG39Gz7M+aoLw7kZEa90pVB18jscct58k668kJrWjvSw1ARXzITQq5dnCxNhJtIThtbrjHQK8851vq6+x2lqDO5xiPP6cGFmdSsjlbSDA+/+OG79TZ2uGukFfLWAlYNL+Mmks2XlNf2embZ3efS96GK85XPvwuWSUej3wj6FtLA5FYum7Cl6l0/XLdqsUdUODPIWPtrnwQmmVKZefhuPd3MvSCZagRW+DWHc8N/ota7+uVWgKXOr0mAVuWrBuCzwS46UzTJOaq4STJNGJt04SQ5jiLyXgMjwUciVIjJkdmpB10Lf83C1IyRnXAUk7YwXDdgUav+z0e8BvAO0DmleZL+mnQFW63oue8BM8mL0vi7HmtY7vRPX80PUGe4hrfqV0tYNWTKZjXQxmsq38xJYwaIxzEeG5bdwAw6F6SSauem5tgnixW3StDsIXPGWUAAnCBTU5jaCAYLEM19qB5v1iQdeN+z8BR01ZnoB92kqwudUblQOJkCKMD3mNLpXHnSMmn+atQ0IpRwZIMBzfbABHniXtGRBLQx1k4F1iNKmDNdII2YMmOik9+87z3qxRKKYXIocSx/dge1wZ4EeUOsA/kTR9sV3JEcstQyTlFsCYIEjyyKWew+jOVa8ZKL9wthwFOhkZp/CEZ01eU=","authorEmailMD5":"8ce46d76f8f901b0cff4a2c4d15b5068","message":"On the subject of UnitTests, or even WF where you can't make use of \"async\" and \"await\". I've run into scenarios where I need to call a REST service from WF CodeActivity, or even a non-production unit test that I'm using as a debugging test harnesses. I don't think I've run across any article that addresses using HttpClient async methods in those areas. I'm experiencing the problem addressed in this blog using a unit test (debugging test harness only), and am not sure how to get around the problem. Any suggestions there?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-02-06T17:33:08Z","timestamp":1423243988,"authorUserId":"disqus:kylelib"},{"_id":"a3242b1c-23bc-3495-8783-6b2566b019e0","authorName":"Stephen Cleary","authorEmailEncrypted":"ghhz8S757yiCKeqN7J+Pi7cqqwtzs98ig3qPNdRr4aAuW0qaJRFmchJ4zHaNQkGNuFWLu32JsrI58Ctz3j7cqE/jy/9PIV9dSpByNU2nJD2+AYw5KRmjPzcFp6TMZ/GUhjCsuFRkov6IJdrLBv9iJnSX419JtbNM9hFMn0boRckkx9X+NUSskNOQkWrZyprSdEAQgv13WVBOpIoQVrf6Y1Y/z8qs+YTjUGP5gnzrZfxzMsT63BGBFWIDIhTGrKBM3O3jYlmd+M3BUmzJZunOwMa0RQKc+3YOw0r4zlpdN0/sTm79egmuNKUdiJneuNkLsFJobLaAKhCFJdnmEucG/7wK/+rUka6NEj7Z4HfUzOPJPE0hxo52wKm+rjWVtKT3qhK9uHOtQfQ7wsLQlnbXdVj+0pXrkedxX/lThTjDK9gcS48A7Ez7oRJirUQRCH0Um2i1+TMup1iABuCsKSjNxM4eQSRS72Vj/MP1B24eWvnj/TnaQg9sbKiMKvxl65bMGv8ju6JibuzeqIEUcY0+tMYTRhoDqAsw23HjVy8ei1PEH0Ug5NzEsiUDD45vFIYfhjC5rIn36Tgvcue21Oyua7NDBb6IY3pRfauJT3c+LtE31AKKeHaQ4vy0PCYLnJ8xt6p0X0vpG5CAuTb1l4oacI47Ir5yPFvLkqpJT/khSt0=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Both unit tests and WF are capable of async/await.\r\n\r\nI wrote an MSDN article on async unit testing: [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/dn818493.aspx \"https://msdn.microsoft.com/en-us/magazine/dn818493.aspx\")\r\n\r\nI haven't done this recently, but async WF should be possible by using AsyncCodeActivity ([https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/library/ee358731%28v=vs.110%29.aspx) \"https://msdn.microsoft.com/en-us/library/ee358731%28v=vs.110%29.aspx)\") and converting from TAP to APM ([https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/library/hh873178(v=vs.110).aspx#TapToApm) \"https://msdn.microsoft.com/en-us/library/hh873178(v=vs.110).aspx#TapToApm)\").","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"95cc32ee-675f-35b7-a613-cb03dcff17d4","date":"2015-02-06T18:44:27Z","timestamp":1423248267,"authorUserId":"disqus:stephen_cleary"},{"_id":"f8d8955e-80ac-3922-b758-b6cd3f92ca2f","authorName":"Stephen Cleary","authorEmailEncrypted":"qryuaSXCF6Fo1GKsKVTnzLrAhBc3qb0aYqHkeEvvAK1iE6YexWYk5TW3ksRNU73DA6Vf1gBS6mEmPTrzxQh0OXUBKhkXH5dNo1IBOazR8g5/6TUmc0pbNA2DRAQjI+MP+COQ6LepwBzqYt9jWo08Cn5WXW8iwThRYyGn55eZoN0PntpoCSRnpuRATR1fQS+6D78gC0UcOqaCxJWwNj4JbTFhGwZwlOvO5l4AD2x/PlxOT1m2gHOVIcJYt1wHjnGMj/4kb04mcpJBe2aSCQeG3LJZgorfAeAIw88/3qe1WobEhvULx2OiIf33NrgGz4iS48IlNCNUq3OJtoOzob5S8D6z3SPN3s3eZjPLaWgdEeuoGMt6RKZ9JV7/+TQDS8m6Jfn2kUvTWx/aNuhkhXho/3iwSFCEOQu7yYqnbIZCu3c8rr2PrQb0d2t55qB8FECJKbJ5WE1tV8xj54GJdpN0ZXjKtjCHyYjgxG17Epk7GxZnQT4GA0kGDgt+cn0OKHCEykN3BhjOYj3GpUszX1on3kCLYnG+U4M30ecJY2e8/5I1bnjrTZuILLPeVMomqdtc/p6OC9FsIrKHK+q3NLGTjN/+eBIlxvnMozrncAPyXiVWRvNUNhmuawMFPK4SHxL2UyEZf5J4WE6fYl4orm1WX2rYDJiMRk5j3JZsJQpE+54=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Yes. Reflection-based platforms such as ASP.NET WebAPI/MVC, MSTest, etc, all determine the asynchrony of a method by its return type. A method returning \"string\" must be synchronous, and a method returning \"Task<string>\" is assumed to follow the Task-based Asynchronous Pattern, and treated as asynchronous.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"dc859b04-1355-3cf5-9b1a-7c779f5b3431","date":"2015-02-18T17:39:53Z","timestamp":1424281193,"authorUserId":"disqus:stephen_cleary"},{"_id":"8dbc2cab-c45e-364e-b060-158fef1a4fcf","authorName":"Max","authorEmailEncrypted":"POwaVQOIcDhojnZo8utdQGp6ifFQW3aJaKhS8bpU4pSAfo7+vJ8QSNBrFJyy/fPb4bc6K/qn0gpoNHHA16dplAuEVeJqpG4dENg1L7ZyV0CQpbw/X//yhB0jhtHhLESmF1FsbHmiFWB0Vp19xF2XDBWJaw49tYZHeI3nztCHjH41r4XeqeTaVXrPGmijARXSSuquclmqmnsz7lwRaV5uoLvxuXOpwLgCoOayvprRqhiaL4DsbMWw+SyJxTcc+TLAZZn3Ty1JO5pK8VX+GZgKHSDwDnZLa3cB9ExemI5/vJhoMtM5HVcPdm3UK2EtmQH/ecYGjO+kaRSy7xdewgfY953BqkRIOyQp1aLb0nz7VXncqysO1TJtniqXqephw4AZf8q56OzxCswAiSsPsu6VDDxb72yI5TU48r9vzX9LjFW1PUfmLpW2xL8yozi0sVzlXsrF974CXtAIdIpPAirJ8FjTM9xAACfC9MUoAAq9R0+Q8xjiPf05Cj36z56E6VRWWBnKAbtF9R+vLXVHltP4UDQMboWeo0Jrjov3mjERiVD8kl5SJ8bPYXx4tysI9CAusfK6wICbIEx5rt0s+xJkDlVb3e6Lp+NuZ1AHtkaSFNWU2xTrqTsm9RuoAK0+iZl2fDCv5wdH4UhZC680m81jwyK3HlyIO5e/5EiKLNiCqdo=","authorEmailMD5":"4f0f72c8d3424d9e613a09747eacf7b8","message":"Also seeing this problem whilst using HttpClient from within a WCF service, although both services are using different app pools. Changing the call to use HttpWebRequest to synchronously within the Service resolves the issue.\r\n\r\nJust to note, this was not using async all the way down (a lot of codebase to change for that) but was still occurring whilst using the first solution presented in this article. It also only seems to crop up for concurrent requests, and it happens when there are as low as 10 concurrent requests.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"c09e7fb4-6444-3378-a975-c1126416fd86","date":"2015-03-19T09:38:42Z","timestamp":1426757922,"authorUserId":""},{"_id":"4161be7d-9ed3-3231-b9cb-fe50681e2259","authorName":"Andrew Stephens","authorEmailEncrypted":"Bh90iG297CsA3EGDImljyfGjC0s3TH2Bw63p/h5ih4FrvJKDcMSD1p/+1owtT9CHW3mEanB8jGY7sdfSO732Q6bYWZe+wy1Y9G7Rc+5eKFJP4TA4o+/ig69RiUCFuPak7sgV4hKWpBizBcILwnCrIufudJ1s60WY2WQfO4Kt8SLCxyoNNqDHdR1DPsly+U7CNuOBm3X1pWM41hwa7ZUsRLPACCJrpH/uLPx3DQ2OL8EUP1L9IH08w25xvQOSg7XZQX4Hg6xWy7nOF3+urIl6onFKT6UCdCf1DI4ysqM2dHcfrmWnYWmVpr/xWeLMx2Cv4HIM5xSrWkCGub4EUc8ZY6gIPunpoc+qgvzSVxC3XnWXXlylE0zAgTY358REkexkhTmVZRwSmA++Xsvlnx/r/03gE1dHOuS9MwyJJXHuTWIlgbfXG28VVhAOWHLkdlwiMz9Qpkw8m19d1DoHszB+1iAqZh/KsQ5RRGMoNcJ3oUBl4o/tWc1xq8ZeX2B7XLn1nBDoN+7JG355g8WQWUdRtz3Aj+yqOa/0UbL9QFqd3vshjuNjbW/792K2eU7c3Jd4m59ZgB/8qtQerDBfidPnKa5bQp0B49+erElDA7FoODcq3F0LTG6za8elCeMEH5XrospQmh+ZekkRM8n+whDWQRFHZKpli2tk/XHL0n4p16g=","authorEmailMD5":"89bfbacc849835ca831d84ae6bd014aa","message":"Is your advice still valid for SignalR? i.e. should I apply ConfigureAwait(false) to all hub proxy Invoke<>() calls that my WPF client application makes? E.g.:-\r\n\r\n return await HubProxy.Invoke<bool>(\"Foo\").ConfigureAwait(false);\r\n\r\nAlso, say I have an ICommand in a VM that takes a slightly circuitous route via several methods (in both the VM and other classes) before the SignalR Invoke eventually gets called. I should presumably make these methods \"async all the way\", but do I need to apply ConfigureAwait() to all of the awaits, or is it sufficient to have it just on the SignalR Invoke?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-04-08T08:23:29Z","timestamp":1428481409,"authorUserId":"disqus:andrew_stephens"},{"_id":"8ccae577-719b-363c-9028-2f97b18d00a9","authorName":"Andrew Stephens","authorEmailEncrypted":"wj67cdAj0N9HYsQIAWLkfcrTHL3nJlWjivIFrm4RCwqpvdtgmw+OzWxVwYwYxSqcsTO0oT6m5ADi8M5inAE7XwqvrHxnr4m2sWY0QutLUAcavKOxBCGLByEolc2YQeGGgPOKbna2hMelIMqUg+vrJsY/IkY6rzWlmJ0QqylPOgbR+NMgHuzA/UVm9KnZnVrSLqAaKqgARct2DqETAqGRw1QdIgcaE+Sp+5+MGIkD3PBEWi4GnzjK79IyCR03klQ/OFLDdUeDgFs/YoKtGgl/LQL+3INk4H5GeuQM8L+C0eBK8C+6fkNsdzfP5UUP3UeXD2z3uMvyANCpDVx9qdnkjT78D8A01UBqv9EcOF2RkV6LYBxdatCH4lEB8EoVgVzUAr2c7BX4TOrSzKz280QMXm7RkbXo9NGl1tuxdy4l/3GSRvq9Ot3c8EYLLUTmKUMCsQB2NYuvFw0Vm1Bu8RW8iKK96dgM4+RjSOYr8sTaPKVLNMCOv510mp0bS8WFp52GPbZGo3N2eOcg10kF1D/hBSdfRJmppFAAU9C2uNaBN3laJdXo5KewnSTeQpe32Fa+3AXuVWVh82C2AtY36hN5igks6rn64D/sx0CGWv/ciym0i8IZQF5eDSyteHC5qY488+S0aHexRpkoS1ZtDLO+eKZg5Mg3EWIS6Ap7G9pXmPk=","authorEmailMD5":"89bfbacc849835ca831d84ae6bd014aa","message":"So if I did need to make a blocking call using .Result or .Wait(), where in my method \"call stack\" should I use ConfigureAwait(false)?  \r\n- on the \"await ...\" line inside the method that is being called with \"await ...Result\"?  \r\n- on every \"await ...\" line in every method in my call stack?  \r\n- or, could I just use it on the SignalR Invoke, down at the bottom of the call stack?\r\n\r\nAssuming it's feasible, the last one would be ideal from a maintenance point of view. All our SignalR Invokes live in a \"facade layer\", and it would be easier to apply ConfigureAwait() as a matter of course in here, rather than rely on a developer remembering to apply it where required.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"8ce98a17-5954-3073-ac60-d4b11c05ecc6","date":"2015-04-08T12:36:35Z","timestamp":1428496595,"authorUserId":"disqus:andrew_stephens"},{"_id":"8ce98a17-5954-3073-ac60-d4b11c05ecc6","authorName":"Stephen Cleary","authorEmailEncrypted":"jWqgqOKi42Y3GmKVhMPpHoT+DlngZx9sHbCz5NPRHAofWDzac2ZgN2PgJHYL+Z0ClAsJ75UaXAhyuv+ftaiYWP/4UX0288wPc50bO2ipqhG0SXK7vtkbqi33DWZPjzgOxVldDu29PD8kkm3+bLv6N7AA4gb9aH/1CIHVIQqzwGSkmLQuhIv9LHVsiHc+FYEhENCWs5hP/xKzR5x5Io+Yrnu/KFCT+PLSx9puuwW7PulXVYbXCbDzFjZjhHE0nfs56FX5+2b8yaK3ecwZwh1lFP7hX6VoHMpi+zK69GFsm9xoacKM21Vj/tXGFuMkio7JctlNdUOoLmNkvh1nprv49CW7enkeViLC37g16FygXFdXD39i3Dyf2IVv/K4tu7JTPWELVfwxbPmVhf3uwNO4tyMf9pJsBKpPPCfbCPQ2c4uuam0Ct1ZA+3mtsJ0O3j9TNaJqiJaOPGoTm4LAGVL3LrDuoGQQR0UAIO+2D05K1cBwFOnob2UgSzox7QBcrEiJOuPP04DAwPkcQxz/3YwfOHOqyFfc65JGrEh9fnJIuRyrgTBT58mkv3qZVs2a0LP7lxESGxYcKdJvbYa9IVVI+vsyRIACFvRkAyFBCBdelgZ9ICZrfLMopPNmBbOyfQPeIl/+uUtyCyEVZWx/YyKzqdBrPQ0xOVAkLv4v2Yyflg4=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"If you're not blocking on asynchronous code, then ConfigureAwait(false) is just an optimization. I would recommend it in general, but I don't lose sleep if I forget it (which happens)!\r\n\r\nIf you are blocking, though, then yes, you need to have ConfigureAwait(false) everywhere. Note that this causes a maintenance burden; it's usually better to just sit down and convert the code to use async all the way.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"4161be7d-9ed3-3231-b9cb-fe50681e2259","date":"2015-04-08T11:49:49Z","timestamp":1428493789,"authorUserId":"disqus:stephen_cleary"},{"_id":"9c770301-f0e0-3a6e-9502-ec17df91e0d9","authorName":"Stephen Cleary","authorEmailEncrypted":"fiaVEGJkmMOmUrrQNP+QJ1vNvMHZSgQoe3u9ACmRaYg8rbP1s0mZjn3Sxw3Sg6kHgJGI/1TQAKyi6IfRgKEbjPjY487IYuKKBdDy40t0Ljr0YVl+xndjWtWaQw0M2/AzTdTF5QzID8RUxivKNeBZJKdcHBMK1tJmaLLzdSQpw6HLL4vxHKLLLTcL+/XwTeJeapdFz/yLjEAwbVesoxAQnpsVueHxOH8CwkScZ8juk9w3TBdpxzkcp9MJm2+hWI7DJpluALL/XNuJu7I762jcHhTRwoJCO43hvkoGbA2/WLCitzcUOgUrUBkfzDLfuVn7Wwel+x6NV5kDdfbLgV19TZfrb8Fz8ut0cYmLao2BNnuAGjtgPM2QiVvYe4ffTYDzwmqvfs/+tD8biXjt8OjWGE3yaXc7t7le6Rn5NFUdiHxmLAkcC9ADuFEHl3iT9/9+f7+P/sw8AVYtvYACceHviRA8RspBLwTgnETJb7rQnaKoV7bngxWPmZbdL9+w0dhqjTbaJUw97K2CJV6oIJJYB3VvcfhiEG0YcbPizzLZqbrGHoaCXMSpk/RvvPfadmC2zhTyYyk288unOmYw8y/A5drORRUHhDWu7ePG8K6/AQyuajogPGH4H/6bExjyGvXLdw4CET5FlqvZHbnZ0EIOEYW1GFVLlaMil9nUBP+Ld4s=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"It's best to apply ConfigureAwait(false) everywhere from that point downward, in every await in every async method. At the *very least*, it *must* be applied at the first await *that yields* in every async method. The problem is that it's difficult to know whether the first await will always yield or not. E.g., if the first await in your async method is a call to SignalR, you'd think that would always yield, but it may not - there are exceptions that can be thrown *synchronously*, which means that first await wouldn't yield, which means you'd end up with a deadlock unless you have ConfigureAwait(false) on the *next* await in that method. So this is why it's best to put ConfigureAwait(false) *everywhere*. And require all your third-party libraries to do this, too (AFAIK, SignalR always does, but HttpClient sometimes does and sometimes doesn't).\r\n\r\nAnd yes, this is not maintainable code. It's definitely better to use async all the way.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"8ccae577-719b-363c-9028-2f97b18d00a9","date":"2015-04-08T17:49:51Z","timestamp":1428515391,"authorUserId":"disqus:stephen_cleary"},{"_id":"b33394c9-39cc-30c3-bcaf-92e0fef43faf","authorName":"Guru Rao","authorEmailEncrypted":"fkcr8tr1Q9sqm4fTIbjKYOV7gtObkddqnnrMWljPwD1xYD0Jr1QzPs26ODU+JitZdtY0/isg0jyrr4GzefINjqBlH2qfnnf9impgeI4qzJyyY23obIwAczFRvTaWadaTBZD4NOYpn0CVWL4z2id78o1kNcHtocBWdHd6cm4dWafzIJVPUlnBaLQQXjMQ/LmvbvgqyVE+coYjRCtCD83cy0LJjidjVgjO3EJnl/6MvIznm+4y6o9eFMLnqzOxahJpssO50SYYuGm8lozm1ypHrrgweokTN8w5Vap80iwwYB1MOB1fnaCSnyG5jFDjSZ+kusk1fLVzCHO4IdMcos36RRj0l77iFSkstGdXHchjuvH2lUT+NDWYywK1AjwkUsBm9kplbAQ2c+87iMjF/LErlA+wyoASVtoJ/FbiG5MOK2JIS2yZ7STEHUU2MjPCIyPSauZWwEHwZSjprVtMN+L54XMM2IU5tnwKQ56SweET9t89uwQKA4WntqDjDMMvoXBcX5z99d5Ahg7kLyr7GLJqg24BNuqXCpjpHflX2MmJTBYVgQxnos7+1Z18nBKyzLRVnSFSZtNjxojH1oJihBGfzLRbc9M96exasFE9GiBxDq3UTm51aYltTdJZ4EFbNDRAM1Wj2MYgDL4msOwCb/A1lhRZIG1AkAh/h5EObBaGnwk=","authorEmailMD5":"8860e4cfac92a67cb031f9c5c48123a0","message":"Very helpful.. Thanks for the post!","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-04-08T21:49:36Z","timestamp":1428529776,"authorUserId":"disqus:disqus_crOF1vvGyM"},{"_id":"6a356d77-5c2b-38aa-82e5-45ab41a3cccc","authorName":"Rahul P Nath","authorEmailEncrypted":"wjNZ+ojpsR0ktderyh644t2EkUgT/8asiSygoKHdaWxgVMnyn1lgJhrP4UOi5ZuAxdmgVCRZ2dpQtzdEc2dPx0Mz6mR2Gvnu5WBClwbJa84rhkyLdROAj/g/QQ/mWWwUtVVMLSO7hms7RJZprP7tOVICASfCQrYhmi7GOtEspQQTrB8fKPSOdiP7roXGkIq/a+f1qXSt2jhx6wpTUrQzjIcURNdH72WDvNBM9IjwTACJpqzzNUC2lTC5HWh22Kdd6OND+CP3EWbpUrzNORiA2MBC1+kKUvdXY7srqtk4vX28l255+qwuiwebtrY2Bka4Ip6NGzilGPcIysRqk75I0zhrGqCBBBx98Uh2DW7c/zHcWYyEzutWYOvHiP5kL0PViFrKls3Avjr5E6s2jVqzp0uTyjTE3ivUEOa1YsX0nXUif52SBZhgwer/Djs6vd6d0ozvYub9I6dckCJpgNVBI6AEN8X7QOM2T0vkxMuv+qzg8DYYmOebDF3Ev7ERSaBwOHTYuuiFotvk4FD1fRQhNapxFfD/09uJLBxvsh+qCYBQHLdDQeiCbogy8qW3sckBG9u6I4vI+K1ypCtIbQcsRK4sGwSX/vvr31p9nSAqTE+rFgokeXRFnpQHZHyiebxE6udJYuTfColoVd4g7f3WhHExb/mcH9wGSqCDgAbG5lE=","authorEmailMD5":"52158e6893b81b7fbcf1af52c6a5a81d","message":"Late to come across but still :)   \r\nExcellent post. Really elaborate, clear and to the point.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-04-20T15:59:09Z","timestamp":1429545549,"authorUserId":"disqus:rahulpnath"},{"_id":"b0d02674-707a-3243-9763-10ff4da26da5","authorName":"Stephen Cleary","authorEmailEncrypted":"ukquRkNPe6M2HlL68Y78LXEFowmtAY+VnEn4qtbPiKfnuDgX3wGC96/g8rRgK3v6NvwslnwDwitePbXeU6IWLlWyuqbC0kN4XFQ+9Q8pHcVDrkZvQ+zIGyreGLuasrTM2hiSPNY+Z9rJ6dFQhbIjGbWHVmsKPJWTTHOBG56esB+gtQMfW+zDvvJbVwR3jcBXSAXdj9vkub6Z0tF9izpLMVozq0uCiiEQPTm3jcCs9Ne5uANyjCZkVo4vM1G8Aj9q6fO5nQeE/Uv589wWUS0sperF2osWNvBh0612iXOZ4D8O5W/RbEtq8uNoR2rDqxKHwsm2O42IZGhaxhHNKDYyiGWHwM6m4z07lzDlp+mrcNs0SghxBQ3WAfR+ampXvA16Uaj6vBIqxB3CwGfgnVXv3CGndf4POdIMGGQYYITg7vLRC+J3vRkHOVltJbwsiprL8WNT6OMHsReSEBsG+u+Ako4eMjB5p/c3X/fDq2cOa7Tr6yc1an14QgB6NhBBcNNlBZa7/eWcz1BHEKAQ96JkfNk1jdxe1+mi4flICOWHjhw7GWl27/9Q8sl8P53B+X5fLRxlGKpxWhfC5+jSuhvO62F9GkEbULVGhj2rI+vjrFBk26lRzqeT/bPU55tsK7d7mFURWgTeqS55NHHTQjD99jkesa7qOtJ1BOZGaqDU9ug=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"You're welcome!","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"b33394c9-39cc-30c3-bcaf-92e0fef43faf","date":"2015-04-20T23:41:37Z","timestamp":1429573297,"authorUserId":"disqus:stephen_cleary"},{"_id":"b20b7f0b-1e39-3313-9f11-81666e08b357","authorName":"Stephen Cleary","authorEmailEncrypted":"BHDBI21XAktL8ChveeIuJ+Vq9CHlM5Wovz/ce5xQnQknU5Ncf3LGQXZWwKjH0nS0aK2ZBtmYNWea4Jh1DxcnrA7vLxNwotDwDXYwSRPc83ONRxnu1T2cAa/ZhOiE2FHaFRn4EMrEHwj/5Keua+qQ2+ibTdOp/tYttAbFCHWQjKj1owER7/WQu7Dha1jgkHhXNR0N8JaIrwjhV6K8lK+G/2iZ556gX4Ozby9NQm23sxHWJ2a5ggr2QtQMAK8OI49EbFq43XaXubAVNljrsbZk93PQHbCETMlAtDWL5TubogtHDZ4kTWg6oWBBPBggxih6WGj6KIwL53ywer3U3iPR8dnbnD/hTEBi3OW4Bg7G51Ec3Z0GYcZ5x51nbRaVNxXz8oq3S6gw6fjMvQuOUnGT8op0k+mUkTnfsMSDP9KLZaZNWYTxyzDskPTvYYuBoVbHlP8795+8HTMrjKd6gu3Lm03p1c+08d8Ds6wa6JT2kr7Dg5/ys9epJdhDbmb7jyrEzKXOSaBHlXhs90Ef5qzshyx/zBkvMLkFdjbbZaT+UQz0wc7olEOoZwZ6D6FgqfBiF6mSyi6VhMHsvtcj3o5TmpDY4IVfRZTQImvALTXD8F/qjIsi7gbSnQMcFxyjpsRd89RdYDipS594UnQutCwfnzFlRbHkIOde22BzKcaNuC0=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Thanks for the kind words, Rahul!","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"6a356d77-5c2b-38aa-82e5-45ab41a3cccc","date":"2015-04-20T23:41:23Z","timestamp":1429573283,"authorUserId":"disqus:stephen_cleary"},{"_id":"1e386be4-5ea0-378b-8c64-a1e3cef75250","authorName":"1antares1","authorEmailEncrypted":"RPNprT1NhE8S/U97DV5ABE67Y4ZN4prWZF7aLq6dZLE9mcThXJtl8MX44SRLsiiGVmnKdKMpWJim/VhIV2akI9EXwVjxvTeoWOfM2bI6Fql/K8wc9wwveCfr6INXElZrKV60Hr4xPtWT0KsZVpqdfTEdsIGjlKQBWR31a7DXScVs2VrzUEnxxoXRUIoZlBlq0PeBmrZV1TzYl2C5BZewCC2dymD5knucbO25A9avaJgSbsBOhewDnhwzued6PjNl+BwVyBMWJFaTXpoDtN35Af9mISlu5N3UZTeauG58rAV1xRIDPE+f92CqQJmqahN0W973W2aiCR4kfzUpnde4ADZE3uYgCy9dxvuQ01RlpbnCX1eZ2Jq9si2MIv+NYcfVNlLGAJhKSttL79mEtkdgaIJT21nZbJQFF5MDJTLUUBRyTeavjyGFKrsiJxR1CIyy6Gt1XWILMY5F9bvF7bZGyDnXY8jDl90ov6cRXvspRao7x/i+/TAAMnacBdfITPdggyxM15Nn2nGAyqzPty/dgoRfe9ktQHg9rnaE8FKQ1MBNiK5Z7FuXety5q8Zy817+lOJAxFc80aILW2lPnqNnMwmilLr/nSaoOY++cb/HLNSaO4mqwR5PEdgp+LHBYLLZ8tnln104ALppNJ2022NrgfmKJLlkMgDc4Ioru4WIAuY=","authorEmailMD5":"a4c40adc5bba16f42f6b3f6493035b92","message":"Mr. Stephen Cleary, your article has been rapid and great.\r\n\r\nMy doubts have been clarified. Thanks for taking your time to share the network.\r\n\r\nKindest regards.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-04-29T13:15:09Z","timestamp":1430313309,"authorUserId":"disqus:koaltares"},{"_id":"e9bab685-901a-3431-ad01-039eba924768","authorName":"Germán Andrés Aroca Silva","authorEmailEncrypted":"f1PDpGV2dIWfp9Cky/H7NvoUwWez02GM5UIbTLEnGDERWSM5RcpVyxEt5I1Za4OdzvK5M2FtVY4d/8FWWayMktO/M6BolEwsAdLFDPYNZd+2ve8c305Yk2Phyuy3YCfAfD9RHmh+fGKcNz5A+tbTbLyTj5xHvkaoWJV7cx8nYUiF11ya/lflZQXpedKGUDpfFpdOR0qXnJTThyBIb+tfER0EsKHa2vSuV8q6A51JJOnEfXzl4h8XJrWnJOn3ol4O/So8C0ILhTWfPT14ufnTNw9SFPEaAZdfEZdP5Gxcq18clnr1hLSJTC4dngHiuKguptdkCisgLAEJjFrA5DXYGRWFWjfThvVyr5iteAabWWo4UsoZdgD93miQ81ogyZXU+2eVDF5xAlqaqOMzv0SZES2eV/oTnJ13Ga7Hxh9D0J5q9+sslKm7IHkfXIzYHjiPsiLyhLFsGsaTxIkK8h1lXYMDeIKzHqUa+b7H74zM6VewGloPN2CuuKgBAoCYvAKOBWvnpwdhg8otcaKSw2rif8hA3P12Ii1VCv0wBg4Fk4OA77aIKxaDD3qekk9l+pHishyDYlgJNY9l+6tMUSILuY+YSEl/gEHW6nWdnAxEWn7WnFBePvGO0bL1pNy+FWuIZkT1hs5JWOEXz0+wZLleaooOpbo+U1YUgi1I2K7aE24=","authorEmailMD5":"d6dab27c8ed1bf8c8fcbae0d3f56fd8a","message":"thanks for the post, helped me solve the Deadlock problem :)","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-05-10T04:15:52Z","timestamp":1431231352,"authorUserId":"disqus:germnandrsarocasilva"},{"_id":"c5b836f6-52d6-3eef-9e01-53ccb7cead21","authorName":"Bhavesh Sharma","authorEmailEncrypted":"Yjc8riXbQLfJXNJ/sYgyitEg+uuhdVbzbkuCQmAwSFnQCoNCxEpgWzjWGKJCx6m0Nd+8hIygC7csEneAYNoNvn5kAWDnhjPVDa+DT1qSqiD/W4bLHcD49Q3lmF547xHFQpjMSJivU77IuJ89naUgxYUABdWR9uacELJPTSt90TBc3vBgsixp+dJqHKJmt8m4ztvRlWf0MYwRg6zDg7+wjQMNT0+hrI4HlvUBfcnasL7bmORWkVJF3mCbcgd3ZGhr9wc6iWMsj4WFUF4kg5jJXf3O2jUtl+erjrw9evz2ILNTRWn4seLP/PYpGOhwBH4SVacozzQepap5BdI/dwr6paFEvuurOQpdOyjyHRUpop7f5yNUF47hK97gZzgrt8wA2NOeZt7SQf3alJUom9DrLU6p1o7fdG+MlCo+DUb6Pz3E0q1BODcmwB9TwU6KFcGFz/QeBw6iZLoFCCLprkIJwOa9zbW1jTvxdvvJv4juKesYjOBqQU6q3muqj9dJnGBCZjelk962GWWeObAf543NYySVwK/P2qCEmBBDj0ARTzWawC4iDD8uUGTA6thJJYitTLg8J9Q3twdoNxT4tyLYkEyPYUpGl3E5hcqsv1DYKpXJKuYsR1Yy8EUsoF0amH97NmT7dlaAxAgjHX60xad61n0sTwh9bRsfwux+Bsh+sZo=","authorEmailMD5":"45687bf2326d8269e68de87f5e202118","message":"Awesome read, Thank you very much Mr Cleary.\r\n\r\nCan I ask the following question?\r\n\r\nSince AspNetSynchronizationContext does not have 1:1 mapping with a thread, would it be safe to assume that the deadlocked resource here is the synchronizationContext instance rather than the thread? As opposed to WindowsFormsSynchronizationContext where the deadlocked resource is the thread itself.\r\n\r\nForgive me for being pedantic. I understand that in both cases the outcome is the same.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-05-22T20:26:07Z","timestamp":1432326367,"authorUserId":"disqus:SharmaBhavesh"},{"_id":"698065d9-858c-37fc-af5b-ba91bdf00f87","authorName":"Stephen Cleary","authorEmailEncrypted":"Og+HmLrJSBatkklzx+ZaJne+4+k1B/nV8ZNlr4oqkFhTCvtcfnXwhIpZcdEf8rAOxiOkEtUWkPjCaWWa/pM82hBmdNsRxoTANyscpIF9q8V/QOcJD8X0pg6frw/vvXcHusbALayMHHfrmVMoeSxSSAOU9IKq+48PcOjvft0WbLLigebSIWZ5Amker51JmWh2iC8BTozX5uOk0qA35kgu1m96mQS43E6vWuydJhOePTehgmfWb7SWiDy2ALFDtJLDl89JOFsQQBQ1hOKcBmZU47MXJ66gIfsh5HAY4/R1VblYsMDDawzbWHqzUkX9uXjKUTv7J7SJzZ8PQ6kkKR7p2GHZi4GU0EmwZxwUqTK37TFIKy+Uu8SVNO8nwuD/Us5GJoDuBuQBDScH8YrhclwvnA3PiiLBeO7nDnEGVA5rwLl74bwOG1TGbHpTqldsLdze83OvVNtyW3juizC6Z/+zobsT806oTzo8LBFr87tRpPMMfd6FWSU6AvEpRLVYOA7xLu5SzjEcNenbHsibD5hhyMfoa1fzIL8MfSZUxmpvyMhlASHCd3HmplaYIUhvAeXdUq5UnVRcJmfHeJIiiZGLB+jEGnGnwwofrXhppqFiNuewdtUPz7xsj/6yrv9sdfsF0i1aC1cbAvN+yZJc4gYi3KHpo9Jrd/4V+XuAeDFnx7o=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Yes, that's exactly correct. In ASP.NET, the resource is the request context.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"c5b836f6-52d6-3eef-9e01-53ccb7cead21","date":"2015-05-26T15:40:08Z","timestamp":1432654808,"authorUserId":"disqus:stephen_cleary"},{"_id":"0d4c1429-a460-32e2-9e2b-9c0bf692f405","authorName":"Ryan B","authorEmailEncrypted":"BY2zwtwkkVqcg9qG8APLIzP0zFYMQw6Y3zDznm1+Ce1DFgsloNE/mi/46MK1E2535sWnNE6wAhbXnFbl6+uPmo2QN156Uz97HItAmf40EUWv8JHg1BMrjxeHloEvAog/Q3piau35ReuOZG/cgrbENDFfe5ZAdSEdfQdvlvgcqcTQYWCl6OPh2we4PUq8D9lATf3vqldvgwrpHfdOlt3vBgDgpeCGELbQHgedLcJmjHv0lb+/ZhTQh1A+hB3DuOETYoVGzWgWQn1jrW4GK89q1G9xaTOcUQcqTIiQfQ1EHJleN+scLwpJzZ4L3A3pDQc2f2hPrwpCwpkbYdeZpF7pJqopWdcYWaTho05kAc4SHpBwgei0fTfDKTy70L4kihYhNKwbe1wmRNvmYP4F9Lk/zSCy/1/Y+LTvivS6lKJi5QJT0t2ZIdV8JU+v1UWmHKAIS988p/Evoq5A+RmflQlOUAQ1WUBRe8UEkdBF/hhTcHbnMNvDvxFSfS3z1WGVz5ZMzeqZ4SYrGxAfPcUwJL0Kyzxaz1o6YCO5OR0eWX+fL3kKHC0+5G/3fr/mOjP/yABc2+oOMrAW38anSpcc+N/fiUJfbyLvkktj3AO85tqcz7vFgHhV4Cagwhp5t27NwOeIdDh2pJ2+KmnQlledrlsUB2IpeBpgqYPSPnu9W9DA+P8=","authorEmailMD5":"40659dd4ee1805890967e536271b28cd","message":"This just save me hours of hair pulling with calling an async repo from a legacy app. Thanks, boss!","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-06-16T22:45:01Z","timestamp":1434494701,"authorUserId":""},{"_id":"9821635f-7c2e-3c93-ae65-13114fd7fbbd","authorName":"Veverke","authorEmailEncrypted":"fYpLHRuMQiviKXgslZaptOpYE0lPMGBwcRCgKfKCQ27p6w8DDs3ApDGtE8ThBz2qxLS4K0qllM8UfYozLjbUn3QoWTFNrOz/yiOpMX01iGB2jpIo4MxJoWWR5M/XZGG1eUjmYi2GmtscFGj4iExdG2/IzwAuU8GBWr5ZGdFNTdHc5oa7+5+udxwMmPz0sNhZbyVDsbPw+j4ITpxhAB6mcedF7f2n/Vtewz8B5zIuOgnhjiaEKHgFzZP+c4dZmfm3Eg370h5T6mEK/5EcdLfgVdsSF10CGwYKLhCNUP9DkdTIMb0AhO7GfUHj9qKNLVy3T/GcyAY5TckU9AY+7aYkyfcJBfVtm6MfM/KgASSc/v6qMe6U/pkPKjkY5Zjssij23R4YoPGc+IbWSmOHGuOdpOZi2QpWDIlmhfB8FjKkWXns0kbNMr7Mx4vF8+OWaOUd9GkqY+voJGnXJDiV9jlmfCpEqOuRcSgfd0hZ6YcXgLV7TlL3SdwWD9DROrPVwS1tL4hdpXraVauC3m2OWwZPnHzNHNXsDNpAMe9PG99ScqeiJxd3Xstwz5tSdGsWxdb1ip+L1y5J2OHbI86rZWc2vpkNU3mrAtdWMftc3przBtlgSwLtfxITpG+UhWLKnITxH66PWy2KL+Tocqvg5KD8yKy3fNyKvPSCIbnATOCRLnc=","authorEmailMD5":"fded734fdc8e94cb19a184c528a0d9ae","message":"Great stuff indeed. Wherever I land upon seeing \"Stephen Cleary\" I now know it will very likely solve my problem.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-06-30T14:19:40Z","timestamp":1435673980,"authorUserId":"disqus:veverke"},{"_id":"3702b3bc-a67a-3ecb-828f-3d3d0ac3062e","authorName":"yodaflame","authorEmailEncrypted":"pRwwyxUR6WkldMbWg2C86cIVzPShGQU6F46wL7Ygd1LyA5RJ2cM8Ux+UHRvsf/UroTX8oRuvtheSnxfSJzdymO1na2uWXmWwtQKwtz46/X0RMGkn/BNAJD9fhpUCSrpqwaIxBUUqXROi766dyKSaVf5pdfHtSJRkLSRtqtNcqBR6w8i0NUgem/qGvp87fcWOxUfvjGoxlKFSKCQq4fZxuRRBSueWVyElGqUg6vgdNqLBG7a3QY7qpLcRfRivtXo1VYS5yNIjnc47nLfICXQ/zAnd5gyo8uezMdsUef0D9WxScjxAfx6CsNOkwPegHgDhoATIz1ENnbJNPsjW/7ITUQmIO3MRhMF5VSQyLf6xPEWxXwwpy+5cN9SkUvC3uzrn41u0wXdeYezfXzJlbLXqlszkj8R8XGPpTFHnOKPSCa21A78zfT9mx8oMTyTCJjoqhlljbubS2/qQ04uNFfyGuh8O2uGH2eUpDbtf3j/WHR2tGiVMUcUgf0XyqO6SuvxChg2sXy1oyIVmNDwiDbfFZRO5HvXsH7DtXRr4nOPZAhfJuknnPTYCBOT6/muLivTMnjI27sVpZkApwdzM3F4KJQtM0etp7jPoxwBZRf4FFhZBVp2SDSs3LKdyLkDZSacrL4EABNk0KzwRdzhvzWzExkF9dk4eYqOS2PqHFs19AVY=","authorEmailMD5":"9f04ecb40189a4e4543b6c44993166b9","message":"Not sure this is a good idea. When I do this and an exception is thrown, it takes several seconds for response to come back. When I also use ConfigureAwait(false) on the top level request as well, the exception comes back immediately.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"61d229be-050a-3854-8739-74751916ba76","date":"2015-07-04T23:29:30Z","timestamp":1436052570,"authorUserId":"disqus:yodaflame"},{"_id":"d2fcb531-0607-3f1b-9435-dad9b3faa4ea","authorName":"Stephen Cleary","authorEmailEncrypted":"hHf/4oczVdD0Jy8C/Wn1eLlUc5N1mXP7hngk+5LpcjyaOzw5iQ0YxHKQZ76T2XGU5HcT7g1PzGy9hfLjU7dFzYxpTenuwoT7TCLSVZxBRIfvdnu5qImDmF1lVVmZXW8HoVLp+C6YSnV3LmaHGcjt/NGQsHufegrCqkOW0Wz9idkK9Sx0Qi2Mh+1C+bpemlLxCkacxkrgqNex2tSjCvd5J1xkJ+p9CsjlPBeQcZuG/H3SRzXQ+zh0O1nnJXAhnq+TJJW9T2dCCxawbJpHnI+ZkkEQVmuxCnp0OMgEt3zjeGEnxNGybmphU+tWs98pAcFK/G/cjj174TJHW4GggNIjfIHYNNgq2Alwiu1Ftk+1mL44PaCXbfULRwbWiy/AS3UeQKZoDyT8yxPHoAatsU+Xi/oll7cujgdKRTQ/0uZ9m0oN1hwVGrg9m5LjZ/rcT54ctZsqeHL3zSe1tc8t6Rdfs08cIv2T9y25guvvyBNrsneRKPfi/NLgARC9EHUjStZ8UNE+2URMesl3+EvF8CQtUcg4ntKNL3qH5RXW/lDXuG7mLTxrSihf86pInC3hYE2ZcLhq/PwMfKJe7SZkQYRYEV7ds5gM0ks22PUEeFVTZh8+I4CHkixf8p5QDoUFCCM30lbAa9S7L1Jz38XHPBJ9noClZeCCQWRpdyyYpVBp6Lo=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"@yodaflame:disqus: You must be seeing something else. ConfigureAwait(false) cannot have an effect like that on execution time.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"3702b3bc-a67a-3ecb-828f-3d3d0ac3062e","date":"2015-07-05T01:55:30Z","timestamp":1436061330,"authorUserId":"disqus:stephen_cleary"},{"_id":"b770c62c-b45b-36b9-876e-3a3f2b1785f5","authorName":"yodaflame","authorEmailEncrypted":"dyG8z9gQh9qgCIM2F1yY9GshB4CJGpHLoOI/D0b5o3jtA8dllPHF0jjLKkJD4S++6R4sl1j3AlBcZZij1T6pISmr+I9tImZ/XdAxCzLSMJluqXlz/aKPr3p86pJBKWKI9L508yRCQ85NGWYNkfGIb7cIOBMaiQPmxgnDcQwKWBTgauNKQ79EMQ2gxqC31J0uQVJSADfeMyd+GbeV+6+DFpnxXqRDk0pPTdbuXq+wK+rhzGDWJvwpfBZS1p5IEuVFAo5Mdc2+hzhGpo7eYTapUBj0HQpf4DP7NWbuAwexJgjUHBrteZ9+csO18eu+VZL0BMVas+8XrPhqVnWCQ5jKVCIlmxBMC+MA8ZLO2T6KRcozeq0zISqNPZpAlP70JznPR7tOxBF/Jol3ARY/lo44IGnP749r3sl+7FQaCmt1o+kfVL/JW3tTsKGiBrMhwCftFPnds6itVUGbJFjj4kO7yV9Lagh40dap1yswXrqYRp5EivFved9E/CSW/6uFfACLUtUwJayMk3jhk6HiO5kiRT0mBCBOwku9jbssSoricrw3AROX7LzlOFBfkihog38nf0YP4F7tWb6KGnPWRmXhSNdTqB4mAYge59qKYeHlayo2O/kUv+UVGgV/uRETtGLoGhvgPXEzOeHt7RVIT5ErMd626rzYqcMf1Z9RK/tonY8=","authorEmailMD5":"9f04ecb40189a4e4543b6c44993166b9","message":"yes you are correct... there was a configure await missing in my chain of calls. I noticed you also replied to my SO post. It would still be nice to understand why you don't recommend using ConfigureAwait(false) at the top level. Also what context is lost by doing this... just the httpcontext or the status of the current class... such as private variables and properties that were set?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"d2fcb531-0607-3f1b-9435-dad9b3faa4ea","date":"2015-07-06T21:31:29Z","timestamp":1436218289,"authorUserId":"disqus:yodaflame"},{"_id":"25c9405e-c1e1-3695-905a-fcb0afcc366f","authorName":"Shlomi Sivia","authorEmailEncrypted":"srpNe54HDmBWTrx9jkhKqaqOtbwDAXKer3cgAGnrfxZJWDqm+SzXHcM9lkpH6m/x93ELpqlBT8rMb3BAH6wCUwzoC1S7F+KYds9DZmUq9+zmweCGZRrqvK1ctOFN8GN01Edw7Z2lLxG4mEdUgBXC5Xs1JJJimEhHlXVWwvkHT5AWTWjkuyok1A6uWq9N5+TTue7YxQxbcfvBcj5wWgQrMRF7AWVXGc+sCWXVIM4c7cfMpGzwFhnlYXsG9dmzWJ2V7h93RjrdsOYVTANkGEuJeD2KjaK6UJ8ZzYvalqrxh8/faGrZbmhf2GQ4YrXZj+igYAqJyCBxuPGFUBz7jPdtxCpNLTHieGs9otWi3IUrzzAGNeM2XuDCGUS72vAYtEnhvk8azNL803NWG76QYVZ+NMBof/S9dtACeUZc2eURwVrwnxxWhfRpRv7OJjZWR0YaqDB+YE1SqVDMyOvwYSilGiTPc4QTnbwnY5wC9uEM4fOe3K1VgIY/JcnbJXVJdk7dv0oTBmlJ29MtWLONn0FrJSlhwZA2SDrJnlN9sQv/USbbSiQCX+ul/rKdm+2TossX2NEnX1BQOZiFHEVEV9/akZ20KcDlmYUw2HRkeIe74rxeVzEd4n8cs9wrsqIfHhnD/taO6UjLRnl1OLfKVpBg2/9Jfhz4KJwy0Mmc1TGs0d8=","authorEmailMD5":"ecd06e4edcdc2c47e4aa237c141d48f6","message":"Hi,  \r\n The deadlock is solved when using the await but what if i have old code and i can't use async await but need to call async method.  \r\n when i do T.wait i get deadlock.   \r\nthere is away to call async method in sync way?\r\n\r\nthanks in advanced","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-07-16T17:13:12Z","timestamp":1437066792,"authorUserId":"disqus:shlomisivia"},{"_id":"a53d7f26-f127-3e0f-bd2c-2c568390b4d0","authorName":"Stephen Cleary","authorEmailEncrypted":"T367tgBPkUdfCYFdr1AF4QJJNRoDaEkLR2+w01qrv19lrNzqwUN/owCE0ij2AWLzfNzu43fyhf6Rqod+/B2Rs4qwRB8xZ0mPUhkj9vM1eK8gZnnjlfEtZ2joKcjxPQE4zUY7XecpPWhmBb76M8vQEOLYhLeeDhwKgs5Vizwt7ZI0uXtOkDimm37Frrq9hdVB3OyjgWy3HqTV1S/8yA68yCGcUo5A9xOhHUFo6kG5LdY8N4pBXyyyH+EqCbqM8u55OzYXn52fT+9OYpTSuy7ZZVj15QWuhjGKilXPnDgHPxQCr9M1+OXeX8+45RomW7oEMYKKDmUuclFSMIIEJbWQ8Yn+NmuvZ9f0LTXXvkxyV8NTGYeyrCABCHQryWoX/4Q82ImlQJEFsiPk2NlqsbuRri1k7DrPtrMEBrx8CCsLpE+zIvDAbPb5PzDGWHPIVGKv8Hb2FIhZmK4JhpYML+5yzAYDnRq2qZ5Dfr3rJod4MbXP4F2rD3ZI8Ojf1PNLz4uCAK8UD8BOL9u1Y0aVrz4aPL8RTJOAw4+txrQAD9rzy2xmPHfXEKF9i2faK4BakDl6zs8HtOHYHojra++xa48KsTb2/vJEwzke+XKfV1FnhwLJHeIAW8SZhzJv/OikE/E/Y23W5nHApq8yTCtJsmC7v7a55b+OlFKOEjUsPnouQMI=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"There is no clean way to do this. There are a number of hacks, but each one has different pitfalls, and none work in every scenario.\r\n\r\nThe *proper* way to solve this is to update the old code. However, if you need a hack, I describe them here: [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/mt238404.aspx \"https://msdn.microsoft.com/en-us/magazine/mt238404.aspx\")","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"25c9405e-c1e1-3695-905a-fcb0afcc366f","date":"2015-07-16T18:16:35Z","timestamp":1437070595,"authorUserId":"disqus:stephen_cleary"},{"_id":"65004c6c-007c-39d2-8c12-65883d0f38f6","authorName":"Stephen Cleary","authorEmailEncrypted":"SSzNGD6qV/SQT0IvFnUGz4mtlfojsdghaiidZzaS8oVH08DMx53oFO+TZZDK4waQL80ZXi2HzmuL9K8m/SfL5W0izjb8almcTaA7MEvNzhfbzxKF/Xx/8pCqIZwmeGrpXWfnAWH/ri1+tzFypadzHZshVoiu4T7GeX9f/c2F1B5+WdcJboCNwB8U5CAV6XmaRSmlHJsiT4YMq9QtS2HWNB2gTI2zLdBOqKzG+nrZKfq31gWjr8EUU51RiC+YE2PFih5fDkiabUQn1e1wJnhBhrU8zd3nJFFtmPvzKkTH51HeoDsV00IXlFUZiGzQOcnUYX9SIjgymY0QKkwNwPU4dXrd9JP3Ip0NGrDV+x/bNlVkLmfL3CekRuztVFP6plxiRJ+U5qufvbo0ntwAvLTl1JQEySL934sgFt1fweYwbUemuJ7U9e+mXjaL6ycmcp0z9UWzj+UXmGoTGHiY5Cr0YqJrs/IFAPnJA7ioY4D/5zLDQfTY9CoOK+h80idIUJb6Q38PzziJeOv7qYL3+sse/USx5wRfzyVGfWp04U8d4nulb4kycgnieHT6iSDneDtv3nimuaFbN+PLyaumQ9djaZ+dDD2IevhFtO+oBRrrvzfH9NfGpRwjq1zqKLksavjTcoDUlSDpkOcNMGyzwfoB+GazPzESiZx7dSeWLl7vTYg=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"That's the whole problem with the future monad: you can't just jump out of it; instead, you've got to wrap everything else inside it.\r\n\r\nAnother example is IDisposable. Having unmanaged resources is really just an implementation detail, and callers *shouldn't* have to care, or use special constructs like \"using\". But we got used to IDisposable/using, and we'll get used to async/await.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"acde32c3-9dd5-38dd-8695-36c7f60cc8c1","date":"2015-07-29T15:31:24Z","timestamp":1438183884,"authorUserId":"disqus:stephen_cleary"},{"_id":"acde32c3-9dd5-38dd-8695-36c7f60cc8c1","authorName":"Anthony Plant","authorEmailEncrypted":"j601XYewJBRooQ3/HFFSIrb/Sew+RlRFYfUzoPwZMRK1VcZ64MZPBx5/K7g1/DrqH3V6Go7fS70ELd/QicfAUuNfLRQ4qbm2ZvjRXdwjXzbT3ujJ3TfH4POU1OH7ZmC62syXsWVLqdNADyZR/Pvn+f3afN5uAAaKagpFTEdcNdJXakoO7CinVtrFvNBefAKmnR0EFvLQlX/TIi0SqgaRnuCG9fyLa8DSbhtPDY04CP+qt4lFzlGqOX1yU0osgqMkfBQ0G41QM5NvM++F6sd4HGBVBoQEYbJFUPYphwxa3OHfDNDsopErrAOcFaxSnV+UbvCnOwMjugSG0p35HOphJZlznJ89SPuVDwWbjmMAzZRtWQQfYcRZBiD0zt//rnSlGSIihYDKhNjRyKgqxEHVgu32CTqcTd+RbCo5aLM5cM3v2nU4QJc4fEX8wAs8/n381DYpq5X5jbzCx0N+tgGjs2rryxc5tQROyJAXOk9oMtgU3AAlH1hQeCkjypGLF/rj9jVjTdSBYOsoUlQCo3h8yMooX2co/Baxf+c+wKh9sf90z7nWII5lTfNu3r/tgjXujff6v+hyRo8p/0W8blXuWKN1MmvOT++wlKG12h6qxXSUmx5RPsPWq1hNIYx4VlT3rGAbacFqerYaJp6S5rf89hahMkDQ+pV+9ewbJKFML4o=","authorEmailMD5":"bbc5ecbb4bdcaad916239ffd687d028b","message":"This is a great post and a really useful follow-up to your equally great introduction to async/await. This is a real bugbear of mine, though. I can happily block on a Task unless that Task happens to come from an async method, in which case I get deadlocks.\r\n\r\nFrom an interface/implementation point of view, it *should* be the case that - as far as the consumer is concerned (and given that it's all that's specified by the contract) - a Task is a Task is a Task.\r\n\r\nNot that I would encourage blocking on async code in *principle* either; however, it seems to me that something's not quite right (from an encapsulation perspective) when the caller needs to be aware of implementation details of the interface method it's calling in order to know what is/isn't a valid invocation pattern.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-07-29T15:22:19Z","timestamp":1438183339,"authorUserId":"disqus:anthony_plant"},{"_id":"b8bbda6f-f72d-3e84-a5b8-45c6c76fa255","authorName":"Anthony Plant","authorEmailEncrypted":"vwnrTMmBJYUZyiPYt5ai0kbZtYNYI3gwuVIUCpPULEyKmRkJf/lz5QBcsR4DfLUoy4bqfjcc1HFqnxeDSNzriTXidIHVjrGehM/DoYRZijNKiFppq6Py6WTjJTTNSNSTmJUtgjtNnjfx300fgiytmUQ5nLQTi1pO/D2n+QuyVSBU4h4eWfCcQK5D8ZXEe1twX8hab4IVIFgqYS7y5PCsZotneF0QSSnA8oty3vmyIdHX2jJSb9SEqxdzGxXdxschptw3cDg1ciVrGr8s8rb5DZ76iNjpy9P5PKgdumhOmfnE0CJTO2GANwenqj7BOjkj4yUhL/GF4nS1I1pgyX9fXqNpAuisVB9nLnqn0suPz8mNvi9QCRLoMwsJkRmhy2BJBryWL4WCzukcDmJCiXrjLNtEL8TPxpNYjGHCcTyAlFKq0Lvp8OZaipN8NdO4CT5Au9yX8td8ctNN62BEmqGFC3YojRRhmyxvPVU3wxZkmYMzVeTrFXNR1ig4+SKh8faSRDxcxYe+lSRErif8ZGoE7WR1GFJmA8P/gTrzH2ZjwjCzoxoUtIlV0ER94QhE/o6hiBVTkzTk5S5U/c3klMWUGPs6hdDgjrUVOU36303LoVOG3qdOz7YYSDGOCMD48qMjzZlqmrzkYBSGxCgLYIazFN3Nag+/wVzbOsOa+iRy+u0=","authorEmailMD5":"bbc5ecbb4bdcaad916239ffd687d028b","message":"That's true and in practice it's rarely a real problem. I just can't help but feel that it somewhat undermines the programmer's effort to implement good software engineering practices when a language effectively contradicts its own semantics.\r\n\r\nStill, I would much rather have it as it is than not have it at all!\r\n\r\nI suppose IDisposable is a good parallel given that, while it's at least specified in the contract in that case, it's not necessarily the contract that the consumer is interested in consuming...","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"65004c6c-007c-39d2-8c12-65883d0f38f6","date":"2015-07-29T15:46:40Z","timestamp":1438184800,"authorUserId":"disqus:anthony_plant"},{"_id":"317e0731-4504-325c-b71e-f4650a74f0f5","authorName":"Merritt Melker","authorEmailEncrypted":"a9H6YK7kiuj06GX+VTXFGvvihTglmfe1jp/iNwD3dKNsUuozVD7/nh/Ar6t74A/4x8zCkb6hTcz8MUDr/3nLmmR9j3R8G73ZyTF41TYVoFGhsHzV88UZh3AUT4f0ddCj5J2RjetyU0oUu/Hvxz/mArFSMfsrWbv8+T+dlkHJjB4QaeGKxiOEVcVGNwCPTXemPj/FxPBErQz8XRIteELMp4Z+YRje39DDxux8qt2NU3tQuce0s6vqmoeQsKQRZby11Jql1wive4VEnKZIVg2SP1geSQFd1crpp5vio3J2lfSnrELRNWZ+ge4vRJ64iSEzQssjSD6JHWFmOnIFfnORHFlRX1JWpITY+Tlk7ihVpOQz7dFph8pJGjQ1EiU5HKVC6KonYCP+I9WcVM+kp9RwqEp08FbIwf0A1QcOVBCjZ2xaeCGSsP4heiZpHbVe1aAahpPpi+lQ9ie4H4jfuZF2g8msfB68Zu+4n/eBQCju+OP0/7EAfNuR11DDGtknDJ695j3pvfmWZYyl7swctrBLJENEAtxCoQ9YxF6ElXhGgloMILVqeYxkdJdbY/d47dyEUh1hN5ks3n2iU+VqJlcH4hEvO8beDliCFRArRk+Jq9Lc7l6xx6liQPCKRaFFBoCbeU3ztvgY8TPcYatrNxnnUbNPGc7V+oCfH2D2MaeYfcE=","authorEmailMD5":"105e238d0b3bf4406ddfe7a78e65c3c7","message":"Say for some reason you can't convert an MVC controller's action signature to async Task<actionresult> (my scenario involves mvc widgets in sitefinity; something about the ControllerActionInvoker is used rather than the AsyncControllerActionInvoker) and you are considering using some built-in async methods generated by a Service Reference.\r\n\r\nWould there be any benefit to this? Let's say the service reference method takes a really long time to complete; am I not still blocking the thread from being \"released\" while it awaits the result? Configuring the await to false prevents a deadlock, but I don't get what resources I would be saving or freeing up. In fact, it seems all I am doing is incurring cost by creating another thread:\r\n\r\nHere's 2 simplified examples of the sort of thing I am curious about:  \r\n\r\n``","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-08-02T02:05:44Z","timestamp":1438481144,"authorUserId":"disqus:merrittmelker"},{"_id":"7fff1e25-7d76-3a1d-bea9-5fc6ac70e338","authorName":"Merritt Melker","authorEmailEncrypted":"vP+w3Lnj7mfmAxnOIWG+gWHRmA6Z83/+ho4TlcAhbGy5PFht9D48U9rDNXtjYJh3S+lwq9TFQByN/NbJOT7UrATfTE55dNRTLG7hMJxIYGRwRyo4MAspS8+TAfa2IKqm8ESh2xSThgf8r3Wos4iW+AcgAqhF5PqwXi5EnTUGmk9sgVtX+yygnwHTkFBWETtn/fHzMcuV6t602KRk189uun4bzEMx6KiBiU+UFqiM3y5iIYTYg89wg5pdL8wUyXqYkmH9erFP1pXI2QPZr2YmUUoT7CuOgjHnUlx5G5C0zkrF/NK4o6n67SXoQHQjKWHDbC+GjLJP6PLVXYV8dP4pl61pep8Iwh9o614WShumtftDDeBhBMLlK//96Wz0TCK4JNNWStE164BXTzoxT7WyMzVC0PPJSFJ0z4oa41CCVdU3120zvJLD0nQ4zfB48avBl/HS48QWhtdafYPI76zzMXKMMkcrLBcCYrOczPVlZs5ZTXD1YX8jXiKxWafcKjFfFCtgP9iYez1dULCjJaqGuuNKddT4YxDOcgdLuOdzzUFVUELQX7t4O4n+7PQX0VGVrkgx5EcSGijyj7pk2plt6nanFBrBlAIanh94EWyPhjMFsnUTs6ptvhdfg/l/th9hiEUIO3TTpkOELlJTx3pi64DVewK4X+hDsLNKRW2kXeQ=","authorEmailMD5":"105e238d0b3bf4406ddfe7a78e65c3c7","message":"Say for some reason you can't convert an MVC controller's action signature to async Task<actionresult> (my scenario involves mvc widgets in sitefinity; something about the ControllerActionInvoker is used rather than the AsyncControllerActionInvoker) and you are considering using some built-in async methods generated by a Service Reference.\r\n\r\nWould there be any benefit to this? Let's say the service reference method takes a really long time to complete; am I not still blocking the thread from being \"released\" while it awaits the result? Configuring the await to false prevents a deadlock, but I don't get what resources I would be saving or freeing up. In fact, it seems all I am doing is incurring cost by creating another thread:\r\n\r\nHere's 2 simplified examples of the sort of thing I am curious about:\r\n\r\n[https://gist.github.com/Mer...](https://gist.github.com/MerrittMelker/84d824a33d60288bcc07 \"https://gist.github.com/MerrittMelker/84d824a33d60288bcc07\")\r\n\r\nMy last post got marked as spam because I kept playing with pre and code tags :(","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-08-02T02:25:27Z","timestamp":1438482327,"authorUserId":"disqus:merrittmelker"},{"_id":"be8e5238-5fa4-3f30-8169-ee4d93481ef3","authorName":"Stephen Cleary","authorEmailEncrypted":"FqEMoKvCyq3HJONE2bjRxsNKxxw1235/VqfA1olI5r5qFNpZT5pyqJRyrjeZpc8UUqKnB9F0h7aeF2Cf6bIqDBXiBP72xr4fST2lY9jujjkSwxshk9Z7Jc7DDE+Yie362vva2cpwW+qraBxR2Nhsw0gNaGcXOdU2NzCTlXF1IVCXmQwcUw8tkjYUWE5Gyo4+xM+j8yuehPPQIxXKjlppY4uqE69LGDXsqlk0Lc7odaVqBCDKQeuSHogh+sNqa+PykcctF4TSmJv1VkRa+FJ+PUMsgPVr7OKLyOgiM0wppf2+ft2wQ7dZG33urYYtDrE7N8xYGhM676V8bqg9evW3QUVyOnTm57c72YSesO+AjdMkf6spT0ZOnqtIg0Fv85abH8JovlRQ4W7Eiek3S2OVYF+TOG+Po4v2rdne9OSeSWVmpJg28M+PtDuiO4Ur7sxpnETZUyzCEmdyvfMUGKlQ5RnwkhQG+aBXXxiSoH2WuTuYlgmXgAD3Cf4XI/zVPMbtH1qouykr3dHv2W25v/XUwKn8OnjzT0qv0DGMdRjlrYMsXFPAa39Isno1wnrkbiUd92H33tQqD/foRVhT7+3YthZzstpyhJQwseSMaYjWFJULXI645WUl+1tG1LwKKGsTwZv/9h33+2HjQ1Tx2QQZ/U1OVr2HIhHyh6wydTi4XBI=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"No, there's no benefit to doing this. Since you're blocking the thread anyway, blocking on asynchronous code would just add overhead. (It wouldn't add a thread, since asynchronous service calls don't use a thread, but it would add other overhead). It would make more sense to just call the service synchronously. Or lean on sitefinity to support asynchronous actions. :)","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"7fff1e25-7d76-3a1d-bea9-5fc6ac70e338","date":"2015-08-03T14:08:01Z","timestamp":1438610881,"authorUserId":"disqus:stephen_cleary"},{"_id":"7010add2-83b4-39b3-a48a-142098fdfd6f","authorName":"Travis Miller","authorEmailEncrypted":"S4VwVErzDpIeEv4Yx28wY9tjDP5o6t9ABLlLUU8Mi9QW1mHT7gQ7NVsLZHpZfpHucW1FdPiPKDREW1U8AfWw/IB5LvDC7jUnFE1NEbKnnmBOV741jZovWJEuhp2cD3TBvejD+No3AOKWJ7yzmJipzvpcHiAw4giMTum/iXn/wNMnJ4G+s2r9cLDp0Dit1rtOqpnaN6j1yCK2ROB3oMiwx8+n/7pB46EFL7Melgc4/7ce71gTlH7Z37Vbn+2iNNTPwln8U1ZFKuKXo3Rtbe6NZHcGhC0gOqSzW/s0asQQdIWaWOeZDmKtkrD0B3zb4e1bYfLSumuWs1v5K26aKU3ikZ8oN9dZGmmwAD24BqF70v1oDxSh/4G/bu0o/woL+opPxV1xaUQg3Fmdmv72fGti9ZS0AsJZBzYBAkoJFKkSmDIniD9qJfrv2FtWkdL4XNDrt6e3QDLxdJDoetFol/GOiNxyT6vMhLQVkYLGOCDgNgOXZxJPuatzaP7FS5M0WNDI3ViIrLIXXH29wq+IngoMpdWTMNDUJ87DpS+PINeIvZC1Tpr6nN57hT4uFCiJ3dLjH1OZSgtCBNTd2+QBkJH/EkaQsdfTgpoM+MuXGIE7T3FZyMRHoy4n4VEpmPBfV6EOa+7M/Z4ERUDuAOTLfdavT5Ozi9lNbptfvFrsV/TglVU=","authorEmailMD5":"5ff8450847affd497243329156fbdfe0","message":"Thanks so much!! This prevented me pulling out what little hair I had left.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-08-20T14:51:05Z","timestamp":1440082265,"authorUserId":"disqus:disqus_K3GdVi5TJo"},{"_id":"b8b80388-cfbb-3b50-a6c4-cabc282ebc96","authorName":"Stephen Cleary","authorEmailEncrypted":"oN22fDTAXwxtJBKKPvfhl1iWsQnP+3XIghTTn4j3HIacOcPAUrTMV67FPMEfW6bQXv2zmkXu1v02C9CCmKvYFyjc/Cp1yxB035IGyVbdU/auUpANo4T/Pk/7zwvaukuw/RSb+DhMULSMh6CFGrKUg6z2xrXRkcQ2saFuDsnwKaVTuKUwfWO8n1r5R++D390fcFD7OaCb9tSajxhWJkJTBhw57uYWqMHkCLzoVf+kY+TQ10lJ+V8O9KrdjHMHg8c4kmczf9jNioVolWa3XcmEMfN2oQ/ktLhacgnzGAZSoNxjhBKl+yVDPKVDTx0zEviZ/k/4ZNjJ0DRPSC18QPxh58OZqmKr3Fm8cDoIw++jTrVuwMQbDtuSUF72ZkVLWYiI/xswDdM+D4g/B/z2EL/A+9EjmIm8TV3XMR6gz/D5NLxtlJ0Swy5q+9TijWwVTSLqAsOLAld8CxSBNOCz07TVr58NijL24R2d8sbdU1bmnZXEgvHqhz+DsPf7CFtLUeHHXjGJO1J48korMOvMb1SYWqKCFesviAfNzH4uS3wQah+k41c/FX5lq+pQkomx2wpeuNTUqPjm8idPt1F/Nptr1LC3pGZz6kbNVOwLeOQcbT8zeGc+VdbyS47N/jzpqOzO538MRN4VqPvrn5y0c0agGV4qku6wrgRl343j9DBtrH8=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"No, it won't always cause a deadlock. It only deadlocks if the calling code is in a context, the task needs to sync to that context to complete, and that context only allows one thread at a time.\r\n\r\nIf the calling code isn't in a context (i.e., it's in a Console app or a contextless thread pool thread), then it won't block that context.\r\n\r\nIf the task doesn't need to sync to that context (i.e., it uses ConfigureAwait(false) all the way through), then it won't need to enter that context to complete.\r\n\r\nIf the context allows multiple threads (i.e., a custom context, or a limited concurrency context that permits multiple threads), then the calling code blocking in the context won't prevent the task from entering the context. This is extremely uncommon, especially for asynchronous code.\r\n\r\nHowever, I do strongly recommend against using the Result property for asynchronous code, because both of the common conditions can easily change.\r\n\r\nAsynchronous code running on a Console app is usually proof-of-concept code that is later put into a UI or ASP.NET application, where it suddenly *is* called from a context. Asynchronous code running in a contextless thread pool thread is usually in the middle of being refactored from threaded to asynchronous, to run on the UI or ASP.NET request thread.\r\n\r\nDepending on all the asynchronous code using ConfigureAwait(false) is dangerous. If one of them is missed, then it's possible to have a race condition where sometimes the context is avoided and sometimes it's not. This is easy to miss even for experienced developers. It also assumes that all your libraries fully use ConfigureAwait(false) properly, which, again, is easy to miss. Note that even the common and excellent HttpClient library has some platforms where they missed this.\r\n\r\nSo, I always recommend against Result in asynchronous code, unless it absolutely cannot be avoided (e.g., the Main method of Console apps). Even if Result doesn't deadlock, it will wrap exceptions in AggregateException, so even in the rare cases where it's needed, I'd say to use GetAwaiter().GetResult() instead.\r\n\r\nI've written more about Result and other ways to retrieve results here: [http://blog.stephencleary.c...](http://blog.stephencleary.com/2014/12/a-tour-of-task-part-6-results.html \"http://blog.stephencleary.com/2014/12/a-tour-of-task-part-6-results.html\")\r\n\r\n-\r\n\r\n***If*** you're writing Dynamic Task-Based Parallel code ([https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/library/Ff963551.aspx) \"https://msdn.microsoft.com/en-us/library/Ff963551.aspx)\") (which is very advanced), then using Result is appropriate.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"c49570dd-ae97-3846-aff1-423b4651f05c","date":"2015-09-08T12:56:48Z","timestamp":1441717008,"authorUserId":"disqus:stephen_cleary"},{"_id":"c49570dd-ae97-3846-aff1-423b4651f05c","authorName":"Bilal Fazlani","authorEmailEncrypted":"JAOY9Qpk2BSV89oVGrjWjRWU5l2juHxslS6NKv1Zrd8vXP8OyTisst2VluWpj7lw3YHAPZrDyVweVqSEyh5ckpd/n8eRr6Y4nJUCelm7RkoBkLw99CDj7LQvw3E4ItyImTpQ93GNtFWiM2kCbDiRhRunXEVj2vtSmmj05yIEU14vLQnMNttpvaIvA22Ze/S4YyjRwqFJ2MzMZlcoEnibpv+Udxh89R23+0UgOLbhCeW6tDo57/2wrD1z84gCsjMeAf5raSSkekffNDzrNcoMJQcqASTMKTuiCXsdmRHZaWNbaWB3j+t0D+4TMwJE9pZshGkV2/8jTceTZgrPqGkjJv3E5VT99vgUy6NlguabuXyMFxLU4OT7mnQGRAad+r5p4frN9xeiBr1L1MPh/lzTZtnbkk58AVbr12YdQRXtyYpu+6W7nA2nF/s8+uoaU0lox55ZD69Gn/qUPSdTbyJOFmn2Hvq5E9wIpF2Brye2VbK4I6JrRrFEk3N1/t74yl/orpknwaBhonUmQpJlK8qAtB+T8c8/9UxeCJpOp43+memkPZOMksVUMxx3xRKQw4KuDBwk+a1ucc+rrUCImf3e5FqZh/SV2+erQNVp5hasQB86lKL/bmbwZ7ZDzBS0bDI1+bZGA7koAsN5QRY8DgrLB6m7qNweB81jERXUBEQWc+o=","authorEmailMD5":"329381200b3974c701e3a84cdbf3a440","message":"So according to this article, we can never use Task.Result property ?, if we use, it will always end up in deadlock ?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-09-08T10:58:59Z","timestamp":1441709939,"authorUserId":"disqus:bilalfazlani"},{"_id":"e59b81ae-8886-31d0-941d-c85c6f819a4a","authorName":"Thomas Eyde","authorEmailEncrypted":"GLEOYS0RIa4/YnNfnb8LdCcrF01i6uAi0vnNSMPTwMKhtadkLkuYmWcxxdF65Iz7hg+F8rl+hmSzqpVXvDaBvP7FN7GECLTJbuPL8epDzDLylhQsNNbDog7lEflG33P4pt9Y9dikRZ2pOVdnamVMTXTcXoGS5Bib3O45zGg9/XOnKrXf9WDvbQjGuy2Dpzc/RF0w4MFa4Bfhp+xah9aHQvYmB9zJIn1l3KQFWZdAhfS/7juYRcrTvu0YRLKg/N+qdSGRHJZa5vYpVE1rl49arIi9q2WRt5JCDeDKbT+/vHlxp7r8abGhhdreVyAZqXE3lFBJNMKEZz48yQxS8intR442/vDlUSPOwQG6zokwSgnMpbNhtfE/LqMB+wujBB2c+7E/cMosXCN0bavcQsAdEVd+ASS5FQ1W1TM2t1oqzVSbXhvnZDYKwh0BnfmNQhvBIoYvXyrklxWKDWgirFu5oLkz9oDowwsEWjnJqV0EdDLTjeY58IRMlP89lMnW9SpZ/76VtTnCnerE3uRbeQNFUZJVGUHEAcPhVjhj74OGNLvUVJ+/BzDjz7qPy7LIoKEM31R1qPry4gjzh78QgXW1vlLqkLcVVNd0BceH2x7B3qgGkoj+xRWWGFTG36n6ujHriKzc7v/obOu1QpuFfsf3DFbqqvDrfoVdgyDAMamScB8=","authorEmailMD5":"459097b9ced4413093907cbbcbcab2e8","message":"I have an issue with ConfigureAwait(). It may help technically, but it's not very userfriendly. If I have to call ConfigureAwait() almost everywhere, then the defaults are clearly wrong. At some point we're bound to forget that call, and if that's what causes the deadlock, it would be really hard to find. Not to mention that all those calls pollute the code base.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-09-16T14:58:13Z","timestamp":1442415493,"authorUserId":"disqus:thomaseyde"},{"_id":"44e38063-900c-34eb-b8c3-4865de7b26ce","authorName":"Stephen Cleary","authorEmailEncrypted":"rySvWpD8A8iskCp0YdXEM5ahVry6HWQ6rZL4dFgw6rn3Ad7orXwetLqu+1Uwu7C1w3d/O9SKTiYhrXaFDiQEFJUCI//WATHVq98l56AhUO+GpP09QkBZOdlRWtMyxpytVMEYdmJZDq432dAFMIQD6v3/MSt+5jyJwxuegOPqYZWIUsQ815m/RGJM3lZ3q9x7bmktQdfdprypYvQ+nkpyu7seLWju0fxDfVaOg4iMg7UA/AwXGIuYdPzZmUMk4tqSWGBQLZNsPQF9MS62XwyT6YTUm0IipC8ySnCDtmPbsQUYJwKdCViLZ4IQPHcsbeRUEwR4ajo/gFoDr2oDEfC7M1OYLL4yVV/0K6O4fdBy1b3OfHdBQPf9NV+k/hpSP2Oea8Lr75QB3q4aDka3xlqR8n30sCwZ5UyUm19cGTqgsN5Lg9GPyL/30eLVwWlkMkr8ov4Am01wAyFBrjbFyfn60n0lLcfitr2l1HY2PAML0VW7ivptzI8e20d9XQGQmc5VC2DrWXYFobQlfujAbG4NYug6zeYStCoOabHhxyBiMhww+uhE3/H22htA/OmDs0niMqN6UoCleh0+78KqGFqPYv0Yp24SH5tVS8s/RY+wVUAHCY2o5CKjEsMc16RAfu7jN7YoADZ9ZjNYZWQ3O3KCaLiRLW0HDIvSjbugrCBydoo=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I would say that deadlocks are more caused by sync-over-async behavior. That pattern is unnatural and should be avoided whenever possible. If your code isn't blocking to begin with, then ConfigureAwait just becomes an optimization hint, as it should be.\r\n\r\nIf you think about it from a higher-level (architectural) perspective, blocking on async code just doesn't make any sense - the blocking is actually preventing the async code from being asynchronous.\r\n\r\nThere is almost always a way to avoid sync-over-async - the only non-preventable scenarios AFAIK are ASP.NET MVC filters and ASP.NET MVC child actions, both of which have already been addressed in ASP.NET vNext.\r\n\r\nThat said, I do agree that I wish the default was ConfigureAwiat(false).","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"e59b81ae-8886-31d0-941d-c85c6f819a4a","date":"2015-09-17T12:17:30Z","timestamp":1442492250,"authorUserId":"disqus:stephen_cleary"},{"_id":"6065c7ad-a888-3901-8f15-f1d75b106821","authorName":"Thomas Eyde","authorEmailEncrypted":"kI45dgMfF18xStaFM343Aaq7zNW7ywvc7IPlVDgMYKOVj4aDIYXcJDT3c+LKFU5R6nw/NQBWAlHQBsU/vl+RCtNY3gxQzQTm2erpSxARgfoYagC1bOXE1rj3MzHBACV89qGgxF5uwAs0aORaLYAlHUyy7wYzlKARcH4WbDSkylg4dPwou9DmZJVqeRMPjGusz0e3H96IBNvhILNdI/A8lyArpGhOHAAJ66S46S6zbWnzWTFA9hzwD21u/Q3GBbClDlGOVOouG1IT6Cy1XhhjH8Q4TtbwRXFYSR0YL8ZpBUM6Wbq4c5NFPUw98z3nQ9+dkYlaloi1g1kTT7wkQPcpTxs0Cw43TX1xD5qMg+kTUApM7sPiAPk3dNhVaJG0L66en06NB6Rh/zbmLVYK17xY7L7V9BIFdBhFFGC+eIQirF+VnBB/MuVxvhsO2QoOoeKD6ApVqT/n0PNa81bIl2/8rde8ehva5sZbA+Un6oRmVqs/oGgKLZFw4Y85MdFkHmYqjyymvzMHp++/llopzZ/6QOVx+XZuIx3KiMUFtMC/paEpIKIPIk9+/zpYxmJCXFgPRiuw5Mw2UCY6CpmOe3VPdv9OpkhfKdHJi+Sb43hcruiUw/5P45MX19bKOCZy/TjQLmfljTWGBTx4zTeLcSABzpSrynYkWsyUpwPqlRGUgQo=","authorEmailMD5":"459097b9ced4413093907cbbcbcab2e8","message":"I need more time to wrap my head around this, but my initial reaction is to disagree: It's easier to write and reason about synchronous code. And from a client's perspective, I couldn't care less how a component is implemented, all I care of is when the result is available.\r\n\r\nIf all my code is synchronous so far, no component should force that to change. I am in charge of my architecture, not a component from [nuget.org](http://nuget.org \"nuget.org\").\r\n\r\nIt's a shame there is no safety by design here. Calling Wait() or Result on the same thread should throw an exception. No async code should run on the main thread. I know thread management brings overhead, but we can afford one extra. Anything else is an optimization and should be controlled explicitly.\r\n\r\nI've wasted hours to pinpoint that call to Result. It would have been so much better if I got an exception telling me to run that async call on a different thread, or if the runtime just did it.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"44e38063-900c-34eb-b8c3-4865de7b26ce","date":"2015-09-17T12:47:55Z","timestamp":1442494075,"authorUserId":"disqus:thomaseyde"},{"_id":"e452b4ee-6fde-3a12-abe9-23c532f75500","authorName":"Bilal Fazlani","authorEmailEncrypted":"qotfaHen2gaZj26vJmScs8r3feZV7UYCpb6man9zB8lIp6AYKoFu2WCg5woeaBkR4GfUDJpyDJYxSd+mNbiNh3RS7whSrPwWiEJqPmLiuVKmQOJ3Pq5bMBXBRbQkC/pbWr/etTmBZ8pOweesKc7TGKdaexo3ZA+JEftx42X0Bs3L5/oL5oPPmlB86i3DIeuRamP61FwOhvVJ2QUogWuypyxGmD30dTeF9zM9BoCCpN6Y21nx6Ev9NFRNGOWYb02Lu416ICsB91v1HHqq/seZ0cJk8sg4f6039dCCLBSkRiF71k9WaIPtXmr9CteKJD1i2y+w5DxyuVAilxmoa0nMCE4TzyHfIBYH8RpuB+w8EgUP6lKVl/64W9dXHBWM6thEuDLfdDfjOeM0sj9wkbImFxFCMdiA039mdD6ySTzAedqqVbClVc2Kxhq9BoFlGh8l89+wpi+RBfBoH/qDAcOTgCX7KU2KNd6G39e5h3j6PYd3hP+LItOlsYzNG0uNTax/m4zodguVR9CQ8ke0+megOzaIrzxfFkxCQSHwMA0i+sYtiY8lGldOhQl8u9Eoadf7wp0MYP9v6753N/CY/JSY+1tTll2YZiuCwxGuZLpWEnuTyEvz/g8ORdbZ3UWtC8slwXfcbXWH8N9WGIcFNvoW6A2kNeRjC79GB+ksztM11c0=","authorEmailMD5":"329381200b3974c701e3a84cdbf3a440","message":"Thanks Stephen. that was a very detailed response i must say. :)","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"b8b80388-cfbb-3b50-a6c4-cabc282ebc96","date":"2015-09-24T12:52:46Z","timestamp":1443099166,"authorUserId":"disqus:bilalfazlani"},{"_id":"6811cb55-f3cd-37a9-80fd-bc08f4731bef","authorName":"Greg Benedict","authorEmailEncrypted":"jXnHBcplrLG04YtUP13iriTa+Il3LbgnyULq8nHMaEA/wrzFnY1qh+gjmyI2XFdzMaM+X+3b94nANk7OsEdc+PmuASIzJRpUebz4bt4Z8IrYr7bH/wHbIvaYPySY9T4QO0cXCa8RwqwWiu11P7L7toWSEiWBPaCjZodDGZChlUzTso461FDBChHDTl2dS1p0CAaP1f9qSjGz95Prf+1kxTSNjigKCIm+2wRGFuVgaqvBzDJ8okKeM8FAypgUiRLwEloQ5IclwznqrKzuJCdX/hwuqRMLn9CwYhi8k/dnt1wGH4ZxMzHskRd8aNbRJgxRnsjFvAS2C8hxwxzivmoYwpVR0TgMD/p+7x8Mu85wade3wS328SidL1PWdGq3AlVG8V0raEIfUC9R8xJCh0D7Ms7+GGd80SX8iPh+SCn5Rn6Da4Qe3iehFZnVQf6T2Aqo7/qxIuFgnx2k8tRkl3plk902sUJSID2kogeOFcgSX2ThHx8n2rEGTgedFwTmCx7GsJ+tag49TQzCgHrhq2Ayw+Mse504DAx0ymGlG5UwKeGUD9sfu8KXcu4udmLyKuX5MrDOoL3hav01SKakmPIt/HA5Imc833rw6ksEm1YZCMTxTCZ6CJeAXQI7tbhNGVhp9FnPyU0jiefkwBgDCRDHGnolqNpvYB0P8izHh2Q7Txw=","authorEmailMD5":"20f5a99e420216df3537f059481fb1a3","message":"Great post.\r\n\r\nIt always frustrates me that all the simple function example usages out there miss out things like this; I found, and tried 3 different exampels of HttpClient GET functions, all of which displayed this issue, not that I knew it until I found this post.\r\n\r\nThanks","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-10-05T13:31:04Z","timestamp":1444051864,"authorUserId":"disqus:greg_benedict"},{"_id":"1fd877bd-6ec9-32d4-8c11-e21f10018d21","authorName":"jeremiah johnson","authorEmailEncrypted":"m19F4rvJaKJ+IIdXgCaNUsg5DQ/oCOBpUPs2CDsAnRYK3IAAqVzSVZZYGHop3JjJXVmVXj4O3/gkeefXq57SgODwbo4RJZ9PVZS0HZepc+vC4J79ANwaiIfq8dV4pjTHLif9s1wdgrXqlhDHSovfXf5IJQXt9G3HnkmQkUh3MLH613FO2Wfc5V8dMOPZKBakWQhVTMYk1/f8i8r3o3pBBhb4OSaQetBh7WpjImm4UYzxiWz3Xw8cyyN/JF/tTN3IqG3X4wW1zgxPF4uEcmAbu199ZuQPj38P0eMsVD5mLG+VD331Qw6Iq3xOW2AIOnTMloaldQuN/GChAOqE9hXYjyuLWVk2ztsrBp1CZjMT9qRIpyPZ7WnBER8HlI/dBPoP601Yb1+sXdo95U1FXm5hgfcIN6CbJh/GuFZs31tKND3oY2Sj2wNktE5PQCLXcQm1zWLmCyA1tZP+YDxNeEGKJhwfUFX2tNUTnhXVnKOy89Cmk9J7zc78X5vCtxE49bHtzZaQk0fMVCw4KdKPcvxgUKbINTUMHqBL+R5Dp5UsXUQN7Fma07x+ua6Q/A9V5y0fm/85ZdHrRI8vk4/UQ13d0AhzNkGGR35TDNPxiar0bEEeTNLJoQvtw42r3Qn2Fab/1djgsqbtSf+KhQpSnvpUyYpHWkeJF+u63HBrKUEK+r4=","authorEmailMD5":"54c3a69343a951a798a6c436ac66bc7f","message":"Why is teaching this so hard? Couldn't you show what changed between the methods before and after? I'm so run down from trying to chase this stupid problem that I had to copy/paste the before & after into a text file to see the difference. Why is teaching this topic so hard for people? NO ONE can do it effectively. Microsoft's own example on this ridiculous crap blocks when run from a UI! [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/library/hh191443.aspx#Anchor_1 \"https://msdn.microsoft.com/en-us/library/hh191443.aspx#Anchor_1\") That is some absolutely stupid API design. To avoid this in the future I have written an HttpClient library of my own, with with raw sockets, because that was an easier problem to solve than this stupid deadlock-by-design API, and no, I'm not joking.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-10-27T19:26:08Z","timestamp":1445973968,"authorUserId":"disqus:naikrovek"},{"_id":"11a5ad5a-a039-373a-95ea-9cb7d8cb8d08","authorName":"Stephen Cleary","authorEmailEncrypted":"B42Pc/ivO6pO+ykuWvicqoua0JjUHlfS8UzSdso5UQs5M15l/cp8u5DdpbcW/61ty4RZJf4Hx0b9bgyyOBzQdbE40mhoWY5ABHdO86/1Vd4uWVBt3aZXYsIhxuWTtlqFrpSFc/omokaqJUWoS84IDvq7uYo8kQcgw1oHfDp8LMj5zNChfSeMyzy/p+Rr9uBpXQG3JEkvFR5aPQuhw0eOBF8qNsguUaTeucYtWRaWvsOy7nVzdJYilwBSwmdNeBJWW9SqnPa1L0gC9JPVZ6jCs3/Q7wgh+OBlX1qeefzEwI5st7NIJ895Hqo3ZzywlIYMXgaRbPTto2zW58p9vLOml8rOPYqmi6LFVhAtB3vFo9h8k09Yt0Z3/oUegQ0HX0FWpNcfg7xyvPPnRfYBYKDxr/L1ieVIpDxKP986Nc0MajMIUIDn/cNyHQoPRd75NRHtqdoeEXWorwK4pEu1ys94LoV95EQsEnxWlxU5wwcoJqau1RJV1ZVr2Ob/qma57b7KSQUIIWxGOTFr6JBssZIyox/BRl1sJOHUmyutymNfB0UAcTed8LDX9wIr2otaXUhh95yj56nAhYCEKq3k5tHX02PrB1fZGlQvHspY2fqiIOaglcih6CIcUePDHtJhE+v1Pka/WF5bmtww12r0cB8rrY/OvDXDl9FvIwSAfEudxc4=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Sorry I was a bit defensive last night. I haven't been getting a lot of sleep due to a newborn in the house...\r\n\r\nThat said, I do disagree. Well, I mean that I agree that async/await is definitely hard to get your mind around at first. But if you follow some basic rules (like not blocking on async code), you avoid most of the pitfalls. If you start with my async intro ( [http://blog.stephencleary.c...](http://blog.stephencleary.com/2012/02/async-and-await.html \"http://blog.stephencleary.com/2012/02/async-and-await.html\") ) and followup with my async best practices ( [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/jj991977.aspx \"https://msdn.microsoft.com/en-us/magazine/jj991977.aspx\") ), that should give you a pretty good grounding.\r\n\r\nWhether threads are easier or not is up for a bit of debate. I think it's actually a lot easier to shoot yourself in the foot with plain threads. I suspect that you've learned all the problems with threads already (like figuring out when you need locks, when not to set thread priorities, how threads affect shutdown, and establishing lock hierarchies), so threads seem easier to you. And there's definitely a *lot* more information about threads available than async, and (at this point in time) most of it is good info.\r\n\r\nBut I think once you get a good handle on async/await, you'll find it easier than threads. (Technically, async/await doesn't solve problems in the same way as threads at all; especially on server-side code, async is actually the *opposite* of multithreading). At this point in .NET development, threads are practically obsolete. This is why in my book on concurrency I chose not to cover threads *at all*; the concept of threads is described as necessary in the sections on parallelism (which uses TPL / Parallel LINQ instead of plain threads).\r\n\r\nAlso, async/await is in the process of taking over the world. I'm actually writing a talk to be presented at CodeMash on this exact topic. Python, Dart, TypeScript, and even PHP (Hack) already have it. Scala, JavaScript, and C++ are planning to add it (or at least considering it - not sure about the C++ proposal). I'm afraid there is no escape, even if you switch languages (cue evil laugh).","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"146625ec-e9c1-392e-b5d0-5c2c0b5c2414","date":"2015-10-28T12:47:34Z","timestamp":1446036454,"authorUserId":"disqus:stephen_cleary"},{"_id":"146625ec-e9c1-392e-b5d0-5c2c0b5c2414","authorName":"jeremiah johnson","authorEmailEncrypted":"eBLs4DOiNr8u6xfuFH4vYnfKRkBw8Ebg8Le73pyyKwsV9a9hTmJblS7zc5GoS04j3NXxwDgbwlRv6nLcIK+ZEZIE6ptOSUOq8BOl70VyzLLpzR+clhsGdYrxrORlDo9WdQf+efI0Q2vlkO959P/SjniLf/v7hSpplD6pRdBzPXKWdn0/nwPwlPtd0DGP9ZYUWMH6VXZsNAhUNTGfEODguuhGMWHnV7QJelyfjcfyslivFwU7DXK6UtLWntKY+5QqdZpJ3u4XjhYjlDIgt3IoAQpchz2NAcYlX//dXtxELrP4cBdkGV62iOxHOvXjdmpdV4/KbWRGJeiJSgQQvE992ZZpKbp/1ZFIH5EkdXtVnp5EySrPY7cCKUsNAPzvfoPO5SX3qvYloe0B3Ajf/jRwFUMRx4os4deP+xcVrfYEY08KkudLAE6kiVwpa0O0/hZzZ06rbx8NeGixZ1fRCX4j3A7khJ888FH+oHzW2lbkfXWbhFM2QeYUVJ4w3m1gaBqoB81c/WTyls4VT9FjK1qVW+RGXegoy2ZcHVP2NVjYriTVbu62BAmM8wh9Srn0J6ZSX3GITZg3RqZBMF+E3IMeVmu3tyI/+wnWZOCBBF+/iNt6WqiU19Ufb//s/9VN7mLGLfZoQnt1x3O1SMns6rdTOYtIFA4Sg+OOucHvPXfgNDo=","authorEmailMD5":"54c3a69343a951a798a6c436ac66bc7f","message":"Well, clearly this is all very easy for you, and that's awesome. It wasn't easy for me to figure out. Using await instead of .Result didn't stop the deadlock, for me.\r\n\r\nIt was FAR easier for me to learn how to create a thread and start it years ago when I was just starting as a developer than it was today to attempt to learn this daft deadlock-by-design approach MS used.\r\n\r\nHonestly, async and await, to me, at this moment, look like nothing less than the stretch marks of a language that is trying to do too much at once. Bloat.\r\n\r\nIf I need something to work asynchronously, I'll create a thread that does what I want and call a method from it when it is done. That is SO MUCH EASIER than debugging a freaking deadlock that is designed in to await and async.\r\n\r\nPlease understand that I am not criticising you. Your blog post is the only one that pointed me in the right direction. For that, I thank you.\r\n\r\nI am just kind of done with C# now. I loved C# yesterday. I loved C# 5 years ago. Even 15 years ago when it was a virtual clone of Java.\r\n\r\nYour post got me through today. It won't get me through tomorrow. Time to find a healthier language. For SharePoint work, it will be hard. I'll miss linq dearly. But I am not futzing around with async and await ever again.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"c1fae95f-05d9-300d-944d-240b3cbd22c9","date":"2015-10-28T03:03:39Z","timestamp":1446001419,"authorUserId":"disqus:naikrovek"},{"_id":"c1fae95f-05d9-300d-944d-240b3cbd22c9","authorName":"Stephen Cleary","authorEmailEncrypted":"wuZzqIcCrcHMAcp0/xk6Ejsm7yQ5+M/m1LFUWStb/7Gxj5lXRe6h2QkHfFLAFX/6iNtNo42D6cVhvvRD6ZG4DS7AJn5ESpXMmo+lAoODZfn8JIpxbk6hKuIy9eMSEAUxkgUPBODspEqGgGbkjPoPPpT7+ZG7fcan5RQnTueevukP8DPWv8YL7iaaDb8G3CBHin2Yrlk6XQIx+fFVPHqRyqQO2Q0MklnuA3U+xHyuW5eRqFCNRsM76trKoI/9K12ZeuOuiobaHgyZLNyZgSdpcTh4XWm6xtULdZesuCwDnBsLJ5cKrmi/dV1zGggLVXSKbcvNYtMmWObUcTDCqymhAsD+eK9PNBcmfDTAeuYqkHvs+8aMStedAQ4ACXrDrAYM/kccKsfPOVAq1qJdtJEyKOQY7ZdmCR+hDhpTZvHL6z1o4tXv28evQ6B0Siml+nq8R9MP4+iny2idULabGtRAzhxZBexGDJjhnxVDuXtoR4LUCDduFrThzE8NAuwx/Ah8PSul2UCjxxkI40M7hgtetMLw7RHxj6KO51f450c6CoaB60Df2wdyGj4sYdpUdCh7zUWhdXw1RJuc+W7BX5knI15C5TjZsjUOVaXRKJFvF6PcftdrZKycvpL8aplG50Yw7yUUJgiDz5vUun0VyNypLYwc5X/1SBwu8WGCqtnh4v0=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Um, you just use await instead of Result. It's not that hard.\r\n\r\nAnd writing your own HTTP library isn't going to avoid the reality that asynchronous code must be called asynchronously.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"1fd877bd-6ec9-32d4-8c11-e21f10018d21","date":"2015-10-28T01:59:20Z","timestamp":1445997560,"authorUserId":"disqus:stephen_cleary"},{"_id":"2264f711-4d92-31f7-8d59-9134bd4e9e43","authorName":"Stephen Cleary","authorEmailEncrypted":"hv4l7nXsiLp7k7zUoj2x7IEsgHaclUUmFtv/rq8kKXZRbzOhle55wPoyegTeacYFPxIpUDDF7qb08PHuetYs3JlJJ/Vju4rBh9cByR9dc6/5tsfJTIMJwf05LhGDKDcGcJ8otHCSHxkYRfi2wMph2y7TfjiY7u6AAUxpfe/n4RIekIvYh+XJWC5txXc/DMnyQbL/fCj0ZjnC3dxn0PnBd+TiAzOfai+0vAX1KOo8zAiw+LJofrFgTDs8L7qqMbDfu8iorGL+TEfhSMuXXZ36vP4NBvnAkt0bssfj8c3kef3MZqTjPIZ/fR92xtLLkCybo3sVXXRIxOsIzgWi2cD+IpGUS1pC6gyat3kHiJOhwDd21zsu8UM8yKlo2eMLup0rcRgBnM4RPqqv0KsoChLR01Bhk7E9fkfH4749r0rGS2sNn4qBpXTQa8tESE4mwEQK+iQaGXxbBZ2u8KebFKsEl3J+0WPNnjF2tAJDb60KT1IuJ+P/wt0F7ShHgFQ2VwWiHOfvNCW8LCez/KDxFkHZh1FZOPhJ5lT/PN9uubCCXuWL48wRWpcdvya1WGPL8yXCl1AUvJ1/emE/E6pbZep3dfePvwELSZjcaLPAz5LPt/xpGJ5u0mDmF+8GjSlLeJTRaFIohGe/4yZ6voSIu5obfGw4AG1nGjEQIJNqOntTMEs=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"The deadlock you're seeing is precisely because it is in a *single*-threaded context.\r\n\r\nThe thread is blocked on the Task, waiting for it to complete. Meanwhile, the async method is ready to continue, but it's blocked waiting for the thread/context to be free so it can finish executing.\r\n\r\nAsync code enables single-threaded concurrency, and so permits single-threaded deadlocks.\r\n\r\nWhile I agree that it would be nice to avoid the \"async all the way\" rule, there is simply no way to do that. No language is going to avoid this. In functional language terms, async is a \"future monad\". And in functional languages, all monads spread through your code \"all the way\" just like async does in C#.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"313ed9bf-9461-3363-9941-37c40e29a3e6","date":"2015-10-29T18:29:35Z","timestamp":1446143375,"authorUserId":"disqus:stephen_cleary"},{"_id":"313ed9bf-9461-3363-9941-37c40e29a3e6","authorName":"jeremiah johnson","authorEmailEncrypted":"do6XhISIO+VYA85O4nXZtY1EXWdnu07B9BYNk9PipjZLjbwnLcwrBj+C+9s0kiID2ZAmCdS6QwG++Osqg9BVQLf2M6K62NPEIbqKDiRf+lPtVV08Z1kXzl5dF7kK2Xhh9xgKNOkNsSS1gkRhLfJr9cxFk9zVk5cGefWYE4ktHw80276EwNwcKNXRzfENLehJxbvPW/1wRanY4Put0r/VDov1U2KvVOTAGeJRGPricpDSoXEgJU+dK2h6I6LnQ1mw/uLhx1djeIwGa59G900bShcxiDG+oGrAc5GXsQhB4NPGcycVA07TQM9Lu21CY3Hl6cF/3/mw352SAa9nKPfz41pu49WPI9elSsUpNTbwZGftEb3vykT5VR/L9tQ5oGouyNuXzhMfYuVgjkvsYl/oWlmmGVsP2OvwALhjC1FMJIg5iT6bP4N7C/O7TJgLZRtj7YNITNLZeevlfmjhrb1CiTL2yqWnehHjX6p04WpnRi5pmjBW+/tlU9joGmNgOV6YRc2TZohKMlfH9PaxAzjrEsGxYbMEuIcaL55zGUqKTkKDU1ttKzNLMHN8mmxFDG81/9GKRG03+MrGAJgA4TVUVh7H6uTHG3BSHMLO3kZ/zF5Kta5rq9NgtuGXvhTZqRnMn/WAOkgTJmUTrriYwEmbZ4sDbteJVepsBexTq/aL6Qo=","authorEmailMD5":"54c3a69343a951a798a6c436ac66bc7f","message":"Well, to me, async and await have everything to do with threads, because if you use them incorrectly, you deadlock. Deadlocks do not happen in single threaded applications.\r\n\r\nYou and I will have to politely disagree on this, I guess. I shouldn't have to modify calling or called methods in order to prevent a deadlock. It is completely unreasonable.\r\n\r\nThe requirement that I use the async keyword all the way up and down falls well short of the encapsulation that an OO language like C# is supposed to provide.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"5b7a240a-5388-315e-a1c1-6fe767cf531d","date":"2015-10-29T16:24:31Z","timestamp":1446135871,"authorUserId":"disqus:naikrovek"},{"_id":"5b7a240a-5388-315e-a1c1-6fe767cf531d","authorName":"Stephen Cleary","authorEmailEncrypted":"oOQFa0Rl+sBplRyNCTKu5Tf2Bdl+Aun1Y7ajOJMRBdTurJr/xtqw1sXM5Uo0Yuz/CcRmmusz719jsRGVXz4eBSjPRVIfUcxGbCXqquF1Xi1xQuz8kovvhwbSDvaZ5rlqS9oXiqMU1ZVW/DhCzt55yLEQpA03GI+8l9+XyiHoUGvEye+c96SV51NY6Pm6QXYFORXfcatI5o9sqjailCnP/EYVr+OLnhV3KcN1rm37hfaC2nfS0eWsAHnc/FNGMNVyS9T1HFX9nQlkz7SdkdbAXBO0bv4XPV89BbFRN8UejpRnSFaQoi9yLrb+lkw6q4bhctPM6Zc4KkZUItDcO/WuDqE8/23qgQ3pqGBv7Gav+AbinAdrkeNbhgtR5ZRLJ9cCOe959HghNbw1EIE8YeWzoKxQePxBwuorXOonMiIbrh3/zC83PL2FhfNJLY/UMXaaDUZpOQ7XCKn0wOS5FQairPooU4d9lD2rFv2wiqqMiEliqLf9amBfp2kKVtDef097PXlufZYDndzRMtisoxY87Q5kDwAOFtD9D+01ZVdPSUopSK3ZffQSxHfSqCQSDVBkdgJLks6EeFV4fAezO8Wk7ex82kXoa1uMRMlgyY1pkZpr61CBCb0Adnkqh6zuWjAZMHinhR59hZO+1N6/L1OZgQIrd5GoW5zVhIGNIJ3Lf1s=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I agree that languages get bloated and end up with bad design that is then kept for backwards-compatibility reasons. C# has a fair amount of this. But I disagree that async/await is an example of this. :)\r\n\r\nI think the primary difference in reasoning is that async/await has nothing to do with threads. Using async/await to, e.g., download a file, is *completely different* than spinning up a thread to download the file. It's because of this fundamental difference that you have to use async/await all the way. (The MSDN example doesn't deadlock if you call it with `await`).\r\n\r\nOn a side note, the new async/await can work fine alongside threading. If you want to download a file with a thread, you can just do `Task.Run(() => DownloadFile());` - and then you can block on it if you really want to (I can't say I recommend that, though).\r\n\r\nAlso, it is possible to use callbacks with tasks (Continuation Passing Style). You can attach callbacks to the Task object by using ContinueWith. This is essentially what await is doing under the covers (wiring up the \"remainder\" of the method as a continuation of the task). After writing much asynchronous code, I can say with confidence that the async/await approach results in cleaner code than callbacks. This is why languages currently using CPS are moving to async/await (including JavaScript and TypeScript).","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"80339fa2-ba0f-3128-bee5-6225eb28cf31","date":"2015-10-29T13:57:18Z","timestamp":1446127038,"authorUserId":"disqus:stephen_cleary"},{"_id":"80339fa2-ba0f-3128-bee5-6225eb28cf31","authorName":"jeremiah johnson","authorEmailEncrypted":"vh6AtNU7q/U/agcer66WaBBuppy1+be5Qxh8TdkiS91qqyk/QzfRUsKmtITx+Z3WCKDb0eXLz38ckDqygOH2E3W7aunNTVwBLyZGvbG5EEKpPErXNzKOk8NhJNV61Tprs00abLSZlQ7S7CGUQrDgq2SWAY6OOyHC4SbDIHlFx5jNQXjSve/nm3GRgUGmsRSmM/mDXCUR2NwW7sFTUud5gfWbqBQ80FG0KAQiGPxa7w13fIQQa2s6IT36duSjSMdBVYhaEY8U2kQkfYItfqw3nCWV0MYb0dCGYRF5lIDmvnWzZDn2dxNH0s6LQSxVB9AF6ny1TKzkbX8nY8PhT+ysJFBIoULxu9LTKNDaVSjEnb/si8SWi0foGmXdQC1o4XZYyC01BGdVoxtqzoNmgonsje2PP93WGlO4KFQTRA9kch4w53+0Y3Om/OVYe+EHxGtcXOkjZ5qZNyLWXncJhZvKeIOtQMfPVAZQzQWHHSP94vUsKrmp+fMuLSlf7+9lo4KLQEwqrSAdCeN55Ec8nVnnvR+VG2+aF5H4BWMdnxAKK1K8aJvDr/3r8hmj6m98cLsZebdFITOrl7olRtUUWnEGr2Ho2m9a2xBomGnZilR7p31vJQjlGnYaDeMWzpUd29IpPZTttB2SQbY424pIKfgsuoCX5283wD4kLhKsPVHCuXw=","authorEmailMD5":"54c3a69343a951a798a6c436ac66bc7f","message":"And I apologize that I was a bit offensive (in that I was on the offensive when I posted.)\r\n\r\nI agree that asynchronous design is the way of the future, and a better way to develop in general, but I disagree that the async & await keywords are the best way to go about it (if that's actually what you meant.)\r\n\r\nI absolutely love how JS, TypeScript, and (I think) any other functional language handle it, and possibly even languages with event support, which include C#.\r\n\r\nI would much rather spawn a thread, then fire an event or call a function upon completion or status update than use async and await. I just hate how async was done in C#. And I hate that it's the only asynchronous paradigm allowed in the UWP APIs.\r\n\r\nAfter reading a few blog posts like yours on this (now that I know what to look for) the solution isn't going to be so hard for me to find in the future, which is nice. It simply reeks of bad language design when the clear-cut, bare minimum await & async example that MS publishes freaking deadlocks when run from a GUI. That is ... well, like I said, this is one of those stretch marks you see when a language gets too big or starts doing things poorly; it's evidence of a fundamental design flaw in the language.\r\n\r\nIt's like how cracks in a wall (which are an easy thing to cover up) point to a building foundation that is not as sound as it should be.\r\n\r\nProgramming languages should not get in the way of the programmer. They should not interfere with the programmer's intent. As a programmer/developer, any language whose syntax is not well defined enough that ambiguity is *introduced* when I type in the code, is a language whose design is probably fundamentally flawed. Sadly I can't think of a programming language that is not fundamentally flawed in this way. There are probably a few out there, but I don't know of them.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"11a5ad5a-a039-373a-95ea-9cb7d8cb8d08","date":"2015-10-29T13:38:54Z","timestamp":1446125934,"authorUserId":"disqus:naikrovek"},{"_id":"2a770dc0-cf21-352a-b17b-8ecaf9241d1a","authorName":"Erwin M","authorEmailEncrypted":"afBZSvnGVPJFG7Dh1rnGT/BPz+V7nnigz2rc8HA3XKMt69Orx5Pgn7TnR/AlekuhnqMW/k9T337gPbo1Xlze2JHslTuqvj5HXTrztPZg4w77Oa0Eoh0UKR3PDnePYHrrTmyR/q6FBcHaVS4rWDIzsPUHp3gjhoq5TCXCYVI8YH2Xz6NRcGP1OxPG4GruNq1Sp8ARjvcWPj8L2K63uJQlWtuxzZy6GONt1r9U+tG0hLJsW+Z3MwbN9433MGWpidVp2K4SgCtAwBx1SVzhpMVOwOxzGvVsJTZ+qW+ccv0GOJ0S9/CtaCY7yLrEqeqoL024rY/3gTGS/rdenUNbPptDl2RXHAhtIxMtct4uFt7JjpkRua9m25O/p3/M1sd2Y63HuSJHExcu0tHqsznQEm9mz2nEQu2ZN4pijeieVq9q0r673rShWieZabh1JbiuS/lO7j0CoOb/X2nOY3bm4r0I6fRMJC340lLUabxcHk44AlJkCG2Up+TmgEuoKt3BhjyxUQKxM7LCUezn6eIZe19XQII1Qj9dkIgjlL8L+grweGEDi43UTpoyfcXcBslbmtxGw1QjWdBoizNiTah+3j5qzK3o/Ao6UV4SdmzvEAjLc4Ro5hf7O/chs46W4ypcDmxOR2qe/jJP4Wc9YijwC/fWKaXBb+F/LHdM464GuE66wc8=","authorEmailMD5":"92a359c378b8045bd801c715630dac42","message":"Extremely helpful, thanks a lot!","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-10-30T08:41:39Z","timestamp":1446194499,"authorUserId":"disqus:mayerwin"},{"_id":"50f7875b-ef7e-3516-b4a5-2ba91aaf283a","authorName":"Stephen Cleary","authorEmailEncrypted":"LhgpPFwH9GYWSava4VEjVp0cuw82qhHk7emilOutVzZ8Fa90t6BW/7Sjc0uo+f96KFqLdZar31CFq5VNDaqrdGe3fMcFZNwKrx7iSGgWm7UoynME2ML80zGu6ZceN066lGt6g0IRMrF+ATVow+I401NJaWJyumAxJt5nqy1ztLe2cDE5KwltwvwX+oMARmi3aqW8rsOHY84RfyoFnOha4vVNkTY0V5shkk1W2T9tc5zXb6MHAsf0GVEWujJu+xp5KjWRJZYmfvOb33SdZgLZYxpbLbDt2yOc0f56lcW4V6jl7ivvvKZYy8Y8jGr14FJYVH4uUtVXlTrPCs0/M7CwnCo90RQCpPgM1VQreN5MrOvEAqZIO+smbcQJuvkeC90o3V/nKp9JRMvGdd9cZ7hqL85h9WQTe1/z7FKfV8t6RdIz6NEfOXIQNu9M//xUlsT+odC3QcZHGaxpIFRrAvK27VRzbRfHqZGZ508Q/dbu0InuM6XcfeDFC6lEHQ1k+PS45aGjDMpRSbNmNhR2FQ4DWihAFsJYglrEuMaGf5m2RsCDh0FLvoE2/zM1nTUuIo1JFwd+YNHJXC2rAigFZa4T3vgC+Eh/5oEpgtP6UFJt3KdEZJBdD362hOr4I4z9+/EO2ItFd8/g4vW2ncxSsn0XIgDEPVnsHVMN2ed8WIatw0s=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Hi, Piet,\r\n\r\nThere isn't enough information in the question to be able to answer it. I recommend that you reduce the case to the smallest reproducible example and then post it on Stack Overflow.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"7407f97b-dbe4-34cd-b893-12472c158ded","date":"2015-11-11T13:17:07Z","timestamp":1447247827,"authorUserId":"disqus:stephen_cleary"},{"_id":"7407f97b-dbe4-34cd-b893-12472c158ded","authorName":"Piet","authorEmailEncrypted":"rfDAWas3sVKnEOXRAbl8u6uiW6jUHh1JNJWhE6C4MXN2fonj6DT1APXr9JQbQf0pfpAfOsILm9uChtvJgDc5cCgBtDS8Qx5oehBohPbVw6xcas61EDYZAidxfyquIvqPCi2l1gGWD1hoaipPYCBSEw+4q8lUQkJL09KtfMU0Dp1WBJAjN0t2+gYl0RjpYf/OUrxLJA/CKxF5IWDhQBW/5VYQ6cjHm2MmfQGeAgcav9JS5wRd3SArkh9UnmGvjbGBQRdhk3hgIZd3qAA0ljUF8pZ07dAWIdl9g8puad+GSxGp/1/g4lOODvvUv6PwvV8YaflOqagWLhJDDLliqX5Mxbf3jw/QTgUw2IztcZ/dHOBbzeOerQmnXk6KGraMFCoFCEBuUELOrGLyNMmKZq4eJr6bNspTVn6NN8E4fOYrskiSWFOAUGdOjhd/mjKVYCffqAsPy1SoDJtSgH/EBrRtRZfk8B5Upgwp3lbTxxz93Epd7n1f7jtzD6kgmZHHF8BfGp/gwAqWBRLlRRcdrZyIm3Gs8v0q9m1MqsZUFYvhODAbeRkF0Qpgg7mKPcTZHrGWSMXOVFoFXRsSC2BJcppXW/9aQZ1+o4dUY42yaJU9pegr5USmovNwEEZJkLSolBJYngBC6gcoBHeedl2ZBn87wQwiTOLrDqM1xESFXVqWYLM=","authorEmailMD5":"b3029fe9f1cea0938143f07a0dddd5d6","message":"Great article!\r\n\r\nTried all the solutions but it did not solve the problem i have...\r\n\r\n var httpResponse = await httpClient.PostAsJsonAsync<guid>(string.Format(\"StoreFile?filePath={0}\", storeEssenceParameters.ImportPath), storeEssenceParameters.EssenceId).ConfigureAwait(false);\r\n\r\nhttpResponse.EnsureSuccessStatusCode();\r\n\r\nProblem is with the above code. Sometimes this call takes a short amount of time, and than it finishes with no problem. When the call takes a longer time, say 15 minutes or more, it never returns. The actual WebApi service on the other site always finishes with no problem.  \r\nTried already different things, with and without await, with and without ConfigureAwait(false), none of it solves the problem. What else could cause this call to never come back?  \r\nRegards","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-11-11T12:41:37Z","timestamp":1447245697,"authorUserId":""},{"_id":"750e3399-d230-3501-a17f-b4cbfa1080e6","authorName":"Piet","authorEmailEncrypted":"sxOAMAHtLeEITPJoQB2QeeJs9d7mrWAHbyuyrGuvfF+B66Smes1EqzHQ6BVpGDFHLKU4jEIwZaXuuq11a1i/17komyM2CUtLZzMN2Jn01TmtjsT2S/G0iGxrRmXuCg9YNPzoLy9z8Psn8Ws5beQX8c+0obuGwQlOVrt5kFaGehVuW/rEehQBmlK2Twz0rAhaMBAQ4ZQ5jhPLKMax+XK3gQucwa4ZvQwG2d5DALwH/ba0pl/e5Pqf4rsQ+SmCBxxuj7SQEPBtxw2z82aVrOxBElkJL3PsVLJaw766OFUcPqGexat3n4707CmeSvn9N3U6Z7bmbQ5jx2o2apHW00rS3YkViPr23aS8yMRzK0c0jItoN6yduFjEHcMc2x8d6ssThQinC7snP/deT8xHDfDO+UiULwMfi5pHwxqIiaPB6UZi90SP+3eOnu6SS0r5Ffp/traPILKOTdqh8DoNfn1aNmegtXQcEstxRg/xO6OT35PjtLS0g8jDkbY2Mwufjmf685hbo6ydjoShm1Mt6kbrLyx7oWLeRXIIDMcS6AiL9bFj03n2+hiBxmkQuk0bLRCw+W9+KfGmhRY7AMvxEZVXSX2a8zVP+HoGh7FQeOGQCXU2Dos3ZP6AJTfK8jbiSQj+PdnY8Ym1NrlxczigtYUbmfTmHQZOt6kH7m7iiBcvklY=","authorEmailMD5":"b3029fe9f1cea0938143f07a0dddd5d6","message":"Thanks for the quick response..\r\n\r\nFinally found the problem, turned out it had nothing to do with async issues, but with the folowing:\r\n\r\n\"Azure Load Balancer has an ‘idle timeout’ setting of 4 minutes\"\r\n\r\nSo after 4 minutes the connection was closed and no exception was thrown (or catched) and my call keeps waiting.\r\n\r\nSolution:\r\n\r\n var servicePoint = System.Net.ServicePointManager.FindServicePoint(new Uri(ToolboxSettings.GetSetting(ToolboxSettings.Settings.StorageServiceBaseUrl)));\r\n\r\nif (servicePoint != null)  \r\n{  \r\n servicePoint.SetTcpKeepAlive(true, 60000, 60000);  \r\n}","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"50f7875b-ef7e-3516-b4a5-2ba91aaf283a","date":"2015-11-11T16:18:13Z","timestamp":1447258693,"authorUserId":""},{"_id":"84b90a7a-4cec-357b-baa9-b811ae62d543","authorName":"Nicholas Vella","authorEmailEncrypted":"Ps6zad3MAZ/RQg+1jNZaxAz2ZkC0Nkby2xzixaqsQkWmiKUhrS/9hrWbwzuWvkfkR5CDf7sV78Ot5aMEVIjJT8NF9act7/8+ndFvcYC4iJ96MXxhkLOVBOA1cE13uoT1NN/iOTNEUbJeAbbJdFrkmRHeQFQcQ0GM7GJA2VmVxoLx0HYWpegQUrjyJLpDD4j40F1E51lS97leHEd7uvbZGQU8CsI8iIN4EUvzG23scRiKV7dzJkX6e5Ywe/bzEjonOhuaqz3788GDVG0Y8lfjHrlBDvV9dyT0X+sFr4wOYCNRwwgw3bRTI8Vyg8zBvp5JkNYh1cuZ9d3pTfNg74OrInMRY+hJH//sOWa+rsx5HqH37Rog6mSGxYiMkri1W2C18Yw8W8nqOK5Bd4m2BiYYufbnIeKszQ+rlWW/pq1sylhraVPDXkJTJ7Tqw2ujkwY14/FW0d6B3CyGV4ZDsK7+BzsnUNDVUzA9TjLexugMLpZVzdKGnIbMWLszt4QufyR2AT87fUkFVuKVRh0XsD5C1rrIZMp7vPco5corErWNFMimstYyIwbBOuZbB9eCESEKN3Pj1Nwdc+sRek53ZRf1jMriWgJYbZ4qH2GcesA3xfwnFekCdj3kofZKZbc0OPWE+RDyZjhml+au/3HQiXfJEp7Q4Qvbuw7lu8cTwJpDj1w=","authorEmailMD5":"1f0659a5aba1ec68a31d366299458630","message":"Hi Piet,\r\n\r\nI am having the exact same problem as you do.\r\n\r\nI am trying your solution but it does not seem to work. What are you passing as the new URI? The current URI of the page?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"750e3399-d230-3501-a17f-b4cbfa1080e6","date":"2015-11-17T09:10:48Z","timestamp":1447751448,"authorUserId":"disqus:nicholas_vella"},{"_id":"c1ffd794-5234-32df-8832-55d3aaa79eb0","authorName":"Suhan Shetty","authorEmailEncrypted":"Q/ILQvEcwFKEzd5kH6LezZyh/DwtfEH6FrrP5zCHwIMVeTfBX1xJzca3xURJXuEucMvTn2pi4uPyVUaSpngQg7tOy5SFkNyExOWidAcdBZ2RAjhZwIpXKJw1ep1acO2fdaze9fqYzJvzBCuaZdfyR20679nO0BuLKnoubLEy464Locnj1/jVG9ZLG7ZdjbXW2p4uO+rWUKmLKgygFwTocOjkyLColBEbuncgFQWJF2z3DNoEBSo6Wz5C8oAG3Bcxstv0VXNgSRolRDTYlbNVPNedPnpQ2NvcLlWT8pP0+gHgwqo49LXaKEPST1sTTnWLLvOijhoN7EusRggR1z19sKHh8segr1RH3XWKwPBOezuJwGDaJ9dPCA+wVEKPXDXTJAO7zG8FERIwOm4bhg/VL5Oo5A2EGmJs/WtLR82vtLAZaQVZM/BnoTwLzOnIzjiTV/W6y7NUszdLQBgRzErC4kPqCuzBbMuI5eJ5Tn5OGaIxKv8rf1C4PrNBH9JHMFwxQW5zin2smc+7UGwBukjhwwgpVwfcY1uTbdHud9ALwbCAtanYhIaN4YDeSS6etT7gd8Or/lUtI8qgfFLOQdkxgIMFlco2AzVZ2EVr2a7dBWImjR5aFlt+4YwoRC+TxAi8ZLKUC679Iv8oeayITLTAeW6yVe7XU7KKRd4lqJlbc1o=","authorEmailMD5":"6e0f58d5c678f3c3938593f5f8e14018","message":"Thanks a lot. ","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-12-03T04:34:08Z","timestamp":1449117248,"authorUserId":"disqus:suhanshetty"},{"_id":"101f66fe-1600-39f5-a5a2-78e911c39402","authorName":"Stephen Cleary","authorEmailEncrypted":"K/Tv1GR19BnH6akIoMtX+WQDziZRPz29dY/ZgHeQrfeafBL2dB8eM4Jb8of5mItUwiCiTcbTLJE6gJoaYnCyZGJ6TUU8/RUWTKbgQCzb5TGgjf74Ac1z4tpeSdgoZbltjRRiG04amMF6PVXqR8w62mTcd1GQDY/RMHxDKmik5jLOycyyE7t0eRf6BAqFe56X4bwmXEfDGi5V7vpUKL46sMc0pJ8CjBZi/sQ8NskP80nUd3Ld36eAmvrpffiS08FRPYCsT9AnDlkvmaWf93DD8Ca6ilRC2V4bneEZCHTtgEuc/7U69Wi21Yqr9+JCWcgWYvPcPCiML+j6YZUGa1m/5Evp/jnQ5Q98EXWGS034Q9IaTtEgd57Ki36xxJh/0JndZxZndTzL2RrttUsNBto1l4Ie2ZfdRKxpnDsxYKdxLYyG+wfWI6s1tVcfdsEiYIXcAXqVjnSO3e+XnotJ/QP2thd94Yp6RW1WEdbarYAXVemRQ8xxq7X7XTetmvz8pG/TMM3iiIjJeF+dtmpwwmBFa6+orr9A1LQPN76yW78G4XXEz20UpqZjzq7+7Y/0+E2T914XRjk0/fLcgRjQ8xvDwiPZc54OLf2QXn/S2SUZ12ohCTEU7rUfaoFE489DSvQOzXYpxEUwndhz8Vd2jxl1IWaThQ3jPQMphn2mhYgcPBM=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"You can use async/await with .NET 4 if you install the NuGet package Microsoft.Bcl.Async. [https://www.nuget.org/packa...](https://www.nuget.org/packages/Microsoft.Bcl.Async/ \"https://www.nuget.org/packages/Microsoft.Bcl.Async/\")","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"411fe941-a4c3-3edb-a0d6-0fd0feb654c2","date":"2015-12-11T13:52:40Z","timestamp":1449841960,"authorUserId":"disqus:stephen_cleary"},{"_id":"411fe941-a4c3-3edb-a0d6-0fd0feb654c2","authorName":"CIARAN COYLE","authorEmailEncrypted":"hzjZRuLTVBVvs5Q2TJWjMhvCBOZcRkyBgSFKzR0JREdYnCkwld83k/3QHF2/71h9ErJosWF6tc3LXjKjT/aUNidkQJk7Mdh9pTam4Hv7Zzf7WD00A3sIJbLihDmNWg2Wre31sEi73VAKfMBuogWk7tXCbV9Cx848zLj9d3CXPYepU7Yheyg9Ii7KmPxgrmXJ64koQ/MBvrjiicTMIKPhRCKUMlu6VrGIZvFO4ifrP2WGSFjuJF37mcw4jxpGT52/M8Ia6F+Zwqv1ZX/CWbt+o3bTavhuUJDnJA/kCaJYLmRjBqQsUOT/U4+AMB0uPIH1gT0gS6CUYCKOOqqwhPIm/PdvYMtO1KccRm/Lhrl5gW5QfrrC5iDld5+1beC/LNsr4PJ3+l9yukMoRK4KcUUYM6EbKXiro66ANkKFUc6lMzBJJtwt059YkHtN2oid9/ue3i9IsSogxrD8InBMeZbswht7kIqbwaVdYTyhi4l45CSVOClXTG2t8/1vyjJilgN5LYZTwB7CuPozlEQfdNf+9IkBOb5C1xYQjOjRl1QE6jGpdxkpjJk4AuuXobnPobau0Mzg4PLrvWg2tyjZM8loSAfT4LRVstU2e8v7uqTkPOvfvB1QcvyhqpVVVGQY579enFOFuS4nw68ExQICablcz1Y5gbc1cGGjq96E52trHUo=","authorEmailMD5":"8b7d42be8366d47e24fdff0aa954cb8e","message":"is there a solution for .net framework 4 because i cannot upgrade my target machine to 4.5 :(","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-12-11T11:25:56Z","timestamp":1449833156,"authorUserId":"disqus:ciaran_coyle"},{"_id":"c83c164a-799b-3b34-9de2-332d09c7aa78","authorName":"Asim Shaikh","authorEmailEncrypted":"NhlcAHGZscChu7hNEHsvDxLlRkx/sKL4/gqTXU9uXYiXfEy04ytFCt4nXjpr4691SQemt1N4sMjHmdCjdDkjPokVaZCHPeuPjcCSSitHHC4dUO9JyEq/Ul0HB7GJcpfvoR0YECfzceBIePucQTK5/+D0GOkJ/HOX86tsZ+OZJ5zL2lI4LtrVtxSVGp0BeWbp3hFvHRqdIfHs6fshlpW2XgNGVzkBidCbSIfLojU4BAlnQrwHlpZyE7anKB7FJRR6m2GZiLEHnO9+qQ22B8xL4eQ2W3ufXYVNpCP49bqS+M2NP18HaGlmUCvt+FiRek6QXPRf21r8kC6V4xecN0PnQE2zWzOM3xZGwJtzVKn6zBUJUiwI+NsC2zgggcWwIIY8mbHLNPGgv2m44D/x1D2fAYeYogcMtoURbo23vvaWOGjVjB5HtGH+dwL/ySXS/9swTn0zga110s/TWNKf81GAJh2MJIvFw5QxDju9TdgZuJ7z4EQXSkTuVaV+n02wRJSDmxFxiyflqfkN0TfzfMnlYg+Js39irIoEb6DpU412UGDdH2GlsiCpHbyUgdf+Jb4l+QvOjViQihnuXncTHyQV4v31KH6FZYsBAEEg25T9cNgoJveOsnPIDzUAntPI4kYUUJgHVePere0Cnxt2WGq3u7uXqvwh9tbzS+27x88mLe4=","authorEmailMD5":"a2baa34d4bd155eb55e9bdb7b459f5e2","message":"Thank you so much for the blog. Pheww it made me toil hard this problem.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-01-12T10:25:12Z","timestamp":1452594312,"authorUserId":"disqus:disqus_tkcyn7VLxk"},{"_id":"2d4a0607-3fc3-3727-88c3-b2b01cf38385","authorName":"‫שירה נוימן‬‎","authorEmailEncrypted":"HAXJHOu4SH8zGGCzVwSkHZ9bqtEjgwKvJq7ZQWkEXMY0499qVkZZymdH3tamwSgnwgDO6+A0m97zu/5hK8O5gj5uT/uehcvoB5drbGqUDoPOCfuF9iPscezWFyxDz8n8irpE9wEFYHTS8gdxelAUAd5b/BKc4p1H5SJf8a37Uz9hAC36DsuwGeimEIit2czGCtsQ8A4A3zAkpxKWg5+r+UyO6F2QHuwPb0/8LFiGnf/M9s+kw0JzzKvyniVAUy3lpwbP0BKjsH6wMFTfRYwq+uBQF9k8ntzt70vk9TWpzZVxy7B97grICVsCT9YYxbLFn08HWRVjuPbnYrHXrLp+jmQSrhxeBPtggpyMUvxyNXa2XKZN/lHDpu1znRJ4njYA6AzDnUEETM5kH/Ih3AemWAYYCbYMv7vyVPZdLmRak+kI3ijkhsYaM+Kibubq0BT/hHeskUI5BO6kEgY9WeOUQ6DYBbfHrIDxO10JNFay+CnwC/U90btW0Wtqn3tkV6oPZqF24Pr4Z7TzsZZVn5EwE/6QLHGhJkGAiSY2MsRlVnn2/uBwKSizxb2kkDZ2gHQ00EKCXEBKdKorxMncf8cELnyBpsGE6EEliUYEGqLcBX2nr1gfSoduUiqF4q2JHa1eSfao0+CU9Hlqoxqn/+J7v32yY6ZB8l8JTwTc5xpgNYQ=","authorEmailMD5":"8804fba3ffe872e2d1811822821ede55","message":"Hello,\r\n\r\nThis is a great article, and all you'r posts are, thank you!\r\n\r\nMy situation is like this  \r\nI develop an generic auditing solution to all are controllers (mvc, web api, services etc.): I think this should be synchronize so it wont stuck all services. but using Mvc action filter there is no async action for that. do you have any suggestion what I can do?\r\n\r\nThanks alot  \r\nShira\r\n\r\nThis is the action:  \r\nOnActionExecuting(ActionExecutingContext filterContext)","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-02-21T17:56:20Z","timestamp":1456077380,"authorUserId":"disqus:disqus_2xnuTOwktK"},{"_id":"766d3b6a-9fdd-32e5-9651-e4eb7dbab87d","authorName":"Stephen Cleary","authorEmailEncrypted":"oB7DTHCk3xOwXFxHnIN2obxqCLUa9sbHCQZy9l3R7OcUpffwOGwNqZrlmoKizZrSgRarr5mjhA9dgwZ8WOgLRtIogwJLR7EPu2rV6QNfOMDLwmTi40Vjyrii1Q8DDb2FhBhrOTLegRHdRjN9G2pv2+wvoVZxUVYUYLhw0scdbj/TY1o2ooB6REF43bfqRj+H9CI08V2uTq80osyikUUV9IpOFnhZj9vKunHLapUOmqUUYhSoV5w9+4XwiioVX9REO8DKC5f2ILV4wWbKD+eI0QUhV3FZE0kgodQEzjYSHjjhwRdsfmaZ6f0qHXt8t/Ohv97Fh1VZqZlx93H56H6pN/atJDkfyml60zIEzZR8XmlmMPwVO8WilVmWdaI/9oLl1EOVnLEG3KBsjEqRtgoz42p8wA8nav2dwOH6bjhQVcYgMu7feLVRMizQaTwgb9BZPRs6GGx2ZPfVS3IJiCN66QXEXF/+DVCORR0OpJo7fFJdXWaxYClDNdns6UH70OGja/UCW5Lznz4j8A/F9sw6zbW6+zxJeBNCYhEdp3eb9VH3KsgI6kCor3nGHOg9o8HJiDztIUG9XrtbMNI5MqmBnYfIitOmWzPOzIOttfwjzpM9JgeKXtQNfBo9nLvlkrYV9HR8TtMG0CZQKtUQe15YEozlB2y/bng1HM0RPYIxsdM=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Unfortunately, there isn't a good solution in this scenario. ASP.NET Core is rewriting the MVC library so that it will support action filters, but today it just doesn't support them.\r\n\r\nI'd say the best solution for now is to maintain both synchronous and asynchronous APIs. If possible, use the \"bool flag\" hack from my recent article here: [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/mt238404.aspx \"https://msdn.microsoft.com/en-us/magazine/mt238404.aspx\")","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"2d4a0607-3fc3-3727-88c3-b2b01cf38385","date":"2016-02-22T03:20:52Z","timestamp":1456111252,"authorUserId":"disqus:stephen_cleary"},{"_id":"962c2497-d0a8-3758-85fc-0a4024531da0","authorName":"Amit K","authorEmailEncrypted":"Gx2D4lRPEfFDK6qxaCsoMhJT6Q0Xf5I0vEk3VdeX+pFSZyA24fwv4XjCqNfE20ZcZk6ALio1QvFhgOZ6jg3h97sBTBZwBjQNklNWKqvf98FLDAcDvBHK3SRWemEbnUKRcyX576JL4aEU0cbRq8gWof9u7saW8XMSoBUrHowwVjU2an+rQERG+qJ8rY2ZJqYP55V6naANOYAMSrTfno8lGgTsCHPYPjHMwpB6ehDJSZDMI+hEcMVT3CZwQd4ss+Y9rKN72ymYPMvKJXRpWR210xcAADOUivFPfqomVhEVw+jjQc0dL+MDr9ZYOR7DD0ipzWQzFoJ6Z3o7XyrB9bCApm4XJe4UHI0cmwk6U1MDah+KD8dCcM+tjDRI6jrIUp7DiVARvz/23xClwnf83BraeEjdQ585szKlhk1/1ks2G0E8T+kr7h1mY4xF2kUIfxeNa+dm2dL7yfI9uC+Z9IqSDzoH+v8CZTQfv0szJH5IskDmTS18kLOSBVkR4iFoXKH3UcCMLAiED2hIi9nThFrCl3cyo6iLISHNudpmmIoZzQiYkUlz+ZWweMEQ+RcTtqVbH7E1jxa/cMNacbKymp3J2Kwg8nuVjH1rmBxi2K1jUt9Ruaw5FsaUOa6usLSvaA1OGzJoxjFf+mlNqzCQBrL88qicHssznu0+vajuAKsSBFg=","authorEmailMD5":"565e76718bd3e68e33ab802bc177d910","message":"I wish guys like you were working at Microsoft :)  \r\nGreat explanation.. Thank You","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-03-08T06:15:09Z","timestamp":1457417709,"authorUserId":""},{"_id":"4fff66b7-384c-3275-b411-49d69153711b","authorName":"Jarno Montonen","authorEmailEncrypted":"S1u/ye6rajcClvyk/H0CEVXjdD7kCF/rwnkCOIa0qOVXbKFfIce9BNgLikBvYhbKFefk/cCjcOv8/JiTkw4cLUL9KQeu96pEb0Q0DqVUmwHSJG82M835lxUSuh3TergGDJx6BInUd6VtkVQAmAJHHIA4zVZthtgqZATbXcfQM7cY0ZcRJFltrB7hnCIIySKVRxpWprdUDR655sgdd2jLWwO4EV2PHtQLIH+moRpBCbUvEYQznzjS8vD95kK/9CvArWIQ7xqwjbdxwP6spK/ziIg8ANH9j/N9hqNJIGYm+fLSomru0il9pg1GFKEBdlr5OwuVP1zhEOIDB92aSKrluqU+gU/I0O4a3KQEc6MqqSFO86uC6+VVhPzlekpT3B/nGM4CjZ+iAu8FA1KRMKdA90sOPu/WwsNxDWO0ScSFJfB9Go0D8FaCh/91u35LaSUyY1HWHUnPtC5Dufp/b+64yjfhVP7AZPZEAXbQ9lHLBgXQ8V78JVY2XM67fC9sZ+aDIU7A773crX++H1hZugxAsXqDzp75P1degmbu8jJ/87Tbwa8iQm161gYWvbUAMpJtQSYawYBMsKWg+9KphLi7hmjgJ5K7qE8MfW5YFn3MhdVceKnLQjcPhqPCB5yIqTvMs7m3EgqHFPGawy+MWSN90yUzR5d0nc43IhUWHptGMXM=","authorEmailMD5":"32189d4bdf842885ca2edfdd0f3214e6","message":"Great post that saved my day a while back. We have now added this to our Windows App Devevelopment Best Practices repo in GitHub ([https://github.com/futurice...](https://github.com/futurice/windows-app-development-best-practices/blob/master/README.md#use-configureawait-to-avoid-deadlocks-when-making-a-blocking-call-for-an-awaitable-method) \"https://github.com/futurice/windows-app-development-best-practices/blob/master/README.md#use-configureawait-to-avoid-deadlocks-when-making-a-blocking-call-for-an-awaitable-method)\"). I would like to encourage you Stephen (and everybody) to send pull requests for similar additions in the future.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-03-11T10:58:47Z","timestamp":1457693927,"authorUserId":"disqus:jarnomontonen"},{"_id":"7dacad21-40e0-3920-9df4-b4a8e96b0084","authorName":"Илья Казаков","authorEmailEncrypted":"ighkYeFF7wkySI9lZe3+sYxDckRUR8zO5+0zqfunKEdq1X1WYnh2SD9CLbop/hHw6nBadwDLs+sYCyqGvKyrL35IxoX7YgH13f2+x9ibufr9ptc2ZYHuDks5Vrad89eFG+Dloz6bWHsvIbnVLdyMTsX6onDafKzQDsPu8aZboGTyrszdJm6LcP5dXlLDNZoB1FK3IsQiv65TexF7/3/ezgg8SF3SkUY09NuXUkJMt5VB4er71hUJLf+D9dbIWgvCb3q9k7+TU5YT+23SmyAZrEh7bZ4MHReqNuhywbRfc0XxVgq6Kj0OBAfQzfqNYsRIR1TYxT7S9DATg7VihDYYxdMonMlprYvW/INBR1yi55uMONvIJa1agNCE+1t4lZxP6WUKz4uBDQjs+OOtixDWAV63hyl0uRJXJGJUSIS7P3RjpJgksAG2x8gx301b1jBHczVBJwJSuvnTtnMjYNs8j40e9ruTtQM9eMDAFKpD2JmiuBi1/4xiB5cVYdgtxf3fsG5ee5cF7cAa7Pfa4zHXzNtnr6jvRZp2ClRs/gwLZJ0LA1Oaks8UPGUojT6WRO+UY3gT30OsdU+fG0YZKIX9rKMm4Mm1dida2wuwb0ijIwOiJjVhFwPqWFQecxZYXynUqtz+1JlOxD1riDVjQApbKe5RVaiNQvirgn/xFt7nj7g=","authorEmailMD5":"16bf78d2c5584eb76c60c672f8fef2a4","message":"So thank you!!!","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-03-20T20:37:46Z","timestamp":1458506266,"authorUserId":"disqus:Cossack13"},{"_id":"4a15d280-b7e2-3409-9a3b-c68a45c677fc","authorName":"Prashant Dudami","authorEmailEncrypted":"V/wI9o2nSv1cTt4cxmvGasPXzZazt4LGSqsn2DRlSHzlVqpd8KYWAOkcD40KSi7y8rjZl5d9LFSS732rKj1SRHEqCAG83htv5nwssfHZb4q5x92n09CSXzJ33iyQQmwa01hUz+ee6bdcbHg5wngr7OFDKU/rjBBB4DJnxZSKS6XUjpbqOBgcK33KQsQK8AsCWXQlnvX/yfXRNc5rTmJ7mEdysc3GbG5bl61AefBqlpjhxBSEBE4iG+8XXzlGmBwjw0QhPtHLXCGuKqJ+p6PSs9Pl8L2qTqBngz54BSAvEIq7W6PD40Fg13ocRkWiT8M8e/4AJTx1ZKJGI6Gx+5V4EGU/7PT4CVDJ08tcUdTTj4MXglGbtwTUxkB1bXjbZNFPl4qYI8tPKgpBYOZvRscnxTlftFcmTlMOGRppC6d2e1hdCLMPf1zjrL5JpB3foW+BFqOZpf9ZEvk0XMcB0aHxnq5EjeLiAgMMUx1LKi51JlbPgEIw5f/5VNyr5zmHsg9kCHfk7scXupnvAGT7Z1uYCuwdwFoZ2MA4s2RhAgPz8Kr5rcsjN947R1of3k0ZswK+Qz4ol1UuA12ZCxJaCu4zYwjHSWYeWz4nnwDbnCDph3UxyQOl2U9y95MdY4d//WBrojlIqBhP9KvEqnfeNk3f+is6sxAP/A1/WLjiwSqXv4s=","authorEmailMD5":"4bf4fc5523df3019e5dc88c408038c96","message":"Stephen. Thanks much! This post saved my day. :)","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-04-08T16:14:23Z","timestamp":1460132063,"authorUserId":"disqus:prashantdudami"},{"_id":"a9f8732b-e487-3705-995b-bd2d53435715","authorName":"Pradeep Chellappan","authorEmailEncrypted":"JskqwZBSQ1cvq1ouRXHJEclC/OrhYiHZGYUDR/mCvhLrMJ8Zn/lI9dN7IoSC9nC8jpc/4kaJvm76JesEXnmN2HFFAuIntI1bplR5vtNaK73Egv9ExyxETCtj9aqyKPlUr1puZ000ok1Oze9KbX+dVTAd2qLaONI+2X2UohXywh3KyFId4UhIEbmtMkv2ESa3zehLsP9PhuO7y1okAN35d4nBMyd5NEDSTIdYthT2o3m3BgSl0wXdsd+rjxS0Ri+kt3qk07OXsC/7LO8eiJjafn1xiVcx6qMFElfJeplEFKcEwkfbyUq6t6MHPYqAnOA+ff/ufghSSLDb08zaIhYLJ+yj+hdrEwP6RP8MK4MvyEFOy3QvlD44TNUK5ruIlcuW89+6nC68uahkp6v1UfeidiDeKTmexJx2G/hBSks/09leb74u/ZU1xzBexuewh6oNyV4Vud5NcCO3XDktIRoETzBjp5iMIndCovoeR6dHhA7GTb5+MT1ijQdDf2F6au3ay4DDrJXXWIGngILVP10ocS1ZC3d+ewIMnlzTdZ+OdFBIf5tzu1Q0AA8T6PA4LldJqpOPrPRwCXDhFERCimrp4d355WriPlWGCqTvl5JDa/CvoNN6dgkKeubCKjmsxAmZy2LUnoQExup9NNjPbOo6fkrgQgDbKsvnzsHOz+h6+Fc=","authorEmailMD5":"8f77198639317e4e2dfe37e8a6546bfb","message":"Thanks for the nice post Stephen. It is very well written and cleared my doubts on the use of ConfigureAwait with [asp.net](http://asp.net \"asp.net\").","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-04-15T18:41:23Z","timestamp":1460745683,"authorUserId":""},{"_id":"c1f3c18c-74e9-3e96-be41-d5c0fe6fd565","authorName":"Gustavo Maloste","authorEmailEncrypted":"lFbWczyn5Tl7BLYIlgB4xTH4eL7sQgRASX5Z2mSDwFxkjTf/9Iur8S6Li3aXS6K0tplkfNPBnAFiAe/FtWKoaymz5iZFCCIqUDhAVDXMiyLcSIww+zA9P8tSZVYP3idwNB0EQjzSIrZ/ELFLed1MlazllvN6+P0gBm4a3kR80QbSpPShKS0T52maXNbFNdvhR0WkHxatznaf2FafMWThVYLcilQPn9WHxdPsi1pktw7MIT/PymLeUrqvyX18XpojFkyJ8I9CGz+CcJVUXNwlxjmsrAnMdHICxF8I08lOaQLjwwBK+/m+VBDa3yS15FZ5cyZtH2X0wanJy9VqEhpv3DrjnJR24iV+ex39lVW+LH72S6kSz8LB6qtA3wszz2cj7oB0A1yW4hYqvjRZZytCQz+n8HCM2prCGn0/STmDAGI3KEai2LAoCNBRp1oyCeIEQdzose69WLBTevAstrghRAd78WfIpDfzYT/U91LCCjnLGHgZWdwYkI/8sMjfiQirge20FfifCxM/7Ctw952kki+OJRvxU4nP96NC6lhuLoxsOYvlWSjQj0E6OqDqPzRPlwQaSuiICgbhwv2vh1n+6SYjF7jGPTERHJ1b7dPIPwXmyM6aj9aM/uCo5RhAuX8qPw7kdG/Yh2vFqokijlf/bdxl921IMXfQYrqkQyfdAE0=","authorEmailMD5":"02d7adea7c89f5ffb6039d29089844d0","message":"Incredibly simple and objective post.  \r\nThank you","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-04-19T22:17:25Z","timestamp":1461104245,"authorUserId":"disqus:gustavomaloste"},{"_id":"e553b1ea-4497-3df8-b8dd-9975a466bb31","authorName":"Francesco F","authorEmailEncrypted":"npZ+9U22YDhFGuxfWdX8PMqbqsBZNCfbuyw8/3HSHnUDQdvMb3243dmNE5/QfNn2PyYBsW9K16AsIQ+U8aoqlEXEoL8CUKrLYh0ySuWFQ+yu63RcvhoNcVOa6g0/H4TlM0PnJbmtO/i0F3xTcBHuMh7s6q3ziW1qyF1bxCK0vtHaRQrm7tOxIi2Cmulo+pkiCoWDzooa5BYKbHtTxrU2TgkMgdziX+Mcm0koevig67S3QUdFq19PSugOezwbo8JWW6tbga5LPtiCLUloXuNVLrPI2wzV5X6unrBc4GKusxe1Oo3uWbqKMGjkqQuKAhaaqZTkVDQ9n+8bYxqMoqbmbzrwqEHGervbNO/zQQnBf/oGvGWEQKwrRbJChRdj5vSmC94HAGVPTtljB9gtcWbxcNVkqgmQxKzOBQM+xHXNEtz8xWrPZVQ0wBX7g7FU2EgQ9eRMHmDeo+bIP06dV1W5PXqomvWqGPKYpaiDjm6aOxqZyo//3UPSmgE/VgasP5JK0in8oPdoNpsVmegcW8xEL/insLWjy8ZsDd2IvZ/lXFQl50oR35T5NGIPGuYJFO0qSBVtJaUoJd9UD4VrGePZTW37His8LdkWADo76rtO+dEJKx4TFNesKhRKW7P0DdVjDJvNDGOv/Q1/FvGXDFcsnPkVZRHhfRAEVJGGvcYKtv4=","authorEmailMD5":"4ce1372658ca28dc4e0e8d78f6a4f757","message":"Wonderful post.  \r\nThanks!","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-04-28T12:29:31Z","timestamp":1461846571,"authorUserId":"disqus:disqus_xMyF9KPP2w"},{"_id":"9eb8f0ec-e4ac-3c2b-aca3-7cde9152edbd","authorName":"Stephen Cleary","authorEmailEncrypted":"rWyN4aOzerRTxNpqLBbFCD8fltxc0PcQYOeqyMa+vWaBYa1lMQsWpWbFlhFAT8JKvEeMjzeAjm9l32ukyfr/tL1Jw07k7Ih4zjaNVY6WRmmsr6PBV2ZxRVhrXN0koqOvXDlw7yidzzzARCYgJGSIKhY8k2lo31YP+iN2k+YjLI58D8lru114rgYUpG/3PB2wX5+C5shLqzXQhWEUdOr6LaZdRvVgNrVZySw/6vEiyoe54k2/loLRBhVh083tt6odB71TDa15yQGwJWO7So0DUw0aU8Fe8TovMPuvj5hr5dq6F522zYy3aDwkF/hi+gp9HXhbs1JVoviy3MPMjdmvemD9MrO/53G4iPprOLU9lv/aChnzUJBBlIkzh0GA6nmglpBkUq8oYDwNktLqDckpcXf1fm6FaRG6S39e44VMYeAGeKwPyHwNzcrWebJCdHvkIPMfpSMdfM1zcQAWLh92L8youMIMgHKQgrvDOzLatBrLIZwXk4WW4fFhTiJmE7ga29bFc27wXTRxoJ/nQt239zc3QrL1nP2XvPOd3NqwKEJBXNyAwruIuXRfGSyXFlU6eILyq4HHeIab1Z24C1L58GHnC1RSxL6izTglZh81NyYcvzb6w4Xzsd/JiSKYF2cObiOho6ko2KYvPGHBKTGTbBsO7uSe0EZkyxUxtlz/AYU=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Yes, assuming you leave the Task.Run's in place (that is, WaitAll is waiting on a bunch of Task.Run tasks). When running on the thread pool, there is no context to capture, and so ConfigureAwait(false) would be a noop.\r\n\r\nThis would be a good first step, reducing one-thread-per-request to one-thread-for-all-requests. The next step would be to replace WaitAll with await-WhenAll and remove the Task.Run's completely; this would give you zero-threads-for-all-requests (fully asynchronous).","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"e681e320-b131-37d2-85a9-1950bed6308f","date":"2016-05-14T12:56:11Z","timestamp":1463230571,"authorUserId":"disqus:stephen_cleary"},{"_id":"e681e320-b131-37d2-85a9-1950bed6308f","authorName":"Brondahl","authorEmailEncrypted":"Aqve72ptq9jgaaX9E46N4qNoi18NDwrN1egf142PWuYr1m0CcVsICB/pVJsVsIb1HWX2qpsdkxed98uMUmyCygEleF9Xj8Jdy3LV2Viq3tNjjiOJG8UKajQqbBWF+eVY96DQEjUNsb9MyWHqQugv+44S6CgqEpxXnTExiQ5y1y6miPo8ZlLJOMvmxmzWGXWkuIhhEtvS8oHGEa3vjQqUkbDKKupCEC7RrqR5tB5URB+AspT5HSYpDVBAU/PCBQpyNwEBxeATpCp8psEBqZJ+xBWImLyuedcrOwMFYgJLvVYJDorD0gYRn3u6H8P0yYrjIETr6ywHiXPNuoJzTryUMh+3IIWw7iMhH0wTP4IWhUY5BXzTrMH06CkVLAGiUzREIGZSwSWTcunBbOJLTl5cCP/W0oqTuYZeJcGXDkRuqhFtkx+CEA9wO+Es5TQvaU9tBnYqEnuM29vW/JKyRTjivBmdJNC4GurLzjP3RckWBj6ygh0OQxsZs95dzZ4uc54/WX1L5lXvsMsCrT9L/DKeflBsADmWq5xMNhdk+5MDjOcYYVqGzwO/y/BGEzNeZ0jpyLDJUxhm9R2KR2J+62GjsvSo7p8GEjfie6fc89tJOdADKsbpW5SnFJvwOOlXUXxl1UL9RsQHVeKRGCF/rvQdA3EHYD1I0RLkgnh4+Eu9EIg=","authorEmailMD5":"c807195c3caef0cc89ed8bbf9717a710","message":"Hi there,\r\n\r\nThanks for this great post.  \r\nHave I correctly understood, then, that if your current code has been triggered by Task.Run() (or even TP.QUWI, if your code is /very/ old school) then the Context is NOT one of these awkward blocking ones ... it's a ThreadPool context and thus it's fine to call await without .ConfigureAwait(false), and then to block on the result of that call.\r\n\r\nI've currently got some multi-threaded code that is Task.Running a bunch of threads, each of which currently calls WebRequest.GetResponse() and synchronously waits on the result, and the initiating thread is calling WaitAll on the collection of Tasks that it ran.\r\n\r\nI believe I can convert to await GetResponseAsync, bubbling async through the methods until it hits the initiating thread, at which point I leave the WaitAll untouched. And I can do all this without needing to use ConfigureAwait(false) and also without triggering a Deadlock.\r\n\r\nHave I got that right?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-05-14T09:42:01Z","timestamp":1463218921,"authorUserId":"disqus:Brondahl"},{"_id":"9cc3a836-07d2-3147-ae06-57507b5b8463","authorName":"Luís Fernandes","authorEmailEncrypted":"XsQ+s0u/DubxOnHuBGPB+lugBCHaFTH2/6gnNsaxChoxFHlm+cXnD4ZhOg+zpqxI8SGdNorxAXIIVdNytke/sIRHob5E+VGSwVVzJqwuCAGIghDUCBUMi6VP2k1iJIqeC2EqRWHWGmyq05D+gKQjjTYAUtEk2cJFE1ABujykMlNZ76v5d/1lwxjTpZ7VmRANyJ/5w1hwlNlu0wfchlBRq4b8vpm7uIaE2mXc9UIJaoJNTce8CEX/0tnlBFkbWYgGH9uvTOINRaB1TcU+aFLSp6TKSfnNOR5FydYl30EFHqFQDF5TXqfDOIiTftXM7yBoJvKftCtowhzH/PyD5xTv0Mhm2YD/Fd/Pbez4V8wbvmrR4SY+jHpNclpWJ9eChV2UQXgw2t1Q60/OZqLojQJh8U2HNeRxugYkV5gk6g49HLuDoiIWmTHYH+EpXSpbG7TrOtR707b6IlyfdY51J3EZJ1Gkk4fPPnZhozP/CTFvmAxmQyvbs7/PDaiEipyK4774rZ12vFzlxcb+yKwFrfodwP/6rVpM5XGOQ5BYvEiNBi3IMjrf0b7hyWao8yD+2JGJ02Qn/Z7RI+NgJQyMErHjY00QYWoeCtOvPt3YBguKF00enufd0ZF68TDdL+vFiYhLxC8pK+qt6wFB8m+F/mzvwAFcQqcbJMcUdaZbKz8WYEo=","authorEmailMD5":"3587d6e1f69adc340c89c46d11a95038","message":"Good afternoon!\r\n\r\nDid you ever have a problem with client.GetAsync() when the host is unreachable? In my case, the client.Timeout goes up to 3 minutes and only then throws a System.Net.WebException - Connection timed out - as described in my post at StackOverflow ([http://stackoverflow.com/qu...](http://stackoverflow.com/questions/37369180/async-download-and-deserialize) \"http://stackoverflow.com/questions/37369180/async-download-and-deserialize)\") .\r\n\r\nI tried to base myself in some of your book recommendations, namely 2.1 - Pausing for a Period of Time - Discussion, where you say that CancellationToken is usually a better choice for a timeout; and 9.3 - Canceling Due to Timeouts - Solution, where you show some token timeout examples. However, the CancellingToken is being ignored when the host is unreachable; works fine otherwise (i.e., if the whole download and deserialization process isn't completed in 10 seconds). Still, the (real) problem seems to be in GetAsync method.\r\n\r\nMind to take a look? Thanks! Your blog posts and book have definitely been helpful thus far.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-05-22T15:38:16Z","timestamp":1463931496,"authorUserId":"disqus:disqus_LfgagoSDen"},{"_id":"01df4366-f192-30ad-afc0-435a671413bd","authorName":"Stephen Cleary","authorEmailEncrypted":"wPU9TazCop4SUEsOJVoMdzZR9YEJU9C52cWEwzmx5BkUWKlK2PkefjbeqNr1jKrradwuPu9lMziN7DwMO9O68deC+eZ7KcU+nt+SAlYn/UwUm22i1ez0MJ0SFKW/byglac6zB0zcijDVuxfhExJzmiIiHeP3dXrMjE+X0oDl1VzyBYwVOj78CLD8v3EemvpfjVPSJqX/ddELmcHF3A1b1qL+SWTSWm8Zv+3XuSS0beRlU+NKAprBu2e7hbqg0tT76AoyUgQ8abJ65Y6CQmQ1ndlgGh5rSRYTDT+01xp5p5DgIgzylHmwuMnZB3M2uYpth9n0hpBRLJ8UuHzrWT3ZJNFh3wGcl4nATEEOt/ntlm0n4H2qHDp2r0ijczZQz4AiijrWKuz5a0UKMicPma7Su9NwsT3USaSEdDmHYjVphr0lmy1KbDmEyAX24xcS3FoZpBQnOx7xlRE6ZEMcuK5hx626dCRHeFv1t/lf5zd/UFDxsbr1MW3yugj2vUi9+ulecDWSgo8AoN6zFLEBAl+D2KHrySulGclIoQXiNNLO7TzWnRSrenWwae6ZRMbQkWxkdfxElZGc589ugwPhi6sIxNYqOQvl6lWWwSkNfju8EZXGNM7WtGRAxkZi5FUz3ql1RvZIxmq2d1iuKxOCS0jOyoBepRKnwX4vWnhzmQBBdtk=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Yes - essentially, you'll be cancelling the *wait*, not the *http request*. I would use `Task.WhenAny` instead of `Task.Run` and `WaitAny`, but the general concept is the same.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"7c9c7e86-5705-3d37-841c-cd572975a9e4","date":"2016-05-24T16:14:44Z","timestamp":1464106484,"authorUserId":"disqus:stephen_cleary"},{"_id":"7c9c7e86-5705-3d37-841c-cd572975a9e4","authorName":"Luís Fernandes","authorEmailEncrypted":"CMt51po2l9wHPvJOZiRCnBWuAxjpyiViL5iH+4JzSV9U9+whZBV+XDurADhUfU5zwtf2lEvsPyaJKw2i3Sun8E+leRxRJ5NAL2EPb7aluMXIGzbHrl+m+qMVscV56KJtAEkXw6yFAOTB+U7AoZ+0ovig1zrTNERGYO4nPWngfBl/3HX7axCg+UG+YNOvIlr5XOBJb8JADOk6lfRGCC9VgfeEeVEIGnfXFu+PatJGSINWaisydIQHHonPRk++k2GYgV1TQ6Idx5AQdtcDDCfZaGf5nsirKswZ3LD1t0TuWip4I+bwZ/J1jkugfSGyCdANKiN26XV5QwRlTHjOQJMFTnQQhSP4yqCJgrJ3ugC7mhx/HxoV6pKSP08meP3NE3IWo2m/+h9/slAIP9G33i/jZbRAHvHl/5Lnn+zyhPeVwGTSafXjnznyJ5EIdEcEqLjZtTiRTak54YJUosdsLpmqyF8OFrHU5Qx8mpl8oXjJXYOEj0ss1ttBZz8UPh1NQDedgD9FZxTIjkxs/AiwcVVYT3zuzKGusm2t6TXDe/osW2pt+roakojbHpWVj2aIczqPP7M+up6q3y2wyyl8TQmBu0F9AbQUmAnYb/yimXNnztgAmgUVLCphZuVwoucSUG1adqun4mq2opXcl/Ry6JaeScAnnci78tA49hhpg4zPFEM=","authorEmailMD5":"3587d6e1f69adc340c89c46d11a95038","message":"@stephen_cleary:disqus Sorry to bother you again! Still regarding the same Timeout issue... Would the alternative described by DavidJohnson.9477 at [https://forums.xamarin.com/...](https://forums.xamarin.com/discussion/5941/system-net-http-httpclient-timeout-seems-to-be-ignored \"https://forums.xamarin.com/discussion/5941/system-net-http-httpclient-timeout-seems-to-be-ignored\") be viable? At the end of the day, I think it's the same as what you describe in 2.1 recipe with Task Delays. What do you think?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"9cc3a836-07d2-3147-ae06-57507b5b8463","date":"2016-05-24T13:58:38Z","timestamp":1464098318,"authorUserId":"disqus:disqus_LfgagoSDen"},{"_id":"c47649df-6d38-35a3-a436-b4b5b4075ffe","authorName":"Stephen Cleary","authorEmailEncrypted":"iUZb/u3IFWzzWeTpvhIER501S5rAc0QBPAnRlEWh+J7bFbv4e9W+BDNhXoGBCJRX1DRW6cFIHZeXgYtCsVIgVbpMYYyOoCNCpYWfIFOEL58+MkzlToOijvwG9DLCWNS3PbLAJMd8VuKUFB+TBNs/GSsDVKyTwnm/+Wv4YJxh5D9B/d/mgtpYNqqe7iCBwtZNoc8KkQJTT0oByhfUOgNwhY/QrR3W2m6ycNxIeO4u61BNj4oO0syxK94W5GkD9rQhqflnT0Gg/+ojK8phcibsbsJkP2Vt4e/sQlLMSbmT2RDMlNJVbKvC/Vc6zhloZzq3Y46PHYkMOnoLXqE+pVrLphNHicIvrQij7IPLuqnOt3Sj7MeGQr973NB1locBjisyDoqtlflV8XYOr80Zqod6P+nm6HWlIfKsB1AvatkoNXvOWn3jRSdV5ei0h4VT5GleiJAVoDnX85RN5M8c0qpj/41m0itbgSjON+c68/UiTelPM51fCYQRLcYz8X2S2Ri3k/CenkF06NVD/19rLdbmuqVJ4LFSDNRqMZve4Dvyj8xVt64jDSwmeAQzlfHYtEjWx9Q2OVLYi/t3zwyZsyJbVVuSR8/2lvd+hD87TKSVuhi+Mb8uHJcjqXSzIYvKfct39+JsCWg433GQF2s1opX5cYGOidxortAY5z0/9kVW0Ls=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I took a (brief) look at it seems fine. Again, `WhenAny` will not actually stop the download; it just cancels the wait.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"ee111c09-ef1d-3fb7-8323-06f9431944a4","date":"2016-05-26T18:09:01Z","timestamp":1464286141,"authorUserId":"disqus:stephen_cleary"},{"_id":"ee111c09-ef1d-3fb7-8323-06f9431944a4","authorName":"Luís Fernandes","authorEmailEncrypted":"k7cltZD/wI9K1PLpqddlpEqtknFAoKS8nNWdO+P8tgs7jPrY4yLIEw53xvw5nCGKedLHMCFl0vqSaSfbMWpWU/r6G6aHKE4EBQsLU+rzcCZ9Jq3trdcpK263/bF5+4PNb7HFsa3HR00iKGrZWqb0v5rSx8Zq91RtmvUkUKhhW1sMAZuVw4TPu24PkS6MEhNVOtJGKiCepDU28Psqi5q5xfhLUBgT0QHWEG4sDyD+2hvV7uhp2Ie42WbxShdFOktITzcPtauqpi9KmaRck0BS33xBHodoqKBPa2gzKUU5DAo2GJOrV9krTKwgAwFDyH16IXTHgGaX2cA6Qo8gr1QfSAq045232t4lpxr85DbNA2aFTTZrU8LwN3v7CiPIYsuH8GnyEu2bAHu+oxDzov4guF3EByvT0PVwjmjUJ428602W7DUUqkXS3fo0a8C+gGQnIj2SIQIP1+xlYyJOjbwtIQPtFKLX/dZeEHvlry6bS+X8GnSJ/59Ccbow/wPYDr6w1wBk1vJYBydWgKgTcYimCFTNJ1NdTcaejNzTzUGal9zUX/YjqtbytmkhMNXnS+3CkT2CdPLpmqMaRC6o5UrE40XROaJcmjkUI8McavEBGQDIWmwH6E1UXyQWTDkUxwBaHEfjNMMV8QXCa7Ij0M3XoVYCX+gP+M3XyzBwlO1ue6o=","authorEmailMD5":"3587d6e1f69adc340c89c46d11a95038","message":"Thanks! For whatever reason, with no changes in the code, the timeout is working today, though yesterday it was hitting a Mono Http stack error and couple days ago it was ignoring the specified timeout as I described in StackOverflow. Some outstanding sorcery going on here.\r\n\r\nThe 'WhenAny' alternative seems to work fine, too. Care to take a look? [http://pastebin.com/Fgc89AAv](http://pastebin.com/Fgc89AAv \"http://pastebin.com/Fgc89AAv\"). I will also try ModernHttpClient to avoid the Mono stack. Thanks for the help!","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"01df4366-f192-30ad-afc0-435a671413bd","date":"2016-05-26T17:57:00Z","timestamp":1464285420,"authorUserId":"disqus:disqus_LfgagoSDen"},{"_id":"af590369-87a8-3efa-8a2a-d4a810665eab","authorName":"Stephen Cleary","authorEmailEncrypted":"IfAg1IIJuyw9vvyG7j7SN8L6+aNKHF13aDXE0IxLJxeVjgCkjJbPV4FHdiGqnjNRQKToBMXe6ARTBSZqbCgVfICI9MtNA6fVySH9c83GNrn8TmEYbs8iJPF7IqmTw2vMN/eVzEKTfA1K6yY6Qci7hLR7VljWgIL2jg2tzs9LDVc3SfHQJ47dhU7MurVaRrjVe8ulAJrBFea486kfuHOocQyaVUm7IJYzonMTiTmmM7q9OkH/BXeoWOdYZkpTmJKnE+LFQbyC+O1eIWzLd4ank8Q4tcl8VXpsbMALYdsB80J/ix7sP7x4FZpF83JvxohrgLtooqbeQ2UwlNHP8MP8dapEFJs2alR6DczRY8IZBIcwGUW6znuwUm8vhSIHq2Bi9wHswGK96/jk2YS7X5QpUyptOc1gWtYrtrwK1hBIsE+qPhUgtVjAgTWW2x/GbZ9Tki/b42KIPTEE8v4mPDmk5fI5cbBJp9FFkl0p+AgfCpN7Go1FoCoXwqGIZfCZ56ixFGfkjHIQOHyLH1773KVgYxzfE6Q4WWI44035HlJlhk4OxWrTHrbauipK9oaR2U7T2M/Mw4tBqV/vJSN9ZeHES5TYTTy/c2kNesRydmKRIbDhipSRAK8mrZFxhYbOMeV/G3ZH+eHU5X3anCCJSYDHiH4Ay92Bt3jou5H+ZrSCcuc=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I would be surprised if Mono supplied a SynchronizationContext to its Console apps. You can always check SynchronizationContext.Current - it should be null.\r\n\r\nThat said, I have seen the droid and iOS versions of Mono behave very strangely (and incorrectly) with thread pool semantics, task schedulers, etc. I believe they've already taken the MS implementations of the thread pool and at least part of the TPL, and they're planning to move even more to .NETCore. Looking forward to that...","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"b41922b3-fe90-390d-a3f3-b6c3081d1755","date":"2016-06-15T21:19:50Z","timestamp":1466025590,"authorUserId":"disqus:stephen_cleary"},{"_id":"b41922b3-fe90-390d-a3f3-b6c3081d1755","authorName":"Dan Gershony","authorEmailEncrypted":"AEsT1Y4mzD60oFOyWhtidxnAotgU1TI4/66hrF3T4t3kkotdIITnC/ZjWIWXaUBB+NZbJm711y+x4HMajdkkM/6BXeM/0cs5pOwUIddnrxGP1jhNP+aPfv4k7SDeGURPQUYDU2i/zvm8KRkJwFNae5b6YnmJjZAC/9AGukC6GKS09QvARB/EzVUtPmzq0QriWkD2/NHTh56x1ExH9FhLdbmdIS8WimXbrSNstFG4RZfvC621RS12kpMOuCzxFTtstcIiI+clgIUiZme0IZOADsfQc0v5xKA6fwaJK7Aryd+jrfWnk/ralob3B2IBvmIiiDOIafq/IQ/GzXKCpDE1pAG/R52hm6faXhBwCF2xwFsFeKNBVBgQjMzpA6sK90d+8gEqnCJHDyu+HwpOtdy83mwyB9LzhGMM13HbvIiinDTLZIMYBhN7H1q+GIMwrI5OAdLeEVbMBE1HrvJUA5ubiX/quPcfRUu3XUr5WO43QWxCw1aQYU5VtnoMoD9AgfeVcSPTmj1lvuUo3pcRGixq6gV0R37wPalY6D9ml/oA7biARNe02Ny8X1HzL4+gb/ZvaVv4J2Fqyg0OxQwbwOG7rMCgTUSvWXHIRJWGobL0SlAISJKAI90v9m0XB1CT8EHB9B5Q2VgkjhMSnTsQ+XS8/KKTKQL/PW1dsMiRDUmCCPs=","authorEmailMD5":"71adc1449fa9b5644d69a5d25db9ecd8","message":"Excellent post @stephen_cleary:disqus I was wondering if you had any idea on the behaviour of the default SynchronisationContext in the mono run-time (running in Ubuntu)   \r\nWith a Console app I got different behaviour when executing in Windows and Ubuntu (app was hanging when calling .Wait() )","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-06-15T16:50:11Z","timestamp":1466009411,"authorUserId":"disqus:disqus_Mq904YACXH"},{"_id":"bacb2d16-4ca6-33ef-a1de-262e2237c070","authorName":"Dan Gershony","authorEmailEncrypted":"T50qCVfGzLdqJtF72XIqp3exIFqrlrgqFwJEsBSRU/WS7ihfB9zNHwj4ZNzAz3n4PPwEbqX9WJeaOODPdmzPwTC5+ZdmxBR6dzWIMPX972YDqfk2IgN3kWz/0ops6G0EaxB2TFvAiS5mEZ+xrh65d+H3bFhghkI3tjYZWEtfzxO2Urtj8/h6HRpKdiMcDWjgCpub6HTjC3cP31TkPfhxoKLLYGpxUoQNSgMJXvEkWWboD82Ob6fs1+WspmypHk320NCX0O1/T2XRSiabGv+/fZgDKLq+SM69C2oH8i7RkqhQwYHCxfzzpK4i/2Qo1jGn+D0qOmCksB/kFRvN/mglnIYDzsRixSW9Bwd+SCcKdSt3MJ8Q/EYfTfxwCZb0svoD56WiHR5Q9HMmK3Lztj6ndbmx0/CNiX/SJm41NtnZiIiLp+wAk1xPvcqHarsinzECmlOaeGBAVFq3vzzcTwwaOxlHJqcVB33f3Z9xLebPMhT+c6MIz5hEjch2OAgrTALPihLer7Xz9hvq5kXd7yMxHz9IeVTnxo3Vwp7rJ443fL5HNQ4f7HJm3HN64mwTeSsvlZNIE1TyJioCmfytpX8Zto4Gwgrv9HLBTrCTV037CV+fOPxxdDs7iYaWZmlZkDPcLY1Q6A5jkieGuNyzzX1rYzKxLHbbU2WL/vWVmtyGSQo=","authorEmailMD5":"71adc1449fa9b5644d69a5d25db9ecd8","message":"It occurred to me that I was running Ubuntu 16 which may not be compatible yet with mono (I didn't find anything about this in the mono docs), I tried running my console app on fresh Ubuntu 14 and the app behaved as excepted.\r\n\r\nIndeed SynchronizationContext.Current was null\r\n\r\nThanks for your help.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"af590369-87a8-3efa-8a2a-d4a810665eab","date":"2016-06-16T16:37:57Z","timestamp":1466095077,"authorUserId":"disqus:disqus_Mq904YACXH"},{"_id":"25847a80-373b-3aea-8482-7bbd80edeebc","authorName":"Shamal Badhe","authorEmailEncrypted":"YQQcg/ebL5Wm8i0GETAbRVsF9u19oOwIcZi6qDJzh/Tk5DYld9fa4MvZtcpGJxeUYAGbfpjaCDG2piMt5ZPwQettVGCdhxMLPeNNKhK2wm711l+Wt63n2fl/3OYayFEWZHYmBclYYyc9a41KKOCSaCQY+xxa5UpMt2E9sP5l3rdVzr6sIfROvZV8lQQNgcNXFdLD94w7Iv0B5esdFTdLq4ljdJZJfPrCzjcer7y89f1mbEOSAHeBxC9LG2Pje/pImCfM3v2pNLrR72SLLTDXkkuAm+wYO9Zk2np49nk2miIK8M+neL9PMsna2rZdXRASfKU/s2d8I0r9VMwJR/EQdgzxNWn0hBfWY5f62ooxT8Xvr7MuNxbRJofJC44oDEynkXFeV9zG6O+Tpm4Mzp0Og3c7zaj1898BlPkoUBAmMfey69xQcYwNVSOaumUfnR/jyvE8P/J3c+K2UBgBM73p9C6Obud9u6ugXzPrB/Gs4RbSlao7WA4+NZkiLnF1y1joCKx5OKwM8XDpdJIRmXFv8Gz6nJZecvm77g5OdZqUSocjYrBjfIrBZYwvTOYfT4YOqVeCL4BMfTLxFATHGpFXBN4NG3hQTi1am4LcwUE8TGO5DSi3ZsA4gSY8B18WQQBTf/V2h/E21fDw1YK+H3+kOO1jEfViKNOykcNrNSRNFTg=","authorEmailMD5":"7e4527c5bd0b4f1b2b5af7eccbf9cfe6","message":"Hello Stephen,  \r\nI'm stuck in this issue: This is my coding structure.\r\n\r\npublic static async Task<string> A()  \r\n{  \r\n .....  \r\n await Test1.Get();  \r\n ....  \r\n await Test2.Post();  \r\n .......  \r\n await Test3.Send().ConfigureAwait(false);  \r\n}\r\n\r\npublic class Test1{  \r\n public static Get(){  \r\n .......  \r\n await Inner.Pass();  \r\n .......  \r\n }  \r\n}\r\n\r\npublic class Test2{  \r\n public static Post(){  \r\n .......  \r\n await Inner.Fail();  \r\n .......  \r\n }  \r\n}\r\n\r\npublic class Test3{  \r\n public static Send(){  \r\n .......  \r\n await Inner.Send();  \r\n .......  \r\n }  \r\n}\r\n\r\nWhen I run first time, its works fine. But when i try it second time in a few seconds, deadlock occurs and get like these lines in output window.  \r\nThe thread 0x7f8 has exited with code 259 (0x103).  \r\nThe thread 0x19e0 has exited with code 259 (0x103).  \r\nThe thread 0x1aac has exited with code 259 (0x103).  \r\nThe thread 0xb2c has exited with code 259 (0x103).  \r\nThe thread 0x1b18 has exited with code 259 (0x103).\r\n\r\nCan you please explain me how to fix this? Please reply asap.\r\n\r\nThank you.  \r\nShamal","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-06-17T17:52:02Z","timestamp":1466185922,"authorUserId":"disqus:shamalbadhe"},{"_id":"a4f56dec-bc10-33b9-8778-4a15ae7d4d84","authorName":"Shamal Badhe","authorEmailEncrypted":"u6WpQE15jv0EGv4W73ljHdBqkU8bmbqGr2+cn6Tyy7cuH7OcyAVas08HMo4F1aPzg/M1Bpx+CUExc0Bowc/VVjMpAtgiMeeugPmgq0kps5G/8qf7TqZdJL6rkjIar9JyCmPYaC+kLHMUuDMM1pzc/GqlgsTpP70m5y3rnC0lQuq1vcMdqcxsdjqUfq4yMTSC7/Fc0RNYbYNuOey7hOnR1W/XHLnzHr4OUI+NKGvsTZ2W50ZNMhjBZuBRGMDodGSNGaB5R7195NiI4YRbSL9L7lTMt3jvBIpyg5DOV69geDnOObhoY0DvGe/uVCNQ3THawbKIQ2C45W3+22YZRpTjhhptygzJtzBlXn7Cci6BKWHdGrfBh7egMV0WmyyfJ5ZNwueBHTU6EdcQSXU/sfMyv1bXzVcAIqijyY3NulLZnp7h7B5GkNp9t5TQszQSyVjqUJE5N6r5StDFSLblECESaEjCsptV2Rfqbp+9aCfQuoO0fd+dUZFeiB6Cse1hauN4iGyjousC4hjY3tZtfLrQUs/l03rvMr/ok7eNkcfNBjFlehjEi0MFlhboehJo1aWCb35XFUiowYxrzzuAya8iw5PQSI+YgJHFZZP/c4Gw9HmwSwPdBHfX25h3jFQFwSWzeCO1bhZU3Uu9HTLhPuYh3MeFTDD1tjyU7GF+VudMTL4=","authorEmailMD5":"7e4527c5bd0b4f1b2b5af7eccbf9cfe6","message":"Thank you Stephen!  \r\nI reduced the code as well that was causing deadlocks. I fixed it.   \r\nCan you please tell me in what situation, await method does not return the value? It executes very well. But after completing the function, doesn't return the value to its parent method.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"c7afb080-9b18-3d66-a405-cdc3dd04b70d","date":"2016-06-17T19:08:22Z","timestamp":1466190502,"authorUserId":"disqus:shamalbadhe"},{"_id":"c7afb080-9b18-3d66-a405-cdc3dd04b70d","authorName":"Stephen Cleary","authorEmailEncrypted":"rkpANAdJROZ9Zlhl3sjKtITnsrp4SoENH2fbjQVuSdByBu0/1ILFXPRifYiybFvfE7YtN9qthYf1TINeHqALP0A6i1H+cVZt+XwC1emLjh6Vhb5H2flDngpt/ba/dwxCHstqwJNJz6NjSQAy6zBdEQbsu7Fam3EZtOK8oUYPYHuuj5yQ/WMohGk7gftaynlRHjAWLp08hwN1NFuZA8lJG0rECXJj7JFqxVM7xxEOZngZTRGrrbn4gNX2iQJHzejp796jVjPGQC0p18zFErV5U+zaEWY4jYY2ROYe6fYI6U5pfQBIkdskxFxqay6WN8WxepUZnQjFYhWa5OVqkyITa+1dOkQh+keenczWu3uayzyu9Zs9nXz1vQl8R8WDTfzbsL/5LRQnY9s/rTtIor712jagg7qmYaFqqy5o34SDKhSbQKX34L4rJp1RHKoeXNxV+vzmrvjo2OfAtRj2t8piWF1t0X2bNacfmVailmh5tLEOSOVH21NJPnBixZH9SGoRUmVPJg0e4NT7dD1JFRGRWkCimGVwaeckANfTMOOz+aMg6+5sHtyxERibC7x/K5zr3CF99mRSG1zbSUQSB8hgsM1IAiRUsX279wBJSfUfroY3e03kFAxBye7yK0MIPw8xmTaVXUlj15U6hS9hTKJBy4f/gJQHm30P5mQFXdplDjc=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"There's nothing in the code you posted that would cause a deadlock. And the \"thread has exited\" statements don't mean anything useful in this case; you can just ignore them.\r\n\r\nI recommend that you:  \r\n1) Reduce the code causing the deadlock down to the minimum possible code that still causes the deadlock.  \r\n2) Post a question on Stack Overflow with *all* of the code necessary to reproduce the issue.  \r\n3) Send me a link to the question.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"25847a80-373b-3aea-8482-7bbd80edeebc","date":"2016-06-17T19:02:21Z","timestamp":1466190141,"authorUserId":"disqus:stephen_cleary"},{"_id":"e749a7b9-6acd-3170-8348-98bbd704229c","authorName":"Stephen Cleary","authorEmailEncrypted":"o5ocUy8NwMnGr0EIfzaUxAY2CHKi6kXRZm6Q8aY3t7HHST3/1QowDbxmOrZqVCnTwrKBgdYOOvh143FPm6ng8xFKUElAN42xC6smmgdtM2tJEAkYw/D/+w1cfALsRV9Bu4oRML1sr63lZrV2TnVL1O4okY0oYFYD+60Yjx1W9t2sj2oCfsG8cdhO1h5PVn5GnUP1FxlvWHYY8LzXTmAGK0lmX5xhfvKrflTqlt8D2v20/zmTnGx9oJAQ/BLVQyWpJrfDZvKbtk+/5b+Uu8Jcnaig2+vkmyyRxM/zdlH5Bd69XWIxzRBY7g1QlNCMa7bnXxYkYviiTGpO0AVh+zUJoGa1lYwwRJteBuy9OiZiWzkxQCHrGn38NLVERGEXiW0VUKs00sc/M4//+BzeDDX19ovoqYGVokiNQv9aXAWQM9hygekAfoSnAWLdzjkgL40AkhH6mKhxBlnCzQJU3xUMvY5sVgBv9GFvAtpYfTBZp0xtlGx4QPd+NCelRFV6iPKKmqsWAWwJla1jvXVvHCxp12lxPpbG/mfxBlLC8wodovQeS21yeGdYf8ha10aqugsTvNiTYoIjEUmDbiSd/uPjrZwGCcgEA9EXF8hAQ6H5qDAyXOQcPEtARi6xGpKtvB8ngYnv1rvhd3mNpoXXwJYGmT09Dkli07atZdCRpheJwhg=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"If await returns at all (i.e., it doesn't deadlock), it will return the result of the task (if there is any).\r\n\r\nYou can think of `await` as \"unwrapping\" tasks. When a result is placed on a task, then it is completed and the `await` gets that value.\r\n\r\nIf you `await` a plain (nongeneric) `Task`, then there is no result type at all.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"a4f56dec-bc10-33b9-8778-4a15ae7d4d84","date":"2016-06-17T20:04:43Z","timestamp":1466193883,"authorUserId":"disqus:stephen_cleary"},{"_id":"116137f5-c2b0-3b36-8f85-729a3b46630c","authorName":"Stephen Cleary","authorEmailEncrypted":"jaCGbYCZtXJGdmNs3P58E74uqTr5+Nv0d/8LkkUimExbMF2n8ZYZkuE4d2A0aKgQTyGiVvgOfsgwKccYQ8L05hPpdgwiA7l5a5me44LSiMbOuSTUJR5N+OH6PC0XtgeeprJGjdsaB8yl0XhxFh4mks067EbLqsWBxmDlXs5KeHPxb7osJw17aYJ+JkNsa8nI6LvosdEfubu3V/xx36Dt98jLGx0jjY1tLytR5+Zb0GdufUODW46Uxxc1YLgM0rF5RM/wu21z0bjKg5wgcFP9uLv+P1+lUsuh/7GpyOJaPM2+8x4uqqqiyawN9UzEsYvCcyaQLu2GmiSgECADqfQicUybMmZW5eYRebvhlm24DNttMJzq3ql9lk1wp7wxAyOftY7pfGkALwp0gfol53qlRKhQlYgJMnnF4812mgnxOSdQZ/5tes4VmOxW+4nkYuqTjzEN3jC2FhJvCB9EIFMUYiN/6WZIqao6n+DAIUMdfHLlDGXOEFTrVCkSgVPP0p1USEvEpHjkMJwlhJYoIFxFRLtCDlHd4uMyvMEoM1+2jXoUWnXeW5QeP3jacl90FVkTd0qAJ62DfJi1kzJ0vvGTfvc9JcvdyrUDuc/flIWfhZ99I73828Z2lcskM/xsr3j2b0Y8fMGqSMmWF/ynKT4M8XbiyQjO9ceqWnALMOp4uVs=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"It's not clear from your description (or SO question) what exactly you're seeing. The VS debugger will take special actions to allow you to \"step\" naturally through async code, which is why I asked about whether you're stepping through your methods.\r\n\r\nRegardless, as long as your DB queries are truly asynchronous, then they should all be running concurrently. If you have any warnings saying \"this async method lacks await operators and will run synchronously\", then it's not actually asynchronous and won't be concurrent.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"290d5ea3-4e28-3a19-8866-37060145d8f3","date":"2016-06-24T20:07:13Z","timestamp":1466798833,"authorUserId":"disqus:stephen_cleary"},{"_id":"290d5ea3-4e28-3a19-8866-37060145d8f3","authorName":"Chiranjib","authorEmailEncrypted":"mgmzWQARIRUUZb2iIFgwe7ZAYIhaOA8TjaUE/hrBfo+KdbqZhGYfxUFrLpn3bYGO0XOS8YKCIQOmFYLGCXuWICsfMzCkwSOuqeEHa7XtwivALa+Sw7eP/TJo0qwZMVNvhd+w8s/JxI/JcQut19yCCfbpoD02wi9nEEL/Sxg/dz1c8wdkuMugemWamQUpEy1WXGzoQ5QKEkM0pcb58QI9ZAyEL9MQJf0TrircaiXdr8LPVWJRLbBgTKQB/9UBTjAii1n2KI1LKLzX1UhKhFyOujvaRVdZ/tG8FwdSSgS2WXwMZhF/A5wIz+ElQvELv7Z4sibcEfQrEOlOLZAQriEQS3zmtg3qXy9GBqdgwGBemDQRc7u/fJp656bcpBvBt0YLF2hBXBj90wgjhNf6UtlI93EOnYnxQMclwH6Oa1tgoOn6dBvMQJyg/K5pwsDhV5gEt2+EkQnY/0eDVgCLWSipCy0/NORcxU2xH7vKs9pVbLgPb/ZwNdHTlSTX1eFvWxE0EgQtTPf4QBLd/YyFVlVcfiPxONZzQxDhjYDbati2RTPTe+llSJWBoI1P7cHioqeOoSUg/QlUBoypcboMRCAWLOvhKMBjK4d6d4L1ZtepHQ+tnihoYYYOhMXxAyfiIIzT+XXbIh2d/6Wfr5kqZNnbu8srnjp18evDm/VsM9HQnN4=","authorEmailMD5":"6fb9392412fb481f785a114073349699","message":"Awesome post . And I am eager to discuss a problem that I faced.   \r\nOn the web service side here are four layers : controller,business and DAL and DAL talks to DB.\r\n\r\nNow from service side I want to invoke the three methods like\r\n\r\npublic async Task<groupmembershipvalidationoutput> validateDetails(myObject _input1)\r\n\r\n{\r\n\r\n Data.Upload.UploadDetails gd = new Data.Upload.UploadDetails();\r\n\r\n var firstTask = gd.myMethod1(_input1);  \r\n var secondTask = gd.myMethod2(_input1);  \r\n var thirdTask = gd.myMethod3(_input1);\r\n\r\nHere is how DAL methods look like\r\n\r\n public async Task<ienumerable<aout>> myMethod1(myObject gmvi)  \r\n {  \r\n Repository rep = new Repository();  \r\n var _validCodes = await rep.ExecuteSqlQueryAsync(typeof(AOut),SQL.Upload.UploadValidation.getCodeValidationSQL(gmvi._codes), null);  \r\n return (IEnumerable<aout>)_validCodes;\r\n\r\n }\r\n\r\nI want to invoke all the methods in service parallely without waiting them to complete one by one . Only I want to wait for their results . So I followed what u suggested here ...\r\n\r\n [http://stackoverflow.com/qu...](http://stackoverflow.com/questions/17197699/awaiting-multiple-tasks-with-different-results \"http://stackoverflow.com/questions/17197699/awaiting-multiple-tasks-with-different-results\")\r\n\r\n await Task.WhenAll(firstTask,secondTask,thirdTask);\r\n\r\n var _codesA = await firstTask;\r\n\r\n var _codesB = await secondTask;\r\n\r\n var _codesC = await thirdTask;\r\n\r\nBut these are not working as expected .  \r\nThe breakpoints hit show that one by one the method is getting called from service, going to DAL, execute the DB Query and comeback and assign to respective variables.\r\n\r\nAnd then call the next one .\r\n\r\nAnd also as soon as it hits\r\n\r\n await Task.WhenAll(_validChapterCodesTask, _validGroupCodesTask);\r\n\r\nThe next few lines are not hit and the control returns to the invoking controller. That is   \r\nin my controller ...\r\n\r\n var searchResults = ts.validateDetails(gmvi);\r\n\r\nIt is not waiting for the results to be assigned .\r\n\r\nWhat can be done to achieve the desired functionality ? Fire them parallely and wait for all the results to come back and then only return ?\r\n\r\nHere is the stack overflow question ..\r\n\r\n[http://stackoverflow.com/qu...](http://stackoverflow.com/questions/38012332/async-await-not-working-as-expected?noredirect=1#comment63476795_38012332 \"http://stackoverflow.com/questions/38012332/async-await-not-working-as-expected?noredirect=1#comment63476795_38012332\")","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-06-24T18:19:23Z","timestamp":1466792363,"authorUserId":""},{"_id":"0ca47572-0d99-34e5-a51a-940a4dd4a88f","authorName":"Chiranjib","authorEmailEncrypted":"I8QlyBqln7IJw+dg+Ka3OpV4toDg91vJeTpqe1HFPAuhgfA5RJDUlfnaMeQe/xqof1/ui3T6AAZI/VrmACVAjQd7+oMsXi6A4dvFti1uEzJXp9HGhkwVOwXsDKcBBJNbY7Yy5H8lsPBaetYG3PSLtaQ250YQrJJlpqATKsJLetdW3vQ6JTjFkxR43oHiE5XSD95uiQCYvREl3zl9ktCAToKJk8TyvAQSsOcw+4RFSQQ6zEr1mkBJGAK06Yu4T1Y5duyDlwPnqGr9aWDQ8ZNT0+tCs9vvNohcWjBktMljnf/3eYGFU948M3bHPsJ5k268/nJXVGU0nIFKi8S1WJ4Xa5qjTX1gjAkjrvD47BeyBUflZafCDvzAvDigoslu/O2NRdj6xCq5OOnCQYZSdcVqMxTmbyWTq0zJYLrKl6gg/Qhb0hz+bri1mARggZubdTy7WlxHWdjHKfUmO51cG+uCRiEl10cUMWcTuz5eqzN6Djk5hCvrdHIQRV/KkjVTxHDx+ihdvY8r6jT4IAbLrJxfPtHotgIUKkTp/EfaXJAz+7hrmL26wma+de7tsCUL13fAw3l+hO1MHSKdfeLgkHeiupvUGRwhvTsuoQhK4FFDJiVf/az2QtnrxHkas2bCuQZAekOJlyjemEf8LJNezlW7b6XyEktm4OL3TaEHzeRJ/Sw=","authorEmailMD5":"6fb9392412fb481f785a114073349699","message":"I put the breakpoints .. for each of the methods .. once in service class. then in the DAL class and then finally in the DB repository class. But as far as I could see once a method is called and the method call break point is hit , it immediately goes to the next DAL layer break point for that corresponding method. But accordingly , should not all the serviceclass methods breakpoints be hit one by one , and then the Debugger move to the DAL layer for any of the methods ?\r\n\r\nAnd , the main concern is , Why is await.WhenAll(task1,task2,taks3) immediately returning to the invoking controller ?\r\n\r\nI have not yet got the results .. and hence I am inevitably getting null as the controller returns results back to the UI side ? How can I avoid it ? Wait for all the tasks to asynchronously and then wait for all the results to come back and then only return the consolidated result back to Controller , so the Controller now can return successfully to UI ?\r\n\r\nPlease help.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"116137f5-c2b0-3b36-8f85-729a3b46630c","date":"2016-06-26T19:11:04Z","timestamp":1466968264,"authorUserId":""},{"_id":"f2550fe7-c88e-317c-812d-fd4e6d4aa4a9","authorName":"Stephen Cleary","authorEmailEncrypted":"fWuCGgxqrZh4OdU1Z3LKbT42zCSIN+apVYfSUbmaJm5o3T4A4l3i6DgViggw0PrbcH8V4hlbztC2H410O7ZXabopw+VUqyc2LlT1VCcMJo4aebQ/kHVVlw7P/PsVot/qK3+3J7ULPyyEa8Q6CzOgxhpl7/gZ8SlESr7wjWXIo5T1pvq9tRzy73rDkhEaBvOGk1q0SxCkrUzw5zWYNF9kxZcyfNDmd6otwG5wzV9yBTrIOmSJ9Chwx4YgizgfMlbJ7jsjCGIV7xv3p2uZUlzzjh632P7Mub2HVHyNjo2tVH+AC/k9JXsu446s8f29IoJHRsT6VapwMBmefAv3uUVGtyg9JVZ/t1GTqaj5yyAeEsiV9nG/00L4EHAasxysbBQcL6CBl+7hHYW2IiRdzpmA2EQ5P7AHKXYNXNicrb0350aZVamp2hUF7NfDc9D4jBLrm7pfrShEYGqoMiZxzH0tyI0wmnH6Ios2ZMnwKAod8bsKybTGCvk2I8izOy5pcKmCMkcmYg9tN/Uedpnh+sTp0b2AxxsqMvLJ9VCDVyXH/8FfkKQzAouQXcll66RGqtLb0p0kqjcPZJS5pG9zJHoAzSbPRNwDQ/xlE9Tj/unfqPKi9KgJqu9s1TsORSgoz3QXWWdNbA6P9WAfSvVrKQdtHmZA4fhX6vCNlGtSJH4EO5s=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Once an operation is in flight, it can complete at any time. It's entirely possible that by running in the debugger and stopping at breakpoints, you're slowing down the application sufficiently that the operations *appear* serialized.\r\n\r\nawait will immediately return - of course it will, that's the entire *point* of await. It sounds like you may be missing an await in your calling code. Every task returned by any methods in your code should be awaited at some point - if you find one that's not, then that's probably your problem. (A good first step is to turn on warnings as errors, since the compiler does its best to ensure you always await your tasks. It's not perfect, but it'll catch a lot of them).","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"0ca47572-0d99-34e5-a51a-940a4dd4a88f","date":"2016-06-26T21:03:50Z","timestamp":1466975030,"authorUserId":"disqus:stephen_cleary"},{"_id":"5f80491f-e0ee-3ac7-93e0-278e9e846b99","authorName":"Fernando Ott","authorEmailEncrypted":"hk3gLqjQQxRhKBBKLvh/Db9pxnJh3Mg7KFR+C5R64X4LzINupCSIdEQNB14ia3+N2ErsViBpzLU8Zv4/KS1Zozt7KBLQoHGjMJYjTie+62ZxLze0ItPoPFbt3YkTKkbWf9xF/5iza3uk1yJHlQawafvD/I/BZt1TlAcHZmC2e/TCt9LLg1SAEj/qZIhFVu5IZLc5vA1WJcPdLeP+wRo+SAZ/ueNCl9RCJsm6R8AKTtgDmo61Ye+CrYg0ft/WAi0HzPIMKQZxQxUjjHRRGCE9tMacLueqzUNOf9rDhMseyYwqNOcJIWvrywF8DvLE7ndBvMzXmEaFEv0GO3JaVna/YC7rPk+vmbnXtY4EBpuCAIGvW/9buShTfL3e1wecVdHU0xwBj9LFnAeLnvfCPF4j3YehgEBWvS889f7esnj1nlhUj6Qeg19e7rz6gYuaQ+dj/T+Kr3cYzS3jUpLqpzSxkV4S0Lrh8PkiH7VdGF+JQOiuDUsCTGnbaS3pVPYHks9x5iKp/ZkBbNN1UijnqQ+dFk7q4oUR9wEg5s9RxG51u4LhiuRnhywl7jWFdMCUwOVtkL2fvdnqLppaWbRgoSTDGQE4+9nt+Q7R+0OkqdOKmUR4B9IR9H62wy+ASNj3IEiq0rkdKGwpZTVn9finil02a225DEzx31wSOCXdHX26th0=","authorEmailMD5":"7f6e9b7804a4802a1de4d87f40d2b3dc","message":"Thank you Stephen. But this led me to another question. How call async methods on a constructor, when I can't transform this top-level in a async top-level?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-07-27T22:49:23Z","timestamp":1469659763,"authorUserId":"disqus:fernandoott"},{"_id":"28640e2c-d533-32bb-a2ea-bbb220983e06","authorName":"Stephen Cleary","authorEmailEncrypted":"jcCqKyVsVJYAQQHziLVrM96RZRw73xzaOtOQVyOZCh49dfo3cg9h2yj2KE2f2HeTEr0y7jj8Mfm3bDsv4mFrOd/laF4l/BKCpnp6PegKjcFV2kRAGi2f5Gic1cRJyPCvIB8XC+zzfEjrrBx/+XsA7ORfgfQ0Tkm8J5Mm9dXdecla/Yn3xI/iJJOzArLx2BDtVKn1tCJL5sRoF4YqmnmF34n+4xGBkYqya8GwMId8YpXZAzZ1xb3SHNV8szpC8ALE6T0pbhjhp0SRr7v0WPtK+DiqsVlDDHGOK0jbM4nHagDdH3QNPTz03LcZAFCQV689RDUDpEQUD1CMt/AfayPWdFX96aG0Sn/hV+EuQwbP8KU1kj5yxph5PP/kQsQhoLqSizsUR0+H2R3uC3qp4pZUTg65ntYZ9mRTN1N7LIq95Li4qbgewBjA5xzrN3VTaCVF6s8TQcfzinReQ3EFxvTcRzmZB72ZotjVSzVXnNFLa6uCzI7aOszU4frKXHKFXwq1Xx0TqoW0p9JjdRiqhX+jC8FcpMLuSTg65nLHwqz+Ki+Q83PgtKhRknI6jiaiQQXIBMPANRg11OM4uPXtmo3tzb7T04tC0kasLi2HptfuniM4P2sPSzQKnpMp7tDo2XfAS8AvC2Vm2SZQdfJVy8yarlQoWxB4YSlhNsBYjNXvAkQ=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I have an entire blog post on dealing with \"async constructors\": [http://blog.stephencleary.c...](http://blog.stephencleary.com/2013/01/async-oop-2-constructors.html \"http://blog.stephencleary.com/2013/01/async-oop-2-constructors.html\")","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"5f80491f-e0ee-3ac7-93e0-278e9e846b99","date":"2016-07-28T00:41:26Z","timestamp":1469666486,"authorUserId":"disqus:stephen_cleary"},{"_id":"07135cab-780c-3f04-a634-790fce7c5031","authorName":"7yhnmju8","authorEmailEncrypted":"wRvSu21GRgn0+lfBObb+CNeMXKgy3mNI0pSLR5qXuUgDGq6P0/6ou6WMpnJ/u9pfAajRyajFPITTKE1wJBXpEzn4WlDGW7DaYRBJLr5DiQeSy+KH5wzSW5jtu0sSWdcxEB77LUefu5XiOlmM3EmI/54JWalMeGZ0N7lJeNxgx3w/J3PdctW90W9P4VZkYpAEItwiEpKGmwzIHm1MsvsE9fRsXhfdU0fKC693zKDhg9qhfCw2nnZjuKFULQLDRGv2kFRyGNqLk50/ZIABFiSedgtUGs46nBOXlIZRzZsoAuySEkqpkl4FUgYmz8S1b7agnSiDIldI2sw6sGwHx3UynIsY1HA2dpEY12+ih7k2HKhBEVUen1KdGqgmBUBLU9jQKrNQokj7w7kMJHCN5HTA4yef+bwIaKaxCFcTJvAeh2CBhh5CGJVAd3VjV7EEscBYwwnyp8gcpucEPy3GuNvXywIKaSPGuhgGMv8WhTmOHOCfm999R25Xo4mNpaHd0j+rIk8raOeSRft6/KyvuKVu7SiMlrjn4NReswS2AqF2z3rZmUxJvXGYL8WaE+cHnLOGeA8PXqRwFDl4nF9RBmJUxT5MVNvTfoEY+MHE5MdOy3zIUFdqH9rSb+SsP0Ba/8mK00iqb/IEi7UTNB/6ztAjn7LDXpSeZlqbQY1ocFltZjc=","authorEmailMD5":"b5cf36781e9edcd70b36dc54fa32474f","message":"Thank you very much - your posts around the web have been a great help the last couple of weeks. I think I'm getting there, but I have a question about handling mixed code. I believe this example illustrates it - ideally the database access would also be async but right now is not. Is this code okay for a console or ASP.NET app? Is it helpful, or should I just use synchronous HTTP access? It's async all the way (no Result or Wait), but potentially doing a lot of work in an async method. Is it bad to have any blocking io in an async method?\r\n\r\n``","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-08-24T16:34:47Z","timestamp":1472056487,"authorUserId":"disqus:7yhnmju8"},{"_id":"0a1e8f4e-033c-3250-a7d5-22c59ca85a62","authorName":"7yhnmju8","authorEmailEncrypted":"T1BKyMikn+1fE7Nldii6yljYY1yDe34TkguerneFePmZWmMbBRmFuFetm3N3iWfGYKCgd84l7VIOnKNGKRQt/DVtEJNB5+QoHmyeqvACT0jcUbzkMYj4m7s+OuBzfBZF1z5jH7iPgHjIWpA+1Wlw1wHp3UfoUIWY6PzR82ecIXIAXHF3xDb4e0GMijZgU6o4TfkeA0RgBn8NxwVCe8a3tae4eAplp9q+USpzxQSjheX3huBz+H3g8AJy+TD3gWFicorrbi1BFnNvHXHSmD7xRojbESClC1nnN4cfjPySVrS/3a4lspY/TWEhlNyJ8c3JINM+tgv+9j67vD2xn5G/kVFJ7+OdxQIH4xsHjxLcLLvFL5tbiUkcrjL7hBkjeQnOzF/87y4M/9ZsZ3hALhSV8MBkcjILjbso6Jjpedt5135DBwAv5BCJDTCy2JyvRo2no8WL0d0qNM5qL8Xv6Bz0eNbRZHrkgY829QEanB9MY528ZYbe0lDZfpduGd10gi5iqBNIVQs+ZplHKreKyq+q1aIo5Iek0m2sjlexV1Z2ecjjxhLmqo7M9guH4nnK9qxA8y48eq9ID1jfyS4Frrr3PqW+axyGp0jrrkGQD1qSZbeQP2iz8DA2ebMTCZhqb/h90aFAh2pV98Znf9QrAPPLdN79JRNSjR9Me48H52rVcqg=","authorEmailMD5":"b5cf36781e9edcd70b36dc54fa32474f","message":"Yes, I remember that post now, too, and it helped inform my reasoning as well. I doubt there will be an UI app, but I understand why that matters. Thanks very much!","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"34739fc7-bd82-37e6-a412-86dac1077d1b","date":"2016-08-24T21:24:45Z","timestamp":1472073885,"authorUserId":"disqus:7yhnmju8"},{"_id":"34739fc7-bd82-37e6-a412-86dac1077d1b","authorName":"Stephen Cleary","authorEmailEncrypted":"Rzj+3pJcuji7CaCvq5rXWl4Z4QwsqohLf/Kd6cJiGfEcLp7nH/OXZBJv3Izxnmulu3oiMGcLegSDKRTddLqYdQ04tgGjP6q4/SydvlweTvKl0by0yAsL6OZA6YzFz2goGr5s//i05yYiymGpylZeQUP2AuNK3162wxPUqef4AZWXcyq9VIyQA6DDvynzl3oWaPSgyQ7qXl4x/85v2O3Weu0vfrzv9iEGL302q/gwRJYUWDhz8+8EGn6G5BsoY+lYO6SqxwawnhfJvRJaSyTpFKb4K0L8YpsOsTleW60DMsMSpP9Cwphnye1hf8Ou3zvOU2pRmdzR1hrOw6GKwQNyaYOwq3cPdxh+ccp7OpZq7NtPRp2utQNxf9XZs0O49TtGx+Po1TJdLVNi7841IslH7upKvtNqkekWTNjEL1ltFrkSi5S9mKZ2JgpVVCgO98miZzNZiFy7Gq2SA692/6UEs+yK4VGiWE2ZD/w9NpuPGaRpm9HAcZ0APoo2poklzvUzqMIagvtxl3ZRNkp9g+SeJ7LCT3u5++7sCprlQR9OBhJ37EhnSpvY8a+MqzQU1Nr57s5o2ts7rzKOqsHeiy3po4WZ/EotidJa5fI94vhfJ+6U45NKKo3WzRg2+74EB9IqlGIvsj9azhvnNoHlq+NyiRjyw4Fs92nGqZ1GB8ZH7DI=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"> Is this code okay for a console or ASP.NET app?\r\n\r\nIt looks fine to me.\r\n\r\n> Is it helpful, or should I just use synchronous HTTP access?\r\n\r\nI think it would be helpful to keep the HTTP asynchronous. Making database access async is more debatable - it's only really helpful if the database can scale. But you can generally assume HTTP servers can scale.\r\n\r\n> Is it bad to have any blocking io in an async method?\r\n\r\nIt's not too bad; I cover this in a blog post here: [http://blog.stephencleary.c...](http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html \"http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html\")\r\n\r\nI would say just add a comment to your method stating that it has some blocking in it as well as async code. That way, if it's ever called from a UI app, the dev knows to use Task.Run. It should be called directly (just like you already are doing) when in a Console / ASP.NET / background thread context.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"07135cab-780c-3f04-a634-790fce7c5031","date":"2016-08-24T20:19:06Z","timestamp":1472069946,"authorUserId":"disqus:stephen_cleary"},{"_id":"4e027b4c-adb8-35ac-bf23-62d27d68a0ce","authorName":"paolo ponzano","authorEmailEncrypted":"TFDbcR2LvylD8YbvjxRLi6H1vqMb+wvZElAku7XXYvN5ykP9zX91urTqLm6Klwa62gSq4IK9xMMI1b3gvpjQPzHVIvIrzVu2zVQBa/bgiRMdYF2y+v6GxDyjynnH1+ei9dHPzDfH6L5KNJofkdLsd42gwht8YDuumba87s+rlRHE1ubtEbD4Ux/rEAEGQk2fbAJusGu/yO+/nP8Z2FH5UK4jQCnXVSgKKF7dwamKSF9NRyK/SbvHwmIycg3/6j0iglJKH64PelvAngpWwJUJCzSohfSwX/PsnNbxWm1D9aF4KWBHWcdNar2jBqLk/pve4PTUrSdnPVHjaaLS032+25F+D5vYYTcKiBQNuIA8ke6F+X839TF2HRoz4ijJsvqsCcy2k0jvyhDHShmPJphr9XKbArcngdb/mqFpyM/U0CerswUpAlmDwG+t7OpWquqfgUd+z3lVX1QCvsLAZJFgz4NQufrB2ZQ3FaEl498bdIquNaZWY1D1U53TGhJYZxzbn7pyS7Rn0ztSjnwK9nUoR6rcpWzIpoms8Xc0SJ58gWbl1ZXTxttMiaq8mVkrziFF1zAZf1o7ASBI6jMYAB4etRXqo3SDUcZ4XvlbY7fogPzYjK4tMBGHZbFitptamhCnO6nlA5VJYIlcOiirr23dobR+v/kpDz5YbXHlro4AaNc=","authorEmailMD5":"6a7ab997c42f99015f3cb779987ab080","message":"Excuse me, I've read your post and find it really intresting, but a Thing is not clear to me...I've got a WPF application that uses Catel as MVVM Framework.  \r\nI've some services as\r\n\r\n public sealed class CurrenciesService : ContainerServiceBase<currency>, ICurrenciesService  \r\n {  \r\n public override Task<currency> GetItem(int id)  \r\n {  \r\n return GetItem(x => x.Id == id);  \r\n }\r\n\r\n protected override Task Init()  \r\n {  \r\n return PerformInitInternal(InitCacheMessages.STR_GET_COUNTERPARTS,  \r\n InitCacheMessages.STR_GET_COUNTERPARTS_FAILED,()=> CommonRepository.GetCurrenciesAsync());  \r\n }\r\n\r\nprotected IEnumerable<t> Items { get; private set; }\r\n\r\n public async Task<ienumerable<currency>> GetItems()  \r\n {  \r\n using (await asyncLock.LockAsync())  \r\n {  \r\n if (IsInitialized && !IsFaulted)  \r\n {  \r\n return Items;  \r\n }\r\n\r\n try  \r\n {  \r\n await Init();  \r\n IsInitialized = true;  \r\n }  \r\n catch (Exception ex)  \r\n {  \r\n IsFaulted = true;  \r\n ServiceLocator.Default.ResolveType<iexceptionservice>().Process(() => { throw new DefaultException(ex); });  \r\n }\r\n\r\n return Items;  \r\n }  \r\n }  \r\n }\r\n\r\nWhere I can I use an async/await pattern to wait for the result, but in some pleces I used this\r\n\r\n public string Description  \r\n {  \r\n get  \r\n {  \r\n if (Currency.HasValue)  \r\n {  \r\n var item = currenciesService.GetItem(Currency.Value).Result;  \r\n return item?.Description;  \r\n }  \r\n return \"\";  \r\n }  \r\n }\r\n\r\nIs this ok? or can it leads to deadlock?\r\n\r\nThanks","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-09-02T15:17:00Z","timestamp":1472829420,"authorUserId":"disqus:paoloponzano"},{"_id":"4b29f3b0-a22a-30ba-a701-37d4c0ff7637","authorName":"Stephen Cleary","authorEmailEncrypted":"g7tImFdbZ2bT6flJGYXT20fWzx99ffeHRL+nMD8F8132MhGtLvg12JhvmwPC56+fGFskIo2bBb1fZ4Ii+wdhu0u19VjDYR92+02lQjaQcS5whSBBocbUskFrfheZtpI2x3LT2eckTWK91TokUmAO6wLZwRtFatyiy37C76jMviay/0bfrGoSlIi8A/sS2uPmRoXVG3knIPylSGsWwrK3xcGlsi2HW1PUIJKlDqJyQo+5HA2rZ56D/443ou6FZF8Pj7k7N/s4X6cPjTA1Jy2cZFxrr5b80n/QX7QQieVQSG5f5Fs4XszEvI2G4MoFH3srrWbcZIqNvlP7WbbMNw79l+Oc11e9dOHS3+kq4hteHvRWgt+0jnT19W1waPxIfFp+6KvQF5cRNplYoBMULYYq2EPJaEYUAudndvBjut4KwfkadghF1dS+0wqtxDkKysy/HoV0iC1hW802LaJHY9OadgCto1cFtms3WgiNOeWEeeCgb3aU9VFtlGELkf8b7yrwoYVWUWbFg2KIuFhIq16OG5uCNfM3aiQrbHTtvGwUMUrSn4+bKSIGCWZ9KpEWo/T7CgNIeDbVBDzXOztGW5h4cIhTHJLSeh2r7qwgdg6m1/er8TlQUAsluxKaRFl4mkkMWwDn7HO/Y97KlV9mJE6ntwjMFDE89IHUaG8R9DiXfkE=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Then I recommend you use NotifyTask:  \r\n [https://github.com/StephenC...](https://github.com/StephenCleary/Mvvm.Async \"https://github.com/StephenCleary/Mvvm.Async\")  \r\n [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/dn605875.aspx \"https://msdn.microsoft.com/en-us/magazine/dn605875.aspx\")","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"b1a145ac-5e2c-3529-a1aa-a008e1a340f4","date":"2016-09-03T16:32:23Z","timestamp":1472920343,"authorUserId":"disqus:stephen_cleary"},{"_id":"b1a145ac-5e2c-3529-a1aa-a008e1a340f4","authorName":"paolo ponzano","authorEmailEncrypted":"mAkAv+Et0V1oHvHyX/mbpdT+Q5CqxNjWK33bL4bAK6dtklc7y/HhSOKhvabER5vSbshLMVQ+rzXjPJUi69lM5X7hLcSfimwfSw3TmtYgz1m/Qprdi/h+Yq/pU8XlGmm/M0zXxkK/Y3LPSq9BZvXv7mRdzIY6LPpFE4GaiR1tRBtUJBSS3ZVwtS/HXbc5sisgcJ0Upm9ybpnN1jKzqFyht7N3GHUOZz5h8tb0DhZqm2UHMl0JuHl398yuq22jzo/wACTuYdnugfBd5YGeRR3taAmwdbORIhCphrS+MmnJFMbATS3wCylNy1cTiY0hZTuetCaAD2xXi2Vb/X05V7dRNs9OmQoXjIj+ficu+a4cgzvpSX89KlXK36XYKUgfw02Rqal+qxXaTPRAWYnYHWoOZ4E611o9EWIiA8uTAxm7qCrTzv1i2WDVomoGsqrmCeJ1tSdkEV79uxe+ynzPDfD8+DkG5TEMKGP+lUUmFP8aJjljnGkvxjaLuTaVUPnmRMqzM0XR2MVndk6fOXGcAqFMbCdNo82gXNsUn5wES83/i33XuU9UTd2nd/oDc6TuHNkEv2rq+wCEp3lPm4+2ZE7RNT2Dh0qEDc1FPwX7fkQMKbU++FcJ7kMjEW6/3O9GWXUA86aywNxyhNbSqRBCzm9Xl/be1ZtZ9zYzBD9Lty7NVxY=","authorEmailMD5":"6a7ab997c42f99015f3cb779987ab080","message":"But I bind that property to a xaml item...in that case I can changeasily it..in behaviors or converters no...","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"ceb9cdd5-2787-35f4-9b20-c4b673a2a3de","date":"2016-09-03T12:09:22Z","timestamp":1472904562,"authorUserId":"disqus:paoloponzano"},{"_id":"ceb9cdd5-2787-35f4-9b20-c4b673a2a3de","authorName":"Stephen Cleary","authorEmailEncrypted":"tpYwwMb3jReQaTYc+3FMblkzeytnUJPxqPJ9MEC4rmFt0TfBjC84U+I6lDeQJ7SQTHoMSU6GSXv7MZA/JlChJcQ3qf40taH/DrPSc1aN3Fk8nnMd1gqj5JMh3QrntdYBFFeWx00TM/iSuGk+RWb6JfsXU5pa07tEiF34dc+qqPTnaEUFjYlzx0cMv92bzqkBO4TA4ajLpfv1AH+YU7O6Jt9IQUOjLpe/fidn6ZdSid/6tiIV4qTMUfMbwAcFG61mOiwGPmpbAflwv+DsPMz0oM+cqXE1RszlAom/ITQDtoiq2yxFrvS/ZttflSVo6CATK9Oo2ncjDBQOPMjPbunW7dPpqN1phA0+XjeppxULNp479QICeXq7vd8RymDL8eArHF8HcYuD+slahyWGBySqNtM2taWe5AgWy+fbvL7v2xLKTd1SXjBtHEtopl5Kl07BOU2S/EjEeOK7PYxMNLsB2RHvEA+5uRFqfKaBps7TkfLcyHZdpiard3XUJTpNbfREWcUyAzkRG+s2VI+TBzpq0CgMwuYWbBkJHc3dd2L8LuFJkpFdQjJwmtPgiUY121bxnnPWRbxBT2t675I2zGowrhEEe6SqlXcGhMXgaYuOQXlYJl+z7jktCABc2ZoqNiC4lFq5uaH/8pJ7JxkeGkNB/82IIu2YKEbMOTwcbY5HitI=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"No, that Result call can lead to deadlocks.\r\n\r\nI don't think it makes sense to do a service call on a property read. That property should probably be a method. For more info: [http://blog.stephencleary.c...](http://blog.stephencleary.com/2013/01/async-oop-3-properties.html \"http://blog.stephencleary.com/2013/01/async-oop-3-properties.html\")","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"4e027b4c-adb8-35ac-bf23-62d27d68a0ce","date":"2016-09-03T12:03:22Z","timestamp":1472904202,"authorUserId":"disqus:stephen_cleary"},{"_id":"2602467b-9cc7-3338-ba3f-d12b537eff03","authorName":"paolo ponzano","authorEmailEncrypted":"ouR0kIB3IjgI6aN+rOaPbPtB26l4l+0QbKLOiXVZGgzYx02o5RnHgAyyzRPclE4OtzUXTi4Y8VEJemAoCKcwisZc6NkFUFSm/07nXXq8PIZF494yp+K44mSlWCNnwz41ch3gi0XkLRKychHayljnJjZILAga98R4WqiXlrkAg2eTBFO+TCPJp9J5ffASN7YQHReaw9+4YIBXGU18qTrm5xutsE+a86oUqf7UAGCcirsHeVl1qNuJGcBabReNZuWDZkvXektIfR6SVInQO3AFhhnW7wV8JqbXYXVhuUtfQT/D87+hpdSh9rvTH1P8msEyycF4ut/KvZBIN2JpkkYRBCJtodt4EFm6d47w4o0uZZSp7iclz3bybI4lkydyigwWoh9dxUqRhmE5WIRJWCuendL+r2IW8fsBN95/3xpQB8mTSQeovsLDZwdcjLAgmvMVWL2BJ2BsKUOR65u+8PL/0NYyG5pDRQZp/uNXjde0LzgKYYEj0f7cT1c2bqWhHC2F69Mf0bzLvKbhmEiYtkf1C23IwDZrMRNufji/mvn8cS3u3C7PqvFIGXzlhHeBiD3GdPuAbRZxUpWHqFbsFQ3ws8iTLjGXRcCsT1qrNTEeVJxUXmQ8u+mpOIKhNaO1g3xaTe93vjJf7Ng09r6+5QCI71FnvI1JWTOn0iYa5e8VDjQ=","authorEmailMD5":"6a7ab997c42f99015f3cb779987ab080","message":"Hello Stephen,I've read your great post on msdn and it clarifies a lot... About notify task can I use it in wpf behavors ( I register the notify on attached event?) and converters? ( how do I attach it since I've only got covert and convert methods?) should I care about de-registering them since they can lead to memory leak","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"4b29f3b0-a22a-30ba-a701-37d4c0ff7637","date":"2016-09-05T19:16:16Z","timestamp":1473102976,"authorUserId":"disqus:paoloponzano"},{"_id":"1e04dda7-8e59-3f43-a57b-e4f90dd2b4fe","authorName":"Stephen Cleary","authorEmailEncrypted":"OkYPS69H1CWVUlxsZWnICjZFmzvNEQOJW/jqddcQhS6s1p3MKcLRu76La7TbsWjKVG2kDzTcZhZHruO6BxE326VjMGc0kZ9OCmlA3+YfgyVryeIslj+S91w0SPP71okFrvEOK2pepNw0HxHQpgFoyI2gXo2vSGyZ1866wSxg6S+4f29e1gUIk5Na1ewJEB7QtarSFpG1ox17fYAnoJ5ZS/J3rqP79YMSB9j1pzUWePBOSIlpDB9kekGgJ6OkhKeLxAJBuoD/en5jUkjH6SiDgEoOFkdUskNcXKUiyTEvKrP0GTKg+kdzGSdUqa31X3JJpWj4j42GXpLWKoHz0B6PSUZvBaeWc54wFNvUwOLUbew9QncFtsCGP1y3qv0uSyn+0TccSxVL/nlUEaEtWdRLfLheIrjHT+YoCOQ8KadjigER0SV37Dt67SrDcGSHkBPrDW/OtfUm3yqVoWuk69K6ipIjpDQj7PvWKXUYBhXObl+sDFoP0I6dmkJfQrpg/6vD1o00o61kUn8fr8R/bIMBrKfwMEjW1bHaJjWvYu55lnRhE99ddYLKJL4vCjJAHNaC9XofUVpynvc1CUp0F3J6IJpBAMsImAlmpTeYuab8NflOGjRY12xHuzcQammnd0yGZZhNZ2pgsfpPj/z6/5IK+IgDTo6y4WBiU8C3rl1RCyU=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I recommend that you simply *don't* do asynchronous work in a value converter. There is always a better design.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"2602467b-9cc7-3338-ba3f-d12b537eff03","date":"2016-09-06T02:25:28Z","timestamp":1473128728,"authorUserId":"disqus:stephen_cleary"},{"_id":"94c52a81-918c-3d83-b4fd-6dddc828d2cc","authorName":"Jason Shuler","authorEmailEncrypted":"UrFiQ/Qbb51OX24e2RGbo9/+dOr7pijioqrzYg8g5sABQGHGYtoeJA3m+o4LuM7AXev0iugOOB3iPdh4A/pNzU8HKT28Oxiw91SYeOdeNYDHblWC3ifARGBLDHpnYW/3TBv8BcTq1Rjfmj1GB1KK2H3GbHEx/1tztq4aGgg+6yJj61M2LgsFCknU6vcUi4yoaHdQFVaq1HInsSLwdPg3uOgwOuKdkCxHU+lXbURXeVaIfG9Ob68igGNulnE4LsVz/IVF/nlbNlN+ltWVDV0jMW/0369NIxnwB7S9Dw/tgGckMDpEn6JTdXWmEj+Kn9wICvN5Cz1uIXdiy7oBtczAs7oFMMkAgypcjjPCTyQb/x99Jb6JdDFAt6kKyDCQulP6n6xziOjW9Dj05njxx3ykeML+Hh9nhYDugKot+m/kAGT6anc1HFZN6lRNW5g17sKNxOEyJU8aT1FSVv4I1GibMYVDDWe8Yq7dj2uqSH/Z7ZUCpukH9Dnt5ZQ7ZOcYTFyTwr896WnJPCO6OvyKt6s5fTu3OX69utntu7SkQVhnHxkrDbFOHokoir9JcZ68YoZJ4wkPXIF20KOAqHJJUWzclq91JsIyke4Ho5BcM7/TIimV3rKdTTw2t8h4xCrBoVPcOC/pJPnENlbhyaGMmGVWz/TNnli8OqrRxY+eY/3Jj+g=","authorEmailMD5":"54072bce77fea3110f906f91a705fa81","message":"Thanks for this very helpful post - I do have a question however. I have encountered a situation where I have no control over the library implementation, and I do not have the option of using async/await. For whatever reason the library authors decided to remove all the synchronous versions of the methods, and I am implementing an abstract method on a base class that cannot be defined as async.\r\n\r\nIt appears that using the following avoids the deadlock:\r\n\r\nvar t = Task.Run(() => problemObject.ProblemMethodAsync());  \r\nt.Wait();\r\n\r\nBut I have read that this may not be 100% foolproof - some people suggested that it still could be possible for the task to end up on the UI thread and deadlock.\r\n\r\nAny ideas?\r\n\r\nThanks!","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-09-07T19:24:47Z","timestamp":1473276287,"authorUserId":"disqus:disqus_Tff2hDjHfb"},{"_id":"4226db98-b543-3cb4-bf1a-57dacfb4ba52","authorName":"Stephen Cleary","authorEmailEncrypted":"Z0qhIH6WO9czQGT2Tmq1UG7A/gzbi6AbUQyNwrQmKBi5AiC9/lBqTeTQlv0WvXyFj5E1E9LFDZs7ULdIRRPIj4auAesGDHv7naoNKvwJGbLn60LzM7M1n0NDgI7tuSZPGTUYfO/6GC0BCBYGEa7P8uSRKqLEgstcqh8FsPVSiu5dYKJr1+2gDll/WR7M105uETMp1Mmg6uzNUrSd3RViHMCY/7qmWwM1ea/CoSz4wUP5IOQS3wHOS4+toLaOLkFtKZ55BVbT3Ab6UjSLy4WEtlkvWvEAcCaFIqvJluDfEqS0XnPDd1s3WP0SoX84y75l9nYGx7RSahwQuGnB98YoS3GlBnMRt35pvSl6ChK4AjDFkAvihQgoJ/yJcpOf6KlYRn7U6l/Z/EYLM487R5VqJZKsnBPr7A3diZ8ieV7nsv71yUFI2xJDRmsgcyUNVy6KINARYURZPhxdM/ovKg1S7kTzjqUm7ama75i2iSkm5uA3fLPZTaoPAxlATH8jBoNfJsMcvCP4gfY8+hibLbhX2U93twkPfaJG8CnO90TPCgouqMYaVZxnd+6YNE4uoI4hx/Wxk5P4kF+3mw0EM2gLl0Q91fHdsHVeYngueFTPSnxFji6FJ6Z291exP7G62dIOandR4Ny5dwlcHtvxLloaz689HBqjXLeKgQY35FahEhA=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"That approach shouldn't cause a deadlock (assuming that `ProblemMethodAsync` doesn't send updates to the UI thread or anything like that). It *does* assume that `ProblemMethodAsync` can be called on a thread pool thread, which is not always the case.\r\n\r\nMore info in my async brownfield article: [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/mt238404.aspx \"https://msdn.microsoft.com/en-us/magazine/mt238404.aspx\")\r\n\r\nP.S. Use GetAwaiter().GetResult() instead of Wait() to avoid the AggregateException wrapper.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"94c52a81-918c-3d83-b4fd-6dddc828d2cc","date":"2016-09-08T13:23:50Z","timestamp":1473341030,"authorUserId":"disqus:stephen_cleary"},{"_id":"2490bea3-46b3-32ac-b94a-befeada7ffd2","authorName":"Chris","authorEmailEncrypted":"ZRkShJpEo2boYkXZ0akZzIomfj/40tVFx6mcXfVVjHLWiCl9GYTjOTxQE1i26ssbCi1hH2aCCLgWY1gCNVgPyUY2X27Hy9wF0IW2rMhbFm7bf0Exb8ma1FNmhGBkaAtn1dditjplbg0mCbYGo4ZREaEe3KGe/gueiKnmwphWwFDh3X9IM9eX3p7SpqHrkS/dt+wdmvu+RCQun+3+b632o7Qf6RXW12eJN0C02KalZpalgK9Ngm4dp0H3dkJaicJAOmETD9cEFz2W+HilO8WhutvXmssVq/2pVYwYPk+cSubaVGM/wJEK94cYYC/emtjipwBiJivomQqRrp4Mj898g6g6I/MJ+6VgHUCY/5o6EqXJxKy6LVsYYPxMOsYEyEbTlkdYUA4LV1bW+w3/d40ofweLYSocbkxDomuXiz7etVKhb1+MBSW+mq3NMi2ZaWp6YTWtiu5BsZ4mdpC9IHJ7eVDwlpYEkRK1OpbHNoheFA9juczAY5HgIsc0yetceb6dNbZUVIHjAueYqVLurLq/tjAanYBft1vl/QCOafJNcOJIT2OwOCXohKZpruxjN2SmOg0W9qhpHBsgDLO6j3Pi2WEvRbytnMxYQEcPT3ifwgI8DyP86S064ZoH3gsBP+pL3Up4YYAZIaKBYFEQgpYZ42U+Lwk6MG3YgAlklwPEFP8=","authorEmailMD5":"ef7d53197de61d61cc22af343d2a6be8","message":"Hi Stephen, thanks for the great post.\r\n\r\nTo develop my understanding of this I have taken the ASP.NET example and put it in an ASP.NET Core Web API, but it doesn't seem to deadlock for me. Should it always deadlock or is it just sometimes? Am I missing something? The code I have used is below. Thanks in advance. Chris\r\n\r\npublic string Get()  \r\n{  \r\n var jsonTask = GetJsonAsync(new Uri(\"[http://ip.jsontest.com/](http://ip.jsontest.com/ \"http://ip.jsontest.com/\")\"));  \r\n return jsonTask.Result.ToString();  \r\n}  \r\npublic static async Task<jobject> GetJsonAsync(Uri uri)  \r\n{  \r\n using (var client = new HttpClient())  \r\n {  \r\n var jsonString = await client.GetStringAsync(uri);  \r\n return JObject.Parse(jsonString);  \r\n }  \r\n}","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-09-13T02:41:32Z","timestamp":1473734492,"authorUserId":"disqus:disqus_mGiDRzy7cd"},{"_id":"d760cfce-e6ad-31d5-91d2-4c2972ac62e9","authorName":"Glushko Dmitrii","authorEmailEncrypted":"W02RPfRP0DHW14iysBQRcOdzz7dsCB4sPmYRPKMhjBK6eZtPwKG0ndHe2bz8/qVOQllGCldYM5BQz6evfbnQO/1o5Kcic+fJiEY4aIIgQmy3oEHivfzBjUe50jxyorsRMycXBIqIL6nbzKaTAsGdbKsnpJ6jRFGynbJpu6HKJm40nIb543JnZ3ak58sOnNQi2KJ9PUt1cDDunus9fSpIhZDnSEUs/G53Rc+BamlJwzW3/eBP39ifeZD+aLgNVSkfXXNxyawWxGCrqCeRlZfvZJAT8+dmqI6yBZt+bNJPSA4xzo5vjAAtKub/W9ks9y9erX6oeQ01OTv0sWK0vsolBQ3EYjoKBDE3Ve10Bj7hgfUVBDJv1TCZZYy5GAmIRWN1jmsZvB6M8X6dYx9KEarmbJEwAIwMTDm+Ic5E4L93+MKiHdWdCCdLkBbMi7HeQV4DekH+mZufTRghlBPUsKNJJ0g3PmObtFVgVFfNtm1RQFmGwyo7fXao9g0NSRPWELxr9Z6GxIGZCslmhFRjpPGKDSysLruW8LQnquTUA2gHGQf4E67SO+iSZzWd/3XbGTouZVT0kmLQ5E9MUmeRtUDGiiCDejTk01Ze6srNuiS6vBj1OTN3ZhA9aM3Y3R3aztbpYQupsiHDqkVXlYjT43mdC6R8+vrMkWxotrZVuPqYZTs=","authorEmailMD5":"0c2435c87cdce899d5ed83562c8faded","message":"Hello, according to your post I need to use async all the way down. It's not a problem if it faces page event handlers, because I can use RegisterAsyncTask and create method with returning type Task. But what can i do if I face overridden method (from external library), and that library doesn't have async method implementation? If I use Result then I get deadlock. Is there any proper workaround to stop 'async all the way down' and get a result without deadlock?  \r\nAnd can someone please explain what's the problem of using Task.Run(() => foo()).Result ? Because foo is calling without context?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-10-19T13:49:25Z","timestamp":1476884965,"authorUserId":"disqus:glushkodmitrii"},{"_id":"7a5c3eef-13d0-323a-89fa-da63d7fc9c99","authorName":"Stephen Cleary","authorEmailEncrypted":"pSRsTokfAD49SXXH8u+wSRlsp2MrnXdmlDYbkfvW3VbMhAqMCH4PGO6g6FPm1eZUu+8gGpFCaEIXuWRNTH9XoV2e6db0Rqq9xVCgxd1mm7PWKBYtzTmCHZWvlymdyFpIcrDwQFe40omrYcHxiBxuds5c3++Px9fRri/VRiVLSOYHlNUtcjrTxUuvPBAioaWmzttM/1o/EnT3KhtDDT5c9EVemdLt+pVfsbQNMsoOEbq8qeJPU7XmSwGPfj36/uAY0pTJX7cBdAsVNuOx8Sors1aQ4ChchQ/3nn+LO4OYdQZeBeoT71OIhtiWPNHE0NOgGOdyPskFavtLc9aooX4lLWGBA98aawTakUEw/hgo487YmBG7D2RAjBfIOn/dkoZbXniX+Wt7sHiJnHAGBrofHkTp5F8dg0/gw2RlkYiW6eSk0KLtDLc95jnBufqKgd+8WKSHNxsCr4ZQxz6M47eJbhc03tsQ3gL5ajOxFCiGpJ+AGWj64z2xgyhEUN8C4qgLm7E3xpXjKFhZ3YHohNhuo4/xJJVef41ns7EQD2N3GtZcdbgGTSTxFtMjjX1SNwrHVj5JZ94xRSD7mPaQAuN26cGCGC+eicv/VX7N5pxEfv/1hxfUUD2BLj4eZ0LKqkHkCS9Rh/4Nusc+x1hjplWi8Y80jIyTFACGLzMrQKXgaCU=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"If there's no way around it, then you'll have to block.\r\n\r\nThe problem with using Task.Run on ASP.NET is one of scalability and efficiency (and, as you pointed out, that the code is run outside the request context). Most (>95%) of people using Task.Run on ASP.NET are not in your situation; they just want to \"make it async so it can scale\", and don't realize that by using Task.Run, their app is *less* scalable.\r\n\r\nIn your case, I'd say to first request asynchronous support from your library. And second, use the thread pool if you *have* to: Task.Run(() => foo()).GetAwaiter().GetResult().\r\n\r\nMore info on \"brownfield async\": [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/mt238404.aspx \"https://msdn.microsoft.com/en-us/magazine/mt238404.aspx\")","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"d760cfce-e6ad-31d5-91d2-4c2972ac62e9","date":"2016-10-20T13:34:55Z","timestamp":1476970495,"authorUserId":"disqus:stephen_cleary"},{"_id":"a56bc6f8-5c31-37f8-bb36-e97917326f80","authorName":"Glushko Dmitrii","authorEmailEncrypted":"SgxpMCH2Rf89kSM+27EMS1g7E2e0Z8opj0GMVcIwG/8ydhIn3fD8nlXshQd1vwFoRoZUT/FvoPXR6iwpPh1guw86CURsb9nhI6LkOv7iitT6B3Y4Z8Kkrsnod3w/fBdMFuTiqWCxqvXoZ5z+y4mQPms6C2LmXEodZyd0lRj1g1DQ+8dT40lgMFfd2IGGGS9yn9Uq5IpKLsGYStLVnyBDjbCN8YLx8q2A2CaEXs+waGRMwoMc+n0Wy9dMIjz2ltqUE+aKskfv+jD8kFV6An2ZYEWtqmpemAHENquC4tn9uORCTU9+2cX+L5UNmvdnNY7+C6xjhGEDDCGx5wSm1JLRmsExgphxzgn2ZyPGXmxqKdMWV/42YT8Ju9dMPmeWwsn8mTgc5zGD8eiGCVrfWQmjiZsZ9Fia6w7HolaQBJd06x/VdSlh40OmQ6Paz4RXFSFrC3w1IrN+fpbHPLz7MDNW9W3UUC4/GKuIY0N/hl0/cYWoOajRKN5vUN+HZ+TCCv3yyVqZ+KB1sIgndbAx8st8zWbl0L4/IJG6AUMzUQ5GuI4xQRNM8DNEHTagXaIwNXTPxtFkFRAZdeGVQZhH4wXSe1egWCgTSpR1AOsLxX1Sgy8wC6jtsc/wVWTnT8pHgES+EgphAEJyyzJ7UkJI+sHO42Ta4J1kt8BZotF7EXx3sqE=","authorEmailMD5":"0c2435c87cdce899d5ed83562c8faded","message":"Thank you very much, almost spent a day of surfing internet and came to the same conclusion. Just wanted to know if my conclusion is correct. As I need my program just to work (no matter async or sync), I will use block for functionality that can't be done async, untill the library will provide async support.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"7a5c3eef-13d0-323a-89fa-da63d7fc9c99","date":"2016-10-21T08:30:32Z","timestamp":1477038632,"authorUserId":"disqus:glushkodmitrii"},{"_id":"58fdcd04-b518-3b44-bd61-6bc5bbcb89f1","authorName":"Adrianne Cris Ledesma","authorEmailEncrypted":"rGhP593/u81IKQKGkcjggWUroDWLBsXz4jvOeNt8sP5U3mPFjQkWbyh0UtBf9A39PGEbhkGeM2Rk44UKdEjD3kartUsqLDtZTrSj0qBph5Wy+KbqN/nsew/YbHgto5wvMATwft3p6W1EpmFDQngM9KLpRKb7aHDtBjIM96QTk+THM7FZuRRI0/siDXuO3GTNaAHjGRZA6V+W49qhESTYv02F1h789gx7MXHR0Elv0YSViZTHqoZqwYgOk9rNrg7Y3G2yewwtz/x7rgYA1y84YrNxq9TaAIMHgRlxTig+mfMFCP1rmudEaF1WljIVk6pJI3yfWOo5zmpW5Q4tqem7vt7YSZsIaqgJrHtoMLqzXv7ZhCSaob7LIOtx8S74Vuj8Adb2iCyuMmTv14+qIUCaBdYGCdlcUmA0AHpSWO7oqK1eRXw6GSl1WwaEgzXOpvosem+PlGAhBgSndyubZ27cjyuoL5nMePgcQraS48/4LcuRn66t32VV7XMLoZ23DP/OkkIQkHSaP8ZJguLqGUrziDKOCl9zDJ4YJg3BMQwT5jrwIs4fcgL4VYuwU20kEOiuOjz3Vp6sns8Gon1rcuLXx3ESYxx5k3xumoOZcHXmT5ZsFFzmDvlC3O/PStrzsqsqLWWbvfwsi6yw1I6MuoQBJN4Jfgrc95E+uINw8xNhB6s=","authorEmailMD5":"bf6450b2e9ccf089a96c84aebd6a4da4","message":"Hello there, what a fantastic tutorial, I have followed every bit of your instructions but no luck at all, it still block the others. Can you help me or point me to my problem in my Code? I   \r\n\r\n``  \r\n\r\nr\n\r\nAND I Call it in the click button like this:  \r\n\r\n``","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-10-28T03:07:56Z","timestamp":1477624076,"authorUserId":"disqus:adriannecrisledesma"},{"_id":"388c91e4-8d2d-3647-90c5-6020306e07c6","authorName":"Ryan Griffith","authorEmailEncrypted":"MmXa3q2f4BB0Gmohw2j05b4HW52ZaCDI8wD+ceGEJzxPX4lvXtyAobQOATo57GjhaXv/SgaoiFqxIcScdVW1EXoaNKMgBcdqzL0ds0wwqyI7svnOTHZPW4UhZDSelOdp2ewg5817rHoLJpJ5I+Tq66c2r4yyFokK9pRQB9VG8doKV3MIXOkXfm61lT9zNFkiMc87NWwn5T4FImSGRYTUJ2RZ/NzrqcJj5miGFuh7/7OdojJqXbpPPXkkDt8Lk6BihZaQ+EI4LKC5VBe6V4Zk1U7/NfSxypYMSH2sTK0R8KE5l79yzCE3U9EAy3moW/TLc7/Xw1PyJxrdsxrOMCI4tgrzNxBz+7RpMyGkzu7J88PRFYtnBYXhBXqQ5FxrJl4VTD29cwuRsKuVslNWJmE5Ptn89g75JW7hGJwiGCYxlho0mnwbFYfgVZt2gAVD7zgmmZ95PBM+HPUjxaEPeyFLrPFVtr2/1pYGAOvuZ0xD/sRuOlajGek9pfobeo1LDCJyx/9xxZ69i+OdX+CNu5YNGpo9K3Kf3mEkhJFviyLuGZJ58hLm1EBoGmbK4AhHgHlHeccY3WSt7G5LfF+lqfZCeqSUzyEqYueM8qSgwQrAAaME+Ys+4frBfCVGWP3sKuVOrbtbMCENIkQN76w1voSEvLeHK2JHbYvgfreI3YqFx44=","authorEmailMD5":"93c1ca5d997fbe4cdef0b1bb074d152d","message":"When would you want to continue in the same context (i.e. ConfigureAwait(true))?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-11-27T21:22:15Z","timestamp":1480281735,"authorUserId":"disqus:ryan_griffith"},{"_id":"889760b1-0bb7-3db8-ab14-c45215631a5d","authorName":"Stephen Cleary","authorEmailEncrypted":"ciOvltgReb68w3zCfEDU0C3iFjQfduGpe6ZBP+vNF1+B5gr5F/XlIT9Sq/lKqqtOL/mlfH08Dgn5AMEjUlASaJbtGh36v6qc7VFrhpjjWwYYj4L8hoVuOJF7w+U/C6o+JU93d6iLCYO/rUtv5LLWM8dQUiGqBo6CJwqrF5VaFLlrEwBLb07MxLDwRnII/gBkLmGUMIkKJxj1akftOmNz+UtnqWAspRJzLdAtDPDP9p3LTHhPshhuBNW1kc0PRbkSk1KnsbfZ6hdHxc4PQ1qA1dTAgVnKYGQTtsq+fRbQInOYEj2dBkfgMOVn1A2wc8PCa2WlqMHQdeDTR9KE4DD6ovcc0IhmT7Wsh4eZY6Ca0S3iOzIjR4Fj9asl2QS9+qIPUWyx0Ngmr0F0fgz+e/tMe0WJX33qXh0w4MLoL9hBvZCk57Lm5/CsuXz2unpzMLv/6+jC8+3eXXyZXcJMd7TkiPI0xTVfYB93hwI4wMfTw8t0DltngrTOdv7e0lfk66d+EyXmduH6me3YFlcTOdum8OJ1dzbcfy2wCS5lwiWgOWZEYKLgHxhXAMp2zJBiNG1DJshfiIHHAixfejLFeOGqb1XLn7+IEtPy1G3reyrPwRPmJxfJMJ/YvkY9o5UcSVS/iXjmhtOlkxOG+05gC7TB3kLCw0scRpVrUxIEfecgFDI=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Any time that the remainder of the `async` method needs the context. E.g., if it accesses UI elements (for UI contexts), or HtppContext.Current (for pre-Core ASP.NET contexts), or implicitly assumes that it resumes on the same thread.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"388c91e4-8d2d-3647-90c5-6020306e07c6","date":"2016-11-27T23:55:53Z","timestamp":1480290953,"authorUserId":"disqus:stephen_cleary"},{"_id":"5000b299-878f-36d0-994c-454e7d8ee7c2","authorName":"Arya Chuodhury","authorEmailEncrypted":"G6nEST/0RUykS0wR/qvvjK/C0ddCiBlBUyHiFwvBwWU4A7EPnzoYR/bHQrdy5Z+bFiN5bQsWtTwJKHLqLiTvy/Q/paw26fW5SNS3UNPG/dpq617qyNeNLjzmEyBsxwBQZX/+li03A5/r/D4VyDeuX6PouIKqytewV3QP/TkuCbKSbPWNRHyqWg+7J2KZh2QA2UDblRkNlzM/893h3qxRAbJLraoN68S2lcUShSHEDHCU3eccPRNqRqyR5uOC2T2n44Ene+iyJqGogBqRnTVVNahwWKxDYx16CL9MxhzoN8TUE4HYQlYl7ptbr2QBZWNXZvJJuMoSv2pel6IfkUkEGdS8uQqtpp7QZoTkJ3kpUm291lhFwZHeTQy3p2CWtnZyq7D8FrwLGrgmtd2IeTzbSPzztowqYLTabx+36XudGKuQ1KNpe6Ee+S8rsuJd42awhyfhWAP/XTzWLUEc0Ygr1QeSkt4ZyzJYbECXOYOKDysJykJgVmvNjclP5XU/PHzum/D2rwgHGrPCqneSkjUdNo4KuXvR47aMxvEQY7oCw3V+Un4UemwguSiF/nc3gISqlR6HbgyQoYQDemMllZu2olQoV1yp8D7+ONolHBeujYNhJdkU5bDBc1MOr3HL771NXwmSfGRDYg7Z8ZaiVDzgXuPgI6/BYjzpUu/aJZ+B85U=","authorEmailMD5":"17d6b249f2320c161be56a97b2056c58","message":"Thank you Stephen for the excelency","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-11-28T02:23:17Z","timestamp":1480299797,"authorUserId":"disqus:aryachuodhury"},{"_id":"a460900c-1e60-3451-9812-e44f8eb79803","authorName":"mkazem","authorEmailEncrypted":"TvfpalbQK/l8dAopsMrPrSdGhPGtaL9b1xTL8Ja3hewrfrm4emoW2OrK66AxuM8ClM+1HpgsdVRgZHQYx5lxyAOP17orzFNDJAls051bbFTOsj3Jbv51cpc80FeyF/Luy6Dv1PbJ2Y+KWn6uVY6pXXXMK1Y6IOR9WAW3eWOjiZV5mX+XEhUUbOYjPkWWUct9RktYVoY1kCBqtGN+BcR2qMP/CH9RlU2U4od9UCDB838XvIihef4rv+ZyfKWC4VlXpSTaLvvmsauPEG52iQYHfLG391k9RmEOhh9ByPbF0rfWWHAvC7OJr2EniMeWVXji1YvE4Ccvn+i1/85ekNggFVzR37DNNpW8fz5OXiagB5at1m4VzbB53bQvITJ3Xkvtn5pDiVop/UCUiZRWh6Mf+rwBet6aPFsAvU2jhDJY3cr5v4GOf2kctZnQYjGXqIvHfca5S4b4DCDVvTJ/XQNAtGtlrhtd/yqMsVG9YuG1MroaQbbj2olTu9/7hV8+hXZxnrdb+7Jz8KMoVi0WcBYcvnlq9fgyEzHB4MikatEYilnTWX6MYhjJ8Xg5Ytd5laHXIxWHyY12EKvV9arRsVsxWCtqW6cF+Btf9aMjBJ669vVXMT2hR8/Q+kqov+tzXxXCnF152QDCQnApRR2rA3jhcmpQJChcgok/sSRJyuUTgqc=","authorEmailMD5":"9cb1b47c5acbdb064d4b11181de78162","message":"Thanks a lot, it was very informative. I must read more on links you provided.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-01-17T16:40:48Z","timestamp":1484671248,"authorUserId":""},{"_id":"de64cb4c-6cc9-3cd8-9a3e-e6337cfd6fb8","authorName":"Ramon de Klein","authorEmailEncrypted":"MdyU4p2dyyvqZDy17uDtejeEBwL6NgIRHHivbrMWeVt9iNSRgnN0Y3X2HXFANWJls7/E22urku04EgPmiNayB6xvu6IrRgHbS2NVVLqJD/E2iH/PT16UoNBDHzxkdTkwOyYtd5sYxUnnWq3j5d5OvakBM/dBrOp01BDRalEeL03WKyi47S6fWwjPnm2LYMfa7FURQwmV0rh4PrNWrX4l2bSjDUXaFMz4euZAeDMleTfpPGc0FhSwZRea1SA31ThFYwxSR7RwVOmQuMhfJVn/Z8RNm766AnFphCJ1vZhG5DR5GAFD+A1IdB3IeUCt4k42ujNyOeQtX1kuHDVz8gIiRqYwlw3WX1UrSCCM6/tOhLhhmBPVXEgV6qAd+pN9WkJwO+mUivwpegfE/AkU3aWRIctwiKw0J3GAcsOhNG+xrB6JXiIKMNnN8EOontKUlJ+cb5PC2Vfj+mwzg7a42vk4snwyEaLD+1pfaWAwurq86yQIbbc/uaQxG8CUOqjIMyHyM2wfo5V0b/9vxXIwNo9U6sM5jUo8Ahl4XzLuR2mmQE1+TE5+whC+IJk98I5FueR7Ix1YSkH5imUEdNUwjNnqz9MNJ7caBPSAi5IGvTLV8EVpqTgJtWFg6+ksZUnbQPxsctQq0TI+fHzg293X2BzzcK6gjhHX07vlObeGdC9sMi0=","authorEmailMD5":"cc4787d42130bb9cc4070f11470139c4","message":"Sometimes these deadlocks are very hard to track down. I have created a helper library to help you track down these issues. Check [https://github.com/ramondek...](https://github.com/ramondeklein/deadlockdetection \"https://github.com/ramondeklein/deadlockdetection\") for more information.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-01-19T10:35:52Z","timestamp":1484822152,"authorUserId":"disqus:ramondeklein"},{"_id":"075d539a-7b06-348c-baa3-07df93208f6b","authorName":"Stephen Cleary","authorEmailEncrypted":"k+2soKselA1CZ07Ob3Ox8B7V7wXsw39s2Q4CcD/QEOEVbWhGqzQFjxrQcPrpNkYlb47XaOD2SJ1ttbZGqF/H2E1zxb+h2sydKWi9pMjUyu078QiJUItcRWvxtRjUNQRGR9bKWf3Dz86o7EeVDyeriHkrbUEytmZajRUr6uEMU0VOWgcLbTzVEUNVtrKe2cG/BLzIRMWskfGKrkpmYVdB/isqTm6Hsf+lwiH4261e3FLCa2IWFlCbmbQI3El/pR7AtFui1815pyj+ZR7A8W+I/ONW5vnUUqQ5aLiJPXsUobaMVuPZonBz+eNcbIl6SQ0tZCiSKY8R1QfhOdjLX+OGl1mCqyfwmAwBpwaAUAFfMQGpca+zN1e5Yabv325x/jYG1cFao2bDXw2lBBYKWccLNOx8oYcWlmh+ABPCyD5jrScVqq0edx1Nr7nwiug1zJBTW6oTg92AIB0R1K5zpiCFoDguWQ3lumG2ambs+fPysE/uNUoysSyR5Zl7f4pQ/4m6GfHX7Lku8dFJSsC0HRJRaFlDHscMBkAe3VokQIC10L8s0g6Ux5ZQ/sU/8oOWFCktn1S9oTswAwRYSU0osnjx8Kga2DP+ZBOxcWxH2I70Z0ARz095P26peYd4P1yLBLL4rr9aZGxyT98TRgcAG+dMWck+yfkFOL81KcRRyQLARrY=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"No; it's the blocking that causes the deadlock. Wait() will deadlock for exactly the same reasons as Result.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"b5efc269-3519-3532-8360-98520e305ca6","date":"2017-01-21T18:38:58Z","timestamp":1485023938,"authorUserId":"disqus:stephen_cleary"},{"_id":"b5efc269-3519-3532-8360-98520e305ca6","authorName":"SEO Slim","authorEmailEncrypted":"lcB0OiHHwDrx+7y4a9UQjLeXLxN59LA/+vyqsKQ04I5jzBy2H+a1sCnF4pNH5yBU1mYEjwFok7umTwY1W38m+045uY8KoT41lqzoeFZxTwD1wE/XgN46eg+5JD4B6udFJoVmDarkrHu8yZBCrAbE4HWfQ19bDsjCBX4vE2z/diblzLTHf5h9vZ1Ymo7j+lxzDYGEdPsKJrKBhvTLctlxp1wYEFfRVYBZ/X1On4AP+Teu9qy9JJ4wi7sP+SDlQoDu2RqoFLPb0e2Hb+t56Pce0R7D+5dfo7SpyC1ycUg0ehJbMs9ZXuT8ugNCUIvJxhEKMjVr3sr/7YNUiPkN0ti6bVRSdWJWzdzqksmYOQnI6UuVwwjD7J6K4HEejwvIADKZgpbM+R/ajkngGKEVNSsYopIgHAawfJepZlmjLw/+f/pVlF+VtM2GiTjn4H87+J9jjrvBh6+PAGCZxFM4ZLmXvQ4rxU4XcNcpQ1oMP9hIuSLu0+ubkc7CwPWLw+zj5NBSwqWDdMZ1hUNhwB+HDmyi1v2Jr8mLlvGEmP8+Y1s2nCGuASlMB8gmP+cPCJB57UYVIDoQderuzzsETBoYycrmuLUt/kJ7xHYf8hAz+fTVCQ7B7Bsqo0JNlFxbukeNgdZHQaEp67iYNGx2Ub1e5fmjTm7VxV9D2AyA52D61y8Zm4c=","authorEmailMD5":"5bce7bd9808cdfbd1c62ec6b988d0649","message":"Hi, very helpful post. I am quite new to to .net programming and async / synchronus actions. I understand that if I call an async action from my synchronous button click action that this might cause deadlock as you explained. However, what if we would just do this with your example:\r\n\r\nvar jsonTask = GetJsonAsync(...);  \r\njsonTask.Wait();   \r\nreturn jsonTask.Result.ToString();\r\n\r\nWon't this solve it too? If I understand the problem correctly this should solve it right? If not, can you please elaborate why not? Thanks a lot!","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-01-21T12:48:03Z","timestamp":1485002883,"authorUserId":"disqus:seoslim"},{"_id":"178d2520-2c17-30ac-a8c7-8c87c7942ccf","authorName":"JFR","authorEmailEncrypted":"BV9bPiH3H9IF6eia/LnOk0R5XOmS0tUzhaMQj8mLdXnJpoARB4WfN1pFOETTH/LRr72Dprb1c15WObv28qoP6I/9IgiHsX5UcOlr8Phmy85KvBVyJRLYrt6KZ9ug7vDWPOBvPSxENFtu8w4UW4981tS3ysahLWuhBEnqFqvr/LV3UVq7EtY1tpjjjuz7VEITgFKKEKJluSGldcSz1YwvAb98JtUb1iSYsh3scly5MAW9m3WiFXIFOOiyYRwqnV10ilLTKxRvhaQNieYOWg+uaK9IFiEyKgzGt0j4yrOobinyQfcv/ikunD82OebR0NhnfJ6o50Bk+FDtpvCE0MIpJvxbZYC2a8oDjb8P3MWJN9r1tPPhXeh+sJcHTYYI9IXEk5bNxjOzYPBAEgenO7SMONQIhTeZlzu1VW8FhvZvOyXKDTAsByQmU6HGAk/MV2J+fp2vhQMulF+MJXmNqtjwdUHE7XWtIK0p0LzqdqgYFaanzvnOWYKNqh0WGPfNy51jkCLshQCdkhuMI2FhL+bErqITUjelXCzxkramTZA6fKX4wl5umDE0uuDhdytfmp1sGzTIa9eNiKwtlIt3SSK3Hjx/Q4iUZvTLNZASXKWB5bD8KpAR7zfZRMIvURwLo4pEJ540E1mQf9b+63YHTwgIC+ylWMdkZMmarwqfvGEfCKE=","authorEmailMD5":"ec2149490abc527762ddd48ce22e69c0","message":"Excellent!!! Saved my day. Thanks a lot.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-01-22T06:06:48Z","timestamp":1485065208,"authorUserId":""},{"_id":"1fde2232-675f-33c5-ad09-f8888555e010","authorName":"Stephen Cleary","authorEmailEncrypted":"KjNouFV1+UglR8AGJUG3Kb2tRuDtU26O9QIqPsisk/QVVq6UaVsTq0+cYzpVVPNVAWVKZLaCdJxha4S/TKxU2UMKBWUX25+ONhTyXQXiXkKzYv72Qe7aKx1MzArxbJcm8TZu4Cr6SYz65Wv5sWy4dFwfsL0n4es3ThKwaTcAiGp0NJ3vZYTCn/aTSfbmKzl+lTPhcDVFAP5rB2JuzQyd/SKzq64f8WVOj1+dnKjFpbYrOIRvpNeoGQYE11/Dy4lClS/kNX0L0C9PNtElfQ4Ew8pvSXZXWQBOOwMbsElLRpcbkrTM+HBmSoR8Y6tweTsshc4/zb8aiYNPLBvkkJzF/OpxKa94Gy0zqO3AfYF5To7wf0LhHsBfCU4erwKqKQjoIvA07yq7V9MDQljhjpxq20y7xjeOAqFXEyG0c78T20Et7qRjPWG9/yrmzqssm9JTr2lhVEhTMqbkxTjq/wh+KDy2gxmyyVzPP9/skYUV4AthWrF9gXBff3StM6o5Lz9V81V8wIt2YfgRbe8ZDzR2sNYNLL2aPdxIpzWtKhsCEPN5SaqTcDF6w5bl0u+V9UUlQIeMJoLnrn/LsVBGGsxn2EA8HOa2nbLuvrTZwwXJVoH8qxomkUW3d/nUz+RAbLfljfXylo2V6DxPfDKoNFCq5P2vpIypHMn46c8dQQGmDY4=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Is there some reason CacheOutput ([https://github.com/filipw/S...](https://github.com/filipw/Strathweb.CacheOutput) \"https://github.com/filipw/Strathweb.CacheOutput)\") wouldn't work for you?\r\n\r\nIf you build your own, I would prefer the IoC solution. HttpContext.Current has never been considered a \"best practice\", and it's been dropped completely from ASP.NET Core.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"57228dd4-afb3-35e0-8c21-61a8354e5cfa","date":"2017-01-22T21:00:48Z","timestamp":1485118848,"authorUserId":"disqus:stephen_cleary"},{"_id":"4bfd09b6-8376-315e-bdde-ce292ab477aa","authorName":"Nathan Bedford","authorEmailEncrypted":"Tj0mdh5E9ZYmgaQnO9u849+hFwqo/xkFpB5xM6V60DDWUa/HrSvB/qSv1FGLPMShVbMPRyGg91KavcMj2yZVGmZoNzhxUgwL1JYGxt1NYOQ4O8bRw6JeivLQLSHoEA4Lrmrgn2YbAsBJojw5hLk4ceZID5OAblqy2cQLxNA/HPrFt52Ko0ADeOiuhj4OXq9udWQyHFBWVW5IwM3HS4QH8KKcnmkyZofAkQNKIBMjmm1HD8IBoISWFMxTqeKkA+IBo8fMkLrwV+okvNetVoP1LfJlFCx+yjvIMKwgXjlxm2hUMPqvBXAG4xOM5LFmuLjcNtHOtb95HgFg2PB7Zng0HpvVH5z8CblZ57wJ+KD1sBXhjKf8706Jn60YLiUMmkGhu4N3W7gLqXGodUVPPhODadVhO17FrsX/YhLq09ibby8QojaHBJwhenPcJ77me4qdnMfQODRsn/YTYXaywyQ68QTwBbREVDrNB8YPepqF7doyOt3q9ZqiQ8Cw3p1xSWH7Qrj8kAJX40cT8vCNjloD5QlAANn8KuOLL8V2/RqjlYvTgs/t85Jp+5f4Irtf48dgLO00nbX96nE5yLRTHgIyJWoeUbk4ab/oLXczg6X8eCXfyKnbWvzDnYHvfpQduxhhECIozJ4DOcnzshT2i5R3gjg9unjVxurf3QcsL66GL1U=","authorEmailMD5":"27e1556933806ee470038c87b825605a","message":"Thanks for the response, Stephen. I want to cache at my repository layer, so CacheOutput (while cool) won't work for this.\r\n\r\nLooks like LightInject ([http://www.lightinject.net/...](http://www.lightinject.net/webapi/) \"http://www.lightinject.net/webapi/)\") has a slick way of using a custom handler to give access to the current Request object, and I could use the Properties dictionary off that. Autofac has a method (RegisterHttpRequestMessage ) that does this automatically.\r\n\r\n I'll look into that and a few other IoC solutions. Thanks!","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"1fde2232-675f-33c5-ad09-f8888555e010","date":"2017-01-22T22:22:02Z","timestamp":1485123722,"authorUserId":"disqus:disqus_XjHcMS1ztG"},{"_id":"57228dd4-afb3-35e0-8c21-61a8354e5cfa","authorName":"Nathan Bedford","authorEmailEncrypted":"B+J1YYgM/FRt8T+wAeYgcwXR/wy21yhaIkg0qWRkXb7pk1GraJm2gd67SivriEJZLVKtcHsT9gfRJaVbhODLkwAz680bYD4JWhrarb3bDK4QdkCYpjos514M4Ad96rQr77beiW6TFOQS5dfeD4e34zp1g8hFaf+J+4iT8LXnLnkprFcmfJTvwUT4UU3bogkQxJIrMHc2a4WarBbRJ1m9dDFn8VfgI6w3EF1mM2DAVig6CnxUvquIfgo4+rFLqVN4y3rL1UFmgA/4IvgHdcF5p4FPPfe1sqdxRoFk2xxi0Ibn+f7om1itpMhwFbncS6ZmRcDojrb4ZWTdsw3A7y0PWeH9ORVu6TQ9UzI9AYxMysEZkasmjhokVbbFpV+lE2X+ErGbNurw7VTzbe4bhojNC0sQmyuLPK8iAzE8iGo0UfIbJTQ19RU/HoA4Z6lyci7O0tz2DM+LswB3DqevolprPHuZoWiiqboeUJ5LBsbrPse3MRS4cEC805gkonEm2DbV3HFb9BEt+D0CchOwGQywoVvY5tDpcc+JSzHZQkZeAGB07rpfs5OvuzFEnkv2p55nZuT/fsTuyqAS+RfDWoA7XygPrhEAts4tL8JzonD8nOf0j3OXUddb1mwoIpEj3On2TGBLv+UEdUy+qVXkni+bh8Fr8NzZWkPoL17z78U7BNE=","authorEmailMD5":"27e1556933806ee470038c87b825605a","message":"@stephen_cleary:disqus first, thank you for your continued effort in this space. I saw you at the MIGANG meeting and it's great to see you are still an authority in this async/await :)\r\n\r\nMy question: you recommend ConfigureAwait(false) as best practice, and using it whenever we can. I'm looking into solutions for httprequest-level caching in our Web.API project, and HttpContext.Items seems like a decent place for per-request caching. I believe this will only work if any code hitting that cache has access to the original HttpContext for that request, so ConfigureAwait(false) will not work with my caching strategy.\r\n\r\nI considered using my IoC container's lifecycle management for caching key services during a request lifecycle, but the HttpContext solution has some advantages due to it's simplicity.\r\n\r\nThoughts?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-01-22T18:55:11Z","timestamp":1485111311,"authorUserId":"disqus:disqus_XjHcMS1ztG"},{"_id":"19c6a1b2-91f2-3281-ba8d-f05bee6b822f","authorName":"SEO Slim","authorEmailEncrypted":"Ij1jI3HN9hxyzT3MdhpAdrQRC4Din/dno4nBr6k48A6LPKksNwgUhiULS/gS+hc6IILK8qnsnghxJ05OjKu6UF8VHkaBnPY6ThvSn4mzOQeCYom0b9qX+AYrk6dfOLFwFbOinTw9CRh0Le6sXGYBdMlozY5BGpGbpUzBdSQmUod/rz206O0t22T4JFNn9oTMD1IB6wwlHQ5EOckIHHxJ5SnnyjrtqHUbLj2ELpMs9rfz1J9g0fHAlafSh+1vVUl5NloPgoge+Zp+eXPcdrSWO7HLjLD9I3Fux/l3+8PiPRYT8alb2uEPhB1FT4LWMCAw7D+ZpLqGwEAz3PMOYxPGII682Gn3J1a9WTnzeRzvje036g8p3iCVL2jX4AhWfwdMHACedKXEwXCkyG4nUfi/bzDu6XvNg3tNg5808lFIEG+/MknaOhg0L/S87wFuGei4fqlrSrDmta77LCwkHhxyGWD8V5bTRtLW83Q8pBqXUYBGjFn4rI5PWgwJXaa/AND7bpweGJSZVuCLI3ZC87OGP3fcGoUOExu4CjjubfSKCzZiJyPJ9UggBtoMoVhtD8Kiko3+Z5NphZSLXxdEsorSH8wDZ+RnogJLXLi3rUCHUJixg8EZ+r+PcSaRaqqYhcf7UL5wRLjXXByX0caiVS3gE0yVb78FEGExAVPpJ3IpQbk=","authorEmailMD5":"5bce7bd9808cdfbd1c62ec6b988d0649","message":"I see. Thanks!","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"075d539a-7b06-348c-baa3-07df93208f6b","date":"2017-01-23T08:56:08Z","timestamp":1485161768,"authorUserId":"disqus:seoslim"},{"_id":"dd990e1e-dbbd-3904-bd06-999567348960","authorName":"Tengiz Tutisani","authorEmailEncrypted":"f/aLklTKo9DU6ZCxHMUcGyDelgXRoj+KlFD3Z4ZfjKMD8ORPukhzzufgzGmJOjOBwT/MNO05kgltbqWNWi2kXv+xy8cdHMYrmInSODMKOnYuRHVEoNn1V6THk9H7+sPO0NCrbzBvdcQD2YR98+kJDicMZ2P/28OCBSIgHwN7CyVINYi54a1hEUP2YwOhgHXzhBvuM1lmUuA6HIYyEmTg1k2Xr9W2IX+St65X1vJ1Q03im13zSW3Cag0CyWDW4ooKu5iOB/d9tom7Gl1TWkFkT3zECcRvD/r5RC/GWPpvNDaYr0YxgXaun+uAD8cOUGvtP0MRrkJ+Y89LcdqKDHpRqGIGLbXV78ZSr+QNuY9i1JqnLryb1He4AFPXD+tV96OHYiakJpcLApdXQmXBEM/YCF/NMF93GvG1i9vCJgh+YcOs2qHk1Zwy+GNZRAFgx+lj6B0Q7UlhWnyW3FxP9k5YpS696NpWsjmP48e4EIYZNSVMtRmnw5/PPzuyV4WG9siGt8y+7s6m+2ePjlObEyPCAnH3jAa0/l5eCEqujuAl3NY7zQrWBoqGS5sqqObdxAwJPnkyJ52ns4a0YTgntCfnc53K5+uIUZWoq4ZyDjZi6+BIsL2taQKZbS/ym6YcNccd92VeMCsB+1/mIA70/6l9MllpR1NEzdZI8QFRFoG0i3k=","authorEmailMD5":"0c38a91503d5685bbee3b370fbe8827a","message":"Although helpful post in terms of showing the way to go, I don't agree to the explanations provided.  \r\nConfigureAwait(false) should not be used everywhere, definitely not. It has purpose, and the purpose is not 'swiss knife', I'm sure you know that. Deadlock in your example happens not because of missing ConfigureAwait(false), but because both examples are based on application types where synchronization context is allowed to be accessed only by one thread, instead of any (e.g, as with console apps). If you write your 'deadlock' code for console app, the deadlock will not happen. ConfigureAwait is not relevant to the problem, and it's just distracting in this context. If it was relevant, the code without deadlock would not work without ConfigureAwait, but it works.  \r\nConfigureAwait should not be used blindly everywhere. It should only be used in the UI layers of applications, where you want to have access to the synchronization context once the await is over. If you are writing a class library used in both UI and non-UI applications, you should not be concerned with ConfigureAwait inside the library, but only outside.   \r\nThat is the proper explanation in my opinion.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-01-25T15:00:28Z","timestamp":1485356428,"authorUserId":"disqus:tengiztutisani"},{"_id":"ff5f686b-c6cf-3c0a-af10-197889527b8a","authorName":"Stephen Cleary","authorEmailEncrypted":"qK7BtT5RlZw+6a5HbMEPIKTjJouXKrf4sCHBEpT8aq/Av2HfHOg8RgFoUnvHVWBVCwgSCsEacKJLr1cozFVuBb6xmnFMTV4p2rj2SGWjPBkuGuObJP/6RrBRHDDbSdOa6+eEsqG38B7OBKq/W4rwBX+AI2zIiGWoItA3PQOcFttb6ptyalCt26ZKGLy5B8W0C1NT/Ds4V+/IhJHd23UMESreUu8R81U5zRz96V1A7HScg9u9Z/h93LbQH7/G9mIZ1SsMYdPPCggFgZ15TrX+ly/xPPiTUF2UW5tfv0BUWuGRXNaJEAEb72gg2oMBOZIwktgNkTIZnD8Er1TAx7rurUeNdkgstYFqL95fy8AdVBqjZ4sE1tnYQFsTVtodX6KQQ1yHzJKvw38wXVJBxBarmQrFKhyH2FOQXthXHlmE3hFNWG5HGRMFN+dLxENrxBaiDVHOxMY3FCeub/LidlDDvGyKmdTVTo5y7bGKxMVOfm4QVWs9Z5q2dHb1qKLUObDJiOdo813HBGtu0Q4b9fdAKX8AoXpMSorQfmFB1VJb42P9gbYQ8zHSKmMsxkz8SlybWiDzJVEtYiqN3P+zBuLIExbceTI9u21tuCFNL53UAhdyPtVssrKA/NHABpWTxIUfzswGpOrwsR27UgPwrhGpfp74k3EiTM3nvfSd/cGs6lI=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I don't think ConfigureAwait(false) should be used everywhere. It should only be used in methods that do not need to resume on their calling context.\r\n\r\nThere are two components to this deadlock. The SynchronizationContext is one component; the async method resuming on a one-thread-at-a-time context is the other. If you remove either, there is no deadlock. Real-world UI or ASP.NET applications cannot just decide to be Console applications instead, so \"make it a Console app\" is not a realistic way to avoid the deadlock. That leaves the other part of the deadlock - the async capturing of the context - which is avoided by ConfigureAwait(false).\r\n\r\nSince the default behavior of await is equivalent to ConfigureAwait(true), it doesn't make sense to only apply ConfigureAwait(true) to a UI layer. You can just use the default behavior.\r\n\r\nRegarding \"If you are writing a class library used in both UI and non-UI applications, you should not be concerned with ConfigureAwait inside the library, but only outside.\" - that is not actually possible. It would be nice if it was, but it's not. If you're going to use ConfigureAwait(false), then every method you call should also use ConfigureAwait(false).\r\n\r\nThink of it this way: if some code calls a library method like this: `await FuncAsync().ConfigureAwait(false);`, this is roughly equivalent to `var task = FuncAsync(); await task.ConfigureAwait(false);`. So `FuncAsync` has already been called, it has already executed to its first `await`, and it has already captured the context before it returns its task, and before the calling code executes `ConfigureAwait(false)`. It's too late at that point.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"dd990e1e-dbbd-3904-bd06-999567348960","date":"2017-01-25T17:46:56Z","timestamp":1485366416,"authorUserId":"disqus:stephen_cleary"},{"_id":"4dbaaae2-a781-39c3-b6d1-5cb244da1a3b","authorName":"Tengiz Tutisani","authorEmailEncrypted":"MhepaolJ2uT9hyjby2by+t5h9PKAB8nV5H75zH+uPXuYHMBz3QDZ4HG8zmRL0T4F2oNDyfmEyBfOiahlLLtYwXP0b0mtEPP+AD7tXQKFEjzBWja+v6JdIs/J5HNmbGJwQpildEk6IGrXhzuDi52mGK8oPx+8WDOBx9gleVilHwtqOEAJsfgvwXcg61j+MN72OZ/fd6h8OcOKfIkhnWCqSxv0L8PX+WxyjDmiirbEojj6LJbWo6wa84SKB9CccICKzd0sqXJwPF2C2KJPpFsl//B/3QEJG12QXpwmOotyGTXb40Cv/m95qKlXP2c3ehoQY3Fq5iTeirOhFfrdwb0o1C/o/7Ynn2dSC8J3LUDrTW1nmkGy3io9MNLOX0fxbjlGrXaZD23YKtG3iY4Rj/aobGsRAY5zs9kVzsZozT9RnP3OAVEDMph/eMwABi+AN2Znp3mkVlL4KdYdTzad21yTUu+hQpBZ8t9S1i6g3m1emlau7Sru0PdGM3FIK/XFaw4hhMhqggm/WYXq7Sj5yP8jFsSzYRzOQEFryMbGTPvo9rpUfXzrkVvL+8QS2YCHE1gxRAKAVmTTLp+YJlSvvrcQDO1+haQvCuBgLbeGXOSY5z5CqgUtG/19g6HWbeqn1IRrz7zjhyLASAglCzC5PgY4ysVbQu8otEmVo/IiIEri9YM=","authorEmailMD5":"0c38a91503d5685bbee3b370fbe8827a","message":"\"If you're going to use ConfigureAwait(false), then every method you call should also use ConfigureAwait(false).\" - you lost me there.  \r\nI'm not quite following, why would you want every called method to do what you (as a caller) do? every method decides what it wants to have when await resumes, that's the exact purpose of ConfigureAwait() method.  \r\ne.g. if we have chain of all async methods calling each other: controller action A calling method B calling method C calling some operation D (A -> B -> C -> D), then A can decide that it does not need context after resuming, so it will say ConfigureAwait(false); then B can decide that it needs context so it will say ConfigureAwait(true); then C can decide it does not need so it will say ConfigureAwait(false). As a result, only B will resume on the very original context, while both A and C will not.   \r\nWhat exact problem do you see in this scenario? is it not how you would expect it to work? it completely meets my intuitive expectations. Every method makes its own decision whether it needs a context or not.  \r\nYes, by default you will get the same context, but who cares? defaults are just a question of taste. Every method in the call stack still has its own right to choose, regardless of all the other methods before or after on the same call stack.  \r\nI hope you see my point.\r\n\r\nHowever, I must say that if default was false, that would make things simpler, only when combining it with Task. Everything else about ConfigureAwait works just fine. It's just annoying that the default behavior creates the deadlock, so you'd need to explicitly opt out in the library code. That part I agree. I guess Microsoft didn't consider this combination scenario very well.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"ff5f686b-c6cf-3c0a-af10-197889527b8a","date":"2017-01-26T02:46:18Z","timestamp":1485398778,"authorUserId":"disqus:tengiztutisani"},{"_id":"73a82c1d-4016-36bb-8125-9431e3997178","authorName":"ayman metwally","authorEmailEncrypted":"IyU7EPbJGDAyo4z9ZaVmI/Jjc38U7HA+IUTptKILKqaDmv8MIDr4gSiwZ1ixKtl1DExAamoB93mBVxS5VCeTp0yzlj0o83oXKq8ArsKM/4EC6d0SdQ+6EnyYKfBXN0TgXmoqdDZm6wPwMXlqX9dsBlZXPIvTNhLlbDWt1g5aIrHGcXMQ+Ec9ykMuxuEe0Ym5SVyETCrvDRXFlIeXJrqWsohHonFcaOV1e8fuVqRndhOaKNoAHGTsS8mw4yQhBcst2b2RzDamfvhwk4MMAuaJEelYEuxpEN/Lg2sYYwSxXQk7tWH1UCeAgwiqMA/ljTglk20P6KBQVfa6s0o0r6qtvoIW6tnWGgB1z/Lwp1KMWhQTXK0JS5r4g4NYPXiTj626vHJ/6Nr0JYs8JjrVVgsrNZR724tAppZIILoBEy15Jo2bfMSFNHexl1ZlE+NfkrkRAwU6wItBPqpzr6L1IqUirbdpC2F4mpnpoC1zCJW/8hFyb9tPVlRTpuSQQWA8tbfXyWYvPLgE3FyBNz7fDXP3SPpFROs6Q3lcsD/30KyE6OwD7q05fbv0JQs4fUi+gkhBpne19N975evI4XzVoSjeKB0jvWWMCAwhaGJdL7q+Q5+iIgUUsU597Ooyg4UrAFq/LmX3J2aH6cCk7mv4Ex74LIRgVnLPG/o+FiNqSir+RLM=","authorEmailMD5":"424e448aee11240309cca7b0023de2cb","message":"Thanks for the great article.  \r\nFor the 2nd approach:\r\n\r\nDo I also need to add ConfigureAwait(false) to the \"top-level\" method like this:\r\n\r\nvar json = await GetJsonAsync(...).ConfigureAwait(false);\r\n\r\nThanks","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-01-28T22:07:55Z","timestamp":1485641275,"authorUserId":"disqus:ayman_metwally"},{"_id":"012ce9d3-7f04-3f85-925a-314dd68fd35f","authorName":"Stephen Cleary","authorEmailEncrypted":"lpQ1iLHarbMAmHrxRlyq0aSGetfcHsYSy7miokkB+LRmLfjowYcHwox6zOpDN/05UTb5iumcngLAtN7GFgTkJQGVCGIHiKUaGyzDxi7nQHZD+JNMXq9cdprdZIXX4CPTy2A0iz8hepDx7ss0Yl2dwgkRpVHFhdLo9MhmxnIO5fIfz1hOoFkYFiJau/dNPWgAZfoBg+CKo/kl/dMtUDZnatSSXn7/AXsvClLJ0rs8aXZ0GJBfDQCAlTvOfnQZbhAharpOo3zfq0emSa/AHD0BI26VTTWbcgfDXyDth2NrVlyHei39LRKImwK/lLqj2e1EIQNCwacPoI5OoaOoJG9ivVxIBFoQJDjOwqQAGlafSKwFw7ZOVjccQqRffsdGyr4RyluOv2sY5lv+i5nUDkobkQzupxQtnmb7LOGcg6sAlodoIIRZgPZHm+hYGIoPIBxziZVwUrT8MUPc3TiGB2cnWpGYA/o7Q2/T6P8f2B9batE0U/GKfTI4OOmTF/5OqcPQEo2FZiyCoIQniNHb11nHCJ6gVpgtqv1ZX+FonwcK+Qxj/GlZcva9zVq68diU1erPi/U+sYk5xETTVHwIeXjsAhKr9NAsn29/bU1wxBJZgtGHQVeE9kkVlECZ+I6KnOQEgtw+B6i+StwaNEwAisxf3izY+j7tVWvULu+lKRhveTU=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Yes. That is normal and expected. I call this \"async all the way\".","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"6eca1825-8c10-3378-b691-a3912ed855ab","date":"2017-01-29T18:33:36Z","timestamp":1485714816,"authorUserId":"disqus:stephen_cleary"},{"_id":"6eca1825-8c10-3378-b691-a3912ed855ab","authorName":"Shibasis Sengupta","authorEmailEncrypted":"X1SBxFi1xahjAe+ewbSmC96d7MvTqipiaxu3N8aymU/g0SPb4qrubE8lZ3sN5778uDQzqYHG6UHesAV6LfLZxE1xSsuxhuYdfT+2oh05NPeiUFkWVhVrkWJCJv04x3Skq2eEdlhGqBqFblISlF9OzpDwkVNRZBnjJ5P7EPnPIhn5MC9BHe58Cfg7bp2ug2SkoBqtKBCHM5cgncOC5svNQBbWw6aave3qtSrn8d09uigATOeRsWKLT160jcCVBl+FIHb8nQkvnafcsdhVJMTBhTEpC6PhqpP3PQAfOgguMVtbxFBIIN1sN5efSFRHC99ONjDY2EYVvYAgm/rCbgdYrQgbspFIiLIpvsUWFwkagiOmGYtIHUU88PBMuSvSR87BZIlBjfZxgsx1Dvd/gmG+DlgnY2p+J4rdaAEBCMCyHAy/nN12/jq6frPsjtrE5kGFw4U61uDtOVaSpvd3Md41tcyEeOJPAPUIVHC/7acgHoPe07JgsDUUwalVRfJo9mTanzcPbxvn/CLdtKDlGR4D1gMglZsnqCUOXzpeXMYvkQkATMvix87YL9rwiiVEUdLdSiCPydXnz3BYlydCkmrZ/a7fDFL8c1qQHuNmvhOosPTGpyMQxtHj+SXfUtMLFsMptd22bfkI19+kYp3hZegiz/TfCmfbcWp/aR/1L0fQ4go=","authorEmailMD5":"287ebcc391ebebd6332aaab93403ffd0","message":"Hi Stephen,  \r\nThank for this awesome post.\r\n\r\nOne question, if the caller method need to always use async/await, then the method which is calling this caller also need to include async/await? Does it need to \"bubble\" all the way-up?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-01-29T04:48:07Z","timestamp":1485665287,"authorUserId":"disqus:shibasis_sengupta"},{"_id":"844f2453-d524-3155-baaa-d9eb1a74f889","authorName":"Stephen Cleary","authorEmailEncrypted":"pYHxsAk6IANZfzv6joLjjHfJmE/uO3/u1IEc4n/2kpGs3U/IcdAJdGeKMH2UGr3HAP5Exw0Ga+S7yz/UYovJCMbwsD6d3XIuoeCl++pS6kN/4JCktrp9gEccXRisQdr1P0mqEVNhUSCl/fcAtjJ1tSs5mtO7HDyc7Ni7l5wUIfY3oKWhKtnUYIXK6IjH286nH1b4Ycv+/RNzE4d1MTZ5Vn6L9HCuVH9yy5o6cHx5wXxWBPiRf+q9NgEmwYd8ghJKhwLwgFAvKggmqThshioEKl8arSXbnXXtPpx6ik5DmYmhSLR+9NCm1+61zNcZ0NXR/5JbYvb2Ed+s9ePbXN9bniJD5gy33I2p91w8bqMPTkyvey3m/XwspMhp3ynT0+n1/Kbc4sAC/U307z0aazdxp5huwD/6hD9yNdTKiOz8zLg34yGYGszT94/253IS9GNlqjrKBnxzwRqlsL18u6hg0/AB5wh9NY0iAbdO+D7hsFH8LvVbEMSCs21d8PVI+8F/IeQB/o1V+9vqJlYOYK/inM5GdAITpL3l4XjLufMxn9oKAUS0N084Dd+tNJeghXVAkPg6sO0TxTSOM5GmRdxoIFFZsqlCv9zmBq4ZDsW7a/iDvyRFgrPsqWV3rF0tC2taxlKd/RXe86sFe1KZdxYN6kctE6+f7aIpJp9pQUBVBEQ=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"No. In fact, you *can't* do this because the remainder of the method *needs* the context. Setting a control label is a UI operation and must be done on its UI thread.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"73a82c1d-4016-36bb-8125-9431e3997178","date":"2017-01-29T18:31:21Z","timestamp":1485714681,"authorUserId":"disqus:stephen_cleary"},{"_id":"79978958-e42a-33b4-af26-123b2cc3f2eb","authorName":"Nick Lechnowskyj","authorEmailEncrypted":"urGNgkAKimXXeIQBN+pUKGdIdmY5FEzpc4xTnvJF2+wDRxV+m+dVSsdnLT9RCBE1OWH7GqY4H+tCiRd5WZEcuniipQoJd8SmjhSIqY5FKGtSZQpp0y/8HtHuPkS4Bz0ZoEtd/8TfwSzEvbHLz2/BNg4/QMahoCGdvE7/qbkkuU0nfsu+JYIf/wnc2yVUSaPgXCxWbqp827yX0wMa6y5XVHE+/1DHIDRJ9QHUTjw1Ie+zPkxooUTLPV82oImWphWjqsagL0DMuG+XFxo5cl/b3B63clHkDwfQsgExnAsfY/wfkZtXUH9u0IigWT90oeZKmBVA7iC4oRN52UaBdDBS2eZyHXbnooXb1Pf96sOWzqWLTwcwCB89J6AsIvKx8Fe8DrrugT1A8uYxp2xs1KhzFqfZk3EKP3yWbVZtjK3r8xiF3xXuoedhB+zCzB3uNyDAkxtz3kjX2FDgS2BkMrdg5ijIl/kP3XaWBubVlpfx7woYK2kdZskxfySO5Sts1tEJs48R3JPTGAvjafJZVzNDhf38/IaXRAPHO8lEEbGaXYuYgMlO153leRm3gGtnKZD/eSw1FR2n8SypGzqnDDSGTz9Vkj0GoTV9wWPP7pg36OraNqYSe8sKNErHZnI5ndypwVm42cAz6VFbJHPTaooZy9tU1fpwEvKszB7O5irYZuE=","authorEmailMD5":"2807e279ada3bb19bad41a54af66114d","message":"Say we consider a PCL used as a client library for some REST API. I'd like to just have Async methods rather than supporting two methods that are very similar, except one has async/await keywords sprinkled throughout and one doesn't. You've said don't wrap async methods in a sync wrapper and you've said don't use Task.Result, so how would I design this API client so that consumers who aren't using async all the way down can use it safely?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-01-30T21:41:27Z","timestamp":1485812487,"authorUserId":"disqus:LeMuffinMan"},{"_id":"912fcba3-6282-3b95-9585-c628539986d8","authorName":"Shibasis Sengupta","authorEmailEncrypted":"R+zWRU4ZwSZJRLLyEoIcU9CaQRtTdeoh7d5s0smkg+npu8bDW6N0ngmfol/DbQqmJ3k05Cmm5co12uvXceRybEQuxE26N51N93gi3L1qZA1OT8uMWWAGEsz4KNvOZBLHYf++qiwHgwQe3ZxW5Gwb6nr8YbijTT9JpQT0NFT3w8/wp3mfvfBCv+myLNdEAq3KYcVRTEisvwi6DicEtpm8Ig1SO7D7+t3FEi95qQx++QGDJP8bM5CC4/wE6UkPuPOHzR0J1ESHkk4Bu/qQAjgdZI3PSuD+FJUBJV7zFJFY3kOD5p4EUWLpwJg25A5AAZpnQiEWToNl3u8CVtU+GQUKf2guc9f9KtAbnJlARMN30w4hs7razqvLU6pe3u9Q3J50MP0eEiFBa2YaprDGSjr9Sa4Tj8sQupG/+RLFLVIzmxWwlu39KKiU6CkguteKRGg858JphO2vOq1CRAOsFGIERmiNrQjYdzB/NlhmEUGBtGx5vck2saXMFjyzhGCtfdjvH81HEUxh6oFv7JPh5L28qvqysxY/wmPj+DUGWVo3lejEOejRHnpFqfvLFgfu0vfHDXPENW6RmD5qMv2zv9juWUM8juEBiWX0U54LFhP4P6DY0lh/+FEz3bXkfkjc3mrlyGtkAWYpd8QYnkYJV9ROe0FxUSTxxX2kAWOMISvhqKc=","authorEmailMD5":"287ebcc391ebebd6332aaab93403ffd0","message":"Thanks again for your response","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"012ce9d3-7f04-3f85-925a-314dd68fd35f","date":"2017-01-30T12:17:39Z","timestamp":1485778659,"authorUserId":"disqus:shibasis_sengupta"},{"_id":"4a339617-bae9-378a-811d-2f1e0a38ba74","authorName":"Stephen Cleary","authorEmailEncrypted":"QG+b46FClSlDq416+IbLcpY2/kOM+PEqSxpAkOuF+ncymQlxJdYYPvCkYRKbiDfX03I115secre9ySagH9py4rWvBSfBKnvY0HTFtYDcFCQaftiP0nrR+GkUtL12d/BXGaC4gRXB1GxpBkyYvs60WSLxAGamus+uYYvfdWXkXhmUtSJWc9STfTlsuKAq6IrVx+I0KGSPzduKby6FKUiS+lEGtZGBKz9h8UieA3DycJ/cZxIVL838oKig+kh3l5FnLjEzjztn5ThYZmXDKo07cPjlHDiBHOCRMF20GX+O22zlyfAlJ3ZYtTNyB0VvDmb4Q1LdIbXk+qdAdD4yoKK5kBG0zXREj9XJ/+AkCSLQll5YY9N3GAJKG8xDLlk9pbAIv2Zwq8mLwZgRwtZ6pIcciRrU8Zzzca+Z+aEq9VXupXzQQP7H1ac6cw5/vlFElVRcQ+F/nv9AbbkzC0NL3+y1igQoMhIp0OzvQrlo0qrmyoctLk+O/L4GsdILAmeA7LSva2mQbxCYUNh8pNzPhPKoGDH8dBzImxsfapLeprYTnnkfmKUR7UmGVseYKqhFoW+wkvrfuLhN6DSO+O4iGN2aUg/pOzyj6MEQM+WvD8ZHy3Hm+ci7H02qS0AMtRq0Wh1rdaUrRZENSfoXUyg0SBDozblWCLPsw0imzR4eHehp14M=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Personally, I would only expose async methods. It's extremely rare that consumers *have* to block - they just *want* to.\r\n\r\nThe only other safe way is to have both sync and async methods. You don't want one to be a wrapper for the other, though - what you should do is use the \"bool argument hack\" described in my article ( [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/mt238404.aspx \"https://msdn.microsoft.com/en-us/magazine/mt238404.aspx\") ) which enables you to write one sync+async method containing your actual logic, and then have sync and async wrappers around that.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"79978958-e42a-33b4-af26-123b2cc3f2eb","date":"2017-01-31T13:51:21Z","timestamp":1485870681,"authorUserId":"disqus:stephen_cleary"},{"_id":"c777922e-2423-3106-bba5-239b39a235ba","authorName":"Joao Lebre","authorEmailEncrypted":"rT8y0Vy9TROIdotkwd9mKOgm4ACFlxeh8DVqCmL+V/+CBLuFPz+qNJU3VWoLrfdpMVIrYy7aFsZBotfUhEUKS12GIJPUEQ72Cqd33NFAG4pwYGHiOdcAWdLdaemoIVenT3vVmdrxDua91lvvBkh138u0fm3vMoDp8xL4jTOxrn5l7Zk4x2fbnxHUPKZY4HXnuzY1OdbBWnwDBpvMqJNdlUV2fJTh4Bk3G6EH7X/HIULK4JR2EeM2ur2hDcpmcO8EpriaUmjQxLnk92DruOc7C4WOrqo35+6xY5NXoksrAX0ckddWBErpMLhNvDw/3btTd7VFNguk53XZ8iVc6MS7pYndCqC2GdiR0aGE6v83b72G/hHTDawBORII0QxZyfjS9yEGnj29AAWxtYy6UaG/huHi72jlBwwAxBPzY2zd0qnN6lv+5EqiCXkmBkA2UMBOiNYuK84ukzywbDOmeRoAoYyRnAsR/uVcNBu8HQC33qCNwkV0eqGewFLSbsb43nnT6J3oyh7PjBiARjSaza5qBD643hd1Zq2TxelkSu128Ha8tflHb5XEHnEGCyZS/W/kOjENjenVVvgNrRtLGEY4A5Stg6s9VKosYeSdP2gLZvvST81rNGURGrCa+FiMJWM+4Q2LSW3d/MOSx3j1MblXUrc5Td08DrM4K+elPUtZySU=","authorEmailMD5":"c1114bb4b8619d6a61f01d31c218d334","message":"Thank you! this helped us understand why I broke prod, when we were about to give up and just Thread.Run() pretty much about everything on that piece of software!","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-02-20T14:44:38Z","timestamp":1487601878,"authorUserId":"disqus:joaolebre"},{"_id":"8136bc08-2d43-3192-9caf-7902eedd55d7","authorName":"Eran Ozatp","authorEmailEncrypted":"TXLhk9B6fFrcchnejz6WqIhozmWBi1cxyM3fAt24s6lFBUB/s6FcuVA2B8tqeCc+OKQESXVdUXPBQ6ZpQQZnysd4GttMBcgn6St3n50ZSf1E3n3udmp6BWb8B0R176yie7wbAYEW6SyWcJyxkhVqwItXFoRbJJBiLuiCNyqrCvpb+LkdjHIwtVyW6XvIFsDXb7BEa+nbsyUP9veh40l6hLQmSaBf5GCVh1eNiDP9W075vLfsT+EUZhfirFGII67VjrDQk8J7aeyMdXpA8Bz7oCcGZ6005klFIC0rZK3x9T8jr0Q/1aFHJPxtpP41PVyLCuX/Y27vG0JVfdasYmU7CV1rlG56YgEpoNxWZnHSCWz+5XJifg3gC3fGl+H76KMb5r0d1cQHI5S4E63akt+vLOYb3LLMuyQCkPNUhsrdRgvNJ+/ePx6n00tr1DWZ5V713ipYge2spVRL0ACDUoSPWr36jM4Y/jTB4bgzTzsOaXlK7LdhOGR+Ba70xBgrQE7nlAl+VQJtVXW4abYyrUm/u9yU2irjWmXesROBzY4ExqQcGI1z4HGP9jdvHb/9voSBuh4QnriD6UhHVXpAHqt9eeuJjtT8YU1x8RI2mDIqghFM3DQCFPO6CiFAN+uAmM1n86eNaI+64pDYG3dONmNyN13/yPyk69KRleBPizy2nY4=","authorEmailMD5":"ed3c16678b7536774b5eef75cee2e764","message":"Hey, could you elaborate on why async\\await default behavior is to return on the same synchronization context which it originated from.  \r\n What's the gain here?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-02-21T07:49:58Z","timestamp":1487663398,"authorUserId":"disqus:eranozatp"},{"_id":"f7ba6cc2-fa4b-3a0e-8476-662742ece8a9","authorName":"Stephen Cleary","authorEmailEncrypted":"F/AlIuiiiAnRNRacDDfsgqKUo9EGtUvlZw+H3kaSKPaTlIqEzxEXBwAF0l/7jrbsvf1Xe+XczdGwCYEnDwhETcJh9wIi/BGysCb6AAzyJsucOCve55g3XRIE/w8RvAmVJk6nFboxbqnQlJgIFVMNN9kTFIIZJR51o9ATVTycLPlj6TmujQKQ1v42xoz8zZ5u+j1kDYj25ljAfYm1IPDwfwuXBFtuRQDxVQHtlzQJlqowEzY9so7uRQKXYI1u3d361jjrNyYK4wMm4aQ+P2eh0jFdLUL3npwIDG5XhfYhnSll5QU2u6xmEIgxDrQ8KCwRQEm6GfJVMODXDKekhrLqzhwttB6Z9Jijs7bG7H3Cp26DByCBV7eiA/XGgMa+9HJhZAdZFDzh5wo/iNpLQ7UiXGO5RkdOIxk7wc5VVUkgvjE43eSi8KKc49aE18ctoj650abbyzl9WNO6TUV6gZadMeZmC8d70vYeHjBUt/myjbU/5erlkfe3kG1fL3fTXLJy6H8HQxHvmwmTVY0ycf25m9eVg9hTkhQmZqQhTRFhm4ydXNyQnjZHJC8VKgEyoUy6DmPLp1RdvEFEHgrByN/4lUsYgRGu+lt5AILtCD7wp6W01zkpLK+W9Ulef3tu0deCiY0sPXu8QLUifjcLlVOr7X7PZyZIZb/yCM4hmPgNnFs=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Conceptually, I think the benefit is that a method runs in a context. So, you don't have to change your thinking if the method just happens to contain an await.\r\n\r\nPractically, I think the benefit is that it made for better async demos.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"8136bc08-2d43-3192-9caf-7902eedd55d7","date":"2017-02-21T14:31:49Z","timestamp":1487687509,"authorUserId":"disqus:stephen_cleary"},{"_id":"3794c8a2-9cec-3671-8aac-608579641831","authorName":"Stephen Cleary","authorEmailEncrypted":"JqPijrvbTCQO5sdw+GCxGXmgRFo2GpFf6I03v4LMQgxpXFZ1dO3WN00BOEzt+8SLqZ9Rh7WSTa5yETf91d+ZXHPipPHpoU/+ZxkjeqoyrBAe0azzmsYejQx8Nq30RAdP5ySeyu5GjKJgieNHqXZOQuzcGaXH2+d2k9l/Ah6qijc62EE3uZa2ZAQ7YKmAjUaAhgs91VfVLIqypiSz0YwFRKvfTSCWoIT0yDTGsmBGnTiLcX97aOLZFKiB0/mLdFC5Da77t2hWp2HmuTd+slgd4Pv9P4To5+Eo5hOfJ1+0a+rih69aYwWyC4kUjTTF4a7Bjm2KV4tPLJKMwLVQzjxEmCrhc5zG9xtGeIkJupJuWv+1S4fCtBJ/jnpCbE0EJtROpA3MSeb/F31BMK++kWC4XgU1LfLzOlPsVB4Y8nB0r4RUA+l6IZzsrSqJSRZxbMydZAjhguJTAUANwxevFtAWr7vCSViX2kCHA7nLNxXe5R+hwNuCPbdy4dEHHFZBYI19KOLr9gGZKiAY4F7GcZ3hiVWmLg9gTLAV/5wg8wju+0p0Bv8N+LMbN1J4ale5jbLGHaCK7e/4pTIcWZ4/9ND4KNddsEgSC/nFHuPgRFV5sDYRjd5CyL12Yhbkkxxl0+QolxtwQALkej9P+jrbF6/+ALV63yflu83wVph0fyTw0Yc=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"That's what I understood you to mean.\r\n\r\nTo put my arguments another way:\r\n\r\nConceptually, an entire method will run in a context (unless it uses ConfigureAwait(false)). It won't start out in one context and then jump to a threadpool context when it hits an await.\r\n\r\nPractically, a demo that just uses \"await\" has more wow power than a demo that uses \"await\" with \"ConfigureAwait(true)\". The ConfigureAwait would distract from the demo.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"7f650343-3f96-3a36-9b22-93a99d5669f9","date":"2017-02-22T17:53:48Z","timestamp":1487786028,"authorUserId":"disqus:stephen_cleary"},{"_id":"7f650343-3f96-3a36-9b22-93a99d5669f9","authorName":"Eran Ozatp","authorEmailEncrypted":"oltaMlK+5r2roWsUtr1XCNFp0771C0J/VOlU1bz+ywREpg89P4yjhGSQ+8nr/Jb5ZJE1XRkxVqmo9ZnSKRFYMgvA4I5OW3iZIKVERRaLLPLGnESp9WSIm/iAkKP3GEy9U//H5rQNFMs9x3J1V5615x+yApS3CRmlxKN+RH08Yaqar1ZQ368Vduhk9zQ2lFVgSPu520IfK31MIm3cG4gPYkomYthIrTZUKWBFSo7nRcsQatexYTxxJNy/dpG0Bqcl0oZFdKNkAkdCUaO34LeXgIPx2EyfKewddqUyD/EZdKw3lMCdyXTr4eKInZaSnjnq4UsvCGQmHCyADDyPuHNB2dqTwZYnxHdyuaNl+W+Y76/kr7ld6RE98wQamfab9zaaIy2j4IiEoYNpJHoPzeg76woekTTNZrVA01vjlCttlBJcm+O6lEY7J7/rL35rbNteN9X9OI29qeNekxvWZd/O1rpdkfjwEpIkyHqGgL0ZraEXeEECHh/rDIr3YvVE0fnAhz3iKiskz21RiAbh0fVAbhnn/a3uHK4+fHgO+97+SJxyu7iRzmWtFSkrDrUA9MS0GzIwprN4yRGopXwJJQwelzcCzRaHl9IK31HTMLPjrOct5RZZpsZI6s3Lla7IOZu+AIMMZls6uUfaNNB0/3D3UEAxCOCV5ipFzzQf5H/+Ubw=","authorEmailMD5":"ed3c16678b7536774b5eef75cee2e764","message":"I think you misunderstood my use of Context. In the context i was speaking of (J.K.)  \r\nWhat i men't : The default behavior of async await is to return to the same synchronization context that called the await ( that's how the deadlock occurs in your post when that thread is blocked and you try to return to it.)\r\n\r\nMy question was, Why is that the default be behavior ? why not return on any thread by default ?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"f7ba6cc2-fa4b-3a0e-8476-662742ece8a9","date":"2017-02-22T16:26:59Z","timestamp":1487780819,"authorUserId":"disqus:eranozatp"},{"_id":"7299b081-ede6-31e4-97bd-b3be9671e995","authorName":"Cembosaurus Rex","authorEmailEncrypted":"fg2jCUuE0rJaDCScAWZ3VaGpGoMz6pvO1aKQ/KXwd96cmBcX3XWIQA9B/+BuJsbMNWDdAPf6zJkGXNeX1Q89+KA4Jl7gBsEGmlCGfpJVng5gFG/cYHIdOUehJSXcEoYqWNfXBNVqkJpkuE7zvJEQVmZe4wi61VhfnkpB4g00RRwO4q7O0rSwBsGxAYdvPgxcpSk8GQ2F2OaSaQ2P7eURO78EbfknnlN54qeE6/A3gxyF3RbG7gp7kUuS9BPX9H7OukO9rkCmXLTWgMWDYLwWIUzVfO5MdH7h5dhB78EIAfm8xSsfGoCBRBn+9gdICd3em4EfeF9Hsq8nNbSRpamM7GmbkEnCo4zeqENAYV45Jj5ZV8dJMfn8RdmMf3TWvhcUdGlVlgltdSylr8jXwACy887YMDhI32gZYfJSW1ipyhNvJLFEAGGXJZo2fjwZqZLEbyQ5XOuJK2hgLodoefSNpPSYHH9fAdqvjb+kCPu4S7067WPjgiSHBnZifLfdxu20S6lQKzEKlweKiZP/UtYLelrI93ViRlWB3PTnt1SKnc0Q//mvDIRYGDY29wNfzqjHDJxDMVI4M1/gZvZQ3l32NN02SFAjtHQAwUa3LZQCVbgcQBAj/OlbNM0MtGGsOma9uWKMnp3aIrnmB0QUSaVkjsn3Qp5hraCXZhV1M69vqW4=","authorEmailMD5":"399ef9bd8820f1bcf79b227ce9f923db","message":"... I'm new in async approach so I might ask a dumb question. What is the 'context' you have mentioned in your article. For example: \"...it will continue in a context\". Is it main thread. I remember that UI thread is main thread in winforms ...","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-02-25T06:33:53Z","timestamp":1488004433,"authorUserId":"disqus:cembosaurusrex"},{"_id":"c06059eb-e2da-3285-8f26-1896e5725091","authorName":"Stephen Cleary","authorEmailEncrypted":"QGT0LGUNlF4s6Jib1ceBEPRTIQ3NYpsU+I58qrJAIoWRs9IpV/4D5Taw2t4FpTLBfJBhcdtSVVqY95y4RXeiR9nmY5Pd7UCdGL16EMbWGqPpmZpmeCCRQUCpuNpg/QFJWQU4i6A7JCsikwJv6LIg5FP2EPxIWA/yVpecOTZVAdZQGU5nLB9tTcaE9nFiHwxcVmUrMtdD1TjCIlgoWsYNoaAVVDvZ+5wmSJnxi8/gmHWUzh3KOpcK99B7DlRomqzEAax/zbIgMWGWzIMnzs0/sk/S5jDrMv8VKeOQ92tjUG3AOlC5sJe3sVpn3PNEqmg+ms43P2iY7bko1SblTsl9RKsqtpifVXjkkbOCmcoH75Vefefh3/BC1lhkSouBf2HVtzlgb5WV2/+4LYH9F7OaFRFa82u1C1fZTMX316TNLjDGMSmwURTE2LqWxYIvHaavzvQmvXVtPptTIHgW9XGZjkdHk1zTHyQ+Wi8LY1E4AlXlNqOL76+e1hmg9j1xLn4UN+XO2pkzIAHbRMMB91tYlb66e5WVjHT5Lr6yHcLzGhVIEulasjixeXt0CW8kceHzCHUzoRXRtdZhDZ5iYn4F56WhR/u8r3e69UaRCl9m5eKyAsUWTsOJ5BQQ02N2pjmySahVO9cFC+CwfZgYOpn+3QJR6IuVGrcMQ/EwZjPF0Ao=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I explain it in my async intro article: [http://blog.stephencleary.c...](http://blog.stephencleary.com/2012/02/async-and-await.html \"http://blog.stephencleary.com/2012/02/async-and-await.html\")\r\n\r\nThe context is the current SynchronizationContext, or the current TaskScheduler if the current SynchronizationContext is null. In practice, it's usually either a UI thread context, an ASP.NET request context, or the thread pool context.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"7299b081-ede6-31e4-97bd-b3be9671e995","date":"2017-02-25T14:27:13Z","timestamp":1488032833,"authorUserId":"disqus:stephen_cleary"},{"_id":"f07e6cc3-a62a-34db-bef2-50823cd433b9","authorName":"Marcel Celaya","authorEmailEncrypted":"H/bq9GZsjftjzFn1C0Z95a310omlIEIczfz07tY3QxEo/GkvZ2bALOR/MnKS/yaAGcd89Wx7R/rkGD11LyXMERK3Aqp8xZBqDahMXI3EArehDPZLwMGuJfqBQOilPkGbUZmlC2Kfln82XnJzVrpE29oI8erAjxgjuQ4NX/uxMgyVZcG1Ctyu7NuswzMsu1s1r9b1qN/nYYa4xU77CIIiKiZr+0Ar8TXtygmB6l77YTbYNi9blgExaUOzSaj5NE+q1kmSxHdSCWPWPWTBadrQLwPNDtC9pKI3PA5kflVZwvMQ3MHiwdSvIab7izwCnGAJfLJhtpkxbru/MmkAR5y7soMRqmyWNt3cJF3zetINaoy+04uulXfWrhgLi6x6Xl+JH0G3xjDR5TtArUsMQN0c3m+m5l6NwMoczUFWsVxReun8SFnO91ycWhqv165dxTLiyOR0I0DIUCdgKyldk7SIUm5bMCvcDA6vZwEpG7NBFovnmkataCgpXr2ylAtmWWq3fUKiAhfL38R5Gs9a8MBvAS8eToFUDtITNLDs5x5Rp1IH9q60DIAKqofhsrR4aXRFKemSK/wrSKOv3xWw+Sc1QJmC1g+dedA59F16SC4uyPIUyxuVBhiTDxU9CJnrLmk/iyE1A0JmAyW4Gm2axuOJ1zW/giJKDVCtMQYXrSxXUbs=","authorEmailMD5":"684dae63c4be52d00b7bf32a1c86cbcf","message":"Thanks!","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-02-26T19:50:54Z","timestamp":1488138654,"authorUserId":"disqus:marcelcelaya"},{"_id":"5176f405-619c-3def-8109-f5b817fc350c","authorName":"mh_amri","authorEmailEncrypted":"HsIOSrHXhsU5xijbVkqJNZbAhWFVt0368v/Bhc1OVJJtpTJxbZI6geZzBO20pGMfbJrA/YQYYc72dZRHc41HSeH4PXjklLh+XEt952NhpN09LEAKRdxXMQR/TCd9wlB34DUiqbITFawXX1oswEKd9h2/NyeHqZyBZh3QhiwPqtiD+nTtvFgdlnA5SwVqj85hk5GbTN8mlU78ob2VYVJObtZD+wJLJJAbsI/GEio1k4c7asWkkHbKMhD/o9KqdRty1xg+zcqhrsHKKIUbBrDaA2L9bnnXEEWnkdhRmbZQuO4XUcFVF3rddgjmI0scSlYLpEbDf8g/86H4r8P8+THI+9pxfAqVLj6jvtCIPcP1AMCTU9r4EePZi3NsbH/0veM6m8cRP9j5nNAWWNY6EmS5Vx1b6N+n1v0VeYZUygTu5/7cRzt+J36psftVAHSk8NRCC20C4w1aLuHeCMGw3n/KsP8HsD2yEZGAwLr+RoU5rlFSPRZLLmIF76N+/z7qSwHCW2VdVrM6EAJgIhI+j9fClmBljbxjYcPk6TR8spYhsShgGAHuKPcbWwtIeezA2Zzcmtxz1OgV+Ok5ub82ELJ66AOOzGPhoR+Qh0b+9xKEGLaHCD6y6Z2ZaCAIqoxu7blGj8RGjIjvMD/xPSVDiMb2TtDnn3H749kvvPaVsAUBDY4=","authorEmailMD5":"1b9854751400c96cffcbd9abdd4327e3","message":"these methods only works if the return value is void or Task or Task<t>.   \r\nhow do you manage the methods that are not returning void or Task.\r\n\r\nlike your [asp.net](http://asp.net \"asp.net\") example the method Get() is returning string\r\n\r\nI wonder why you missed writing solution for your [asp.net](http://asp.net \"asp.net\") solution?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-03-07T12:08:11Z","timestamp":1488888491,"authorUserId":"disqus:mh_amri"},{"_id":"75300866-0aaa-372b-ac6d-c01e0e514c54","authorName":"Stephen Cleary","authorEmailEncrypted":"BpoyMXMV0u8OQZUO53P6eljNDMKxC0VaGLqj9dnsEtXYIS7VCOi80d1fWCPUZXMg+MnsOAzLdpCVG8FiJuA0/NQzmVkbEq4oYCkyUfVc3V2Uj6SZSUEVsu2mWYedx2qE+vc/eIqjYXSG5oc3vyCy4c2CC6CCOdzKQ+rWkvP0F5wf6PomjxHRNR9VWPzVez/J+xWYhrB1eYuiWMHqyukPPQlLTCDf03svfYqw2BvueSD3fMHgdJZMFqEnGoSEj9fb2uvEqIqz4hlazqcJZUJd4dPXl28TM7QdtnO8sWH5njkiDBT74sPF/9cjpG6O2JXVA8q8IWXx57PNVYHZv6jgLeQcP0uuilswDqlXz8Oam6b3CZobcqI4OuUmSZQQBUkhPlbCUcfKR7bIfDiE6NrYN3yasZzM/4QogFodkzbIdaZzfJDd0EMQFUWlrCFf9fqYsbiLXILwsU42cVUvX17vBxM8tMV+SPJj/ys94utae9BmYNziz0MMGae6Np+Sja/KJ5XyTobDrwH1/O2lbU/I5wm956xElCX6GU8KOHV8jyKyy42XQI96IdrhZuOoSMCa4Rains3DNJ4uuM/zCLQpz/qcaEWd/cnyw38Rnkms05AqQAVwXtn0JWN/WfNiljsN7xCyKQnbVS3lCWBWAI5yWHfsdCJXHMct3dSnBcidvgI=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"When you make a method asynchronous, you change the return type to Task/Task<t>.\r\n\r\nThe ASP .NET example where Get() is returning a string is shown right after \"The new “top-level” methods look like this:\".","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"5176f405-619c-3def-8109-f5b817fc350c","date":"2017-03-07T14:39:52Z","timestamp":1488897592,"authorUserId":"disqus:stephen_cleary"},{"_id":"2765f5ca-0c1c-3cd1-89ae-704fa9ffb1d0","authorName":"Stephen Cleary","authorEmailEncrypted":"DB0UNUw+wpXI0nAbX1NfrpRtMXgmrA7XUN/RvfM6jsjDLBXXiwG5ixMu9kr49OCY7hK/Bg8g8q1SW+lWSK+RWalOdOSqMVSJuDoXG3xbg7DPOsXZmlWg9bgcGGfbnn2n6hiobK8IGoapbWmrGvID2nc7mCqcEwU52wHA4gXmHxOp+wyNz2OtC8FL5X6Tc7NwOnHhYR4q+sNCFJrjmOzFjahn2q5YpaazugLvXfWkO7F9qb8Q6/VlPJnew6JlEQtftkQ5GSOCrqgEuQBmo5d85RyGDXrpUSn5RgC2m6RZd08cNi9CnSEB2yEBcmk908j2fSdQlCzXoheQB+2wIOQPhP8vpH3LJMpPwpYUKRkZwVJSX2w1AaTbNd5S4a6L1Lrc4RYpIuvnYePIOfvfiuEnSnUViEZygbwaPr7APoQkuy+DH3Qh7XdrWmmVejsk1wVPW73iO2BNXAxtFkK1WG1TeYB8kx0ZJzgcwRUGpB6u/5XNytqahNyy0kelRqqOdDqdFPypQpyXla+KIxyNUxe6TM3FFVJ3Tel8sU3WMSFe/kDtNH2F6fcpmW8grIHWUroh4Hea/iB02IgMuRDHa6M6p7LP2p3ZyXE/sOiyOMuR/IBA3cNoZKHaoBONL7utyypeHg8xKfSgHH/CmyS4RnYAeYUdRC8RiPd3d0ce7/fKpo0=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"The best solution is to update the old abstract class.\r\n\r\nIf this is completely impossible, then see my article on brownfield async: [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/mt238404.aspx \"https://msdn.microsoft.com/en-us/magazine/mt238404.aspx\")","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"678d9bd6-0df2-30f6-ba66-2fdf2cbb7e54","date":"2017-03-08T12:53:52Z","timestamp":1488977632,"authorUserId":"disqus:stephen_cleary"},{"_id":"678d9bd6-0df2-30f6-ba66-2fdf2cbb7e54","authorName":"mh_amri","authorEmailEncrypted":"gs7nM/Q+FdiNJWyGu5g6mNthlRZhpVkC91EfqHyDyBY5qj2PQFluzn9bKCvKH14BfcTbT0n1geJyKCNx6APfZ8e7iJntErkmiCZ756qoBsUO6sTsxL5HUv/h01IyhQvzPeykn+37tA8yxkL+92JjL1cO4W7DygremnADDmBB5M8kk98peRbyXjCoL/b+hZJ86e2XHT9fPGYo+JU9h1iAMDIuWB7hSi9PNL7XL/4N8YF1oxPlJj7dnzIbnqoAqrMxbFAcMj3c0qua1uhFlNUHGItXbeXfGeqLjNNCH1miEdX+UdnBNKYzjOKIGqonoSaMflUnW76URgwy1x5cxaMgFcqRzcYVrSuEwMjz1KEub9Oj9mL8aT0xm4+1ORGK2L4ll8jt01th/ByfpXKYkmlSTazYGnZCIgXFV91YgeioFMC2O55j1/gi2tZL8YtOXLBC5m0kv6QoKJX8SpfUIEnUMbz8t7kADjPX8Jd5rw6/kq/Ux2CDuYu1ErUVQCNJIvq+SOM165NAjuye1nIFvEYm5QLxxHhewekZmefHbl0QfPp4D8oKR5MIUtBR4EviWjvnzDN6hb3rdsfQDwBjz3EZ6bv1XPo5efjaxBsPXZ/q/MEbwtUlX0glp+jSkrORMxH7bdl0ow3O4s5TiHftHlv12cxUfb2gMHaG6/M5aY+p7WI=","authorEmailMD5":"1b9854751400c96cffcbd9abdd4327e3","message":"What if i'm inheriting from an old abstract class that is written in synchronous? is there anyway to prevent dead lock?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"75300866-0aaa-372b-ac6d-c01e0e514c54","date":"2017-03-08T07:11:18Z","timestamp":1488957078,"authorUserId":"disqus:mh_amri"},{"_id":"1befd94f-4142-3140-b608-e13cf4385861","authorName":"Stephen Cleary","authorEmailEncrypted":"v0qp7UjWii+GHcc+g1rxmVG/6lwAfPykJZ7ZlaEW4xGnxOgqrqldzEPJAfk/Pf1kKVSJnhkAsY5Tdni6WjikDs0EZp8gN2skhU+j5HTcbd7DH8JPWdRF+OBhXQTCcG2vc6VnD7XFvD3x5pj5p0kfFu5zo6MXJb7XdGCFS/aHeMDN5caZ3qAQEqjU5Op8SeCNWQXUNdgG2qrTlNNKAEyqnwezV9xUul7/fW8Bv+KSmR5FmZz0YYabPqphpdyLbBUHgeIMjPWZbc0juBl8MFd8XLQYv4QAQ+gXnsghZ35MUlVcbz0FmfRe+lg0lM5Lp74stAHKP88iSbGZsr1M9eokQdFMAqthGWuDb33pmDu+GA3ijnalRFcd40mtGxJ4lwjHmSWvSEEZw0Og4om7LnHmGO/lE93csv3vMrv1Bd4/l+RInTJywgJFb1vdUYxYsUmbqYhVObbXQ0Yo18w2lJOUdTjN3E2ADVaMcOcimrGnvstiMnWrX68ixJVJpNAJ4BxozuUhgfBg64sFU65fTrCb8wSz2mMs3i9afCfYo1zLjiddFd7iBLS4zAiHnUu5J/1YG3LyaNBwc+RKxVXgYB6SYawObLLKCBqd2w7b1B6FJxZfvmRjVG8Yh4tiBklVy+enl8+dHDugizL/0qjGIGq+gsiRfUfHKdVPmK5HccRe6To=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I would never write `await Task.FromResult(0);` in the first place.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"de9320ef-c081-3e39-9320-fdf76b345803","date":"2017-03-17T16:35:46Z","timestamp":1489768546,"authorUserId":"disqus:stephen_cleary"},{"_id":"87cc8d30-89df-3d8e-9f69-1952675b4f50","authorName":"Tomasz Modelski","authorEmailEncrypted":"wa2vgtVfI57BSYFow4qWDABPHC26GC+lDdjdDV4XJYLufnhee/gNqV1CaT/dGtBtsnbS3kSW2hPChQc1wiMVizLYynDe1zo9kbSyurBK0sCBeRmg9BmArvtxOXWcxZrWVd6tF7NRhVMW6sUkFEbsEjRrkXFzs3o3UQWKfYZY9fPybeZvV4IPq2Jz6WiHOYygcHRB/jC8cg9jqu8tWH7yMFsftowypIQaxyGrpeFLbBhtQxG52DpVsjDT0VeJs1zEAhqs8QHO5kPqH8Zw4+Ku7ErGypVlBB0j5IDfWSO+6D5SLhUpkxQMSMAEBTXEnkqFUSOOKxkRBofotnv4cxbgk+wcSzbC+uR/+4Qp5dFkHXUqctOR4PH+/kDJ50l1AY9ZMg1YjE595QdAlQJz6I1AbM5GpTZf+OGuIPmlSxPSOw4RxpAyfyDOvl2dOywACFiBYpzj/KBZxdUEEbyFCeotcxD4Z//XPTUIUQvL9JPUrAq1dv6yOJU4CDNV8L2arWtv58FDIMRrc6NWySf31mfqBWe/H5Beev1bWBwv5saDHgkFZVYDhaoNaMT53h+7KbyXbYhkky8sG8D/nVtMnuzmLjSMaKcjr1bwyE32ZWH6LN5HzrQ7mb9xpM3UQo77yA5tBSJ1U9oD2gazmloh7XSxT+ZdQki/SaLwYIox54oqzow=","authorEmailMD5":"981e6f0be2bcad7e6de0867420d6c855","message":"I can write below code and it compiles and works (tested).   \r\nBut as I understand your explanation  \r\n> ConfigureAwait is used to configure the *await*, not the *task*  \r\n this will do nothing.\r\n\r\nThanks for explaining :-). Regards, Tomasz M.\r\n\r\npublic Task<string> GetEmailAsync(TUser user)  \r\n{  \r\n var task = Task.FromResult<string>(user.Email);  \r\n task.ConfigureAwait(false);\r\n\r\n return task;  \r\n}","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"f5f701f9-02d8-3d89-8c46-2231757055ce","date":"2017-03-17T23:05:12Z","timestamp":1489791912,"authorUserId":"disqus:tomaszmodelski"},{"_id":"c05991cf-e2ef-343d-bd6f-e96e2da56f2e","authorName":"Tomasz Modelski","authorEmailEncrypted":"ULElQ/YpuLXTfxPnftcJG+GxVahlvN6EB5C6PJ3cwQYha+gqcipQXJwlcKJCgqpg62/mfLqYYFFB+OyOAquGkpoAO1SlQ/ZEZ34PSkHbAhTocHml8J6w9AWy7jRzAWE+QQcoVWOsY2nQX+OX5rlYPjoHaMcyjBJK7RUvZRr47dU9NaoT8ichDtHsgjdyTDBiWcV0flO3g6xGvQmIUcgOpNOFOx5mUHZCNJcJ6HhkcLNvUUekw/pFsIH9bH8E57+mF00wkYKzuk28hAZ06j2gRANDVNUhLz+TMdy6DlpswSHP61eoeJe5wwjnW7ITf1GJPNIbJPl4VI11/Iw2zsZAQ8kiJ6oMny7PMXI0WImeFPXefg+1WljN0b00mn0pHm/HMZjJkvwkzEYNxzVeWDqyVibc7EsmzunDjR+6mUjhNXiOfmNLIUxHlNPvvDJu1NEe54ytI16oX6pnlqWM2z9TNhOSDVvggNHdfiqjGMJRQpQ5H1a8QEp/60UE5N09zX51aXCFTm6IBzCwJn4gJQEDGWynRfZTe34gCNRaIT0UbwedKmy8O61SfJcNa5FK+w2PE03OgfA6yahVG7v3qHbuywc2G8akNEae+Uqx2DtBQmLnfzejmYBYefkzKF/bVq4mzM+ivr3TuIH1DZ8tYqHs1SB/MqXrifasVDFVDJPAHsQ=","authorEmailMD5":"981e6f0be2bcad7e6de0867420d6c855","message":"Thanks for answer.\r\n\r\nBut I'm writing my own impementation of MVC 5 Identity, so I need to implement ie:  \r\n> public virtual Task<string> GetEmailAsync(TUser user)\r\n\r\nbut email field is just in TUser, so I'm writing   \r\n> return Task.FromResult<string>(user.Email);\r\n\r\nso simplified method is :   \r\npublic virtual Task<string> GetEmailAsync(TUser user) {  \r\n // add .ConfigureAwait(false) to returned task ???  \r\n return Task.FromResult<string>(user.Email);   \r\n}\r\n\r\nSo, add .ConfigureAwait(false) to such Task.FromResult<string> or not add ? :-)\r\n\r\nbtw. I've created blog post with a lot of your expert content in async area.   \r\nThanks for writing such excelent posts.   \r\n[https://ordorerum.wordpress...](https://ordorerum.wordpress.com/2017/03/17/asynchronous-async-await-task/ \"https://ordorerum.wordpress.com/2017/03/17/asynchronous-async-await-task/\")","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"1befd94f-4142-3140-b608-e13cf4385861","date":"2017-03-17T16:44:44Z","timestamp":1489769084,"authorUserId":"disqus:tomaszmodelski"},{"_id":"de9320ef-c081-3e39-9320-fdf76b345803","authorName":"Tomasz Modelski","authorEmailEncrypted":"VqD8G+Y7Sfm3ghpko1LhWUw0dN0dWVDIfR89H0d/ocpOwaPSZGxoJHwTxdMcfoo5mV4fNlsByDn7AMWTGJ9kbgGUYmB9SaAXNHatlRgFfrRnOOwoV62rHRLdDIaxgQqDGmMrBoRIi6Z/Kiq+rhZob9IEida1W9UuJb7Pod9Ju6girLhgjA/QU+gZ8HtGmS2XE3lJmroGeEs1LbilU7OT0DyS6n19fumA0CLLYhqicqk8Gh5owdlMYnKoWIJzk8tc3pJnQKLC9R3Wns/iLorkoqQAXdzIdmKa+0LiWHcH5xJefbHFC0z5mjXTgNyJvfAdiVWHUwewdlp+KR5Oz6ksSiULniWXoi2djTrMgavB0BhqYj6+bk7Y0qRIg5XfYNfYTz2BN9VPBg4ZyFnYIDoUbD/OrvJ6zbdIUvrlEj6byNPBSWWw43W9U/4dGIQE6QoCpUW9AbXRuXlVHRl8futh+y4RP14cyxMVZGcTZ/eC2jRPOMhRQ7psXQrk4vkzR9r2dF3OSyzpAn/gng9CoWimCRMigZtjUa6mMp99mDxTUuvrQj9f+ZSZWzy3OIkFmdJHPUPnICtHYcH+vW5vG0NWkOYxna7qsndDQanjImU9QhpMHJqI46FbLo1LDFPJpZscpAAOP80S4vW5JAR5RXuNH6ZaLoQN/VS8EeM8TyZUCZU=","authorEmailMD5":"981e6f0be2bcad7e6de0867420d6c855","message":"Question : Do you advice to do .ConfigureAwait(false) also on Task.FromResult<int>(0) situations ?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-03-17T13:30:10Z","timestamp":1489757410,"authorUserId":"disqus:tomaszmodelski"},{"_id":"f5f701f9-02d8-3d89-8c46-2231757055ce","authorName":"Stephen Cleary","authorEmailEncrypted":"jb4l7ri6hENLMnjX5oT+KSmr+RyCjLImqvtiC5r+Bjv7TJDwXUxoxRqLhAAFHaEwlU4PtJa87NVNzE135zMnUV1V/BTvCIuV75D3quUxVup3Qi/EhqwuOq4u62SGH5AbJu/aW8zKTPWmZzCmnVbe9YDv1Ui0/bjE5zJw65CTPj1ghEs5kL2iVp1BIrK5hQunscnmJpmSkooGb8DGKwcyUyhjPwpiGJzngTZoDR4HoTqEAhVrXC0GvrcuAPpQEG4ZPvEnRbF3s84E/zGHA59TllaFBPnuqFQO2iDHNyBcWgdzhxuRhCQQ70BqaEDCwAf/rS2ig0/b/886BrX+C3TolEAYuGMAWGkQXqqANs6zsryrDA07O4vKm0N+UO2Br++yF7lUQqNLy2PIxWvLmr3QUwqGlD2Qhq1A8IvDNq1+Fl/cN+v+k0S2Na1FQhjuAeulROPlIWeL1sxpt5CKtMoF+rK1G4QRgK1sM9nHp2y3J2Ey6uCr9l2UOlVZAOz3vBgQ+9ITeWVnN5kYakA+Fjsmk+jr6mzQEgCQ4Yzy1yo7eI9rPukuMnnLfoUQ/ZIVnXF69OxeAULlQUOWgHbrkeXVXZif7pf+a//BDGrR8bxZAJCR6iLOlJvfsGJlnKLZS70RZ5N9jJfQwGF8IIQJBb9S+75vywuk7VGIKLfF3gPpcTE=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Actually, you can't use ConfigureAwait there. The compiler will not let you. :)\r\n\r\nIt's because ConfigureAwait is used to configure the *await*, not the *task*. Since there's no await, it won't work.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"c05991cf-e2ef-343d-bd6f-e96e2da56f2e","date":"2017-03-17T19:24:46Z","timestamp":1489778686,"authorUserId":"disqus:stephen_cleary"},{"_id":"4a3e4bb7-1235-3039-bc58-641d62c4fbd7","authorName":"Stephen Cleary","authorEmailEncrypted":"dU/lh0Z4GOfJHNt8sBkz5LO+RiKNbl0lJoKcdUw6u2U7dl0J+BrQwCWbArx6bS5HWSNEU8z65uqbw+T6xVSRpeMMKcXYsvw8WkpHXBWZweCjCl+XoCqhwqPHd5/MLx8+v2Ne+FDSz8pyxl9l0Pn+I/ABEOKfW39IjmJEu3ltbZGhed3MFI5kz4kU8xMobzAu4eKAnakDhKDKlxZKl/2BIFzOWqi9DZ+f9I8pyi1Dc21AHI6u36hjbcVWgAcZ245cnPTfM1vfss4k6+SVZi/cBlYi+f6PZwNg++dCBui6Ez/ymKGCyVv70UjWHf5pksE9jFRrItk6TAS88eNbbP1iOvGSEq/4mZaX+7lRk2K+uuUPfj1RfWhZ1vXXX5P4/XIgMh07wKaFasGxm2efDcQtZimvAoMJ1doPpC17KFSIrqaVo2FCaJIaha4sctiCtq7Kku7MLXggZac/zY2mvWgp1Nuc0Ur2qel67iptf3Sbznphxdy8IaTfpLWMLMKSLI05m8YO6TtDJ5uJn6bUB53KnMDonrYGk9Nv3slx/TxyoG2eciyQWu89gSY0ljxnw0NGMIaWK9YhvCo5F+fTeAory+Wkun/40NwbaTZbYdoAC1eM5XmznCOHPsCb6C1Tre8OP6Ox5rCY8Kl2DrIo/aa62Gi9p6ZMcYVuUfIB2eLZEWQ=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Right. You can't return ConfigureAwait(false), and calling it without using the return value doesn't do anything.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"87cc8d30-89df-3d8e-9f69-1952675b4f50","date":"2017-03-18T22:30:40Z","timestamp":1489876240,"authorUserId":"disqus:stephen_cleary"},{"_id":"b17b1f67-9252-3964-a142-4fc0ce44cf41","authorName":"Binish","authorEmailEncrypted":"eCPBHzlwgIA2RTlxBVR/cljFKcZhYAh1StqOBcQ+Yk4JtKlDvwmuvA/olfI73ejulZkRMxamc9/jsdjdoCNsHR70v9/yLCtk0N8q3YwU+c+GFnv6Vsg2q6PCGa2sMMX67CxcGWAfUzd1gVLeG+sTND/ust1/zDzsb35fkwUh39VtvcNr9dXe95pVjHYnBdoOjYn6LYM0lwlsKrQa4ghA5yBwXDL38e7WJL0cWTDOcBn8GPdVpk/jrpTG6gmxdMr0BrwNAX0ELQSafwixArJJzo5VQGOjDDoO7KmYgqtYxXjdr0ut7uq4Ag4kZJT7NSsCO1rLEsWjyjnOJ7EQUHQxiVgMCsDC/TWZ2zmByCpF1A9OkxnZSPjuE7QdmORW1ic4r95rinmQeCdPiqAQi6XpSQB0ghrabEqp/ueR2i5lIfE+hGhKaC09kGNiuXtNg5E3xbCQXu4kZovM1GMnALDRLpcBVIy1DaWnkvGcb7OZ96bi0ozUvppEqxkbKAIBj/sXImhEtPb+oX7D9h+qkck5SD1a52qR1LiSQW7U6Ys8UQRqzAb7/Jyx2e6KQqI+ZpDgs3oqqy92tNNPRVffiPfhfuCxmQVJnCbj4kHW7lsaP+LjvRnUF0mrHrdtdBeGp5Bh9WGl3WXLWsLlUEEbFN7b3oiU9T/6ek2NcYCIgPyCF5g=","authorEmailMD5":"920fa8e2e9892f8f99c3d814c8091e13","message":"Thank you. May God always bless you. Thankyou for sharing this post and explaining it very wonderfully","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-03-29T10:57:24Z","timestamp":1490785044,"authorUserId":""},{"_id":"1304fa46-3f80-35a0-bfb9-0b5342a70b99","authorName":"Stephen Cleary","authorEmailEncrypted":"uwU43JAyoZD/sdkNSZkIZz0EyakR80B8TuhdPaOZbdVM/mEwKeSXS7ea1XDQ19ZowMe/dadLJ6fGNPeFErD5f9IaE9y/lGmrpYPt8dMJNr2rhwraSlvcjY27/PKtwx5DuHA/vc47FB8Be6TuR87v39R+jooaHmzsqCn7kGU5L+N5RdH+wvdXfPfzwXeJVxaNw1thyVDKiUPMFe2XX/0RAsVLXiCPmnSNBAh8bTju28kjhvG3e/mHWkeKkI9cC9XIbYi5030hso9d3l5sj6C5OU2f/EwA6P1hIypo79TPKiWIjPgxayLMrlhHCjGLVtNkB6D8BRaZhOV3feVbAbF+V0gE9arMGZT5ZFIRJF30ZpycBuHpncaluzXGiHm/hEx5w5rFeu9Xg1fSVanIOQegkDML6A55CqD5CpPv1PnYgRP8SSONXK63TKzTNo6ED30I4xCmz6UTnangWsQRkMOQrJ4G2Hj8XajqWIztCPBpnT7HqIBM8ZMYTO6KqSYnMooFIcoixC5BCM5LYMkLpxztuH9LfyeEgl4yukJcfflez1FT8OoIeE39V7YWUDP/L4STTJyrF5lGpW3T3iUbN0lMyn/mdF+O5ha14VsYshZDzC+pN4Ky5S8Xm19ikS74GgWxvhY6FoM82aKiWtE+1l4SbNPRCVv2b5fLDADixqmYJnk=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Sorry, I haven't dealt with that particular scenario.\r\n\r\nI took a quick look, and it appears you are correct: IEnlistmentNotification forces its handlers to be synchronous. There isn't much you can do here. I would certainly raise an issue with Microsoft, but in the meantime you'd just have to use blocking calls.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"fa0441c3-b394-3e08-bc51-97ef74c485d4","date":"2017-04-25T20:32:39Z","timestamp":1493152359,"authorUserId":"disqus:stephen_cleary"},{"_id":"84d03638-a1f2-37b7-a8b6-b73ea2c25093","authorName":"Hai Le","authorEmailEncrypted":"tZgP7a7ur+NHnxLXjXpvK+rnWujRs6xNqSt6dNIRASoHF4cfW2z3jFdk0D/Okem+UG8spx8PxF9POcvoQzGJLCnWEqY3ZZbfmosBhJuSimMvX26HeNaM8ZOy+31NpjXP7ERX/uTks6u8rB+DfbHm9368w/bjmSi5qwKLa7R52BMDnmqLNmuu21R96a8mdYe0fDzU6DMenivGrA25NemaNuYbOSF/ldP7gdbGXso9CFMBBvr3loHBRbULYLZg15bKOsqtfYErq3MunthcZa3NhuWBbWBXN7LQi9IXjKm9exuLXVUb1OumpY3KtiYDWCRdv2k5p5nzB11JsUJ/bztyOOYQma7U77tDAFkEdxIpjqUEixWcU31NT8M9j4tl+ZLPXauDYxaUBagNMLzST664a12rDo+Cid/78u8PBVCKbAJixAn41BShffkRDtph9V8rXCtTTmMVX6uXWoZZwXSGfosjL3wshiVI1twHNuIpoQvFo7m8CNWW6BF/Km/C1Fmv91HTTc/P3tGqABiayFGrn7G3gEMbitn0pqyfCi/QymYPWriVlIBY6fG2EFcgKaQa9is9zX6YdK7uOENSxz6O+9IP7S38PKEfs5RAQCiXTPpxtX/BjISpCR3XtqG8ueL0+joKNTQNGLY5yla2i2Qs4FCNRviFyoLRpK4d4EDVCNg=","authorEmailMD5":"fa153687318c55d55df5e5ba8f32ac97","message":"I had the same issue today and found this little gem!","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"646b261f-a3b9-3e2c-a9ca-b8a6a78466ae","date":"2017-04-25T00:15:04Z","timestamp":1493079304,"authorUserId":"disqus:disqus_OaaNMkV00R"},{"_id":"fa0441c3-b394-3e08-bc51-97ef74c485d4","authorName":"Christopher Carrer","authorEmailEncrypted":"Ju3Q3HNp2x44/Un/YNtmUBnLFNtoO88NDX+A6Q0oPHNHfdLkD4RaRKfU4EWZxkjuksuZx7t7X4t2jbCau0uGtvzZxBeVu6hPq2sfiDs06C98FFlSwzCk0kODKWF8DBu474vM2yreP0hA54H9/WXysvSwL+Uj5JF5HGjisA5tXPrv1hoh3oYTJ7FylFIDKVbIyapNZ0QVwf5oUXkAm4TdRUTM9NNU9e88Cs9neBshk9aQe9VmV8ZKpREEW0kpzAyWo07LWqccXPskJyJK5WJHBCx246RuL8d1imWp7VeHoibKsMy/iR5vCOqBn2HqLETIXEar7JnX1ltF3pM7hsBgUhilMRObOyxOpx/584Y60fF0LfCA4CdYvUG2LSsAU+HQx4hQsNozGH0OGATCLTVlbs3t3wFmNFtpN4OeQgmWQ8CcVGN3bgfYCBkikIJ/whOBvtk3SA1JeW4w4WSkt0LZMtGw+8WFokjBllGlCEJuLrlQ0Zf4fwu+GPwg18IHybzKSoxUJUCTZNJ95gxSrC5Q+URpXSQkBye8WaBcSwIxDu0GkCCQ6VSoFVTNSdRMPCVmeFn/c2R8M6p2g3GwKPlGJ8Y8x1UTekzWvmdhcH//jGZ36pJaFUWwRv7pdJ5LSSpbmF4mRE/AyJFzbV7EQa2YQivzw2/2gYBOQ1ybrlJX8oA=","authorEmailMD5":"8f879e3f8c211a45166d50f0b72fe363","message":"Great post, Stephen, thanks!\r\n\r\nI'm running into an interesting problem with Transactions/TransactionScope (side note: I'm using the async flow enabled option) that I'm not sure how to solve. I'm trying to implement IEnlistmentNotification for a custom Azure provider but I'm a bit stumped on how to properly handle async calls. In essence, I want to make calls to azure storage using the async library calls but that means I have to 'await' somewhere and that is the issue.\r\n\r\nThe IEnlistmentNotification interface defines 'void' methods so I can't 'await' any of the calls I need to make to azure. Sure, I can switch everything to be synchronous, but boy that really stinks that I will lose the power of async in this scenario.\r\n\r\nI have tried googling/SO'ing, but save a few articles I saw that didn't really help, there is shockingly little information on IEnlistmentNotification with async/await.\r\n\r\nGot any ideas for me to research?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-04-25T15:29:06Z","timestamp":1493134146,"authorUserId":""},{"_id":"45607648-bb68-30cd-9985-520d1dead670","authorName":"Stephen Cleary","authorEmailEncrypted":"tCoBBQET7aRehw5gxcbFwB2fy53KWlC4zfcGqsyN6hAyPl1Cw7m3yxNmXYym18HZuhuKxvuulTJkC1KZa1eocpjbvnlycFOatyjfO/d3yJ+h8zN8IlaenGw5Cmw5m98XsS5Ou7afqGb2O5ZzyUL8VeAX27T01EvsFsPUPVlkoGluCfKB9W6pd3DhWKuxQD/t/oxUisFR5uvY43GZxp5U5L8FsRbCExVyRt4Ih5HnPovCYovl4ZybR6lQktyvYloq/urTbAxOsl6+eNkbsHEG6RnTZ40NVNDYm5hoAyTNyxXTdG04k8erz89nIzKwqdJEzbSLdkd7GrEA+6dBLJmVV+VqFmlftOyrMIo1P8oqahdNPsfI1ieY/NnwS00nHm3qfLf0ykUbemg6gXkqvCVDq40QUJhOY4/GGCkV76Z2wXbyR7f5saSdVxXTzCd7pFLGBa5qxlHBS5BvfRw7p9zfE2IxIsEHmhiNpXkzzIzUtIDslly7lxnniUn/jvOwlGYlQ7FkB9DyUpjbm+mjWL6bOAwTD1gJjKl9+l496G5gLOxDloJ0/dRpjef0rOK+hXxKvs/jSeXJRd57obvvuVmM1uCRsSjP53ThkZKlivoHNIl+nooCo2tHhLkOuyh3+jIwoCplBrgSv9VMfddAH3tgYPEP1hmsMaXqm1L/wkkaefk=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I'm not following the logic here. There isn't any code formatting in these blog comments, either. Can you post a question on Stack Overflow instead?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"4ca8b46b-3605-343b-954f-6d67bf854b91","date":"2017-05-11T15:23:10Z","timestamp":1494516190,"authorUserId":"disqus:stephen_cleary"},{"_id":"4ca8b46b-3605-343b-954f-6d67bf854b91","authorName":"Srinivas","authorEmailEncrypted":"CEAP27ujnTIdwxSQUWDPllhU2rLkTDoDvZDm4xY7bA+eUt+UZJdFBq7gQFA/+FfDZYysTw2j8oyrp+ymMywF+fUFSXGA5mA/TJiVpXR8+v71upXhGpj8OUA8Ks1N1z5lOFO4j5ROf2aFjHCcIaZ2MX3beUb5w/x9te1/91/2zvnINJL/JWhaf68ZhYChHk9pzMnQ9MYg9DXeh3q/Os9UY7bDspsY2nQ7Zari/WZaXdz+MvIeIUUG4trkVGF+Q3pjmieevSgCPyAEal7RP82fa+3N4Pv3A5Tz+j4IKxK9vuYffeCnlAoj36kFiJS/bZ3so+AQhUueXTakgvosw5j7OOl1twIQCCK8tu4sLXl/x4+0YGuxUtr24A9tK5NQZ9qm2onT/V1/cpWO/YQ12rAo+27o0Fvx2CFmziGwuNAwigvIE8wm48dTk7exOksClBiXgjlvfr9j9xGfbuzT5EFpc1EjC0nghRgWNyhrwgF35sfGc9Ti6jfpGK1SHeXC/E0PY8hQywtXihJkn7qvpSZeONmVoQ8ztyb2oYOYbcYZ9n+YdBg3atD1+fLSR2Jl6tffec/sTSWZaaIzBxL8ND5mLjGgVliSX7t9y7AVmC9y56fTU3WUS1RICzryrW1NM7iNk4Bs/vJLlK1p79hdC1BJCB1b4BNZatpjGDtclcn5hUM=","authorEmailMD5":"7bb5418ca571b2532390238b16455697","message":"im also using this await but my problem is that if i call another method then it is hangiing  \r\ncan anybody help  \r\nhere is the code snippet:  \r\n private async void GetCardDetails()//Main Method  \r\n {  \r\n WinSCard scard = new WinSCard();\r\n\r\n while (scard.IsCardPresent == false)  \r\n {  \r\n // System.Threading.Thread.Sleep(TimeSpan.FromSeconds(sleepTime));  \r\n await Task.Delay(1000);  \r\n try  \r\n {  \r\n scard.EstablishContext();  \r\n scard.ListReaders();  \r\n string readerName = scard.ReaderNames[0];  \r\n lbReaderDetails.Items.Add(\"Reader Device: \" + readerName);  \r\n scard.WaitForCardPresent(readerName);  \r\n scard.Connect(readerName);//Waiting for card  \r\n lbReaderDetails.Items.Add(\"Card ATR: \" + scard.AtrString);  \r\n lbReaderDetails.Items.Add(\"Card Inserted\");  \r\n // scard.IsCardContextEstablished  \r\n lbReaderDetails.Refresh();  \r\n byte[] cmdApdu = { 0xFF, 0xCA, 0x00, 0x00, 00 };  \r\n byte[] respApdu = new byte[256];  \r\n int respLength = respApdu.Length;  \r\n List<string> lst = scard.Transmit(cmdApdu, cmdApdu.Length, respApdu, ref respLength);  \r\n foreach (var item in lst)  \r\n {  \r\n lbReaderDetails.Items.Add(item);  \r\n }  \r\n lbReaderDetails.Items.Add(\"Please Remove Card\");  \r\n lbReaderDetails.Refresh();  \r\n //CallProcess();  \r\n scard.WaitForCardRemoval();  \r\n lbReaderDetails.Items.Add(\"Card Removed\");   \r\n//here after this process i am making it wait but during i cannot continue the loop   \r\n await Task.Delay(10000);  \r\n lbReaderDetails.Refresh();   \r\n scard.Disconnect();  \r\n continue;  \r\n }  \r\n catch (Exception ex)  \r\n {  \r\n System.Threading.Thread.Sleep(TimeSpan.FromSeconds(2));  \r\n continue;  \r\n }  \r\n finally  \r\n {  \r\n // continue;  \r\n }  \r\n }  \r\n }\r\n\r\ncan any body help how to continue the loop before the completion of the event","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-05-11T09:39:50Z","timestamp":1494495590,"authorUserId":""},{"_id":"032a9459-203c-37e6-8d46-9f17ae56eacf","authorName":"Stephen Cleary","authorEmailEncrypted":"FbWd7TnBURg/XTzqhmfLV36dHQnJE0lCKHKZrcyloRlOah5bKA3PSAwwYDEvGQBSjtFBdbeetd0e0otnzYma8RqziCOEC0ULyLl1/js/XlZY5DBzloMBBqNfghkEtG2Fuf8lY2tNNH9q3mxHleTB45IAdDPMBtYm6UAi3WTD2qGLf+/yAiyx+aEsN4Gy9XHrExW43DUHUOBJoqGzBnjvaCT6PA2DnYQMn4S87W6gnAnPhnkg+osQkpltSFOWQFD9fh0/uDsD6Z+n395m8MiMNGiArYM/0xGqySsHVlCSCG9/gqc/YYLQjP2JHHSivMLV1Ht2kt0/W9cYG9WxVnipL+hizMy4It5B1jON3VkfePt5l6X03FyYxVHVzEBIpinWDkHGblpCodIBI4ptlsMAyKKDGkTnAlohvNM1JqPFbInQNj2k6nq7UxPXUfVhl3SArlZpzmzpRDfFJ7dKFcHE8NLe1++Mfdnu6crZ3GQYxNc8K298rh9b9Cpx1wJVWAUWEXel5xVW400zke+d3lLD3yz2SeWCoorwFXmtF8JZb3797aq08YuTumqGkExjkAhr+J87jOWWERW3HyZfdXr+7AA1GiZmTXl7RLWa1dxaWccRajoaDqMca3tt5pG7y+errg/KYZRYPcSuoq3uyHdWs8IFeZw/n/19/L3ur571WXY=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"AsyncEx v4 supports every PCL that it's possible to support. What PCL are you using?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"daa4657a-69e2-32ca-a723-6677add12336","date":"2017-05-19T12:53:33Z","timestamp":1495198413,"authorUserId":"disqus:stephen_cleary"},{"_id":"3476573a-ec2f-3caf-baee-a388a45468ac","authorName":"Shimmy","authorEmailEncrypted":"PG+VxGI7Uog3uuimqwMuxnR2BdfG6fQfaz1E53X7uNidGObTNVvky0UlQyLp/V52pJLu8YAfq4MLdfJRfjaGI96fpg0y27OpZqE8OrRYwRZdOlWgMo+5ovZFgjJy0haI+oiob8KMpBOT+b7lK5mFlaiaE1hIwIZeV02rQp6px8SHjAj+ulwmX8917yc3+hlO1k5pm/eDw7mGfGw3KHcp0aXanrYCQfF2kGoUPNJ7yOOfnpAk/20BGOsQoU4xhlLCqzp8tNMqTZh+PRRhveq6IYjZ1APy9Y68xHCtYQ6fOGyFhZ8RE/NFZ2kbzcvaNSseqT+Mu6xHfaM0n/tXsJ9GOW08i/wSoKjHGiMq3NeORrmFKRmfXGR0qUYHOwxc9HsqDd1emRBTqCXsRTU46czDOCrlYW2DJIG/eFnNs0+u4UHb0heQ2Wc5FCLt9BwlQ0ZUYUVK3DbtYbraJPYKQDDqu25Cr4zSP/AmIMwPRzev4/b7PJ1MrOUGV+v4GnSwRBJr/BzSv/i4JmIgT34zrde+10SKOz2Ca82IOhBk9ADGKPCamuGjCxHLQzZerY+5WApsdG43df+ix1wusUOwi389KNvJwW7m8NgeCpBUmk3hXFIFfNLcKNT+YgaBL5toQbxNAQO8irB+C/SlvwfKCrRuTTbI5UBU//1kS+SGziu5WkI=","authorEmailMD5":"8ac32db29e5bc37f2baef574334d79c8","message":"Xamarin. Profile44. Cannot upgrade to netstandard because I'm using Prism.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"032a9459-203c-37e6-8d46-9f17ae56eacf","date":"2017-05-19T13:50:31Z","timestamp":1495201831,"authorUserId":"disqus:weitzhandler"},{"_id":"3823cc34-d05d-3981-a3d3-88fa0e319c78","authorName":"Stephen Cleary","authorEmailEncrypted":"SGH5gWBPFTG7mQoqNxsrmV8jrnS49jDWD0oOcv8rHHRGrXrwtjN+QHqZ4/8zf2dEUS6Qh4nU7x11cebF7ck/5qFyAWq4X/z1su5aGf8mcHXRoVF0gjs5UWMxycI9d93ouSXZpI/PRIgHjja6z4AKxu+vJGRoUos+/XaWpc6FFoPGh1vafmnoPxb4MhHCR0vsLSQdcxxpOSx1ScHSocLTuZwCTvALXYMN3Rl2AGCwmroMdfR0Qq5ToojCL/GKhlLMxc9OL81g5df0rO8SsG3ZzD5l0A+DpHS/iFvZRnGHQiOTXlsgtLzmeMrhpfc70YFwlT87JJjCeSKXnyHjSF4C3Nyd9xwz/RaU9yLwsuN+DzdCYTOVWMFuHXCMEiVfY0nffA/vcERGertd9QupxR2NSeScBgdO/D4qQmpNeejYVJgEFNRojUhVsCqXAYl2IDhYql8TghRbumDw98izSIOMVQrhcDDY5yfYFOb2RMHzQ+i0I0ThBNlkuJfoCY4yJtfgW+MSy46y9LyNN21pcicoRLhrL9PO2z33UKZYxgXkrZbmG9gkToiWpdBJLW/iXVfwSVvDf6RRew6+LlUJNnLpJQkB/uu1B3MDF55Tkyk/UpQ72lk3WYesw+Ty0+tgnot4W/757Sh4nTP7g/gFPqZzeW0ghJBU/Rcid0TV7y7h/bE=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"You can, e.g., clear the current SyncCtx and resume it before returning.\r\n\r\nFor sync-or-async code, I recommend a boolean parameter: [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/mt238404.aspx \"https://msdn.microsoft.com/en-us/magazine/mt238404.aspx\")","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"57982cf0-801f-3940-b082-4534baf9a7e2","date":"2017-05-19T10:02:55Z","timestamp":1495188175,"authorUserId":"disqus:stephen_cleary"},{"_id":"57982cf0-801f-3940-b082-4534baf9a7e2","authorName":"Shimmy","authorEmailEncrypted":"bq2phd874wD5HdPs5wd3+R4i5HAOpzmkoQYZbwxvo83583gXxiB8obWT3nfx01TzS3+1z1eP9AOfyLgWMjDpKP8113f/Yj1DgraNdxhalglGKV83Tt2s48hWwtRHPxw9X9TQXJ9UmsbhrEUGvJYqFEcSke6ngAkhuBJq8Y9/kdGuzS9igx/wTsfLVrK0Zan9a5S8U8Ix+ILf7Um4vs5bTD5EwxLjemU9d3JmpD80AIsaHdMnWFTvbuBU1t4bRjc1oVBZALEp+75NNJyzDYxlp8oieJZGPgDXzTOaq7k7RREhVQBrXiVyXSPY/LCfgjFZO4w2GERn7LAX6V/9y/D/K7fDH6Chc3iemwg7LpW8LRV+kE2IIdhcha1HGGriHI5L//ZPc/dk82/fRNc84iGwzQnlyQkam5kJmNWIlw7wP03s7ZnYOjVuhWliTxCZ/O1YOnVAO+L5jpu16KM2QGhtIFXaBe7oWYlkNcPIngRadmFhyCrdFDWztgUPpSP/56iT5hP60mwshvmoDr5uBf15DpOWH72f8Ywf2FCX3/kKgOx606D+F2xy9+R6cgPm919wEbK+gG6gwnAt1uuJM9LLJ/A8AmzH8DzhHmSK/W+8wFHRg6oCCgPwBGQ5opwQYoTSpWqGagAGD29Bwukcnvm23yAnwobq8R37cjRmLD9xVvs=","authorEmailMD5":"8ac32db29e5bc37f2baef574334d79c8","message":"It would indeed be nice if there would be a way to control the `ConfigureAwait` in the inner tasks by the calling method, without having to set them all explicitly. Moreover, I sometimes call the same method from two contexts, one a strict-synced the other an async one.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"6065c7ad-a888-3901-8f15-f1d75b106821","date":"2017-05-19T04:36:22Z","timestamp":1495168582,"authorUserId":"disqus:weitzhandler"},{"_id":"b5caf573-2a02-3dc1-8374-94f26f41275d","authorName":"Shimmy","authorEmailEncrypted":"Vswn+tmfY+QYpFa/yALzFkkM5AULGXuvmFfTDhKeovFEhmo0gMG0Q70T7z55YfLBnQuDXZAcfIQmKbIl1uUyRiTi4RN1Q2m3+EOMw40GdqPv2VM+BArknZVdahyQUc4zKkPzfttmDyTfONYrBSJP5blbozRuzlb+Lcsyv6BundgcYHjrDsoGpSjEO3g/lL2r7pm1sXHbM2E/hminw3ZXOtrMwNbBO7zlonVPAgFVjUGZo8HcUzdQh2I9Ed5y6uU7VoVQGvWJIBhP+9D+1gp0rvc2763NpwYyWoTxfi/tEfchf19V0iGGvETm+FnIkRRJW239GwJFiU0a8e0fgmpbiZJ63d47lxrv1H8pY7+b9YqkiSrmiT/DeIExQwtHieio7LmP7J1AM6UFyGY4pomHIeegMNNDxpnCQnglOOZmddiXWCthlnjBZsXDF5Y+OngZqE45KoXsRWYQIui+SEmu3Jspbrad3G7Sj4VFj0wxsOKDZzAAxGvcdkInRzEysTyziTWwU8gnrh7uWpIRJpnaiDex6MSqRT+7LlcJIBATmdVswL09PG91dp0Rs9VfTjFs/O/ymAi5DGcHd1E6/2zwH+ulxOcnGwIxiWALDryCwbZVdGPGaASBbJbobPwsLSGsDarlErSlMeHqIsc+snWi353gBk/4TzXvGxNfu82HUCQ=","authorEmailMD5":"8ac32db29e5bc37f2baef574334d79c8","message":"Same here, exactly!","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"7010add2-83b4-39b3-a48a-142098fdfd6f","date":"2017-05-19T04:36:49Z","timestamp":1495168609,"authorUserId":"disqus:weitzhandler"},{"_id":"daa4657a-69e2-32ca-a723-6677add12336","authorName":"Shimmy","authorEmailEncrypted":"HHMwoCTwPzQsUD0or8SkXALj3yjXUF9viI50ig/ABkrC0n2n2TDxchtKAXL4degoSE4GKWmmNbrWoNzCOjhYnxjjJShT/RO/1zyrx/D4z0rx86Ql5ZUIYYUl3e0k+0SJ8AGBB3UBGE2Dyx5kJFUzxwbj0M2xZ7rrZQ7KUHJaHVvCbS32tEEobcJhgy6vJ0ElBoXgHGWfqHYqdjQ5lTq44Dixjel4AbC4cphnDFqbM/Z7EUf6Hm0WgJy/oqdQLYUdZCxEGzK8vRUFDrLqArBgfmJXplkgnh3RA3ZpGfzIq2ZYo4IyIgZSXDQI/26GpINMA1iTo55OADyvkk/SFJpCosimJayKDMwZ02ias8E84+Zuk0PqCvii/cbI6yxfmmJNorX3nUEpCSRGeQtYDOPTiJpwO+a0nJ0diw2SxfU2U0Ht/zTsitHVMXdYN17uMqb59NndedJwsGf1E+ro49i5UEUN1/VZPqAe+Dthb27Uow3OEtr1TBi8GrZtL/++93bV4kJwbhQ2++j03ho/FWUOd3whd++xXBN7Tfy+fHgp6ELKqVRLN3hXHxT9Oqyit4CwQ/wOKJZeoxymOYPMER1VZZAhrKZ4HHKZYYywHTdyB0y/eRbTzFopiAnUlA6wyb/ZNQPpgIDNiGK2IRiZvVtLXauZW45rl/DGXV8rUDrFTYA=","authorEmailMD5":"8ac32db29e5bc37f2baef574334d79c8","message":"Wow that was a great pile of important info. Looks like AsyncContext was what I was looking for, but unfortunately since it appears to be unsupported in my PCL, I'll use \r\n\r\nGetAwaiter().GetResult()\r\n\r\n. That actually does a good job eliminating the deadlock. Thank you!","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"3823cc34-d05d-3981-a3d3-88fa0e319c78","date":"2017-05-19T10:46:09Z","timestamp":1495190769,"authorUserId":"disqus:weitzhandler"},{"_id":"e4541037-96ee-3715-bd49-2ceb80f114d4","authorName":"Shimmy","authorEmailEncrypted":"SRYKNtejhLDRCVqe278WAx+mD48pDiz1K/xyewBU+Xl3vLjca7UdrLWCBy7SRDPun3zk3i8vr6NPbilFSvS54yQ7JaUlBcSBw0REmJPe9KifRr9zfGaOgYV61bMaC6XQsMjCMfBZh/PkdG6cgdmWq88V0rUkpcowQ3QauswGPa62jvzIc4PfNiMqsPwdNDbt+k4zSHYw9SFM0s3W0L5f86JEYwhFdBUCHThNy2lPYXOIziGbkpqDujixFaTJrLcTzDwymIMrxe1pD2pYCnFsWoaTOXNiZrhS2SEB/ai4r42gOuVI4uvsy+IwZIAz8HJp6+g4eqqB2Nn88JshskqiLT6EpZUl3GuiFibVbgmqlmARnOopfdoRw21riWJUSdXOf/V7tT0X3+dBbTQ7P5SQzcFsvAOFTxdSTxpLuzWCPy8L0Mz6QqENabjIrDjSp8Rl/GKZmZMCwBZ5C6fjhWo8EXSiKjiCHyz63zHYcgN3RDsUEr8lIShJf+EYm6t8wL/bgYf0tYHwEB4cuSG2D8RCwkvrIDL8DQiG261nCf6JPpgibzYja/cFGMX4MSYsD76pgdSKmdLRFTFe5dsHjNzw4hIWtvEvYX06XGf7+SmygiyERFmU+iJyFWtAWZzXV5bKbEAomY1mcPU84psZCet6t8jtgk+/q6cQqPBaldKltNo=","authorEmailMD5":"8ac32db29e5bc37f2baef574334d79c8","message":"Saved me a bunch of trouble, Thanks for sharing!","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-05-19T04:33:04Z","timestamp":1495168384,"authorUserId":"disqus:weitzhandler"},{"_id":"ec05a6e2-ce9f-3222-813f-9edfb2c02ede","authorName":"Stephen Cleary","authorEmailEncrypted":"UsnoGmKzGbrlIUoEhsT62jpWa5zOGDQKXPyN1/MhTA4FGj9KZ7wwb7HJ8iDWRS4Tz3gIAvX/8Jo+n2plGWQKlNg6LVmBnXJ1VhVome3RpD4ANkEdhbP29/elj8HbQFblZgIttyf+EuJlPy0fkKVVunuoTYSuHXszohiTvQq8LUoOH5WLJ66VeVtJSd03ayKee5aXW7Z/qPrcTdQcUQgwIZUAavvr3D2FRXKBsGPailvCtmAtYnRgOzny4lC5rrYNl2bXEltHWFua+yeTvPTP8PqLiCcm7BZspCLOGI1E8z3wyU3jdiBx4Fss3JcP3UuNBX2bUA9TAw828CGrqqw30m5VEdE1nixNfFurooz/O4gFYtAKitUYzATnCbV9c5fWJlkeYggEm7rHEmQlVBIfsJJjhp6fq2GlTWsilzN2OOCJGDBZG3BZFoJCo4E93ns3nTobrF1fcQlnTlRuMD0NsYA47YBIzcMWDkT2wbbMbFlqnaKNbpHfGmBIrwapGifPS9d1JTd8MTtGryFYOIRGxJUsvDvHfJYgdEzOheo87yeema7cdxgZT8wMH/qdRWX92L2usLuV/0gaZ6R6p5aU3iYkBgreOlMZPWYDD01c+FXPCEtHA7JrNPrDAlnaXG86p5s3UNUOfzSrysqlpUNBBGi0I77nq/s7uv2J8tZodc0=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"That should work just fine with AsyncEx v4. If you're seeing an install error, please open an issue: [https://github.com/StephenC...](https://github.com/StephenCleary/AsyncEx/issues \"https://github.com/StephenCleary/AsyncEx/issues\")","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"3476573a-ec2f-3caf-baee-a388a45468ac","date":"2017-05-19T16:36:01Z","timestamp":1495211761,"authorUserId":"disqus:stephen_cleary"},{"_id":"42e48f6c-0238-32cc-95af-9f3312264c36","authorName":"Shimmy","authorEmailEncrypted":"chSzgK9SpvAdZTSeU009VepIxcE1KrClGCpXPvxsZna/WppitJZqX55IFBUuDVD7z/GftlWw+HE0GIQL5m0FHKgKnKQm9k9MC+Tv5xV3tc8Ajt7SvQJi6tVtNUCRE92Wdf5m0yNfRLl0kKt8WIRmvsBBTp1r7jo7R3Pb/jmM508HWyjLCOlamSa1VP5EeviAI9r7lHWivPY09idEgrHzddMHm/4LepomOWZG1QxV0Dl/oatptWNB9eF2jI0K9uArsjUHDGZfQcXNeb7gX54CB6TtyhyC8uQSTXnFCAyNdoE6AXrC7LaB37p3qxoVfmU3cBAROvKsHmsrYOjpJdvMl76OZQPDpdpJOGdjs+OdH/5CC7xNRzN1vA3rl4vDqR4m0eWfhr4r30El/MneU/jfTq1gSAymXfRNApmm1v5I1qGdKCuLN7GuHRYNzmQc9cBfOEB7ull8ojhdxbeueuoWbpYnTBmcMWdbCg2KJCvYN26z1H6hJW8Ehe1pM//sM8+yuMyrtFlIQFWcxJ/MPnfflJKpYZPjP+o5680oc6QlWSwemz8wY0+AM/EzphVeV4El0T+Qa9WYUIpjaRLOVaybffooDcJC6kAlrhl2e3+fc01Irozlpi5/lPl4Pz7cxsOwepjr22t9buTTbKfoKDA0VyDy/kt9XSW4Qlfyi4KPzQE=","authorEmailMD5":"8ac32db29e5bc37f2baef574334d79c8","message":"Oh, I didn't know about AsyncEx, I thought you was referring to AsyncContext, I now realize it's part of AsyncEx...","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"ec05a6e2-ce9f-3222-813f-9edfb2c02ede","date":"2017-05-20T18:28:36Z","timestamp":1495304916,"authorUserId":"disqus:weitzhandler"},{"_id":"a2d2af39-3b11-3f4d-b0c9-e873510cb9bc","authorName":"Justin","authorEmailEncrypted":"r3XcJ/NQKZK5Pw0JOCml2MZ65a7dGcCLJXxdcetORyHMntzao9iOOQIV8TwqDJapfIGxHKnVkPRqSppjWz9/P6TyxAhump8v7MKZasuHplT1rZ/7PfJTREq+mlTS3i9TZoicvJtDL3Kk9FvhjALwbapjYp/j8TOn4Sz5AjNzfFRNSpP5CA2X4Av/8wiFW7R1aCi2AxulRwjbSF4ivIEw0j1nqh/+eTO33BS9NXQY+QUeMS8Vvo1vL8TCvhp6DHtQr20SBfAbuM6fVT0X8FEcOPHkGid1sPhNYQhhuKN3PBc8BlEYr0cj59eSBrdiq1y16ttlAt8sEl0+akyHFvpMQbLLDexv7g7Prn3EJfnIfEv1Ohulabz58ciZBvOG7K+w9UBkoMv9T82lPsDTmv/BZXShGO/8HK4FQfEpf53bW8KUhnd8sOuw49Yer5Ba1N2qON9cFY6xyTgxNBodC6m7DI6zNk+ByXY75fAR94+HU5kFrToy9QF7UFN/7WAWrYNLb58qWS7+NxJKfONFKiEJNIsxe628zSkLNMrgpuZ3De05fjOCfdNBGiwLEL4KPdyXZ/3+r/yCmxOo1l/Rrt6bgaz8yDP+IV0FXoNutUFaoSewXBuQ4DakzzG7LziTK9w9W7PeDrSpzmdZz+izA1PXLaUwuTXSiLr2KClKGvbVjH0=","authorEmailMD5":"a5af054d8ec73d474af5ee43bf6ec90d","message":"@stephen_cleary:disqus Quick question - will the above example *always* deadlock? I'm doing an audit of some code and I've come across a similar situation that I'm suspecting is blocking our UI thread but I'm wondering why it's not *always* blocking the UI thread, it's an issue that crops up occasionaly and seemingly randomly.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-05-24T21:40:40Z","timestamp":1495662040,"authorUserId":"disqus:disqus_FCsGcY62na"},{"_id":"d0db2357-bc22-3ef9-b60c-7c2946656704","authorName":"Stephen Cleary","authorEmailEncrypted":"GWjCDRZi11vkUNWwtA/WEwG8ic+FF8cAMFt4x2QWtrVuLeBhOlS0uZ0Wj/hiZPRwoZ+9A1HGSPBZlS4d8E7DzA2NlU6WpjZ8q6g4bbUMlMfqF2iF1bZPJekmmxdDUiberZHj408kYXr8CGDJHgdrRh3IMh+mZBfO8SFEMj/F+MIyWuCGrFsMEJeAKJ7g2nakX2Ts5UH8Snpsx96qyvGJY6gHMvwrwFKZHM68smDi8W5Jnata4SkOGaWxWbFfrdQkKr+nr74jXtUQVsDRQNQNdSs1Nu9f3azhYEV+R26noamu9x3WgFA7jaje368Q9eN53JRCn4nMxSLuRlp5vF12s2oI8ojNFf9gt8PRxOLdFuo0og/dChp4qRQOs1kp8OKGLzz1E7XjMSOtEgOScPwTNoo7GLF0PXmddWbL5hR36YCOhduSpgtmNLYJEaQSA/2oQXKJAmMTGMBdo+FvSEcPdJAICUZRzCfBWtIX8ZKdu6M6wh2EUI9FhbaFOKvWG5ZeQeSGcKerspPOvfTTU2YeMjbbenMmBXaYDs9TcsqRpjsE4iGXogL9Kt7I7QJJRQ2sG/x0Y3weQxyIMJGCa16TddgUO9XFMzrvvt/To4M6dqBLkrUgxSp6fkbeCPKdQMYJW9CW+4QOWPmS5gQBPEkH5M846jC2Ck1j2+uZCgZ674o=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"This example will deadlock *unless* the task is already completed by the time it is awaited. E.g., Windows Phone heavily caches HTTP requests, so those can complete synchronously even if you don't expect them to. And if the task is already completed by the time it's awaited, then no asynchrony occurs, and no context is captured and used to resume.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"a2d2af39-3b11-3f4d-b0c9-e873510cb9bc","date":"2017-05-25T03:28:52Z","timestamp":1495682932,"authorUserId":"disqus:stephen_cleary"},{"_id":"243878ad-aea0-3efa-b8cb-acdebeebe5a9","authorName":"Stephen Cleary","authorEmailEncrypted":"P8s6Nx2qv7d5C62/xYvY9AK2eW57cDToVvKzLuu+GybO4MZTpzp8NR4kboz5WkkqHsHxPWnDQ5vbeC0/vxY6q/QOpaYFw6yuZTv1C+1og8qtATBFSeMVUUa8TLYxbesBotCCJPt5zTqQ5c9aNlSuzj+8eeKF7Bsne5f5kldhGjmTl19edSp56GXrBcSsH/NRmi1FQg/BHaq4t/YXYYMCrrLbiDtKRitZ2ClO7wpwyUZnfbwxVwiVC2CpgLa3CPqDvjrYBUnB3BFYlUUKZLdrofu2bKa3LisS4acR7f8Kut576o62t08Xv74WGEcOkx1euQ5LSZ2dW0+rj0L5M9ODr2g5jvJhyCmGnFmB4dna1+6na0BHAaUfPSRhiZIs94zCiSce+QN7KPZTAJf6fETZG7lyvBsEnyfPSRh8C2KoOOCtVieFeKxfrzg9ac2oC63CSLOEZdpV2WoaEpnp2ovHNNETA0oI5aVIKOQbOB39d4miKI6gWmbWUqAsGYQVTxbTplEPrteF/Pka2AGvDbf+jvYeVguT6gxVjtTjpiis4sDF1zivm7HP0PCdxvZfD3acqZ4aCFTXTWGWNKnxbr8A4xdbO7mw1gphqF3cbQoohgRLTQIR+/Fmzh7vIqteegS1vJSWIHK16nlGElIY/pslcaIRVCqdGO/0nqQ5/sM4fQU=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"No; the deadlock is still a problem today, and always will be.\r\n\r\nIf you have a one-thread-at-a-time SynchronizationContext and you block on async code that needs to resume on that context, then you will deadlock.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"a74f5f64-14e8-3f15-a7bf-44fd47e6f382","date":"2017-06-29T17:24:17Z","timestamp":1498757057,"authorUserId":"disqus:stephen_cleary"},{"_id":"8ad994bc-2357-32ee-b0a8-5f82407a4260","authorName":"Ravi D","authorEmailEncrypted":"bSyEXNSo2xNcl3gNM2w4yID8eq9zmRZtxbjfXun6Vm7kKAJbU8Mm8uX6xAXX8hVEuVmf897oPowyXEHkYeKcYzggHLjiymh9Kcfi9qoQlVS2jdgp5KZaO7S0V6hFAFFb0nqqeaNieesJRjNGEbnZt+8kkZiyTGhrRWsWFoHa5kwyvHSo3GyspCsOofjequEMA5IjF2sHiqFUApwn2+1Q+N9pXjqiHJDZjQv5HXu61A4VEIEJ4gwv0+poQUCMHgqkyDz42YxYw1IvEu31Jq14wHq/oc0w1sgNDGGlOvGvevn4hcj56yeAYepuA1fQ4SnC0n0ObaBKB3NHRUy9lkdVYzqJcvo1qZIXDveLbT3k/LgB5bbiDgE1LESVF+4j258uoseiB8qDAyi5BApgOxf9qtWK2m6e5KKQ1gRfjXBp9VINryT27eszR9P+wJ1knsq9sNK+wG9sYTXIBGBbTH3v5GOYRYPr/5xWF9Kh2HVQgVEZ9BLg6+STeD2o7brAFeddzYfeNZAYzhqTZEvUWVFSztNwy9R8uA466EI9mjrZAS+Pm9vifEJJuA9kNeISlmfEjvagvhzFV8W4h7D4Wt2yJ4QH/y2Yb7btOtmEA/zEY77AC6249XCiwbAXVXtkjSxXZlThxueRkUc3Q1iZM57gkfU0mxyKAyx9E0e/vnslyos=","authorEmailMD5":"cfbc29faa21359b82704f8b7b26398ab","message":"As of the 2016 / 2017 versions of .NET this is not correct, is it? Per .NET documentation. jsonTask.Result.ToString() will block but only until the async task completes, so the runtil will wake up the calling thread and step 8 (Deadlock) does not occur.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-06-29T16:49:52Z","timestamp":1498754992,"authorUserId":""},{"_id":"a74f5f64-14e8-3f15-a7bf-44fd47e6f382","authorName":"Ravi D","authorEmailEncrypted":"tYeP66pmZD6InhbVaqcAcWnDgUS/rZPbq/UM/7ZVbVujLcEjOyAtnQcIYixthQsmLx14aT7lNUlcPgFmzJqVM5nf7kjCMHfrI5pZ/ZC8qK9o1yE6opilgbmAcEGS4xq5/XLWsFCfg9/F/T77Bmnh8Oy6yBzdo+Ntexhwhb0JFoY3E60RXx7Kd5b4cnEXpVhlviLkJuQzodv77F2gOiItUKsLVvG/YLa3fn3rroz0haqq3PBAQRn+PAX5R3mVDc6V425GPfVyQfqUDe0K8YZbB4TV/TDSHei2IVZvxsyV6bHb+zIfcqm1nZWsSXkZaNbVbN8HXaziqMm1xLGPEObruGHNqP1gC2pqjcUBdi7gLxzegsLHZG8Q4bMN7Dh0eAfHnwtdNpnfzJjWPyP5/jg60lvrSMreXS/wt90X8d9vOo4OxtnJ0hXaA3tnJlcF6/Flqlj21W2li/1S52zN8K/GnK/3dBxleFPnyoKiRyr8DmeN/E8gT8f96OVSMUO4IVC89Lk7ftS+nOwQCER8nYryF8E1SEeQmDM/nw1YIFfqB+Otg9DXJVTsRBtkjJt+ISH2gTGTVYyTPY20YXu504yr+4A10b8Im8Sxeg7EvOWhNhUFVSGQ5Qo5RRycFilHQdjObIF/rnUxWwYT5XUkOU3cm9RPgyzIy9LGVfg3QZZGwsI=","authorEmailMD5":"cfbc29faa21359b82704f8b7b26398ab","message":"meant to say, ... the .net runtime will wake up the ...","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"8ad994bc-2357-32ee-b0a8-5f82407a4260","date":"2017-06-29T16:51:34Z","timestamp":1498755094,"authorUserId":""},{"_id":"54dd6a93-7218-3968-953a-7419190a8272","authorName":"Ravi D","authorEmailEncrypted":"KLPQUWBAtc6EKSB/DnVcS90Csxomff2oN2pB2Z35/Odkg+NWN+RFa+FKdUQgPa3YiaCQ1w80G1QfzoP7tCMK0rRf0CvDRTk3H3bszy5BNroD0+weUqWZRYkb0gHcgnhUqb3/xmcuPG17NnLcPw8ukzqouFZaMOSB+mpJgNC9/JTqCw4NY9cogS7/nxO2Hv1XMnfsY72sYIGJPdiPeHkf8F6C8S6FH5KjrfQxjuPDyVGJXHCPhme989vaz7B4wfQugL6v4abJDksSwS9AMo4TWRi1KDdF4JA71FVA2FYGpXC8i6DIELv6eZkoswlPhcfbyKW1wjMXwzLc4XVJSzS3esd2H64EUbliJD2yErjBhyepCq3XQ0LYGZXi/M7+ZyJ2kovH6Z1ygsLulnXvFgb2iP4KzA+k4XXD2tPINAuraQZyMvYnPj9HPzL+VG/Yp6WzRYIuxEY5E0gr32l15IXVON2RoTnLqK6xnNHhSH9rr4ujhaXJuI6zhsFHEVj3U8DdaY5xpWTDy1y+Vur95mbNxy4c7G5KudVmDa8TVZeJEcoLZSVMa55FIkHtmNXzfoSmR03b/5LRL099AbKvZl56C69cVYW1EZqJtsTsUtOss+sNUSM/hvKMneB/TCnarVxFIN3Ag7ymBc4i/CiCKoYyU/iF3rqY6kYECCr81f1mxG4=","authorEmailMD5":"cfbc29faa21359b82704f8b7b26398ab","message":"Thanks and much appreciated!  \r\n(Should have read [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/gg598924.aspx \"https://msdn.microsoft.com/en-us/magazine/gg598924.aspx\") which you have referenced, which clarified what's going on.)   \r\nTime to get your book and read it.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"ffe94b36-dfb4-3f46-958f-c4cfaa6dcd30","date":"2017-06-30T20:07:56Z","timestamp":1498853276,"authorUserId":""},{"_id":"f3a14062-f084-3880-9004-aa1aca73b003","authorName":"Ravi D","authorEmailEncrypted":"pF6N4RSpqr0/ygRTxDbFYBLlm7yC2UGQBPF+Vya2t4zTXGvfkGgSiokNqsl2uhViHaLawQAZ5WqAVo40tTqaiFJaYQyRZ73qu1dLvkZenPCIYY/lZg85qLOdJoKPyxcadv80FdXWFL1xkbcX9L77fAup5EDf2OprFiuAW6jXQaIhA3EPwAkImJnES29m18dL6ixUlDovfXoPk+9L5os8bJuGwzv7NHz2vdYgCvKd7p/zgQYd01TJsZbF1kTMW3CgUnk+5Ul33Hi2DJIggeY7YAXm5RgY0gC9UbOHmKR/ZTfB9NJujzaEP7OMJySCY4a9d9NKUaq1iMJ/c3cvILMcI9ZGPqCJF8Dwu6ec6V6VSRWWqZv7Gn7HOnAEdviUpkSyvpp71sV9ow6QrqBjmXCjo+ur5Y9CKFyOYkTZObfNztfDw0B607J7W6v/CDgyL088NswDmAOhSBb2g3Brq6ZFSYDRJziqNCXAfKYgeYT91rDDvM3ezPLAPh/68Vpa1pPXP2Y/lyZnQuHK+qESSbZ7l83mIfwaWHfdcJ16mnubN6KIgnGfy3A22c98mbs2JMA+ttY5loEf9IKn/gU/0EKsMurxbNoK31S7u7QUENZnRRvRMB26IpHeKOys9K/macc7thdeMo8Y8O5rZY7RzwsU2NfLAycFH80c5Z6TKO36p5g=","authorEmailMD5":"cfbc29faa21359b82704f8b7b26398ab","message":"I tried the example with a simple console app, using a single class that mirrors the example. but could not get it to deadlock. Tried different async scenarios to make sure the static async method actually yielded control.   \r\nThe console app does not create any threads so it should be a one-thread-at-a-time SynchronizationContext.   \r\n(I can post the code example on stackexchange).  \r\nBTW, thanks for taking the time to answer all these questions. And thanks for posting detailed articles which are very helpful!","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"243878ad-aea0-3efa-b8cb-acdebeebe5a9","date":"2017-06-30T17:07:34Z","timestamp":1498842454,"authorUserId":""},{"_id":"ffe94b36-dfb4-3f46-958f-c4cfaa6dcd30","authorName":"Stephen Cleary","authorEmailEncrypted":"si5y3k0e5nYki/YYAsYrNHvvhCeJt71lvEsuxeKFJT2uFoFcf8KuFxk01yTegohH+336x3inyPHgpc38XaquzH3xkszfEjz2AJ8zpAtewUMu+zmhdZe1Ccd8JUJDMd5bzm9I+9JgqtiWJ7jBG2ivuuJyQAa7uY1ckwkoPwLGFbGrBCSUzrqpHxY424cknO963JRCZauw5OWo49niqqJxJSbbc1PC3cMpJ7eTs59HIwWWVLwQyVEWvhu05Jd+BuVihsDCobLabJdQk8b4Sc2hHRsFoW19EMqSA5Zy1LWoKGBZeelWoqhLvAn2cD6zaHS1TY7Jx4h3ghKyZSkTKOVOFuSiO6BCExBfT/c+/DKWeR1eVsjLKY1OyiYYMonzVmeV4zDsvmzM3tAhZDp+wd7CsJAu9g3HW7Ggw8Uv1nJnejehgJmB/3hZbA0EkUt3WX7qA+KHBeFmVDdpoa9rhrpAPXqgXpXN4VWsc2RjSLA4NKoI5WTsWcOKhe7T2Muq2sJoCdzNsmRbnYbmAcpsxXfCWyKtNOilJ25HJ8tjjVpq9CpLSkiv4uA/tpMZK/Y9UXW5sEuofj1avkJ49f0ZITd+CAFJzAapQUGMYcvz4dH9oXt1Hz8jLgJAr+pxaxO2tZ6tf9wh6OuBVyE1txlr/PGeSDCn57dPqRwNrNRFjxX16NQ=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"A console app does not have a one-thread-at-a-time SynchronizationContext. It doesn't have any SyncCtx at all (SynchronizationContext.Current is null).\r\n\r\nIf you try to reproduce this on the UI thread in a UI app (which does have a one-thread-at-a-time SynchronizationContext), then you'll see the deadlock.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"f3a14062-f084-3880-9004-aa1aca73b003","date":"2017-06-30T17:50:37Z","timestamp":1498845037,"authorUserId":"disqus:stephen_cleary"},{"_id":"d5903678-78ab-38ae-8f0f-ee7dd0ea4082","authorName":"Cameron Averill","authorEmailEncrypted":"pZ0O8rJVEdePWuHzQm56eaHV+r9vK7CSMggysPwpRt6DWIXxPA2bjaHDHhbHYzG3bve5gqfZHuDNv51SFZFgL/LHDkCfSYahRzRBuE4thKtkzz00awk6eYd8EAgf+/ZJ9Sp8K0VMbtbIAxOeQKO/wpZPfuVhg2aMix+/ihv8dNXgzVyy4/4nFgtyW9S+wPUYKIk/nJgg9GiLiRR4CSjWsVTXyrxdFyyIKypQ7zfjDPeyje3VG65kz9n1I5e+sx7RJ476NRGmnj7K6OxXW6ZBNL6TyaGbe+aUloB2/wwU9+aWvex1ikBulTE80IN/yI3Bhhv8FQi6R764v6qBGn8xrEnjz6SY33LNdhGvRWdcmz1mJruyDyt735t2RGRkFwLwZlptMbSdu/RzQF5Oc+msEcjw7OP0fvkctSQvk1UUfrlMaz7WIgZABfgmWFMJUXmrDolv/yHCQyarLiSWiXucLVc/8waHrKChKqF5LYPnEU0pL3eCCdYuwmSv8cWOw7GnZCSffaeYZur2N2yVMjq3H9uBVizMLhdzYcBnXdBRKY9RxkaVbeEzM6KP8Qu+QN9XGU/gImiNsaYhK5ky2YdmuQvypeN2AKnhPEpDvwedUYKqm1AGNiCBqmHEZV0JNwSOLCQ7vfa4pablJQ2xovIfJ+tv+095fNXeZh0CUAuWYoE=","authorEmailMD5":"f40eb2d98a486d6d0a90dd43b3531d60","message":"Love it, thanks","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-07-26T18:56:29Z","timestamp":1501095389,"authorUserId":"disqus:cameronaverill"},{"_id":"9ff182c0-f911-3913-a685-ec07600bd5fb","authorName":"Doron Grinzaig","authorEmailEncrypted":"EU2ORTw7vnrSmN+MWI6rrbs71uCsRvhz1izkvqMVVSpZPVg+3Z7F/teSp6RSW3nL0VDBgkDmXhaZRycDyDVWcRek8f794IBuSP39oyKvJN4QvPedAd4G44re4/wlP4QW644ElHr8rjFjtq5GKTYm+ZDq9ZXp8nuWu5JuKlndaG75jZdkzjga9RfQW6CrElgajTnBEVz4aN6O1BO1kV2qUmBK95a8CTMvYdldIlQVuvpRLol+Z1pL2zETwbqz3W8DsqRx1fpbp2yTFkTOQFe+TW6vpHfqipJkPcqq0aLPLPXr5EZhTnjChT9BGQeEmpgXk/49wM18OT1R9BK5A7UDJydsYw3Kj5dnd5gLknBi+EuDcVO6Ddx/TKGfisuSfghivSjkNgclQvEND8k5YQgP3q1zr0LWRNyJSAwi6eSFXjAcSTSsijPvWUnOBnJKT+Zvlnp2CtuJzxlf4GgW4JzfXlDoHM/SaVlml5/2//ZpAVq+yK/BrasjSQcXC8Qx04EI78l+er7MSMaEYEMqgX63p+OunxVbZrmIWBHmyY/kvTJIScHIAp7YwGWmZvpYFMDqs6JUmL2qquEwQPjRQkJcvKN1mP7GeNVxMU3UoWMmUaNQiUNHifWhVpeR2XL8hxx+cWbxs7zfKjo/OFFTxJHtYFBzW8CKNNmzg0B6aetBIAU=","authorEmailMD5":"02b2b843388c866cab51a735f817b291","message":"Hi Stephen,  \r\nFrom reading your post I understand that unless you use `ConfigureAwait(false)` you will get the same thread.  \r\nCan you please explain how it aligns with what [ Nick Craver wrote](https://github.com/StackExchange/StackExchange.Redis/issues/597#issuecomment-301280474 \"https://github.com/StackExchange/StackExchange.Redis/issues/597#issuecomment-301280474\")\r\n\r\n> I'd like to clarify for this and others: that's not what .ConfigureAwait(false) does. It doesn't affect which thread it continues on, that's your continuation options (which are often just suggestions). When calling .ConfigureAwait(false), what you're saying is don't capture the synchronization context (to be more lightweight, having less to restore upon continuation as well).\r\n\r\n ?  \r\nThanks,  \r\nDoron","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-08-21T08:27:53Z","timestamp":1503304073,"authorUserId":"disqus:dorongrinzaig"},{"_id":"864f7182-0020-3f04-b548-f8d700cd8d1f","authorName":"greggwon","authorEmailEncrypted":"lw2TE0pArzIsmigc5dgphc/5x4ZuGjLXO9u4SUcfFHsxm3A5gWcmOMQRPjwDUCxCuzQwTCl6A1mR4V9eOxbNV0RC9/SLH56hmNGJp1UYhX57UCV4ul4v0wia37a2cKbAQYIhU3LJKko/heXRk7Z/xxuJ30lF5/2xgCwmRhS21BXB1+xTYkgQVnnOJkDrFKgwqMz0dP9tgnwx8bMXHDmFj3feIdJT8zSNdfur710g3RtpUwNB063+nffBHpzQEIhyfV2bRFsBRGiE02D699uD+yVO6ZoFn3DITHrJYQKuuG8HN0QzackRyGSRY0zXrQFkXA3+df0DXOtMrdmImake76d001PEnh/8EPUiQ7KejH/ZYbrX+Lujyxs0Cr17706kTMLaddBwAAUgMokwB3cEwYETpNSNvKKzzVZ88leH6yM+RfTA4q301kNuP5lXgRmS3Gi+72I8+22ZaF/TLfLVQrxxsp+1LYTbdGOQwO5EFYzreW/rVWR3/lcaxz71Fxybdidw5z9Yw3lJUxQTKlHZ5tIWQ6Y+TgkmNGnYs/7bTYfSeydFKYju1ngTq1UZ2CkX498TDKZdv3rIvLZ9fOiyOzwj/WIBPX2BuIEsVvH9SyA6i680WpaV4VEun3k7O6GicqhEoLxYRKvUwre7JJ1IGLatkseSqbjtXij5LZvzWz4=","authorEmailMD5":"142c71b27a71ba2448701da921b0d14e","message":"The problem is that getting the result and using the result are mixed in together. The better design is to clearly manage the three phases of async data gathering and use, into an API which includes managing state so that \"dispatching\" windows actions happens in the right context.\r\n\r\npublic interface DispatchManagement<t> {  \r\n void SetupUI();  \r\n T PerformAsync();  \r\n HandleResult( T value );  \r\n HandleError( Exception ex );  \r\n}\r\n\r\nNow, implement some classes around this interface, and have the base class use the correct Dispatcher, for your context, in SetupUI() and the Handle* methods and dispatch PerformAsync with a Task/Thread that comes from a pool.\r\n\r\nNow, you have something that will actually work. You could use delegates for these methods instead, so that lambdas could be used instead of whole classes. However you package it, then, there is no \"context\" different from the code, and there is no thread lock nonsense involved in creating linear code flow between two threads.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-09-15T19:13:52Z","timestamp":1505502832,"authorUserId":"disqus:greggwon"},{"_id":"1c978b71-601c-3295-9736-e482ad3a1ae7","authorName":"Stephen Cleary","authorEmailEncrypted":"MNiQZlP8fweqJHr9TGzIWIHaCs1f3ebO4c+9iP9MtQTf6jdewwR+kXtUmvRw07S5zAEGZdCDsfXPAgRv+6kPd1xrPYsLMNALE/nzJ8/y1ewBOI4dQCJUz4XT4y8VbLvyu0uukSsgWEOWi6cnBX473gMwJS0XimmzTPa/e3YSvNyZ4vg4QhKVe1ew44JEL2FJxcYUW6LZ5iGlmfDysRtJYotMSujLiY2RJVCNxB6j8ReompYlpKVkNtGVRVL3WP9LtwzAeXOTj01AtI8l0myH0/q3EbKhW2ctOqPGCGGeRfnZYlcFgOwWGwpPNSosNAW965TPzU5qPC20KJ29X0MbJ9aYd4BdexECZ6I/mVT0rfjVBJNGU8sCEGDCYOkChPx211Cdb8h/3uYEzlodHofe/j7rWj4Lq30bqGJorJy53jAuBqGFGgeUhVr6K6vAID7PeDEQxjFB0ViCDBolCmIuU8chY6k+D1kc947smKKxyLSiYu18Fr1ZKqbYV1yQGycaMIeQBL0J7/rjAWRtRt6/bpmX94kx+ubVj+opumzsNxxD0kPwfp+5wDwHSrIr7pPFP9gVnnQY0sgYtpOTGuihwFSpzl7M85iq6cjHGe6domBUn+zqdIieMreIX/EVW2K1Zrrn/6ay/xpxxRy93cGEXBFtQ7DaWqLqEodE/cd6Rfg=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"What you're describing is essentially the Event-Based Asynchronous Pattern (EAP), which is still used by several components today.\r\n\r\nEAP brings its own problems - in particular, when composing multiple asynchronous operations. I go into more detail in these videos:  \r\n[https://vimeo.com/ondemand/...](https://vimeo.com/ondemand/asynctime/229418352 \"https://vimeo.com/ondemand/asynctime/229418352\")  \r\n[https://vimeo.com/ondemand/...](https://vimeo.com/ondemand/asynctime/231644901 \"https://vimeo.com/ondemand/asynctime/231644901\")\r\n\r\nAlso, EAP doesn't solve the core problem anyway: when developers choose to block on an asynchronous operation, the delegates still need to run on the UI thread, and blocking the UI thread will prevent that.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"864f7182-0020-3f04-b548-f8d700cd8d1f","date":"2017-09-17T01:11:56Z","timestamp":1505610716,"authorUserId":"disqus:stephen_cleary"},{"_id":"c01bfbc0-c2c2-3e8b-b08f-4a141a886b64","authorName":"greggwon","authorEmailEncrypted":"uk6xw+wmWiKhIjKXmzht9mZUddRFZq9UyZOXOUP4aFUTRUZwp3LbYS+wiEa1DVQ/BcrdINRMH7zw+8QKkQCutR/yyc3wd5u7KrJzyfZTsyIUtv0wW1AuRFCHYaCQatouaVyc/CgowRsLIIteP4KNQZCo+pevNruhWfV7cdxulCfygvzkaBzLDq2uXwK6AdjhNK/5tDi0hV+Adz2vyOIH/n8Ua4l6/iQhvXkgI+KlRoqlVFwqa9iBW2MolMUS9s5DokJI3zgpedt7k+3xJuHlhaWFc3iTdDVuOy/pq8gnKkWKXqLkCeTqGPcwZ+/yWJDyP2XpK7NP0iseUGykZwlMR6A+i+faMosngXHLhvQoyE5EMRymAPb0KTQgVM+iS6T7qLgrUQN24LLpfLNoygOFARBfytdwVSMWDIQG8bnBNyGvrMVh98KG0gPfq5nJ1F1fLnBMzSdBAV9FbM1UZ/WpDzyiSKUMWWytzXgP+SlMXYgLIWl5sgZCjoRZuHAmMew/TEpUTrzaqeYbLImQHWkf9W9e2ohJkinExf8Zf98a9n15pBpb8SP0b7HrjbQIebhE0FH13o6Tx50l3/+5C5CiUSNDeGbFOZoKGHn0On6wQSoE/d7Zf2GiYkWwBM46+7KWpE5LM1lC2L9p87xN+laQS3ObHDzTt+b2rBau3j/YxYA=","authorEmailMD5":"142c71b27a71ba2448701da921b0d14e","message":"This is the structure of all UI work that needs data, and then updates components. It doesn't matter whether we call it a pattern, an API or give it a name like \"solution\". The point is that developers, 20 years later, are still completely put off by all of these nonsensical software design required to interact with a UI and data. I mean look at the disaster of XAML and how much of that is just not quite enough, and then when you need code, you have to peel away huge amounts of XAML, translate that into code, just so that you can do a little bit of something that XAML or declarative programming doesn't support.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"1c978b71-601c-3295-9736-e482ad3a1ae7","date":"2017-09-17T01:18:14Z","timestamp":1505611094,"authorUserId":"disqus:greggwon"},{"_id":"990c72cd-19bb-3655-9eb3-7f3d9d5b94f0","authorName":"Stephen Cleary","authorEmailEncrypted":"m79XyPm12Orgl0vAn+BsXZ9Bu6Vdn+GHMvBL2LNXrqqJvXHOQW4GRNFWCUdcSUdoGCLNep8ui0jku/gtez0HjhIh1Oio50GnrrRc7CyZ/iH4CC19xWNxkCrS+0xz5NCf7K9sTT85cTNBpSJOXKkY2snJ8ut4SAbBSqjtfk0vA0WVgudviEwXjSKs47YAWXu3k6R5GK3k4DHlQ1tGS7wm0UXAtGoAAeS93n1JGqJ4O4ORBBIEYkdN+I7QyjsMeH7WiokfNW/v6tYBUUYge1CUC7fMajOgJRyPfcKNRx3ZHw3nbmP8T5CZQsDzeuEy3AMitbM6jdAmQkh4fZQnCZEJtU2UBd+ul30bVmiQ6FQ5WWn+Tot1O8m2J80wAY4NveWGK/zi+S0nCrBhSkTw3RAkoI+MH7/COZ3jgCcbAlEsWMNYK896wtT6xBILWXUb3p2RHmk5OXahqt4rpvovUZpgnSU/jZV3znXmLbmnfXmMQ9Y3CHYI2gRlS/piZfP2pgJ+j6TArb7B7cXWvdg6mCZ04d3IchrrecayZ1A5hLDRsuhokJqMhYj30e463bldJCa2wPJ9INMg6q1hrf6osv/9mLME+XZdsItUvSEnjgkiXmlZuwiSoJJZ0wcX/Fl1RsPQ9VCQGWYqi5CTBptrxNSD1WtAQQc8od8lkCyQU8ppDAw=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Oh, I agree. Windows still requires a \"special STA UI thread\" and probably always will, and that's a pain.\r\n\r\nIn the early days of WPF, they tried hard to separate this out. There's still holdovers of this attempt in the \"visual tree\" vs \"logical tree\" - the original idea was to have devs access the logical tree from any thread, and those updates would be \"reflected\" to the visual tree that is owned by the STA thread. They were hoping to move all of that \"special STA UI thread\" stuff to be behind the scenes.\r\n\r\nUnfortunately, they didn't make it, possibly due to time constraints. To my knowledge, no one else has tried since.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"a7a5560f-9ee9-375f-ade5-a9d45da44c94","date":"2017-09-18T21:25:09Z","timestamp":1505769909,"authorUserId":"disqus:stephen_cleary"},{"_id":"a7a5560f-9ee9-375f-ade5-a9d45da44c94","authorName":"greggwon","authorEmailEncrypted":"i99quJ8Hl/soTl3SWzvyXshRoctSgXPSvlNJ6aj5FKtRrYU8z3uWX/eNff2E0ngcWmfEjbCTdi/VMzsl7R+BVv/q/Kj+b9tkw0bI9nMFFH6vRcN2XJCU2HvhmkLaQwSPH8O8jHpohFpe+EaZ0J0Img2ygHUgPnMyfq1+stDcEzs665CF+ttDS/NaFTCVLqM5yPkICA3W3ZhlUn+fyOY3zUwSSPx7iJi+iLkD9O6Z5y4w6LMRuo58DPXCSz+ZbgKuPW2ZOyVu4WPNgkkBJXiTE+N25HcaSmikBPdqlTOHnBTI10jTbBFihlbtwxKU/MznELSkULSHOUx3+QbZDCQ1jqDCJE4BVIWnqXaH6xlzkUEwlVQhyc5MiaFnL3RRqpA0r1ZlNwjoqnPjiZ9RfvDK2OM6UAF2IgIaeVf2GBGlzNrM+6uibpBixMaxkqwdoAHK74tLvPKGrvvUdesLpcRfTPG8/Bvunk+jepwLSNpCV8FRC3svcsCaVTEUAf8SBbeT2LgcbPh3hkCj6uxxbWqvtZL/PIxf0F1JsFQ7zEhOfOg7+Y3Xb82+pv7ZRBx4eGDLbeeoiDHubAckAgOyhjPMrCvvKTAZMGKlZG8sktu82JziFv5X9PX0Lbfd3iy6MYHSvN/ALoimxoKVqoNdYt/JjYpCYqVY8sZhlIN5YSI57Gk=","authorEmailMD5":"142c71b27a71ba2448701da921b0d14e","message":"It really is the windowing software system design that is the issue here. Why is there ever a need for a user to purposefully choose a thread. In this day and age, that should be part of the \"system\" that they develop against. It should provide explicit APIs that manage all of that. It the neglect of the designers to do hours of work that are causing millions of people to experience problems and waste millions of hours of time developing, debugging and using a piece of software that does it wrong.\r\n\r\nI regularly have to ask, why is it that I can click one of the three buttons to close, tile or maximize a window, yet windows can't allow me to grab the title bar and move the window while my machine is accessing the disk during application startup. Even Microsoft is creating a horrible user experience by not managing anything about this \"must use the window thread\" business effectively.\r\n\r\nIt's not hard to devise some different paradigms to fix the problem and even create an automatic dispatch mechanism without burdening the user for doing that. We need to move past all of this context sensitive execution modeling.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"1c978b71-601c-3295-9736-e482ad3a1ae7","date":"2017-09-18T18:17:41Z","timestamp":1505758661,"authorUserId":"disqus:greggwon"},{"_id":"37b75eff-273e-3e81-b8bf-95c1edc5fc06","authorName":"Stephen Cleary","authorEmailEncrypted":"Jm6kF3y/MxHEgbxf4v6mt/ucO0wQ1az9ZAo2vwrtzP3xQCasDC+9RYeIcpkcdvfs7PxcoZ5F5wPdVNAZgbZhCDnEG+4mzqzhDIhsHeCL1FSIhH7pa2s/bVAVcQObgR5E+juJF60r60egzm5r3TyTZSaHP5AbIyljOgeL/0oYXhIth+jxpb2ekRuz4HkmTa0PksAQDnAwJ2PtsQXb3bgVIe6dTGnstcOYMf77MuQ2r9k47krcguVnep+7z6nlc5y/mEUOS4tVPpdQ5MedEb8+CFSDiHa3MUbmK0bhT5uwtrK1UgUwgfIXLxaypmXGbRA+YnEmlCwb4DLng5OMKZ92RsG1WfPdhzO1UlzoLlMZP24VZPRXmtKLOyAF9q9I3BKwFcrdmuZjk9vhYctN9VIBaBvcjw+dvFAidPO495Jocry0lVuuQSdXdS+IFIDVPiHaqgXjwVkopRH1jcBLbMWlQtvAThIPv+RTknB5pwzmwzwLTi2zoT4Ic/mugSJxDDTl8hXMH1+mo/GO4kexbptezICqvXHyOxLH+IbVPVqLEPXYaXVEJUvIacqIvo2Nk3ZvluFOuZNnQJkssb6AM6eUevCGFvdI9wUpR8UF/5z6bz4vtP9TwgXDkIIqlzbr+Jm0NmUd30easMuSLC6pbl0lBslH8GRXdadOtjfl+IVbfSQ=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"ASP.NET Core does not have a SynchronizationContext: [https://blog.stephencleary....](https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html \"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html\")","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"2490bea3-46b3-32ac-b94a-befeada7ffd2","date":"2017-10-04T16:03:03Z","timestamp":1507132983,"authorUserId":"disqus:stephen_cleary"},{"_id":"38db96ed-8d0d-3883-b5a2-29a51bf43f39","authorName":"Stephen Cleary","authorEmailEncrypted":"L0zg9z5ZH2hZwQZitx1Ma4vfzDeQDSjRNiWfeA1Jg3RrDHzWFklP4lQhieSic28PwkyU/k4mj8PSFTGXs0KTV35yndnMfbu97lqfVly6fMqsyjockxBa4a4QgGMh2sobR+jc584pkVwDTjbENhrhdrgbDiU2fB+VbCZq5E67JmQ1C4sWSDkQvIMuNq3cT5/eoAxBYINWeSC8HZubi4Q8mdyODvzqqLgN3jnD/gieFRoCRaXZuDGUJiXfC4f+OPLlpLn+YByK0I3BUn8mYyN+6tVKNAt8f1H0yu91wR6O7TGCwjWfUt6hR258wQvvnQQgc6U5zb4lZ2SFgGIj3NEFL6H09HBitHaBEVC0WKTsGRSZ3WQJDDtbnCyWOYoXTaksQIZs8B5qCIHFWA+G4IvhvKnP+ifz6jLoYk3N+04spEXMRfyabzmAxSeGmgK+CHCB5fTk4b9wpI8MKQS4rq4/w76oH7x+M3qdrs/IBq0yfXApB6QGErlLG0wrgJpXyBW3oZRfVuITJnJLNuUNQcUevCu2nBEgTRChDsiCi3opcET9+Q2njGY3XifAN6YrOD1Oa7dL0BVsvUR4yAQlGzos4VirJXLF94JtRctvzYt0VHcHBLjuftg/gUgMam5DXyBzo3vj+5Dz8FUXyGwGellPiRPagcBFteMr94hrHaLpWSc=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I don't see anything obviously wrong with that code sample.\r\n\r\nI recommend that you reduce it to the minimal code that causes the problem and post it in a question on Stack Overflow.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"58fdcd04-b518-3b44-bd61-6bc5bbcb89f1","date":"2017-10-04T16:04:49Z","timestamp":1507133089,"authorUserId":"disqus:stephen_cleary"},{"_id":"a5bb857d-c4a2-380e-8549-c05c4bbbd561","authorName":"Stephen Cleary","authorEmailEncrypted":"r+rp+bOqGsmS17RlXUDeivMc3ikG5DnYxQcQDJYagecdya19dlftal4kCAmkbDUdo9BdbJErgXFl8LnehvwIo/YXIUChBETJY0hPYqJU9VC2qGzjFAvyutAKodXkf0I4rZY52rKjLrp8gp6+Ewfd8tDnvGgnqFIvRw11u/7sSg8zP8C4ge5NhY/5+F77DGKM7b7damy4oc2FlDko98ujtCkAWhmNA5+7hiGCUeWdSEQUNMGnSko0JPCjEdmlezcoeHDb4OfKshmGRhsxpessBLft06hyg3kKB91ghQTSic3j6zWNjSmdp3KI90BmP0R9EEnvdnztXV/9ujf5ER6FG70ckrXLBBh7YV0azN1UZ3Mk1dKn9xuXkHuWin3y8PG1Mu/5qaZgss3OeIEg2EBJJO+B9tWoQgWewlz2Huf5RUpR1ryBmWFv0B0rVRY4sYFjnLJSqBLgm8R5tXHvhXPwCHKomkJOgfIJqZVdoOLOSXOlf5teqotaIv7z5VKss8phzycbG4P1nT48CCUaFcf7et+Ac/5gpUtOlEvrnLtEXH70iWIrw8iG8/jJg708KYOXV5w7ZQlcccGOPKvMdUesyoHmfk1RhdeGspUqXL2l4ksYV45MzFvoyBCDSBpkCVKN0s+gAaW0ef/GIufQ9nsQ+xbqcBTaKPil3e8KsYvovRQ=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Yes, every method makes its own decision. I agree completely with that.\r\n\r\nHowever, consider this: in the same A -> B -> C -> D scenario, then if A *blocks* on B, B uses ConfigureAwait(false), C uses ConfigureAwait(false), and D uses the default (ConfigureAwait(true)), then you'll still deadlock.\r\n\r\nA lot of people think they can just use ConfigureAwait(false) in B and that \"transitively\" applies across their call tree, and they can block with impunity. But D has already captured its context by the time the ConfigureAwait(false) is run in B, so they still end up with a deadlock.\r\n\r\nThat's what I was trying to say.\r\n\r\n(Sorry about the delayed reply; Disqus has been sending a lot of comments to spam and I just noticed today)","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"4dbaaae2-a781-39c3-b6d1-5cb244da1a3b","date":"2017-10-04T16:15:14Z","timestamp":1507133714,"authorUserId":"disqus:stephen_cleary"},{"_id":"d25a40ca-14d3-3404-be10-1a516e5f505e","authorName":"Stephen Cleary","authorEmailEncrypted":"pC2dpeKISW83BVnNn5YrnyC4Sqi/7yL0jDHDnllvv2VT8bkD7SfOKLTCgwB0R3fpfoA8gS6OQTpFmM6GuNX8zXpT+hfOqQYyZqWcLAE3VkXldEEAQ4SbOueeQSsU+XTIKYAPGmvorxU3iuNwk7VkCvhstSnGwf5QCNZUfyExeZFf0aQfZNRp7eqMK8OkkuTf94z+PWH8NqjV6umBo/5VZX+U24LUkJiZ+Te6kF8xcbqKe3Va8tX2GF8PByu8/Cen0SAVoM9TAa4/TBaS+mHUq2LLxXthhVNgeC4igAy2dakSF4L9zspl7uC5gGBtDl76LEAXeGlnbE1pczBc8TiNC0/Mc3ZloR2zCLm16ek2XmooUlkXlDewJKivw2dNkRrnxgnKnnY5/bRCDsRmKtstUTmEgd1tt0YHwrkOhaoPugoXECoxe5fvW7b4Azx6sAHuJyNpXfMTCu8PDiOwVuFob/pMlZEfoFpM1lYiU0vadTX8BfUi1Rg/H4DXTU1oeMQ9ubfQnNorMhy4rvzRgsMGoKNCR5QcNJAyUKpZ8Ane6S/BAz12xfeXSFVf7/nwfKJC5GJqdVLXAHp+01L2MIYz8ha/RUqL04Y0+7EWjXL/7SrbMy8jUancAL2eP3wMYoUibBI2c6B9kXPC1wGY+JK4v+bKEU7ER7Djc4tJg74RLvY=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Hi Doron,\r\n\r\nWe're saying the same thing. Take a look through this article again as well as the linked intro article: [http://blog.stephencleary.c...](http://blog.stephencleary.com/2012/02/async-and-await.html \"http://blog.stephencleary.com/2012/02/async-and-await.html\")\r\n\r\nawait by default captures a context (which is the current SynchronizationContext *or* the current TaskScheduler). In the UI situation, it's a UI SyncCtx, which is tied to the UI thread. In the ASP.NET Classic situation, it's a request SyncCtx, which is not tied to a particular thread but only allows in one thread at a time.\r\n\r\nConfigureAwait(false) tells await not to capture the context (which means it will resume on a thread pool thread).\r\n\r\n(Sorry about the delayed reply; Disqus has been marking lots of comments as spam and I just noticed today)","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"9ff182c0-f911-3913-a685-ec07600bd5fb","date":"2017-10-04T16:29:03Z","timestamp":1507134543,"authorUserId":"disqus:stephen_cleary"},{"_id":"dd318ee9-89cd-310a-bdf9-83836217e409","authorName":"Stephen Cleary","authorEmailEncrypted":"HvzpifAR298D8F36SmoAKQft7l4UKb6SNJMUVn83uzCnXFD0gSNwUEak3rQq2tfViY4VRoCuSOIZ3nUmJSMDkFdxTs7rrm7RrUCN9ckPLA9V/Ft04/bV8zo+GBh3ap7Dxjf1CXLwPjCD6iUw9PVCWJ5WYHQfWIgMRBtKr1yX/LttlaZJAtttAcRslLBcgGpdmkMLqXXtVjrbD1r4xTJ4rcOA/QtFGOk0tDmDzXHMSB16Em5fH008LzO4mhp8qFjcGRAjFcxmEf+qfyFmrmH9VQ8nk8ceVP2D4ydV6e6Gsfcn/GcHAF2pw63c0SmgIF6pfZLny+CuB+mC8AxhpwOixAiv3ttdWDrzNthg9kNZkM83sII66dSbHlMAF8t693zuFVaHwVl1fqj4jDh0ByxkrPeV1m4MkZbVuTroA5erh85o18fdwvSUOTpNeoQJngOwgTv9pQddi5dsEhYkYVKwr/cbQkPXn81c9R5vfypcgAhcE4s9Yg+C67Cx6HiYKSxYNLNLu+b56mTfYkO2kI6zMQHkT2zBQCd8yHYx3+2ky/xzysxcQUsWNPTWqBtQt/+DWFEJEw2AcVGSrIoMLgx56hwsg/3s1klFvBdHVYkmUZnTE/Ythyk6JvhhfB05EOWup0kBwW1r0ZCcXEXr2FdgCTCbb+8WlC9bg2V+8XwsfmY=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"If you cannot use asynchronous methods, then (by definition) you need to block the thread. So, blocking via GetAwaiter().GetResult() is the best you can do.\r\n\r\nNote that no other thread is created; it's just blocking the current thread. However, since you *have* to block a thread anyway (because you can't use async), then that solution is the best you can do.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"317e0731-4504-325c-b71e-f4650a74f0f5","date":"2017-10-04T15:43:28Z","timestamp":1507131808,"authorUserId":"disqus:stephen_cleary"},{"_id":"2ec2bd25-6238-35df-9e9f-dcfda1b58f6a","authorName":"x Disruptor","authorEmailEncrypted":"FqgmEiLUa2be5uyzsIxBijlAgLqLjcAV64g9dhQ/IlCAAZmdwrQyqcahZ7Ra44e8M3lfwy5OvixU5sFAZK8VjZ1bzr4Iwj32oWwkqRaT7Pi+lNYifbRnWALZAfzx+rWEFW+9S3LOAe7iC+YgtR3p1TI+q7QfGMX3S+oYKE0ljmzUgQRN1bsd3DHXqRiIslCGLYzP27YNn5FXhFHZ9NJSvyDAqpjhKj9ZrY2VJREZNv++/Y6WcDJjxFQiSV3sXHY6iHrbHjTOGQ5P8y9TMbumMqM+SFUyX22U/jbYyM/9C6o/Eldv4Z1PJbL7q65wvnVsuZXJK58DDXyexKWdIXC2Skgz5/nkHP5hh3n30xlQVElgi7jY3+LZivweZvsWwDrBNcFza6fur+nRDFpzy8wf4cEdm/UZZpg0qSiLdMuMwXy60zf1l7nvIXjpG7N9HJAfzp2+bBgehJiAfneNoDeLhPuRrnnhgbqYoJxRI3L/V/4R1oyParA2+jJXY6VI7/Mk4BxPqqCdG+TaUyCUXKTV4GzcGtzJ7QSI4sHUBHpkumSbePLdBatFSAeB1A3qrMAFGtV6lCF67/nayCN5eWMNRPm3qUx7qku8VmT7Ppnmxk7EytewNXByhhy3u/V+AAiQzTTlK/5RO3ESPeDivHRWfOlJLiDR7T6YwRMAKDu1nuE=","authorEmailMD5":"ad46e1336e43614ea24e0f42b9a383af","message":"Thank you so much for the prompt response. I apologize in advance in case I have misinterpreted anything regarding your answer. But first some background on why I'm probing into all this:\r\n\r\nAccording to the repository pattern there shouldn't be leaks of references of any kind (IQueryable, db-related-exceptions) to the upper-level layers (mvc-controllers in my case). I thus tried to find a way to \"materialize\" the result of the queries inside my services so that the \"materialization\" won't happen inside my mvc-controllers. At least that was the only approach I could come up with -given my limited knowledge in all things async- to force db-related exceptions to be thrown->intercepted->wrapped-into-my-own-exceptions and propagated in a sanitized fashion to the upper-layers (mvc-controllers).\r\n\r\nIn a nutshell I'm trying to sync-call async-repository-methods so that I can intercept any db-exceptions in the lower rather than the upper layers. The above snippet was one of the techniques I tested. If you are aware of a better approach to achieve the desired effect with an alternative technique -one that is clean and performs well- please feel free to link resources that point to it for me to study.\r\n\r\nBecause, even though things worked in my dev-machine there was a lingering suspicion in my mind that the approach shown in the snippet might lead to obscure deadlocks in production environments:\r\n\r\nBased on your answer I surmise -and I'ld be happy to stand corrected if I've interpreted your answer the wrong way- that whether a deadlock does occur in [asp.net](http://asp.net \"asp.net\"), depends on how the Async methods involved are implemented internally. In other words 'FirstOrDefaultAsync()' might not be plagued with the shortcomings of 'GetStringAsync()'.\r\n\r\nin practice how can a dev tell when he's dealing with a \"plagued\" async method like \"GetStringAsync()\" that can cause the dreaded deadlocks?\r\n\r\nAs a sidenote: I studied the linked material\r\n\r\n[https://blogs.msdn.microsof...](https://blogs.msdn.microsoft.com/pfxteam/2012/04/13/should-i-expose-synchronous-wrappers-for-asynchronous-methods/ \"https://blogs.msdn.microsoft.com/pfxteam/2012/04/13/should-i-expose-synchronous-wrappers-for-asynchronous-methods/\")\r\n\r\nAnd the author gives the following example:\r\n\r\n public TResult Foo(…) => FooAsync(…).Result;\r\n\r\nwhich -at least to my novice eyes- looks very similar to the code I'm field-testing. The author then proceeds to explain that this can deadlock. The author speaks generically as if it doesn't matter whether FooAsync() is an EF method or whether it is being invoked from an ASP.NET controller-action or not. I guess I'm missing something here. This particular aspect makes me feel so conflicted about all this deadlock issue.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"fac220eb-d9c7-32a0-84b1-73be101ad75d","date":"2017-10-16T23:32:01Z","timestamp":1508196721,"authorUserId":"disqus:xdisruptor"},{"_id":"42368e06-b678-3294-afc0-b4eaf064b425","authorName":"x Disruptor","authorEmailEncrypted":"IFw+gkuen/0q9yKWs8hPDQNgJCCQtdKrCZi3wlswmYuEASl/9G24W7yttiOAbo33TStS6e7vIlEYuCVQIAqlAkN8B7J8pujUF9xWoDfwx80gZE1A0vVh2qrE10TMIdgoHgpiRaRp4QHiHpyAcBzsbkCdpANJlDCasIpuMqOfDC6o+Z6DT3jKKvbKpaxONhrMEymbq9XuQsPiqGB/HdMwe5be/jl6wYPRspRDY3pH2MXlwOQLORlNvokJi5ZFN6FWA/brIco+9b/Bik4Yz1YUJc7nWB3fPnIC67l5OZpeWdtnyK18QnTusqSsofoFNT9YL4F03FTpGXof9k29SJdCbHQm8I8/pg9QeeP4186LtrO/LQVj5VJsi/dAFGpwNwkEsJvIHBEoKXzrFC8cIDGac+wpExMuysvVhKTyP6CAzyjXABEAwy1HnGdWyBPwnB//s/wPffaYNi7ovfJNoCastcrhJMvcO9/M/lGAHjAL/Zwi2ljddqxZd+lWY8O2dYaSnHGz898SU4wRn73zRgorusei0j+7nTVQFgpys3m9jBKU/zVfX5ecVR4mlRaC1G8fvW5q9mcAINqcZnjcr6nSbqLuhsZXC4L8k0WbQCzIECSRDDoM8150nGdAyG/PThh+mJxiwumjmAk7/mbO/EVjan3P6bjroXWHxhek6X7aetw=","authorEmailMD5":"ad46e1336e43614ea24e0f42b9a383af","message":"Thank you for the wonderful insight on the subtleties of using async/await. Quick question about async/await and entity framework methods like ToListAsync(), FirstOrDefaultAsync() and so on when they are used in the context of ASP.NET:\r\n\r\npublic class FooController: Controller  \r\n{  \r\n [HttpGet]  \r\n public ActionResult SomeAction() => View(\"SomeView\", new SomeViewModel  \r\n {  \r\n PingPong = new SomeRepository().GetSomething() //sync  \r\n });  \r\n}\r\n\r\npublic class SomeRepository  \r\n{  \r\n public int GetSomething()  \r\n {  \r\n return _context.SomeTable.FirstOrDefaultAsync(x => ...).Result;  \r\n }  \r\n}\r\n\r\nWill the above piece of code deadlock due to the direct use .Result?\r\n\r\nPlease accept my apologies if I'm missing something obvious here and thank you again for your insights.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-10-16T15:48:30Z","timestamp":1508168910,"authorUserId":"disqus:xdisruptor"},{"_id":"fac220eb-d9c7-32a0-84b1-73be101ad75d","authorName":"Stephen Cleary","authorEmailEncrypted":"F5JQflBNgs05lRfZcoFq/rbW8U+8eM6BmM0/9hc2CmH+xVgTN46nn6fPDIoiqvlD9kv0AOI5z1I0wGeIi9HoHK5p30Tl47VdxbPqJzJ61MUmCw6sspVgVYfdIWuFWTyA8cUvjKNbqIUOtFa7V7VMTlGlGbnJfbKttYQKKI0+v55N8xi4Qr/dF5tB4nYilus7VyVAyqM30npzPJnCW4Odz6+L6tvzfR75sTEIzYpWS+LjaE92y5MdKtzaVTQ18L6xVZa7l06W4DvLho5Xmobep5sfXKcheEiH5jlFkcc+t4wc0vbkS/OTfjTQpiyLv+HwvHjAgwACNpjihgHpPXST78MhGehbi24E1VaxNEqSNpgx0ihj0SeRjp6twU3q8VBqeq99DIeTpPCV7i0gSY75GYNSbWRA/yPdOYmjbbwdpTqjIyBBfKp1qUGADFLeOU4mPkzwcxJMdnkZEjQtdzA6kThpZXbj45serjNj9TCuAeZu/l3Dgr/bdP9JAfLFzTEEojO4CQMIKl43L5eC6wQq+naly2Z3c50O9aNgEg9Otdcaetzwmx4pprMeVRT52s/CjRQUtzLqUHWTTfKp4g9YKw6XKBIaPvfrWwWE8TSaLX18FfsX4/wYSiCTKI1k2H8eF5XmXHkY95/rg5aL945QLe3uLATcNuqntnFR+W345b4=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"It's possible that it may deadlock, depending on the implementation of FirstOrDefaultAsync (and the DbProvider implementation used by your EF connection).\r\n\r\nEven if it doesn't deadlock, though, it's just not a good idea. Why should your ASP.NET app go through the trouble of sending an asynchronous request to the database if it's just going to synchronously block on it? There's no benefit there.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"42368e06-b678-3294-afc0-b4eaf064b425","date":"2017-10-16T21:44:46Z","timestamp":1508190286,"authorUserId":"disqus:stephen_cleary"},{"_id":"7e29ca66-56a7-3648-a1f1-8d09a9d4cc17","authorName":"Stephen Cleary","authorEmailEncrypted":"iQSauuCqqqzzzMPQvm7iee6v9DU7NQq9XFk2mSDvwMb7/xC5mbmdnQtx2CunD6La75BGjUbwTOp4UuJCxutAveGmftr5trxaC8S8L9vcCCgC69Tk0FKy6EDwTd/a030A6LxSRXR8Emy27KuR7QcSsFzW/JemiVy3ExAOLRJnBRUHKg4JgyOWp4WIibQ1Aw18cPyUJvJpbm/zyRL0Jyapyqjhz/d13MgxOAcHACrCV7Fu7HgmAFC27NI0YRuURdLMQWx025XTTxxNGKqMUWlmubq01Cx/qJRpHTTbDo4X4kGNz3TcfNbJve+YfhHGT3zd5N1YqG0rb3pG84wVIyHiWeO088K8dyDYUUOQa5tBRMRCLzARHl5vQnMuykbXCopsM+Ya4g4m+zFF9qVGTEIW+g523UgWENbnhgiHB2BGnuLZPvUgaHjNAptrIcBP7+wFH6Z0Mwf1n0XR7TEDhRHe7wsnJerz4OVnTQQuZRGqU1K9trfgn7X8IfF+PIvTj7X1LtOa4BEysnODjAv26it5ph7gJ5mGQJhYZcmyzfQ5uXxDmNkw3v/BI8ML5UraMuUs3Y4dazafFrwRWbzHWq3AcQjEIm5PqITwSQocRlTzHC6g/bN8K2yfHhJzXVy/9UAccg3RnAw6Eq+SS7lk6w3/UcR6lkrZXAu74kpBtwy9/QM=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I disagree with your interpretation of the repository pattern; I think exposing IQueryable is both acceptable and preferable.\r\n\r\nRegarding exceptions, there is no need to make the code sync to translate exceptions. You can just as easily keep it async and use await. Just use try/catch exactly like you normally would and use await to call your asynchronous APIs, and it will all work fine.\r\n\r\n> in practice how can a dev tell when he's dealing with a \"plagued\" async method like \"GetStringAsync()\" that can cause the dreaded deadlocks?\r\n\r\nThere is no way to know, short of inspecting the actual source code. This is one reason why I do not recommend depending on code not to deadlock. OK, it works today, but what about in the next version? Or on a different platform (HttpClient is an interesting use case where it never deadlocks on desktop but it can on Windows Phone)? Or in a different scenario (e.g., cached responses returned synchronously can cause the code to take a different execution path)?\r\n\r\nIt's far better to avoid doing sync-over-async in the first place. That way you have code that will always work.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"2ec2bd25-6238-35df-9e9f-dcfda1b58f6a","date":"2017-10-18T01:29:32Z","timestamp":1508290172,"authorUserId":"disqus:stephen_cleary"},{"_id":"dddb43ef-29c5-3993-83c1-37d6981913c7","authorName":"Nyagaka Enock","authorEmailEncrypted":"MtD1lJ1XpbCJTYP70wOlYseXl+3QJfHYy1k1oge8524bDpDF5hmR5UG+7hqy1Wr+ka/Xh/qPQ9oIhLikEr1XJzKK9PnuGdFKLWApwfqeO2LWvtjmn/kZpTF8/fHrw6ywAFC9/OIS1XkXk/YAhTb2hbej7ePud+HAGyDfAAjURop5ndDIWqb2pofetuVl+meyKa6i2WQ+FI3JTJr4AwzDTJA6vxkutHrW2fb++1b3/fSNZVfgjh6g+tWSiL+ue8R20tejbBdpKR6zYCktimr6zUAfX8VbRX8Y3GYuxZe+EvCndV7Ox++3OblYmCRPckr3NxJiVOn4d1kKEE6SpQsB5pSej9GbOk3GU2XfX6uO1EUSfvIvOspOBWV7YjxMNS95hNUvYOMuYxLOiLXXp+px2yCwL4uOWDYjc6yrEthkcHgIU7hfVsMPkmAbAHrIYyvR5Ajl2NEPMXuO/gjATAhr2B5dFKeP5VUtZsKNdkmywPzhGXew+YV86uWI98CbzaENxMCVKaInIxVaEyU1uDTDwY01BvJx90xo0yHQcbAr5DPnX9jmpQLlypeEEhbsYRKOxOxGPRO/nncHnegrOKjI979wcE8iNf8QZw92hO6Sa3IMhFqqe0MFiZRSLzZ1CIb/uaYQdH5iTJzGERF4u3aMuEwyLWmrF5WYUMkAh1jInkE=","authorEmailMD5":"ad9f519f042836409f10b63fdcc7200d","message":"Thank you Stephen for such a nice post. it's really helpful. But i have this one scenario, am not sure if the cause is mixing Async and Sync codes, or running on different threads. This is my problem.\r\n\r\nI have a callback function which runs very ok while on the UI. This callback calls methods which are implemented Asynchronously. I decided to migrate the callback to different class, i made a dll of the class and used the dll in my project.\r\n\r\nMy Problem.\r\n\r\nI have several methods which are in the same class as the callback and which depends on the variables from the callback function, when i call the first method i get the expected results. Calling the rest of the methods gives me wrong results. Will you please explain this scenario and advice me further. Kindly use my Email nyagenox@gmail.com\r\n\r\nThank you. @stephen_cleary:disqus","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-10-31T13:28:51Z","timestamp":1509456531,"authorUserId":"disqus:nyagakaenock"},{"_id":"20523826-5672-36b9-b130-b82224682bcb","authorName":"Stephen Cleary","authorEmailEncrypted":"jxd0CXWbrE5eL7leKZ0m6gAwMxylSAgEy3tL8y5I3Xw5G5AI9CNMW8udXvyVib5xnxE9du7lb4hRTNh1xPgGUYm3xQ9fdhVPi5CHszjYCSfZknMgteYN+I5w+pFkLdR0GH6HaZxdiOeyZ0/6qHaYJzJVv5+clDUFSj6lZGN5iIlC8Nw2LtXaII01sihP2pxD95tlzCqmo0Z0mkYm2uk0g4GA7gOqMUH/fW61PMn3k/ev9eQ2jRtYBDS1YuH6CnS80pjc+rTmzLC0CjKnRg92bGHf6VkxcEPCZ8vqQJr25WHpud0szIKq6ZC35eDatCOH1Qb/x9Lu0xe0KaC06/zkOEznb/ojc250kn0Dvl7NYtp+IYMJqattkP3sauCwDy+UMb/cpNv8qwTZD9GgdqwMwoFX+/ngGWGpyb3x9NSX75qxaOXkhXdrJOwuz16+JWnQvgjpurGvY9iE6NfR1d/XRmCPpa2MAL3xHEcGTLIHBIgYj0Wcjjl/V86daXFGGlaPy/O9QaJKc+k022jyNUXMGrvV/jfiNIPl2CRyJJLXX38lVp3Kd5PEQgqUNo+9aFMUju3FF+vGmi5yckWEZ41H7EUczwrm4iRBd2hJeB9fHa0HA2XqIVM0lUAXgD8erjbD3HMBobb/EV8cU5FQa4l27xfaYc+n/6jM8/vnPcVqA3k=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"It's possible that what you're seeing is the result of multithreading; e.g., if you do concurrent asynchronous operations on a background thread, they can run their code in parallel. But it's really hard to say for sure without a code sample that illustrates the problem.\r\n\r\nPlease reduce the code to the minimum necessary to reproduce the problem and post it on Stack Overflow. There's a lot of smart people there and someone will probably be able to find it very quickly.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"dddb43ef-29c5-3993-83c1-37d6981913c7","date":"2017-11-02T21:38:58Z","timestamp":1509658738,"authorUserId":"disqus:stephen_cleary"},{"_id":"0dc2c3e2-c6f7-38cf-b197-c5bd56dcf3b2","authorName":"bh","authorEmailEncrypted":"hbV+XDw1N3KqusQUteH1n/B1seEZysJ2by8fbBL4sNkiS8F4pfYLuWC1jmBFUXYK1IOhcm8htUQ97MhyH5WoNap4KAF4ycUJ1h268mlno7l5e2NLvv0dp1UiHg1XRfQJ+0RnzTj+4IL19kilEJ11azWSywNidBemV4jvu315QJfJiouxujebgszFoxTe6CvQkhF7ijJj1KXFRA1Fb9yVCT1576bdOWecoF6gKQicA05vUmf2yCe2UOdMtPUukVTXSniC7+C6kP9PWoj2GS+h5ZsysFvy2Bcyyqnjr/Ksa3cSj6IH0zinbHrVxc5pjw+ofs8tfjxswkYMrfjxXP2cKqLFyjmG4sKRfW7wx52jQqcoEkgp/yjig75ropOWapx95mtfLnas0yB8tWBsYsrb3P7hociaiUwHitdOHtK/PmzVg5mp8x58OGDmkrKelP3HPABJTlq0zVmaKhD6ktVsT9goJz+iNZgF9lZmS/3YQLsEe+ANajAIYqHIxTCDXhXlK+jkrnao2cEBe9Fcfh0b57BuI0vzpWmTvexF8+S4+UZgM1XEGPM6vol4gR7XXMI8BpfaqyVEQJP2Vq3DwXyb0ta0/AuN57iUCDwnnxUumut7+UuEnOZH6LTmEv85OPZVmHXFFTMyrauvDEZNE+S++hBgOjFvFV6xqwBlJYDHhfo=","authorEmailMD5":"c7a652c603935e6b6fc8eec2e8591b57","message":"> The top-level method synchronously blocks on the Task returned by GetJsonAsync. This blocks the context thread.  \r\nI found this misleading, as it's accessing the `Result` property of the Task that blocks the thread, not calling `GetJsonAsync` without await.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2018-01-10T15:19:34Z","timestamp":1515597574,"authorUserId":""},{"_id":"4535205d-8e6b-3643-ba6d-a61c35da63b3","authorName":"Stephen Cleary","authorEmailEncrypted":"gHmKW9QzVTy9W9wAcZUCc95QuHZUg9eA3capJ5H+uKhb5s9L4p2PTEp3ZBJF8Rb3IDmfhPKTZUnCmBZIpRafBGNxX6U6GOJQzWTHT71yXp0XlrxCQjhj+slN0RlKMhwqu4WLzcJ/0IAgHo21epsQh+lJYZWxbRSTpZiFIQkEo+CpooX6WpayWNbFiEaZDbBe3IXd/6D1mnRFr/lrUXiKTJbov+EERApyZtUqfNYQrpCdtYVpQycHjGsEZqmGQWemaTf2C5olmt595/H+vUnUuBtLukpARE5X8KtbIufGNmKzigiBOyY3qx/w69LCQu2/6MBaZDv8r9IAYah5kTjUAEYv27+FdTjSqebhX7MzWWBXUng+/3EK9M0rKnpC2Yb5uN90JdscJr32y0d235ryK4C9XGl52PlL3vRBUCIZoz1x8mMFM62DLweNAsiIOVzlWQ75TgoBFv2dRhbyWHSmXHIAfLjDjU0AJxA6Hy1MuwnAg8coB1vd0JeFT74glK80H7PBIWcphIE7zhoqL+iVTo4b5hTFYCmgq92DCJOEWbNZqxLyfKA4Xy1nsUI1jq+K7TQWD32gzCQ/pGWRf6mMLvjF5iTb2MX0ROdiNhancPQRUCmtf+6zkmiHSnPpt1tRzhRgMRBeb6ryDwy9IFDmwsn2B1xpNthxARWBEXcYB2c=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Yes; that's what I meant. The top-level method synchronously blocks on the Task [by reading `Result`].","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"0dc2c3e2-c6f7-38cf-b197-c5bd56dcf3b2","date":"2018-01-10T18:49:05Z","timestamp":1515610145,"authorUserId":"disqus:stephen_cleary"},{"_id":"80602b6f-3bd4-3070-a0bc-591ab42e6ae8","authorName":"Bowen Zhu","authorEmailEncrypted":"kJde2DmbYkHFTzUdsLFCnxHTN5HSy+RgPtXfyWGbJ3v0bWdhXbGPeDpm/VAejKRq9S8e9GzdGk9kqCVc3eielR8ZlPVSDuv3dWvPECz5cvRg4D6FiRorRY4rlZCwXzv0+ZYUWwqaHkVkx7sIpb7KSXH4ZMrI8zTb6aVeyBA8aberk4AQ9q+KVBkPmpa51W0RFVh2Cw/cHLHXlLV8XVz0O0+ELERmhRjIT+dpZRD97VDdQx/XcvUwlqJHob72SjyJebFhmzGwaS8wmg7Jp8dnE4n0ZfYM53YWR1Y87XWj1Vp59eS3jzZkfxxLtR1l/zBNuywXrmZNNEChoPLtdGXHIJvLNj2co/tzSwwNJOXofIIPHZGYBkE8f63g48Ns0T3rMUgMcWIGKMRmMzO6mVQnDH/icBvljA/w1psVe8+StyWZmnv1hPbEBhoPdchw3+0yxwEpoBygBmEQOyejPohIoqJqRShEyy4e425WqDPDYgTP08/ZAU/c6PWgumR1kAYLvZyXyIpsUcflbe6cXEy/hPoPwIwMDtTG5OWhr0YCPSlIldgO2qJlkWwHxiWSQVkw89HJdYXiuIEf3UHeedYsmmYjOtb/OI73dt5hrESE0/1/87+3TKwHiXaa2mKU9QQhJzeJJmsgXBmFSdfnuaSSjkToYS2/V6vIx2kJin01XXk=","authorEmailMD5":"b6420a5dd5fb035ae3c24e4081b3604d","message":"Hi Stephen, so under async model, on what circumstances should .Result and .Wait() be used?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2018-01-19T01:02:31Z","timestamp":1516323751,"authorUserId":"disqus:bowen_zhu"},{"_id":"aaad59d2-a97a-3e69-a557-5dd693d32ad5","authorName":"Stephen Cleary","authorEmailEncrypted":"JQjjqUN48qtSe69v5/xu8R6rmJy/hIh/b4KOthElSYEw9uZlFdX8KqnToAQNKGFtUTJnU+LAaaThSEipmZHretJ53WEEG/VkmwxfxP10YciVuDWLoD8ysrLUDOrDtSm0iVWgCjsq/Vcyl18kyub7tK77zf0HhptKYtekWfG6LAWu7Jv952BwOk1MGh9S6SFg9KLAQKsjloWztNK8A+vD/Bun0/7VRdzKNdDxsD/34Hw/V2YSnMQI+sWsqKPKZeB67n94ZvfB6eZfkpSWZ03OqtPpfz7zZikGVZi8VBQSn6AcwWnHB62NGYAGMwfQjmrDCY0L/7b3pGfFZqjnqRCvyZXfBKhWEBOdFum7IZ1NQnGBBx9+VRa4o4m/4Fqgy3IK6G+jUUS4RyNkB+8ohGA4qmpG59K7NSZWEP3Ps8Zsi1C4yCuyYr3LzD0nMFY3Wy7CMf8fY8fXHXt7uKonQk7gUvCMWkJRHhhUVBB4q59yQtUFp0jwaT7N3N8LJcxMdUstJo3HbXKfwP1l1HXLddNPfaBXEAOu3a+NwCl0VPUNDJfwiLLEnN+RVW48C/pctg8n7aeoy9SCq2PxzttkbYD62pDkF136Om4eQKnZTmkmKNAB663fQGdTEu2ky3WP0qfZubN0Zfrv5DLPFiYnMo3VJH83oRNCAGja21LRME9VfNY=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"They shouldn't be used.\r\n\r\nThe Task type was not originally created with asynchrony in mind. While it was one possible use case, it was considered a minor and obscure usage. Task at that time (.NET 4.0) was mainly intended for use with the Task Parallel Library, and it almost always represented a small amount of CPU-bound work. When async/await were introduced, they decided to flesh out the existing Task type and use it instead of creating a new Promise type.\r\n\r\nFor this reason, Task has a bunch of members that should never be used when writing asynchronous code.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"80602b6f-3bd4-3070-a0bc-591ab42e6ae8","date":"2018-01-19T01:14:54Z","timestamp":1516324494,"authorUserId":"disqus:stephen_cleary"},{"_id":"0db0e19e-8ae0-311d-9594-f82de41bc7b6","authorName":"Stephen Cleary","authorEmailEncrypted":"M694NwQAeTynLtiCWecCB0vKomNouGp/+mPOlzUomisAu6doBcis2qNU2VEg4jE/pMNu1vjgPo4vuPMy3nsnUaowdOi5cMJ1VdJbOMjJi5IU6WgssVw55yELbXTJPlXd+iOv9q6DFjW7ImyN/befWLxsfdDWrW6eQ3dW0ujQgSul53h4h6jQYDp3oV0dLxMDrS5QwC5twXUI2Resay1uevU4eLHgJihUm4yUdLtGou7IsFC5jTJcgCla0T9KTRSg6nZT4ivDBsumQdH3cmuEG+VQ7MXVg+SChePG+scdIH8F1u0LIDt31kSmRi+zlSNWEAjOoRsS0ah3iD5ELnEZHl/kDFNQ/4UBl8TTShjpa0UicpneMOgyV0onpkzLqEZggS1Oim4IP76I+nmVv81dfqiVlXl0Dqd8r/qhamFmmj/gUJROnR35t+4UyRQSxyPOpeHBjq06vfYgc5HoU98KdadLbdK/gHxAvQow2I7s93w41JanSgpIGGUrmh9OcOe6/jBcXgpX6yTzzySmlufBz2/muS6ti4DXUepXBXDMzieu+M04dCGra3tLGpZMPCXtKzNw85flkqbCDMzVCD4A/duPBThQmlrgwphDdRjGqdWyop8E2q0UKAG4OMeK0Ls5JkyvpyiV+REvAO11xJ+PSho3ofsEqqC2Y1jjNdgsPuA=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"> I want to pass an singleton(context) down to another http message handler which would execute later.\r\n\r\nMy first suggestion would be to use dependency injection, rather than an implicit context.\r\n\r\n> use HttpContext.Current, and any code before it in the function should use await without ConfigureAwait(false)\r\n\r\nYes.\r\n\r\n> CallContext.LogicalData is not reliable... It's possible that CallContext.LogicalData will be lost under heavy load, together with async programming.\r\n\r\nNo, this is not correct. If you're having problems with LogicalData, verify that you have httpRuntime.targetFramework set correctly in your web.config. If you continue to see problems, open a support case with Microsoft.\r\n\r\n> neither does thread local storage and thread static data\r\n\r\nThis is correct; since await may resume on another thread, thread-specific storage will not suffice for your needs.\r\n\r\n> And I remember you mentioned somewhere, we should create a context boundary in the codebase, for context-dependent/without ConfigureAwait(false), context-free/with ConfigureAwait(false), respectively, correct ?\r\n\r\nYes. In your case I would separate the code that uses the singleton context from the code that gets the singleton context from HttpContext.Current.. That way, your actual logic (that uses the singleton context) does not have a dependency on ASP.NET and is more easily testable.\r\n\r\n> this.EditControl1.Disabled = false; should fail in some way, correct? because the resumed thread didn't load back the SynchronizationContext, but in my test, it actually works, any part I missed?\r\n\r\nYes and no. The runtime behavior depends on the UI framework. Some of the more advanced/heavyweight frameworks will do the thread marshaling for you; while some of the lighter-weight frameworks will throw. And even the heavyweights do not always marshal; automatic marshaling is sometimes done for single properties (e.g., Disabled), but data-bound properties are another thing, and data-bound collections are yet another thing. Different frameworks have different automatic marshaling. Since I've written a lot of cross-platform code, I follow a strict rule in my code about never touching the UI from a background thread, even if some frameworks support it. That way my code always works.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"fb685f31-1d3c-3ac8-9936-c4301457db0f","date":"2018-01-20T14:49:37Z","timestamp":1516459777,"authorUserId":"disqus:stephen_cleary"},{"_id":"fb685f31-1d3c-3ac8-9936-c4301457db0f","authorName":"Bowen Zhu","authorEmailEncrypted":"b8rrbzyMnaYcPQmnPa/ZijjVKrHgoxT2z4aQC6RAm34JaqEW0a8+KQgCr5XIRWcr07uQepV9+BkH27WC9GmX0C4D8gVKlxg1tavUtJ0j0gxteJYA6kwGWdp+x32zknhahLUHAIC4qmRzLEtosfcKpkFNrMfdi9EsgEmjDtw1bj6QFUn7YXnCMNpPukiZA3nJcIde8KEa6M5r4pYJpilXZZ53rEyRSf85UYUeU4Pv0I2cWiQL+5ERGO5yK+8rpGjbVQ7A7vDnqjBnBFvd37kqGl7A+uvWPC2gXD0/NNPEJB0zBLEBJqVsuC7pFoNtYFk/zZUAjocPjqNVY58TRE1m/0WN19kfKsPtwKx0sSMBQK77jJiS5o+XiLGGeBo/w/4a8LmZQGHXj//gM3+QXMnnXwPccVpswfrc0Do48X3Z5VzYOQlHn2hTfW9In+YUgByVbJNr4hUNKJlLiBidnuLEMjH+8DyxPI3VoXeswz9e4Lzls4/GyK2PExIZVdEtar0S/IdiCMca8mCx6kthHXzmrcE2EsubbA2JYNe/gyo1wjbezUyC1oMX6JWT2t5Kt4BZ6GNAJL9JmeOwzMs3LVTAUoYsvdvubCMc+cukpGCqb9TZOEqCYAgN5tSUvByvOp6MYTHu6UPP+/KHhBpo2bVDko1UU2dgUujcRYzhXTQ9Dxc=","authorEmailMD5":"b6420a5dd5fb035ae3c24e4081b3604d","message":"Thanks for your insight. I have been trying to figure out one thing all day, but still not very sure of my finding. Could you help take a look at it?  \r\nIn an Asp.Net async api controller, I want to pass an singleton(context) down to another http message handler which would execute later. The only correct way is to use HttpContext.Current, and any code before it in the function should use await without ConfigureAwait(false), if any, which means to use back the SynchronizationContext.   \r\nCallContext.LogicalData is not reliable, neither does thread local storage and thread static data. It's possible that CallContext.LogicalData will be lost under heavy load, together with async programming.  \r\nAre above statements all true?  \r\nAnd I remember you mentioned somewhere, we should create a context boundary in the codebase, for context-dependent/without ConfigureAwait(false), context-free/with ConfigureAwait(false), respectively, correct ?\r\n\r\nAnd another question, so in a WinForm UI program, consider below code  \r\npublic async void button1_eventhandler()  \r\n{  \r\n await InvokeFuncAsync().ConfigureAwait(false);  \r\n this.EditControl1.Disabled = false;  \r\n}\r\n\r\nthis.EditControl1.Disabled = false; should fail in some way, correct? because the resumed thread didn't load back the SynchronizationContext, but in my test, it actually works, any part I missed?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"aaad59d2-a97a-3e69-a557-5dd693d32ad5","date":"2018-01-20T02:17:17Z","timestamp":1516414637,"authorUserId":"disqus:bowen_zhu"},{"_id":"d18a366e-61b6-32de-9121-a7dcd0441e88","authorName":"Bowen Zhu","authorEmailEncrypted":"MaDgWlsQA4KCiRhWC0lU7MR9gb9JxKTkFnBLfjKj7w5ztTBe4VeWSL7eJzw8NqxvU/2Sa3P/G8BtrFP1wE85s3eLhX0BGkmZVU2xcp07dPZkPpjkocZuFC18pZxqkM5iD2XWXQFhWf+lfGHkYyRg6fltjg36hsxpGywQi3ol6pK8K6+oM9bMS8rI/5NFGeObMaCIhSSkZFsLRI9ax+7Nvqq35vf8ynrBAnhY/pwhAkX8a39QG7jZjW3fcsSayNxLYOE0o/l3n8k3GaORnUho8/+isYEedbNUuc2tVZJHyKmCyK9oeRrROofgbT/DrGDmwf3k0W5xR9OW1JYIWbvmql4Fam9i/aGwtaGth2eH/d+DQbu9BFNQUUjNLVsuxwBwxQoEjx/ZMkxC/xEgKnKK9PTejKJSItBtJIIIn+avHyK1UOOsbVw6p3fxg+b+BaPXgc4MC3kKUunWfUkjyXPPBIrn4Yc1wQseTAkNcEcXXZbayhtTv42N1GsD9YTJL638PjMMmqUGCtPmHqVdpR4L2skgp0svdGlC1KmB93VYPjFWhgLumDWj//LBMDERNUYRw+Mz0pHyHGKF3VCWcq8qUzfM4GHWJosbY78/w4fgM5tk3oShFw+H11QYH6N54jGj/Cr4kFSCbJWTqbMVwD2X9qwoIYaHLE4fZf0dRI8IGe0=","authorEmailMD5":"b6420a5dd5fb035ae3c24e4081b3604d","message":"Still the same [asp.net](http://asp.net \"asp.net\") example, to pass the Singleton to different handler of the same request.  \r\nUsing callcontext can reliable pass data, even I use configAwait(false) directly before access to CallContext.LogicalData, correct?  \r\nIf that's true, what advantage does HttpContext.Current hold? HttpContext.Current requires SyncContext, while CallCotext.LogicalData doesn't, yet they can do the same thing, why would one use HttpContext.Current?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"0db0e19e-8ae0-311d-9594-f82de41bc7b6","date":"2018-01-21T03:55:27Z","timestamp":1516506927,"authorUserId":"disqus:bowen_zhu"},{"_id":"08021eca-9448-36b8-8db2-082e9c3c1320","authorName":"Vincent Gravel","authorEmailEncrypted":"LxrjjzdKez3rknm30Hb6oJcYRZCtTqr4PsNs6ATLF90rQ/iPKsn+eX20z6kDS8aHqdDuDGLbrVLAWLS+9ajGmP3pyF+bs2MjdNVTACq7pmsv6MZ9/+Zc9YpyibYqGz3GSG8bXRAf7CsSdAswSxDaLjNBrF1NdzWPP9OIV9BC1NJODlAKv79hJXlmYwCSKZpL0b3+ro9bZaOFsn5eE6HSd/XTWvGDst+6yZG6cEkeAc/en3M5BdQrNHwMzIFPKDJxkslH4M8SQe7+TrPg1oidhK/KGsYEeOorozR8GUzMxNLyy3f0t1L/4SIDlfsst4xWVxeetICzvwz8eJo1a6MKWq+qTxUwloGEv9jW3N0g+sPYEqLjfyNsswFNtC/RgfHG5FaPlwjemsW+mFXaORejzSxM4y1/3TGRvx2nYqz7mxt7unKdaC2zUWHVBmKmSFleacockXQPHdrRN/AMuGc6DDSf3JcXhF0gIPRF9oFYaya+arRwhbqMRNpDEWl6EoNMsVSxkzWSbbrkj8OzeyJ2XUbxxfGcEak/wfTV9WGnCAe8n+bwTB+j7vYWoFzTxPF+/b3z91BGF/CmreNMuzVHY1PdS3MLhCmOQW39HbFQCMs/2ZHZ/h7p7NfMe5BKYQ4UQKv35mL5vLSxrfR7FIBakgBtpHWoPU24irnMNW3JFWg=","authorEmailMD5":"4e9d619f1a01bbb4f1c209dbbcad2498","message":"Hi, is it still possible to have a deadlock assuming ConfigureAwait(false) is used for \"every await in the transitive closure of all methods called by the blocking code\" in ASP.NET? I'm not looking for doing this, just curious...","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2018-01-22T19:37:09Z","timestamp":1516649829,"authorUserId":"disqus:vincent_gravel"},{"_id":"09d03838-48af-3b43-91d6-71b0c5183d4f","authorName":"Stephen Cleary","authorEmailEncrypted":"mj7dsdXx2SIuDdkPNE3kMBM3eR62r3q1hq2rnq7uP2bDccH8rd2sa0UwZrP329CHK+L6kLAHgKCg4H1QVtD8x+CgS2tSbwZNQLQbupACwC+GCLeQfIMFJXJsz53jYd/py9BDVpWpnBfCdpfzYGdL1SzWoraGwZDa7PPpnm+mG5GL46tiuGeKQFP/aW/wd3SiSH6uKTJzjGIL9X+GdyyF6MUzrMSD+/T9IzYOAFw0J3YhSdOdnMZFraiFvX//UoZtAFzO0w6wW710dxX84ZTQ7SioPwYSSvt27ax9CCygWMpYWGuR5L1hVWGdU5pH823hZ0a+3ZTIK+SvKMJBTL8xoD33e7u6sGq31UPrI88XhEop3uFdLbLOlYItW1zoHFqa1awB+rmW8mgu2jzXSUA5k15Ooi1YZ/mDfSw/eSBASeGindiq3Y0KY5YNLtrtLS+2qxjWiUjg+Yo8jnk1+Gz7HyqxBRSEjR3rShNyWJWFHVEUdu7zJy36gWmZtOJ5/CGpO5Q+JRRYjisdBNWD6wzUrqbkrcM+iGjry08SWmgH9+iCLr1lJ1nWEdgAl10mb3+rZTp0kAvyUv2TNuGGS1AJBvRDmodWswSuOZmSeSsMlYfESz+ik80HBoAtdgr4gwxHn3pjpo1t7DBKOVkOClz+H7WRTFNh7ku0AZfdVUssJOo=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"HttpContext.Current was introduced more than a decade before CallContext.LogicalData started working with asynchronous code (in .NET 4.5). The books and articles that talk about HttpContext.Current still extremely outnumber CallContext.LogicalData.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"d18a366e-61b6-32de-9121-a7dcd0441e88","date":"2018-01-22T14:16:54Z","timestamp":1516630614,"authorUserId":"disqus:stephen_cleary"},{"_id":"28d35fd7-3f39-3d0e-a465-c23156520801","authorName":"Stephen Cleary","authorEmailEncrypted":"dp5jmJKnr4CtTas3kWLvuvZM5feYsXwq97MEPIDB4Aae7jWj3JpJv27IjEKOBcJ9LkkEInVeJhr7yCT91NqnpyPV8Rs5mN2J25xKWpgOnCx3GXxxIpijXW/nfIYHfbB6KfBN0Rk7NHCJdqyLMRRC4MUyTs3+F2u4BtyYEZrJKCP3x27SdTzMDpjN8v3gUds8ClQRmdBo9mnTvJ/ogBWzeWoyLEVCOZD+Fq18FPSkrzvZW4B3OH3yrJtTsgROkf0jmEGUzgKIkpqzPbzdDWIovw5cQhIRBXxexh78Tem5lygoy/l1XEGMAXM4eB6wV0ydBjyKOxDEZnYAae78Lsxwm3U2RwHuHU0m+AhW1ANEuOx/OG6MTbC/y6kL1Pmwa3uMEs7jG4qdQYjch/YqRBB+lsPdHejWYLM8LImj8Fx2xqtxghh2PcSMsNU3aUsofdrUpUh5Rn+NvWYEutZ2CHG//oRuHLMDLx2DpQIPhrG3sozgJZzhDNmu6G059vcl0sXAWabSW6FYHjI24Gp2nZlru9fvZdfbt4a/LlcFwkqk+uedeU9bvAdeCJOgcdlrA/I/SC3/k46ggU9TmHxdqZD0blEGFCyEUIATS4J2EixIwMqnW1tEu2qesRbLJZB2yUy4x7TyaPcPK2KO9W2LA2JS8a/TyQY35HR9snHADB/t3qQ=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"If you block on asynchronous code, and every await in that code uses ConfigureAwait(false), then that will prevent the deadlock caused by capturing and resuming context.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"08021eca-9448-36b8-8db2-082e9c3c1320","date":"2018-01-23T14:10:50Z","timestamp":1516716650,"authorUserId":"disqus:stephen_cleary"},{"_id":"4cc4b183-629a-304e-8bcf-98bc5ab484af","authorName":"Stephen Cleary","authorEmailEncrypted":"p1z0pyo00ODOlgWig4dNbY79Wl83GteAU34PrKd1eTwddnX8R6ttGdxmacrBiw/ddvg4os/Uv1jjlocmn3b3mwWBreJBXhUcJonc8dnYyExz294kUNWOHqKR9IKuibdSI5xZYmaA0ITPfhgSWDg2rbUNTG3X+/Z7H/RmkVHUAk0KmuMdEFJxTP6CDla75uYLHPRa5Rotfz5uEaYB6SjkX4xTIpqXvi9qC6QwrA9LjNk4bMmIN/iOuaVeBbyXXLbycGVHHsDugT4DXsz+oefHxiuJOEsEE3dT8eaWujGpmggYz2woGp/iTU795Fj/fWBvMM/szY/H6bug2u8cwihtguxS8K/lq0dlUEP5oSaLWmAuIHifhr0LO4DVIOOoO6wQJS4GZXDW4jHJBOrG5klH3EmpuUFX4QTj8GJSYR2h5NlptfqX08PS+sJeJlqCYr9tNjwtK5rsacUVF7oZWo8ralEQCyzghEfsbAlmRc3bhf4ls680d8NMUKT/JnIE8TK3cWk5x8Z62SWdfj75Nsv6EWKqa+UqLLradSE7zTtYjAijBZuLOG5JIZpiGlsvzRIqFDn3dEvBuWhW+UP7mhIUM+2yWRNFEqm4FDcogWH8oe/SpJ751oGMlrvbWYHiIDDeKlN1xAe7xsWfnaPEVsES5xw/ysl3p75c421Yt0dTQ8g=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Yes; updating UI elements (like textBox1.Text) can throw an exception.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"ccf79d95-be5a-315b-95ba-45112e5a3718","date":"2018-02-01T22:31:57Z","timestamp":1517524317,"authorUserId":"disqus:stephen_cleary"},{"_id":"6904029f-ba0d-3000-bc97-b0806a34ca47","authorName":"Stephen Cleary","authorEmailEncrypted":"qRdIPXnPJD29+jj+waDE87bmxQ+2jueEhISmKqaF0CyegwR2S2RVTTCWoYHf52s0Os7QFYq758LklhwaBMlmearEryyl12X74JO5S1xOePKSeczSvrdueO+3/kwDXgBlZsmKUSUBUkF0zOxDDcgGuf0k0jyGpY8gO1tjElrtYzac58vdlPHn6qXbzvVQ+YZG+9vg+c5Dh1kXBy8rjgcHpRUyCJOiQga+Qc+p2zgJeBUhAOO3ODGp4MS2byZjhGVMqQ1VRiUKImrw0dzFWlLiLx7IF94ucehxikrivkm/YT6xfaYr+grQz+TIDYBp+/KHeWGy7go2MmYRr+8Ox8VLDFxtn9EuILT07RzfmBkrPO15HfDBUVQLmGDE23ygPr4eD5VEp/HFDWRDl11N4LLDrf0ZJfD7/Zsgu8vLeMT15TnLGiBaBXqttAZ+cdHspxVPqkTGVRweOG8+A4Xfk7QJLLBiUxz9hXawEO6oL9xGQCEuuB23YLIWHdC0+q3AIm216LL1u2v6D98EcVtbWXZrc+9QoHluHkR8zvbfavG+wc9yJnGwpVbD3orYTAJKYefqqAYi6ASloFNDooAquPcWw6ZVJoyi3B7CCxEWym/rhPAflNY43gBveeUM+l/zMWQSnqpGqkX3sAY8invFzo/gB5Dat9Gknc5ibLd6EJuaQTc=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"What I mean is that this demo code:\r\n\r\npublic async void Button1_Click(...)  \r\n{  \r\n textBox1.Text = await GetJsonAsync(...);  \r\n}\r\n\r\nhas a much better appeal than this demo code:\r\n\r\npublic async void Button1_Click(...)  \r\n{  \r\n textBox1.Text = await GetJsonAsync(...).ConfigureAwait(true);  \r\n}\r\n\r\nBear in mind that in this context, no one has ever seen or heard of async/await before. It's a brand-new programming language innovation that is just being introduced. Having the simple \"async\" and \"await\" code allows the presenter to focus on the keywords and how they work, without getting bogged down in the details of contexts.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"d41991e6-4b98-3f6a-9bc5-2b02afeed964","date":"2018-02-01T03:29:04Z","timestamp":1517455744,"authorUserId":"disqus:stephen_cleary"},{"_id":"ccf79d95-be5a-315b-95ba-45112e5a3718","authorName":"Ray Luo","authorEmailEncrypted":"jG3lC5yoYX+umpvDxsc95wf30bfO9ABsfERhaW2KOInHquGqZR5f9T+ilIucWYjkRBdz7Wbop8zfmTlRUcyWov3vuY+Irf7deLiBi+Zoa08AVXrmyVvX7FCERn5LbTo7pYPDqYJ4kmSpcjCX8TIrMHeOEvHHo/GQa8gCcidPlDKqDnthjSAZ7pTZcBH4W4LDwLFILukc4Zh05aFxjy03dCkQLbAob5K04MoG+f8+GXnSnhYRRKpNuzbW8tccF7l0ssDQKfyBZOK+hTJKC85lpGOVG8CTm0XYaSb/mzAF3NX0kxT3QzMog/JEnHEp9k6UprKgv4K5NeL/pkNVDJRj6O+0p7zpjOs+xx1BQDpFtKK2GUMKtW5hkUZLAhFdNPQ8YrAuxQw3+Xe3AlAI8bcW79LUvicKxHj4ujJphFJuWuBDn+rD8yGa2HglYz3V8fARB8H5l+/ZKhPpl72vvMss6sHmP4QkCu8cfqvsz/TwpSGoM4qLA9XQjZzpEeJcwK+BrW9KyVLHPqOcRlxjpz8wh7YCb5sj0M5rVKxuO6TwjnEg5HnbjKgctLY54BD6yN2lIIF1gplIrsYkT0rylkaYVX8nSxtHTCwllWcnpAutDuFmA0KZ7lWxWhvVRDZVGOu2x6/I+Cac9NT0f59Rxz65c0MsY8Pq1y0uqICJIV9Ilkk=","authorEmailMD5":"d64d93e535ddc76d636ec27ad114eca9","message":"Thanks but what you just described is exactly what you have already said in the earlier statement \"Practically, I think the benefit is that it made for better async demos\". What I am trying to ask is, what would happen IF the ConfigureAwait(...) default value happened to be false, or IF the app developer happen to write the demo as \"await GetJsonAsync(...).ConfigureAwait(FALSE)\"? Will there be something functionally wrong when the top-level demo code does NOT resume in the same context?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"6904029f-ba0d-3000-bc97-b0806a34ca47","date":"2018-02-01T04:19:21Z","timestamp":1517458761,"authorUserId":"disqus:ray_luo"},{"_id":"d41991e6-4b98-3f6a-9bc5-2b02afeed964","authorName":"Ray Luo","authorEmailEncrypted":"adybXtnoNjFYBRQGez83jKe2PHVZV7anS50rjy2a/kGTh6BCxxra6tPBbHiJyq7Fla2kQWO3ZzZ20Wlg3p4YXkw/hsBhkhtEvO4DDMqXisCo4ltLJi8CYZ1RU7zr2rud04WwEy6cy5Y8y+1usOgFRaIkJAB0uksbQ9Orx7uM+vNihCNVBtIa9SxKCPKFfidKmrPhfHsl3e/SVtnaRlJQhuztvwdHoRQ2WNvUNUji2IsO4ohsLk3w0gr9T9GVBNYlJrJpXOEm64yUJuJmdbilleEkqbmZInLid+/mmF7K0puAcjPrqAR8IqKIy9p2Ttgi2W0AVSfiAE2F7K8f5I1pO8qtb3ZCrN3OtekXiVssL3M9BxilOjFU59ZwZLsBc7rM85c2cbHR8p4vZpVaxYk5WJWqL0nHAzRFt8E3oKvPz7/AblKNaHMaOCTQK+x0wBl2JHLwQBUugdsyvN/Cj5E29UOWAs2zktj+Pcu41Sm2epLBUkPoveCcEK8dKHLvnHM9h2G6LIWUUvurZDYFdFvNB3jXVVvZpyuJlE84AEsOG3W+UNGn/zYsdBjSPFXQBh+mpD2iPGTEJBpre5zKTX0gqJlNBbEXLbw3LlIvWwI6FGKW7f9lc9Baamj9I3bA7mUM5+MlGNkN3zDmi+DCmXakp72S0628Xbs80LtQfZEC/dk=","authorEmailMD5":"d64d93e535ddc76d636ec27ad114eca9","message":"Excuse me for chiming in at this \"default behavior is to return on the same synchronization context which it originated from\" conversation. I think I understand Stephen's arguments on both the conceptual and practical perspective but, for the sake of completeness, Stephen can you also share/point me to a detail example showing what specific things that a \"top-level\" demo can NOT do if it does not have such a context? For example, in the \"top-level methods\" of this very blog post, what functionality would be lost if the calling pattern was \"await GetJsonAsync(...).ConfigureAwait(false)\"?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"3794c8a2-9cec-3671-8aac-608579641831","date":"2018-02-01T01:05:13Z","timestamp":1517447113,"authorUserId":"disqus:ray_luo"},{"_id":"07f232c1-8e9a-3db3-a183-2f9a82bcf702","authorName":"Varun Bhargava","authorEmailEncrypted":"sWRy90k6yY9LqD3OktR0HNOyYD1F4PKbdWs9e6ONlu5A/eFxw5bCPi51ovLlMfnTmwiyVb/2T7VpZPhvECuNWYW0i1bTcWviWqUf+wDLIccLXt8t9xdkBHQNei8Z4pRFz15ujwMOT+4WAlU5FQuqT/6A+LP8KQ2dl+ora89fxEPYHnpzTprXeZ7x9X/L8ssPTQy7cQvecoKjBpATajCV+AOfkZr2FivMSppiP45Cr+lbhrz3Yf29IzbDAdHgiu3Hn5zUbe2dAbI8bB79Bsu7vlYeRnazFymI9jZs3R65Hui4BCrYOACXdbb++/5MESdxh/XHFaM3/HRV5bxuyip3Z5ech4oDwGbgsJLqteckaJijwk4DaGAqwum9V0WQdth7Op0b0rqanQMmP9N7clRJClbCUXcoRZX43gZCA/WlxqsY71pr6RSkc8XTeNHXHiDvjzFbXMW3FYMf091mMeD8MWIaZSfjRHhMaH9WgCPCUwGxkUOAleT32aPZab4xJq0h7acJnE4rSRDkTONKgxaDOci5AdQP7pcs2G1JBJx7PAKwVLvYohdQT+Z9WegbXOT4PhG+64MRLXjN0gjL0Axht35nGIOnERviEaah0ZCxMEzeHfklqsSx904Tnh6eahQnplcrt+kBZlBv/n+1euGyoIGOTUk7c3TGexhXC5mWJP0=","authorEmailMD5":"4126b5c5e664cb207ef3cdb64858fda8","message":"Thanks Stephen. This is what we're trying to do\r\n\r\npublic string MethodSyncVersion(string secretName)  \r\n{  \r\n return this.MethodAsync(secretName).GetAwaiter().GetResult();  \r\n}  \r\npublic async Task<string> MethodAsync(string key)  \r\n{  \r\n return (await ANetworkCall.GetSomething(key).ConfigureAwait(false)).Value;  \r\n}\r\n\r\nDue to some reason we have to have an synchronous version of our method which under the covers is just calling the async method and blocking on it.\r\n\r\nThe consuming code calls  \r\nvar result = MethodSyncVersion(key);\r\n\r\nThis is the line that intermittently gets deadlocks. Another thing worth mentioning is that these calls happen inside an IOC container during instantiation of an object bound in singleton scope (which will have locks of its own).\r\n\r\nJust so I can understand better, what could be the exact reason that this sometimes works and sometimes doesn't?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"febe2270-e37c-3014-aa10-9c4b959cb219","date":"2018-02-27T22:54:25Z","timestamp":1519772065,"authorUserId":"disqus:disqus_ZZpGv0gXZl"},{"_id":"b9ae5e84-0bcc-32e3-9a8d-4167cb953a7e","authorName":"Varun Bhargava","authorEmailEncrypted":"MMs9KS6EFgP4OsXNvnwYtKP5A2y2qGpL0z/zl35aOZVkoAcirfkJK7eSGgHWRwkLhLepuWt4RufEfQLIaWvRAsiqwpHOg4Q9PHmoW/jdUQ6EJvNEDuB3IvrkgrLwHN31TLBhdwTLMizrkZ8aTAhFUAK5e0U9Uet/tT2UYCjcYp9NhRth8IrbD9lT2V1XhvF7EISRx4qHSPHlcmvHbxjQcyhSClfgIbiYjFwGGFQ21leWL/kYq3dUnjn9WXpcJGjhJ4vNXMbuxA0JokN4hjux3xwOb5RneT/U9ojRmf9qfhhN4j9Qwslw8fW/BLHFzqrG6jT/YTID3Uz3q7xgQJur6wbmFrqo/iMiYEY0hIx1TMQntaDrF+DZ2FVZiXfRBP/s8zvywbKaCYZBhGZRoWf3ME5VExgMfv0NtBnrGSw+2HFCRxHuTNfa+fZTDgWIBAOowH0kBDsNvp2fuJktaSyXCB7Kf/A0C3LiOGCmpNpCpUCt+vRbKtglfO1sm7KKVyxJSau1GLo7mxGRks2gWxWFuTbUFOw2agq7SMOP1iSMfyBZu/niEsuc2vhtTPERvcwzt8VeaALO3ai0mkPWVQwudPHSVCHSYqLgg1KYpojcnorFJWbLt4SIrcIdy9YjAmMdgRJC4/axhYq2cmGND0NkMlyaLuZ23YcA+biE6k0XQzk=","authorEmailMD5":"4126b5c5e664cb207ef3cdb64858fda8","message":"Hi Stephen\r\n\r\nI ran into this problem and your post was very helpful. Just one question. The deadlock was not always happening, but rather intermittently. This is in ASP.Net WebAPI.\r\n\r\nGiven we were not using ConfigureAwait(false), does it mean that the context that the task after completion re-enters into is sometimes a different [ASP.net](http://ASP.net \"ASP.net\") thread (which is when we do not get a deadlock) and sometimes is the same ASP.Net thread (in which case we do get a deadlock)?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2018-02-27T13:02:07Z","timestamp":1519736527,"authorUserId":"disqus:disqus_ZZpGv0gXZl"},{"_id":"febe2270-e37c-3014-aa10-9c4b959cb219","authorName":"Stephen Cleary","authorEmailEncrypted":"fJ4u9Gt7HSz24PBiloXjP1TiRImQECA+bF6UyZC3cPCCydsm6WCzTEAtGk0gK4PFV7Gh1XMPoeHYi3HsmlUNzRKVQv0UEJNL7+BtTNJBOmqJuYo8b2SbUiyt58exqpmHkm3dULL3HW0QVeUgtS8ZhT8h3OUXiHu2qCWhw8dYEvNbij+FMXGKWEYeHRHODGB78qpc3dOCqxgWcR9CCCqUlbPJMoiOuaK6RnRzPoIIn9Ff06eilslJ8ch27+8U+8UiE44hzUhpnFqp7TWNA7EirYveyOFoRlbXaBinYbvJ5yuOT5u3PS+LMlNLxRRn+kkO56LU9MSCs6CjDw4nhF2p0BXG+dmsJz0bLOA+6YwAdXLz5JeJ20o7wOeNvo5GCzL2Gj2Ewx6ujpuT4JdhMwl8bPRr+dZaCHMzZNEP+dJGQzowRa5Ozao446mWOL2GCKaOyknX9XK9pQB8QRZLRDxRuSVKCuq+PPsr4U/HA9dyKh0yr2hZa5xJ0B7MsC9ruFeOjgexAO4ceudQ+WFxuQUue9gAC9/aA1EoZGn8YVT7f1LhHWQr8YoVYxmmXVGk97th1hZFE4Izb4GytBScWmuURs/AqLj0UgYTJaY0BD/SzTlSdFPA9R6YvVyt7a+31Q1Rks9C8imCmB/dtsswx0sTHmugzUQw/6oQThdPjkA6A+g=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"No. If a thread blocks on a task, then it can never be chosen to resume the async code.\r\n\r\nIf you see intermittent deadlocks, the most likely reason is that the async code completed quickly enough that it returned a completed task, in which case blocking on the task wouldn't cause a deadlock. This can happen, e.g., if you're stepping in a debugger or if you have caching.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"b9ae5e84-0bcc-32e3-9a8d-4167cb953a7e","date":"2018-02-27T19:06:16Z","timestamp":1519758376,"authorUserId":"disqus:stephen_cleary"},{"_id":"75c73ff1-d42e-375a-b146-1a00dd6a6e4b","authorName":"Stephen Cleary","authorEmailEncrypted":"itxfi/dWWRExhP2GstTeqP9b2DGKhr65tZpSr9GiAPRWGGaBy8Iy15UAYeD9o51JHk3CYaOK4aQN2xtfDUF3TixGU2CH612nqlrC+KX79IlZLVG2D31iwop11aq9Wg3Egh427itMYHB+66U4XB2Sytr3B3W7KDb1Z0nQ0k06WsKZTDGr2bfhMl6iNqkoG4JvJFiSfdXjmXv1ozQxWgdohPd801R40B0ZW8ItU+knYpK49sUPlab+9US7e39GA3glb5SGOTrskxnu6BohaldPMTL0jcmtbki3iPCMzNOW3SmuwlGPPYcrPgJqEFW1rU6eXUwfXYkDdBcE/oedQsnHjJodFqhsvj+pUSBqo78oAojBIx5dcmu+hlu8MZY7j4C+T2OEY7Gr/kWvStlc3q1TSI7uS7bCrL1VIkh4+gs0VzG3pSYiU2eCCc7Vo1OjKY9iiwrueQvNu5WKla8QBKtC9h10LlycZt7yBzJmm4oUPpUkMQmJQbHS181Ti+gFRR6Uy3R51rmBHWxZTjuxyw9Y4D7Kd3KeMOqcxCpZzCmahfII94KyAnpyUlvXlUnP8dj7Kb+HTrWtpewkLk8PtVbqKiqOC/T+mpko4vQ/1uO4079mC5BOHyUvXR/JTAVHFSrsEFzX8vkUic11jP+l5vgGdyK1qtsxFyx8d37zhAglWUs=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"ConfigureAwait configures the await, not the task. So adding a ConfigureAwait to GetAwaiter().GetResult() won't do anything (since there's no await).","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"fd690460-ba68-3a67-abb4-701aeb4e734b","date":"2018-02-28T18:29:32Z","timestamp":1519842572,"authorUserId":"disqus:stephen_cleary"},{"_id":"c6711b9c-b80d-30ec-8d7a-93499189df30","authorName":"Stephen Cleary","authorEmailEncrypted":"MmrqeOLuxmxNyFGb7sKoottzgNZIE6qnGi0oxWTwzHhovQ/vHyOGnTShgVAC8ECG+EMp+TJl4J2/mOsXu/75qRo9NYTY9OkxFTYTyIjrDRecrjiuv8Lx80qZRoLksrUKvEvY0A4ENfSPwZSlOPc/TTtHhyrH6+PjLCHs44Rgkam4l+W1o6uH3PLIvy4V+PGcGzE/7VtE57um3OVD83/OZXAag1WxkQmQeRP/zWNUAIdULPJO50JNi8GYlV3eItqusQh4Ne3FbkoxR+E4qOOndRxSepScaERkX2LUMHtfP2G7N7oKwG4zckc9wPj/nu6SZJ1EdqIsfBcIkB1eIl0+smfy7gAIQCspXYv/uuSIffoyCSmJllvdBCyoQnVP9fu+CJCLk9KQcyYoqsnZN4M5skiKfRbWK5Oyov13q2MZw1Pojx2VucM4eTMR4S4ujES09NHLw+HF8VMS6iokpggf6+K/eOgOv/6iPaqgl3hsB2Lh58Cdfd1Mpp+JUTcZ1FOvLKisOMNtN9epzfXeWqU0fOAUfUEyArdLvzVIyQwSwd+mjquXhD7VHPzHHPuvnEUclBLGQzmJND864831dxvTALE74Dshcart9qIscNFMpCOP/1xOtzBkVEXXKlwKyPrYX260SrPUikWzd+BiTb+ubMNryPJO9KkEQoMppqd5L44=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"It would not deadlock if ANetworkCall.GetSomething(key) returned a task that was complete by the time MethodSyncVersion called GetAwaiter().GetResult(). This can happen if you have a caching network provider (e.g., mobile platforms will cache more aggressively than desktop).\r\n\r\nSync-over-async is an antipattern, as described here: [https://blogs.msdn.microsof...](https://blogs.msdn.microsoft.com/pfxteam/2012/04/13/should-i-expose-synchronous-wrappers-for-asynchronous-methods/ \"https://blogs.msdn.microsoft.com/pfxteam/2012/04/13/should-i-expose-synchronous-wrappers-for-asynchronous-methods/\")\r\n\r\nIf you need to support both APIs, I recommend using the boolean argument hack: [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/mt238404.aspx \"https://msdn.microsoft.com/en-us/magazine/mt238404.aspx\")","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"07f232c1-8e9a-3db3-a183-2f9a82bcf702","date":"2018-02-28T00:26:27Z","timestamp":1519777587,"authorUserId":"disqus:stephen_cleary"},{"_id":"fd690460-ba68-3a67-abb4-701aeb4e734b","authorName":"Varun Bhargava","authorEmailEncrypted":"b4YzbafJU3wur5XVFEMG0Q+hXZq3z7AJPkG+PdfHQriwKoLl+sS1UpCmD7QrXS1p/F4VuDvKJ3WpKf4Vdb3FUo4GaY3HP8lK4/0qWuUaS1dnk1RiILBBi1JlnkEMEp+Xn5CTAemno1nILX95vwOa99aodqkH6J7LsY9Vf6wHZJBbx1wfwZQHh1A/xoJps4+AWyPbl+zq9x+M8+HFMqeK4Yutk1eHm5+TztNKSpsdJFTSgQqsyqDBWxEFourngUXU7zhGPhwiMJ1Zr1qAgfrh86/sK/9cejXeElRy0DvT0zlRDHMkWbpnqJuJzx1rUAdVF/Da8JnRix1tR8IIsTZmMFwR3OpUaHxTTQpToCHVRxnzI8aLKU/283GFwqwYAU2nnQZW7o/RIogTo5EipZFkjbeeiEyrKRLJvc21/HUylcvEC+FYl3IiCMWkBwH+UXo0Y4Tqfs1y2+GSi+JMzTMTZ5ZBpX5Dks5U1eZbpDLLnTftbV8M7WRqlDp3GwX5HS1T0GTFxA8S1b4Qd+8R4r0ZAmO33kLBpOsTtt+rNzcNaoWY1iwHEqaUBUf8LfIWsgjIFu6T8EZiS+3OUzDDv6M/y5id7Y9lqSTqOB4Y7qOACpIFup30oy9JIwBmUEC44TD3KSwRnwT7S28qkfWhrRC31Iljf3xwGDLTm+F8NacLjxc=","authorEmailMD5":"4126b5c5e664cb207ef3cdb64858fda8","message":"Thanks. Do you think it is necessary to have a ConfigureAwait in the MethodSyncVersion, or what i am doing below is redendant because the aync version already sets up teh ConfigureAwait(false)?  \r\npublic string MethodSyncVersion(string secretName)  \r\n{  \r\nreturn this.MethodAsync(secretName).ConfigureAwait(false).GetAwaiter().GetResult();  \r\n}","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"c6711b9c-b80d-30ec-8d7a-93499189df30","date":"2018-02-28T03:44:55Z","timestamp":1519789495,"authorUserId":"disqus:disqus_ZZpGv0gXZl"},{"_id":"c2ba8952-294c-3f68-84b8-75dcec8c1de1","authorName":"Sachith Wickramaarachchi","authorEmailEncrypted":"YTfB+pNmoe75Yuc4+WwG2oDdYrLdK289BVFrnN6/d1fqeU4ev6a/CxlNqgo+XvHVpvpchQJ77Uw95AObkx5x/Aed9z4RqzUDJvXLijfgp47rBiCViQ4+fRl+fP/SHib2v21Io76wRJcceYc1MR5lvR2+VNWD9Runb38DDZlbRchfV6/Wer4F9GIp5XKdpJvuCARSiawnyMWRLcrKK0Rfh53tolHmRETe+4wx0P0YdF3nnTEgSQyq9MKnFnb50niei4XNfYczKv+YIZwN5QHn5b9jXI9btxrEb19SmtdvMs3dm4RlRCkSwhRyyDaO70EKq6l+9rsxI7CLPC79x5RPHfcehzsjEQgs/EkKvXfKy8EuO5mBBN344iuJT76jZPX/HrXNMsXuhJ0LFxjN9AWW9aMDphcPailzvLk0Z32+K7494mfpsbMuk7zEOGWjdqWpdWrhsoUk5x3fUNH0zyHlRpkFQvWCyPGqybdfuzzHuV9axdhKwSa5q7dj9MuNLqrdd6c71LSI2sNP42r6HainP3aaTA4g3p2kheE4ebgkYz9u7Dsrj8Ir5DXrQT/j1Roi2//GAHmvA5U+8s5zzSQ51eNxWV8u9CWT9Dbh1zTjkwulHPiOUOEoaDRx7uh3XOKjj4ufkpEMeDeTZcjy9hnjbPtDv5KVWKp+CXI/X+1IFAw=","authorEmailMD5":"33aa7fc4e7e06f6567b5a6d329cb551d","message":"Good post, Thanks for share :)","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2018-03-14T14:43:01Z","timestamp":1521038581,"authorUserId":"disqus:sachithwickramaarachchi"},{"_id":"45b30985-88c9-34f9-8458-4fc5a71a1bb5","authorName":"Admirador de Damas","authorEmailEncrypted":"ACFqYVCk7OOk8+BfYw2/pb+0eEc9KThwuKesvRDX1WgOTybhN9K2FB6Osa4MOlIwpVaeuXnmZSLOf20+8o4VpMuKhFQ6NTajfwQMZnI/fNZbcccGjl6odhnUGmZZXrnB/j02KPbNHAzSGqtU1rHsSoi/K/UYt60uIxvi26WpjGmXqlk2V6Sn0DLzBWMguaC2tEGoB/dOP+ASJngZhJvMe3r32Md+b+/yxFdpdlIVbZ3whuUgp5AFqlIz6gIGZbFiXgxqFCPq/IDltqK47U9wTGmzVW1Vs7mCVDkkpe+IrPmXU2ZZencQKF3cyCxyzDsSQpub5i2gabtyiXC5C4Vn92ZxVqOaA/PJC7epZjwbTlaYFx6ZvD57NExmv4HayLsG5A7q31t/XRZYupSiSBckKp+vp/QZWCYD58s3xz+PndorgX/pDz8BmG+tG/yFspSQKOMLDBYEZ3U9FPADTSEaRL2HWV3FeGYvKz68AVAA90J4oHUgr3iZqkpDgtedO7PCBmwqIyapMc2i3K679ptKM2nuxhoE39Tu+jlKagwfqmzF3gv+FwSVk21E5ARxxI/TOEk4X6/Srgeemho44KfHKeK7/GLajF1/0+bNIDOn3m8S/u51OKYDltUW4k7Ri3KSYrNKzjx0BY/Bs0v4sO487jpG5kzXwQvserQu44oCnhY=","authorEmailMD5":"873dbd5fe8982d6380307a3d52e59b5d","message":"did you get solution?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"58fdcd04-b518-3b44-bd61-6bc5bbcb89f1","date":"2018-03-19T21:25:23Z","timestamp":1521494723,"authorUserId":"disqus:admiradordedamas"},{"_id":"3bca749b-2343-3caf-b6bb-b90d414788fc","authorName":"Nikos Sideris","authorEmailEncrypted":"QvBo/ulJn5cVaim7n+TynuIs+OqK7KatfOS7UUgDCzcn1Zdqiy/UKBN+LvSR0NWnpZl/hdmiCZvswwYGSichlaip/Cw5vyM5XZhVHeNeSUK9pD4vzU8itgNY/gokASVGMwuUByz8XjeC9QwRp0JgaWSpGpRoV5X7GQsVFPXt50FOt0PeFa+G5scAOcgymKLC2qNP+V9MrdsXBo0XCNkQQYHSumt9cgZ8w5yGzuObKY+gMmTvgvBlPHYJPvFQGIRJUkzbIoGI17EBMgPATr3ym7Ud/Eh9tgfdOvuZz/Or7gUvQPyJhb1GN64I1619t32HYeMmsLg9RfsgcvwzjVdEQfOE/gZ84lvWOSRz+RPaixFFlt/GqxH1l01U5T/WrvqyR+oc39T4I1cG40qNDo1QTppxoY5aU1nygX0z4NqvzDYakQH8qTstYpCwmhv8gCECBqjzrEt0472tOvvqEyd2RGsml1a5x1nqSpJ98+uKIU6xwdLUgr8QhQ3762HFxiCAEBLDkeFFvTKbkrsHN2FiLKpJstkfG86i4WGNOJvrBxhP237impz19xbK6dyWd3BqlbbfF3liu8OUp7tTBVcyZ4Mp9ZXn6EsQc4mjnwtG1nnmx391NyxnNl46vbFCoKFsKs8HLoAHiKGuJx+YnWrVYWIfEMHvlgHkNpL2TUB9uVo=","authorEmailMD5":"2cb0e53f5c57d64f749a46884c8ef829","message":"Hello Stephen,\r\n\r\nI would like to ask you why you mention that statement :\r\n\r\n \"Using ConfigureAwait(false) to avoid deadlocks is a dangerous practice. You would have to use ConfigureAwait(false) for every await in the transitive closure of all methods called by the blocking code, including all third- and second-party code. Using ConfigureAwait(false) to avoid deadlock is at best just a hack).\"\r\n\r\nOn your msdn article ([https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/jj991977.aspx) \"https://msdn.microsoft.com/en-us/magazine/jj991977.aspx)\") you strongly suggest using ConfigureAwait(false) whenever possible. Its good for performance and prevents deadlocks.\r\n\r\nMoreover from Stephan Taub ([https://blogs.msdn.microsof...](https://blogs.msdn.microsoft.com/pfxteam/2012/04/13/should-i-expose-synchronous-wrappers-for-asynchronous-methods/) \"https://blogs.msdn.microsoft.com/pfxteam/2012/04/13/should-i-expose-synchronous-wrappers-for-asynchronous-methods/)\") is always suggested to use ConfigureAwait(false).\r\n\r\n\"As a library implementer, it’s a best practice to always use ConfigureAwait(false) on all of your awaits, unless you have a specific reason not to; this is good not only to help avoid these kinds of deadlock problems, but also for performance, as it avoids unnecessary marshaling costs.\"\r\n\r\nAlso its quite difficult to ensure that all third- and second-party code will go async all the way. So using ConfigureAwait(false) on the caller might prevent from deadlocks.\r\n\r\nRegards  \r\nSideris Nikos","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2018-04-06T09:51:48Z","timestamp":1523008308,"authorUserId":"disqus:disqus_FlUbdZq63t"},{"_id":"94d3553a-6c27-39ce-90b1-d8b4ad328750","authorName":"Stephen Cleary","authorEmailEncrypted":"HyxzFeXNmO90q8lpmZv4EMYoFq3qJMQ6vYUDMoE5AWphtN/zJxg5rxykZ4xLdGH9Bxw48cuIcxdI9H8Py6old0IVeY+N/8gD63afn366sWqNHD5NW8C9nu1c24pJBvYM7ndvsMPqwd3dI8cw1MqZ/gCwDLcWCF6W8Hu8Kb7zKxK7uYpqPV5b/oSbVgS5UC7grweJrkETiMMOQP/0X+s86zcusp/e0AuTsEIJVBGvhKaUK2hQpWZGQzefX3+s/vn21xMFZFkVdCtUemG31rf7iyxnKQ1M4MSjdo7jBJzKKzSvVC09H9smZpqIf5VYVZerj+TZoFzCczdMw+VRP3MUySuUFoxW7t/S9hexYJ0gQD0bCRNL9JXjN7pwysytyntDqy2WZXq9o2OFfgvVZ5IRhXhgH2NFB3RABa5XuFQIG/ujaL8T+9PmINLmPGfMT4sIXCcRALGb1yBuNts2SnPaVUx1L+tvndgHzzlD/eh0CDDM4YWQKl0dCqxM/eCAThQwgb6d0tqX/KajbviSEHinehNAEK//puea3GqqhjpnJ0bFsS1KAdBeJVzDguhUaPkPDJwGTxPZvplz3se3hCW1yZh76qCW+SyHvCMlgrv7JMaIDAIINOidgBHAXWSDXvQpXbL0mirzntGzNIGfVQcYYt4VidvpFevtqMF7mG4M6+M=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Allow me to clarify:\r\n\r\nI recommend using ConfigureAwait(false) for library code. In fact, I recommend that you use ConfigureAwait(false) whenever possible.\r\n\r\nHowever, I do *not* recommend blocking on asynchronous code, and thinking you can just \"make the deadlock go away\" by abusing ConfigureAwait(false). This is due to two reasons:  \r\n1) All of your \"asynchronous\" code that is blocked on must be aware that it is blocked on, and ensure that it uses ConfigureAwait(false) everywhere. \"All\" means the full transitive closure of all methods. It's extremely easy to miss one, and then you've got a deadlock - or even a deadlock that only sometimes happens. This is a maintenance nightmare.  \r\n2) Third-party code may or may not use ConfigureAwait(false). Or it may work in one version and then stop working in the next. Or it may work on one platform and not another (this actually happened with HttpClient).\r\n\r\nIt's far better to go async all the way. You end up with better design and more maintainable code.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"3bca749b-2343-3caf-b6bb-b90d414788fc","date":"2018-04-07T00:21:59Z","timestamp":1523060519,"authorUserId":"disqus:stephen_cleary"},{"_id":"8730635a-4c89-37e8-a5b8-665784384033","authorName":"Rick O'Shea","authorEmailEncrypted":"uDzn/NMSuB0i6Q2JMxgI3059lT42Vu93qmLiIjMnK0QtrX0Pf4Kx3q8sqtu7W8Z9De7kSu4E8qoiw6jtBgyWcfrlBlx8pJSL3plRZfnZ5F4sTthesVb/gwTcPXp2twjT0z15LSJ0GO/jcT61V0AC0EAzwcmyuywXQpqMiETCWrFjqV9D5Xyr1IY2Nu8OWZY9/fahERRN46wjjCHwnU7j7irBih/ruT9V/ItrA3f5GaGV7EancuEVCB2yGBr4GFNql65cw3zdfHviY936d6SStC1kO00IpBEU6w9SJ8bKEcEhvfxflXfe4BbWw4zAT+gXYzROL30C16ry194wAZB/J/BJsHPba/FKv2VJTwv2Pwd2ncTgz0nA0vjIHG45SJ/OnbkSPROQpUoGcB6M2XQDHclJa/cHidrKe2uG68+mE99VW530tHHHkIOYlaX4/FOLa5GnoDVMznJ4zrEdjYaBMgZSuNSdg4cwrIuljlSYR2VZxRodCVem10WawtCPTiAdjqwFDLWwuTHUdUeUQYASIPy/86c5rR/yhjK8mrhB9l71l8PSBivRRlSZ8FpnUmIq4FDVzfKQpYcZmeq8Eq53A/QmUgA/kBDMU7uDH4nl69vRUhfmQJrEvbU/pg9tFdaE3cmXEFRAtbxYWFzdkUnf8ZLPkAI34iKmZvEuZ/BZTC8=","authorEmailMD5":"048fc88f7ba67bbdfb0dc310aacdedfd","message":"It's not friendly at all. You're compensating for a platform designed for sequential code, and doing so in a very unreliable and intrusive manner. I'd venture to say 90% of this \"all the way down\" bandwagon riders are just blindly following a meme. Meanwhile, dozens of LibUV frameworks are out there that do not foist these ridiculous compensatory requirements on their users.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"e59b81ae-8886-31d0-941d-c85c6f819a4a","date":"2018-05-16T22:43:49Z","timestamp":1526510629,"authorUserId":"disqus:disqus_4XL2VvzyaB"},{"_id":"8e5d06a2-c669-3e5d-98dd-515c3bbf57ec","authorName":"Rick O'Shea","authorEmailEncrypted":"wUQi14OueOTBA5DzXkXWxrj1qy4W/w/7kvK9LVrElfGRtA6pxvZlZG5cOLiGEwCHiQZiOS9vq4xswaYLa3nLFp0HTH57DiYdWj6lKfbK0CqznEVLkR/3C9z0gdUVYbvaBco2hQZPLxnox8bF6/FWNbtYWLwqq9tUUVEtAJ6MvmoJP9TF9/esBenQbspLAVOCU4Rsx8GvYMduw+D/f3r6TA9RL/nZqmYvWgZQUO7rWvWqGhhnNbJhlYYq/gTWzgiCjHSHNFJ2Ig6J6R+88hWfgOteJ1xl2T85WZr53eJOnTMdjhY/zY+l/TWTV1OWQY8dcSRk5W+xm+OFn9HcyZmrlNMob9wRAJko2NrrRVzeZlBHkVNk/zmxTTAQMrl3uT7i+D7tHvTY5IYGrUIMawUqvxkX/zBJBA36aBd09zqKFqM1TPwtLV/e+FYjxzfYMTVWCGlPbOILxekiGqyUZ/ciAQxam686NsCAMNbz1sOOlORkO5Cuxrh5CK3lzaIRWAhM/DgI6BNWZjVmPlJwcbYvbpk/84WFKUK4B5DIhqN17RlNfAKUgVzmbIVS5/LSPzCDDTOgmcF/SNUzHdW+VoGEHSDXCyYbijAl9fynqxfVQOKmXKZ4nNehRWGTb6xqtiPaO7f5B9T/OthqvSdf16kppj9RW0e2bo31v0272fZMG4U=","authorEmailMD5":"048fc88f7ba67bbdfb0dc310aacdedfd","message":"Funny, we have no such bleeding abstractions in other frameworks (NodeJS or Erlang) and no such deadlocks. We do build Windows services cheaply and effectively using sequential code and scaling horizontally. That's cheaper and more reliable than trying to fix the broken platform with reams of extra manual code additions. Why aren't you instead ditching the framework? Addicted to .NET and C#? There are good options there too.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2018-05-16T22:37:31Z","timestamp":1526510251,"authorUserId":"disqus:disqus_4XL2VvzyaB"},{"_id":"35f25ce3-4429-3abb-b658-19263dca7c92","authorName":"Stephen Cleary","authorEmailEncrypted":"hVbhiFLsV+YWzXkXVOd/vYXfPxmujnuYhpW31UqMH/zPrwB87OHBenLuTzsw0iXcZWcO3sO5tyNP4dQUjiU2b7tVX6/bKQD53EFgHTxcCZ9g7QK3ri10i6T9JLKgHmYEOdfBlOUn9Jgv3d7d78ad5kh3KuYscdi48y43CL6A/yjmXfFadh/4zqCwCcdrZgOAvedZQQYpNUQLSxlNW1iqvOaUbw1ZRwWWwVyMK4k16i3WguHCp35umekoZ4cF5aGHxBp4lfeF9aMDhvzRocUk7CnDPjC1UXkRI0Exi2g5jHBWYZr0kNO5KZgEIZNqZmTFX+APxirEFD/j8qxlIFtP+oSUpz4Q9Wr4rpedsD73jZ3N9D3CLzamFXzEhaYeqRGFGY9pfvy4MvL5Tw2OVY4IGAVRU9KA7UE/jWRsmGCtCZqW4pZIAIhaliS8hCoHKxHpr7Y8lireqy3+iErsHlvmsGEfF5Lnn7DckgBxqN5rriSvEXjxL5GiTIb1VJGw8d99GMvWstwGWNmQriawwBHC13saWndowWFu71pHCmublV33KpA1fQofl3MF4vZvlvPuGScI08zguRvnvbNVd06jFxymi8aq0shvYyI3hlnFyMiF/Oj56FmEyFnKKXtxAV3df+1Vd07o2lZU4PlE1z3uA1nJZwPlkN2t4LBMRsLEquo=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Last year, JavaScript officially adopted async and await. I'm not familiar with Erlang, but every real-world system has the possibility of race conditions and deadlocks. I have seen some truly horrifying asynchronous message passing abominations using pure functional actors.\r\n\r\nRegarding scalability, I do plenty of horizontal scaling. But why not do both? In the cloud world, horizontal scaling costs money, and async can reduce your scaling needs by 10-100x (common real-world results).","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"8e5d06a2-c669-3e5d-98dd-515c3bbf57ec","date":"2018-05-17T02:22:23Z","timestamp":1526523743,"authorUserId":"disqus:stephen_cleary"}]