[{"_id":"b72b21b9-b784-3bdf-9d41-de1e359a5f95","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"Thanks! I was about to dig into the source code myself to figure this out since the documentation is so bad.","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","replyTo":"","date":"2009-12-29T01:34:23Z","timestamp":1262050463},{"_id":"ba2441d4-79e4-37c3-896c-e6e011248b44","authorName":"Adam Cataldo","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"This is really helpful. One question I have is this. Suppose, Action == Add, NewItems.Count > 1, and NewStartingIndex != -1. In this, case, am I to assume the change was equivalent to the following insert sequence:  \r\n\r\nint i = NewStartingIndex;  \r\nforeach (object x in NewItems)  \r\n{  \r\n collection.Insert(i++, x);  \r\n}","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","replyTo":"","date":"2010-03-30T21:26:54Z","timestamp":1269984414},{"_id":"54601e65-2643-380a-b07b-93df1e8cd877","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"@Adam: Yes, I believe that would be correct.","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","replyTo":"","date":"2010-03-31T00:03:27Z","timestamp":1269993807},{"_id":"f33c32d2-b9cd-37f2-92f9-3ea35bd7f3f3","authorName":"Friedrich","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"http://www.blogger.com/profile/15520800752177131855","authorUserId":"","authorFallbackAvatar":"","message":"Very helpful, thanks!!!","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","replyTo":"","date":"2013-01-16T20:39:21Z","timestamp":1358368761},{"_id":"08211374-213e-31f0-8741-f044398f1e6d","authorName":"cjl","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"http://www.blogger.com/profile/12318983123008415070","authorUserId":"","authorFallbackAvatar":"","message":"@Adam Cataldo  \r\n\r\nYou can also insert the new items in reverse order using the NewStartingIndex each time without changing the value of it","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","replyTo":"","date":"2013-03-20T21:15:51Z","timestamp":1363814151},{"_id":"28ec6341-b672-3453-8616-4de1fb19f94e","authorName":"cjl","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"http://www.blogger.com/profile/12318983123008415070","authorUserId":"","authorFallbackAvatar":"","message":"Very Helpful, Thanks!  \r\n\r\nThe amount of undocumentation in msdn these days is staggering.  \r\n\r\nLOL - I have a text document with a boilerplate complaint that I paste into the 'did you find this helpful' area at the bottom of the msdn doc page. I have used it often (understatement)  \r\n\r\nMy complaint:  \r\n\r\nMORE UNDOCUMENTATION. When we come to this page, we are looking for information and examples not a restatement of the method name in sentence form.  \r\n\r\nWILL SOMEONE PLEASE ADDRESS THIS PROBLEM. A LARGE AMOUNT OF MSDN DOCUMENTATION IS JUST LIKE THIS..","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","replyTo":"","date":"2013-03-20T21:07:55Z","timestamp":1363813675},{"_id":"0d55114c-91f1-367d-8c43-3b8cb3a5e024","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"Thank you very mucho for this info!","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","replyTo":"","date":"2013-11-11T17:30:27Z","timestamp":1384191027},{"_id":"9add59d3-85db-33a2-b679-e7cff3d3d0b0","authorName":"Joseph N. Musser II","authorEmailEncrypted":"KmStP9xt/RjTOiB3j9672x20hLw/Cm1ixC4Dxl93XmWRocxr5Q86Ko4Z9ppZwkVxubS8hTPi4IR1OYRh4gF7tfM0CNrl4H9v1qaQdajMLdQYWROYAXwX08UvsOfXLMVVz3/7ljGMrDQyocnzqqJDXdCbN+1rSpx/VWrouGgheJqBsZrJz14jSGFmRqYZ2n6JSvs7Mf4Y3HXbwYazCTbu1kgnNPMJyWPOYN+v4HBu2Y6luac67PwaN9/IzsyJdFt4TPJd/K4Sy2JANq0/2P9jyDc8OkLd56MqVmK1+pIQ+B4i0dk5kN+mBqh+c9vU9l48DgXoi/753pJXZiiZlLa0xOWjk2rDuaRr1E5Gw8/z54TZOG3x4DfYms5aYPgOQxmn4BgSxZYzApNakWLHE6qCAT8U/8ZhS/mESBOpvHDXnUOwBcU90x1v89gU2OL64j/zZ/FyDFT1VuLVr+gmgLX+TYy/Ht8JlaD4kMRoXtibsxP30vfK76mdMQnxaUhHS9mXP/V2lAYVHijfIN0z5w1C97NI9HZf+H4Tc/+IUj+/yPq92VLWGC529v/8XKR730wqATZnlgaTSOap8avN71PEwE4r0hbRhf48IPcm6ibgI/XuQRP8aQCnN66JqEhgtcSENlBq2lVxyIEqP4tGGTFb/LLXbkYBHwy9vjiWU2+VL+U=","authorEmailMD5":"b19bc5229ba5087eff77abce3de8e969","authorUri":"","authorUserId":"disqus:josephmusser","authorFallbackAvatar":"https://disqus.com/api/users/avatars/josephmusser.jpg","message":"Can you clarify whether OldItems.Count always equals NewItems.Count for Replace?","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","replyTo":"","date":"2014-10-21T16:45:09Z","timestamp":1413909909},{"_id":"b67430c0-7af7-361a-8e2a-ed3d67d36e24","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"No, it can be a different count.","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","replyTo":"9add59d3-85db-33a2-b679-e7cff3d3d0b0","date":"2014-10-23T18:19:15Z","timestamp":1414088355},{"_id":"1ecb5c3d-8aaa-3115-9316-f984bbf48e04","authorName":"Arleigh Crawford","authorEmailEncrypted":"dSsXtIdaeYgE3OQK+9C9oLa6RnLPHqkN/OXxfWZp50pZMrE6cVDdzJEXcB8pWHXjR9ITIH2Zy1wDCaWYQHluy/GXJ3AUzlF19Egrdw3HPuL1GFSMWAZDIepLFBiF4+9EduOoyTSHTT8/EZuUeH4kmiaVz3amSZnKROxTcm/qpNokjYGlEqGiVBJKualY9XiWZx+CCtYL6aIxsTfaDRAmI6riPTcl2UP827G19Lv7a01VLsFHzuY5J/Q4+YrDvL5axHfZ0Lz83ZB8lU2dvniPS22KPgNWIBSl7IBYPWeVsscz6RAlFWKM3yLZXU9LBGtY7qjQIQjCHamYbhhfYxMAsmWRbeeygve1SJ0nX4Hs6xEUfqzbWqjAHI6+U1ku70EbWO00eC4DpCPWdP6w6e6omM4wMnzwt46CP+6i/dsCdwxJQ3D3JaAUnwcPeopq9hMsC9XWguccF6sSOOAFH8jddXgaomUVud2TbeEu9nB0Py4KTjGlNqXrp+C8vlm7UQzhz0Bojggkca+KwRrsfeIHQkAc/2DAPHIGuACg44S1i/zctwyS0WvErrSlEnolw6M4tKmfm2TVjttMlkc4J7K0feDtO+jbXRL4eyItFnCxPoLy+kMV66OK/qaBv+81KqEzvCgrweuZ5cJdhEs1UfzCnC7JrU/bLGhXoi/Tnr1we5A=","authorEmailMD5":"8d4b96d15bbcab9a41a35fa9ff0c3cfd","authorUri":"","authorUserId":"disqus:arleighcrawford","authorFallbackAvatar":"https://disqus.com/api/users/avatars/arleighcrawford.jpg","message":"We have implemented a cache in our viewmodel and it inherits from ObservableCollection<t>. When we do large scale operations (load and refresh) we are suppressing raising individual CollectionChanged events and then raising one event with the Reset action. All good we thought. But if anyone uses the CollectionChanged events to subscribe to PropertyChanged events of the items in the cache collection and then there is a Reset they will not have the opportunity to unsubscribe. Am I missing something?","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","replyTo":"","date":"2016-11-14T19:57:54Z","timestamp":1479153474},{"_id":"4ba2d3b5-17d6-3dd6-9adb-abef45adf889","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"They won't get the old items in the Reset message. They would have to keep track of all their subscriptions and unsubscribe them all on a Reset.","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","replyTo":"1ecb5c3d-8aaa-3115-9316-f984bbf48e04","date":"2016-11-15T14:04:23Z","timestamp":1479218663},{"_id":"698daa40-8217-3f49-8bc3-90ec74219039","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"I agree that the whole design of this type is poor to start with.\r\n\r\nOn top of that, the WPF components don't even work with multi-element updates, which is something you don't find out until you actually try implementing this.\r\n\r\nUnfortunately, the type is now deeply entrenched in the MVVM ecosystem. :/","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","replyTo":"c6949c3c-3288-3d80-9f80-f5ee8909231e","date":"2017-02-10T13:59:01Z","timestamp":1486735141},{"_id":"c6949c3c-3288-3d80-9f80-f5ee8909231e","authorName":"sjb","authorEmailEncrypted":"pVl+GWBGKOj6JQcMeNqJxcMbMt+oc7pQqBhRl9Dx3C+DITsHUcNqz86Q6gEF8cAiiLYxoG3Esi5P4NISGpqDm4881YHeQpkGcRhbR5p7sEcOa3LRmosyLwHDZdwpKVwWof0kEhYMjLuhAIzij7By3saYBktlbk2Qz7YZG30NNlIq8ULm2KkptWmKJeo6v7H8GytiGQLKPzSDFtQ3hPW0tvgSCPx5cZcmeqO3PC0w+/acCocwCVf9skC0TEQFxcRJydffqJP0IFlDtZkT28J7mqEOy7muigUO2f5Gr3tPCFGrAEF2kPkL45WG3F9Bja9eayK/YsfpVu9DrG+/YoEZgh0StuMg5Fr6pMnlms/wjG7llaO/CnPApg6i1Q2qOXBpk1MA7Ze0jFlDECZnyq7ZppaFLbAlCJnflWHmcB1h7eU2oHWDxwTFNHHbY0iCCybDGSCnpjZ0zHht6uDqFb6D23J/tyiKZ32bfZJoEkWLJWvShqNwzvOu1dg0NLE2vEn58kWtSeMN8bUAIvet1owbmkSqE78UdmiUs5cGKLqq9/MEaiRuNgTbM8ESDjJXwyZHtnh4/7Qec6IWGrF7hJagGp/E8Ib69UQyKci2MknFJmKa45AAMvUd0t7GU/9YluLxIkmUtrow4+3RUmzdJJiVtJBG5d4j0wkng7Yj56uRSOU=","authorEmailMD5":"961ac36915b8a21e7cba9d2c54b5d1d9","authorUri":"","authorUserId":"disqus:disqus_yaGF2uMnNq","authorFallbackAvatar":"","message":"Yeah. We should all downvote the MS page by pressing the \"No\" button next to \"Was this page helpful\".\r\n\r\nI am trying to implement a virtualizing collection to be used as the itemsource of a ListView. When a page is loaded, I want to notify that those entries in the collection are now available.\r\n\r\nI tried using a Replace but it wanted a list of the old entries (which I don't have -- I suppose I could try creating a list of nulls).\r\n\r\nThen I tried using Reset but it threw \"Reset action must be initialized with no changed items.\" even though the constructor signature is there for Reset with changedItems and startingIndex.","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","replyTo":"","date":"2017-02-10T06:03:18Z","timestamp":1486706598},{"_id":"29083cca-be8c-3d59-bfe5-e3e1bc98ba76","authorName":"dbnex B","authorEmailEncrypted":"GHXlyOLdI5xopSKVjTzLTUw03p7qjTc0c+P0zOkp8qL4M4H6aFwycawKCxwv1BcZFxZLnBOmNFRFEI0xwvDO/OGqvhhMmPB2ll4k9fMrHICE30v3UvTuA9cBz9R5Spr5YvF/0LECDX30o8EmwBrFWCLcSj1PAAlwFoy41MYhedhrPR+rd60c3VXWgNMU0+kRwRdgMKKdC2TnaZT+hC5vdfcAbrunMQmwaf931RhYzltJheOkH+CBumr8GwN8ApS1BHfJMCCuQTAFJ+eryW5wE+rAShAHY7hGRoJ6vMGSQYGIJpOp3vfW7GHnxCS8HsMzUflQc1eUFY8nr+u4hAGk+g14vEqm/t/9Oo89bEmkyvl2KRdi6Kbhvsk3GOcJGCXrX7p9nCx2yW4ZNP/73LyZj0QeFjqiMlgbN7G0qfhCHjn9HngbSmgaGUv9SyTvZXa6EszMPEu2qUI4CSnGl1LbB0yEZhTCmCKjdd6ZZTZQS5u4G83e37PnGrOJdPExXQEE6995HNVdmu0mnIsxSLRdG1+Vnef5VaPp8YOAwEp6S/nWxsIoxLgGeey7Fd+/VQ7qOhN+4Eq6smqxue9KqCbTXD7f9YyBucdbT5Lya10+2hxif2wa8y0uI5mnNinEw0KoTAbgunlqyJRpEuDIBuNv3XE1oCgBDJIR3HkY7hNVcBM=","authorEmailMD5":"7f46cfc3d895732165a80217ea5edcba","authorUri":"","authorUserId":"disqus:dbnexb","authorFallbackAvatar":"","message":"Not surprised, MSDN changed from being best resource to being one of the worse. Very few documentation items nowadays that are useful there. I have stopped counting number of issues I have found, last few years primarily relying at good citizens providing articles explaining like Stephen and others. Or Stack Overflow. In year 2004, I remember, there was nothing else you needed other than MSDN and MS forums, they are next to useless nowadays.","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","replyTo":"","date":"2017-05-02T17:50:11Z","timestamp":1493747411},{"_id":"3f3a5cce-793e-30c8-b231-18ee6817266c","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"Microsoft is in the process of moving to open documentation with a more collaborative model: [https://github.com/dotnet/docs](https://github.com/dotnet/docs)\r\n\r\nIt's still early in this endeavor, but it's definitely a step in the right direction, and I expect the docs story to get a lot better in the next few years.","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","replyTo":"29083cca-be8c-3d59-bfe5-e3e1bc98ba76","date":"2017-05-02T20:22:01Z","timestamp":1493756521},{"_id":"0284cc17-7479-3695-9d1a-e2be79d0104c","authorName":"dbnex B","authorEmailEncrypted":"ieh3+WvCaRP+VHFkLHZe7E3i6MT8rNkde8PcM/TVkHbHvwd7UDpkhfMVMrVMdltdk1pE2hfS/kx/G8thohVWgLSZ5SZSg5jPFQzNmMJaByXd2Ha6BRSfseayZwKmvdmVkQAnmB/lRApiKxw6CY9skVdNts5hM8bgsbaaAY5XnjSeIxExZFfDVZBdmpfh29xoSb4B1tgtZLCaQ4SL2ce4LsRz00BPiJCaHa+mw/Bs9RY+zhvJ9pyKyouxYrYZql37XYEHmuUgLgMu+0cTe9cZvYOInjKcu35F7pVo/3HOsffcfUDOTQdJfX9t5XcNi+wSDASMJRgX9jwioZfuW8310KUB8T/3Nawo9MnnsV/ckOWhUMbUlls9xBgDZQc1VOlkB0027SJN+78SmFKX6SrGx9KM1AcMYAgigGjnAQ4CZXHFHGrFiDC0IH1t59yWPoNm/o6blKaEXooYZGc8y+cRa9z4DVWw6QPKDgdFeYtNb7votbLJzYLtBAfMprmJ/x+WJ46PLOMifGi4i0532PwjSOBZgz8YWjHWm6RSKjV3qj5i+BMi0vjMe2VUX+l1v6qG2O4H7bSV8xtKHL52WviOZHQoGZ6p4pPGp/Ge/KUo8OzPm14Ufofl+kvgRZdQNTKSllADQjxWzr3/8AIlAWIiSF9rqFm7d+onLsVXEWnRPPI=","authorEmailMD5":"7f46cfc3d895732165a80217ea5edcba","authorUri":"","authorUserId":"disqus:dbnexb","authorFallbackAvatar":"","message":"Glad to hear that, let's see what will come out of it","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","replyTo":"3f3a5cce-793e-30c8-b231-18ee6817266c","date":"2017-05-03T00:28:46Z","timestamp":1493771326},{"_id":"1a11e84e-256d-38c9-88b1-5d746ce61db5","authorName":"dbnex B","authorEmailEncrypted":"o/7WATnRs2/1r6k2ZtiVnDxO067btCFAe4wf8+n32awuOIOm38neoFNEDFtDTteTTLL4B7vAGQ+sGTrub4GY2RuvX7VdnEUF3z+lwqOLnu99O57bjpBMVcmogv1prDCWRwvqVc8mkMJD0eWky2gndZki8u6vUfoigOlEDWOaguKxtT++qLviCBQ/3EkbHU6NXrQ0H2C2G9ZpIF0R+Z1kbUgpnmZcO2kw4GeMADuCXBvyqaKU4Ojox5mWKpFOQe32qunUpgjGu26StQ9ajZ7zjeQuhUxdKIfRG5spAKzQbaYpJN9QVdHgmE0eQonnmI5tLWbAucama+4kE447Pdr+FdUGS+KqHDTJkhaPdz+nYBlh/zfwZk6NPpVlnWvkgq51+onOZ/7M4ZR6uds2Ao2yY69+6jvvyqUhofLqeUriwudkJ3tPb4QAMQNENkLR3v3Pw+LQnFIcfYnk8yUfQHPV3dzdWBLdxBpY2s060lpb9RSM9y4JzAbhbGwkgvTy+ZjUPXGDFcGXVhPU1U97bMRH+lg+O9mHhLoAeH6P8DmLTyhloo6yic4z8oCmyz3mnl7xkkmfDPcliCmHrlOmY042KJHURNiNRZ6nzoXLojgPdTuA75kH+W9p+qnenrIXygpJT5/U1ZbzSrK/5fyvkLH6nnbToFTtuQThUXS5uexS67Y=","authorEmailMD5":"7f46cfc3d895732165a80217ea5edcba","authorUri":"","authorUserId":"disqus:dbnexb","authorFallbackAvatar":"","message":"... I really feel sorry for github","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","replyTo":"3f3a5cce-793e-30c8-b231-18ee6817266c","date":"2017-09-13T22:21:35Z","timestamp":1505341295},{"_id":"3612f1d8-5178-3209-b026-55a8ee7b936c","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"Why?","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","replyTo":"1a11e84e-256d-38c9-88b1-5d746ce61db5","date":"2017-09-14T12:27:51Z","timestamp":1505392071},{"_id":"96f2d545-9d2b-35ec-bbd6-6a9279f1cb54","authorName":"Dr1rrb","authorEmailEncrypted":"ElRVyeE+KYh/u2XB34q95p65BNnYzPYC8nWIhsENfc6rqa8lSgF/s2WotLCaYJlNAUtmZGxqRcxyxa/EpbEol66yRnKdeTN3X1sZt0dGu2EBwOLjRpOIBl6OCXs4ZhynScyiNcEC+vELrzcXPRUJj8sC+mmzXwrB3XLGfUkCmWLiMc2n0lLog4oY8i71iV5y9inioKQkCjTjSW7REjQa0tZohp/vWkwoLENWZj1P/bsR3PvnEND8VYAkGCDk3n/tBqit1ZXRAouuaP38gaPDlCSOsEUfMQuvs+DpRpd3Avu/TVBb8/MW/xPN2KFhaFa1j1ig7oxl4NopwLPw1IMR/dPjBwMSfP/zcMqf2VdzIvpHYN5lrU44JmiN6JndVnIHXb1AHu8FtoBCRtT1+YecsniBQaPs8J14sOWU3i4TkyOSujKE/ULHu8nXZWcxClLpRYtgToyWH8djLuljY7se3gZ3frX1BOlcPJmS/WfCezb56L82QC2dFQJcOOAEmRU/n1sTK5KGmqMzxJbUYFX7kY+x+CBwCutFDpud0VZWMWgi4pYHVEWgYPBu65GV3sGJmvrNC2dWvmi5/p9j4x3FKBmn2fuLZxfA2RqNhO9RDGADPpqHFtHUcbExuj2J5LypIGQyAzX4eN4o6WaeSqjZj0LU2TCLQ3Q6ABE5p0G2ktw=","authorEmailMD5":"4b59fa3041591cdd525408b07ed8c670","authorUri":"","authorUserId":"disqus:dr1rrb","authorFallbackAvatar":"","message":"There is mistake for the 'Move', the 'NewStartingIndex' does not have to be \"interpreted as though the items had already been removed\". The 'Move' has to be handled as a unique operation.\r\n\r\nFor instance on an ObservableCollection (UWP) if you move an item from index 2 to 5, the event will have 'OldStartingIndex = 2' and 'NewStartingIndex = 5' (and not 'NewStartingIndex = 4' as expected if item @ 2 was already removed).","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","replyTo":"","date":"2018-01-15T23:52:58Z","timestamp":1516060378},{"_id":"4b4b02a6-b049-32b3-b35b-d54fc765f0a8","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"I tested on both Desktop and UWP, and the ObservableCollection behavior is as I described in in my blog post.\r\n\r\nIf your original list was `0,1,2,3,4,5,6`, and you call `Move(2, 5)`, then your resulting list is `0,1,3,4,5,2,6`, not `0,1,3,4,2,5,6`. So it's equivalent to a remove from index 2 (`0,1,3,4,5,6`) followed by an insert at index 5 (`0,1,3,4,5,2,6`).","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","replyTo":"96f2d545-9d2b-35ec-bbd6-6a9279f1cb54","date":"2018-01-16T15:03:37Z","timestamp":1516115017},{"_id":"86cf99a0-d1b8-11e8-94ce-b56b73f5fd7f","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","postUri":"http://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Steve","authorUri":"","message":"Thanks for this really useful post!\r\n\r\nThings start to get tricky if you try to make a thread-safe version of this class. Since the arguments to CollectionChanged are only meaningful relative to the state of the collection at the time the collection was changed, we cannot allow any intervening operations between the actual change to the collection and the CollectionChanged event callbacks.  This means that the CollectionChanged event has to be fired from within a lock -- clearly a recipie for deadlock if one of the event listeners happens to invoke a method in the collection. \r\n\r\nWhat I ended up doing was allowing re-entrancy for the purposes of reading the collection, but for a write operation I timeout the lock and throw an exception saying that deadlock (likely) occurred. This is somewhat analogous to the exception thrown by, for example, List if you try to modify the List while iterating over it. \r\n\r\nTo do it, one requires two locks and a private List. In pseudo-code (actually real code but I'm skipping the details) it looks a bit like the following. Here \"ExcludeOtherWriters\" and \"ExcludeOtherReaders\" are SemaphorSlim-based locks.  \r\n\r\n        public void Insert(int i, T item)\r\n        {\r\n            using (this.ExcludeOtherWriters.WaitOrThrow(this.DeadLockDetectionMilliseconds)) {\r\n                NotifyCollectionChangedEventArgs added;\r\n                using (this.ExcludeOtherReaders.Wait()) {\r\n                    this.List.Insert(i, item);\r\n                    added = new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, item, i);\r\n                }\r\n                this.CollectionChanged?.Invoke(this, added); // synchronous\r\n            }\r\n            base.NotifyPropertyChanged(nameof(this.Count));\r\n            base.NotifyAllIndexedPropertiesChanged();\r\n        }\r\n\r\nsjb-sjb","date":"2018-10-17T02:58:30.596Z"},{"_id":"7c72c010-d7ce-11e8-a9f1-05b1ca7b5c0d","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","postUri":"https://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html","replyTo":"86cf99a0-d1b8-11e8-94ce-b56b73f5fd7f","authorEmailEncrypted":"Uwgxoj/lVlZgC1ZPA2zj6SmkHyZ/9MblNctZGJuUrEHNgj2LPbk5uxR6C8ohaxj/6jkcHJU9i2ujKUnJtsPC3tvwVUzbz0++Wl1rOCJznQkmk9cQgkSu6dmq43E5P9Qu6NhfcFKYtROe4zrCjrsW4rpkn3BEhYblVeoz8+K0WKRrBamDILLna2s61qyKq214vMqgfyjyNm/Y0zAcemiS4CMHK1nrL1gJpUzL29kDXBpvdP2VTRvgLALI0zs0qU0UJiwrUxpMwe7w7A8MQzwI3cpDyJUgm68SzQsQKonvtT2vclyIZ6kOWTg74XQK/v1fWOfy22ZIjzlZfCdtwbznIl7VQlyDZLOuGiELx+fVTzTQboO2LLPpclAozlTS1E6njuUF6RhWEIR3doj+99EC1GePfnGyt2SdkqKoiE9XPp7PfL3Vst72k+L89/1BFiT3vmIexkswmHaC/GpR2q+hSFm48P3z+POPsmmr9aZKKSxXVMYn0t6z/RdA7aTTTQd/l8GIXSPAgD/yiREoMj8Vh96WIj9z+uYmEOxVEeqyLsM3qn4zUPvtHANESngo5l22g6glOsTaR2bfBbFZEQuW2e0u3WtZU61eeMGRfTUjKREB7LdYw+F8n/9yftRGi6ZilO0N7fMHdGB1dFG3KSpA6fnsz2aZgj1mfouoxi++FKk=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"That's an interesting approach!\r\n\r\nPersonally, I only ever use observable collections on the UI thread. All my ViewModels have UI thread affinity.","date":"2018-10-24T20:50:49.114Z"},{"_id":"0d9196f0-3dde-11e9-9b2a-91601e299ccf","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","postUri":"http://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html","replyTo":"7c72c010-d7ce-11e8-a9f1-05b1ca7b5c0d","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Steve","authorUri":"","message":"That's a coherent and straightforward approach, it makes sense. You know that whenever you are in a property or collection callback then you are in a UI-affine class. \r\n\r\nYour comment challenges me to reflect on why I have property and collection notifications in my model in the first place. Although I'm not using Template 10, I am following the approach of their property view models, which is that they are attached to the model rather than to the view. Rather than have the model user have to call a separate method to update view models every time they assign to a model property, it makes sense to use a PropertyChanged notification in the model; the view model can listen to this and issue an update event onto the UI thread.  This also enables automatic validation and it connects well with the use of notification change tracking in EF Core. Starting from there, it seems natural to notify collections in the model as well. The general idea is that the model entities can be used in any manner they allow, and the view models will then take care of themselves. \r\n\r\nWhichever approach is used, the hard part is the time lag between when the collection actually changes on the thread pool and when the collection is notified on the UI thread. If the model can truly be used in an arbitrary way, then potentially there could be several updates to the model collection made on the thread pool before the UI notification goes out from the view model. Therefore, the state of the collection as seen from the UI thread (during the UI collection change notification) should be different from the actual current state of the collection, because it has to correspond to the data in the lagged UI change notification. In effect, the UI thread must have available to it a lagged version of the collection. Fortunately the collection change notifications (other than Reset) carry the information needed to calculate the lagged version of the collection from the current actual collection. \r\n\r\nOf course this is not a problem if the collection can only be updated in a limited way or from one place -- only from the UI, for example, or if it is locked while the thread pool is doing something that will impact the collection. But that just pushes the responsibility out of the collection and onto whoever is using it.","date":"2019-03-03T17:59:13.672Z"},{"_id":"74902e10-3e07-11e9-9b2a-91601e299ccf","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","postUri":"https://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html","replyTo":"0d9196f0-3dde-11e9-9b2a-91601e299ccf","authorEmailEncrypted":"MPf0qcYH5uwC+Q3MOXnmDdGVbt267AZrtw3ZWoD8I9pFUw97n8IB6PFytsaLLMaGRhmKaow3Aa55HUybCNXvgUa7IPTs3t1sbwPVOJT0GCGEurhTyGiOpsZdMwjeUqeF66YvWWhyfJKpnqoRTBk6Kx8Y7G9ZlbJSO3wY/twA4AmOsw6GjPiGFhE/Xa0eZcE5TFOqm1ifme5LzTmH/A2EXOIhmZlx68nBZoQlmQXHImbrqpFuNtdkLG4eBrXu9pvJSOVj/NGP5aiAPBlQ0RSCG3v27/PvD6kF5oSrBrc5iUsGePsULKeJcVfjbtsX9QbTE5h8E6cqcebDNibZqrORtIAz7JniJ778w24C9B+/5qaTViIVN96k/WT0cu6k8AsC0Eu22cjIkcDcG5iQpNF3cOhkfRB8SCFXsR4d1zXIHJ31RqrUoWcAka7FkSME1GsQnrU6GuQ8mSncFU3ffsWcBT8ZrSKfL9qp2pdeoLhhwoCniBlJVDXHziX9JHrUuH4kbJCY1onBSXdKy5KRXsfImaOIk7aYSRs6XgEUXyZgJMFDd3+xNIWYyOQcS5K+y2bPepjcWm4OHEgH265jCpBFNMPttehDQb23NH6KVuT0nPzpDNvNvjTPrfEyOmRtSMjiXxF/DsnPN5vb60nZYfOKWX498iv9XYOf3g/1RFiP71Q=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"The question of how to hook up models and ViewModels is one with a lot less consensus. I've seen a lot of systems like the one you describe, where VMs are hooked directly into models. But you still end up with UX problems like when the model changes *while* the user is viewing or updating it.\r\n\r\nI'd be interested in seeing how a pattern like Redux could be ported to the C# world.","date":"2019-03-03T22:55:35.906Z"},{"_id":"27b97780-3e76-11e9-9b2a-91601e299ccf","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","postUri":"http://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html","replyTo":"74902e10-3e07-11e9-9b2a-91601e299ccf","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Steve","authorUri":"","message":"Yeah. The problem of the model changing while the user is updating it … that could happen regardless of whether the view model is attached to the view or to the model, and regardless of whether the model notifies the view model of the change. \r\n\r\nLet me think what would happen for, say, a drag & drop where the thing being dragged is deleted in the model during the drag and drop. Starting the drag, the UI obtains a reference to an object in the model. Dropping the UI element, the object referred-to may have been modified (removed from the model). So the question is whether the drop will work if it drops something that has been removed from the model. \r\n\r\nLogically what should happen is the model should reject requests that are ill-formed, such as the request to move an element that has been deleted. To enable this, UI actions should not manipulate the pieces of the model directly, but should put in a single request to the model to carry out the intended overall action. That way, responsibility for either accepting and executing the action, or else rejecting the action, can be located in the model layer. \r\n\r\nHaven't used Redux -- should take a look at it.","date":"2019-03-04T12:08:01.138Z"}]