[{"_id":"5901e222-2341-3772-a631-c10d367b786e","authorName":"Stephen Cleary","authorEmailEncrypted":"rBtPT+dPPG1JboA9FehrR2ynQxuZz+jzWXRY0Nopx4w7yd9xOyLjFxvjUjIkiASvu5xEBgdMftoyXBbgCpOUJoAE7IGice914d2NVBUlC2NiY/LQd5HlXLi6E60654yYoTLp1Gux3WOzJa2ZZsa6h/yKadWUQaGwcDUviyPrOp/siEc5aPs6jakGLYTwEW+XrhWJUOGVm90+z9HIGzGEwvueRoqP3DjkI/K9fUYput7gcw6P7KRep+UNB4hdKMXjijHHevAraY3tnvGxVSq60J+HoK5xnKY/tvZaivN9Lkn/y4/IQlC5hv6c9YG20jwaq3+WcQjP9bYTBjb7HxAF/VzCrOCbr8GF37AIAp/EgvYFBO4fQc48Srb4NZwKuFA5Gqket9FLWfcOXGhYvCnUnI3v15n/iWMFAbUKHPCSd0dKx8afTslCxpWoykNGgrqluVHCya43ib7Q48c0wQ/OdcPe4Qw/teHFnwmoES0TeA0LBy69TpslAy5aB3Qkl/D82G3HgED1wXLS8WymvOGyc5UN5D2odY2D6O+m7j7CgAnjsSnmM6YiDoHdbTZdlf42kzPqMzOV5kM1nKMNoC3p78aKFz4/ufYuMER88m69TXlYOvC9WK7KMO9I+6zdDgVTJn+CG+u04abN3e91GJtemxqLUKk2lMQG3pO17l+Xzgg=","authorEmailMD5":"36e44ea0274d8207eb632c566e60ecc7","message":"Actually, I'm using an optimization there. The CreateAsync method is directly returning the Task returned by InitializeAsync.  \r\n\r\nHowever, this optimization does assume that the constructor will not throw an exception. I'll remove the optimization from the code in case others copy/paste it.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2013-01-18T19:51:32Z","timestamp":1358538692,"authorUserId":""},{"_id":"5e120cd5-be09-376e-ac38-fac5500f21d6","authorName":"Anonymous","authorEmailEncrypted":"ITJF/3ZcQT66cC+A0L8jINUM5xbQjKzV6AuaXFnWabAun9rnJ/El6iKShLLJRpCW6xTWcPYqb2vfDAN37TUtFh8PprpTe8+9v8PGVc1ZU1IE4M6SUviwxYuYaa36goNL79lXgQ5huPRwrUnvgSzlqG437MrtpuwihZct/g4qUFTfxxRlU+1OM5xA8Pq59IyuHg7jQqZI8wVviTS7/K9a6JMkRTgoLEasL+Kx/i0kVRl5YhoWjGEgohrbBbsXiMoj0UXUnu+k16OjrCIbEOKgSY53NXX4lLINQ6MQ0tC4tpWfphPufP+Xozoj8RiYhmZmz63LP59Gbk5nAPpBe2F1OoH6Lh3AT2IE5RX3L7jl9aNEXtsPqaAV9s+YqyYe08ws4Bmo3QowbdlKy4dHzD1VDKT2B0Rv+jzbgHwEXZ3pG20Kz1JgwS+1Pi26h355wbS5cm5gB+tb1kPywE1Q551QQ51zJt14Pprw78SyUyNFDkI6RKBJ0zYhia1a1/YnohOps3OITmSmZRAYhmPBfh6a19lO+V2gllJR/ydna70CwcrrwYcBFSXNC9dmS63ZG7w75gG2zwd+iXUBANbTghx8gi6CKZdmHaJw4sv1SuMoMoFLUJ6PvQl/sZALNcN+Hy192viHA8u7x8kwjt+S2gTEk0ge24iTYepCHoTj0EVEvDY=","authorEmailMD5":"3cb42db01b5edab948a576e1bf94a281","message":"Small error in the first example: you should await the InitializeAsync() call in the CreateAsync() method.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2013-01-18T17:31:04Z","timestamp":1358530264,"authorUserId":""},{"_id":"d9a442d3-ddc2-3114-8412-59ee6814899d","authorName":"oskark","authorEmailEncrypted":"NMdTUyKA4VquLcGmcYmLVhmyZpkEGLwuq7Qb+IC9XZeLvBsbAkdIRen3Lx5vsZkpjcWiT5pP4aF43qbeM2MVotLXDP0D9XuQBNfdrZuv95rki5W4VYGtLdJ5biKeuz/JZqH1QtO+R9cVvOwsmPGAJSzJAg3hp/g5pnZGqhAaXh/+XtZctICNQTavS1Hxb2ikneqGUVYjjeq6wcYj0Pnw9RKdnnRQ1RKvr7xMyq2zDMvx/65m5YVShzeCbq+vU+B7FLgi8mHITMLszrkKayGduCaqm5kE2YkXZKlX8x4UOQ8HFTla+S/Z8PruMgJODlRvPRem22E5t/YfaAh0K0d2Va7iGA2mF9Ai+lzPLOEKDPBVFmOjSn+iN++57Yod4R5KNdz18QaCP0ZNEk2qcfWo6bgld8Z0uAX/Oqps1iC16db6mwaZMR5f3b3I3qgpe8Gb/9q/naHybep9TtXp7Z2BRBv+iH8tuX0Nw4LgHZmlphUxSEOqNCDw7XhsIkJMsweUri+vdCTf6CCgawzBcQNueyeP/q2yMLQ9cWOxC7xpLhH+zpi9mjPzHy0oYnIaS67yMNdLp9fYDfOXGq0BAE9S5M23eFwnPOh55h81xAonygXE+wHsv+HrO6q5hCxJfWmgIZ2Ni0QLTUXvsY4N5Ylz5oViIxP0yUzNfeVu4mfNyvs=","authorEmailMD5":"d97137708d06f6a055c6427674d05413","message":"How would it look if you spun up an IObserver where T is the async resource to be initialized which already have the onnext, completed, onerror interface rdy to go.  ","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2013-01-18T15:19:04Z","timestamp":1358522344,"authorUserId":""},{"_id":"edf5ce00-51bd-3380-bd4a-4ab4f65a88a5","authorName":"Anonymous","authorEmailEncrypted":"fIQb4M3yRiuJtBNBn2y/IM7TGAUeMVbwAZJ+FQVIImrIGlAIWouswTY90leO/zQjQJPfQmgZaApyuKLO3FxW4EIlNPLzmZ7JSTyn2EeIlp9SzPn+Q0j8H+B/DjVQV7RG+HYiB/z/0hZlN5TrO2aUQJYkorNomOvPUZ7+NO+hfgA1lSCkEcAPxaUyVDg0/ZQEgMgdFAy5Fu+O0sVOCbSIh1RhjbXlAUgbwGi1AEU2bsWZyjH17Heof3+T/sfbK63wTPgcGpvJ/yDp8z9GEmiTue4NJR950E4AgUoUVZC/yWWNhvgEs8iFN4t9riZnpuhQCY+R+TRRf5dkzvtaFyOYl2qO+9XILA3YniuBEJpxZbQzZaH+/q8l0J7GHLQASeZjXqp1rg/rDUe4qV0LiZ5G4bAix8Q7k3D8EzWaucEERFfbO5v8E7cGus0Vr7onOlGzyQHRyGprt55z8vLM7lIniNAzZJ5Kh1kG0J3/2RK0CxcxUrBAEFillfB43nGqH2FU5sHLLbBNx8ykzPQ0U5BtuAecxA3mkYQX9qMEi0EEiPiQ4iU9Ph1WuVllbNpwUO2/pNppAingKXdOjopfw+6lPdKos2ucnf8bg3skayQfHECl9n7nDuiKNXXkKhAjmbEfDL0LdSP8RdxMUUyZVpqZOxz2YD4U+to0nUfsjcaAKX0=","authorEmailMD5":"3cb42db01b5edab948a576e1bf94a281","message":"Good post.  \r\n\r\nI'm not a big fan of constructors doing much work in the first place, be it sync or async.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2013-01-18T02:40:00Z","timestamp":1358476800,"authorUserId":""},{"_id":"cff8b021-944f-35b4-88d8-fc6560afa444","authorName":"Stephen Cleary","authorEmailEncrypted":"WRKszco+Zy6S+8sU/b7Rp8pUGaHeJA5J6GRgzNMhsZgaQIkRJYWHluCpApILPDnOklBFK9a38i5dKUQH0+Dwz8q3vIfOS4VtGzsnX1XlEMHI+IbXY8kLP3YdY0vCvgPbYZQHZGXK1bDT1a86H73QEWn7cYrpcZ8KMVTUggVrrl0dGazLB6z+b+8YZC7JtXoXd37tqeRpDVUokcASOQG0kShseYKVZ/ySqvSkEuqCkrDRe9y4T3+Jh0QOMQglMg4ae3qphdmGCJ05TaeqEFgW6XgEUsg7rlFYRIU3A4hhuyx4BHNXIES7CxlY2Z+431J25dkI84x9o51/7JTg6Ug39PCeGVEU99pDTn57qIB9EZ8/ff8DKM26kqOMog6vwwGSSFnSKVMVprCLBfkv1V6sejR0iIFC7r9FqDCl2ZLSx+lAz+TNzq464JiLnQtK2FOwwFB8LgMJ5fKMY5WFlwAUZjY0Yn4NrJIlFk3dJz5sHSk7hdTNvO70QZFxq3ttczFQ1K4dwH5v7T4lLSEK++17sYr3SKEKOnfrU/FkHRJz0AC+UqFkdSGhEIENsyJ56Qyq2xLwHdrfXXuBcSSFfVeq6ky0LhypHVb47VW4FW09gKqk75noq37XWNjJ/ieE94septvfYSMl75DPiZn1bfSvEoGzToWtkYUXlzKm0xwr+kE=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"At this point in time, IoCs do not understand asynchronous construction. So your options are: 1) use IoC to inject an asynchronous factory type; or 2) use the Asynchronous Initialization Pattern described in this blog post.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"d71765f7-86b9-3d6c-9505-70af54595b9a","date":"2015-01-13T14:19:07Z","timestamp":1421158747,"authorUserId":"disqus:stephen_cleary"},{"_id":"d71765f7-86b9-3d6c-9505-70af54595b9a","authorName":"Radek","authorEmailEncrypted":"hXTLz+BFhbAYbNTfP16buBm2Ij0ZqlzX3pCL2kqyMZ1rc/HXPe/j9ufX+dgrJCjFX8/OG9VenXX8WjFpN/EfVdTcAglc2exeqsT5g2ugUd7Ml+AGN4Oxw3OeeFwpBA61uQxDxIuqvFHIfeuHAVl3H9qkr2lBISW0PIFqpXPD8Hi8E9tZ41HkARCgE6Tc9sn1kCnBb5XGHeNJgRLGvcOWrI8evy9ks+27XCP0/Bkmf1WXZx0uWizj+gbEruQ0JN+UXtzmAEeK3y6ngNTNF9XEqsW7IW14b/5/z+t8GWhrKCFrlYKuKrrPcYhazPrXgO4dw1WPUfc/u0LUaKFZvtgHEtc2XLQ8Wz8DhQ+Smepr5+O+cdJY98yskPrhXOCULV7t7/fsZ+KczGz3DB82czGcTeexmnz8bPrxQmjkj2hNf4LX+D7gthGPIxlvuD8c9igTFeEvHKn3Na0QfAAAuq1PtOjxRoUTC44p0btCvQVtyRPn/kYLFfkGK37mzaTHbj+uMwGjPmbqq5Wy3AQVZi7uMG3+NJbmtSgmSnzaQ08g0D+f1EwzZq4ZAkObfJ5911YmOjMUO9HQ27WupNVjMWFva/FN4DyNOt4sw4UkJqJZymmYTo/CJkNzCF1Z4xhQbMYu6x4gtQcYAgzPdPjWC+Z/TT19DNy879EeqYlyzQQQ3XE=","authorEmailMD5":"4d3d1e02c686272d092ebb686e8a6d4e","message":"I was wondering how to apply this solution to the following case (WinPhone, MVVM Light, SQLite.NET async):\r\n\r\npublic class SQLiteDataService : IDataService  \r\n {\r\n\r\nprivate ISQLitePlatform _sqlitePlatform;  \r\n private IStorageService _storageService;  \r\n private SQLiteAsyncConnection _connection;\r\n\r\n public SQLiteDataService(ISQLitePlatform sqlitePlatform, IStorageService storageService)  \r\n {  \r\n _sqlitePlatform = sqlitePlatform;  \r\n _storageService = storageService;\r\n\r\n InitializeAsync();  \r\n }\r\n\r\n private async void InitializeAsync()  \r\n {  \r\n if (_connection == null)  \r\n {  \r\n string databaseFile = await _storageService.GetPathForFileAsync(\"myfile.db\");  \r\n _connection = new SQLiteAsyncConnection(() => new SQLiteConnectionWithLock(_sqlitePlatform, new SQLiteConnectionString(databaseFile, false)));\r\n\r\n await _connection.CreateTableAsync<mytable>();  \r\n }  \r\n }\r\n\r\npublic class ViewModelLocator  \r\n {  \r\n public ViewModelLocator()  \r\n {  \r\n SimpleIoc.Default.Register<idataservice, sqlitedataservice=\"\">();  \r\n }  \r\n}\r\n\r\nHow can we avoid using 'async void' and instead od this trying to use your any pattern when we need to register our class within IoC?\r\n\r\nThanks for help","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2015-01-13T09:36:03Z","timestamp":1421141763,"authorUserId":""},{"_id":"84307935-c21f-370c-b700-e0fdc289d4e1","authorName":"Juan Loustau","authorEmailEncrypted":"fukPRcHR3j4d/tYV0mHHli8uiMjMTY/X5LUjXRXES25wXDDFU2S9bBksiPlWJW4bHw0HOSD9aHli0/aVKMdO97p0O7uyABpLabWfG/OVwjFfyUphEBt+5+3j0CDlTjxWC+LXSkD7AEYJ36SzcVljlLT/xw9nDHH6lhAsonGpab9xlTUAijf1vZW/+lg1i9Lr/XHQx6aUYIFHovMTob6fLcYgVoMzqlgpN0eu6xB1qCcreyRj+ts422FAmPlJEAWH7SwUVNHSeivh+ZYWrXYg5gB5XcfzPP5Z58KNIyFrpyCuewUxQJwh/JIsHjBbeKl6GQbvzV6CqiUjTqkZVaNOAdFVre53dZJO82PZGhjKoqbfKYuoehCl3abj5CmUjKznhcUc7TkuSwWQ7EDs5rhGguxbZonSwlSXAmDBN7OupioUseHH2RD9JA1bGUFoxU4htzXsB+kc3bCoBTJlKIUYr20x69qfIyYDCOBd9M5A3b+VDgFHxTyYj9Uvh22ipVNh9H8tSgMVtxiB9bVrzWr8cGt+z9l1SsDxfWSgDXh5oblwxFPx9YD6Cvc8/VPAeX/I/ikLlaJuiSVLTETAgsRByw8e8PGsDY5CJxjSM4I/zfPu4Qa3T+YsvslK/TGNkjGrmLyYDy9JJGVpGVwSIXiS9mdxhB7rcl2tYagafT/X66k=","authorEmailMD5":"1cff41e7d88698ee36c729d7dcde52e3","message":"I think the best solution is the Factory Method, because you make sure that the instance is never available while it is not fully initialized. To solve de IoC problem, instead of using a factory method pattern, we could use the abstract factory pattern: Instead of injecting the instance, we inject simply a factory, which in turn takes care of creating the instance and initializing it asynchronously.\r\n\r\nSomething like this:\r\n\r\npublic sealed class MyClass  \r\n{  \r\n private MyData asyncData;  \r\n private MyClass() { ... }\r\n\r\n private async Task<myclass> InitializeAsync()  \r\n {  \r\n asyncData = await GetDataAsync();  \r\n return this;  \r\n }\r\n\r\n public class MyClassFactory : IMyClassFactory  \r\n {  \r\n public Task<myclass> CreateAsync()  \r\n {  \r\n var ret = new MyClass();  \r\n return ret.InitializeAsync();  \r\n }  \r\n }  \r\n}\r\n\r\npublic class MyClient  \r\n{  \r\n IMyClassFactory _factory;  \r\n public MyClient(IMyClassFactory factory) // IoC  \r\n {  \r\n _factory = factory;  \r\n }\r\n\r\n public async Task UseMyClassAsync()  \r\n {  \r\n MyClass instance = await _factory.CreateAsync();  \r\n ...  \r\n }  \r\n}","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2015-03-28T23:37:21Z","timestamp":1427585841,"authorUserId":"disqus:juanloustau"},{"_id":"eb983e8d-c6a9-31c6-98ea-ed6abec33177","authorName":"Stephen Cleary","authorEmailEncrypted":"G0JjdRY1p/yo2GKBVS9eaU24xDjRmw0G03HCR2E8NXMUvoVhY6lBBt+wMClj8y2Nq6MZnpN/jpygxZaZAXYkM4YQog8c4q4vwDoaj2MWYxIKiwVEmR/mnEvyN6DSdSV6ohHrJrW/zqTbluzXkUucKMPI6+abb4Lgro0VrsmL5RM9LXvM0HkaWR/XK1qQiEmShIWdOzAeKlH8CSSGbXE7FqAvNg/5dsXiTl3ppkRpTFL5mRD7yv6IN8M7t6NyWFpVogBD1B2VDKlUdMG+yD8g22xsveAHTdREw77q+Ql2aBhje4CoR0bpgbY1WZTabT7M2ZA+4H6Hg9Wnw75zg9ieJtxz5CyINANKAVvhdx1NZReXs3oUqOqORfdNZydPWcwGVYnNaMjGafIfnPG5zZDYRcZQtdtY28xwp7c00C/+TreA3EgeY2TH2yu8e31ri3DJhpPobdA4lflbA8Z4s2usZ1+h3jXMJ/lNTKPRp1RZ280gdXbU9mnfxN+sEyD5wsydN3CPb1Vcu+4k5JEeLBkkY3QL2HM27LqUJWrKhznnAm1iyC0UISGMrPnWhmsfBvegY0uBqBLQvsouQDlKbuay0MQiRbkL4b813r1XoWu21hD8TMTLjhoGj6fUqCLkDRGngdXL50YMdE/wf5RaHcDjEhUHdbIWfgqF3+tONvTB954=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"I agree, and this is the pattern I prefer. However, to many developers, using an IoC (which is itself a kind of factory) to resolve a factory seems like going too far.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"84307935-c21f-370c-b700-e0fdc289d4e1","date":"2015-03-29T01:41:06Z","timestamp":1427593266,"authorUserId":"disqus:stephen_cleary"},{"_id":"af651dc8-4953-3a72-9183-da3a10d7c6a0","authorName":"Juan Loustau","authorEmailEncrypted":"ZbvqFYy4fFxF340xWC3am0vVpilvizXkuvxBYcW1/qJIgnTiCfBm9fDgxKPGTHM1Wsjl/YIZeFzuR676D82iQJsWpu/WO4jpqpYQkZ50AyB6Fk2cBTLQpmQq1GvavcPmCvVnf1Jb/jp9juj+kmGBpQstVX3QUnGY6ETFtt6IzxYCrDV1zEJn1UrciXL5hc+xdMvI5oek5l0Lw6ml9Zpe4ErQrNdU+axJTczCY7tR1BOEQxZm8oLfBfjRLA8F7762J8EWcbJ+yvViwBf9AKw5eKTVqqJplZkla2lqbpMZutRJeuic6c8BG2XL+UfRI4o+mPxHJNpn9mIHc2zrc3H2cItwsu1sFl6RepwnTV8IWt7pQiBfGtbWaDcC5vrQ1jqn2fNwEZZW9WQJR/3B8cg+74Ruf40XZ6FLNIZ2tyh93kccrFJotJ2BAN1VhBT1N5l56Pkq9V16UHD3yLhP+vvaZoQZZRS3Zr8BHUqHkmiKrv6vaXxP9JBpcs3oF6p/zqIChIdAMr/GyvugVUGCmU/425nVCU707cgLsI5CUSbmlQpbH7x7bCFvoDekKOgxacQG5B+NbCNTy7BvAfS/LOHLIXwMzpoOHZVdGbAPHFwOorNHwImX/P+pziTrKDjRfRXKdx2gDuozQE9OOy+AHke6XQ94nnQGxS6b8Uk1/BNOy6M=","authorEmailMD5":"1cff41e7d88698ee36c729d7dcde52e3","message":"Not if that other factory has a role to play, which is that of fully creating an instance. I think that benefit is enough compared to having to remember everytime to call Initialize after creating an instance, and the control code necessary to enforce this restriction which is not a business restriction but a infrastructure one...","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"eb983e8d-c6a9-31c6-98ea-ed6abec33177","date":"2015-03-31T08:15:47Z","timestamp":1427789747,"authorUserId":"disqus:juanloustau"},{"_id":"07f589ac-968c-3641-9c1d-6d3fa4b1a71b","authorName":"xleon","authorEmailEncrypted":"vAlrs5h5R8qw/bQBhfFJBwYK9eqUd8jY59+nNkkPxTVncF1qrIUcTyE6JGyrhl1GwAEpXOxsZVP04NcX122wdf6h2QFJIu4ICwoheroGsKF1fR5DEIg5K7WhLoaNQSp59kKEjVNcy8derrp0iuAuDn35bjW+SRyfwOKLN4HTBShoL0AOyO/V7pcRzPnZUhIxtAD0BxjYj5Tyh41c/W2P3/g8KiXDM8gGCttJoaplYVzQZo3++2IbU3o6FwDW0wELzvY/mdd4XR4Hf5YclGQb41j6BhgWhmxoXcqaDLSCufk9KDVSpRRQykJHThT4x3kklC8EzFuwnjqIIf+2LI3fth0i8dYWyTWYqwqRCq40XuQVDCITZkIwgnV7oGIwY892HQsHqJ+gHrpiMkARDyZL/XC9DQ1nlv4n7qS0ZXe+idKjLd2xEFcQrR9fGbP/JIO0QQK5oWzmB+m4FYtYUGE19p++zgzvwEfcQEwSfbGBBaG1VaZtVHd88l2DY+7mAri1OqWNt0PSy38RfTcKb+MPJUVtKAN6U3FrLnODBR2uMzVuDLTyhc9/phCRoN66cbiw4g1V/4tayOTVcHNuljrMvy/rfayU4Q0PshI+49/Yhm8dn32UpihY8rciaWLolgCRAOMabh7shHgoFLqzNOgnr1intU4LDlUFwYZTs7Dsz/8=","authorEmailMD5":"b9371d959d3460b285f7f5f679a45c73","message":"I´m using the following approach and it´s working correctly (even I guess it´s the worst practice ever). I´d like to call a sync method from my ctor but my sql connection is async so I must use an async initializer:\r\n\r\npublic StockService(ISQLite sqlite)  \r\n{  \r\n this.sqlite = sqlite;  \r\n Task.Run(async() => await InitData()).Wait();  \r\n}","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2015-05-06T18:34:42Z","timestamp":1430937282,"authorUserId":"disqus:xleon"},{"_id":"8281c10d-2063-354f-8b25-621c752016d6","authorName":"Stephen Cleary","authorEmailEncrypted":"Jll1iqTNaPPgwMEcL7vSPqtMvmUZIXu8m+xYGBXmWjoMzc4C+zIFQGYzWBxuB2NOI8YevPW1/B+nlKxU0tWQk4uzDXd/p93GfDBWQnrYxsO70c+lHFziqLZVCxgbanHwA/4IBQaL5SDeSnn6jrLcEUYDYVeOZ3pe9S3atXCTbvkdELa1qLxT+ZxWln1vXH0hAy9kZxBw4Vko2/wNjEdlrnaSF9ksHZKl3CSqwUOnfVgd+G/jRgYxE0hO3W3Y1T5Nf1n9hAcQvVM3rhS21cDCqhATxt/7lQBz/9PEbcQyY20A6/tY+QC1NrtqSqiuMd3/TPOLkcTosDlORzd++zkadtVW7XnzvJ3H6e4uX7q5rjak6MjMH5VOoV95Wxv7Sb+wuwIQYETmivPqzFnMRC2YvLyuL9S47yBFVkwe18OqDacleIbDzHrPJYtUXHS0yf3+qEIjMCBexzMZnB74Fym9dtxE9jWDKNrkDA5liKKlZ25OBODMh3TJQI9PYRP4G54UfyVPEX3Auk1VM1WZvQ8Vq8dN4A3ZNnSdAwRVWrTvWfFTJGUc5lje/jO5ZPkWqsRrF+/PG/vuyIBgR2SChpcLZNkE7QytS88iKNarLEF/eMOu6T2R9iD9F4lhTybCKJypp1eY11f8zNBocY8wC6wUDTCJgWl/yOTT3KnCqbI8t70=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"I would recommend an asynchronous factory in that case.\r\n\r\nThe problem with blocking on Task.Run depends on the context of the calling code:  \r\n1) If this runs on a UI thread, you're blocking the UI thread, which hurts your responsiveness.  \r\n2) If this runs on ASP.NET, you're using a secondary thread pool thread, which hurts your scalability.  \r\n3) Otherwise (e.g., if this is called from a Console app, or a background thread in a UI process), it's inefficient.\r\n\r\nOf these scenarios, I'd only find (3) acceptable. And of course the StockService code doesn't control its context, so it's not a great solution in that regard anyway.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"07f589ac-968c-3641-9c1d-6d3fa4b1a71b","date":"2015-05-06T19:28:35Z","timestamp":1430940515,"authorUserId":"disqus:stephen_cleary"},{"_id":"88542ac8-9aa6-35fd-a192-a5b9bc1ba941","authorName":"xleon","authorEmailEncrypted":"dDGnxX1elLzNRpnS3yAEHItHJNbfT6M5ToaIZe+AbOy8EwcubXBSjlxr83zce6xrx9HgXxgj4314nUvUZceefuL/xKBgzOv4HvWFMLjeM2nYgm/W93oY9ruMZBFhZm/oig1Za7YbCX0huN6UCMAB3gxFlFEiBdt5ON8ywqHOS7ezhDgm3C6z0pGB5bUPLc9NjhaSxbb+14d6RM6n7MiLz0+D2s0dBJnKNkV+HAiifgTx/zY2yGMT0FpzlMkcmsyE1/yy7jf6JCozKV3Fasqu8Qp0aMYSyqubs03x7lboFG1MyU5QA5Pv9Z5Ewy+Y2VNGSdXl1dpNbRTYcFlyOH8hbLnZyiN1Wqdzq6GQIN/k7lHQG0EXha489209NaPFcgx9pIO6/G6EKQ53gsGO5DOwb0lS4SbRPIsYB9YtccGERypPgUysxjlpHI00aJH5So0DaxEpBkhaJJMfAHxkDWhD7z1QqUMq0Eo6vhMeRybPkVrbxAAZW8p8+Lp429DHznBBkHS1a0gyf8laNB46e30G7vp+ICeRQEmOdZ7TSpxDssmQCqtvHx+Hkt3NSpK2mV2EwpPmeia3Cmka2eqZ+8MvxK659cr69+wRTyudYaHFLIbYzgJ109BaMvnbR8XXrwt77B6AqQ0iH1YFP0KcA9cTX4CN2BRlqw9QDyeQGwHZnAA=","authorEmailMD5":"b9371d959d3460b285f7f5f679a45c73","message":"Well, this code is running in the background of a mobile app, specifically in a view model living in a Model-view-ViewModel pattern and it´s not affecting the UI thread, at least that I know.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"8281c10d-2063-354f-8b25-621c752016d6","date":"2015-05-06T19:53:05Z","timestamp":1430941985,"authorUserId":"disqus:xleon"},{"_id":"a23cd98a-3c2e-3318-a27e-bd4d50492157","authorName":"Stephen Cleary","authorEmailEncrypted":"aBweE436Q4de5VGkbBOPp1yNHNyvv4T7qZilkTMyzouxxRSZsZNJlH7fH5XmNE95qzXl3rRitYS/hSlSIxnEjwKk2EvzIQ3vJPIiyXYMHPXhOyfZowWqfikhnr1DAtl/+6dNnl/2d92EjSlFBO580GTLsJ7TxXeq/UJh0ZC5qqrcwpDmzYB+xrypNdn74qgsHhv7b79NWhroT4Q5ut5pRut1gQa6qd95IssteXA7i3hQwEkpKInPmIGPBXf9YMTYeZmogJi3W+WlXodt6Go3OJChlTUT5PqREPLXqJPDFJ8UNNbvpS6ENat0KZhJeR5Gropaet13k/wjeBG+2jHIGgLlseP52+ujQhIMf+pVGqzIZtWOHx0oTO0tvCh3JuvO00xkrv9hQMmeEjh3Tduutu/biPOyaHrH7uj7JL2jcfQs2Umw/dUzF70IP/0kCIpsdgDfwPB2doNk8wfjugB+3v9B/sflD3SslZbYQTaU59VszuXl8AyuMtHMwf+xE9CidVEvSLMxDp/Eoqn8IhYXuBLjBPwsVYRa/rpZm1iqS6BpqGEfKmIV4SgdDL7P2NCU5PfZ1RVHLtGYffKvu2TKtE1ybAE/vidAvrtroEIEQ5akriX9Mx0qisjXLMBgSAEnVCT07HJXlAZCgN/ZVlVJXEaHeWI3DaobMvFxZ0lLdlY=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"ViewModels are normally created on the UI thread.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"88542ac8-9aa6-35fd-a192-a5b9bc1ba941","date":"2015-05-06T20:25:45Z","timestamp":1430943945,"authorUserId":"disqus:stephen_cleary"},{"_id":"9f661ca9-d088-3a77-8f0c-62cf5922a78f","authorName":"xleon","authorEmailEncrypted":"H5Z2lKK6U3PnF8uyG5V6xCwyoEeNsU69kpVHPnVZuBlkucS6aJVDMJ3IieXQWchrb6q0ivuXbSWIxhDC3jznCB48O0oaITVOgB2qFOcMC8r+IFSbypuUW/9+3G9pjgag18iWivj4oo1TOZGcYPcXgH8npKtMuX0YwjjtWQzY9Pj5HpkH1GLdJH5zr3+4rvJjZzSBpWsTIcRfIUsmSKYPtAi+ZC7Tx6VLJc7mbso4pjIEKS4I3edmw0BDhCo4fEFDbCPPXIwAqnEPlSkGV9t5D5G94mzRFPlaxRWszSLkYOig1tncPAdxxwDxHbp6/qtb07wDBotYM1pIWxrSr8IDftvN5W3EKhMoY1LqQ68YcfxYw1lEtvhtHdSrfdBQtkVaUuSqRx37UjCXr2PXBeLCsaeJ5qM/AFWfZlIBueGZw/cRHvU7NEORALYisKNX/fFF5h9+fgv6Qx0A+hIVjZ16+OaWcLnE3prbAQXCYyN0hFMhBIWGyN5kiEsiNlB16qoq8EuT5/OaFPUoEUIHEs9Kn/quPZ6I8HrH9ZP/BTPgn42cbvHQbbSf8tsXj3jyMJQKBxfHwDYjwQSiF0oU+pgEww114+A9UHYJOrL/D0Yvo4qr3mH/Mru2UbGObOGzdfNlb/liFfBgr8JkoJxftZy8ypxo/2a0wyG04RaTXoxho58=","authorEmailMD5":"b9371d959d3460b285f7f5f679a45c73","message":"You were right. That code was blocking the UI thread. I tried removing the .Wait() part and now it´s not blocking. However this generates some other issues","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"a23cd98a-3c2e-3318-a27e-bd4d50492157","date":"2015-05-07T00:04:27Z","timestamp":1430957067,"authorUserId":"disqus:xleon"},{"_id":"f0bddaca-443b-362b-86fa-dfad4318aeda","authorName":"JB","authorEmailEncrypted":"E3qOV1tRoaODWx0cCxv5UIRl4kIoE/iQZ143OcwuOCv/3esDT2HzjbozVdlhvbjls/TJ7c304cwx5iX9IODcn/7KPSy2tofb30KesbJVsOsNfC8W9RVwYuI2rU30pMGNkeqti53wTYhyjjsHEIVcEqN5zWE6fSpdud+TfYD87XNtZ+IIqda4TYy9HFZdThPcXcEqK/pCaQ4pdMioHfX3gO4VAQ2XkBZCkcA/fUMlFFCB7B2CLgll5aAADBbbfUxxm8SXniAL0RA8dSbW2SmPj9yWxrNz9d6Z2mjHWpO/y4+bqmchMrKkVG9gWwF4aIqNPiW56oW0frkeuEsi4sWf4aiwSoGWmU3ofcMqQgnC05eLaZe7uly2CYBeU5u7DquowYYjjEbfhRDE4bWASe8Clhp8aofjobaGGy8k2jhkJU/1vqWe3HQhEqSaZvlNdyZdyE8JZH2petSicP8dJgwN3HazpfzujiFryrPDDQGJ9AbpUCRrElTS/z8joLoHshZkyvyIK8mrZg2nF8N2H/1qDb1iPIZW2GnvH6KytBzDZI2KhVV87s13RVNZDSsEVLSZF5j3TS8H/AsPwOvkpamSUng8uzd/rs0GiJFrV3++1ixkRXpRJ1f5kahQVDrFZeVM5pHwA01AJyc5q01QW6JDA2JSeJY59XPlri+nlMSLI1M=","authorEmailMD5":"50f7c5e5e045a49607266b8ce75da172","message":"Very helpful post, thanks for taking the time to write it.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2015-07-15T12:34:42Z","timestamp":1436963682,"authorUserId":"disqus:jbudiscus"},{"_id":"227a128b-7912-37c6-8c7c-292776254a1d","authorName":"Matt Oswald","authorEmailEncrypted":"LwSiAFtW/BDNwHKx8eHRIWjYaElkUc5J9Bt/Igo/4Uo7BYZ0v8dhiK+ZrpDciSQDc5NuKBeaSQQ/fslfXUx+8+/xAuwLOSnI29EO/80T+zlpPmytlKUbhl6dJ7m2NMFs4eeFnpY57tithZmhpXDD9H+dIQymEWpeudfXnSmtP90wxrNM2DsXtPNL633IpjJmEUvzJB/Abr30RqXlk7QgZi7SI38cR9hLQoQ4vmI+UCcRyXvG0Z8x0WqaeaW4HQv5HaKTCFe3acV5qKetcN2xEwfx8dq8reY4Ir4/y58YSR5rVE0ziWzd3pu+cpIY8WzVG++jnAvcYl4lp/ElmSqYNKrJi076V/3PAyW1bJhT2tw0OhloRq2r2vGrrLUIIWVjfdUcq3Y1sXeGVOKg/J/ibkRzDXgQdGgJLxwyF/cTUPbEvUTOkneQ84ewvboLJvymifzxHUC63qXe0murkTPv5M5BtuyaFEOHh63CJu0p1AFlKNw+BiQXQuzLM4pCe6omNLLg68hvUodoA9G2Wu9c6TrCW47PZj8fClSIOGwB7wJeun5uP/KGz3w1Qai+aObiGoWysV58YwW1AEkezELVGYOwAvP3lDaK7EHQ1bCWNGuN3Jt5LbvNaRNp2eYxrmUhbEu1bD227iQCat5ghbdZNkRPqreMVoRlcQkJQWP0XxU=","authorEmailMD5":"520e7086639935a32fbb6255322b40b9","message":"Stephen, I'm curious as to what you think of this solution:  \r\n\r\n``","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2015-07-25T19:11:35Z","timestamp":1437851495,"authorUserId":"disqus:moswald"},{"_id":"f6e97914-51fc-314a-b602-17a0dce67cf1","authorName":"Stephen Cleary","authorEmailEncrypted":"pttDjA6eCNOworr7otTD4xCoD4Zej+Ba7Qte+W9/bOQi8Xs9A7sCAuJJxiS2MWHNv4zbJXM8uyspAtxiQA5ZccKLY2X2pFH2favGb4JqkQoT8X40ZNr+q83npum+AwK1kTu1Zs6QFfYIkUQ3+/RXnxNNH6x3HM+5UeEPlaiyAu72UoC7FBNRoveviQ7CsaWOlXp5IIfz0HpE18EDwQ1HJpckLUvj1ghoszJhoUrV0Kbyt+TwMCtdyk257PeS1y6jJVKkQuwhk/fjWWzbIuxRto8K7zqwEu03Xhbgo/CIf/D1xdzo56zDHGBhdxLjUDv0fnP4vFS9qmpMFow9iKEDTVY0mAez8HhVJ/9hNQERDv22gxOSvcLPHadyfkuvYLhIGZYWoKDFYD47PUD/mN+MUPC1A6vp32wk9qT+0jZKFR9K3SFQEbVZwPZVcnnSYnrm40bT+qcju4x+02kd3v8DdpKwJGQ2YRqKqzpdcyOUwYNNOsiJh98/2GS9XRtKE7Yhk3iSZHtkmrTIhliluSqFPPUsbREnMqPszHqwQEG2Ye7yFa3CnYwO+keqjolIcGYYgRuYUj0DmgmzaKQ3GZDwVDY1fN+43Mkl8ndulTDsf/B12d5FdT4YAevqD3GJiPq3oXJmYnUWoTDuYp+kS/voJfxzVX9sNAaBI42Z0FB2T8Q=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"There's no indication to the outside world that the initialization has completed.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"227a128b-7912-37c6-8c7c-292776254a1d","date":"2015-07-25T23:27:42Z","timestamp":1437866862,"authorUserId":"disqus:stephen_cleary"},{"_id":"3057755d-0660-323a-ab0d-16dcdbfccb3d","authorName":"Matt Oswald","authorEmailEncrypted":"QVUzyYHcAA7Lomw4tGFVSWA4n6/92ttp2FXLyGFx3PFhv/KGe8JR+g2ubDZ1cHVKCL8dGGOH6LWs4vNG2fg6QE7pOSk+jgh0Iv+ii02otW3y6H0E87rssLWzGZA1seyDKMdtnEZF26ygRri0Xu5kxoPwNukajVIEjRZZ+KCK31SZa7fRRm3oj6X5llmOGwPnEQxP9gWMHU8Kqoi81xuC+o/LcfuI/m4Fq/yxT/ypzAUX+FBEP/3mD+/PRFT4NMrGZmxyrZOIjeRQt5oyGYn0Cc/QQgczk+VCPyon0Kk5l10oWt8QDv83tmzl6WLqkiQydxfNSNM3zLQpavvceyhsgNm5b/tFNuAZ+KoejZyrruhR2EEDgne07wDmwM+Tv9ohl5LLYDI3Bn7C8196tmPU5QOTFNS5QFji9YO+w3vkMHUbmHU94TNZDCbmi7ushJxNQPEUiOVq6ZJAYKPiA1sGhdWuFnhZhyShFWruFZh7alJbVm4/EB3rvU6cwszvKMUqgnLzi1pSndkJyc0qHC+vrwr6VrKl1+aa1qWUsPViUOWH35c5IJPO5JXdkijYosNuIJcu7q2jZwiCgs0jMrv+S4hjssF1yBrjPt5M+hgvramqLY0NpnprG9g946Wd8bog3YZI2fJ3NEtc2ddtlPgWgzoSS5SEqT8m1/DyYUBIFXc=","authorEmailMD5":"520e7086639935a32fbb6255322b40b9","message":"Oh. Duh. It's been a long day...\r\n\r\nThanks.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"f6e97914-51fc-314a-b602-17a0dce67cf1","date":"2015-07-26T01:15:53Z","timestamp":1437873353,"authorUserId":"disqus:moswald"},{"_id":"0e6d96a4-5bd5-3c9d-af31-7bea7e322411","authorName":"Nicola","authorEmailEncrypted":"JkT6tBUod7FY54yUnERBSaWE2ypUm57YR8iNCzCcnanVOV0oAKdzcw/vWpfYNWkAVaIusRudsrRGkVWOzwr0VFBYZGLKf7rClag5PnSLj6AZmJmlsFt0KXYgRr1XB7vH2rcZDkYGmIoQifKXbu29FmKW3RNOF+yLsbIFPkA2TRwzb+dOs7rL3eWyRn1yBCKl/pSAhyiri/Z7nuDHWX2R856wBWdX85pnqsCMpTmtPLwnqjAfnGq7DGrbPGPwxjix9oYnrd67JSNEOmDXT0cWzZquOhI+zL0brR0ZUvgDYhMvkzvMr8Ojh4pyCLuUlamDsTe6lYvt8ieM924opE0mpUsRF2pcFPvFaCQBKJdosMsWFosJRyinDf2Yhou3zbuECD1mrNng5bN9+Qb9MfZnmtzQtKcXo1s1Fn/3EfpleCx5YCSfXnsxmE+Fq251+jWvA9Cm+NGCh/04Rz7nRkktbc/sHBCAy9zR09HmliZIJAxkh0i5U1VPi6PBpLcliTfZXNqoSIgNQuxeUZdXLAn6+KIVF4e7QoJsDRVGvBCkitkJFsoARtFtRI0gMeKGnq15P0XhC8Ue7rQhFb4JU8ntdqyfd4F7r95Til1XsN8UnQtyO9wADyPdB5aGaS3HNcb1S+5qlm02b7+kEImI3U3Hw/n6yeNH8vofwS6a/ubbS3I=","authorEmailMD5":"fb25e025040feaa51b5e281ba714b5c8","message":"Hi Stephen, thank you very much for your clarifier blog.\r\n\r\nA question about use your pattern in a context ApplicationContext. I explain.\r\n\r\nstatic class Program {  \r\n[STAThread]  \r\nstatic void Main(){  \r\nApplication.EnableVisualStyles();  \r\nApplication.SetCompatibleTextRenderingDefault(false);  \r\nTask<appcontext> actx = AppContext.CreateAsync();  \r\nApplication.Run(actx); // THIS FAILS  \r\n}}\r\n\r\nclass AppContext : ApplicationContext  \r\n{...}\r\n\r\nIn AppContext I implemented the Factory Pattern but when I try to pass the actx instance to the Application.Run() method compiler fails with the error\r\n\r\nError CS1503: Argument #1 cannot convert 'System.Threading.Tasks.Task<appcontext>' expression to type 'System.Windows.Forms.Form'\r\n\r\nThe problem is that I can pass AppContext but not Task<appcontext>.  \r\nWhat workaround can I use?  \r\nNicola","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2015-09-04T22:31:46Z","timestamp":1441405906,"authorUserId":"disqus:disqus_CsasGSfR0Y"},{"_id":"23210125-c275-309e-913d-44534577917d","authorName":"Stephen Cleary","authorEmailEncrypted":"bCt0OhC7Pv54MGjIp4eCwKQm6uGXP1Fj0swNWG1yGGXTfMyJJC4+dDzZavnyN4mEEWBiR1uQecqCK7/l0YCXlx4cMdAH5yKKyjy1mKFeU6vvOEj7cmvnub9dHrGOQpnEYIqis15uQJXH6lXL5+gqFVN1jO/svc/Tk1xo3xHDOLDvocWt3SdgrZlBfvNre22BwvYcY3vnwkHAcCFEg0n2q9EYaOzsB+GNnLonUxSOxNGWgYlOpWtRJC9L2f7RyvqcGMF0ydBpa5ZtLCkds1g7HgBp4R+orDwNoOeL3IJWhRxDMlsVU0RhjB8g5wTuCyQQYagpC7wxG8WnZW3soSZO8mkST0r6VA8+Us4rTBaoda3fgp834W6edlKokOQibi9VlpLWTS3H0VaosvtL5DXv/OUp7uqPe1TTiUAVItI4hIsH/+kbysEHYwlM1t/38d5JcgAspGsrB9vXAHY3AmNJX+T3JDKvc1X0CuSkvqx3F28yFWVWbSZAoB9DPeOV7zcHCQuZthqMSy+bOPvpf1zh3ajVIgCr1A3i2Ip7pB++pc5Wi6VEq/0TWdW5MT8s1SeBlQdtF7WWvXKo4I6B0C/JnEsuXbI2QyoEo39xyaK9vreUEJHv2pZq6G8TPGBW6xATW2bJH1kN9NPbFzdU3DwPQh8aJjxf0GZHfaESdzDDFnk=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"When you first show a page/form, you need to *synchronously* initialize it into a kind of \"loading\" state and *start* the asynchronous operation to retrieve the data you need. Later, when the data arrives, *update* the existing page/form to show the data in the \"loaded\" state.\r\n\r\nI prefer using asynchronous data binding for this (but the same general concepts apply to WinForms apps): [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/dn605875.aspx \"https://msdn.microsoft.com/en-us/magazine/dn605875.aspx\")","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"0e6d96a4-5bd5-3c9d-af31-7bea7e322411","date":"2015-09-05T01:37:21Z","timestamp":1441417041,"authorUserId":"disqus:stephen_cleary"},{"_id":"ef9712f7-0ee1-33ff-826d-e3daa9382069","authorName":"Kevin","authorEmailEncrypted":"If4nHHcbNixrJBYYf5T5qylmW37rgt4Svppr2TwOfVX34kJNzJSYvV8mWebRMBH8xa9c7QPoxbLSanFN8BU/qhyRQfcMjeG1s0kQ8DG1dSZfFSL5fSqX9pqztb4Q1g/sKpztUvjjIeHXuIJcoeAGMxZOa+gx6dsoR+XwIVVwww5OWFWNmWcYtf1RfCAlgOnpiiFd8H54W+PwbjkHsxcLXhU1KKklbW6Eh7O5H+13WBA3iAQu5XsmePHNuMGBoGPQdmpUq+d58dPzHA7+5aVw2IgTq6mZfH5v/gS0BwlAHesxMAJuQzGxh+8tA2x+iyd0i2SEO1ibJWsnsYzRllNVhC3073/1XkSwwPxVtFYC9Vzo3MsV5OIAIwUoVAomBIcoYRjvsyKmE6ykp381hgMCWPNHJve4h0lbX88HVxo8y4d1xyXWmM9bYR1m8LBHuCsTd3cx8/kEndOFT6d73q8Uwg6h6+WtsY4d72W9t2wRT8k0aRU4L+T8drJwKJXh8ShiVt3I9aPBi8qqveBeavvZ6F/Jq+OPt7tswaxy1PpAyA4IiRWquk7LL8DFLB/bR5IbKD4ahFhhKaI41NrfnqXfu4A9RQgktvSiQVt36nRNm61UrL96lIpnYls4B2umr7ocRENVRrSU6Mf8hlKg6Qu+0Seb5M0AEDWb2YVkq6u2RO4=","authorEmailMD5":"8c607b1c90c18830d86e2769e6cc131e","message":"Stephen, thanks for the great post!\r\n\r\nThe Asynchronous Initialization pattern is a much cleaner way of solving the problem that what my team had been doing. The only thing that's puzzling us about it is that we can't figure out how to unit test the initialization. We'd like to wait for the Initialization Task to complete then verify the object's state, but when we try to wait for initialization to complete we keep running into the deadlock you mentioned in your July 2012 post, \"Don't Block on Async Code\".\r\n\r\nCould you provide a simple example showing how to unit test the initialization?","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2015-12-14T22:21:01Z","timestamp":1450131661,"authorUserId":""},{"_id":"1ece7bc1-f849-3880-a2b3-0f2e5cea95b5","authorName":"Brian Varley","authorEmailEncrypted":"kyXFP5aEZgWhx1A7CzTrCwCmlLeQoNCsM+dz9Ftz1Hs1Z/clJogPcxCxni+6JyyJletLcAAXw9X31V9ZrcgkdHwXyA+nclQhuengMhFT9bLvQsvtKLJ0zid7oMwVKt0Opq3FWQBrN4Gur2X7kvZhJzCSWuCFT/j2kQ+1rgTcNQyLipwPEWYt3Bl2H9zq1THikyThQdtSfrS7RggRPsklDBuX5uTckI9SeFkiFoFN4gl8MTisBxfDpV9q7/FWmNwm8qwKXZZoTg1mbdxnUfxrOscJ2r5h/hmzwGQ6mWmFgglnv+TV5lVAxxucQuKNafMJXDIMlYICgG5oy4pOPop/Urorml+7+lXuLQiuvUENrDo3bmo1Q7YuteftDLliSst6hxvpxa6+ZPADI06eTIbnL9hEuRuAzYngvB3Bzv6vLFxxaSVjslCVZY4OOgbeA4X/PNW+DLAIiImeCaz2ydW30Mtt7L8rXrmnzPZ+ParMloy9XxGKAGGEqou1CZbb+UZKHbTx2MsY4+2qQadv8KSUFVNDLxPkcui2YXg+dU6jkGxaFiZYSgaeV34861nfGE9CXD/LmMkV28wjDvYGE68VONMEn6750/TXwCflAoyfQMpBX3HhPruDHf4Uj/P5pEmEdfqAcojc0BU8dRUfHvxXLgSseHIKWRjxMmLYfn7Fam8=","authorEmailMD5":"0af9e5bbe347bfe7f879b99dba340fc8","message":"Hi Stephen,\r\n\r\nI came across this post from a StackOverflow link, when looking for ways of initializing the async init method call. In my current project it seems \"Asynchronous Initialization Pattern\" is the way to go from your article.\r\n\r\nI have implemented it successfully in this VM: [https://gist.github.com/Bri...](https://gist.github.com/BrianJVarley/0426cfb18f7c55d0ff3d \"https://gist.github.com/BrianJVarley/0426cfb18f7c55d0ff3d\"), but my example below is calling the init method from a message listener which is what is confusing me.\r\n\r\nNot quite sure how to assign the Initialization Task to OnSelectedCustomerReceived() that contains the async method call. Any advice on this appreciated. Link to a gist on that here: [https://gist.github.com/Bri...](https://gist.github.com/BrianJVarley/b1daebc217b138ac6beb \"https://gist.github.com/BrianJVarley/b1daebc217b138ac6beb\")","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2015-12-15T23:59:45Z","timestamp":1450223985,"authorUserId":"disqus:brianvarley"},{"_id":"de73d81a-f0a7-35bb-b608-9675b8c4abbb","authorName":"Stephen Cleary","authorEmailEncrypted":"KxABiAqxAv82CEku1EnwANFeujeoghtXUJ8hkwGsAcApd7zM4PGvJxNzkTg8g68AgKPAlMfUGNaxrSrmyK7nnM2K3IeNGbJPPvAPvtPPFJMK8Bnl+y9sXN6yVxuyP12fP9rmTAqETfDHmXXqYyXv98dufnZ6AFSPsOXEn2qLjqk5HSzMlrYHf2IwVBtAMx/3OxnRelm7L6I1MDJmVmtcDUuhJhQHbe47oGzEMvatzK8S7qK57CukZEsN0NNpJS9J3cA+gdkFbfV60IameJs9/2BicykBxefW61RccQg7Xsxl+MT9Mn0qP88lz1DCjzUDNq70IyuTTsJzKmGF06tOZGG0dZrNNc+oVgn/9DoGAaaVwRz8MT8DmJCUgjlYRS0/IjoMCU1ZNZo5BVP91ChQlf3FfYaqEB2s0bwXgZusMQjwLzsGBVtuDcy8QwapuHKy1EvekmcIAm7xj8mMVILPdwA63RPZylOBFL4g/QthKRXUxwgJlZflJHZ1REx5H/N3hcgcgcu2Vifn9i3i3Qyult1GXgd5cxRWSXxIrIsBM8mJ4jOMm9eqNYF2kEh6vuuNA9l+QLhY70a5v/gMNlXcYuIcsLOQSIIoK7CHyWtQfqwDBKiwaTM/WF2StC8BN0nTBeZhLbLvWao/aAAyni8Y1SKmxY64/xP/xeO5L2IqjrE=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"You should be able to use asynchronous unit tests; every major unit test framework has supported them for a few years now.\r\n\r\nJust be sure to use an \"async Task\" unit test method, not \"async void\".","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"ef9712f7-0ee1-33ff-826d-e3daa9382069","date":"2015-12-15T08:41:22Z","timestamp":1450168882,"authorUserId":"disqus:stephen_cleary"},{"_id":"08dfa76e-6410-3cc9-a8bc-bd0a13873ce9","authorName":"Brian Varley","authorEmailEncrypted":"siw+V6e1QHVcdibE3z9DFgDyHbi6XK8FMbcUADm+2EZoBOkJVwRzwCSVFeN5FUFe+xGNrmoUuhk2dMVsJ1vbPXtcLgSDhN3xHX7oR9hwVsojAhSLUX7IAsOHnsh/XxMmWkn4D6xGZa2IRqciAT+zOLIhIF92IKeyeiHe+yWAu5JyLpkvcAstsR+C2zkPCRg7Dzvf0t7JTdklomGKjpzpdM+z46QlrWUOoMIaCEu+wF6bVQ4LbpffxFJaU4TgHN63mrud+p7hNszxs6wm/VLlG/wCrPpZTgeCqlpspAbX84cJnQ+3Ns111XGDfXnlRBWeqDTJ7QH2klvNML442WS3YPRJvRKofvPQjgCWuBBnu2hF3ojMDsiwjAtuKflDMmdbJdPUbHzcPLsi3DNGhrPOat3B3Erz/YWPXbSBKB5+/PUl7FQbes6s1e1SoxH/oG7O9uzgGqdoY++vXIzHpxgtOk+wAXPWpqXavZ7hW92u9UP71MeCrvongN5SY+rWucxYcw81RpudtH0xGiOlVmUci8K2PikAoLkt9lyu/ej3zlbqoMzBglbkiNxQukB9UShuf2AwsUsoeGrWFw30rjO3mK6WHJ6aXYx7ZTUsSlssfAg+HjxdjFcv4ENCE5FwHPESJ6O+r/ony/eRlleHLUhwMzkDMxFlymvfJvL74o4NbEI=","authorEmailMD5":"0af9e5bbe347bfe7f879b99dba340fc8","message":"Okay, will check that out..thanks for advice :)","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"49618665-1ac0-3ce5-9b6a-b8b58e80571c","date":"2015-12-16T20:47:14Z","timestamp":1450298834,"authorUserId":"disqus:brianvarley"},{"_id":"49618665-1ac0-3ce5-9b6a-b8b58e80571c","authorName":"Stephen Cleary","authorEmailEncrypted":"Gvf5QXVqcVq22fC0mwgJdjzTZhQoPPa8v44FhMaujLxbj4ifTXEGI+aiDD4S4w6cyJ/Ul1Wwq4hqFxA+3QICjGwXnqU3Q/kf4Fg5Qh9kICakUJuSOA0wWnnawMc5pZR3zBSq1+cZGVDiUTWElT4QgpNjjbxY3SmwRxFzdHhMES9FDE6f7s6LXpwjY8vp1YerLrcN7RBfizHFkQ3WQeaKMhrRXrESIyuRKwcCNarhhZ/foQIzxKUCA8aoPMSs14wWhZfAke11AvOoqKl2y5uBmfBTKKhsaJ/p2/Tk0tPOLaa1p2gSA+1IgKu3m2G7/AXbzir4mXN9jldN4hKHNjnqZHmcylXwTzxVE/9dmO+EhqVV6/yIifh1he1CJFNjWKQnyR9aSdsN1YOesbWKGYow6Z3JHm/+zFjD261e1se62JdNHHYCf2K3zOJyGgmDaXbSYak2EKptNlfUdcAj/pzeZTziRLxHTzVs3THXH7vR6ud3pmWtPGLvb6Seds1GcAFpGXySWG7A8xEyHO6PY6mgJ8rVYdTevpOmRZR87XhBmwXKQSveod+V8+nymBX9hYjht8mXHHz9108IeBscoKw3xDxwA5AeRCb8+uNGMY7s276nlCb7yic+TrylEtsP+ZkhVOPcxvMxqdyu11Nr7u1uuti55ybpB5ZMt9cUB9LU+Ak=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Sounds like your [ImplementPropertyChanged] isn't working.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"69b23160-8daa-31c1-b853-418850c76aba","date":"2015-12-16T20:43:52Z","timestamp":1450298632,"authorUserId":"disqus:stephen_cleary"},{"_id":"69b23160-8daa-31c1-b853-418850c76aba","authorName":"Brian Varley","authorEmailEncrypted":"K+UGFzR6KsxJvM1LMoTdlQLUwfgwDMTOscTSTpUUrZ879fnyeP+Mp4m35D5Z20VRJtO/QW3pgBCAqfJ+eFr0C24nhpYmWA5XMy6JFF/2WHSJii2wgg9B6piylMIvviJgWTz/9Ndt3wbT4m8Et73wZwj2vNT3AFXNs3iwzyExbPnyouPIJkdaCGIJUfM1cN0FmPjk/pMB+wA42A2+noNZAbwJ/36JU9kUcNDSFtTEjXsREzKiN+CXOGfhKoRCF7kAX32Y4l7Yr8hR6y61C9J5tmxx6FE+5oNH4iMGA9e0j5tdT2tUkCnTS5yf4O8khiMhPRaUEGjROKPWlPS+ohv4ttGvlpUi15EkdattjlA1FUbuvdAzCNeIp3bv4/7/Mvn2+6reNPnPr0FbNNbkTGqxEIfJHwfsoqdacRvwHKyz+tS7DYg5mUdDV0Lyq9hMEhTl1Q+vyzpXsMG52vyk4X/B01lH5oA5UDCx56SIPLKRNXAp4F+KbqdbOhzewcvA+eM96wfB+KQP/IjSd5/ecMWO6hJSHmeS/Qolx31ycX9/mrbZPKDnhXDoXbDI2bomvLOHvbtozvUAml20y+GhGOkR4+2o5Q/dq467xNUaXj9FThlNyk30u73bd2SBbG4pvm19Vqx5KYAmEGJ3i3oDB3olTBkEkZ3DB/iFyZdvOt2bFZg=","authorEmailMD5":"0af9e5bbe347bfe7f879b99dba340fc8","message":"That makes sense. Implemented as per above, changing the InitializeAsync call to a Window loaded event instead of in the ctor.\r\n\r\nNow though the UI binding isn't showing the returned data on the View.\r\n\r\n1. Stepped through code, it shows that the list is being returned to the VM in CustomerOrder list, but the UI doesn't reflect that.)\r\n\r\n2.Checked the data binding with test data, UI binding and data context is set up correctly.\r\n\r\nAny idea why that's happened after adding the AwaitableMessages implementation?\r\n\r\nThis is a gist of the current VM and View:\r\n\r\n[https://gist.github.com/Bri...](https://gist.github.com/BrianJVarley/b1daebc217b138ac6beb \"https://gist.github.com/BrianJVarley/b1daebc217b138ac6beb\")","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"6b74d5c3-db41-3b09-a62f-7da6fc101783","date":"2015-12-16T15:54:45Z","timestamp":1450281285,"authorUserId":"disqus:brianvarley"},{"_id":"6b74d5c3-db41-3b09-a62f-7da6fc101783","authorName":"Stephen Cleary","authorEmailEncrypted":"etstCoS3RWGqmW6G/9UuKoeg74tCNsiuOTUS5XRpy3t8yiFPcthdvwm5s+1JJvRSyDfRHorOwpA/NgSzKGkv2cJM+U6kZhET5ZNOr3FLaAbMov5VVl7e2ztX78uxgL9WqDKG2jflTlF9RPa7THTpMYtu+k20J42taNA++CycW2DnMdUU5nh3qq3mbJQhdsYIulr4sFmh/oy+0hXsT9TAa0LAYaQuqot+10RDqBv2OhcJFSqXVTc+vX0Ru2Yk/tHxtE+d+faUDuyKjbs69b2OBYnoeCT93hJ4YirnFscefoO5Xoeng9pRC6Xw15XiBvPNHze+gcKP/Dz8Op68qfqnyp3bv9ContR2WGDF91SqYP9ESy7jCLphv3TJI4Uosyp5hgbGG917Pq1CsQ8TNsqT33OqMP2UIHGwnX6wDaC0jXv6d3nZG+nKXkpQ8Q3Dzk5VAEsApOuhsZEX6svqlopl4K6Pvt5AblqDxQovrD9etb13JX922Ss0aL1gIeI5eMz/RpqeSVVwUSKvCX0wfF5w2q7I2EYQSUyWn2VHP9bCR/FOKLYzclCIFcZf+pS+C1ohJqtiInKudrDzsNeOMNzfruJeLye5hG52bjNadAz7OXtm47/pWukNjsQOt9IdgSYygOJXuJxtFeUxBLkOw7mLoQQupN32MGDnKk+DJyuCxeQ=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"This is more what I mean: [https://gist.github.com/Ste...](https://gist.github.com/StephenCleary/139f6b313788032fe9c6 \"https://gist.github.com/StephenCleary/139f6b313788032fe9c6\")\r\n\r\nFirst, create the wrapper for messages so they can be awaited. Then implement the normal async initialization pattern. By separating these concerns, the code is cleaner.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"84decb0b-922b-3386-8016-234c6ac27a84","date":"2015-12-16T13:10:38Z","timestamp":1450271438,"authorUserId":"disqus:stephen_cleary"},{"_id":"84decb0b-922b-3386-8016-234c6ac27a84","authorName":"Brian Varley","authorEmailEncrypted":"gzxw9qpDxH0qCKlY+m3lafxKVHjsbCFh8xlLbFTyjRNmdiPHRXoMgr2TDy1EfEQc5p7+oQl5sP4R7fgpC3CR+JvQEL0EScRSdX1ss5YO+m1BGjbiHUu46qV5E9qa/2443tvQUljlvAy6GWppXmp//E8zAVjq7Xg0IjF7NublWu9js1fEJwO+JWxXznWMmSG/h0lLp6ldY8vdQGdCFMw6TybvSW2Ke3vncpvtiC8Yn4s6YybcsBJ8sJ9LfeTOnul+SpIHVujPjNfS1XYTHCKbjc2G/PWDfHl+BQCdNDtqqrGyZzdyUMqrxoFKpqCiYDgo9IpuVg7zf/ZjRVHHV46n8rYpakF34beOE/e9m6f4LdK6rDRTJ9PReVKVf2KPaW3N8i1i3ogIL8Iesug+B5ocLsOU8xYzGIORL550WTT1+ixndD+IyyVWpDhmuWcFvg+/B1tyvl57KjaSPWjwYXEu78WFTNtuBeDMhhoczkVYZsWCx4u0WaFRCzgPRki+s3h6tIhKz7Aa9A3+3LV2gvAqexLwCy6K4l1eDeHsz3xoILzDPYZ6JS+0Kgfgm7MfwnP566QZV5DKQ9aCXuJLmyeQdtwzFyndfn6s16gAJH83hLp5aWShcammmBPvoGiLYopJjGUeldU3LCOglwgJCgfMR7QbGRwOmpgTBAZVf0vakZI=","authorEmailMD5":"0af9e5bbe347bfe7f879b99dba340fc8","message":"ok that's what I'm looking for in this instance. Can you advise on the code implementation further? The bit that's confusing me is setting up the async wrapper around the listener.\r\n\r\nI've attempted the above by setting up the TaskCompletionSource property, then awaited a call on it's Task in OnSelectedCustomerReceived. But that doesn't seem to be correct: [https://gist.github.com/Bri...](https://gist.github.com/BrianJVarley/b1daebc217b138ac6beb \"https://gist.github.com/BrianJVarley/b1daebc217b138ac6beb\")","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"ecd4d8c6-0b4c-377c-841d-59e659fad2b0","date":"2015-12-16T12:20:04Z","timestamp":1450268404,"authorUserId":"disqus:brianvarley"},{"_id":"ecd4d8c6-0b4c-377c-841d-59e659fad2b0","authorName":"Stephen Cleary","authorEmailEncrypted":"o4xKFFvjfeVAH6hu/2p0VdbC7Yg8gIDjRvDoc6OYbezap52vIgE7U3aFBDaLWp4ve0taHfKCaavkErCI2w1HYUsZqVemDBec44hccNhxfdeXkBX/WI/ET+weaO3PQ8gObwPwhqj9Elm+ly39QTk869ZjBb0T95xzUc4bh4BLnCv5T4qa67rN9TI3XYn/n+R9e2lDMC4sZb5eL6cKdMRf5NZtjt5xTo2G0lAu5YvpI2raQlw0zmJM7lxmr/AuqWpA+dmwJHR+eXydp5We0XV8lp/PIo/N/+pQ6z0vSdPo+hDzLSsuXFMaeeJHaUHTIgHMJw08KS8wNPFQyM3pPke5AVv8CGbuvlfR7hcE5fUMeJM+Zy/ynQAtZeIIKgBT2oGEtk1+FVs0gjW7DlAjGhzINqz5ta6ciJ02eVVeVxqKcdTcuMR6+gHQZn2uu5/HWDd8KDQ/IEac+Xzb9qtiQurXSSv0v8xGx87TFU+4TybtgXVX9HcKE9QMAga3c9I/B2QVkUEtekxJLBHuASANj2pUJjSRWi6E/Rq/RQWIxLWoUDWbNQgyv611kufw7YLiAcWLCBfzpJkF6uh1CIf/6DF3lcpAc8Cx28tR92TkwB/YYWHZQ4xuUAXdIOEPww/Gt2GkqDcU8ZuCXHXAgqbZWBX47lvuoveOa+UGtw1XZklMZXk=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"If I understand you correctly, you want the initialization for CustomerOrdersViewModel to complete when the CustomerModel message is received. The cleanest solution is probably to write an async-compatible wrapper for receiving a CustomerModel. You can do this by using TaskCompletionSource<customermodel> and calling TrySetResult when the CustomerModel arrives. Then you can await the Task property of that TaskCompletionSource<customermodel> in your asynchronous initialization method.\r\n\r\nLogically, what you're doing is first creating an async-compatible wrapper around the message listener, and then consuming that with regular async/await. It's probably best to factor the async-compatible wrapper into a parent or utility class.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"1ece7bc1-f849-3880-a2b3-0f2e5cea95b5","date":"2015-12-16T03:00:08Z","timestamp":1450234808,"authorUserId":"disqus:stephen_cleary"},{"_id":"00a64f59-50df-3e2e-aadf-f5d0ad69848c","authorName":"Luís Fernandes","authorEmailEncrypted":"uKxW+8sYTtbLRNIBB+ZKuYir3iDFw1aREyB+H23iJvcQ4h/Icmw2ChD5kENTrPX7uEn8/rnWIWIuCBcF4jwWkctBgPsRsjDBeLWrYzo+8tW3b1Reor9AcqNEfePo+4QjoJ6JD1Cw+GAoxEmCHGYJ7kZF4FT7qaMlXXYL+2xAZgURe68zl7WPQOuEKqaRFAHogzQryYtHqVVQYfcHOBaeowF8bg39+y8ut2XdykD7l+eIf7/RkX+AGAmGJD7Qy6eWde3Q4KdDZ3PsBldr7A2gTiSCNuSOAfsiCJqYN+G8R4e38nhs9bIGWh+8coFCFRlmvu8NUc+FrXsL1eZCwkKTHe2w5hqyY8BpcEpKIhNwEwp2X900Iw41gFUmPWkjXXoAM8DOXKT6SrpfjLLRMioCC9rVZxDReXtX/rb0xCncghMsXP8WW10E2wtuEuUrne5dnTFnnYEZX/Ai11WAjfNIJM8//udpJpuCd9cbHXxLyts1epsIle4eQUHnxuU8rDBl3H1iw4CdJ9/mTc/K1q0sZOyUAh9G0HtfV+cuxZeN59ehABXUAUb1tEOYCeZ/nPMMxc/AgQTsMI4bpsET1b6LfhpghkT+k2kA+ztWN3ElP7Mfp4rpe0Vs0XEoBn5xt/FTxlG7N0gv3eo/fCycJcFaa5YxAr2zk8TYUNWNHhdNGvQ=","authorEmailMD5":"f35449b8f0a5a8c3a4a3825517425881","message":"Good evening,\r\n\r\n I have found this article really helpful and wanted to ask you the best way to make it work with a Singleton Pattern, where there's already a method to access the class. What changes would the following require? [http://pastebin.com/PpzMDwAE](http://pastebin.com/PpzMDwAE \"http://pastebin.com/PpzMDwAE\")\r\n\r\nThere are some comments in the code to help you understand my questions. Also, when trying to retrieve the instance with 'MyClass.Instance()', I would still need an 'await', right? Which would imply another AsyncInitialization?\r\n\r\nThanks! :)\r\n\r\nEdit: while searching, found an anwer of yours at stackoverflow suggesting AsyncLazy. Would it be possible to avoid the 'await' when retrieving the instance? Perhaps by implementing a 'Result' inside AsyncLazy?","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2016-02-11T00:29:07Z","timestamp":1455150547,"authorUserId":"disqus:disqus_IUwcFx2IkQ"},{"_id":"05925d73-bad5-36b6-94ae-1e404c9578a6","authorName":"Stephen Cleary","authorEmailEncrypted":"a3RaUUHSfobW2e/1xhphPl2xnWRXQkmvBsMTil6c6j8CwasLyLsBVh6XNIigLGW9KPyX7RN+pscinySGIafThJrHTL59dL5XDYCr9w0EG0UPWz45WVjhjOQNkiVzaW2JNBG+nAlpwm2ZJDGj0GvurH1XHIDNckSgJd9e02B/PS+3tS5SF+3BTDX8L9VsJ23wnMqx8pWX+bc0X4RedktAYBt5OXrE1Sg1YbXLiKLFUcdL4ztGXHnDJXJ+oQXzSlThFZtFyEdR0+Vypioa8Awt68sOHvFhosUCpzLVmdruInYALGBXogKsRRQcdMTtMqBSB0Dlv23KnHnc+qZu0IU6Nl6nksRWPJg0syR06c4yLqKzEZayzR1qRfW4OXmYGSp6IBMxA812QjB++hweEJ1eZkqQreSw24NEm+uOO58+N7fqRJ1zC60MGkF51XBbuWsKMIUE4ZWmhj+jUjY0Ai1q20IxSxdeNMphN7UFXFvJzSDkVNfLxnq073RidDzgVsRSgDDX8b9urXq/P5f48dCB4ron8c6MoppkoTyWRe0vE8FtX7MbvOC8h48Bj3z7VDjxUSCJz73ICzYYGEE1ZIdsLXyQ6CMbI5SZsJFTHNFOupAXpY0WO0PE1zD3D9x/QS6YYrEb7YX8m/25/h1w4iL8LmP/zDHK/RugbSDzyIh+0Ok=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"For singletons, I recommend the async factory pattern. So, instead of `public static MyClass Instance()` you could have `public static Task<myclass> InstanceAsync()`. Since your `Initialization` is private, you can just make it `Task<myclass>` instead of `Task`, and return `this` at the end of `InitializeAsync`. Your implementation of `InstanceAsync` then is just `return _instance.Initialization;` (or you can just expose it as an `InstanceTask` property).\r\n\r\nAsyncLazy is a good possibility if you want *lazy*-initialized singletons, but it looks like yours is eagerly initialized.\r\n\r\nRegarding these questions:  \r\n> I would still need an 'await', right? Which would imply another AsyncInitialization?  \r\n> Would it be possible to avoid the 'await' when retrieving the instance? Perhaps by implementing a 'Result' inside AsyncLazy?\r\n\r\nNot easily. The best approach is to go \"async all the way\": [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/jj991977.aspx \"https://msdn.microsoft.com/en-us/magazine/jj991977.aspx\")","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"00a64f59-50df-3e2e-aadf-f5d0ad69848c","date":"2016-02-11T18:49:43Z","timestamp":1455216583,"authorUserId":"disqus:stephen_cleary"},{"_id":"1ca0fecd-6e98-3792-8fee-b269ef2a507a","authorName":"Luís Fernandes","authorEmailEncrypted":"IXlZqm/Ags6VcRHE1hZ27/7cnsmVJSn2oDx+NEwOGQiWIamVRyZ2aJLmy6flebcbYWwe5DbkLq7XxbdadxMVrSOgbJ4rw5fnBOUtmg5eipV3B38P2s0AOCgMiWnOiTpRhoSrtyK/oKHO+ngjRrFxT6oWzZx8GdmzVZeRCfSt0m3D/jI130Xfiy3nl7xk0f7N+ejTtC1OXBuaPinQUJnaesbGPL2vF2eFjEXwBMv/d+jSf1k4eSZeK3eu0Z8SDNhzHzQ+nWA13w1xNftvtHoACxB5gkae0KI2hIvo+n5vfhedYF0lz1s5Na9SB4+4B0YekQSCuTI8d5bINqxICgn0TWEMdKf+ewfu3onXE2CJol1AbvLOQxHHPMu8VBMHxc6su2SKGTx98e7cdV+cy6iscYIZly1SmKEjKyQJZ18EghgQF7SEWcjJg6CLYw8BGsUwcNlS52psOTTOzVxFdQFbIWwkoKaGGrlE6H+CDwD8hg+jJhE+G6ue6t1kfcBaVdQdtkLgP4Gx6deeSp970xNi4b21CNolPS5p9dTt3YY5TuIptcrKh0TfTB14/2HXKjDzVXQGhyYSlKKS6sO0RWPrREvJ+2jygaq4TNKtqkueiYK8/nXiwYCFFTbXqZSzzcY2jauGDgAoQff5GKsJwb0tZxLXCUi4plvfhKwC5uroknE=","authorEmailMD5":"f35449b8f0a5a8c3a4a3825517425881","message":"Thanks for answering,\r\n\r\nI understand the idea, however going 'all the way', in my case, implies handing async tasks in Android Activity (Xamarin). Simply making 'OnCreate' async won't suffice since it does return void, whereas we'd need to return 'Task' if I'm not mistaken. What would you recommend then? TPL? Something like: 'Task.Factory.StartNew' ?\r\n\r\nThanks again","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"05925d73-bad5-36b6-94ae-1e404c9578a6","date":"2016-02-11T22:00:58Z","timestamp":1455228058,"authorUserId":"disqus:disqus_IUwcFx2IkQ"},{"_id":"01bd5f79-5052-3704-b094-f58f286d13dc","authorName":"Stephen Cleary","authorEmailEncrypted":"k/enApw2Y6yXUJC6skx9pGFR+ihaPMyjf6dcEuTD1OjcO9CwquKzXHSJYiYODPVqDVe4TRtQ/yAFWlbcl14HXQjas1YH3fJsx53pGGnC3KY7ow5nAX6v4Yilz0fMeYLobvctLKuXP4t7DUdDJ4NOGMeZ9PsPxBicFzZzbgr52//Ho0rxwW3ONyAzyCXy8afnlKcwYrQfOm5bLv9egflQ8c2sg8OnMdgUmNf841mjpps24PgRsQamMVsy/U+yczyYLLB+scb4JMKhKsEhyMnYCj6LGBKz1sQjKlDRZyjhPaG/yfO2rLD8oHfgtVmyz0x+KK9FBSrRjSiDV8f9F2rPlqTQeBVXX9n2cIoqGJQWPlveL8R1HtkwaPD5YMrRE8Odnif4tFLHoGjhkAsoC1kZW8dhK3OCuit5Lu+EiD8dcrhmUHnayu0tzi2xzWDqGwA5L4t4aACi3Hlj6+IrhecTAjTho6iBAtJaDnnETeGrWCmoZvmsQvSOk+0cUuNXSe0gMgpPaSqAMmyZMiHUPqSV1vo7+3kj1st1igixP2vvLSHz6iL9OvFLwlodnOCyWLVcpyUy9LkgqjVXrWSARZtIONF+BcorPeZerEWvlnbCO+d6+IvliwuGoyK3tQFvLOzi6KeHYor4JAvXtJUnpQZcoGWOsjKdtnqQ/02jx6yQCdg=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"`_instance.Initialization` can never be null.\r\n\r\nI recommend that all consumers of this class use `InstanceAsync`, and that they all `await`. I would remove `Instance()` entirely.\r\n\r\nMultiple `await`s on the same `Task<t>` are perfectly fine.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"bc94b147-f774-3989-83e2-f9b197e733e2","date":"2016-02-12T12:13:05Z","timestamp":1455279185,"authorUserId":"disqus:stephen_cleary"},{"_id":"1bc947b8-9310-3c48-a3fe-32cde07c668d","authorName":"Stephen Cleary","authorEmailEncrypted":"eopADKPhN5WydHOPUkSX12VpVCxQud989usroE1bgXOtwu5JdyaVnP0l1dfTVczpP7OM4BkVH8ttYQxIZjBpkTu5e6igAT2PV5lzwktOr7eqNLq1hbrmGQAHsqNjPDhIKCDMyNXb4fIXzRWfpZ355OrLyzRHLuLHFpdi+oTITh4fJd7Xgp338XDN+UMi0qaSAwSN9IaWodMo/JxL01CtzmcMeXUmOXflvC19AnQvHlIkGmVXW1zdX7jORxLTlbY+vDwl7WkCwxwIMQNysdrIRGQ+ab9A5JVUTozhhNPHUU8Qli0fjDjcWSjBa8RUjsrjzo1v8w4tEYw3VXWirolm7K//2bRWCC99LwCEs2BmOI5NG4/BwilkdR4h7zrug1gOBpcYREi3/Dcg+TS582Qw2Yd7tF8byzU9k+yG6sM0Xi1LQ+2AOlTNqdsq9Mm38z7/VT2/NG+ach2QrMnKm7OfB8EK/TcufulF5C1rqXmHprvwVIiyQraA5u7pFr5yqN6EZZYhB7YDfB5CqANqvrJSeiT0hq5dmRNP2OZgNVh9+ueOayQ1A4KZ2fNUdRudLCRBOaG0v91LWQGHvwfRL6y21gtUTT7FbPY6h6GJEOYhGKeBcxw7PGG1V0sAoOg+duoDB+p6nYss0QzAI9PU/h39bUWn9gCJeuyjHDNQyDPgRCc=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"I'm not familiar with Android Activities. However, if `OnCreate` is an event handler (or *logically* an event handler), you can just use `async void`.\r\n\r\nYou should never use `Task.Factory.StartNew` (use `Task.Run` instead, if you need it): [http://blog.stephencleary.c...](http://blog.stephencleary.com/2015/03/a-tour-of-task-part-9-delegate-tasks.html \"http://blog.stephencleary.com/2015/03/a-tour-of-task-part-9-delegate-tasks.html\")","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"1ca0fecd-6e98-3792-8fee-b269ef2a507a","date":"2016-02-12T01:01:14Z","timestamp":1455238874,"authorUserId":"disqus:stephen_cleary"},{"_id":"4d7f6f15-cd61-39a8-974d-ac9586c3e720","authorName":"Luís Fernandes","authorEmailEncrypted":"dWk6D2NDdkqZJ8F3hjLG0wrRjOc7mn15OrmFG5HYhj9OOErSdYrGU6eS4OWN6at5jmOGGvdkdmJR8ZrClpmHcfmPE1Rz+cJK/b4OWFM8SkcE9SUvl8BiXVWpMKvWWdO+LAu3qeDU8D31FUvvF/JuYL87UJ5xALAEc3/zjaJJhC9Xkz7IQhwuZTUgGYxYHoIzBhVWOd/rJlo7EmsEZmtyGyHWK3uorRroG3IOZrPF5CaA1qKkVgEYBnZu+CTaoWervfmE5nhrylk2wvDJu6ycsIt0dVqnyYXK/8BLgBZrNTKzvvtx9+LZjND5q9P4P8ouBpM70IsJb5oLBEC+TYG3T5/DMDe1cuIm1CSMGM7ZSu9PhDe/IUBdY/mOyGwq38BJEfj2kJQl8kwOiiSLV578c2uI7zZQ7ou6y0vp6TOGuDzuV1qL9it2TA37A6po5I6m7TOzk7yyRIIO8NZI9g+H7Vylg2WVE8689rtKHC9oCxr2BDuIygsH4i5RzYXIRnbzb3/MbGIzTloid+VTM5o7XEPZt6WyJp45UvpovjXlbKYSshF5Riz80xGBK36IERiTqOeEg1F6FdUA6EKoqUXqzA+qKUM8DHxzyNIqlphO5t40cY1GEtxkeTqkR6+a+EvR3TakmZnB55ZiY33+D7a7YstbzI7H0f3jlGT7aOcFpFc=","authorEmailMD5":"f35449b8f0a5a8c3a4a3825517425881","message":"I am fairly new to async in general hence still being a little afraid of spreading the 'zombie virus' unnecessarily. on the other hand, it makes sense to call it exclusively from 'instance async'. Mixing async with sync code wouldn't be ok. I will try it later today. One last question: I do have some other questions not related with this article specifically. What would be the best way to ask those questions? Email? Thanks once again!","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"01bd5f79-5052-3704-b094-f58f286d13dc","date":"2016-02-12T13:20:03Z","timestamp":1455283203,"authorUserId":"disqus:disqus_IUwcFx2IkQ"},{"_id":"bc94b147-f774-3989-83e2-f9b197e733e2","authorName":"Luís Fernandes","authorEmailEncrypted":"kb2kYEBcPjD4i7GX13j214VCWao4ntHjShV2FkcWSYmdtk3ps0CMcIY7fmqFC3LCGoaAb3QIol+YXTjaCgBp151yILP7ci9egIpPTZ0e5ShZ/NkeRXisMGaZ0cmdkqC08kdo8zwHn4SS24yG7X6SJr/fgflDOq5C5iT4ngQvYoc06xy/T9Zq2RIeTa6i26aeedG+JXzOUjHu4Hs/P6KIJqyQyTSe5YkcOQ7qeCiLOIMDS26y7to5MJZTmpVJ4oUDnRLw+ETQVIfjOIjmQ3PwKzxC1u9ySPuKZ9PBUoK/whTXE02kTovI5IH6Gf7hxd0YLbV7VCGz1vMduYa1gROVIyssTtJzE47jK66ppT77hCEWpSVDHpbOMrWYWUx7ZBgz5GN1zu+DO95jcOAwJ0He+Q0AcwOG/4K3Ig1eIk6djgOiheI9qP9M6iGX2kqCAcdCNwm5bHLnol/1PLnio/33fOSNRcYD9cqu/eBO52qg9e4uqNCuj9lAaroZNkEVKWt5CrIhUxbYXeiuciZaJjmf8G8qFdcVPfAQ3+/3LEjU1ZEulwwh+NMR8tnjszNXrOkY103/s3AJCnleLBY1goh8A1u5ZxgF2RYKu237Qhed1NzR/10i64zbHUAGbT5x+MGxiD0US5Pj9n5f1wd3E6r+sQ2TBrWs3kozO5Do5DBVXxo=","authorEmailMD5":"f35449b8f0a5a8c3a4a3825517425881","message":"OnCreate is overriden, so it's not possible to make it async Task (async void doesn't seem to work).\r\n\r\nEdit:  \r\nJust tried it in a sample project and I believe it's working with 'async void OnCreate' + 'MyClass instance = await MyClass.InstanceAsync();'.\r\n\r\nIt also works with 'Task.Run', but it doesn't seem needed in this case.\r\n\r\nI got some questions, though. Since it's a Singleton class, it's expected to be accessible anywhere. Do I only need to 'await' InstanceAsync inside OnCreate? 'OnCreate' method works like the 'Main' from a console so it's the first method to get called. Or do I need to do it everytime? Or perhaps expose an 'Instance' method that just returns MyClass instance? Like so: [http://pastebin.com/gXfutUZm](http://pastebin.com/gXfutUZm \"http://pastebin.com/gXfutUZm\")\r\n\r\nIf exposing 'Instance' method is a valid option, shouldn't I check if 'Initialization' is null? And if so, would that be thread safe?\r\n\r\nThanks!","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"1bc947b8-9310-3c48-a3fe-32cde07c668d","date":"2016-02-12T01:43:43Z","timestamp":1455241423,"authorUserId":"disqus:disqus_IUwcFx2IkQ"},{"_id":"989b35aa-c8b1-31eb-9150-c7ae2aa5f3d0","authorName":"Stephen Cleary","authorEmailEncrypted":"ZVDstlvvzsS0A8Ow6p8P7PMS1EpepoAtTBXA5m6K5BI2FWwMgtTIWw2J1uJYc13nL4RRFNiBSaK0KWDOSfnHEI8ip4UCTt+zAYsvucjWSwqmDc9WhIqhBSN+k1tntA+fSGHrHMnlUMFUgykOw0X2m+Iof2ahLenMFn1OtDUO2ojiAjldBERQ02Cbg1/R/UY2kMVxTqqGOSbfW7oKcA0A6ctYx4rc44T6rTDm4lxBzWaUmaQw1Es/YceM9aouZNYt9t3sXNqO3FlkfqKYMoRAycA+YbeCHqvAN3m/GkadYMOKT3oGMimFkqou1kB/nrxsjcLGAC2b+UBbL4zomc2f7Zz0rclg3dAVfEgYRtsGColCER9bHHgPKVOiMfXAqtenycDA6QTyYiqE+1L8wYIBB3mxF0B0fJTYFaxad0z9+zdvlQ9SRZh2zST4tviAIkiX9efFf0VdZGugbc2yNKRIE7XZrVuZ2yFvwW/MkNP5CKica7syd+oABpclQ16bsqQDM5RMjuJZpyCjxPr2Toues0iOjxh/nll9HnBvvHPLCRSNoBiWY3oQmki+Xto09zJAUtOTHPcVjJQFQFptPF79vaZZtNwUrer6uFflZ3NPSKg0AGJz+4FaSO/BhGqJLvVjD+9XWxFGXhyfT8OKmZv/SfcZJ62L/CNyjv98Rq4m3uY=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"It's true that async grows through the code. In my experience, though, it's far easier to accept it as it is (and allow it to grow) than to try to use something like sync-over-async. Sync-over-async only *seems* simpler; in reality, sync-over-async always causes more problems that are much more subtle and problematic than the problems you have letting async grow.\r\n\r\nThe best way to ask questions is on Stack Overflow.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"4d7f6f15-cd61-39a8-974d-ac9586c3e720","date":"2016-02-13T15:06:37Z","timestamp":1455375997,"authorUserId":"disqus:stephen_cleary"},{"_id":"e92caab7-e371-3557-9f41-96f42be341c8","authorName":"Luís Fernandes","authorEmailEncrypted":"olkTxWGmRr12A880jSBqLiRBrX6RUVme3/nl4fTEgH2EDq6CrkajWW/n84DC25+VpAQL92uUNm4WZp3lsC3fGyHnlQC8rIcnescvJhG7nbUxlWZl6fl5yXKV8YYtDIINT2vrTo5WRLdrw1U3v/PU4qUAbdtRcJ6NIttefJoGJ/uFkb9pfgyLDT+CkUQW3a7N/bVjRzw+LKg/RyctcqoKChJ5ekgeJG71CqqhspG7xh4IxssGjVTn2ERt2Bb92nRo6+lxO5zjrK+OFACYZYJ5Sp8Lva/k4abweD8VY6XB6NDTPYgKA6fZTRY72KgTXYtkLlyoj2xLpc9mSkER01wBFoQ0fb3CUTl9D5Goi4ovKGqfT3D4cpPhHxwP5Ulhj368fi6KQjOl0tq9ZD739CSGpKx9Xb+JJS5YvxNNAT1PM6OQxp/4suZQUpcjwt1UMbxH/hfzJhj0nywsuoYlF54zXqlHWvIbgoEXuGg6Ib+CVio6NQ6R1eyZbEhLiX4k+RyEEeTepyWohYRfZHNVJcfwdsmGQoVWrFP3U6pepVmPmR/UYguSO7xAGPjccS10FjodTfYr1hdTDkhud+sJCihPIFSQ9o2zE8WaXFeNm4aSVEvVQkVn9J81wrFfssky6SLeXNy+V1r0vOntHZtsFtohdAQXvdqy+Rksm3DJu/1T7HU=","authorEmailMD5":"f35449b8f0a5a8c3a4a3825517425881","message":"Will do, thanks a lot :) Also looking forward to read your book when it arrives next week!","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"989b35aa-c8b1-31eb-9150-c7ae2aa5f3d0","date":"2016-02-13T15:43:08Z","timestamp":1455378188,"authorUserId":"disqus:disqus_IUwcFx2IkQ"},{"_id":"1ba9aa9a-b984-3cb5-8ab5-be0ae5b17a22","authorName":"Luís Fernandes","authorEmailEncrypted":"qrURgk1+FUMFSs1p+VgpBJMjUKUx3pzpYIA/aYwBtq1vOi5vTb1apN/eov+vvedflQlJEuYCDPakP9/eP07mXImdVIkfcfwfYnIQcAt35hSbR95cMB5zVyFWiM8iAVUhiQqmjeixG+Qh8O2NUyrAaS09ESwmVGoLnCu3MIEj5mvJKalTF5Vuv3B1F+dIQCEeZvO2lxKtbXzdnDz9wvDClIakAO361Qvet/pt6jlY5MjTujZtGFhl0+AqxiSDS5/xxf3KbnzcicHf6C9/AmO0xY2yuEQR4OYKUaR/bb44roUeQdC0t9RJkxkJxxhoijfe3aHeh3T78rRFt7mefrkv+r88K0M50b0IEyoqhxoBVgQ4WgXTtDSBskVkIyAReTLlTPV5ftWSmzBhmzsr5sPrhuTa2YPz3QEY5VQaLfHJtRCz1+vqo5UGT0xpMWpzqJGd7egDFZItzBaAIAovMr+NiKxPwr1+nlOuGJjDkNC9xrZso9O2c5dBbbuhRBAss5w8O3JDuwZhL2RSi7tuLEsd9P/Ph3/q59xj6JXFIWHCyC+ggegb9nWTOWek4F5ZEXQ5Qq+SbzPEiq/gLI1aeYV6VLYisnklFxCZAUXT8DV4u1lNQ1uA1byMDiZPwpG3Vl0rWESPmJPSSylU2S2pfxxNk0AyRWJ2IRkRFhuU57npv9g=","authorEmailMD5":"3587d6e1f69adc340c89c46d11a95038","message":"Hi again, Stephen.\r\n\r\nI have tried to use [Task.run](http://Task.run \"Task.run\") to call an async method inside an UI method that cannot be async (returns bool but it is overriden and thus I can't change the return to Task<bool>).\r\n\r\nThing is, the async method I am calling is invoking a debug message event to which an UI control is subscribed to in order to display the message to the user. It doesn't work that well though: For some reason, the message itself is sent to the UI but the list view doesn't scroll up automatically in order to show the new item.\r\n\r\nI have then tried to use 'RunOnUiThread' instead of 'Task.Run' (see [http://pastebin.com/VgakKcy4)](http://pastebin.com/VgakKcy4) \"http://pastebin.com/VgakKcy4)\"), which is recommended when doing some work which then affects the UI in some way, and it works!\r\n\r\nI kinda understand why it works this way, but at the same time I really don't. In short, I am calling an async method, which doesn't run on the UI thread at all, inside a 'RunOnUiThread'? Isn't this paradoxical?\r\n\r\nThanks again!","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"1bc947b8-9310-3c48-a3fe-32cde07c668d","date":"2016-08-12T22:42:36Z","timestamp":1471041756,"authorUserId":"disqus:disqus_LfgagoSDen"},{"_id":"b2642eee-baa5-3759-a12d-db7a32869590","authorName":"Stephen Cleary","authorEmailEncrypted":"A3Jkzm49Bi2Eb7aVF0eSd5TXu+CEnMAydjxsFc2Xw+uFyP8UT8SUnDfe1XRq5nsTCsZJYqp4mbo79eje4WBTQqg4cfpNPSj31iIxbn773Z9xjtNX5NBEON7IAlRsvhRUpHfx69X6XrmquXWuSVAUEFmPXUQ0IhmTFF0uXKnWNmDWRbTacRPvO+TmogsHuLia6ovWu9Ba3nRYGCbkTUkxhdFSzUpESYb5pQRsxIxlg+xMbaLmTiFQjlBWKDZ0okFqLajYMg4v/HnFeOY4sTDzJ4GyM80NvQ8KeN1S9lJqsKg+JKnTIKnYQFcAVfVZdGp+UGqTf0KU5UpvXrJ89ZHCWElpmgQaJXbeLfYThoguDFwqAbfL2dyCCR/Mk/Ko7pULXfd+Lq6vC9XHgiyE3ANVwPNb3Qc9HnwtE19JLFJQH0DueTJADFUZj8MBVbnMibW/Ya/sr/z/O7UMxWHB6C7sVrPM8it0+b8BsFBe1qyYk9K09Nez+Ijvm3tAWgme8t0vlC6P7GmUr2t4wTshRUcHP3tPsk/gL958QGUv0PptrcrcMESVJ0l67yB1rbuztSF1KWZX2/S1yFLp9+UrOENqixIHIRLkItjdQbwFMI0Pn/9zlz1hR2zFeSLodHsrhmbi6olqDLMq4Jsf2aX0FXZls+GWTUTPx/aSDxlovFfRGJk=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"I'm not entirely clear on what your code looks like, but Task.Run will run its delegate on a thread pool thread, so you can't directly update UI elements from there.\r\n\r\nThe best solution is to avoid the sync-over-async in the first place, e.g., by making the overridden method return Task<bool>.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"1ba9aa9a-b984-3cb5-8ab5-be0ae5b17a22","date":"2016-08-15T13:19:16Z","timestamp":1471267156,"authorUserId":"disqus:stephen_cleary"},{"_id":"b7998fe0-9786-3cd3-aba9-517de21925f6","authorName":"Luís Fernandes","authorEmailEncrypted":"T0fw560s1IQSnjvdFgyI3eDCx3bFNceNFfl/e3ocRs3gXjQ9RanCFrlCoWx9sdquO3l6LF49x4iFAdfsCb+FlrdPaDetE2/xVTSYJwqMypDrefon8/bao7keqG4kIqq74UhYTnaISoLirzVsdl2zssmsiVMMfRKatznCxmv8GsICQzlyqT+6EavUSFfTrInbTxeXaZArmWnxx2sOPW2CZsnP2fJF1wzTzASj0FY5gPEBDmpn53CV/iBxcAyR/aK8SPp/jI4S2QK1S6svXCaTEEi5c17DCGuVlltPUaVLld2a5YyzP9m6B7cOIHvVvsrjCHkmpsz8tKX+4guDX9n9Gbba5deUfr4sw3IOx2gufMqRm6StdWjEQ+qbxUp7rfw+rUS3/scJkde4sbVt8fzRiQYrrEEGcz1dzrGHYTx844jaqoZT2vXkFBY8QzZrWB4GENi98MufQnKmSMlf4tFUIDKLnglLMNGXi6TaJ7ANDwHf+42vOQHXxR07NM1PDv/qt8sQH2C/9eTQAXIMiinYoJk+XwpqXhyHzl4L88f54fu4Vf14l2it+KVMYWZ8rxeymvOIEyRbl8cqhjILpsU80F0M6dv1GpXSTa3c12rZ7Tgom6HIpG5Tv7BsfUR5ZrOVtQMRF0GYC4tncmAGnmu2mWBMEJEpFh3OQzGZElhzxk8=","authorEmailMD5":"3587d6e1f69adc340c89c46d11a95038","message":"Ah that makes sense as to why [task.run](http://task.run \"task.run\") doesn't work. Either way, I am not able to change the overridden method return, thus using RunOnUiThread instead.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"b2642eee-baa5-3759-a12d-db7a32869590","date":"2016-08-15T13:39:12Z","timestamp":1471268352,"authorUserId":"disqus:disqus_LfgagoSDen"},{"_id":"9a8855bb-931e-310d-89da-bed3af784dff","authorName":"Stephen Cleary","authorEmailEncrypted":"cEjrgxJ19yFYTJiR1X1i4eyNinin/cNcgqfK1tAYAx/1gIA2GB8GyzZ7Fxfg8OrLML/VJQJ/eSQ2JPDkZVI0fCkHfL6mvOO4LsBnv2kdEgrdQsEzP9JYx7OzrBMu2PLRVN364GCaCaf+AevLwkZ9ikwb/qzUoUlU8Uvu+RrO/vgyb4rFBfz2k7up0TD4mZukke5FtmXskmKL4x5ik4vCI+ARlwNlHbnex7nrZN29f5AbYZs3ili24Q1Eb5HBn/ZVqPqWg+a8zECam913+g6uZr0cvZxcai1W3sh1Z2YorfpNP1uL/DdC0p9/lrZw90pYM7D9BW+a+YUtosT3dTAs1QOmaEVo0vW7QhyPvVyBn8s/mU1seGCWvMGjlwX3rMlAvnAYW57JRM6P5G2YAJodPkvdzCAqDc0BL1zWzs3noLNcGmf7Fq0r+wdJ4s0ZMj1d/DI4Lc4U+8JLMMvs3A/Yqh4kwn66nO3FXXuLvwYV3jaBraLczX1uacz2Ufgy0Nb5/A0VpRnV/Uud1lxEazr7TgbJj8+sJfJUOIm1SiW/AjTTYMmfSC+5K8JiesBBjcXFgwEwCYB5jTzTNYMyHP2NsXbFMs9qf9C/KYtAzZ6SCDFcDh8du/bvpS9X8UWZ+Rs/5Kei2fw62ky3WEvYf2cMHkQrewGcW0FZ0lQiTlCeJmg=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"The second one creates an async void method, which you should avoid for reasons laid out in my MSDN article on async best practices: [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/jj991977.aspx \"https://msdn.microsoft.com/en-us/magazine/jj991977.aspx\")","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"c84c00b3-7d98-3bb6-bad8-709fed19a852","date":"2016-10-22T13:13:02Z","timestamp":1477141982,"authorUserId":"disqus:stephen_cleary"},{"_id":"c84c00b3-7d98-3bb6-bad8-709fed19a852","authorName":"CodingNinja","authorEmailEncrypted":"YAvrZF9PV6B0OIL0B8ZwC4OQr4RJVM2DADGgvps/WL5IovliHR0AKNmRZNXbJRASIzUG8bjzQXxj4Tv7eiCUq3u9ALO0PD82j+PQwu95Zb/DUcJpnc6xSpu5z6YpU5/ISp2nvtn5BbQT2ZjUlJs2zBlBTPzdO/Ik2cYIZzWjeSoSzEwd3c3eHcAvPtE3iuajw7I+NduFJ8nFoGBZbtAGbsv3IH32tUSsNn8ISJM9YzmYVdPKJ1b/f2cdTY248Z8itLO6g+0YqkU+xcb6hS2oJTX57aR8SAwociPO1173XHb8AxIG7ERAAi3Wmz025cr5vfkJ8vSyD+F8eAKpHHHkNfqD3XR3KyIKHv68RaAraBGXW5ydbRVvNYPqH1baORDOjl0FVmjCMBRo6djdDddAicfLUCJBnn83pgFgC5+WsFpLlif2zflmjlZcWWQqner8HezgyDXzuq4lkCYc+Vz9VPi6k5CMGmeLAZzOmFoARVYxZVRxgcQIDBP2gVo5uy3NHz6Fapo4WtVSupi8GN1JqHliJnWGATtQji+33XrVFopdfNvTPV0aLevCC4gW3Yz57tIXUsxyuU1dkf3mUBGH3whPzPKKCaoYua0rdean+T77HBDSbCGuwtf595d55PRH3LlEGKeZ5BUb4uuj82Jq7yeflMuCz3YDvk3YmVy8UN4=","authorEmailMD5":"b60febacc3cd097b7b0595fe78b5bf6e","message":"Hi Stephen!\r\n\r\nWhat fundamental difference?  \r\n①await Initialize();  \r\n②Action act = async () => {  \r\n await Initialize();  \r\n };  \r\n act();  \r\nsolution ② Avoid await keywords, it can be perfectly applied in the constructor?","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2016-10-22T05:23:35Z","timestamp":1477113815,"authorUserId":""},{"_id":"30a2293a-411d-377a-abe3-f3aa0c3c3954","authorName":"Stephen Cleary","authorEmailEncrypted":"kw/uxzNzjCByoVbeXVmVgfO4DG5iuUp7aPnvmjtv0T1QqiYm8WBag0Li+MiGEG5eRZPqHVCBvraQFd1Me1s/nuN5nnBXTs/mrrGyh8JFYbl2g1UpHoET6pTkDps9PkfF3LLoCyLV5/zZuOh1miijSRRrpLCKccKizs4kktH7+0qoMJJXWVkYmsPvhxB42vLbO66qzcE087dKYS8QjRuM2EjO6ZoGRPTuWbBLHFAs36280lJp49DVdKorVfBHa/ZppYB4IZT1YVmuqEtgeRSrn5t7nZ0NWj9QW5sCiyY40rUAz5zDRZCA0wkO697GIHMcYjK7b2OkiDUHb59fEX3xwwjxe75850F8ZsUsDgl12RNliL8H3awRNwFIZkcZXpdqYve8jT8d3TYvnB0OlGZQXJofz0/5mpS4aGSN1KihpiH29xZjHSxar8M5emgqay5XXrhqsB392DnMW4G0yefXZDuTDPOe0yZa/cQnB+ZafIfi6qYwztwsdTOveDVOmFGeLh4/BUq+Eo3i0/ZdIjRrJ86QT/xAMDG8a4anufnpuiYfcUpm4D9dXbothPprAnlXCbU05IJLQkq7pl20BhSxVw319L0n47q9oqlXnoXvXImJwoTZcjtayna5WAnzuiycn4NQTOG7CmbtltBXXdqI5aEv2s9V2cegn4/H+tNfcJs=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"The factory approach uses a private constructor and private InitializeAsync method, so the user *cannot* get an uninitialized instance.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"3b98f94c-aefe-38d2-9507-d42ce33ce71a","date":"2016-10-26T21:26:35Z","timestamp":1477517195,"authorUserId":"disqus:stephen_cleary"},{"_id":"3b98f94c-aefe-38d2-9507-d42ce33ce71a","authorName":"Eric Rey","authorEmailEncrypted":"Br566ORYxQ8krWU4qadsNTD4rQXLirNdiPxBynPyReeWbd/85eRkewxCHr3cyx6YVrSl/kijtQRt7bqFIRZF2yYmFDPMKAJpJJOBPw7fIfqM72t0jj1rhXMqoUWFn6Df5ndJmgFLwfM9hloCvK330c4/xiMcjuBWqKpkntzW+YhvsU21HTxLnBxP4WqD7yDGPkVDf5F0SHcZqpCbIqrAuFU9rgDOypR0PvIj5lDwts5qa1CGphD1Lgw1MQov0JHgA2ljwSx9F8PXLJLMWLCL/EnxzxSCi02TWixPU31T1x6DAMtG9L/gWvZ0rtSZEG0cj5PJAX08Y9hTV5b8huU3ZspFBWSSMmwJSgwTKPA5mHiE0Oo+uFG5laHjKE1cmcyEuKom00nIRcDvHS4nNlo30mqXcqf2D+hFGyYBvQAc/2dwvTH9hw4RRDC/cCUpi5K/esgVEdeD8A/wk0VW5vx0n6gBwCgtvkg469z0/LSHVDzitUS/3Y7SP3X7WGNFDhX9cuKko9dnw5IIZWwaplME4U8XgWYI7TQYIXm71P0iE1JYhdXMo9BMdwqfxdiOVzKi+l1HU1iBvqhadiLzZRD6/xKCeS3rg9ewbpxMcSwhuXADX4r9ivhmF7YbbZnwqaBghT/b90ZZrVp6TAz2let1Mnq9DWRu6sa0F/PApxo6CEY=","authorEmailMD5":"792f0ba41abefea3485d6caefc678c90","message":"But there is no way that we can trigger the initialization code without calling InitializeAsync() explicitly, is it? So there is no way to make sure the consumer of your class calls the Initialize method after newing up your class, right ? In which case the Factory would be helpless.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2016-10-26T19:36:06Z","timestamp":1477510566,"authorUserId":""},{"_id":"4495e248-0c1d-3968-8233-3c0ef2d6ca46","authorName":"Stephen Cleary","authorEmailEncrypted":"GJUq0jdDMbo9TFQFuneGZUGXcAnEq/ITUw4BXMB8K/gU+3f2Yj9AOsX7+K1vprZzIGjOpTcNChVCdjxPR/0SwzqFsS8hUJpSj/i34HmSGO/dirUr4mDscBysQ2Lm8sgzDNgjgehuT4vIr8fwZYOnxkfYYv98u4Kt8LMXO8mAKaNrpkAi7tekX1KWPxCb4ZMuXSq8h66g2g4ApF185T2MNlEkMoH+Iq2Q/RCa2oXd6ckhwpS0KSsnpUQLZZq2Aj3lVDj2hBAbPkH8a+Iqd9WqBvIke7gF5RrC0umFfPQ5o83ovYS7g/i0fkF1deCBkI9mUfoUDRLrWVYQXBBLmDXz8zmdvBd3uHoUquCnNF6QTJVEkc0etXzyGOHNsdLWsCrB2yAuxMflqAs2EHMcgfSTu69tEIVpdPAWI2cbFV8VchKvFxxH2Mb2w3e7GKqtGpu6XhvMSrVY2Jm4Z4hLvI/Du99eH55Ei25pTq8l+VwAz8zzXvtqb8t0b9oCdDojl5lCq1u2B+kSMYuI3mzYGvMEkXuEU+YrnTqHK/hHBH31k5uYqDn6UZNloEMq62jUhNFMp+0bwKgWWkFvsRY1ImIw6q+vqFSekpydl9avCV0OxRUdRiOlOu/qTEDoAVShT9tU8sDE9dNZPlnbBRUn4Lgq87eHuUSbB5q5ePmdvRYXhPY=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"The factory pattern works fine in an ASP.NET service, or if the class is heavily used. I'm not sure what the problem would be in those scenarios.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"a904c85b-e4c6-326e-9ffc-1fdcc6f722f4","date":"2016-10-27T13:14:41Z","timestamp":1477574081,"authorUserId":"disqus:stephen_cleary"},{"_id":"a904c85b-e4c6-326e-9ffc-1fdcc6f722f4","authorName":"Eric Rey","authorEmailEncrypted":"fMULBVI1FegFs9XNAcNLs+sj7ncD1AysHQPYHgav4lfJKWB405tNsbZrkThFO5pIq8oWUb2uTv0bEyYY2Q/2ywCyIU2jI/7j1Fy7iEGoOqBiNV7YQvZUAHHb4B5UuY6EhPIdMEe7v8lp0M4MFiF/Yj1AWiyxOyYX+q3xQlXhhoLeEXG50zWiuL67nSJMe+isvbgnTY9yCXMuFy+O0UG/CKuM3XLq/XnaTcewHSx9dLgo2gPfgC0DzyFpszU/wUodFhdi713VQ8lTE1uanru+IzSVg3knhpl1EqMyFE+gtEk8wIRAVkY33q0hiMM2vWgCCMSmy2wJYIEeEuoklb7Wg3gCcuU7mK1kpbxIHSrHj1QOMyEAN25eeJsyTucZQnsyM+SNCrxQ8v6LHHKEESs3TQeQHFDJ1mugj2Jsgc3Cb+uaya5z2ygshNAVBoprbAWXQOW7bTYAccDG/DUYKkaIZYpYSy8dDrBFh9b0hRoT+zjHJZyNYprrwsntzR0A/swtwAQnYjlxVcb45pQNgil6u9cEqsL2l2vKGETAFPA6B1Et7ZFGjcU5yKGBO7NnGZdLEdYbWWadB7YBHmZFw53D/gdA9sykv8qQ+4AzdAo0jL5iQ2OrkGif3h++n32ZioHQk6nw9bG4rgXHHPh0I5t2IqfH5MHu4IPEXPOASyopkaU=","authorEmailMD5":"792f0ba41abefea3485d6caefc678c90","message":"What if this code belongs in an ASP.NET service? I mean, if this class was heavily used, doesn't the static nature of it is a source of trouble ?","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"30a2293a-411d-377a-abe3-f3aa0c3c3954","date":"2016-10-27T12:21:15Z","timestamp":1477570875,"authorUserId":""},{"_id":"85280297-64c8-392c-85f2-76133e753224","authorName":"Peter Wood","authorEmailEncrypted":"XG+qjf7U1SMKBdu68EUAuBnEHuWAqZt9CCQv8fznRkcp2iPoLrMKlpeAnQlKCPDg/CHJyhJvploZ10KtCBirso4RgFIwcuM8t0VT244ytJKSKwfofpYW8PLnirqA7DRRVOs34bPmLvrBw41oAdyOdBPMiaLBedIiqXuqDmWE+x+D+QE77WWnVXRSfeWWQ3xbeDrjBqLg7Y57zwtvKhprVsFXaZNGiY+xgnBD8OI0BDbd9d6cQaZhxh0MNx0kmTRK7cr9Rkg+6BljeEXn2mU5oLHIv/dTNo2X57D+nGvRZ5W8bCmuHbgrl7VD6OCJxpgCc5n7GmGMWLxfRkBkLkaiSoLjwGdN9HanmCnkFvMDH5AynB6NoVH2FABg1BvbfYt/A1rblm1Fd//DWhZuZFcWBQI0SzYcPh32XmPm2ZPuW6iFSPT0x71LfrRrK6KivK0zX1YrWkfgYKMImk+ud0GnGNDdeb1rxuBLrNdIHDcPIN+ePzmb2S3uwYloKNw35zpx68e/pLK2MkfoMfZwxROFUY1Wc85Alc1JS6dkejbifOLDFs7jWOsFSzZwdmuPTcJhNDDOrAKaWzYyQqjLdFXhOpWupjqmoxnNW9mrhRFNGTeBA6d6t2G4QAYF9frljCSS6vhxg6QQoYXlZf0mQjr4oOyNNXKlbxelBZkzO7RpH8g=","authorEmailMD5":"4038ca7cc712abff3122d11eb5975b68","message":"Hi Stephen -\r\n\r\nFirstly, thanks for your series of blogposts on this subject, they have been very helpful.\r\n\r\nI have a situation where I essentially want to construct my object synchronously and use it as soon as it is ready, but I need to call an async method to complete the initialisation. Is there anything fundamentally wrong or buggy with waiting for the async to complete? Like this:\r\n\r\npublic FederationMetadata()  \r\n{  \r\nInitialise();  \r\n}\r\n\r\nprivate void Initialise()  \r\n{  \r\nvar streamAsync = new HttpClient().GetStreamAsync(_federationMetadataUri);  \r\nstreamAsync.Wait();  \r\n_federationMetaData = XDocument.Load(streamAsync.Result);  \r\n}\r\n\r\nThanks!  \r\nPeter","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2016-12-15T12:52:54Z","timestamp":1481806374,"authorUserId":"disqus:disqus_lxHWzNFSia"},{"_id":"d6021016-aedf-3195-a7cd-bd8f3763107a","authorName":"Stephen Cleary","authorEmailEncrypted":"AzsaNe+9AZ8IEndeabfkfpXHpXJMYo/QZJXpwK8rhiLBH5ytZ9l9/6SPCX7d+bUbKk2+sWYcj/JI+W5OcwHtmIThlHjyOVvTduogqdylYQYIa2wA3SjcNkBdezIvaTuBA6UbrclxMGBHtVe7rfJTzCCKQDl5j0ghqeIR+oA2cDe0IyR66Ber/xRYmXUUn1s12aSobjTUmlaQ0bJC1XaM3OeFP9RMDHSKRRWjD6kFqaUwBmBY4wKGwZhJPZHVoRL1akUNSTfaWtDIojghSzHCYoVnyM/cXCqVVNvwLyHyk6rf1XcRWWbma1he0VoFrX+wOnyAd7bTGF0jg0C5GhRf2DudSZVHvhKh9urrnnBPG6dt+QLKwP1M+g7wxIqwOUC+I73Jp8tjtUAW/eIjPhdrn7JLM2xreddvSBMcWHJ5ZnmYTZLfX55NrsVCGo51RyuDK4sqQaJby4Ofs6WHLBjBjSdOaaCMjo3bBEDSaG3jvATo3+OeMesvhMN6HIJxmKnklRq5ArcfK0tvLNdfvhPdhv+SqmwTIek+7jjyaITXhLAy9buZ2iI+kF1/2CC6El1o0RHSJPmRTJ85qeZxrihey0mhBgfqucCJnxfaKMRJRLA1UdD+3E0VPvNwiMdr35s2E4iL7F6lXuKzbyXIHcyHcO5Zmn1HE47+6wUu+RuUrQw=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Yes, calling Wait or Result in the general case can cause deadlocks ( [http://blog.stephencleary.c...](http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html \"http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html\") ). There's no clean way to call asynchronous code synchronously; only a variety of hacks, none of which work perfectly ( [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/mt238404.aspx \"https://msdn.microsoft.com/en-us/magazine/mt238404.aspx\") ). If you *must* construct synchronously, then you should use only synchronous APIs in your initialisation (e.g., WebClient).\r\n\r\nIMO, there's a deeper design issue here: if your initialisation does I/O, then it *should* be done asynchronously and not synchronously. I wouldn't try to make it synchronous.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"85280297-64c8-392c-85f2-76133e753224","date":"2016-12-17T13:46:41Z","timestamp":1481982401,"authorUserId":"disqus:stephen_cleary"},{"_id":"94197bec-c2fe-391c-a482-a74d21086be0","authorName":"Peter Wood","authorEmailEncrypted":"izMl7eI6nJvlsAN00EetezMrlWu9DKb2g1XMDfgQVqiYz0GLpbvCi4t0VUHyefcjNZ9E8o1Amkw6+aYcr4TRgUsDaERVmEnUIP0/ft1jkH6DF1tYyMC3Yd1MCJlVOwMIIJJF5OJoe+cWFI+c1D2KzRsWhBqTuYCmPlLHfIh6MJIZbSj+ircJHs7JAopFrw+B1YoTKwLGNIdYrXY5A/Gp6eoU/378W6WKqI0x62m9WhBDkthNDft6tZ5R9bfs0jcHpmIp9RxusdJIRKxxRI5OfibkYQk9niRNPDjjZOiy3YQgdp/TWG4Gkl9bjEqPkCt03nI0imWfDdUpF5xO3KwUAzlzXbGVgOqbMn02GghMQtoRulP7pt90px+FpBWkmoX1TyziP3KjTG/gtbx4Hra5+2iQfa1T+pepaG3USRC1xwm9P3fFAnG6GAPMZWCH32IhQzihhaBNC0l3rytrEhx2VMmyTclbEc4qW+tKlEfUxh08xXGWvOAN2VGpUqQBNl5PLwLZC6DAEQeBM6sBHjUuMhmu5wBIXUMkXYjcXcCa1ASUw2QuLjaKJbHnjqAuzXafMyb5Rt14GPhrekIOdwn/CsP2qqxFgvRi2HpVAkrTb+oazODfc+fK4cPgcSlEXsZw2hEqKUvdt+3/Tyxt9Z+aHa0pNHWbFmjbXFTBBKZNAe4=","authorEmailMD5":"4038ca7cc712abff3122d11eb5975b68","message":"Thanks Stephen!","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"d6021016-aedf-3195-a7cd-bd8f3763107a","date":"2016-12-19T06:42:24Z","timestamp":1482129744,"authorUserId":"disqus:disqus_lxHWzNFSia"},{"_id":"2215ff0f-ddea-37ac-9c84-422164718521","authorName":"Andriy","authorEmailEncrypted":"pPboVOBPCxXLnRenZThvGBDDQqfDXRlPzufQkK+QMZeKVdI7S5YAoi9lRrmTvucu6q02xT/LjHmKFXh2GlfOHLQx6wr591CZoLjFw/IP5w3aQdv7uw53r4W/X7WTqsv0b8msVTAirVmsxqXpUPHBKxX1J2EsTv5VZiKn0Vm30zCDAmugxQZwBRO9zLvszd6TzMM8coSF2uQRvZQRFEcdeVK3t3UHMsXRCForEtEp0bVI+yK2SNzSvccF1yULp01Pvoxh9w88hRuk/RMghaYoC7YNIa6xjneCtzy8KUwCQlfSIzWPM5b1kQpvXx0jKULcv8Vkc6LLtrqzsPdXndQFFFZ8yHph9O/s8I6XTudmte0Y2u7Ee1iU+fORejX/cGdZh7rB0TGwAFowwCgBUrgy4vb7zz5C54tna4yFgKJjdVqYcbTqTpxjl7lylMTlPbwjrUWVCuZQnIS8hNdY/S3rAhQ38YI8HDxfWtXPi+JFQRIP65/aUDQnfs+SsuF+w7KumFiussrA1aBwKfmMnMGyZWwjsoTdoejpyA0poUrV5wYTdbYgFua6WSakNoT9zR1qrsHZ3a9F6MIlDeJ1H8bdI92hsRpBDQw9ICClbJPVOZHipm6lAWZxpJK2Ky0Tzvz4Slq55BYZ54dA6rfY2ifd2nt9tz9uqM1HrYIREpg512A=","authorEmailMD5":"7b3ef8e67ee7ef1ab8207b8a51c348c0","message":"Hi Stephen! Can i use the following approach ?\r\n\r\n public static class IAsyncInitializationExtensions  \r\n{  \r\n public static async Task InitializeAllAsync(this IEnumerable<iasyncinitialization> source)  \r\n {   \r\n foreach (var item in source)  \r\n {  \r\n await item.Initialization;  \r\n }  \r\n }  \r\n}","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2017-01-25T10:30:05Z","timestamp":1485340205,"authorUserId":"disqus:disqus_xVnVZUEaIe"},{"_id":"572cb630-5282-3dc2-896a-302af474cab7","authorName":"Stephen Cleary","authorEmailEncrypted":"GVXjZG+ab/wVdCkEYAt72mzBWaEV01ZaQISJ6Aemc/oaRz/ivROwvxYsyD27zUJX6clPkoppd3Jp3mE9Zg90nUNBzhFLicqnadABlQ/bk0SR0p6nYzPFV8JAdD+4BOM5X+k51Jbw6raOdJ7PWcM9zTU7AOqwH9bzHw+njO4wab5qkwvLGQd/lHy6rfhCRFwdnyHtXsD1gT+Rlo0DO+/rTLybq6IbiJ2h1VYdGqQp23P7eSMF8z0+lkVci5KUgKJuwErT43b+wMzeQ6bar2HiRFUVdiEZMpkRVu1Z5YBuPSsmbzgkaboE+alJNA1n/Gx6jBT9xdvRpoE+cCLrR/yzDa2RR/I8SCEAN08A92VUlGwaqIX9ueIvCjF9Xmz13CY9fVfVwlmKPbNzHwkBUCwwjPTv7Zn2DRwVzcVvQxA7Qx71/HuldackjfmMmfMY2UeorA4PF6rtEQwmvuNrieLW0X3DtH4xLCzCISRq7Oo187jiQQB6wRwaW42u180FO5GKpoqSlXB9+XuhkVDtJfiD/ob5jHHMFimlt3tO1bsdxIOVBkOm2do/YMuPznVZu8QFXHNpCGqb0Chgdcbr6eVonst+U/PrYHAl3rsoALGFLnIXzzoNe0CxJ5j9v64kaXAudu0LNcoc6SHw9CikR4RhCSeIq/XyeFnTvBbPKWNFdrw=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Yes. You could also use `Task.WhenAll` instead of `await`ing each one individually.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"2215ff0f-ddea-37ac-9c84-422164718521","date":"2017-01-25T13:13:10Z","timestamp":1485349990,"authorUserId":"disqus:stephen_cleary"},{"_id":"69d2b49f-b5af-3da1-a098-e2b2fae237e1","authorName":"Andriy","authorEmailEncrypted":"BWz5vsc7UON70wOwcE5f+5jBjg72S8HSYXHge9aTTAbdoe40WnUwkTwFavyezxMN1RV2ZcsN1Scfhu8cAv0FXJnEH0960O6H4oRoYufQGQhjoBZ/VXaVQfHZzvhlVyxRWui0zsTcpRHp1s56aXJWGZU0xz7c189UyzzpzhDG6iKQLNBlJFYY2yaoIaIhTqyM3SVC4uDQT9F6BWVZ+Nm8H+91r10oCiRIEExZ/ZW7iJoOOK0bXRXn6uy85nvSS2MoP87Y93USix1ey4C2+ZKsEKvDk9CzpxRXKx8Z/zozMWo2YFoHZPSLHwzvaQJScFBNaTBw5FKdL5KskhSkZFkbgxziU77+BQznUGQmCm6je4e1hmooo3GuTwjHbG26OfJ8euxh/ZYa6qIwDcHBkPpq9ap296zU7Qpx8MhdV9XtyccjNaFHEmDR4vk5d1RY38XsON+WjC9tzdXMv90+aKnRid+lXdQrLqYiWClTNE7fUSoSI0I2BlC4YvcVw93BAS8tDAtjjNrqA2Vv+2dq6s+RUMuylBWtAjnLUcKdYV/v6YMuGE9TTEql4Qmy3Km5bB8+94gfrjEGHRkeS7l7zQuRRd2sVXrcbvFeNa+ECM5ZDuch//3xQ+TZQL+xpsivTEvEJIu/X/sg10UeQDqubrSIn0uxDKK7WNbZjyb2ocqYFQk=","authorEmailMD5":"7b3ef8e67ee7ef1ab8207b8a51c348c0","message":"thank you!","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"572cb630-5282-3dc2-896a-302af474cab7","date":"2017-01-25T21:50:20Z","timestamp":1485381020,"authorUserId":"disqus:disqus_xVnVZUEaIe"},{"_id":"1408c311-de4d-3521-a3ed-915b9ad80a76","authorName":"Andriy","authorEmailEncrypted":"KJGISPjTbdtISJpS290P9kcLvC7+DIJk2NusjufCHvdBmr0hyGSGlU6BHh78mLbCA2ywuiYwTUWKMomBk6CvPANG0UzygQlpFG+xPEb5UXbqACI47MIQeorwooibGYCAbMkUvM8vT5dSX6DFAYx0AVp9ctChctlasoRifbsiSuVZ/gndV+SRk9P+uDiECF87qChekKh3Z8sH1jz6OBMHunHzg4Dl8onDVG0Bryl7GtG+pIc0cY4Hh4R7GgWo+HmwQUeQta17bFPwJgx7E1TiEQe13HX6x0K9qeUwARto39YMJU6bhWwFzhL/3A1OTQfz0mCF1T2I8ZQhJX888vqgGm7ToNvPL8pKuwUCde2yIRtrdrkZcvkwc+jc+ud9H6qFd6fWUneBe2VYlFbbuP0yUI9+5VibMDQeNgZnKObIxKwbljkjUh3OFeFPCX3u51vOMSmbsx4YK7UwaI+h8HE+MqhAFo2ALjnNfkF/uqQ4vsD1mYj3lE8s5len2lDU1u27tXptrrfWwfy4rBwQ/1WVtlAD/1gpr54jqwnHuDamgm7jd7YgS3d84340LIHqlgkhTu5vdbCgjzxaHwg9S0ReQA+BmnODaOmKPcNAq9OtfGtV7InMiOHrpmlNymOjwFjPpl+cS/kC1gpDSeSccWX8Y3sMLE6Uh0QQTtgUHDkZGyE=","authorEmailMD5":"7b3ef8e67ee7ef1ab8207b8a51c348c0","message":"I also add bool Initalized property check to the interface","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2017-02-08T11:26:09Z","timestamp":1486553169,"authorUserId":"disqus:disqus_xVnVZUEaIe"},{"_id":"014baf4f-18a9-3f6e-9502-4f3fd79aa4af","authorName":"Ohad Schneider","authorEmailEncrypted":"ZMok0KSa/pskSTPTQZYkIqqWy2AzfIFisNAQ4aNvpqMJOw2zqun1Pp9oa/O9j8NoTOfpXKJDKfAeA3CIFwaQPFPEnm/CTfIpXrxF2Jx3zEFPraj/P5WQR+eMlPBBKzNtm1og8uh5SrZYx24fxtVN2gUBMqsvf3To8cfq0mdcQXpyaPZeoEtmicSROs9slx80dtNiECgHo6x6DiTQ9CPB81LFxFhmZk9PzdY6KO25HKOVFm4+cumA06/To+jzjFXO6ACCy2vHLxSQ8Hc4SPMGrDutr3fHZDl+85vOCfzU36tKpAMjCllcrLt1bcwh1jyWVSbAsqps/Sli0mHZcfEJ0v3ZZOxTfYNP2rZBitd9lcIPh1SCU1KQrwpO0Oi5W1LPIW8POyNV5LWJprmLi2yRPrPmmV79iYDvbshJ/1ZJheCVDJE0f+wX3EOTohGE3G8QeSyQjbBOyZLrfUNR6g+PbjPIF7NMlx7qpDOprgw9OsWrPzhP9qr2ZyDNvbhnRULqO2GFUo+W0k4LBvy0X4sTO1sFZ2d/uDjwVaCH+fVeoc+2Y/F9h6JKho8vdi+odiMGaj15mYSuxUZhlNV1D348Nf2F2hMj8IpHDE/fz0Bgh3yAKo2bnBjU13jdsVFOu2f7FH0v4NKdNjxd9lJroLmTI7XwyIMfNjv+5wIBwM32F2U=","authorEmailMD5":"cacacd08cdb74729cd4a964ced03f62a","message":"Good stuff as always. Small nit, I would declare `public Task Initialization` as readonly. People have a tendency to change task field instances (e.g. Initialization = `Task.Run(..)`), usually unaware of the possible subtle issues they might introduce (mainly due to memory barriers).\r\n\r\nConsequentially, the biggest problem with async factories IMHO is that the initialize method can't initialize readonly fields, so you have to forego compile-safe immutability. I suppose you could use a `Lazy<t>`/`AsyncLazy<t>` and just do `lazy.Value` in the `InitAsync` method to get the next best thing though .","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2017-09-13T13:14:11Z","timestamp":1505308451,"authorUserId":"disqus:ohadschneider"},{"_id":"0eddab81-bce8-3331-804e-1cfedcbd07ac","authorName":"Stephen Cleary","authorEmailEncrypted":"EpshehzoCRc61lY63gizSqETyfDr3UJJKb/FETQzzGJq0FUMhxzo83tjqMjWUD0msgzJ3s+rqIuulZ6o9GpSF4ze0yCnfPDVAZF1/HvyJJQ+h2p8dus/b3tWvaRIYHkv2wk+DY5h/CE6Y6/ShGupdT1eh5gKuETuHVl9BhRXiwE4gqXWj5IHwCDW3RJ6gmR5BSkTx6fom687ZiKSSmqf9VyWVEYtnsYV6V6WIMpY28CqjiGlaHFNoD14LCiLG4n4BgK/wdJ+umbfOXOai3BPHNVjRqIZpyBO5AlSTOOXVuzGBRQXaReNapPNAuT2kutHCm6Pvava/dyvGRUc1X94fYFHSsLWLWyCEFIYvNFqap3H3V60WYT3qdWKVjnf1sD9WQsV1rNN62at5BIfk5Y5a3fLuGOFDb46G+SeGQfVPW6PkkB/QP8yMZaxAHleVFy1OREUxgA/dJHrt0B+kqE0iXd8xY0jSwTXipFDZswm0hNeOXzPE9uwNpjBr2xmvn5t7XzZZu7BOid91Dzkmnnf7XrYKg+pfMzWIjNq2HAEtrBslgu8zu47jmcyEFhKEu8JJ3rA44lapXAIw8n+TgJcJe+bEnn0SINt2s7Le8t18FzA+rkeNwVJ/vpKe2lkHhalR+7ILANScWsLeBcej+XFrWLX6z+L56bDqmgwi58LaPI=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Agreed. I'm using Lazy/AsyncLazy for singleton storage in a new project (so, a more specific use case than general async factories, but definitely an interesting approach): [https://github.com/StephenC...](https://github.com/StephenClearyApps/DotNetApis/blob/db9aae498deefd4c803606a2a8a2378f3fef4096/service/DotNetApis.SimpleInjector/Singleton.cs \"https://github.com/StephenClearyApps/DotNetApis/blob/db9aae498deefd4c803606a2a8a2378f3fef4096/service/DotNetApis.SimpleInjector/Singleton.cs\")  \r\n[https://github.com/StephenC...](https://github.com/StephenClearyApps/DotNetApis/blob/db9aae498deefd4c803606a2a8a2378f3fef4096/service/FunctionApp/CompositionRoot.cs \"https://github.com/StephenClearyApps/DotNetApis/blob/db9aae498deefd4c803606a2a8a2378f3fef4096/service/FunctionApp/CompositionRoot.cs\")","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"014baf4f-18a9-3f6e-9502-4f3fd79aa4af","date":"2017-09-14T14:06:54Z","timestamp":1505398014,"authorUserId":"disqus:stephen_cleary"},{"_id":"1ff1eca6-a88e-3fa0-a8f6-d32ca78abfb5","authorName":"abrasat","authorEmailEncrypted":"sLkQkPeccmt7s/gEohNCknvXaZwjTWadVf+t6oEENJi3exVCAAG0dzzaeRtICevMlpjI4OqOh8YHKKwhjjBqoLrhhADnRTNtUpt8VSWVyDtxcE9Uk4tuHwV47+doCNjfVDudHtWatpQO9rkH5HTVAVAe5GonHKKIBgBd+CXXTFEV95479EHLyUbA6ZomjLYSNRm8MGoWcg8gtxmpR7A3Fu3lOaQjTAjh/iSMVYKuTL9ASzG6RZO8URtPnXSE9RdIXVm+4hfbWpwI/yU2CnDWA0KruY3s04OjsoZuay5vP9plgl/SuovV9vzde1aTyRuZhAkUoTYYBcohVezx3aNQ9Ml8fWNJ5QgVMNCJa+v832z/nOnuqYFG2tDwQTioMg8rjlyr3yTrCh2MFJJVt11qGJnKD18wKAm8D/9yk0YA6LBwLIvvhsYdZdDGzjAVFSuc3GPDfs7seTIOgEL4/ANN9cHI+9Wp8qnA4TkN5YBSi5JDyCpzo+8MKpT5C/RlRHfg7S7cmXH4tT7Ei6EoL5ujYrIZ3qHODVrrDvaxWzyIW+uWaLtHY47ZWIw8/iKdhmxxPQY/hWmZ57b3fU1k+vruml4EAGwdzBc1e0aIMmicXgdDRDQEMfWJShkXjYFBvqA9O+PKDjbv+CbU9YROzgdM5/2IG339vPu6M3LhTEZM1Y4=","authorEmailMD5":"bb54cbe4d1feb86f3c15dde9b1bda22a","message":"Thank you for the very useful article.  \r\nCould you please add a code snippet showing how would a \"lazy\" initialized singleton look like (I suppose some combination between the asynchronous factory pattern and the asynchronous shared resource) ?","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"05925d73-bad5-36b6-94ae-1e404c9578a6","date":"2017-12-08T08:54:00Z","timestamp":1512723240,"authorUserId":"disqus:abrasat"},{"_id":"7ea17e7c-b398-37d9-acb4-0df1def82b4c","authorName":"abrasat","authorEmailEncrypted":"Lhh87OxtfrFHfezaDKNJUNafyOjVPLZgk8Tg0UTlpl0W8XZDrsdaB5iuriwtp6CS6uur7e8h68lEzgeGH/xiedOJAZaxBBPwGCKeeSefxlH3NiMruDxguQaYsg9XQPzifE1MplEW12tYdPhulpDGmZYX0cgLO62B15ukenoKrXDZyaybn8R+Y5jIkZOg0g3mYGmRHWxwpw8/fskW45MJYD66ddwuj0I08YCNQa4spajV3y2qLcVlBrN8Iv9MM4ZK0XfOLlPTwiKucOZVEA0JWEFW44ctMZ4pUtwOhd8yeInuVMdUDPuJDTR9zI9ItHE3r3vOZAKEfxFXtpZ2ALIC+C0+JfT8oNpzzrgTdZgiZSyTFFhy0Jn//r2XVWKemZpzt06c0l69QsPsZFH1ASbhNBuHeDgpImJJj+n1uU9okNR2qGJHpEyND4+Hp2YuKPzlpcp0g9ngMWptk8aIOuMZ0murd9Q6TNnBthNcWJn0A3+LfRutVBoxyzBQDarXEDAL7EeyWVG6rHpLvQA2SDBK79M3folwXUrMfx+P21J/aBiDDQYpEyJw8hC1G3Nk/oEuMqu4iA1AhtAqlUHWBsr3dzec+SUy+ErElB3GR6CYw8tDd6/S88x2xAMW5PYssD/BRIHXAHvEBzFmrV0hQRGGvnsx1iZaV7IjP/QuI4wrKJs=","authorEmailMD5":"bb54cbe4d1feb86f3c15dde9b1bda22a","message":"Ok, thanks. What happens if the async resource must be constructed and initialized inside a view-model ? Should a task handling the async resource creation be launched in the view-model constructor ? How can the result of the async resource be used to initialize/set properties in the view model (in the UI context) ?","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"837b352b-3c0b-31c2-8283-da3b90096477","date":"2017-12-11T19:39:06Z","timestamp":1513021146,"authorUserId":"disqus:abrasat"},{"_id":"837b352b-3c0b-31c2-8283-da3b90096477","authorName":"Stephen Cleary","authorEmailEncrypted":"fLP5qYr4UcjtzSD1Zj7GJA3FwPDSQFmOmm8pOgdJE/JBeCslKCyiu1tef/tv7uBKaNGpVGLZYoVnpBGf4+I5qzhSwQlofXSxsF/anNsFDPGLlRFyrb73+Uilfe7tHujmYbY6xWU5X1+txt9O/va433zeBKmaD9I2oqTgxTp9ZbY0LGPtYr/qf34Gl/S8Yp39xfjI0UrefGQRqlzzfc8NUQ1vfpfeZgPdEBgmJG2aRoGUC3s7OuI2P01ezcl/zW/2V+UYvir1OgqibU6GA0ga9FQR0pVF/2m4OoxZ0D78oK7gm7aa2gxsN+OWTJQzgDoeKGRH1ri2hdy9V0Hxywqkw1wr6UEiWGaEkJx24fi3KRAi7S76fF5cT+Dgjh2pEOB3U4IovVBCExJqfDURrShaIiwvp5llOBq4/+2Ri3NaLtXE5r0V+m98audJ56bo+bBUjlXINiZb72aBSCIA7OxO1+4EXk9jVQnTtl1cHijeYLx/oq8ZbDUKFPGmywYr+O/l0ybr+yDjVcZBVvJ7B3JD9xKtcN53AOz95dG12no6M+X/x10tJ5SxdYvdbSq6w4hPUmuc9PoJZ3e3nzO3cY1MFIhOSGELVn6VdoyfubOcwrihUfBfO71Hl65LHpGs76kbxV9DN+J5pVuM3Lr6BQ+/Pkkc+N+x7h2/7+kbsNFY/50=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"There's a code sample in this blog post (under \"AsyncLazy for Resources\"). You can just expose an AsyncLazy<t> instance, and the first time it's await'ed, it'll start initializing.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"1ff1eca6-a88e-3fa0-a8f6-d32ca78abfb5","date":"2017-12-11T00:28:32Z","timestamp":1512952112,"authorUserId":"disqus:stephen_cleary"},{"_id":"c9dad251-e667-34f1-bd92-4668628f3994","authorName":"Zumba","authorEmailEncrypted":"ux2kVPPZH3GmdGN7znrnQvHDQEc3/g90KAf7APLbVrdVkqMIaCheCEcW9xXhD1IKyHbXEDj0Ernxd/bGhAeA9Psvvlsty+F+h+P/J/OIOi42D2BdSveM6EjC2L4fvQcBhyaIl5kBaKJg2Mj5oHZi+Jfu+/9Dft8OYEcNeuqdvAKthqvvraWLkq5B9wIlFCSY5nYRR5ErnwBFwQcgvKznOU1mFhJ9APwfQHc02QdNNTeHQmUhLU9VjRqoZAYwqr79bxYMWcmEpTbpZul9lD8tT0vyKpuAjtTQ/5mwDuhKnnUZuQxAIxKb54eCN8v1DpgipOKp9JGL1NhMImqCq4OU+wDF6ZQes3jyd04nIhK2L49xJAsTs58mXp/9oVnvWELCeti9hncL48/GXTBQsY1VhK/G0LUw8B1863TIRddqRbR1LnOMRdTwtXU0B6f7ka77B7yU/6Ww3l9IzKWcHivF36ETANHkDhogWkbj248cP0hVlDyEwFB8CKUGJqQM4Gl7tEP8+A/6X6tA7/WV0aFnoNmItXNZmfLIvEnswgP+z5bxtCIgSoR7TG5wUnLcw0lBF8wsCcb8RO510uKEyMn1K2lx1i4NUILON9SjpnwYUO+Zz7TJc9Yx0VEkJUE9agPEFGOCTvn6P1urrMoa5eZOiRGGjxDt8u4JAscgYbIChmk=","authorEmailMD5":"80836835f5cf0c113b97d32d1bf1e5a9","message":"Hi Stephen! Thanks a lot for these blogs they really help!  \r\nI have an issue if I may. In ASP.Net Core 2.0 I am injecting a repository in the startup pipeline. This repo connects to an external CosmosDB database and so far the template code given by the CosmosDB team connects to the client in the repo constructor as such:  \r\nvar client = new DocumentClient(name, key);  \r\nclient.OpenAsync().Wait();\r\n\r\nMy understanding from your lectures is that this is too bad! :):)\r\n\r\nOK, it's bad so I tried to correct this and it is tricky because the repo is both the factory (or fundamentaltype) and the calling class, so somehow I am trying to have both in one. Is that possible?  \r\nThsi repo is then injected into the controller constructor for of each view, where I have GetItems and CreateItems methods to populate the db. So I am really confused as to where putting the calling code \"var myInstance = new MyFundamentalType();  \r\nawait myInstance.Initialization;\"??  \r\nAnd also, I wonder if the factory method is dead in ASP.NET Core 2.0?  \r\nThanks for any guidance","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2017-12-11T14:32:13Z","timestamp":1513002733,"authorUserId":""},{"_id":"54933ce7-8d5a-3b89-a9e4-211b3efdc7c1","authorName":"Stephen Cleary","authorEmailEncrypted":"sB9JrJWOGqUDr8tYugUu4tkQXVeqNFGwU9BtnTx4nHz2u0VoV6QKqbHvvTN1bhcuQTtox4mhU8Ww3g6+N80J3z5f84Mm0Ut/83zpZ9ZuBebGh2kZaWrom8ZGVsTODx9R/5z5w/RNENpGqovXukn1moVwyNr7YQE5SSjT+jcQUp5igy5/A6CX2OwbXHhu3BU85BwEXYHRPfwHf/ZVMWDL6i4NGn/VG3/j+EcJfEbySE+Hape8k+OhGmp3y3cPOilkxqQSo+az3azBaMZZ5JNY//7zTStnAjyIVp9xurdLsBwTn8XGBowgC/MU2bbfb0BkNkL8QmLiixzxeAtkcRfeynYqxzhKcumyHFfSEoK0OGrb9o533+wBXHgUNJaUdMB6eAnsQPyxQWEFifVnB9jvLcR6mrk7FRokrMlxX9WWN+cVfGAOgFS/EPC0TJsKhSZu0+QZGzrNz9A1Mk/klQepBqrMTHGlo1jfE5wK32dABG9Twhb4tXhU7EGois5PrMjxspnItMRA3zeOsjBn9+BnVKOiH1K8ecQ9AmgMQRidDO2evytc+VJvWPtbMyZTbGQYw07+JUHXg5aAcrgVxjzx/+GS1oTOaqruJvY4LGhtAxe6m9MydZXjFLOx8hVxKd41V1RPuCDM+2IgEcTHrioapuWdlV8LgtfOjk8FW2+LVlU=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Ah. I have some ideas for asynchronous computed properties, but no concrete library support yet, so you'll just need to do it \"by hand\":\r\n\r\nprivate NotifyTask<compositeobject> configData;  \r\npublic T1 ConfigItem1 { get; set; } // raise NotifyPropertyChanged on set  \r\npublic T2 ConfigItem2 { get; set; } // raise NotifyPropertyChanged on set\r\n\r\nconstructor()  \r\n{  \r\n configData = NotifyTask.Create(async () => {  \r\n var result = await GetConfigDataAsync();  \r\n ConfigItem1 = result.ConfigItem1;  \r\n ConfigItem2 = result.ConfigItem2;  \r\n return result;  \r\n });  \r\n}","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"58ab87ee-7136-30fe-a7c9-0df3113bf25e","date":"2017-12-12T19:21:32Z","timestamp":1513106492,"authorUserId":"disqus:stephen_cleary"},{"_id":"58ab87ee-7136-30fe-a7c9-0df3113bf25e","authorName":"abrasat","authorEmailEncrypted":"aXxASpQwWT0sNkpNUj3IG5VbOEPtJstn7G90j1Pi6D+wLVs1PHl6UD4/XCa22CaeNJN9BGKejFGMaCqreMYbffWOYuIpXD23jnlwehvkoHoQxoNssEy5l/ePbyeLuG6y/3VRd12PR40nUzwfZHRksBAMWUtQS8oDdyj//8G188zPPSk0YEcQY/tXQZ6p7mUIJiV578bYRAr7V4qi0GaDyXS6VMiDK282ySuWAezY6DfaVUhAdBdNCnKQEWXhgpo2CW1CZ/KjvQ0nz/JIVGrA58qno175v/lhpKeEMT3kLXqPTBm3LRCpkbZ1rzfIvCtpl4JFtgHoaWy71dqewzKDBSkPwHTxSDcUpYdApxpqpKo/GMGUmJGnGt66fdxcuuIjVbAX4CD3W8+r7g87nO7JevFVE3Z2nSvRnw8lKEp8YFf2vjvOVN9sHInfUEChjn3xWXe3iT1xenn7ENI+tZCKj7x5mKYiZa42nFgDn9GnASQpohMupHW2dwTGybjE7zcEzGUOSkjB4y0nKgqK5bfs7fqSfcS/0Inae0wuwT2qEEaNxYPWI5OIK00XTouUJQyNJIGsZNzz14aoyAuv289RfBTyoAmvYrDCnrUJHZPNoxkS8/Lj7LluSUNTrsL+gMqb7ZmIvZ1FXXCOkVO2wx/6iiYEvk3p+x3P8vqWuOalcXY=","authorEmailMD5":"bb54cbe4d1feb86f3c15dde9b1bda22a","message":"Thanks again. In the samples a view-model property is the direct result of some asynchronous call. But what if the result of the asynchronous call is a class, from which several properties in the view-model have to be initialized (for instance if the asynchronous call loads some configuration data from the cloud), how would the view-model code look like in this case ?","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"b50cbde1-a617-36c9-a2c4-29b4d754081a","date":"2017-12-12T14:20:11Z","timestamp":1513088411,"authorUserId":"disqus:abrasat"},{"_id":"b50cbde1-a617-36c9-a2c4-29b4d754081a","authorName":"Stephen Cleary","authorEmailEncrypted":"qZ+nOM/CWmDn1VxE7OZfNgV2uSwa7psgAvlpW4t+YxCzRdf2S36czv15cgSVDraBsN96L2b3dKEyi/XL0YJsSmpY8zley5/mktJ7XOWAiLbdDoK7i7P0Qhv+m9EBAql5XVslR3yTddFOn0SoRqotIX1JgyPKGhDDdEEwvnlgW4OdB4Gucrb8HXwCq8CuoIRfWG/SwpINKPPi1VAFZPSIynrXI+hSUY8/7DKapNCTlekUBPDg1uNzxO1F+gNcjOnndjqG31/VD4/sm3vAubWoMbywBH2Tp0GU8pa1FB/GbMNCVFgWuXGNmw+4zzDIqWwkmHO56gsF7KHX3giQN2pcmy/CstW6pJTxqIh4K1aJMs4Zlt0ZtyueSVsCjAhlos7p/i/brnTikDNoNH4WrAx78E6bLbALRwbod4af+9oW06Odb4C1SeNEi32NNCr3ULsjzVZn+rnQvgmuGHnREidcxuY6yNEXh2JiTCCnFNbG4+l+jY7hX8LLksQ3UOFB1OfFM9hI93Z0b/N2ZN2Ho4ujL5Zvkr7QX260Koio4nA/eqNQPmX4ynk6//ER37LrTAT50U7lP2AwhdoLNUC+PLRzDtLdmfieysYOT0xHaA5jqEIwtiuz8TNUYj8J5hwZc9CuWHiEI/2TSwXDOaYNl/p+jmrcURDTWX7RQNiURsZAoRA=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"In this case, you're talking about asynchronous data loading, which is different. Check out these articles for some suggestions:  \r\n [http://blog.stephencleary.c...](http://blog.stephencleary.com/2013/01/async-oop-3-properties.html \"http://blog.stephencleary.com/2013/01/async-oop-3-properties.html\")  \r\n [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/dn605875.aspx \"https://msdn.microsoft.com/en-us/magazine/dn605875.aspx\")","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"7ea17e7c-b398-37d9-acb4-0df1def82b4c","date":"2017-12-12T14:00:23Z","timestamp":1513087223,"authorUserId":"disqus:stephen_cleary"},{"_id":"c65e6374-7091-3fc2-98ba-82ee8baff723","authorName":"Stephen Cleary","authorEmailEncrypted":"sOe/N0e0oNx8iAMzcy+IdmEHaoLvFewLt4M2JnJMpCfM08WTP8KgHC1CrF7vpEg0uhKOmRXY+VXLOgc8sfdYCue2v5P1A2U1y8diShQphd8qW+BI9S7nRUM1XF23i2WHHgLoQYKnybHLyNBqKsZut672L/tqNfifXqKfJAnCQuB9gXuMOJR+4Vok3BGW/jHEZkYtTXM0XByE7XbxWM0SVReZBCjUGWl2bgaLbMB1z7oRR8ZsSsJxEu6Nz+QW0ZWHwSap/4RuhR/jm4VL4XHZTtgW0TwHFSNpycsqNys7/jBEVFogOfKE9HL3rZGdrdfhLfxqsAxaAYjcEIhXP4IdSisw+LXyf9K7vYZcLjZX4nqgLJkgyWPcGDVP7r3AFRi+URiAIMfXIkdpW2tbNohV5pOuMZ0JypzrmqpRBQS4Fkj5jNL2mn1VoHKT4IiUVbOEpQdL/svKYbIi+sgYib4jCJpwJMqLN6K1t4PhilG6UJw0eYH4PqlqZek/kWfH2/z0eW2+HvN8F7gaUSYciCrxlmuuHEqJFGM0Wqo0fYwWdK46atp6FudkLxZetuI/uflWut/92UAC6DalSChAteH+LwBigqWrIqNuIr7OxeBSz+PDJRm6EuzH2QCfR9brPezqWMH4NOXw2O0idQ4pj7YFFiI1x9Kowu8uAXqtY22CS0Q=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"If you do want an asynchronous open, you can split your connection from your factory, and use an async factory method after the factory has been injected.\r\n\r\nHowever, in this case, I don't think it'll buy you much. ASP.NET does not support asynchronous startup (and it looks like they're not going to). So blocking during startup is normal. I would not use Wait(); I'd use a synchronous Open() method if there is one, and use GetAwaiter().GetResult() if not.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"c9dad251-e667-34f1-bd92-4668628f3994","date":"2017-12-12T13:55:21Z","timestamp":1513086921,"authorUserId":"disqus:stephen_cleary"},{"_id":"b03a9bd2-181d-3657-b22d-59a401f215ee","authorName":"Stephen Cleary","authorEmailEncrypted":"CDw1hJrfNCd0QwHFXv4YYCNE3Ux8IFlwtUB8H5dIZnHEjyh/qcO2WoZCcSgdw/ltu8Sm7B9n66bHFDFZURbxPg0jKDIE066RAQv/If+5f+nWi6xguNwpgVLEogCCyrAgXf9vDjT+9bu/EcUr2v9+BCTXwcrJNkctsA4zM6MTNZK0OvliNvPuhel4RSo8wGtfeuFF0N8bLxHkDTaFzPol3D3yt9UzqYox7YDcix0/86WsbmFgxAanYPK/2EOsmZILnN1SeoF53NtRQeYwk1YhaYag0XOUcfaUtX8OztitQ6/r/eCvaBAgcG1wQ5v1MMSgUNOEMjtozwutQBLL/l7Z1xGjTl9zGy/vpoe/YSZUkfZeky7dEJKc8CYaTzhJutWAmQKHXJOL+5zQAiAKAR85uk+ld+vC1EIt8xWr9JagEF06JJfythDupD6VGxIMSDBo7kZ3WBVgfjzZAKG3tWG/hl92sVxjT8H+S3pD/zGI4/pNdAq40e2/xjqK9PzGzZ3lws62rb0u8pbk1y1izpcg+ZdOdU3m8444FgPQxTk6GUPd7LL/oJKY2Jg3dQ2A3uHVjkedFdSqGjz1wGTFvxZZDBjT5vTGQnUlvR6TApGprsAVMuL5p6TDSX88gBw1Knyj+OlkFUNOWAlvuK6I/HNkiph2C3UjJmx1YWpTHp7Kpgo=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"For connections, yes; but it will be properly asynchronous for all queries. And since connections are pooled, that synchronous connection doesn't have to happen a lot.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"cfa71dac-ac49-3100-88c7-d4fb83b57a08","date":"2017-12-14T13:32:08Z","timestamp":1513258328,"authorUserId":"disqus:stephen_cleary"},{"_id":"cfa71dac-ac49-3100-88c7-d4fb83b57a08","authorName":"Zumba","authorEmailEncrypted":"a0HB2IILQgI4VI7A25Je+fNQuGDd1LMNCG7RkRdfRYS05uzn/VTDRVzv4Da7DN192RyQnJdgstYHL5QuFBfrqRAqFi5mVAOnXSHQwlpGSX0NnqWw72H8KVsW5uS4kGtMvmiEZcpIVCu+pMyoDlGzGcWkb6OzocagJKJHIlz6DunCGS/jnIoHd7BpmVwCQLlZ6kgVbRtyzOYMKeyX4gi3hG8wbhwX8qcMeEOQh1kJYxo1oC8dQtlEs5/s2tNQPMVYlP7WqtdF/ND8h+i61QJf/jolIY0pWnSCiCtYoiPrcW3Oms5akGdUh27CaEROmQJ8zoOSq+11cVmrpcttW+JwCAp4fk/yQI2Mm5QhhC7LhhlRiAhZdhD6LwST+0APyIZGeSIW0d3Z29edEnq0bd08XI5r9fZY7XKes1q0DbenFsxYScTrJf8TFchW81eMFnygnVlwe4I1e37rZNb6q3N7VM/rN7u52o03e9U8/hn5GpHFVBhoFfEloYMscv7wpniL8NMGg1FgPPCLqSL65OSWnj24te8DZsWWMAJNP17sNdASwUKKN3lzEEXXXlAljlxeTgRXULSPZ/7MXcTOgp4WszJQmPHKfS97yW4XGDkxKwnLqu7NYTHA+yOHwhOTVt+/Ierij8gRNPFJuzn96kteKwQ/dGuwonVUDzYTJdOD01k=","authorEmailMD5":"80836835f5cf0c113b97d32d1bf1e5a9","message":"Hi Stephen,   \r\nThanks for the clarification, I make it open and I am using GetAwaiter GetResult already (they use wait(), though). If we are stuck with .Net Core, does this mean that also Entity Framework uses a synchronous process to connect to an SQL database at startup in .Net Core? Cheers and Merry Xmas","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"c65e6374-7091-3fc2-98ba-82ee8baff723","date":"2017-12-14T09:07:39Z","timestamp":1513242459,"authorUserId":""},{"_id":"6125cf3f-f743-3bce-8977-19649ab8f72d","authorName":"Dat Nguyen Thanh","authorEmailEncrypted":"RHNUKy2aqasGYEmpIJ9KgxeVHLyY9GxeRYfOVFaAOeHIcInjU3/Mq/XSLrJ/OI04YQ0k+iusWbMqMpMHyEAnezzJCIFRcs6LiK5zXr1INYw3mvTwtXauZ/XzGNNUdnZeK81fDZfNfng09uRg8nhaexWMIRtQeYkzuMnPEqYdh76DbAqhcQEqucMowccCANZkOgZbRYYKqlnvQCJpU5m14yJx4VvXET0nB06VNP8m4CdJUoK0QYdQ4AIu7HbYCZGUfUcyKN6F4g90N9DHxqPRSnl30w539zmiaRKyVXA6R7iJ13cJJFIN5GGtZY+eDpsax7W5Vv205qEhNK3OAPaqnaUohwz+DtXUFl8qY43o++I+lSEcHlP9MrgjpN2r97hJRYy/fGUMxmvdu+iSTK/weqM9dv2buPiEgn033tycnU5cocoRROBenpoJ9u3FldXuPMLbhnwatxHoiaq0XpyXkUHDgbEapY/Bw68NCyiWbq2QL5IoQLqeuyWfKV17wttzxNjZ8GGaUWniS7kQuliS8xsbJYzQK+pWvoPnT9TUl5abSQbJpeivvTk5d+lttetGasrpeDH8h4X6kbErAR7RRyqjsu+s+YkupQFW/+TZyPGNA5VeCHUmD8qv/Ncgh5HWCr6w7v76AqU2RKYxUQRMeXPB9clEAOrmOj0Fam2Vwic=","authorEmailMD5":"26f4de6f7952ce2f1bb9433ce4826d14","message":"Cool solution. But I wondering, is there any different between this solution and making the InitializeAsync public ?\r\n\r\n public async void InitializeAsync()  \r\n {  \r\n asyncData = await GetDataAsync();  \r\n }","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2018-02-21T22:20:08Z","timestamp":1519251608,"authorUserId":"disqus:datnguyenthanh"},{"_id":"8558ecfe-da92-3c03-8dab-ff795b08a596","authorName":"Stephen Cleary","authorEmailEncrypted":"Dvu8rrBUt4GidXuBnpZqvYiO7D5Tvi2sQ83agCwZ3Q1uDd+eONTsFbJ9hmaN4ztV/4FV16yz9r2AuP2vMl5NjK+GNOD9dWU7vpdeNKNgvN0xhIrAQPelQHtlnB+Bp09BTJDEt94szLGj+xKZ4B7ycGSJIs5ufTkZfRWm91p2WxfacLGZWkOldxBVQzdQt/b4JRmoFUWWDwtLgziG4wGIEDOg5niEQ3boyaTRU8QVSL58cWYWODTsBLoybt/rslLajM9OvcTuA7RLQI4bflL+N8oAEz/Yw3Vgg6/My92BzhQ1+/tP4EO4FF9EnFYFPEStKnQcDbT02X2vqF2nZaZJAdna2l/1cRdI5jU77gNuEF4Ohnh2mUBTHM3iwl9wDFVpUHJbATZeABbDUuAu8DnjCo35c14SMK6Idw3kw1IWIosL+fqIQ00shvTpazidwAOy/sGv5D6Ny24UBnBsqRoKFd6aMpfNhA9QJ9wsNDnOweySwwGpg3coLm4I8pKRUMHqe7fWY0dm4iCm8ro4VSA/RgqBMD60gdUjonmykZ3frHq4sClZIaaPhvl6EkQVrPwi9wNQSg621HPKbbeCkZAIs4TvrrlKTuwEe0QaeLETzBvs8r4zi5vxB5AXOCKFBxZNhy3dJ0vEE9bJow6FKsOtbTLHHFvpQp5lVrwMrih/uCM=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"None of my solutions use async void.\r\n\r\nGenerally, I prefer factory solutions, since there's no point at which you can get an object that hasn't been initialized. The async init pattern is only used when a factory pattern isn't feasible. You can use a public Task InitializeAsync() if you prefer, but that approach won't work well if multiple consumers attempt to initialize the object. That said, there are scenarios where that approach would be sufficient.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"6125cf3f-f743-3bce-8977-19649ab8f72d","date":"2018-02-22T01:52:46Z","timestamp":1519264366,"authorUserId":"disqus:stephen_cleary"},{"_id":"d68514dd-332a-386b-9908-79c4da16862e","authorName":"Ernesto Chaves","authorEmailEncrypted":"SHN42RE20+DdyFyP9nPYDHyBT4eZzV123JkV3m/FNvF78/Qmif/av/VSxE4HfES1Zt2rxK3fooNk/SHdU7SR26U2lqQPY5XeNHREeI3PidbjaCsbuvz+HJeqL0TZr4IaUKTiqOMG6fHkNfMtG1IauLR/KWbNiWD0YVh+NBcHz5zWsXV0Pei96gbNkeAf69QGDMmUtl5W+ZiVymt7Q9/4Z53dTuA5PESTFloZVgiCPK7Vcz5ScBIrucWbG10f+FnyYR0GtOa7vRjk8DdAD/cPgdFSfJzQBpFMG5gmhxAHY9ICJoLE2VnuCaKc4phTWqAYeZuxWG6f4tmVAcicBO1+phsw5pfBJO9eZ0iRtfzlvo0BJKylO2kZ7+qLE1HSWiCc+L68ELPQsOI+YdtgwzdkqqyLL2nBlVWc+4fxNwHT3EGr0de6krK9Dt8e3zqxnJzVbAobMWjclnJAaBAU4ZaIWIWjf2e5wJgpOhF9GQ0cn9CCsaGkVqU73fsBVBt7tGzS07RksDOp4ADog/4tqQr4cHbmEJCZm571BjsH9DoMvB2rvrOWL7f5SRakMyTmogbhofKyW76ZZc+VZLpkZCDpN3h44VKZ5J5fNT6MxDslxfL/pNuy6KFelUrZfWF637U+IG4C/tsJreGRLAH7Js2KoPgRVYPZWMAFRwoHt7uBeE8=","authorEmailMD5":"cfa320b849b011e3ff3bed3617eea290","message":"Hi.\r\n\r\nIn \"The Asynchronous Initialization Pattern\" you say you can use the pattern like this:\r\n\r\nvar myInstance = new MyFundamentalType();  \r\n// Danger: the instance is not initialized here!  \r\nawait myInstance.Initialization;  \r\n// OK: the instance is initialized now.\r\n\r\nBut thinking your fundamental type is a view model, you cant call it from the views constructor, since is not async.   \r\nWhat am I missing?","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2018-04-24T22:49:50Z","timestamp":1524610190,"authorUserId":"disqus:ernesto_chaves"},{"_id":"4b097758-00b6-38c0-8b14-505fc965b3f5","authorName":"Stephen Cleary","authorEmailEncrypted":"pHTlpVDI6qki4WUsoHSsPyeFZbZUs2cktwOelTrbwg7GHbeZwm2qR1SmjchqMymv2DcM8PTdLAkRbXiWSdobNmlW8dM17nFv8Pgu/KWRJ+Ua5kzru9E6XlpCRdaFa8t57PjmT3jMpxE+lbr3pol1xl7KtROrNZe5dx21tnm/m5Csv/jtgg2nL53IUih5+XckdhjhyrW1NT/ipXmcSqTio8ABk3OaolONR9IJf64pV/QFDHl/8mk35mRBv/7MR2SO5pP6OCGkDe7YuqMOvjVA9mC8Jo/mE9AZOQ78Yb/M8QxmoL5ArX/q4AzgXHhsh+O1ufC0DpZxaXfKVcc7yR4YwjPmIArB7mklTiZn8tJ4lbVfIR29fpzqZO/awP0SNl9e2ufZZcJ7D3UDx5Up35hP4njkmjuC6cujTspmikA4783Pfl7nc16OGQAdSQlV8ddPmqwHewkj/QSgCYZylzPHntwv3Ajd2BhrU9F59m4Jns1W/8uy7uHNVpvp2gCZcAPGa4xFjE1+aCU0nBrzuYL9ThsA7GhZpAopx23aDYjmIGKQUtA/yW3s0UfGCtjWZfxLUpA6fFViAmE4sS5bj7t/tJOrYLikE5qjzPvDGiCqB2fXGubvLv6/8fBEs0P3mbm68qNCMk1uq2+XufjPFCV7HWAoEnk+9rVA5EV+mo+Pz8E=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"The key here is that view models cannot be asynchronously constructed at all. It doesn't make sense for them to be. When the platform says \"OK, show your UI\", your app can't say \"OK\" and then go off to some database or web service before it even returns the UI object to show.\r\n\r\nInstead, you must structure your app so that it shows a UI *immediately* (meaning *synchronously*). This UI can just be a \"Loading...\" screen or spinner or something, but you do have to construct and return the UI immediately. And in this mindset, the ViewModel is just the programmatic part of the UI - it also has to be constructed and returned immediately.\r\n\r\nYou can *start* asynchronous work in your ViewModel's constructor that will then update the ViewModel when it completes. I have some patterns that I prefer for this, described here:  \r\n [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/dn605875.aspx \"https://msdn.microsoft.com/en-us/magazine/dn605875.aspx\")  \r\n [http://blog.stephencleary.c...](http://blog.stephencleary.com/2013/01/async-oop-3-properties.html \"http://blog.stephencleary.com/2013/01/async-oop-3-properties.html\") (section \"Data-bound values\")  \r\n [https://github.com/StephenC...](https://github.com/StephenCleary/Mvvm.Async \"https://github.com/StephenCleary/Mvvm.Async\")","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"d68514dd-332a-386b-9908-79c4da16862e","date":"2018-04-26T02:24:03Z","timestamp":1524709443,"authorUserId":"disqus:stephen_cleary"},{"_id":"f4aa4881-46e5-37d1-b507-be87d637cb6d","authorName":"Ernesto Chaves","authorEmailEncrypted":"ezRYmyOSCvFxhoNM9dGTbhijiHwCW+S8WnQGFAlNtEXOj7Wij+/8PcTMIn2ZybNeB4RT1o671Frhxp3TX6BMunGAUdyG+6IpA1bVLDqFUElGQPLCmDa8hEPPWzKkiI1OiGP33tYYsxtzT2Pgi1Nldi2K4xmFIOuTD/y6jZ8y7/YSIgmKLY/Mox5vrEF1K0lHM53DtfXPHvIdwz5jAWF3f6qR5ZxqKDWRErH10HwXMXpZKDONQa/7uxvufoQhopOqbFbb8KLW2ErYHU5CAvpfiH40x9StFUCl4TK4RUbp5v9J71WdRvuwIjfZJoE6T6XejbmgvH+JAt5kZ2kKKOZbkVvbZRbnWF8JqZwBBUCPJ9h7T0Ro9BHdjp3O3T7YJdrIPcaAlx7JvwYj806CntDue+Nf9/eR1jjLhG7hBuQtpCeUnLUpaZIO9LcEyZifzDa1XVi9iQj/0/k1/67C0/XFEWBXMIUwO6Oikf3IStv9SkDH2BKS2T7085jd7EWlF5cCmKhMZ7QhFxQYFjjsxvmOHu6kHDMsGrkwTo2vUck7X2E1YpoGS4tisxiOkMn/YD3Y+Gnc41TgHIVOHuMOtnVgmC3fT7gxp4Kbpryi9xUo6S/wEb/CqRNymHVmoR1fQJgVHOwFgndnom/fwndvPkS+rvXAp3zsgHf6B766Bd5eExo=","authorEmailMD5":"cfa320b849b011e3ff3bed3617eea290","message":"That makes total sense. Thanks a lot for taking the time to answer. I ended up using your mvvm libraries + data binding. Most people like me will try and use that piece of code from the view's constructor, that explanation makes it all better.\r\n\r\nThanks a lot.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"4b097758-00b6-38c0-8b14-505fc965b3f5","date":"2018-04-26T15:43:09Z","timestamp":1524757389,"authorUserId":"disqus:ernesto_chaves"},{"_id":"374420b3-15e3-34ce-adc1-b45c1a9d458e","authorName":"Kristian Jaeger","authorEmailEncrypted":"wkX8NOyaqPMKCIrXh4EKBvufHfIyQeMQX0XoUouu2w3izKm0IK1ubDsyVBmLlKPF1aZ0I+GPNBa0fTNvIvHhZxkq5CVlkjJNssehszqQolUDnvkm3OF3pUgRNTSL9QFQBmhQ32LLie1HeYf2FNQZa95Zabn4cyfJvVJyXcZamVs+C3UDXhXXzYcH21rh9RBRb4cxf/vCeNM46HAgjX+PuG8PXo14MLNAkp3jnnU45txQ0GBwd92J7jDlOwNi9v4HzO9yn/wCn+yJ5LFcDEWqFApKW/EQXe8nWemVE5NEkWQQnJoomHw813GfawIdnz7PjArkEL2ynPnr2LH8c+sN/MjW87q+5HBcXlBQuoAOfNIhJgankDqSTTj0XECEQ0vDoSW+61CSjZI9ivvyYhLMWcGl+w1Fc6DZx0K4CgGS9gMsYUo0bV9TYHRlI1Vd5H29MU89u6zgnh/4uKveLdkEd+Rm71aKttdQ44DpLV6KlY6Vqs57zIsaw3TtptnEgdx8+d57sGd4zvtttIbNzv0HxmwyUlMN2LX2we2OIuA4l4fsh3yAkE/9TLvLG4b5L8Dj2xbjpZ6sPDmIh4tGBr3ZHeJ2Jl4baOYjiy+aRsoWVA0CkjwZa0TRjjhf7+2/VaMNMsCjYa2QroDOFeDa7yvEvq28KXtakeiAEvQf8jG1OZY=","authorEmailMD5":"9f49da996c7133cf0c3aa6c8377f741a","message":"Thanks for the post. It would work just as well to do this also, correct? From my testing it seems to anyway.\r\n\r\n public MyFundamentalType()  \r\n {  \r\n InitializeAsync().GetAwaiter().GetResult();  \r\n }\r\n\r\nNote, in the async method you might need to set ConfigureAwait(false) on the async calls within InitializeAsync. Cheers.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2018-05-02T15:14:22Z","timestamp":1525274062,"authorUserId":"disqus:kristian_jaeger"},{"_id":"77e2bd7e-88a3-3ee5-a43b-8786a6416e77","authorName":"Stephen Cleary","authorEmailEncrypted":"S3KigNh+u3rCNjUHNr/RICSfxjtjhkfajxM4MXPR88JL3r7L070uPFwTD1BsfaHfgFOO7iBKprTOz5HiyK4YPbwjkXIWg5K8hkTULoVmGJWrjBGvTUkF6hESN+PFjxyYDeARXvDQz7gaUOt4yGGc71oK+/CGYPbyrhASectEOX9wEEQRfHZG5yOzJSoDT0zqlM78G3Fb9GVRAAYLHUar0G9+YA3Cym8l/BWlfL/5/TxcbgnML9oMP7wEQxz1IM8CZ8mLma4K7xj1vekfMHSA7TnvM62rOl8loRg8riv134tLA4xGPGiixoOtUcalSElMnNBLw3+Rto211bWNGna/omyU+cDkJdfJJbFolW0b0C+MVdVgqstnXIGg8oEcummamoBJqItD/sPxcv/Z3Of03t5lWewKXlWmYwEOeUui3mJXOK3ghCMK0HUtRe5W0+vD2suliuEm30jmnk72p2Z51Xpwtlv97//8GY/g+4Ru/RrkT6WsypcEUUcPNFZUhZTmmQGUAFpL/6HsVVWvjOIU8RR0Q7pwZVpqkqrf+yqbdQIJhatW1ywpDqaVblm+/uvn97OH7VAaY/N0mKT5h70e8RTVyevSGV4a7fj8RKe5sZu8xajpEwwGGuIhGSYd5R/WrTQF8VzTST9J4KNTInj8pwEZz5eHyZBUeyLRqF8meS8=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"No; blocking on asynchronous code can cause deadlocks: [https://blog.stephencleary....](https://blog.stephencleary.com/2012/07/dont-block-on-async-code.html \"https://blog.stephencleary.com/2012/07/dont-block-on-async-code.html\")\r\n\r\nAlso, even if you avoid the deadlocks, this approach would block a thread. This causes a bad user experience (for UI threads) or worse scalability (for ASP.NET request threads).","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"374420b3-15e3-34ce-adc1-b45c1a9d458e","date":"2018-05-03T12:17:50Z","timestamp":1525349870,"authorUserId":"disqus:stephen_cleary"},{"_id":"bf2b59cd-b7dd-390f-b107-aa6418b6c0ae","authorName":"Kristian Jaeger","authorEmailEncrypted":"npbjLR87WQFvIMWvEyx/wgcy+b3Uw0GxP3pdk0wOC8IdJ0zXW9pPPUbXJUIAUKAAJUaOz2xmBvLuBbKgTk9KH5TQ6l5eH6ItpoDnMmUw+DLemxfPycFGRAdxjJBK3ETVnN4sEbLUFQkRLAiczDsxvBiT3x7DphAHZZ6rPlGMsW622XkWcO90wLotspWKO1pmKrYpkJwsZJ74DiHiodT+PMAlMl+t4AXb19dGMGz+H53EOC81qPK4+fX/nPFtuZ/Qysiwonua5Jb+y+zCvHywviMjkNBpjJufGuqVZ2G1HIFtSxrLqLsMotIDh2TWyS0XAsaNjYbArOSYaAi1WgM/8IZApHz4Gm+xWjA3fZokVvMtbAVZ9pt5MKPO+yOt0On15/pHndInSh+ISB8tRDMY3oWRvlLcHXJBI/gnSm0ihO7+Tb0dUz80fDWkEv/R4vdTeGbFt63+iLJCPItvfg0Z43rIGtsHhceE+nJb+lu/ipMQB0agzMbK9F1UBswujgQ3m3eTBzo9la5HO8lRAPOSLcLRybEGP35XEj+HsOTdYv6CqKjnlkfjGNqlCBnMPIzrqJ46SzzWBckBxeLyu+tovtaWpegjUcan1fvRl9peRJ+0HQR0yNP9Hi6xopxJEDUNR6DYl90BxuYaVGoaVPiaPY3jxdhpAiUY5S2d4x0djlk=","authorEmailMD5":"9f49da996c7133cf0c3aa6c8377f741a","message":"Thanks. I see what you're saying. However, making assumptions about what is done or not done in the constructor could be troublesome too. It would be great if async constructors were added to C# at some point. Cheers.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"77e2bd7e-88a3-3ee5-a43b-8786a6416e77","date":"2018-05-03T15:48:03Z","timestamp":1525362483,"authorUserId":"disqus:kristian_jaeger"},{"_id":"20a155b2-d149-3f56-b10f-c4d81e74223e","authorName":"Stephen Cleary","authorEmailEncrypted":"YIcn3E1NldCWmy0Meb+XoCH35LBoUsvZuCdkKUPowLuvaK9LVGO65Ybt6V5gs5gZhoBASqAs0KmS53Mw8+BT0RDvblvULVd2v1VP+p2SszuveqSsaEeSOS5Zw1ufMDseigCtH04G72Q7KNYucmfajXy1LI0RTnD8R/UDZrccNwaEkI9JM7qmkkokCoknLvDdE0aXts6QoTb+wfE4FxVvj7xfqp+OzydJbDcJKBNuPmZ36MKwHC6zbHCyU4x8aO3tPR4zt7CFSnhwbr+yy0zVr1+Uw3pLjCLHgzjObhmVT+EhpyeR3t/ccypvt0Z2WmC49cNAXhlzaHm/fgXSTaRtYLQg2CJBCHzYZW4AGF1+DxuWuFDH91ok2Ce4f5b80H4UVSnfVncmKVb+DNKCTRs+I4rv0uq8W7plp1+kaLx6cdQBFEaa4lkiUdZVDQMmUEX5VwNJIV9538TfCd31ODfimTAJyJ/DYeEQGHGvb8wQg0KLA9uSPSLDffXCUVjHV1EY7OeIFMVRd1fvaeO35TAgBJAaRnDReBp4yNy8abjVb1kD0SWTjUVIJVQEK4+/gMGqFzkuOMmuMBcHje6ZmBPzduVcjo4b+gUFpXXJWwKPFyUj7T2/lHpmCtmL+aPvmdK8BtvLgsdNAWVtX60nCXU9sF+8g4OPq/bS2/i5aryRs+M=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"There's a good discussion on the pros and cons here: [https://github.com/dotnet/c...](https://github.com/dotnet/csharplang/issues/419 \"https://github.com/dotnet/csharplang/issues/419\")","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"bf2b59cd-b7dd-390f-b107-aa6418b6c0ae","date":"2018-05-04T14:02:41Z","timestamp":1525442561,"authorUserId":"disqus:stephen_cleary"},{"_id":"6ef651ce-6af5-3c3c-b400-37d833bf8a00","authorName":"Zumba","authorEmailEncrypted":"qH0IDPNsRwn+VbBS1cRFFWo1hub2tdZdJ/CF+i2g2350MNV2iVgBku+wH62E9TzQ2c7swMA5hgVM2EwazrTp8/58A1b9ZldZlQCkpbA/F2iHRG15MnRvyuNLeEUolxikg1hawMHx3r5ELKIioXPp4CrUO4rZ5dDKyEHUvRpOlvYWGSXA6rVlH6YGDtlg7qrTDRE+ouWrlldUW7UEyKL7ILktk+htizcBwcp0L45yCaAj3uWkB5NFTqKP7IHJTCxVQtARZWXgtrYiu9WoCs74/Dll5QKCWr+IUoR2vn2YYMiKNhCjkcAwlYaDC8yhFDQW2nnhtd33kQS/hLk6eJODEFBgvTjxrrkjKgHJwbxjNMfaK12Ja8p9GIVTL0nr3AfFuXqQt3Ztld8Icv85DM99eDDgIrgunW91KvVjtqLzjs8kKy0qdO/5N1AO/WsKjkoJHI4RvLvj69aLTzKVAsqAfxnWVWzktCis3mhYc8xT9WmJOmUxRJwfYAn2P0CtSVqFl6hX3XtgpfFnUXP86/qO7MVaE5mOOfwmMMWJl80hGBXUNALZJW/fmCTM+fpqMVvzWnRjz0P/yGDrAiOvQ8yi55/h8PZRSkT2nF274QXItJLQtembaPCbTEiooy6v4MDc3XhR72QQISj0YWOepb633ZMXm9ZpJj9FKGooR4L2D/U=","authorEmailMD5":"946de23d7298acff560ef0d981e2de64","message":"Hi Stephen!  \r\nI am troubled by a seemingly difficult solution and even though it now seems to work I decided to submit it to you in the light of your articles and also the comments you gave below to others.\r\n\r\nI have a UWP app and I need to set the ApplicationTheme (Dark or Light). This enum is taken from a string which is in the LocalSettings files of the UWP app. So I need to open a file there, read it and return the content to the app. The point about the ApplicationTheme is that you can only set it when the app launches, otherwise you receive a NotSupported exception according to the docs (and I can confirm!). So this means that I need to open and read the file in the top-level constructor of App.cs of the uwp app. The only solution I found that does not crash is the following and follows your pattern except in the App.cs constructor (hence my concern)\r\n\r\n public App()  \r\n {  \r\n InitializeComponent();  \r\n RequestedTheme = Task.Run(()=>ThemeSelectorService.InitializeAppTheme).GetAwaiter().GetResult();  \r\n }\r\n\r\nAnd the static ThemeSelectorService follows your pattern somewhat\r\n\r\nIt has the property  \r\n public static Task<applicationtheme> InitializeAppTheme { get; set; } = GetAppThemeAsync();\r\n\r\nAnd\r\n\r\n public static async Task<applicationtheme> GetAppThemeAsync()  \r\n {  \r\n return await LoadAppThemeFromSettingsAsync();  \r\n }\r\n\r\nThe LoadAppThemeFromSettingsAsync() is open and reads the file that contains the theme string.\r\n\r\nI could make it work only with Task.Run, the other options crashed the app literally!  \r\nI am concerned about the practice of this method, if you have any better solution for this edge case? Thank you for any guidance","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2018-05-05T17:19:01Z","timestamp":1525540741,"authorUserId":""},{"_id":"0789712a-3ab9-39fb-8c2f-fde8a50cf703","authorName":"Stephen Cleary","authorEmailEncrypted":"T2apIBZuexS+sP2eZU1tOYAokWd23UbQC7la9NqvRECY+cDFwGyvZYu+G1Dzyf3Zx+yWc6WQyybve0Ea1gbkdtdqktOd634axMUaG88lQlxfo06R8SfJtECuffprhWt0l8ipCeD1rdbc+6QTXC2Ufw0WOMWnh2zC7RLxf06EDwYYrhg1abE2s7LlI+4/5W6/NrzLq73tsjp3CWX5AL6mLp17yR+AZI/gXcoeb+M42KB4uo7Ya/SGyJaLyJyJYAzMH6GVqgfDBUfzJ/QlrXd3kUl05TLQk3xnZK3DeotO5Rdwpc8lmaCV56gapWuSHDosQ/YwdBLiUj6maQKB3PZvzx3u7ozChRCs4snSmUx9kAgeVw4JR31ts4gH+pU+bJnCS5UNYr0teqyC2I1nW0i1FqkZO3cys+aU1wyoTq391GJWS+L626krgMfNzQastFzcB+qeW7YrBCuT5OempGZ8AJRnKS1S0tzwt6wPpqtoP1WdKDHanXomxi4IJTaNgKRF5q2MXXIfl3Xd6eGG7TC6Hp1XLyqMqKeucA4q10/OPTqwbnZv0g75VqLRWB/NBkV/6jV+bjnbkJOyLAFYOIDnHExUWWNpo2vFydN35Gj2Kp2dTKZbQpAB0SoDA39y2dy89uIKIudi2nNIQ2Wd+1gtoim7TngqkAS6ae2H8XQOBlE=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"If you're sure you need to store the app theme in a file, then yes, something like that is the only viable solution. You end up being stuck because the framework is forcing your code to be synchronous, so you do have to use a hack and block in the constructor.\r\n\r\nMore about hacks to force synchrony: [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/mt238404.aspx \"https://msdn.microsoft.com/en-us/magazine/mt238404.aspx\")","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"6ef651ce-6af5-3c3c-b400-37d833bf8a00","date":"2018-05-08T20:46:03Z","timestamp":1525812363,"authorUserId":"disqus:stephen_cleary"},{"_id":"603f5768-06a8-3c1f-8163-0dbe7103a7cd","authorName":"Zumba","authorEmailEncrypted":"a5yDRR6WE5o6dHMsOWb1zcSwYKOVZ5TWi4s3+iDUucN3HiXm5M4yT02VyHQlLAIvCUvNrUt+naWoBzcmONq8pwAz4U7uVmlOoa/ED5FdibmQIE8fm6fpBjze1CExSTNaOYuEAMrchN8okNKTUjzuV7f7ySKgwne4PBE1JgjZFhTJNPBotAeVjQgXzoqHaOLB4kdeTWmYspCGLrdCZWLPQgW58mrWrwQUq1wLDQbCE6d8y6+3vyEP0+ltUhRfAVzE5Hk6XSIITkR1MAabMJbg1ssYCoNYBdeQRvjqboyJhOa7PLEWg/oho1ZQ7zgSe49H1FNJPyU/jXdCEq7kjaDpsvJnAfHnx/H32axs1wyrJ/NIqqYkuENyroi6zBnAaI2WVHEoBGAsuLO765sRoMmM0i5X95iXrimplMED4cnM3uF7roJNue0FQvyIPij59JezbQBI6T/wCqs7BjBiUD4+25gUzMHpGMxvMAy68NSr018PxIgJd+rVCGqDWfJxhUW/RnR0pIn1528ojm4qnUUJM/Pgg4XuOU2N61Mzd+NfTzwf70MhyhQAvGixgxEP0YfER+IfMJ026QIZhFBSwqBWx22GqtLk6FiJGIRv6AKNp4Fs//6LBIxyKE/pvXxm0Mn1wsFr79DTESiDUFb9AWHZXhsOCBS3HNUNf8r7jzz50x0=","authorEmailMD5":"946de23d7298acff560ef0d981e2de64","message":"Thank you Stephen, yes it seems to be the only way sofar. Greetings","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"0789712a-3ab9-39fb-8c2f-fde8a50cf703","date":"2018-05-09T15:53:13Z","timestamp":1525881193,"authorUserId":""},{"_id":"a4cc025e-a0bf-32a8-a485-cacaa764a28b","authorName":"Orlando","authorEmailEncrypted":"kEdkWTbh9xEI84VMzMgaRo/oeajCTBIoithqWQmmYLSEdNbztCJd8jyeljtkQtFXCxsihO7iqcGAGIDWLV3usL1yd0wKgXYZB9Q59CPzf6x36SWYfh1sLTKbzTATgmiqihnfazv6P5xwOEJ0NYFQDDMRRBMRy+7KCuBDMU0ypd5aoAP0BBEb/uFVlORdHzsMRN5tWxIrmqXW1DEycJOoPa1C5GPTLFAF60AxXceLU6Gjx5Hr40SPAdKK0SjpqVkDcKrIeir/BPL/jjEf3JPL73oJloN62TnMLommDYUrLgdkmIjjdEGUOI4ELk6ZLEzZ+DsSyelQVeLCvR0PZl5O5MCS7Lwp6wFzHigxruRS8x34n+Cd1v6KtgWuH83umQCjUCiwGb6eGU3GiKktHBSx95JvnbGCv/rB/RdGzzzoWyQWIibjUBhJ1X1BINtC1znYjI5KMwOApKicVkDu7cucDzQPAbIaH+eerJVZ2tdRcdOT0Gj+ia+2RC2JilT1A3e4GGkzbbtjVp1/0vjRL3sroAwjclG3Uho8nAOmQDuVTsqJTaxFKyBJmOOLrm5ftmUWXkR9JTqEqY9i3uKCR/I6lce+MiVQ6YXfcClZtni9xRpNddWvcVWjVPQSGmQMHcTrP4KoR68zzJ5tgdezt3I9vF4IqF8atC05POIetIieiIE=","authorEmailMD5":"6612c943cf0e14de14cb7e739decbd30","message":"What do you mean by `shared resource` Have you got an example? The reason why am asking is I am trying to see if the `AsyncLazy (for Resources)` approach would fit my needs.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2018-05-10T11:36:51Z","timestamp":1525952211,"authorUserId":"disqus:disqus_PPeujihbUV"},{"_id":"b37481e7-9057-3679-b4a5-fa305c3e569d","authorName":"Stephen Cleary","authorEmailEncrypted":"bXAxgMEfxNT38qAPOFf3JMBtuWc9Fboz/H63+TcVhIRU3jsBcAUH5Mc5rNF8JnKH1hRW/lm/Dk8lohkuz6134n+GwA1mPYAyGo7HFpGrOKEyop/372s+S1eqGqygg5cKLCL13S0hHhnMuQ/+Lf2o8RsOr0MUrWs46JhEETfhJFF1Xnn4yBexGIM5pM2hlM2cAx9BKWIDJ2LIVB+1z0xazampJLfWJtOwkCdH1XGyNyfm/SPPWXD3HPEXbeTtRcUCFBT5Nmjy/engP+B5HWNyc3lcquZq6cHq/tlJ/QjYoxpH7Ss54rKAICHHvBkpUJAhRrfd0vQhjZ1m0ADPz2pzn2AaGi6xMoLTiyco5I+ywBcLJ1XvBAsVhU1odsi52vsealLVOFguThsFV8wftoCe+VFoNWXJO82wRZ8UwKqLcxbc2ldRNxVqz1J2lylcV38ePaYSnVawwwka9yu+beq6ActOirVbSqRPAalsQhCvxgzThMTf0/BnQmQszDqtu4XfPvugqKi0k4VslK1TURLH6HU/Wtfusf2iXsUVvRnM6ogWHg8Zf3wmPNsl0Q1FCjGcA68vud2nmuppx3GIa/NPbHsXRDTdfKIx6suLHSVHbKLhzSPbc0GNJQLl0ydCDZn51teF79RiPEOYRMd+39ch8T9RzYhFAMpxl1NNymFK8Do=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"It's anything that uses asynchronous setup, but is then shared between other components.\r\n\r\nFor example, in one of my simpler projects, I use autocreation for Azure Tables. So when the table is first used, it does a CreateIfNotExistsAsync. Other components using that table at the same time will just (asynchronously) wait for that initialization to complete. Once it's done, the table can be read/written at will; the initialization code is only done once for the entire AppDomain.","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"a4cc025e-a0bf-32a8-a485-cacaa764a28b","date":"2018-05-10T11:56:16Z","timestamp":1525953376,"authorUserId":"disqus:stephen_cleary"},{"_id":"c7a99005-0461-339c-8b93-5e40b977c655","authorName":"Orlando","authorEmailEncrypted":"eJCpu3wI2x6r3hX8ELO+P3gb8TV33xlgakcprAMAJrOKaTUd6qvcYMuQJ2foTJO9NeP8ep0I0bASwcbSiuusJzcxM1wfn0ABTAltG19xMnDiZ6i6JtVDBG9h4yYscsTwZxVjmpJxBcn5zK8YpUzbDdfwashiRMtYXrZcsgcs1BexAeueOGjqTpS+AR1g4RBN3S7Z675EHcYwbIdWeG8cnCia6sOxx7AR8PIxxIgvOE9xFlwBjpTu1/6L/CsCWhNJaOlVL/JW+Q9PVLMVUDOp8TIQhtUa0L9rvqPEsX0wFYRCp3arf0zZdVktFG0CUof1HyZA8ngT7xXlN7llDB2e6uWdCcK3027pTJRWtWl3QQci+HO4MVRmXLfUPcCtVodAGZEACwW9mRuKp0ke974ABsx9Im1fN7tTWq/l3DvKai+ecE2QpigQJwT2HJWB4yFeAmNhiq5R3HPDC2YQJ15t8iZqI6picZC18MMRKDVRAZOb7CWv6gv/2zFxxbApHJ5znbDpb8YBpRyp40npCbERSOf8o7Pg3GVdfMn8E9Yi+T7j3onAVRQ7bQAZmmyiW+3OAudHIpGFdRzngaZmge2Y977AY7Wbbp0oZTlcKnJgDrqDH+g53KuQMGcn9/0ITSckaiiU8CQm0rNizc0+8eLX+WTj2ximsiGbWlgq90beA4g=","authorEmailMD5":"6612c943cf0e14de14cb7e739decbd30","message":"Thanks Stephen,\r\n\r\nI did not expect a reply this fast much appreciated.\r\n\r\nI am in a situation where I have two types of json data.\r\n\r\nFirst json(has multiple links(object)):  \r\n{\"name\":\"Link 1\",\"id\":22,\"url\":\"link1.json\"}\r\n\r\nSecond json(has multiple person object):  \r\n{\"name\":\"john\",\"age\":22,\"class\":\"mca\"}\r\n\r\nThe First json contains links that contains the second types of json data.\r\n\r\nI would like to put the name of all the links in a `Listbox` and I have a second 'Listbox' that display data from the selected item in the first 'Listbox'.\r\n\r\nMy greatest challenge is that both json updates the first one will poll every 45 second and the second ¬Listbox¬ poll very 15 seconds.\r\n\r\nBefore I came across your blog my UI would freeze up for a short time some times forever as it seems(this was only on bad internet connection ) But on a good WiFi to my eyes it was very responsive.\r\n\r\nAfter reading you contents it help me allot and it solved the freezing on the slow internet connection. But I came accross a new problem where when the connection is disconnect and when it is connecting again the UI freezes.\r\n\r\nSo I have decided to read all your async contents again to make sure I fully understand the concept of asyncronous programming.\r\n\r\nSo I would like to follow the etiquette you confess about.\r\n\r\nWhich of the following approach would be suitable for my scenario?\r\n\r\nThank,","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"b37481e7-9057-3679-b4a5-fa305c3e569d","date":"2018-05-11T12:17:37Z","timestamp":1526041057,"authorUserId":"disqus:disqus_PPeujihbUV"},{"_id":"55499f5b-ef15-3270-9068-5112f07d968f","authorName":"Stephen Cleary","authorEmailEncrypted":"KtJybSGzynLYvgtKpsGSEGuHWWdBHIhT/iOy2UkSRe7vgxVz76PuxpRbl2PzSyHbvFpb4ionNl1thYAEVZTgwcY3I8bCPgKUC3Gjjw4JsPMzfmk/7WljcEdN1lwoA6QnjAJrBZTqWOxwY3hBiw+5mV0c8iW+dQsh/4APyHBsSE4p1J8nnbrC9qbhMQyzY5KQJVIVKUNiysh4vXvFpFLX760+ODno8MwGRou0KLTs8F9X6RWfVz0zuemXVbsIzZNEoBpaGXjkEEDEIRZdy2VilwFTsULZ8+bckaN4SnxaRoBvPzU1YfXkyFZkk6032AksozejB1zpPl4T0S36zsbpENzFqvzqjD4GdSnCYveWRJPHZErzvX6fULzAlKn595iU13LEqaYSOzOQPNW1qb+1rMNSbxGYH3NzY2/l4qnv0BjOHBHYNOYDFlCapkSsIwIBgLYHpjzsU7VMZ76dbn5hdAr+VAsFeSTlPi8urWeE/qN7cr/qLCmx3ZeYCxIxXUuxqP3PfZhIqU5gWPFfvOoQmTLvW8o/3A66z8z+Ws9W56aM4puJEIoyFzkiGDWrJDkBhiroW9b5y+7zWZ6mRjnG0HC118XRwnAfZyrc/kV/CaEA/lCWXpT3YjGStuN7hskoS/LvaaTSYActjexSZnnqCX6z0YSi4aCRUqi9N7/ozvs=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Hello, Orlando,\r\n\r\nI'd recommend using a type that is designed for loading data asynchronously, like my NotifyTask type described here: [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/dn605875.aspx \"https://msdn.microsoft.com/en-us/magazine/dn605875.aspx\")","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"c7a99005-0461-339c-8b93-5e40b977c655","date":"2018-05-15T01:44:56Z","timestamp":1526348696,"authorUserId":"disqus:stephen_cleary"}]