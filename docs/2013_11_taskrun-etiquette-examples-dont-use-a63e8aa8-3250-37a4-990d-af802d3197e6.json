[{"_id":"0df9d97c-0b2c-3f25-a9b0-b2dc3acbf66c","authorName":"Stephen Cleary","authorEmailEncrypted":"hqZSKvRYSolPeOExWPZ16FOJeNLwN8MGKlA1OcJb3tbE2hcx1eGG/eXIdifZAz1U8ZfCvqV4bhqCepdWzxMOAgp8oQa/sqOMEuGAqunIBJABIb/6+UJNEJEt2E1hKkEtO/QxyCL7TkE/V6k5qu4HnCYO/81Yk8p/H1zPKOmuwTpN1UKqq1zhLYuSrRaGz5925OXIQ5izwbNaOFfbXgtFHNQBi7xa4IlyQZ14LL11jV5Au4XRTQK/wCHnOAnXuHj9N5nI0W1Uw0Qb9JRn96x7YBIES3dQ3VkfaIRh+5QsWzIQi3ldYTiwUCVN0VF3NzVA0IlLMoaYtQEb6Y5+MyYb0uA4srRekiGAuKJKzymICwC6uBamjaVqSom0e6d3qZKrui6mrZgpTMmPik992F78uMZOn/JeScjWIwmYLe6Hf7ZF7fLvEqS7I62m6epcl0LDZsH7PZ0/FSZLdJd57UC9YOZDSWRB/rHEaRWgNZKKna608IME+i9uk6c1VDbwcDqRSGRZmGld1zTR69FcCiZrO2g+QLoE3aYzqMv7jTW4GLRL7Ra6wss4AsIw3rrAR3R+j9QX5cFIvMCgFGnwCeDeRJoM81Fq8sDh9Q+dLM6SM1DUQv2xNyz725u1nkgRN2TNapTlXi0XBF+cI+NeVcUCrguRum7Z6h2KAhwNkUQoQCY=","authorEmailMD5":"36e44ea0274d8207eb632c566e60ecc7","message":"Thank you for the kind words. I'm glad this post was helpful!","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2013-11-08T17:29:10Z","timestamp":1383931750,"authorUserId":""},{"_id":"e3d05495-b6c6-3087-831b-0e439b3a63a5","authorName":"Andy Pook","authorEmailEncrypted":"wuO2PxSC8VSbZqx2eoyxD4dxsdarOcOG9rQZfZBl6j5EZ+Nc6RF1avArGPQW/58kD5Fw0K11xLI2VlUHPHTU4rTQgNeRqqCCS7+Ggpvgm3sjWff41jsc5AZvqhYX0lswKSqyQcCZ8I+GGwjXHjsZtcwDZQ9J6ZQfkYuXgkm8pgGoMjdzeD63p1bPR8+aX06dKbv9jNV+8mBwrqbhFa/yo/MAPm4evLB7ej8GrMSYBx0O+/yfZJXsRF35z0LaLSpP/RIfXpwqas3vFJt7WDnUKepo1r9XG2iyOGiX4lAucYioRdkilsU9wjMBmrsJnHD3b5TM+YxVPq6tTcN64yPJGd15XJCO+I+dT+7PEjCMC+SbTw7n+avUHO68ibPLUJqvjGTsBIuiiGWMvtMvF9Q5QD/JBtoR/SmkS6ymiDghsDWXPW2cTFsikbKaP2H8x3k4duBZmhbulOezt9s5lyXK829XSalZBt8w1Y7G9bcA8hs3W6Q/HgRSLATTQHK0i3+cMPS41co30kH8JaORVvZXjVMswItyIfGSd0J3wky7geUqNwf+a5Mwip2vlXWD3Us8xN9Axk7/OYzFx+ljyD95xsxRLQhnCEy4Hp6TlcqjAPyUTEIT3LbnL3gLyrZnQ418a3Y/S+JGECzRkoODcd/IT08VfZBxF5vQy7FrCxoOOaE=","authorEmailMD5":"3a51dfcc63cbbdda6d0df408473bed00","message":"What would be the \"right\" solution if you wanted something like a Parallel.ForEach in CalculateMandlebrot?  ","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2013-11-08T20:42:47Z","timestamp":1383943367,"authorUserId":""},{"_id":"f0d9b43b-5c26-3c19-adb8-549257a5db15","authorName":"Anonymous","authorEmailEncrypted":"eIBZI9mnCGpBzEWWVDXSRnlETWSAA6WAaEkwEhg/xAJm4+AszUpiQaa9xyHw3wy44oMcqgCxADpCTl1Ck146KOOVk4ISL4/HhcdnE4ECbR0b4AlJYaiei6+2F+U29d/bHrWF37svwL8Y+WGQ4vjklIS8KF88fDyES6B89TPrEVP0n9e5A5hIs+vYZCDj1F4Vhidg6lnXrf7gWYa8ImvqoBFx3IcN9+fOvEEVjgzAw1qqTe1xiBAn2qNRiCBFgBe8kbIrglnVgDKohKVEQGNE7chRu/vpjlUFaC8G53dtGsn8x2eTDNCUBxsWiVMwl+gOhTN1PXdpJWI+d/KqG+/Hyg+0BAAKm/xec+1nbXflm9Wemfe0LWCN8RtIjLjdmz19ZinzHBoanh3599VhW1iR/Bds/gZDCaGgrHZP2eR6X3ObgSRNB9xR+htUxYO1tP2iNLrvx91SZQlZZtOFzktbzVCDiwqlwHbM3HDD4z1rrANGwQUyTYdpzr+nZ9Q6n7AGsb5BXJuGT4np/G01en3l8AJ+qZpXsX1XKseZicPsY1vDsyJKqmHt+5+0f7QoCog8HM8ECxS3Lgn8pEVWZ7InGxhNBDee0dpIbd4lTMzhYgUt3tRUWADe//xJ75VUPdvgIK0gM/TiMEcMX6Z7do4HbTJLM/gaWl4zxTOWh/xuxjo=","authorEmailMD5":"3cb42db01b5edab948a576e1bf94a281","message":"Thank you for posting such wonderful, insightful posts, Stephen.  \r\n\r\nI especially love your pitfalls series, because each post describes some scenarios that are not (completely) addressed in the official documentation and it is not so easy for an inexperienced developer to grasp what happens under the hood of TAP in .NET. Especially since it is so easy to be asynchronous with async/await, but is also oh so easy to shoot oneself in the foot by lacking of understanding of what really happens behind the curtains. You've perfectly illustrated it with an ASP.NET Task.Run() misusing example and I've had an \"Oh, wow, I'd never think about it!\" reaction while reading it.  \r\n\r\nThanks again.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2013-11-08T16:58:20Z","timestamp":1383929900,"authorUserId":""},{"_id":"396cfe1d-4c3d-3676-9966-e57238c84aa2","authorName":"Stephen Cleary","authorEmailEncrypted":"Rh/UJMHj5Mg2tc4C8Z9T1/LwWX7bTFX/O6Ym4nhFivNAiAouQoEza+O5HItuDjArnrV05+TUokWFicJ8OtCwIAxA0cnR2eTvE+42epjLtOKFEyN1eB+P162rEIbeK5IKFWUzrkvNugYhS6CVJiNlIUBBAWgOgDhXpB0+XlMt5jRo9nEVUZipjmhX7p7f85T0PlToP1qnBgddoQXjoWUAB0YebRIe9gVq1/iiSOw0VF8L1mckFGeqLgwTZdYyf26C1LTB7A43CefcSf9MzmwAEFh5VCGEtMF4rP5KJY+cpDdhA0rJa7i4+eEHFXlen2bBcDrxK3IspWuaGMxMdnGTWYOeIfFTMNhWYjScn6muuamSb3DugJGF05Tr2zL0ySEwHKZjoE7Oeo5y5eJpzS5JuT+LTkvPA2rc1jRG5KRndDxxeKRznfv6MBBJHpSPfBW8h8TcyPWDldECF93l5gJTMJu5AYU/D94ksM5IYL2wW+T6usfASFY3y02E63LHTjiON/vUdrJY+i08BpXSg63KyzmGMNXy6hc3jwsOaMpkAw5OUuUY8fgFOUJp5L+CPEx+Av4Q0Cy5Y+25h9qXO98vVDrqEnYB3/KOHp0bCf2aGfVcYU8deZjMfkZnapU+U1atBf9OMI6X2ehJrfMojVEMmsYSO5dSNS8ZEgUwg8nXPGI=","authorEmailMD5":"36e44ea0274d8207eb632c566e60ecc7","message":"If you are doing parallel code, just expose it synchronously - the same as the \"right\" solution I suggest above. In fact, my original example did use Parallel, but I simplified it so the threading discussion didn't get bogged down.  \r\n\r\nYou may want to consider including a MaxDegreeOfParallelism option so clients like ASP.NET can restrict it if they want to.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2013-11-09T03:13:59Z","timestamp":1383966839,"authorUserId":""},{"_id":"dd7f4142-a3ec-3208-a34b-6ac720a5c731","authorName":"devtools.korzh","authorEmailEncrypted":"Xb25rilF+6SYEenKyp8xqdsyvTXawHywsn4d6xKPna58Wm3LqNLgrKXlm5a9xVsVoSgoIxzBlWp7FnfgLKhqg+0GYEJMhLwsN5GFVX0MVA79KEPyzD99UKAusASyfUL91g/1o+niXumqXMrv4FoibphTEZbhUfLFYsgvii31VMFWHEJpUvsuf5f9+G6FrKn7v0T4991sM1KNwJ9UUtAXgd662c1v6PWcfkV2jOiLjEwODzQhKZAmQxdnOJdqcBVQ11t5gxNWlOQLd6zdO0txMeEhyUaQcqPuJZHpBeX7gNJvE0p9duBUGln5Rngzv77VrJ9yuIPjR0xC7A8VtmsDzTBsY8O0zNW51Yi1/cnQjaghPyIRxpPpPeIg6rRZHaYLWYExObYGJuqxeDIhgrvz7hBTTyl93Y/Zh3iia+fl2OOk33a/NGmsddxrfoqpTvoqp7f+bCynYxJ77GKj2e1y5Wqur2urBGXI3xWbqW2Qd8e7Za7qPlt0+8DRD+JlWmVz4P2NsTc5wSIXStWWm9+IlkO47PdRoaKB3lwryfr4XcVS/zlzMkyzM6hLx+RBnzyJUTYWiAwcvy07jNvdmnRjkdYyLKuIuOtOezAWSziyd56sRYyLZvVjakbihdyAZq7arDJHxYjmjxmWpZnF8AKEssuV/u+4HlS3KdPNiwSqD3o=","authorEmailMD5":"7ad9c468d1c0c30e5b0a39c9198c8bda","message":"Wow. 42. It's very funny)","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2013-11-13T00:07:30Z","timestamp":1384301250,"authorUserId":""},{"_id":"ea0fcc1b-6bce-37d8-b63f-d8715379a351","authorName":"Anonymous","authorEmailEncrypted":"P2t+7p62CocQJLJF2Ca+RsQ3tGmcd/0P6h5ZaEsoy57FRnM6ElrzekCS7XhiYcFNw3wOd+g8ahFpsQO92jjCprIIs66aGGZZSD6r8IZl3lFeeU7FXUr27RzlxnSJRezMQjp5sME3V4ZEu2Ajn+VvOglGK5z1v/VzXL9y13dBS9iWAXL6F0DP+ANzEz2B7DONYCpjjZoOGR2bUmUcAQdPQl4CFQnYw83ehISMrpbg005XjJnGvpAFQ/t8yYwRCJA3iH1ugZwo5SsG97t2BR7LNNQLs0lCIGRExqqn2fPQk0ufG/J7/qi3A724/zQGHMc8yH3lSTJfxOL4Kd7JeC0uNLTrfBDP2fuQmWyCTK6cRaqLkKjlQmy/C4iHKrGF7PmbSqTsyCh34CTLBfFS+LN26wXRpXYsi0Fj2upjlyEZ0RPtA1fK6BDTCZtZelqA/yG1HvxV9hXAL2ZOBuWfxdhQ0eo9sRkLKNZlTaWRvynVQAxMcgBJDQmfierH4hqYSnnC44RMwH3TG+0qz2aiZeVtnKmK0W+bcUpohn3Om3s5llZAxKEHTkEJCsURDt0M0b6QFywcfg6RKQvXD+xbXApiIMX1zR/o9Us9T6c6Y9+mv0fJYnWenygEu6szMGx7wsP+aknzNA4QRna6w9IQHZL4BFvgIsktYJPySV3RwZNKV0c=","authorEmailMD5":"3cb42db01b5edab948a576e1bf94a281","message":"I do not see the difference here in your final solution according to [asp.net](http://asp.net \"asp.net\") - the same threadpool will do the job ...","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2014-02-01T22:17:53Z","timestamp":1391293073,"authorUserId":""},{"_id":"764c8435-b19b-3872-956f-26db3e0f7d8a","authorName":"Stephen Cleary","authorEmailEncrypted":"h0ZeQ5RvRpSli6pX43G51Th4VvtNHv9ODUeProwpKoHTEyQJHMxMpXxd2OxrGxIPltfUTWPiu7zjG+Bv+yuhcUYRJUDaLM9F39nmdl0PbuipHulmn5dgwIpks+Bc3VFuNEsTkJg7aHNThg2UqpU+vqlTDSoAegu5i/HgifMwGyq2H+9p0M+5MKWVagXRxLMWG0pNz/n54ADHTN1p00Am25/fKL/uVU1gaJCnLJxKoH7FJj3ps8fdyp5sIhQF/KLQn5DF8mllBA6rwZEU53+noykUZTVqn2gd4r8AfNaYqevt8O44OpmuFMEC1icpV+FDLKcl/RrSxKHrh1CpUBoepxntErzKllAP5R7JZipWABxSoLmSrzGRs93W4W6r1hClNJ6Pnbe7zUj4V2K48kSkpD+g6B4zJW/2UIf8mqoiNs4FsWdKq/bqu7pY7pW7xTl/vc1DiX1bqoN4FILFzBLjADQjygya9pLh5XV+IJjfN5rWEMMa8LQsftmF6YjP6s7sQh4Mf3UY2tPRWtnTs8DxZTRcAtlAmKd50nuBEx46HweZiP6gXOmvwVIlw69SkZofDapZCzjV1QmhB5ISyitjq9sTE1BOBGIKgTl7qLDnH6OqOTIZSkH/oEXuOIGkF8OTKMXfULWbnoZpsCA6SDOGeilRtt6980q4I9PEunK/rZY=","authorEmailMD5":"36e44ea0274d8207eb632c566e60ecc7","message":"The final code example is only for UI applications; ASP.NET apps should not use Task.Run for all the reasons I listed when talking about performance problems.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2014-02-02T02:11:20Z","timestamp":1391307080,"authorUserId":""},{"_id":"3b109cb1-008b-364f-994d-8fc3bbab28b0","authorName":"Anonymous","authorEmailEncrypted":"C+vZtS5InX8ttRcEk7BixPNwVowZ8wrykfiLJj2JGYgZ9YHYmPdNS2pggit1nh9LywoUZX1WFEZ1RxaJpXIriheITM+VF4wO8fmygAuNoCJb4wZCI4PK4W5EY0YwMDflnUI1tLsIXV3bLSLJucDO7YWOpadWth0Xxug5l3xtDU0JLGxgMtZGFBA3KsW7uKw5SHJu5YDmJzDCvocdQ8XuV2zFMylAT5eU/JVAqpDf7VLlE9spi7t1t9IraY/p/Wi/3M3BHrLmp54kLR80WphrYj/oqccx4xtwaBBQYTHtrW30oQNX9kTuFptnn384F6iiEhW059SmTYn/5BM5en4YYn/anUMspewR4rt5ZljDu0okUScSQ6jUOsJ2ALtklFTzyBypM0GVFNcR/esHvUVRoVBfV6GPXOdTwKYfivehzjywu1AlIlrfgdMa2wRdiJMD8vxVdoYNDUSTy0T3ekcS5Q50uaYebH+UDVBCuuHfwrIE/L1Qqul5zk18FPSpE5cmWdPjysDXkTgflbE0p7KrWfRBRLmYYRLZHI+a5/c0i1XZjIrAYU9yG4e+clqoJI+nl+GvRubcMO8WhZLDOuGAz9jYS5WyxAuopAydj7/h2wNLX/YY4oxhVrmjIhQ6gpMW3+JK+FZNf6RD64E/HcCH49SX7D9mALuzEO+32pJqQ4U=","authorEmailMD5":"3cb42db01b5edab948a576e1bf94a281","message":"I have situation where one set of webservices hosted in IIS calls another set of webservices. Not necessarily an ideal situation. What do you think about use Task.Run on first set to call second set which do not use multi thread.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2014-02-12T00:22:50Z","timestamp":1392164570,"authorUserId":""},{"_id":"4622edce-864f-3f2c-ac8d-51220495cbbe","authorName":"Anonymous","authorEmailEncrypted":"shkxz46LiGl8RwQl3pE/J69qfoSTxq0La7jdTZQyHBwgCstjm5ruQXi9E5jnApEL7niDDIb+l4kYyakYfz/UbkQPx0tetRCmKllvRxBZiGBrT1kKs1lj+ilYCfbAY7McvkQQKdwCpD0AHC2/Yf3JDrDj95heK5jhxeM8hAGn152bgjq3WDbU3Q4UykMAeqQtyYhB3yEiYTL+l2OiXT/tjtDttITe/RXom3T3N0+cLPXbh0M6kRTleWacK81+JWL9BMmTeZjMfu4NKXC6KQNBSfIr5Yg0FEMK5uvnqB518zsPW5UgnayHIX4HBduRp7ShcrodeH1mUehZD3+MU8TsVklOibCS0keOSAGWBHyXXyfW81JMWgRw4OGDs5xWJONb7Zytxg8ztKvaqArQvAXkplFktREeNv5Q4b5azgGXSL1Sfh0yom0AndHuKcd4vfCjViX7cA8yfJlydreBRdmesFJDP11jJRRnaPZS9Lf0GMDBShYSr0OaLTt/Z+fLeNQWhVFQ8b+75blVDO/puzuEjTGeos99HvOSUdsTvBpm9invmYnQG2d9WVxzcHhyCIFrm5ipkPoWovoTaLZoO1BJuyXHOhPDasfdzKOfFubhPrII2aGCidnJjVbSEFpYMiSfcitKFtI1DufIoA+STfZuhS9Sp/forTKrRk3HXETyz5Y=","authorEmailMD5":"3cb42db01b5edab948a576e1bf94a281","message":"Currently we are using ChannelFactory to create the webservice clients (there are several). How do you suggest changing to async?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2014-02-12T01:40:39Z","timestamp":1392169239,"authorUserId":""},{"_id":"47cbc294-769d-30ac-a837-7ee54db3b14b","authorName":"Stephen Cleary","authorEmailEncrypted":"ICM08oC2y1AGigchFF59z9mFuvz1c3Nuc2bzaTe9UAL4zHApK50u7NJpvGVdykV0BqmCSgGF+7l/ZIZdDSaaPE/nNZIJqLUv5wtHY9TeQ0PLliUTHP1RkgPV/goUbkAYQKWOV51J64QRWx0TAesx8KVLB3+g9xfkvfiT68bhgLUPnbD3yl7ErQcdm4D9bWFtLSSHKln/6iSL7L/DMGfpJJ1cflidIorg7/mumUkfJyBSWdwqZvon7EXATePmUEGBpgFbvVWzbphCrFLMoam99U/I5qtHaC6JxVvAKgtmJIH3Dri1TzR163nI9zJVotEmGWLBeXBnzEKgfjiKp06s0Iv4IJxV8Q1FPd0RMZAd8kOJKulWWK9QERWqd+R1Nub3JT5ilupksgz1PC4Rl546ikkJkDpNZrKdz2+vGKGcVNJwajo7s83vyWcWG9f9YoMa0wxPJLvQAYpt7LDMNRvVCtnVvgbTDtXEJUh6II8ckCX6P1OQNoqGA4hnMtie+NGWryPfeMeb2H2hhXvcbUUwLA/qxeROhLREagGvkzBdvmpNZ7WxQ0hzwwelpKcvzYTL6infZKgu7VIZSe3G/bi7et5OGEuNlR9o8fZRmtIrhVxnv9675GN9mk5uyrABESl09hqiPZngqBYxonnPkusc2wNwoZOjEZcTuC/F04Oq/lo=","authorEmailMD5":"36e44ea0274d8207eb632c566e60ecc7","message":"No, you should not use Task.Run in that situation. Instead, get an asynchronous client for the \"inner\" set of services (i.e., if it's a WCF proxy, recreate it in a modern version of Visual Studio). Then implement the \"outer\" set of services asynchronously using that client.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2014-02-12T01:06:53Z","timestamp":1392167213,"authorUserId":""},{"_id":"b121296b-387f-3916-9ddb-e73a5ffb3513","authorName":"Stephen Cleary","authorEmailEncrypted":"QwR1wWUUKen9oV7MGYCyn9z0JTQpXb7nU91dM9avN4eATzYTBkaPj2DI0E10rehGunOxM5zYMD5mB3C8/XPtx4v1g2WWQI9hhMu4oyuuK+y2iHnmZYGCpXqNlzVO1YhATR1WOFEjkm05lRKEgq72636yqrEMQU3ZsZEl9toVO+AuvquQy+gamVFvftmpK+IarD/OyLEOASm+81R62MmIN3zDubpicPv9JM5tWAJojB92ix5fVfIPHZ+aSJz6mWOYmcWllFFfAItwHTgFN7lKCoLukaJZ8AuvbjQmJS5U3PIsYkSslCNOLSPuW9nfH28OvNnFFd64ZOL7NQRavaOCI34UZVvHquzwSV9zikrewMqrN8pNc1lMc6+zUuSFCWnmOO1VNopH6uozdHeMpuEzPDAfMzXH+Z5qkFVYMHrjCRgMVu2JgNL+Mgcpy4eiBUs2eus/6UJyeBMf4vDC+CgF+lB47lzK5ph90Pnwx1uDpbbwfsoph7gr9YEWQ3RyXE8UGXZ4oJ5IHlplKtJ6rGR4g6DQkMFfQawsvFtDqvlHO+Nrfq03UsQsEfKFwuM2WZNDaPAYwFJ/pEFpyNcoBkTrQnR6HGmpoAtwqRzFVafcQFckwilCZHBubA5wBBIRGuu6SGOKH9An3AI+/9NRjjv5rre2mKXOQCJ4wPWWiR98K+A=","authorEmailMD5":"36e44ea0274d8207eb632c566e60ecc7","message":"Unfortunately, I have no experience with ChannelFactory, but from other comments on my blog I gather that it doesn't directly support async. :(  \r\n\r\nI suggest that you ask on the MSDN forums ([http://social.msdn.microsof...](http://social.msdn.microsoft.com/Forums/vstudio/en-US/home?forum=wcf) \"http://social.msdn.microsoft.com/Forums/vstudio/en-US/home?forum=wcf)\") to see if someone can give you some more detailed advice, and if necessary open a Microsoft Connect issue to request async support in ChannelFactory.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2014-02-12T02:16:01Z","timestamp":1392171361,"authorUserId":""},{"_id":"cf4afe7a-7b17-3186-97bf-7125cd86eab5","authorName":"Anonymous","authorEmailEncrypted":"BDlxuVxHkOvozJOe+bb29MJGMgaDrhKryJHo+mE4NZDNM7+K9mkiCmC/MSs6NG4hknF2gsX0dyOhsU9oqPAWMOda34fPUpW3x0yVcfx9Tmp2amMqgwLPYJHpZvZXENPo1bghfeFkPfULC2eGsOUqcyt3Gr9sP0pykeo4lkOI+ECxn6sLdAYWM/HV7HgrgSYqGzxELfc9z50E8mRRg4jl+sKB3bUO+GZFwqj8d6/G6Lrt4rAo8JDJgEe87cN54uLL+7RaIYQip2MzU07yOMG0zgCKgZ2wMDEQQYIw/BsLNf8u0q1pj3HIYWL7k2fNKgxp3Wi8MXUIavKlVyxNoCCmewlZXKOxxc7UJfkJKIIAyEkCglx7r6rNQxWft8gZv7rpFtDDumfldqFAOZ7j/HsPRj07BzeqG5mvBHaJ/NZc2o/CWLYHfGglTFuJqlyJWMK1xutQyJVvTVCxI9u6+826y+3DY526oEwjOb+1vLnc6EAdt8qq0DrvlE9ikVyQRP9qkerH6t80J8AGh6j1pVZemWoIEyMhBX+dKK62wqHwp+ju+LbBx2P6ZNOXccfjodBqgX4yJdDTLjj7NrCqTP1zT2q1QFsgDn9bznxTgI9Icq99DL2B4u9X0PeVDJJ188VHYkLW6fwmz82IYqqM6dvDFPfOU+2s6kSMiUPWZyNtazg=","authorEmailMD5":"3cb42db01b5edab948a576e1bf94a281","message":"Thank you for your help. I found out you can with a little extra code (cheated from VS generated code). Maybe there is an easier way. See below. No you have an async version.  \r\n\r\nGiven interface:  \r\n[OperationContract]string HelloWorld(string name)  \r\n\r\nAdd Async Call to interface  \r\n[OperationContract]Task HelloWorldAsync(string name)","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2014-02-12T05:16:02Z","timestamp":1392182162,"authorUserId":""},{"_id":"c7354d21-056f-3f7a-8c5b-282f258f87e6","authorName":"Anonymous","authorEmailEncrypted":"YM7IytraQ6KuMvRwJQdS6ov8p/8hTimXjMnu+X/d8oRDBYTSZhaLJnGmAhITpvzbLJnP954hg2I3GzaqU/m04gDr4zAv/ll3+xm5d4s82mG9ywpo5mCtMul/zL81j4sMhc/cF4rMCCwKkVuT+nbDy1LjDwqkA8hMo0gE2iZbslUUqBbA550z0PAhDQbNjzxH+6sgzOikBReZX/xaS4G4bDpd461ThJVCi4GUeopN6TMSoqt/MSPzynHXwmiVHHAy60Fo8g8Uv9CXPLTpTxIq/vdcqngYN7QE0r+N5WBuOiu7UhydDbD1eK4rykHe0l7xoxmh3v40/EV6hB3sM3pD1BBt0ZghqFdsYMhlVSh+jthUqhxzJcJ6adPg1F5TZ26CDMB3AMcP0Ib11rURSQCcfNeoFd1FLClyC5HJ7ZWAp+SmV6zEUw39RGXfA64mG5cxqzizSMuReBoyxaesHkEnRNPfgzY6h+rnP65O+c5HbqfzFLgl9ogkWeM1xhbuLSpSaOTzXpYm2FM3bR21eJ0BuKpIpTMa7tQGzaXKZtZT92YHoKIR79AzmFgc6Ag1qwH3/01lM2T58bA+rHZlyPdtuhpBQ1SL0QulEUpcAojdoznsHYZi2gr8KgG8Ewqh8fva7yHz4hfDsobRS4UpaGsKyZ1EX2jYwutQPJrN1tNjDyk=","authorEmailMD5":"3cb42db01b5edab948a576e1bf94a281","message":"Hi Stephen  \r\n\r\nThis is excellent for a newbie like myself.  \r\n\r\nOne question though - in your final example, how do you access the return value of the method you are awaiting? (Told you I was a newbie! ;0) )  \r\n\r\nMany thanks.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2014-04-01T22:21:43Z","timestamp":1396390903,"authorUserId":""},{"_id":"4d6bba49-75c1-31d5-a653-f4c56b14ea24","authorName":"Anonymous","authorEmailEncrypted":"JIlJOuTL4wAH6mzhrOaRLWoeXbzlrhlf0zVkatgnCvK25lA0WFnhWCmgChjWcryHSUm+NNjxJ9GweK6cgTbKllmmCDD7cV9LpuyRIC0W7CT2yo/mJYcuIMIEwq4PPYaYJR0/TXjGdJGwguGrgo2yixtSoDpISgTiGblczv7x0vRlrKTeHUrSQwE8KOPkLpsor6ERYXVazBKPLVUq2Rw4Jvb8lueeZmORd3lzfWdXNKCu0XBWfqmoDQePLIW+Um5/GC15TJk/LKmaNRXeB6CKcZ9DIb1C6SIzibTk00LbSgMk5BogG1u4BlWcwqHorH8W5N/GpOpN67Sgp2WcppU3JsKiC2NrSFZFC+SfR+n2q0v5+9NBG1wqzY85zt5u1QxEX38vcZY+hDJsiFJQmvE8LC2ZnofblD4t7PuZfkyolOGnS8vDCVGWXdNnbi6MrF9DSzBd9B0wYqf3ROKf4BHKnGvI9Sryw/rLtmEHQKjwJEGkG5KnBDmmKyO+i2Z7PuyGuHgv4vgBn/xE0KCtLGC7rKV9GIljAyV+dDQJc+oXime+OMs996wbTQHdK5sVFsLOI2/yMrJNf7wEmiHhPEIy+Pr5dQRG4KS3PEsSCVsbGxUa8PBxLrARYzSeOdLmFzAu4zQabjwTP/VOWgU4tDrqvVwUFTByqWoWaGYFxevo3UE=","authorEmailMD5":"3cb42db01b5edab948a576e1bf94a281","message":"I would greatly appreciate your correcting the spelling of Mandlebrot to Mandelbrot, for the benefit of us weirdos who love fractals and hate to see the name of one misspelled.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2014-04-02T23:22:10Z","timestamp":1396480930,"authorUserId":""},{"_id":"6e336437-17de-3d3e-bb7a-c4001cf992fe","authorName":"Stephen Cleary","authorEmailEncrypted":"ds9rjjM/A2NsPcxXEO3aAR0xObK0mwBZtwHurngiNjEAb61aoo0KWitSXkJbJ+nK6S3rewg3E/uwdBug/cluBJcItLERDRiJtZQjHxBbr+aMLxYT+unOq2K9uGDeN6Fcy9LoD3vn7CLdYzJOvU/xiQg1otqvUZgSTMg6dtio8venPN+555bJFeIDM1AGv9A1AkjVWS08xn9AYNbhgAaJn/OxJqP6OIzxPn8oAwELn7jJ8yA2aljm7E3X5FuhXIYhYgv82pqXj1XpV15y0uLFJDJNRPxBxsw/pgp73rUQ/lPu8086hjCFnj4aNdf5q1fSEofqMqJ3c56LtsYqSm+kmdCpkRar7kCYJrODO326u0Hmj/blOBaN/EV2VwX3BvIdJFkFSy4z4aKU4nDaNAG0FFAoeqEfriVR+hC8/4e77eVyG1D8qb9VkHptjcjDgKPbwZkHxR/kLoF+ryOJzDmy9pls/3/jTnKHZcVjy5nlyGjKQ/IOz3J7v9Fmgjqa9tpVsg1f+jiAJQz3Sv5/3MdKzZP+R9HMRsUNS0GIFn0OGb6X3nJaLxhCqgv5I1jrXJbJkWCTnKlTY2gU5du0Ql9Rh3pLNV4mbFZLfzUONEjCmvIS75i2uILADtPdDnuHY9fGxJjOPC2qsTHu1voZEox9dDkrbKdSYDg9AQJF2diWUbY=","authorEmailMD5":"36e44ea0274d8207eb632c566e60ecc7","message":"The code doesn't show it, but the \"await\" expression evaluates to that return value, so you can do this:  \r\n var result = await Task.Run(() => myService.CalculateMandlebrot());  ","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2014-04-02T16:47:27Z","timestamp":1396457247,"authorUserId":""},{"_id":"8253f2bd-3157-39dc-b061-0687453b7091","authorName":"Anonymous","authorEmailEncrypted":"Rze/pV9NrQNyfsTDqhzIWyngeViOkGWu5zo68PgMZVRmzYIIjDaJj7smu0VsbhVLtdpBy2oeetMA3mvGdLK3RRNntsLqvy+NhPv508+wEl9ZPrfZe0LpxtZGhN/ws1NQV/UrFXK1YXDZtMb6UWoHJIb3MduuuEmZP1H8GnvmJauUGH5s/UJSE/HDE/zu+ok90M8tRtL92AxtTkC/r0nGRdKuYaD0/4JhXkAXSzlWpIx5s8FfyEYzNcRNIcCULwxB1xA6y4ZrbOzcKBtqCg9AqDkwWjKDOhQV+k+Q6dgDvbZNvv27Sg9LNVmrXimHUCy2ndG9kaDjPgUlhWNIckjR/zSPN5pufLFDBRsQjrHSrT9EDOxJ2Qs3s1UjnNNAIbJ6mi7Lr09Hhleyh+Wn0YNujSXy6Ap1kSScmsXwMi7AmFUhx0k7HzyUP4st+By2auh4H186DMSIISQ4AaMfFGJgN9vghtRdYzoPyP4eEZ55CeGuI7RfkHrzcKpb1XHjQCj0soiARCdptelnlgCwjJIBMdZSGGHz4RwU43Yyo2u9vlNlSGFjUbKfjAfusoj+w/Ak0J5hIoZY9NogCYIvUkxFvk/gcaNCks8/1pQEDbJQ3w4gDCQKjcXJrNOo4W2hhT8pxX145QDDdOySE2ckSVcdA9USOoMZtshJNTbxk3cvBmk=","authorEmailMD5":"3cb42db01b5edab948a576e1bf94a281","message":"Re: Never to use Task.Run in [asp.net](http://asp.net \"asp.net\") - what would you use for \"fire-and-forget\" scenarios? A long-running process is kicked off by the browser via a call to an [asp.net](http://asp.net \"asp.net\") page. Instead of waiting for the whole process to finish and then return to the client, the call is returned right after launching the job with a status of \"started it\". The job is communicating its progress by writing to a log/database/whatever other means. The client, if interested, can check on that. This is quite common scenario in my current line of work...","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2014-04-12T10:20:10Z","timestamp":1397298010,"authorUserId":""},{"_id":"a1d61cc3-6e89-3855-9d37-b06c6f2045c4","authorName":"Stephen Cleary","authorEmailEncrypted":"uSlbGpVoyY6RfvkPtvx4vw7RMTcgeZ2V7gjBrmgb5jqCXbhThCbhsk0Pj0RRmEKc1m3urO5p8TuosD8yMopk3wBPStEA0gN8NwkbkPovPZWg2mXpmMMyCINhg4+Hj44cVaV4io69+smByK4xwhxFYXRTKRNsUyvrLx5VU+1jm5rQzssbb5X2gTBf/Bc8vJA8BXVbxz6Am1pa5qQA6X9td71ef+SmPXfDw4Bhjoif0Tp2c0bzXbHHxhLj2cE94CtwotKdSZPJGx31nrMDgENHk2b4SSATHUJoJu9YUH5GOCUXWiheGDkbQrKNw9Tquo109Pw9Kmw7UmTGBqH055o6AgT2shUyvNufgnR+uiHcLYiPtZPStNtkpmEE4uwhSurBzH3F4QYqFVNeH6L1gGktX3crG8wFztMhCdizBbjX+iB1Wszht+nVGCKiXBjvtngtnEK1GNOnjdXv32SjsdUJKCBSpHlbePq9/lK3zc6KRdwe+Iy76MOP13SoiWJ5MdsSBSCqK1Yr9xqQqap/Dpis3AmjZoGB/Ciqx1t1SxJNDkxYvvulLbN/VDNH++ymEr51BA1qUKFYme7Xr56vXpJtEEGn0y5+vxOaRYq86IDKyaMhSuofvcjce71HtOaPt5hvjll9xc40WQgEqqy/ZbcpNs6UXlDqGvy96W4fTXMvlLM=","authorEmailMD5":"36e44ea0274d8207eb632c566e60ecc7","message":"The problem with Task.Run on ASP.NET is that it is dangerous. ASP.NET is centered around the request lifecycle, and it simply wasn't designed to do work outside of that lifecycle.  \r\nI go into more depth here: [http://blog.stephencleary.c...](http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html \"http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html\")  \r\n\r\nThe proper solution is to have the long-running process be independent from ASP.NET. E.g., an Azure webjob / worker role or Win32 service. If you insist on living dangerously (i.e., using Task.Run on ASP.NET), at the very least register your background work so that the ASP.NET runtime is aware of it; I have a NuGet package that does this for you: [https://github.com/StephenC...](https://github.com/StephenCleary/AspNetBackgroundTasks \"https://github.com/StephenCleary/AspNetBackgroundTasks\")","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2014-04-12T19:22:11Z","timestamp":1397330531,"authorUserId":""},{"_id":"dfee3e52-95ad-36a6-b0fa-2d5316c3078c","authorName":"Syed Danish","authorEmailEncrypted":"a2WXD2742esro+TsqM69Bl0lmsHWkGG1PqmsLwCtcs9tr4sLdLWhMuCtxcOycmiyvieORqboIJAhIIbrFDiIKp2V3O4uH91mf2MI82ryuAao132nLfIVPtA5u64353CeoLCWA4iijuamXxlgu1F6Us0eC7SKW0hUjTa80EbMO8fNBT9gZQNEfn0OktUIHyzho4AqDyIIOQ4f2aGKLFFmdEuTL9lNWeoxoL/WidhIhyaacqUg2DToMsktn66Wm8n41E70g6yarVkWoEgyKFaVYEIb6CzXYUNU7Xz5yCoPllSF8Ea3F4iWEojgdSktOBChFUqpDaiesInXCRyNHpBMUdRCYk8JeTYRRi3/ZbsEl7Ns+JZWxebMHh3Pxw+t6WUiSdz8pXqMkWXwc5+9bMJUK+0dZmHlLiruKF6OMJsT5ZcBmUXadFyrw8JPRkoe0FiWTr4+X5pfzNOHI+6emn/ZKkm3sy2mXCPXH0PV4dNaOk4QvKmBNIqlZ1oVcRSLEv0zXRpca237vdzauWCsmhTtXGEqswpAAD5NnCrg2JA0NzT8qe1LG1WoXN3BnGeqV+BAJTGyZzju1sy6mGx5dYGVi/QcEUMNYuCWtgYuAvOgvJW6b2ykISM4OLny3j5QHoc0a0EUA4baPBB8xL4fiY3PIsAiYOvhH0pQ3zCmhg4qsfQ=","authorEmailMD5":"f42a72d73e8c6f96772b39ef0d661325","message":"Hi Stephen, thanks for the great post. I have a related question. If we use Parallel.ForEach within ASP.Net and as you suggested to expose the methods called from loop as synchrnous, wouldn't it still create multiple threads using threadpool resulting in similar issues as with using Task.Run in ASP.NET?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"396cfe1d-4c3d-3676-9966-e57238c84aa2","date":"2014-07-21T19:11:14Z","timestamp":1405969874,"authorUserId":""},{"_id":"2ed7433c-8e66-38cb-a92a-275995b10f32","authorName":"Stephen Cleary","authorEmailEncrypted":"iY8GwgC1PC4IfInVT7jzJ6cGRM+ATM1hzjOWZ3szVKBexcOsNQeL3ZqRGUaO4WDnmi5HoTVX11cHejf98rfLpD4GF4r3gQQ+qC+4j65kyZKd9jd7cjB7OViEw4+BNOMT7y2wlWGiMcR2JCK2m/ceYRO/ZH5sTpyp/i5JXS71wI7ATUiiySyfeo0cxFwZD93Qu4bMKOUuNRnW/8V5gQnzsiJYnlOSdt2bNh8tEZlo8KEzwqBQ+tHb76DvVtIKmF19kY13IFtluCoa+W2od0c3pJDxLJPv48aVjhB4y5AUteAQMPItlCsp1OQcKxdsCigUYJLK9TENChE6KI4LvFWLh7h4zcsw2aqGkXeCnj/fp28DHEF07f+DdOG427QLnIqL3/yGNrpjy4uiuhV/MUACWI5uzL5QE/u/7fPof/0816pCXGI1FkjbrACpoI4OUL7BWylumrAcUpg1yNJDwspcm6ORay/G6uAdI7pTQm5dun+nKBWohWG39QLwkJdSey7JStHSKJ7N4fsElZLlWejQRsvLZOK1142xNcDejFiLm08agK9xpXKoyRlaLVfy5J6WHRHnhy5JV9DASI0cQLLJ2+EcK5TrENg1PrDx0yR7OFVfk+BaU4JK26dvCQoJjo2expc9cz7kk7h6UAh53fnFd7apCK17r+ZykXPg8Z5+oNk=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Yes, it would. The use of Parallel (or PLINQ) in ASP.NET is something I look at very skeptically. It can be useful in very rare scenarios if you're positive the number of simultaneous users is very low, but most of the time it's the wrong solution. Task.Run negatively impacts ASP.NET scalability, and Parallel/PLINQ negatively impacts ASP.NET scalability *a lot*.\r\n\r\nSometimes Parallel.ForEach (and friends) are applying the wrong solution to a problem, in particular, I've seen them misused to try to do I/O-bound work concurrently. Other times, the problem really would benefit from a parallel solution (i.e., it's CPU-bound), but even in those cases I'd consider a distributed system where ASP.NET just queues the work to be actually done by an independent system.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"dfee3e52-95ad-36a6-b0fa-2d5316c3078c","date":"2014-07-24T18:58:47Z","timestamp":1406228327,"authorUserId":"disqus:stephen_cleary"},{"_id":"128edd00-e15a-358a-9298-e12e5d1ac8fe","authorName":"JayJay","authorEmailEncrypted":"ku8/zSz1pLfWYah8cvgCaDFovAuqpx0KX7QSCWLn0Pht7kRd0CAeT588VdkibSsSlrrA4rtobBX3xBZeSvKpZdQ4zGver5jra1Sl8M+iPz2ZwsCFSSfDDImKSsUIHyLZnJP5pb75m/l/cemJQ9zAW3lsZ2S1uegxdH3BeNsOgkygS2yrmZD4MzVBepwgGnAEdaBk4qB8piiu0/UE53yhi9EvAAIc43eBraf32BaIGg+ZnKEVRcaacEL6fgkkPvG2Xt/GUwJcJ61tIK+piKdDnEF0ZLFWF+IyIv5U4Dkp33FiDyl6HKuU8kotzhENA4zhdR9y0ssnnUG4SeDL6+Y+77wg4cersC/aTlOuK9ozPxLbPl4dfhMx0nAB3sMeTqBSoGviBkVIYMoWadC3SrMY9IctREuhKWXNsChUpr+JfnfDzccmo8lL8ASp8Lv/Gn6G7+Npg2P6l2oKWn4UjCwZMhRJ7lo2qkE5vZf0QVT3A/bS0HYAuU0PrE/PtAtacAgYD+UtbihAN1ARdvlh39+e8Q5RJBfSH5ouFCLdHNe5DzBqqWR0jxA+TZB7KCZT9NlkoN62+MAx6vvgU9rFyUPA4PMu02mqiAjGh4IV1VRAMxGblZrpXy0e20hW0Ki3HFPp9JBgO7VGG66B7zmTPccSJdq4CHaXoIZeWk0X6NCbGXI=","authorEmailMD5":"94650813e5fd38111f3bb5d5e51ed200","message":"I'm a noob too, can someone post the syntax needed to access the return value from... await Task.Run(() => myService.CalculateMandelbrot());","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"c7354d21-056f-3f7a-8c5b-282f258f87e6","date":"2014-09-24T06:42:32Z","timestamp":1411540952,"authorUserId":""},{"_id":"82098133-c381-3c07-8c6f-ff8266d80345","authorName":"JayJay","authorEmailEncrypted":"qe+STUoq7rsVzDyg+0losBBQDVEUYu9DQyWC8TfNyrFqDxBm5x4KU+rWcJNuAuJqRFGHB5GB/4cHdCGnoTjkFyylfjwGodWrYDv2ny/zAFfIRwZT5gkBpBum/8nYhWSI/5ViVMuDU2kwHqLsH2XC8Zk8FhAG7K6OMNbkipgZBm3AW6mxjwFGvxiOUELIM4l9lFtsFgJw7NDvzdVpEz8U3bPiMW8mhDo7qSkdv1z4vLrtys9BA6/pBAacocPq0cz0p5ZDz6dbRnCvGsvpa3JOhVP49tm0VXTEMzFaVD5oIJoHoUu8p573YTeJEXqRhZucX/N0qDBF5CdjA8U5/IK5QU56YwflaCYUQ0CGH8TKAVyW14KcHf+YnQ77fi0AOAr4ukfYMNE/ackdXTKMvX/79l0x7if7PA0hBGF5Khh9J1H143ufvP+mVE33GeLNmSBxlB6Sg+pT9uWVvxdc+RfhmEYUQIU++Sjb1YZE+eamIDr5yVNcK+99s9Wg85dPngTSvcO+B6a6JXhy0U6uDqjRZjtw0YsS7pDHhYct0xP5d6LNXYWIUUwT/wOORCYUK+CiniTSVThIpMWpaovc7/PfADY/cSmE9cDtzLaELLuS2/cM0Unnc+6Gg2MmCI6fpLfrd1+KmutsSk2J6uhWVLx/9fUOdRPAOk0x43j6OacIceY=","authorEmailMD5":"94650813e5fd38111f3bb5d5e51ed200","message":"after some Google :)\r\n\r\nvar val = await System.Threading.Tasks.Task.Run(() => myService.CalculateMandelbrot());\r\n\r\nI tried using in NON async method,\r\n\r\nIt looks like an async method MUST have an async calling method.\r\n\r\nHowever, this call works from NON async method...\r\n\r\nSystem.Threading.Tasks.Task.Run(() => myService.CalculateMandelbrot());\r\n\r\nMy question is can my NON async method get a return value?  \r\nWhat would that syntax be for example above?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"128edd00-e15a-358a-9298-e12e5d1ac8fe","date":"2014-09-24T06:56:14Z","timestamp":1411541774,"authorUserId":""},{"_id":"a15cba39-1a6d-32b5-8355-fb737e6fe478","authorName":"JayJay","authorEmailEncrypted":"g2YiAMpwDFmJd7liQlKpE9ljWPx6VK8pnXud7cPTfFhJmcRQIRWoJcP5legh65tM44Rg/YaBYMB5U1hjekuwmK4C1aM4zWqt9EzO+z8m0SnSGVhvKL4ozZs/WzKEksSCfR3VCmXrb4SmFg0o5/b9h/kMPVfq1UM+WqBFX/rzh7PZMHQFRT3RFoDRE8o7W8KdIrwKDBIVwFuvxBo5fSOMHIO7/uPRaqgggVy2K9c1XXXGhldkw9lo2C2Kvq2LIFBZXVH07RHuknXTjswvn+T/z1B6rrIZWXn3C7UnXnzrltf81dcxZaz50VNuEbjNMZagvdUj/l1690wPPNXbN08KrnyrsfLimVkMHcH0qJrHOw1q3zb8BiURUgQgcrHUdMZ++lfFnYbGJo4V5D9eJjzawu3G2B/eKMvpo9N1uLMhfoPkxmk0YcXEgzI4aWMY2gY1W5WuDrISkXDmHlyqU1ZOwyKfJcxSLmsWxNjXmrEUmUENWxV+wELJ4QRH4oHSn+blkvVRlIwG6ZTkH4LJg3LSi0xhP4Zc8IRK6PFAhxf9mHSLQPL6xEZ63zbKlaaNNtX5qBNYttGyuo7NFCSg6251Lp+ig6dCpjAsv//p5ZqLE8b0vEa1Glw2EjGnKxeKXeU4y+UtJwM/xPtSEUblJcT3NYhQiQpszvA6ZAmXVDNlgJA=","authorEmailMD5":"94650813e5fd38111f3bb5d5e51ed200","message":"Thanks Google! Hope this helps the next noob :)\r\n\r\nvar val = System.Threading.Tasks.Task.Run(() => myService.CalculateMandelbrot()).Result;","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"82098133-c381-3c07-8c6f-ff8266d80345","date":"2014-09-24T07:05:50Z","timestamp":1411542350,"authorUserId":""},{"_id":"ebde31fa-cfe6-3251-9f3a-673844b81353","authorName":"Stephen Cleary","authorEmailEncrypted":"XvgoHTetJuMjmBwDP+2Erm2BJjLNhriKWh/QIzufgXpZC+fd/jGUz+Fyz2QAllyKLOTkkY2bEhyQH6uE11ivQSibbFbdurwL2uCYYS4y7/yFuMdInNMFq1jiRSSXat0i6TeACrYgUnAGFO1OSXEbLQ9dLRhAPR5jlCPZUYhIs9KHGvydKZrmGIvpPdLqj/hn8hFvJrrJh5TchYzC7qp2N/wMran2g//v3lUNAZKKCjo9FvdQddhotPy1/GPO0hXlIm4QRmaSbd/9iK64Hk6n/Nji6mHTS9iMgR30/eBlCLUbI9L0PQB+DmtscoJ7YMeGT//xtRlZqxGbhtRPMlK1+fIuSD/d/DbCJBqpNzX7rL7sr36l9ChObfQPgAy247X7RXdAMPI5wadZ9Jpg/Ix9PdNd1ioZrJ3KGV8p0ljON3f5GBaGELbc+XElMOXJCm2jbt8PEEVf7oB6v1BuRIlIUzDqDSHQQiyy89TGr2pGpsldYn+Yni03kXAHelUhKFoiaVALvsGuQCHPhnu4WVDhX2EMuQEg1X0oD8WT/vR1VKQC30cFSuEehg0OY6nWamJkaf6ljRKBxfsAmkP6KyQL/0farY3d+Gdblp5gpvYUb8pHRYP8rZKmdPfoyho8XTBDDxyag+xv4ZeK54hG5GGMEVTX9fZYZOiZhcWdV+pqHMI=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"The next to last code block is a code smell, yes. I mean the one with the comment \"Warning: bad code!\" at the top.\r\n\r\nHowever, Task.Run is almost never proper on ASP.NET. If you're on ASP.NET and have CPU-bound code to run, then just execute it directly.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"ec7da148-e068-371e-8be2-f4abc0dc9b54","date":"2015-01-06T23:53:01Z","timestamp":1420588381,"authorUserId":"disqus:stephen_cleary"},{"_id":"ec7da148-e068-371e-8be2-f4abc0dc9b54","authorName":"Joe","authorEmailEncrypted":"VnNnkaELuIOmahp5EdN6EBp9P6TqCuoT/Sc+olWXDEHQseJFF1QXM+AvTGJSfaVun5/MFF4gN3ii6wGuWiYWbQVw/Zm6dkIrEnBp+Xd1DwfJiDiThG+DbWbDP7+iMnahzvLSUhXXWgcLXBT/Y2iPUzFPGr7NjN+LbprTtoH1UVTfwaWhJ+L6uuLybmUAIMJ80uA/zLrW6ooA2Fi0kdnKotKKNLkp8TXVZgDmgsasXpSquT7szIkzk4T91bWx3CftcN98V9MQLVtaXDGxRLQB1DWed6RN+oyarX6hpdjrrL5FZLRridY+QrYu1t93H9j7IO2j+q2AGa69LncWScrE3ptoo+p336sSQDZ+6nTtoUmWg6JpvLc0JnjD6yBL6bvnmjc87bUi5LYSOup1aBQepVz+qtnp8kFmxcjppEvDshSb7GehXLeV2K9bkSWIDIob7Tc7PlXvZ1qBJF97SOV0WkOXb2L/85vCYMdCD01CqiCxjSGKGKIao4aSMRytTu8GVRtlg1endYEu1iwjg93g/gnD5RJFq8LRWHmxu5U6PAOgDLOPdDXBQL1IpQXtaYpR4AMpXvaUWnMOGvx4g4BU96wzpaf11GVKhuywBhdTdLJ3CraC/Vd0ICYQKw5+8+f13CDTV5emucmwRVk/+g5ped8GvS89QaGYjbIlj0kjS8s=","authorEmailMD5":"b81336eeee69e3ccfc442e587302c604","message":"So the method without the async/await kewords (next to last code block) is a code smell, simply using the async/wait with Task.Run is the \"proper\" way even in an ASP.NET context?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2015-01-06T19:55:26Z","timestamp":1420574126,"authorUserId":"disqus:disqus_ZRdO2egxCJ"},{"_id":"66c0695d-1ff5-3511-a349-2ca01dd5af68","authorName":"Stephen Cleary","authorEmailEncrypted":"WCHE5Atqv1zKT7pN155ScPhukxmU/36JAhWWONP0YNd7gzrUktNSQ8iOyhZhFG+tP/KTLCSufJpGWpMwv/F2rwBErqo7XnwlvvqZm2imO7xEZiseY8lM52Jww5TzsmFUK5pb9HebLtEExoxqi4lrzmPtm9RNlH32yxPmDUljntmsd3jDiUK5gnovIiCuyuK0Whc8LRtnnx7BhJICt++itjqHXO40bWeZbXPMidnl9bjgZLPumK/WEImbESR+JkWXC2xs1U7ULdG1TDqrYl1xiFbxPBOlb67sJFsVP9AgrhadAmqIyprWI3IwAG/4RlWQaGJ/XsBXbJaCOq4jJ2Vpdu5DvB8rOOHuREK4yruKKVbdXlaq0415rYoexd9SuM2EEuyLjHXCCviAlqh4C2FwFQTJ2RLsFTERh8TO3oBLErPHplSkfbcwLureG0jI/upMRETt6TYEY7jHxZrd7/S9AmkacOX4u1Cdt1ALsj9OR14Y2a6bwVLm9EVBZIl07LCyppZ/bKXNPYKFja+VI+xe3xce00cuAFQrwAg4M/A/Isu2bcR6oXPTUBWaJL1Nl1r95T7DHq5IO02FahKvX4IVoyL3scXuLDdaUOjCEGYaLZLAy4dx3cuUYXmkCkfJvUvZpDTyvR5pi9SJ7EKJrz7iW4ANSA413GcJa6Vxwu/iu7c=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Yes, but I highly recommend that you register those tasks with the ASP.NET runtime. More info:  \r\n[http://blog.stephencleary.c...](http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html \"http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html\")  \r\n[http://blog.stephencleary.c...](http://blog.stephencleary.com/2014/06/fire-and-forget-on-asp-net.html \"http://blog.stephencleary.com/2014/06/fire-and-forget-on-asp-net.html\")\r\n\r\nMy AspNetBackgroundTasks library ([https://github.com/StephenC...](https://github.com/StephenCleary/AspNetBackgroundTasks) \"https://github.com/StephenCleary/AspNetBackgroundTasks)\") uses Task.Run internally but also registers them with the ASP.NET runtime.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"c6dfcfb3-d041-3e23-bd3d-148a4ddcf545","date":"2015-02-20T12:57:28Z","timestamp":1424437048,"authorUserId":"disqus:stephen_cleary"},{"_id":"c6dfcfb3-d041-3e23-bd3d-148a4ddcf545","authorName":"Christoph","authorEmailEncrypted":"AnDsZuK/0SRAcr1pRtsElDpec44swJs1Dkyu0pZ7SlzEBHD39xPH8IfkneWhXIPAk4AqGE1fO2OmNnEQgZJXWUGmcTbDu3YXcOEJoe1jwyFlZXmjzhDnPWiwWoqJUpg++OlWxFEi3095g2MiyqzCPGek8Egxt7HvB4fChai3GTiLvlmMD3o+PXeYzD44zESj8YdwGyaC4DrGvR7Oo0er+MYD5UIzeHn1IP59lvX7rRNilEZHlYHTW120CEuXQdbC+BWtQh/FgUdZfute0eNDUM452R4iQzV2KRcNwIUV+v0cTD1WShNA+Gz3LJqy0W3VnU+tmeEaY0CZnbzn3XzuHWl1sH94kq/LrSevPjOm+oG5KR0TKZJVpPD39YX/p7+mO2ZbbSHeOIYi9GZS4RQxoZI1bJa8EKU/cEL8Fq/j7Ai4B6I/oINsVJRv970mHfJkzsfOFMMVpLgdok3vDZ3RFf9yHKXIkJ2/73zlBKJVW+WAgYstDDOiQ6T2nxyDc9dRQw9JW0bseCK11H+npyXSdSZZnId3EZpB9ObadoEuxFcpvfqBtmpPehzGcsVftDXV88HVYqssG4xIf3cQjZPPuU9FRtYjVLLvAmQ01rQBUb97Wt8fubjwUJfvEADDEGnR+fVlFL/zuAU/kL1oV6Wa6iBwlXItaQ9Y93dPQA5412c=","authorEmailMD5":"104faa3833e870e7f3e923d5da121529","message":"awesome! thank you very much!\r\n\r\nA possible reason i can think of for using Task.Run in ASP.NET applications is when using deliberate fire and forget tasks. E.g. writing an action to an audit log where you just assume it will be successful, the request returns to the user earlier and you don't care about letting the user know when auditing failed. Do you agree?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2015-02-20T09:55:17Z","timestamp":1424426117,"authorUserId":"disqus:disqus_MRSL3chIFd"},{"_id":"c8ca7b10-bd26-32ce-9251-d00d540beadb","authorName":"Christoph","authorEmailEncrypted":"dxAxWoTlvezz7+OgNWQ5jz9rQ6OpgOhgY8X7pXKKyZOEodaubz+xvlAjQM0vj8OT37oxCz8gX4pz3d0P3ZFb5g7BssY0ogpLUb3gDt5OgZUhG5j3/4W14eXUXS+rjiS4pvdOzZYjTjekpgVV7cF563ye++muGKj2pAQqEBL5i8KMg5kqOItzck+o+QtT+E0ESJ2w4HEoBxZ8VjOc79ytOlu5SXdQSsjEx9QAXFwc6yHdLe7BIgKKqZSu/hYvKxzrQariFMJPgON7THwjeMrWiME6AtwyIIsNbFYKXQmsA4tT1C8Vqrz8xDk7hjkDJkH5q0sChSYGQzymv6Q0NR1qKEljvDgoHCKe6NWgIWsDGmlkmCbDrC8D5py+pcVYCGPBA1nphnf83C+HDlupV9lTwDk+VaeifqfKiOAS6zLeBDHLHflE0rz5/fBbL/knDljN/tXeQjizqCQuSUt95K9SIBO3jpB1EjMLKbxPTVpHiC5ZOl6ZQi1rGADbn86fUZ/k3shEN2dp2pm1O0LU740V17YNTmx0ygCPUmqcp2TpEmkpOKCHF2bGpFCPMwKWxfZ1sms6vVPuwK2HRfwc6TUlSu06olxC3UWPieTHSan2zUSV6ZnMPShoXXx8olWy0sQ5P/UzvOEW+4Etd9OdS5cu+15TWONRy26BY/2W1W5uTKs=","authorEmailMD5":"104faa3833e870e7f3e923d5da121529","message":"Awesome, thanks!","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"66c0695d-1ff5-3511-a349-2ca01dd5af68","date":"2015-02-20T15:41:34Z","timestamp":1424446894,"authorUserId":"disqus:disqus_MRSL3chIFd"},{"_id":"1b009269-9fbc-3d74-a18b-787003ae5535","authorName":"Matheus","authorEmailEncrypted":"T+QA7bJX8ofviKapXl5sx5mDzABoWtTEek3t7sPDiWca3WY/uTQGCrKbUf80xXwKpFCv1PRkQa0M/RwB2gnVOZa/af/TdJnFP9qXLBtHMUBCf6Xyiq+MU0eRASoqTCaxO+RwIZh4Zxzs3BUHAsh3zytrcelsUpUPJDxiLfCWtVVv9D/OMf204cBmy6SqyFVKn4sZcMR8csGIJ2hEwuWrWof3odTfNLxre5aX/3NRsyOW361T+srarXFM/rbi0nyF9oztpBY03KzJ0qh71WeNunqWGX75IUQJA3B/Pjqy6DpNNC9XJf+IhBh0VZgl84l1NhTMgaw/zD6F8yC/ZQDLRtDNc9vIeUf+qTFSekuaFvRf8EuSvyObSS3xtXdCzjtgnKdsd5ZosnSEli549V83cgAPPvFDtCtJNewuYVBUNJcvlQnYXy6ZrsN7AF6DriKlYGdSopuitEDPI7+84oJ/td7ejmqAclgz1BQo+CsBtogl2i//VrrdCnrtYTJkyWfmmhopHWcbi5m+kFPqDMl+zm/hAwow+Wufrvui6kH7LwRYvFbaFOLLQUAhv6Y31d4d23l0ggztpB2T1D9qSNKlq+f+MZqBe9TfTCb9DL7yzyLAaymtQ66jXISe+vA5RUtO2Ez56TYIwVzkkebfvTEPRaWxlqbsg3NmhPorERmu0RM=","authorEmailMD5":"e62768a581a216bc55c95e1733cb9dd0","message":"The way you said about Thread Pool and Task.Run() in ASP.Net Aplications sounds like \"Always code serial, never uses thread in ASP.Net apps\". Is that so? It is preferable take a long time in a \"parallelizable\" code than actually use, say, Parallel.For?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2015-03-10T18:09:42Z","timestamp":1426010982,"authorUserId":""},{"_id":"4bc9cf90-b3ba-34ad-8ccb-d2dc1c15ee2f","authorName":"Thomas Tharp","authorEmailEncrypted":"NVwIJ379SoS1xudtuNfZQzpDGtc3njVhm/Oow8nixG5vbAo9fSyNv2ya7VBU6mZLrKDWng5eI7BFK6po6+fKzQ0YKPvNXCsJsNeI7KPx1xd22MjlS9kI0sAaUbcGOT2WO/87bc+VeP6f8xyUt8RTFAiY6x3AU3jd7pyB7BBe13djZl1mqM86lbOMkaK/lGB5uA+PKgnwvtxilRbGUKD01ZvNkakVRGSPAHJMKlalH+K4pcVJjLBsbugMaANQ7n7h3E6nLODhASSLfGpd2oyYSu49AqoHS7/hd4ZSTp8FgdMErFYNEdk/Y8Zxm8JvQFXQtP69JKlkFXSflIzrQ2YHlXjJbeq1yZ3tROo0L5KkcJ/ezMez71Y7aXaYStfojznFLOBJt0D5dijeAv4CtZ4p+JWdBo+mdNUzAazpFEw/XzRpTvGUsoIoNFNTMz/N8u1eJTUaMDpX/yeZsct/u/zCNnknum0TJXSNjQ9RticjmSblqpDT7bB1AuS3PvjBsBIJxMPWteW3BQBVXe7xaabITt3cdy8HiIOffwoBe+vJQVPgT7mxzg8Z28G9UruZqytxWqsZzLrnjE0nugHVKVq5NCwM5LtARIIt7DSYh9sVHoWfMkT0DC+0VoxZ/2nPKhoKBGxDhoi6Ls5Y6eRtlyVOM9Y9DvzaMfMfQc6/ETyPHDo=","authorEmailMD5":"3190c7cb5200e38ef7d74502562371ba","message":"Hi Stephen,\r\n\r\nI have a case where there is a database query that is naturally asynchronous, and potentially long running. However, there is also non-trivial CPU work in the processing of the query results (~200-500ms per query). On a load of my ASP.NET page, I may have to do a few dozen of these queries, all of which are independent.\r\n\r\nMy question is, what is the right way to make these queries parallel? I control the API, so I can change it as much as I want. Originally, I had everything (including the database call) wrapped in Task.Runs, which guaranteed the parallelism that I wanted, but obviously killed scalability (the site could scale up to a few hundred or a thousand concurrent users).  \r\nI then changed the API to make everything naturally asynchronous, which helped reduce thread-count, but ultimately negatively impacted performance for the low usgae scenario (as the CPU bound work was no longer done in parallel).\r\n\r\nIs this a case where it would make sense to use Parallel or Task.Run at the top level, to make sure the CPU bound work is actually done in parallel?\r\n\r\nThanks,\r\n\r\nTom","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"2ed7433c-8e66-38cb-a92a-275995b10f32","date":"2015-03-10T17:33:11Z","timestamp":1426008791,"authorUserId":"disqus:thomastharp"},{"_id":"5e2a02af-23d2-32f4-b33a-2dcd21fcebc4","authorName":"Stephen Cleary","authorEmailEncrypted":"tfBEWNtTJgvk1+c+KPNWbntCfjWD9MFolt0toD4wLefb0TorV8gsSz/EKH9IoY6Mub2vPl2937tLqkdTl5X+Or1B/cajDS/T2QqgBlnNd5scwivQjoH/E8xGiiFhOFRMuuYYirvleKQKcKLgrAgk90tnL34B2u7GoJUx6skpT32Gp7YqcbAU5mDoaisdx3OyuRAmArbCqLHLepcSYkV9TU9C7Lwpp9R9OSpAazXpR+tn1quLYvdvA+rwat/UX4oVywkf7vzJ7qJBOHOn2zla46beTHSRiUzs6u7C4p6rRiZ4DK13Wy7xGS6QLvGfla5bOurD6K14Qs1GRT7+Zl0yW1fvPGO4fC9wt3a56KlYzTAroPd+qGyPpBh1FvCyTwVflI4wMwXks01RDljzXL0ghksvLq9fJA40aBfspZs10q/RJ4eftF6sQIUDgOYwpWKQp0hMAr8Dp+6JXIylVgsc0fl495VV3kMWMZjWa717vbsB9lYYhwlL20f8530o2zz6PQpe3RQ/GUO875oe2x6mUxZXaJwzbYG1VaX7sbRsDiCYr/wgkMhZ1f4uEMrQYWvHb/sBudr/N8C/V4y6tsUH/C5n9Uh3LaXlqReeqJic8xHKh1S1RS+Fa6tsmMvPHKnSqQhTm6Z7d10OYI49lsCw1Tf/muLQweUdEaDaqhagspw=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Hello, Tom -\r\n\r\nI always hesitate to recommend parallel code on ASP.NET. Asynchrony enhances scalability by reducing the number of threads per request, and likewise parallelism kills scalability by increasing the number of threads per request.\r\n\r\nMy first instinct in your case would be to quickly load a shell page and have it dynamically fill in the pieces it needs. That way your request handling is all simple (asynchronously do a single request, synchronously do the processing), and the parallel requests are done by the browser (which is designed for it). But this may be too much redesign in your case.\r\n\r\nMy second instinct is to try to look for other solutions. A single page load requiring dozens of queries and several seconds of processing power? That seems highly unusual. Does the page really need all this data - maybe split into multiple pages? Can the processing results be cached? Etc.\r\n\r\nHowever, at the end of the day, you can choose to use parallelism; there's nothing that will stop you from doing so. I'd recommend against plain Task.Run - as you discovered, there's no easy way to throttle the parallelism. Similarly, Parallel LINQ really likes to assume it's the only parallel process on the system. I'd say you should either use TPL Dataflow or the Parallel class. Parallel works best when you have a (complete) set of data to process over, whereas TPL Dataflow works best with a \"stream\" of data. Since you're doing multiple db calls as input to the processing, I'd say TPL Dataflow would probably be the best fit - that way, you can start processing as soon as the first db call completes, and add processing as the other calls complete. Dataflow has capabilities for throttling, but by default it's \"wide open\" like Task.Run. You'll have to play around with the code a bit to determine the best throttling value to strike a balance between request time and scalability. And document it well, since that value should be changed as your server hardware and/or site usage changes.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"4bc9cf90-b3ba-34ad-8ccb-d2dc1c15ee2f","date":"2015-03-10T20:06:36Z","timestamp":1426017996,"authorUserId":"disqus:stephen_cleary"},{"_id":"84156983-5241-3b16-a985-6b16c6d9d40f","authorName":"Stephen Cleary","authorEmailEncrypted":"HdHyrcJHlQdzObgsloXb83rmswiFXHFz85jXDlpSp4qc+u09QuvQPseQf1UPayb9baG+1P9AzTMPSmgufLWTZ6GpPJs89ctRcKv/JqnE9jAFY2QxzFluG1nXjbPELtlAiOhP2rAspqtTPnrZZXjplR69Aw6uoaZCZcIzVmjWMIObAfnbRu3dS9WDdcYNjOBkYLJlXRFtaV2Kw1VhweRkRg2AMv4lE/ZuxunTG0MApkybK4HwT4Xmk0uB6d6QgHsZwrUMmEMjCStz7Q0WrWx/jV1ofhgkmTUEMt4poWFw3WuZUllDxHU2bgSn8DOp2QIh1GiWJ7usVWsmH8NwLCcIixGlCsdt6pIYMFgdeej7Co4RovsE9P2nHJxa4DyaCIb9v6njoeynltE6gmPO15jDTrth1amnp6CyQ9Nsx5EXpbjUQWTHIKYtsTOLTyjVDcOZgkwcawO5MWIObkG6UzQn18twCqpmP4I5DqsclzE3ZiXo2cgZlgNnCmNgS9qtTyEIrvUemA9PVrmcYqbO3fLg0ApVAj11yJEAvqc68acrCxL3V0Yfsj90YhecSZfW/bIWrmwrVQJ77aW5bXIc4efD7WLPcbcyoicnJ1ZSe0L5SEAkwM+ItsMibjdwbCjAU2FZCmg85JEnQUGEa+BSwq8R7xtEZISRZdundVVqxjXdyoQ=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"I always view parallel code on ASP.NET with a healthy dose of skepticism. Parallelizing a request (that is, using multiple threads to service a single request) will help the response time of that one request, but at the expense of other requests. The entire point of asynchrony on ASP.NET is to enable maximum scalability by using fewer threads per request. Parallelism would have a serious negative impact on that scalability. You especially have to be careful because some types of parallelism (i.e., Parallel LINQ) by default assume they are the *only* parallel process on that machine, and will try to scale out over every processor core.\r\n\r\nThat said, using parallel code on ASP.NET *can* be done. For example, if you have an internal application with a constrained number of simultaneous users, and there's nothing else running on your web server (e.g., the parallel code won't interfere with a DB server on the same machine), then yes, you could parallelize a request. I would be sure to make note of your environmental assumptions within a comment, though.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"c4987c90-02f8-3a49-8dfa-2badf9d2caed","date":"2015-03-10T19:49:05Z","timestamp":1426016945,"authorUserId":"disqus:stephen_cleary"},{"_id":"c4987c90-02f8-3a49-8dfa-2badf9d2caed","authorName":"Matheus","authorEmailEncrypted":"EzF90S1PlvzPWMSyFtwLTxs69BL6GQ6z1nJD7jfPMSGRL3xNVEFmebWqzcq8XrKzd+5B3nDuWZ/dsH+XdX1ecxvZb9cvo9Wm1bb4tt3iL4Rok2uw+f1Q1pAppDmDNl0exJ1ufX0PDZzeqSBdnkZ5NgPfw+MbV0WlqEDoFMxsMEy3cBvbsNHxnb21tpsNn6dPar957yNzqGqJ29rVFtZ8NFfHU1Bm89aeedgTouJEzefN6nbaMtzTEm7sg/d+z/LBnXs1q+1pY13kogErQtQTflgMGSxzwvKuxryCcCi3yPiuvxbePUng5fr7UD/Xc171y9Q0Yk4qK6duenDzoXq/l5CRkoIy1iThl37UaEyRJhrLJDe7sxvU0DAkLYeQNjwH+1ha4nXkDu7uwFO8lOOo+0Hor3yfj+jKtJSSg3JYw7L3ipxNnGzRvtuULbXIlHDErVKVY9G3e/8mKN6zeUS1gn639y5nc5B3nNWWkHIsnyBTF6Zkz/W1QeHu0Te3VVPKnqbKbzuz3kYdNU8BO0gku/XZ5zryIgf+26jEsSN4Y8X1ZusI58IJG1JKaPEv216s7CV+I9bupw45Yuyy+jhNMWTKIY4W8YFvAZyiSfkfW7jtkWLvZaddJfzyYnkYo+xGXzNDiA7awHYaMLt01/0JtQONiEQIFpcVG71/kDjSyZ0=","authorEmailMD5":"e62768a581a216bc55c95e1733cb9dd0","message":"I mean, wouldn't be the thread pool benefic? When you need to reuse the threads for example...","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"1b009269-9fbc-3d74-a18b-787003ae5535","date":"2015-03-10T18:15:28Z","timestamp":1426011328,"authorUserId":""},{"_id":"e95e164e-4e71-370b-8adb-6da17fee3856","authorName":"Thomas Tharp","authorEmailEncrypted":"NlXmr8R6wNzHr0Iz/ZQTWACoQHZWNoXHmJIdlxVkDYYyLByENhPATA0Dw1ViYfXeoeVr9tR62uTkXyixFGf3Yl2yTm9Jq08lri7bz1OFRwpxVkemXt1lw81dNk0BosOsJnQU7iUWy6tT/vW7e+ZFkivkilvsfm2brP/+oWxqPYQbVQFqTaOmc49Z8khSSEzM5FvvmjH9FTSgXKmYY0EFtIoB8IqOO1BSRokQEaHCXsG17q1IodV/Bs+8QQqplFS+nGtITuLjJyrC+mE2FXbdWyBT2/6PYvBe0wOFBAPPygSoIk8WFdj+Z3Vog62ZJRDw5vFnCepRc6vIKlsXjBWlo7titA6voR4dnsRD8JEoZoQ3dApVgujN0LfNOvc8PIkqbaJWFiCcgSQa/9zDNolCLqefU8KIYnqfTX7+16OW9QjKgn64Tvn2U2BEFcARDJ9yV8aoE/wMoDzp1FDIycVABHspxuQQv+HTv5lC23JEU8lT8bri+uxYEyG2zMYfQS2+ZoVKyBEfvv7kmHFLD+JwP3I59+g0O/FxyDZYuD3dh71fMNnYXrmpnsox26lKlKQLkqXEfWHY7/Giw09zh9QohLpBhJyefHqZQw9fkN0pSqcz81uuWKD09SM2P1jb9q7pBD6pBxm1ugiewPig2jXy9b/8FLtW/AhEyi4JP3SuHyM=","authorEmailMD5":"3190c7cb5200e38ef7d74502562371ba","message":"Thanks Stephen,\r\n\r\nI simplified the app structure a bit for the question, in actuality this processing is in a handler called after the \"frame\" of the page loads. The page is a data-driven dashboard, so there's not really any way to split it up into multiple pages.\r\n\r\nWe did originally do the parallelism on the browser side - however our codebase is (unfortunately) deeply tied to the ASP.NET session object, so that our handler can only process one request per user at a time. So it looks like any parallelism will have to be on the server side, at least until the use of the session can be re-factored.\r\n\r\nI will try some Parallel implementations first, since it seems like a smaller code-base change than the TPL dataflow. Thankfully we're in a good position to do load testing and performance testing, so we should be able to tell objectively if the performance gain is worth the thread count increase.\r\n\r\nAnyway, thank you so much for your quick response!\r\n\r\nTom","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"5e2a02af-23d2-32f4-b33a-2dcd21fcebc4","date":"2015-03-10T21:25:16Z","timestamp":1426022716,"authorUserId":"disqus:thomastharp"},{"_id":"458c9a29-477d-3c1f-8fd4-0c66f63fbef8","authorName":"Jeff","authorEmailEncrypted":"Dh/jxMTyO3qkIxX6mKGrwwadP3kgo0NNVEd4+R2oL5P89AICj+sFlpzqXL04NOYXsOuK8ROr/QrJgnPAhzAX6FlnlMHC4U6K/5SOt2y8Vo4wuBUVLiqHt4uh1h41uEUI4Whjch+seB1bqvqfx1Kh0SZfW9NTMUWSmm8y08OxLkDR5ifHAseq9J6K/NTYPHGPaV6mE9DL96VXATAntTSxJoQdE1DsrsGGqE6BFu1fSvYjMKVmlKZFrz/qdtk/06jDr52+6bXEjNC7MCt3iermZ0zF1H8EiRLgIeNDMb4rw3o17nnSIPcrCOA7eQ2sczNFTiHZMJQbfuFajWGKLiRdzt1wQdU9EtfPBv7l12hYl04FKwqr8mzkjdJtb1p7Prdy+fI+4G8RoLD36DVoeCTxWPeeXKUWm7KYW+tvdJ6aogvQUgOQusLcwBg38odoeihDesGBjfKfJb8mACK/z+anCd27NoLsUZYWcaZlva52obdaTtF6gqdnvMdUX62z8DB2UzBcp3KDFCD2bz6ehBTmfej6MGyj+TfbdBPCfZWrqcSHRpbUtyP/lS8VdSsf7mO0XLf26e41qxkQ8bOaGP9R6zmUfClHeT6h0exA4semSzMneBcnJe9DeYlqhQ9Au8wHx1Z3LTDYseoKIpZWVwrNLinKPoIaHK3i3rHW8nEbAnk=","authorEmailMD5":"e4c8bcaf4ce93fb29db47715959dfa37","message":"Actually...never mind...I realized that question is dumb since the cancellation token may be passed into a synchronous method. The caller is the one that has the ability to call the method async and optionally cancel, or sync (and not have the ability to then cancel) without the library method needing to know anything other than that it accepts a cancellation token which could possibly be signaled, which jives with what you were saying in this post.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"fc376c57-b5a5-3648-80a6-be506f0156e2","date":"2015-03-26T02:08:04Z","timestamp":1427335684,"authorUserId":""},{"_id":"5c5d839b-8f21-3611-b991-4b12fc9c374c","authorName":"Stephen Cleary","authorEmailEncrypted":"MGyXVMncMqiEruAAFQPy/i/R9bd50TwOys7tSqO3G1k95tWF0IqCP2dXF4iN8S3/+Zg4OzeLO0Tqx2IxKDexgvahrta0zn7g2BHHA42pGsgJ8t878nL9px9dmExMeHQZ9vpl55l1Qfrlp9DGSIfD331lNp13Fs0A0aauNvQ2Oc3S1PHtaPg6e/Pe+S8zT0KSQ4Ob2PTAnIOUoKAeN0v3c/OegHE+u6iXCPjvHsrxEeyk0Ci30Kb447h6qgAWAxiaVWS6gJ3RY+EJPsduIyEPRab2acbDpS+7QrlaavEVDmn9XUU3U4hQRtDxjEj96NjKkXDNCQMjm6dvgRf/CXwLbNK2VV41x/+BMZ55u6nPvK6/FTovl/vGjUHwi+B6evrANk6fpTDnUpwOkL4QURpqWkQiI2L3V1BRcD32o9zdVJ4td94h7uh4cz3fA1VjvHuiH7zOsY5XRnbpnWy778vamvSXNC9TfTEvhDqsiKzgKAB/XTmQb4qC+kRznrrtoipkdpBZyqr7bCfxCQU7ks4XaoRApWzegIH/jiDpSp+c8J4mSyKsWFNZKXApV/VJI/vg64VB+/k5B7QNRKd90lSGm9am3m9P8rf4SClClzaPP8MfQXmEhbeSBPDgtpnbFwSKa2EsuqlbOrEO+dXaOQfQakN2ibmIhDAU1cG7k/bw2c4=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Actually, synchronous code can certainly be canceled. The normal pattern for CPU-bound methods is to periodically call CancellationToken.ThrowIfCancellationRequested.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"458c9a29-477d-3c1f-8fd4-0c66f63fbef8","date":"2015-03-26T03:11:16Z","timestamp":1427339476,"authorUserId":"disqus:stephen_cleary"},{"_id":"fc376c57-b5a5-3648-80a6-be506f0156e2","authorName":"Jeff","authorEmailEncrypted":"LtlytpyMpWo7xYnASTKI0zpv+E4bBpSdOxmpj7ZlYyNZ9IV/yqaUphWtvYKa9AUh9yhFsQbWYI2YECo/aeop1yUbRGSX03vbOiyS0RhxHfEFD7tmWe+vx9peVoEYTQBx+T/5bpjTcaPIFmqu5zJ+S86D//EcMZUqzmvvwjKPz128UgBgzR9sI4hxzoeQ7n4vovUWVS6lkQWfl7DOx5y35pP9OQOR88cazqAH76dxfc49yuSCHInpZEtnIK+cOdK79xUOrNQ/YW5Ib2Mz5R33JG5W4o8vi2aHAaHYtYKo2ZwzzBxORvWosL/ZXq7oV4JBowCQjf6aZF2sv1Hy6/4XkE3Tt5wnLL0SEpRIUV6ZzcHsPi1LA0cntMDtHza4wqVI1GmWbsj5ldbmM8PTdqeTE0mloBxVR6hWGSUoAfy5eghmp0TvoNwVLTOn9YFOaTZtX8CMDwL/7eXkTDxqefDbVshzObB2qPegnRHfTz5bzwA7EEy6mKZe4EEqJXILBje8uTELB8jQ0OX/kz8pQASYV3ffobbkdlxj+AveFlqj9XuuvmIAFGK26bya849lm5Wc84Q4sUMnqlcr01kapnimZwoysrZtEsurow6TCTVZTQT8yH03iw+DbgG4oB3E+9N1DLkCKpgABIdjgBVp2gTjU9Kco4ajUDuA18Jz36mgUnI=","authorEmailMD5":"e4c8bcaf4ce93fb29db47715959dfa37","message":"If you wish to support cancellation in library CPU-bound code you must use Task.Run at some level, right?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2015-03-26T02:04:16Z","timestamp":1427335456,"authorUserId":""},{"_id":"0e2021d2-b737-31db-b698-be091e997d94","authorName":"Stuart Wells","authorEmailEncrypted":"LiH24NvQhwveiwl1uQyu5MflIHGOFDG2MjEXQDz7qrmfIaOTv/20F91RJdV3l7IHEIoCV74vleyClEJ2ZB1+UpIJ9CuXuA37XUVVitA8EJT9vcQ3O94FJt/dfthkH2vPf+zeBZhQ/gEVtq94yoCYkSYXZtIxcxXKMTalg1i0TETYO1RWPoc2VkbNrBjIE7CJ/JmiNVT499nHGaxegMyml49jtiDszIqHZWgI2z1I9wKzDuH2Q5v2uEap6GWdgh8pD0ZfvAK/+JcKONSDkQBf56g8yEMrAB3sEYLm6lqV3UdwgVAJ3XbjFbmABVADDaA1M1ZqOE+2vdxsKlIMDWRqPPCKPrC05IiVWjs2AlejLuApcF+yg4DIKA11+9dhRI98e5dUNqNk8TgRZPtKzcf1Zl55hD6Lumkm/czwWAAicGfHLVzw2hIsBvYQv54kThJ3LeN/bFnPAaJF6RezBGqGqIYQ3qOEaWyjEpoCOl4UbMYrFGX7Xoqe8hCYM+SDqG2MruVBpxFzgTDOi3O2BcaTdACVMHceOvJDb6PHdvRHjMuwR+pw62tc4WTvuMm3qt6QopGHIKM7qpcWIblt8zTgfn/ZyOtFZSV7Xe8nXD5VaK4UtPlSbLElihaHgMzmAY4CljBIws/3r+20t3C3JexuEbtwXunEh9V41YqBvu5mTFE=","authorEmailMD5":"1f7d6a407bb7495bb3c9669535bd0327","message":"I was mid-refactoring using Task.Run (thinking for a moment I finally understood how to implement async/await) when I read this and stopped. Close call. However now I am wondering how exactly I achieve my requirements.\r\n\r\nI have a WebAPI controller with a variety of Post, Get, Delete methods and as part of the call it needs to talk to a repository of some sort (I have an interface defining this repository and I have defined the methods on this interface to return Task or Task<t> with the expectation than an implementation would implement it asynchronously if it makes sense to do so).\r\n\r\nLet's for arguments sake say that one implementation of this repository interface is to an external resource (like reading a file or communication with a SQL Server). This seems a good candidate for being able to call asynchronously.\r\n\r\nAlso let's assume I have another implementation which is storing everything in memory. There is no benefit from making this asynchronous because the work has to be done by this CPU anyway - but by returning a Task the caller can 'unblock' themselves if they so wish by awaiting the Task.\r\n\r\nSo how should I implement the interface that wants to return a Task or Task<t> for the in memory variant? Or as I am seeing this, as a synchronous variant?\r\n\r\nIn my case I happen to know this could be used in ASP.NET/WebAPI or WPF but anyone writing a component for re-use would have to assume that the caller could be anyone. To be as friendly as possible to all possible callers it seems Task.Run is out of the question. I can't work out whether I should/could use Task.FromResult. In short, what am I supposed to do?\r\n\r\n// interface  \r\npublic interface IRepository  \r\n{  \r\n Task<widget> GetWidget(int id);  \r\n}\r\n\r\n// implementation  \r\npublic MyRepository : IRepository  \r\n{  \r\n // note not using async keyword as I am not using await, although Task<widget> is awaitable?  \r\n public Task<widget> GetWidget(int id)  \r\n {  \r\n // Was about to do this  \r\n return Task.Run(() =>  \r\n {  \r\n //...some synchronous code  \r\n return widget;  \r\n });  \r\n }  \r\n}\r\n\r\nI can't just do this:\r\n\r\n// implementation  \r\npublic MyRepository : IRepository  \r\n{  \r\n // note not using async keyword as I am not using await, although Task<widget> is awaitable?  \r\n public Task<widget> GetWidget(int id)  \r\n {  \r\n //...some synchronous code  \r\n return widget // inappropriate return type;  \r\n }  \r\n }","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2015-03-27T12:21:39Z","timestamp":1427458899,"authorUserId":"disqus:disqus_2cbnUKZGU1"},{"_id":"3401c15d-d0d5-332c-b804-48723e4d3c8b","authorName":"Stuart Wells","authorEmailEncrypted":"XLMRHnTRKLkmL6GQGQZnwT5q0nzn1tQGIymLLcF+voOdSf6HWcTIZlUQqV7HEjJlETg91uEDLS+M0AsLpmSmvUWf0xvAhDQOgxc5U6s/9dsypoLNPkYQumjV64TFg9aERb+gjNi1Ppu58f6IIDnBCt1KCQZIdK6YWkvk6qdviIWNs0pDdTltKNnTOtrpI40OSD7+OsdByqMJDajx76LWn/8/+AxGMH+9sUmXgIM+RMZKjHQHMq9cNNqama7taUZw2rtwyhhu0pkpHdwWewiFmNdrVDE5Bun6Ouu1g9f38LJAh+6ldOA+JQhVfjSsqJAUp9sUrYm0vuaKMl9Z2gbfGVOjuIPXyAcINFc7Spfl+sofLN82HppX+H/xwUoLXhIxS6d7n3Y+vsKmk7stLv+fDQzrBn24MOh2Gc48c2xOTZxygCX5lxj1DmsLuiR5jn3EDP3YTrMGvCEunBpSEqA2ygOp+gdnrdi7KrGSeYJIAoaOL0ZZoqgcVkNQ4cwjQSgbRHF6FPslsujkrPhUoL2m4Fv+6BNk4Cz3ZTkoJ7yYo0nECIYzvFPAuYlR0S/Fq/+XtfDdjWe3uhBLgUmv3c4Lx8u3QhVWGwlBfLH6DdhMi/Bq6NBCum9EALnDjnkb51EanDRQPuKPmZUuZLX78dJhsH0hhe3vIX4gzM67H8OR4Sc=","authorEmailMD5":"1f7d6a407bb7495bb3c9669535bd0327","message":"Thank you very much for your response. I did however glaze over a bit trying to understand it.\r\n\r\nMy understanding is that I want to avoid using another thread from the thread pool just to be able to return a Task for an activity that is running locally but may take a little while to complete.\r\n\r\nMy WebAPI controller code might look a bit like this:\r\n\r\n public async Task<ihttpactionresult> Get(string id)  \r\n{  \r\n Widget widget = await this.Repository.GetWidgetAsync(id);  \r\n return this.Ok(widget );  \r\n}\r\n\r\nLike this because by the grace of DI, this Repository may be CPU bound (my example) or IO bound (webservice file access or RDBMS). It will therefore work with any implementation as long as it returns Task<widget>.\r\n\r\nMy simple implementation is essentially running like a cache (the implementation loads an xml file on construction and then all gets read from the in memory XDocument.\r\n\r\nIf I understand it right, I don't want another thread to be used to do the repository work, I just want the calling WebAPI request thread to feel free to handle another incoming request while it is awaiting the xml query to complete. A bit like a UI thread handling drag/click while it is waiting...or do I misunderstand something at this point? I do feel a little confused about the availability of threads in the pool to handle requests - if the thread cannot handle another request while it is awaiting then there is not much point in trying to be asynchronous for non-parallel activities.\r\n\r\nIs the following the correct use of FromResult?\r\n\r\n public Task<widget> GetWidgetAsync(string id)  \r\n{  \r\n Widget widget = null;  \r\n //...some code that queries an pre-loaded XDocument, populating widget  \r\n return Task.FromResult(widget);  \r\n}\r\n\r\nOr should I place the whole body of my code in a method and wrap that in TaskFromResult - I am treating Task.FromResult somewhat like widget.ToTask() if there were such a thing?\r\n\r\npublic Task<widget> GetWidgetAsync(string id)  \r\n{  \r\n return Task.FromResult(this.GetWidget(id));  \r\n}\r\n\r\nIf I use the async keyword I can just return the Widget directly although it complains about no using await. Omitting the async keyword won't allow me to return the Widget directly, I have to use Task.FromResult or Task.Run, but the latter causes another thread from the threadpool to be used, which I now understand to be a bad thing.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"ead0957f-fdf9-3f6c-b5f1-dd4bf3811bc8","date":"2015-03-27T15:20:01Z","timestamp":1427469601,"authorUserId":"disqus:disqus_2cbnUKZGU1"},{"_id":"ead0957f-fdf9-3f6c-b5f1-dd4bf3811bc8","authorName":"Stephen Cleary","authorEmailEncrypted":"s02EIxVmEuIFed8v8Vtq/CkYvRu/ZqHzWbz94qT21i9JbdG1RzxslQxQGospcyzh4lt/RO41a6ylz3XBeCh4hNtISw1xhcvBoAiiMd/nxh8hoaWsmmx38YqYHkzZqk30Pp0NnQRsxOnF1yujzQXMfqdUrABJP8e1SSfLbGZKLjZOlgqB0p5/ffGdpcz3+vJrcde9kIvqGn2H49TAyIsZUfpCraNVJZkyTsTKbez999ke12eZsIAa6r1kpnhqY4PE1+NKB7ikV+BBevE1W5Z3JcUjHF+BSYlCvovQn4OxgmF13Gi21VjwghFVbetS20RNW5G/XkXXkCNvo/DEGS7uxHcC2JKuGpuPtUbHV6rEjgS6NfrP8KZv1+k8RCNwp38e5qSrPGCTxmdzuLP8KY252wsUYY4jc8VGM6uDvAvBEaif4VRhJ4DnSWRDxLUwqcgKJ/ffpuo7tXWwVSIhr1JsqiZaI3yRcis93uvdF6VBkLsklZ6ROvZssN0YV13Y/oRukHIdy+FJ3b8ytph2V2BJpjJEzFoNszY5XBhuAeNSpX0uDJwQP2tNz9bzlsydxjZM8/a/wQFZw4Tj7K2Za0tdIRHhoZmX4QB5FjqR9WpWhn2eykKNnJ90YVaZPKMl/gVKVt6w1yy+PPeGsvBenxUnHtKe5XFLUWVLyKd0oMmFqGI=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"The problem you're running into is due to async forcing a leaky abstraction (similar to IDisposable). Your interface must determine whether its implementations are naturally asynchronous (just like with IDisposable, it must determine whether its implementations will have unmanaged resources that require freeing).\r\n\r\nSo, there is no perfect solution.\r\n\r\nIf your implementation is all in-memory - and presumably not long-running - I would recommend the Task.FromResult approach. However, if your implementation is blocking - i.e., it really should be asynchronous but for some reason it can't be - then it's up to you whether to use Task.FromResult or Task.Run. Even in that case, I'd lean towards Task.FromResult, documenting the type well that it's actually blocking and not asynchronous.\r\n\r\nAn example of dubious Task.Run usage in inheritance is the BCL is the Stream class. The asynchronous APIs were added after-the-fact, so Stream could not take the (IMO more desirable) approach of being async-first. Instead, Stream assumes that most of its implementations will use blocking code, and so they made the decision to make their default async API implementations use Task.Run. MemoryStream - being synchronous but not blocking - overrides these asynchronous implementations with ones that use Task.FromResult.\r\n\r\nIn this case, you don't have a backwards compatibility constraint like that, and IMO a better approach is to only define an async API in your interface.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"0e2021d2-b737-31db-b698-be091e997d94","date":"2015-03-27T14:05:25Z","timestamp":1427465125,"authorUserId":"disqus:stephen_cleary"},{"_id":"ed1544da-d11a-3bbb-a31b-e9e5d36b041f","authorName":"Stephen Cleary","authorEmailEncrypted":"SC9Lh9xzh8PSaec2KX4IaDglFt4mgMH5w4sAFM/8oe4wEByjcvtMPGR/ULzMtWElXWETlfyJ6aed7lOTFPAlPEfgXuy41tktpRpzlB0k8yeiSwgiOCfuNDWqtM/d8+xkgpbIf8CIp8fC6Z7EtSLlogewpO2K7UMKmwnKgtVbm1bP4Cb6J86gXGyWmPqAwAPO4WryHrME9cJqEloNnyIfLRLjIzn66vn5zbVS3c1GZU/omGSPYhCWem07h0zZdueJxPGwNuTBi4jSn8CtpCFW4+BTcgQonnDHVf2YzBLk30QsdGUpI1dfQkVAHlb0d+daVBv2vu+J5aB5LotulKEHO8mJfsmnghtoFpystX44Mu/sdLm4mdSYvOhA817lqpm9akpUqPmkcoXONalot+Vp7RfSgWGF20zo47tvv/K7srgCaW0Lk8Cw9zAiOFWB0vqm6XiVo6W2OAeHASg9W1OQ8abDJ+mSPabzuasSQHGaz/IqbpEtvToeLutorgv08aA3QMgl9A24Yuh/qQfPfVmhFvDNjtQaaLHgIT2iMuSaI5OlXZsiTYSZTmlFyEcmuAeiXXtzlggxZ+vwKKRWyp6b5QpSfuXvwhJ6JUVywHIFifjZoAbqLXD9KN8Yb+rkxvc9cRc9JcC673HVk0rdfY5fgtoGg7XgjB3zuBFcxBnTscU=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Either of your examples are essentially the same. And yes, that's the way I would do it - synchronously get the widget from the XDoc, and then wrap it in a Task.FromResult to return a task. The only other thing you may want to consider is to catch any exceptions from your synchronous code and return a task with that exception (you can use TaskCompletionSource<t>.SetException for that). So a complete implementation would look more like:\r\n\r\npublic Task<widget> GetWidgetAsync(string id)  \r\n{  \r\n try  \r\n {  \r\n Widget widget = null;  \r\n //...some code that queries an pre-loaded XDocument, populating widget  \r\n return Task.FromResult(widget);  \r\n }  \r\n catch (Exception ex)  \r\n {  \r\n // In .NET 4.6, you could use Task.FromException instead of this code.  \r\n var tcs = new TaskCompletionSource<widget>();  \r\n tcs.SetException(ex);  \r\n return tcs.Task;  \r\n }  \r\n}\r\n\r\nI would not recommend Task.Run, since it does use a thread from the threadpool. You could also use the async keyword (without await), which simplifies the code but then you'd have to deal with the compiler warning.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"3401c15d-d0d5-332c-b804-48723e4d3c8b","date":"2015-03-27T16:24:38Z","timestamp":1427473478,"authorUserId":"disqus:stephen_cleary"},{"_id":"9cb9cccb-a3d2-3be9-bd98-fb9216671b56","authorName":"Stuart Wells","authorEmailEncrypted":"wGfNH5DaisLfgXqfODPtaYwxliVQ2oqfTsKtTF59fdqGsTMpemdlJMGKp1oD3ejFQsNeGS/WGzm6YZK5JN29ufc7Rc9tlU0RC4yCgBUdosHH6ba4h0FVBBt4GrC7Xn9FWMduwGl+AId4K1vmfUy9yNzTDZApWtPwHmqkyBbSnC9eoVl0pgPY++V22YI4Et+IHSKQJ74kim0A1HdpV0r0XsAcHX2To9r4XgGxoUk89QJbZ8rBVE2JrMkCtom+SE9VBUKCuu9xRPPe9PP+xuBfeKSosIAH67L2BBqA0Z7RFOHGDw/SnCHLZw0Klzww2ceTmjJXqrPzpx/dUlZ6xoKlGXhfrzXkKHKnyEK3ycCLsJJ8N4kVUh0m78yTjQhssINgMzVvYsFwb9CLVIFVzEGxxe1ZbUQ6rfAtjtc9BWiLYD+UMFEn5nsbpjkKZi5kxAn69nwXvCscmprUDB8h6+I2kg02+38NNOII9vli5AItaYW0YDfRZX19KqUVAW1EP10lKQwq5sudR6lXbxS3ddLDwbqsxkCExtf5miFdhc044NjUjoqUEc0sEgB0zLZqMe0+zNd9kRy/M8odIz06mzJiHE3v2mBUOuA8QtJljw8z6QurMaq6Q1HHVw0xmS95ksrBAvTaVjCFUVrbYGPfuPVvvjAT0rE9p3T5lDJrE1rT6ZU=","authorEmailMD5":"1f7d6a407bb7495bb3c9669535bd0327","message":"Thanks very much Stephen. I feel much happier/clearer now and can continue with more confidence I am doing the right thing.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"ed1544da-d11a-3bbb-a31b-e9e5d36b041f","date":"2015-03-28T14:27:55Z","timestamp":1427552875,"authorUserId":"disqus:disqus_2cbnUKZGU1"},{"_id":"9a45ef91-3701-3f80-a1c1-da8c7011c687","authorName":"wilsonsergio2500","authorEmailEncrypted":"q89UrYwzoiq/QQvQUQkQoIyX/aoQR9N8T5okX2AfC9dT3PUPhMacwNFHipUl7mq/YfsSaBiQfS1/szqMur+BJ2fh7psmTbiSbh1s9+roaeS1bkJNJfkWLcupJ5cxXHAdobeIwX4ZYPAkzGmOKBJddKphGCVMfPettfUfm77YIPp1nmushECdjq0PHh8A52aakuh1W0TykQU7aHLwK5TPT0aLx2+ACU0iMp5wFdZ/JPtGfo3h8ATANxOCdIu2XqHEgUg2LlDxg1s4N6U1UlkNrT9Pwj8qAicbS21jGdIQi0PH8+VEL4vSG3GHzISiI2GMoNq+ie5uE1w9EGPV/CgU/wKP+rtUz+uhNP/Qgehoc7NEhZzb4i9TJVU7TXpks+4DwRQDgSM4KorYZS22XkjyiNXsx1Ttw6RIIM1XC752x7no4sPjLy284yalUcrlMMqPKkZlL7DKZx3THYUQ1wvVelayvk3v3MCNnINErLceujL+HmgLnP8hAN5RKIbZOdUpQySROMnn3AopJ/ga7HyIUsScQuuumoHfJMyBtDYOlT3wFTRggHJFWLDpMssSFTUJ3rT1ioNWMAuz2TtRGdOLw0lJgsab2QyiZqm9rHhhpgD6B3JKfm1+M2Tu345EPRq0NVh8FmffvDSefrjQuakmN9Jkf9FIP2S3r9vzJa2sNvQ=","authorEmailMD5":"640b950f4f71250e70818d58b1ed7035","message":"Hi Stephen\r\n\r\nThank you for this post, I wish I would have stumbled upon it sooner..\r\n\r\nWould a better approach be to use TaskCompletionSource when dealing with tiny blocks of code that we want to make asynchronous? What do you think about this way? Does it have pitfalls\r\n\r\nLet us know and Thanks","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2015-04-21T21:16:30Z","timestamp":1429650990,"authorUserId":"disqus:wilsonsergio2500"},{"_id":"14176732-07c5-36dc-83e6-d2437f55cb3f","authorName":"Stephen Cleary","authorEmailEncrypted":"WsEu7aw0FlhHYwSAC6URUyd0uIzwpPJORyx2g7oBbQBuQaYMUsCZkcXOQcs8WxNfHhKU7DmPA9t+8G8GgIlfTP2C3FPVj86IQUcgQmX0RoDv14RgUqjo2OC5axX1E9KeKJRltn2gl5FbIQTIg0rV5W11O+SEZ8LOMxNt+8Ik+NascYerN0wegVR7vFbviwWdCz3YZJNoip1r/P6hebMc9GKxBhZR6bcfpKALDfulynz6nDOFDDUxj1Kc458ZXX3Z0Iu7zOLoldoMN9IxB57fDYdm6mND3vZ/6+H215UtMiALMY8RKMs+ynxxQK78g9tkqqnlDSybmicWeEce2a+a62EmHIKEr1ZVUYaRylVm0IXOGhauyzJNBPziEd1VjdbjzNEWomnC4wS+rFitO/qzzquT8dYL1dlLTRubA1h1O6zYsV+vM9cf/hxb9mVFBIT8/dgkiohDWtGhi0Uj0ffO8ujpv5681jVGnLcm13avD8RUnatOTJI920SuEzq71d+XlI/3JsX8/VP8UD5HZeRnptn7AVhVMRvgF3uPe1qEoWY9bAkV1am0ltV5f5uhkLxf/mbY1OupndnN6YWrHkppVYwqgOFdA6Pz4Rpb1aBxJdLvk7EG/NVEeRalkAtlbr5oARAxa9GPeqbheTVxPfD8Rx/5dECRhoFSH7X717eTTts=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"The best approach is to only expose a synchronous OR asynchronous method.\r\n\r\nIf the underlying operation is naturally asynchronous (e.g., I/O-bound), then only expose an asynchronous API. If the underlying operation is naturally synchronous (e.g., CPU-bound), then only expose a synchronous API (leaving it up to the caller to decide whether they need to use Task.Run).","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"72c8cec7-5854-362d-88f7-772c8f069df0","date":"2015-04-22T22:49:30Z","timestamp":1429742970,"authorUserId":"disqus:stephen_cleary"},{"_id":"72c8cec7-5854-362d-88f7-772c8f069df0","authorName":"wilsonsergio2500","authorEmailEncrypted":"Y5zu7IBGAapB61CWwMyJMqd8fHgg7H1iZTKmtu7IYASzpjXRtu8DBVB4UA99iYbuU5FSvKNxcHN07Mr42dtCCE6b95Beu6KTtt/90rIfFZyJA77KRmnqiuqXi3AhxTfUVVpluXdZcKJMDdl2Ilm+i16ZOBoIPXildsAsjRjHgYgmwphCQZ/vW5qRPgnnQuTo/Y0ujZVDqz9ZYsV8oul0C2jj+RC90Af8EXp4Br8o55ddzYBperfy2/jQzRfF+1Yb2sDxiayZHHffnze1lFHAeY8fKt95rsyJBQ9rg+rqZFJINLkzf6DfYiW29N1aH9grxwpOCVoXDVte7ZxAQOtBMW9l8P4OXQhG9SPU5jp04rA/W511PYEPeGTuR2+ZLtv43ojK8sUN9k7T92WOH8Z+c9s9c6ce2MGkHgksLPn3CRL5DV53l9bRbu7rlOg3os0Q0+W///AagjzaxvniOPkSpp/Br85J3yHA9TLlfZuu862zL6vkg4sBNuVZSGroQY7wVX36FhRJo42tm6ZPa2wwbFO9D0GMB49tJ+JNSr2Kvzl8PKpkN9c7O0dFi4Iz2IZ0k1CDlzfNZ5OSI9byLpHpUI+hkGlknAj+AjDTyyr6j8Xz7GDXozIxz7wECQc4tB67cX+HW2heQyvCya5MyjJWVatsfUwktyxXRAsjHO8FOsY=","authorEmailMD5":"640b950f4f71250e70818d58b1ed7035","message":"Thanks for explaining  \r\nSo i see in your code how you used await Task.Run for when in the UI thread. But what is the best strategy to make a small block of code asynchronous? When not in the UI thread. For instance say i have a class where i would like to expose sync methods and async methods? I have been using await Task.Run all along, and was wondering if there was a better approach per your post,,\r\n\r\nI apologize if i am making you be redundant, i just wanna make sure I code in the best of ways  \r\nThanks!","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"ef5f9f35-23a2-361b-bb29-7f538adcf8a0","date":"2015-04-22T22:16:30Z","timestamp":1429740990,"authorUserId":"disqus:wilsonsergio2500"},{"_id":"ef5f9f35-23a2-361b-bb29-7f538adcf8a0","authorName":"Stephen Cleary","authorEmailEncrypted":"EDyjZYKjfs2lNH48t6BkhXNKBxH7r75aaj5uGCU2nNc0SMcIrdjFN/Q7ctdoytrdAelsSo4Sv7gCuk/Yk5xNF+lIOXB2kQ+RiW+omaxWaHH/SZxyFAHiM+7lB89MCgTX5jvxiTyaTEWq1Zfg79+weEQI+ceQ32jrbzUJc8wIWax9mJRRvj+HMZDI03+J9BDAMoOnOzX/YWxLZGx3oTX7N8dA7vk3CmIuskjahpgUqYdv4JhUPYetPk7rTpM6zVPd/PJUlib7/g99hu5dCh3ImOnYkLDfbAz8TjTd53FUe57LmWd/P7y+6KBDQXC0ijpiquQ1Bp8hZbgraUtxw63wTDMVtgFOLVAKyU+FM6FfOs08crVo1s7Of8tlfRqlujzqRBw4snFJbN76zKzFdwJFKcu8RFacduFMDoI8CxgAWEzfJiJzHrZuojtdjithOJ3yppifSCdkPk/B01t2ZxOCzOrJ/wma6WwYTD/R9zhqaZ/fZJJZo8WN1nBb+lEcUAmip6ad1IqBpjw+8VYDpNQOUW/tJ6X0Nds250xqYtoo6Cqu2Pu9LrO3ExGARuQWt1qIQzDxFn2q1H2MiRxy3sC2S+sUPzEyADqkzyXJJwQfQu4KXZ+IypbbHKBHbPb8VSd0j8VxBTiujX35mn9sT/AEwF9DS8TmgC4EDDyAclrqjCo=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"There's nothing asynchronous in that code. It's equivalent to just doing the CPU-bound operation and then returning Task.FromResult(42).","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"9a45ef91-3701-3f80-a1c1-da8c7011c687","date":"2015-04-22T21:36:08Z","timestamp":1429738568,"authorUserId":"disqus:stephen_cleary"},{"_id":"f5ad6798-5446-3977-8166-1b51281f801f","authorName":"Prasad","authorEmailEncrypted":"HHTziWTg5FyMf8VHzn30LzT3BPSB5k50q4uTxJu7QRaFcEHhfLU0a0XjoJj13/EfiPezkIW15QIH1pzuUOd4JEMablP9ji8raJV7EPKHA3EvuoYgMaQusb9LkOn1BzS39iWaWAZP21CeDHl88R7uqz8pvV+igDHg1Jyyc5VlpslWKZDrLh6NZGJlWbuorLocuHRN990qSGIkdwL7JPFD+HRy1V4oA2nNT2ruxNVLdUUwuCaRkbhw/2LLGcl5NTDsgZqbz0SnLgTxebxkkIBSlW3zejp1KB/OtgegH74nFuZ4//lq91JhOMCiWfXDf7fp2JB+6tO0Ej8BBMA7gNRNj1h7CCYLTgMuJ5bndOkB50ctgdwWqK2BEY8xbO5Wk6g1rJVbuBL9kqK1YPpddoPHxVk9sonEmghpdSWzXBzQya/E3r6h5bC78XQLbu2MccnGHAsXNYF+uNdkpSS2O3gAg54uwWShDdo3ua+W9qPXYem7TD5VI6ZmXA5wPJdLSmwcj/sdf/92s5i5iCwOIYRBgQnl2Z7LGnUZvWV9ui+qxvH4MckyXDG5FmRZmsm01bdyxuayHXnrTb9ODDrFU1yfIphE1KuCCZtaZyvyBukkPV9qtplJxeR+rS4qyynlH8nAZ78wOPgningoX4qynYw59NOeZusb2gBmoOxUpxOA078=","authorEmailMD5":"ed84de8de17c845d622079117ecf1895","message":"Hi Stephen,\r\n\r\nNeed a small clarification on \"configureawait(false)\"! in your example, what will happen if the call(IndexAsync) in controller class(MandelbrotController) is refactored to \"CalculateMandelbrotAsync().configureawait(false)\". Would this put incoming request and corresponding response out-of-sync, like if we have 3 parallel calls to the controller Request-1, Request-2, Request-3 and if all these calls are handled via configureawait(false) hint, is there a chance that response of Request-2 getting to either Request-1/3?\r\n\r\nWe are working on fine-tuning webapi deployed on azure to improve total number of requests served by webapi and also response time to serve one request.\r\n\r\nAppreciate your help   \r\n--Prasad","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2015-08-13T20:00:06Z","timestamp":1439496006,"authorUserId":"disqus:PrasadPillutla"},{"_id":"8a2423b6-c86f-3e69-b0eb-9e5cef25e78b","authorName":"Stephen Cleary","authorEmailEncrypted":"YJMqOGLJzx0ck28eH5iDnKq7dmniTElikZQ+jrVRFgTzUIxh9vW4McMs0be7QOe8UiFAKJy14abCmD3QMnk8v2TjS8gVDSFzZoA1k0jD/HD28rrgybBsRClqW6cGaP7yHkEmDegGWCw7JXZ20J07bq8u+hSO6H0zAdFykyxiFDdKrSYjt85VJSFDntSIFLiOmUKWIE8y3e+MP1Zxnr3u+CvZr/UUbnExJkdd3p+MRx1iNzVPDp+5Yusq8btw3yqYjDS4lbuF0ZIF5SX1kTHmx3vhkb1ddeO1wuDKpgwZDtvaER9/GAijoTMmwNrDL3oyNx+ldjU2+Qwyf8D171Gi9nS12z4N62wRIC20FtpCEHJcmAmO83Cgl/ur9xcUhCn1QZ9Yg3kvZ2fjwgtYqIxNXXSgX+Jp8oXDrLtPTPrljp34Rccp2cABMZOsuNeyx95BFwbjPsX1C5LjhUCSovnLxbDR5xE5ESjm10wRXIGJ3uTn4qR98E1UkeAEzdQTtqwRLK6y09Fm+yyZctsxeXl9tlsTvG0NqD13VuwNOWTVJjqMDtS0fKRnFFjWdqsv+thpq0FbV1fomrfwtETr751fwIv0iTjvdxXnO/WtVWc/ehEFqT8SFLGcO8KXgoN2JwOwxnAP8WhF70JlygjkflkpBJE7ASN4Eb/UrH1tvv18HK4=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Adding `ConfigureAwait(false)` would not send the response to the wrong socket. However, I never use it at the action level because of helper methods such as `View()`. If the `View()` method depends on any kind of request context (like writing response headers, or changing output based on request culture), then you may not get what you want.\r\n\r\nAs a general rule, I always call ASP.NET methods from within a request context. So I don't use `ConfigureAwait(false)` in my action methods since they end with a call to an ASP.NET method.\r\n\r\nOn a side note, async/await will *increase* the time to serve a single request, but enables a higher total number of requests (assuming the backend can scale as well).","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"f5ad6798-5446-3977-8166-1b51281f801f","date":"2015-08-14T13:51:16Z","timestamp":1439560276,"authorUserId":"disqus:stephen_cleary"},{"_id":"212d58ae-3aed-3029-b826-14e2de2d4d0a","authorName":"Stephen Cleary","authorEmailEncrypted":"Yb6GKa2i9NuokV00m7SCgaxnIAGq2wA1zymKvNoMlQpji8ixjMZqaAlsmmZ/YSdhaS3FeLjMLN3gh9hdpNbV3eRPyq7U6qygZbkisAdAenovWKqglHAzHZXMEmSJwk8UITMrPpVAirqcP+boU8l9DXtw6I4q2RVuvx0N/7dNB5NWIjBcyTE13yu7ZAfTDi233Qlze8ngZu1OlRxbyhhiIstf4t4f94rZkY3A+yZeodLwTwUAED+En6PufMGDFXbYxUPyQQEF9IK5L4nUd1XVk6bUoaRc30NFVDDAaSHnh/19AmOiI5P9DX54Eqm7v1pAQjn0dav7L1vcuB2S2uLpA4A33iJnoWs05LFx8cP/l/Sr9w4s+rBYeyAzHSaQ1d0YcEY71LzGV+QlssCHPOEFH1yJT+eFeCfniOEOt1uLDT8BYn9aLfKm5tITxnyBRz4AvS6U+CCQ4JJvmrZJof3VVgpmz3CUQ4OzgezN/ohfnFDGKCLrLCwFgaSnUpzdmVBBMQoxEZhRoqEeadhpIH/7HiJ9SRoCIMy7IjznWG/luiHnyhqC55ArshjlWD6ePgUfDlTVnsfGI+4LT9QwK3Hu8dpqUwmIolzfQDE1Ho6WxIEyqyuTopy1wkMrNyz2Ydz/jGs34pcfBqMy8rzgkFj8sgFVjygX2JGNRu7pYg+4UKA=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"I think you've got that backwards. :) Async has higher (worse) latency and higher throughput.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"57430e76-fb60-3e52-a0cb-075ea85f45d8","date":"2015-08-15T16:40:03Z","timestamp":1439656803,"authorUserId":"disqus:stephen_cleary"},{"_id":"57430e76-fb60-3e52-a0cb-075ea85f45d8","authorName":"vetiarvi","authorEmailEncrypted":"JrlzAfaa3Kmw1gRdaoqIUhU3lZXXBUpQO83/+P4toElSEgIQpcAhGFERnR2UwbHluHATE19I1BMv8k97l/nM51zdEQtikhYXZkRW2HoFqs/ZaUqyoZwxaSju72YZV3QxPvc1jJHX53yJJeISOVOYbf72vsKzU7q1+Uz5ghjI9Cyp2CgbET7L3zgZQ06eysRQG/BDavgkgpxPH+GA2Y9Q6mE4HBBS9//ZqGcS6vO733DuJAgcElH5A0L8vi/kDpw52KcZ/aAl1CqZOtn6Psj75sQQardsJOn/0HinZTJVU/Wed7bkjLefmKHNggguS3uJhTBotrb73dV0fwqDVlIEpiQNuQbqYin2n0qlrf/zWGridtLZWf6Sz+p5mFsvxWKL5eubN0ZhmsAFuHDwctJmIV+25tyoJi9dXtT20tNG44W9zDfWG622cX7Ngxp6HIxJijSWW/JPRgoZOsvky18t2ToYFCe0TJHHwLXHYzDCdbfW0Al2TMCKSHdtco+XJl6922b96mLSDjf1zAWozf2E45KQybCmPfY+8snicaYUb+/QeTmbDTTXYAwkFI8Lb1qM+cDMLP+SQL/8lYgY2RncIVfZJvZWS7vmzH8XUyS6g6lZDwaxcUZgvS1OhjXfOd5xwgTgUCdU2AnIbtzzx1xsOI8UCPj3pl6njsfVp6Mggx0=","authorEmailMD5":"7b6460d94795ae02211b102b0dfe5355","message":"Yup in general, async has better latency but poorer throughput. However, when used with the command pattern and some offline processing, you might actually be able to use more resources such as other servers, off-time processing, etc.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"8a2423b6-c86f-3e69-b0eb-9e5cef25e78b","date":"2015-08-15T06:42:38Z","timestamp":1439620958,"authorUserId":"disqus:vetiarvi"},{"_id":"13428b14-1061-353a-a785-9562db8e9fad","authorName":"Stephen Cleary","authorEmailEncrypted":"i7/OM8Scq+WLxMKYGeCUaW9Wj2HQn6G9tbAOJlPZAoBh6sWJW83ApVrmLLB93TbpYGFltiB6NzbvR2hNR8Cl/pN6FOL6/Mw+WlDpKORiHKA0dJdwXLzf67fnZ+AqrEB4dhWstxl3wyJcZlO3mc6udTC8oSSt9KB2zYGSTDSikd7HUS8GAXvvuFUyXlhmqpd2fsIZhzQsnAw7O/Ak4J0mim2z4om8lnAHwgKUVjyQNt7A/SL1rnmKg1iparUcB17N3hq46D/2GNGGhiB0nq/XQHeljE10339lgFdL/WAKBjLGaYNImlsVMzSpgo+nGQeJ6MZMIYARD9tg6nYYVSBENNeWFrNWEQrCwBGyR9GxZuwdcrx9BTTZw69WyP0u6wvPIEkMwQB01yTG1jJ5U12FYJ+ErYHbO+B6fhastAWaPh6Lda1vm57FFh0IdTWxhPdX1/buHDC+tWZ00gBqzlIW2oCI8Iqmi9b/4BW14/K9nVtbZ6Qm7T5FIkEjzC/CcZhNBI9pleRZpr9ErAueR5wAFlVNj3t9OhY8DYdUFnboGWdOTF8URNmL54l94kEEVg8YxbyC6jEiciRwkZdLBlmjTfW7XlU/n07l3kfxxfII+uWdHP0J4LebBP2EUIBkhbZ5pxwxNFiSl2KHM+Ev4FdNrrJ59JvyU2w7wEwbYpsJB68=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Fixed, thanks!","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"4d6bba49-75c1-31d5-a653-f4c56b14ea24","date":"2015-10-20T17:19:16Z","timestamp":1445361556,"authorUserId":"disqus:stephen_cleary"},{"_id":"3dbbee94-63f7-3707-847b-9b5ff1fcaace","authorName":"Stephen Cleary","authorEmailEncrypted":"lL6If6uEwD8xUO/SrlXqiWIDEEnWyFqkBqtg2QoCIt5wM/W46ShZY5BXJ+dSmIo1L7ETEFaC5+x9gc7mqtfRAiCZDJMSL35OEPNVp3SjV2mjoc8Jn8SACNRLMzbwd2gCmLnavtYDdBLISFBmieRGeX+BslU90UuovvoDucpseexSgUpm/nUTt93pTV4Z9muLf2TJ5m4vlyXdfQ3/NcVLXDxJrD3dLjQzSUdqS1jlT8dpxzh3vmhC+67Kl+VM8hCYgXWslzhZZve5nq7n4Ce/P3ojmh5AcHebm85Og7ckTNi4D22HnynffomEoP3HBWX28hlUr46b/5m98zZ4KrXmcuSjcTHQJgeKmv0yt4EaIylPwA9GcVdXRqPndDb4/9EH9qd7pY5ih5aAXichj07QzaldoQSk2aY6aEDttOR+SWKR2MB65HZp2Fwpoj9Izt4CDdV4vvfKSplUxVw33m2m1r4bcZ7kFu3m/ISIm2WxrehSNXMtZbqG+phsngwPggJbB7MsuhrXMywW9taNRLPukEfURcsna6/8qyeaf5ggTEgtxADwAthdoUGhTnlEr1n4IfJedS1x1rF3lmSCLNn45F47p8/TloyJiWotgEDu+ujkrDkBqgA6bnobVCVZDQLapMQRifiE/F2CCE5a2hKvOxg2IxCMHH5dHVpcWOADUGw=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"The ASP.NET thread pool *is* the .NET thread pool.\r\n\r\nSorry, I don't know of a source off the top of my head.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"5a18295a-1907-312f-b16e-d7266852e939","date":"2015-10-20T17:16:54Z","timestamp":1445361414,"authorUserId":"disqus:stephen_cleary"},{"_id":"5a18295a-1907-312f-b16e-d7266852e939","authorName":"Doron Grinzaig","authorEmailEncrypted":"N2ci9tY9TOD/WKIYcStj4XKW7jtts1WKtQh0v23IRsLeGhOySMs1Yewp5SzROk1T/RAuEAMz1zDQiXRD0rCYRRZYXLGwrTzwYDlVife/G5xHk2NqaMRUmMou60YpZmN6Ol+aFFiXISj/HNUFTo1s+J1qdgWdiXWIFT3el5V5MW9TO6hEr3lFgC0krFtRDcCyZn12VNhAxmQtidOf4UxfTvuJXUOKJ/5xpFVe3ZwBqsa4DQAszqZvZixFTxyB2kZiXsBpqaObTBPfXcumRLNsAG+zLzTRaTcsS0HYaxMg3Iq+fUObb7Ow4GwJ0k/kOCV57QQNPfhVB9AU2IAvuuy60P+Ub+1WNqJKpZACNDez9HlPvAB8YseZ/XP09lILlZtjrT0hKIzfQs7MwQq8Ec5l35W73UdQ3M2GtL0EKtu+WOKcs3z/w7SxAWzN9+F8c9xAGhttXg4YJml/VnaguCw9Mo+xQ61NSJfR6FVBJdpWnyKtHfJGStrz4ozsqUMCo3/t5yD8BfW9kFIL6HD1GJcrpCKpZgsU5Xm9MnAKQjJaev1w/R50YmQuTFMVn44BP0aJ/GG5FEci9F7Kv2zwQ4EWB8wZDhmCNHHviUvayh+4NPOXMNa/ZKjotdTu2VTgXSLRVB+ylqK9CuH79Lr46q/QnLEHbkkCpM3lqkAuom+dPNE=","authorEmailMD5":"02b2b843388c866cab51a735f817b291","message":"Hi Stephen,\r\n\r\nI had the impression that using Task.Run in ASP.NET releases the ASP.NET's thread and \"delegates\" the work to the Thread pool (not the ASP.NET thread pool).   \r\nAre you sure it takes a new ASP.NET thread for that? Can you link to a source saying it?\r\n\r\nThanks,  \r\nDoron","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2015-10-20T16:21:44Z","timestamp":1445358104,"authorUserId":"disqus:dorongrinzaig"},{"_id":"53adcae2-16fe-30eb-814c-cf56254d4af3","authorName":"Ab illo bene dicáris","authorEmailEncrypted":"BYHAl+Gva8afYyWPtgVuRQnw+krIIXx4FkYYr3folZF+TtUrPHD3bbXd0jgIAjZskRWE3Wegm9EnEx21IrJ4DDJWWgg8+inCRaEWRIwvgciKZOiKJlXsdL1FkPR5lFPVZQ9sZ2iuoz8Io0xBusp+ExTy0Xjb6OHgBpeft7pVgObnNkYhnJ83Y8MVlFcPemMxUvl1cm7/teBnjUaQji9yevZYtNCSA+6FcyNtaTVegAKdNVAIl2vyQFfMXzl5RL9kJwKHheKEASxzYjxzbh/hfiSrEu2ZbRz0G0mtiJy4mxD5Yu+nShgqL2v3Ie9sJJAWHeTteF8jLw5AHEA80l9nEs8ONlI8iRntoQPhvqOW1gp/hJE7lucVufLa3w9qCaJAvnSgQY/m6KJ3cYPVJoE/6q9t/wgmRXMEv/v8NIju5RRRaQsUpH7oi8KbsXBThQJGTKeRTohCspzGou+rewzYsy207jiMOmduIe86h9qTnC32yy8LGox0ll689t8/szit/xyveKMy7k5eJ7mOkIHeVMXoWxoyoMW5iq9Bgztg+WMxh4ncjdn5I0/8V6reXnohXHChomwRQjsHluqylcWibdHfR3lQENqiGQ+vX80XObRB+BeT5ILdguYeGm5f8L9o3QoUHf3xAt1uR8nYXxgQ4TMMcHpvPryCeCiYjF2adeg=","authorEmailMD5":"59720fbfa214ebec03629573398f7bf5","message":"Every time I study TPL, I'm humbled.\r\n\r\nThe Task.Run() is described as a short hand by Toub at MS for Task.Factory.StartNew(). StartNew() gives fine grained control over scheduling and some other parameters. Use Google-Fu for the article.\r\n\r\nI ran with this notion. But I now I learn that I am in error here as well.\r\n\r\nMoreover, you describe here that Task.Run() is designed for CPU intensive workloads (I think mathematical computation or graphics conversions or sorting algorithms, where floating point calculations are performed by one or more CPUS). I've also read debates between Anderson and Marquardt about whether I/O should be async-y (\"Should my database calls be Asynchronous Part II\"). I have assumed from MSDN blogs, et. al. that when I do Task.Run( -> Some I/O operation with latency (DB, web service fetch, etc.) that I was delegating to a background thread, thereby freeing up the ASP.NET thread to continue servicing requests. This apparently was a big mistake since the operation is really not computational intensive. Database operations are I/O bound and depending on you who read, they are either are/are not usually good candidates for async/await (I think Marquardt gave reasons why I/O can be a candidate for async/await and Anderson accepted these). I realize that all of this is contextual, but the information at this point is quite confusing and it's 2015. I am not seasoned enough to understand all of these concepts, so they are probably clear to other developers.  \r\nIf I have a repository backed by a pre-async-y version of EF, then doing something like this Task.Run(() => _repository.GetCustomer(123); )  \r\nis no good assuming that GetCustomer(123) is just doing a single row fetch from a database table whose server has latency. So, doing something like public Task<someactionresult>() GetCustomer(int customerId) with this Task.Run call in it is not good because it's an I/O operation, not a computational operation unless the called method is doing some computationally-intensive work.  \r\nGoing forward, I'm more or less adopting the mindset of not writing any TPL stuff in my own APIs until there is a demonstrable reason to do so (customer complaints about performance, etc.). I would even prefer avoiding EF async functionality until I get a better handle on this. Toub says Task.Run() is shorthand, in another post I believe you say that Task.Factory.StartNew() is even worse than Task.Run(), suggesting that it is **not** a shorthand with some defaults set for the scheduler, etc.  \r\nI find it all very confusing :) But thanks for doing this blog and the concurrency book. Hopefully I'll get my brain wrapped around this someday.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2015-11-08T00:57:55Z","timestamp":1446944275,"authorUserId":"disqus:abillobenedicaris"},{"_id":"f7f673b5-af3c-355f-8bb6-f0564b8aa583","authorName":"Stephen Cleary","authorEmailEncrypted":"TGpeW+gRdzETMyuyxJVtJAvXvkv0f/V+dKsNkUZG0pZyCEykYyncMXvQ+RW++5YOkV59RuLUbvn7b96hDubPj4FVLQq1nvihdkA7iIaUZBS+TFC0FIDlkryHt4EzHDS7OBxOk2gJrL9tG4Nn7Dz3+SXWVEUXGF4KtJHqjKBBQ6qNVVw+52nc/WguYcdbGfpbQ0N7uWaFktWI8rSmnNuqvxyGL69VILBr56ZBsMKvQ6HdggsXmFa8tMTVxB8J0mefTgzGBV4fBTRyao4GE7h1arc+HYPjmD8iB/HukhxKt+6L54VSjvE+QyDt0KJrtw7UAATktyx9VSTAD9LAz+PTxTgW5CU31VgH3phYk2JRFHypDskG3EO+z6ouWFNSXYbLt6dgfetKpzr2deMWLM2hLEJ4FGaDm1jjOFP8cd08LQ0JQ3eveUKGGGU5NrHIRv8Xgeb1tkbaghQtTAYcz39bB3bHCJ/JqVmC+wusnwMYNXLUc5ZQs8YLCVHhMzULJN9d9DgbljleBNROatgMIRneSAMnA5MaPEvz45IlntGxmndvYiqvdU0fxp7gI+zPbuO6IVAQgs+Puz5OHVG5WniNh/NqYbrmvwuvG8ouH4Hxplp8HxNunD3L7mqMJj1QXGKQJsqfOYGqFGZbkfv0nebKsJf9SpTv8hPt/WT4Bryj9ws=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Task.Run is much more than a shorthand. Task.Factory.StartNew is downright dangerous because its default parameters are wrong (for 99.9% of apps). Easily >95% of StartNew examples on the Internet are wrong. This is why I always recommend Task.Run.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"53adcae2-16fe-30eb-814c-cf56254d4af3","date":"2015-11-08T03:37:17Z","timestamp":1446953837,"authorUserId":"disqus:stephen_cleary"},{"_id":"b9b0b7ea-8f3e-3b98-a3bb-46ea53a27943","authorName":"Piotr Sobiegraj","authorEmailEncrypted":"gG1COLe+gS+TUGwb+T6XTxO75sjeXtAJCqkDIHejWdKnqNaWEryLytZ88bg9nZddhHW1jqpAyfxvD8sX+4FIm/l5f/KxC/8OxF7eTxR/hjD1VyY6hMOQwHvZ5g5Wbz38Jgv179hR/H2G6R5+l+mITuSxjfmOiSTsJ1Wq48S8+FZEq9+2XqIwQQgQPkm+8+2ZNTmzPPqcO0Ete9ptDDehvMNjtvBivVoP/RidYlTrUkdBC9iKqTGLRzOiO24bEZuHejBsSgl/Pu9wOJGN9lmtvAu/kMxwko9puFlgr6C6mtgoiRugFzY+skHOA4SgtInR60weJSuif6U7tpgMR2ICObdraa6iMDp8ZQhmEHPBchNoTNk3IGF9BYeUL/IqiexYdB0M3ijXQQuzvZ8RbOij8s6GdsiY5tH6s3CT36YLxXKvTh7fmC0Znlzg9sanQNOiIWTojRHxaxea99Yy2FTSW76bKRUpq7aIPAz0a33mhLt/cxG2KQLM3cewEDMinWTqqbnkqH+Lc5Z6Z1tqsjlOO+PFgTs2t2GfQv7jznVmc+CtlCixbx8U2ortX54X3FR8fOpXUltRugSTcxd/sRXmh6/25k+1MOWoEAavXZXlnMrZFsQ3TpJ7Een7go4vZmRPiyhGK3Ulc6WVz7uSHC/W5uO+Dc3y0LRsxv/CBEDvh5o=","authorEmailMD5":"f4836065c2b1079021dd542a674a0ec3","message":"Hi, some info you can find here: [http://blogs.msdn.com/b/tma...](http://blogs.msdn.com/b/tmarq/archive/2007/07/21/asp-net-thread-usage-on-iis-7-0-and-6-0.aspx \"http://blogs.msdn.com/b/tmarq/archive/2007/07/21/asp-net-thread-usage-on-iis-7-0-and-6-0.aspx\")\r\n\r\nInteresting parts:\r\n\r\n\"So how do things work, exactly, in integrated mode? Similar to IIS 6.0 (classic mode, a.k.a. ISAPI mode), the request is still handed over to ASP.NET on an IIS I/O thread. And ASP.NET immediately posts the request to the CLR Threadpool and returns pending. We found this thread switch was still necessary to maintain optimal performance for static file requests.So although you will take a performance hit if you’re only executing ASP.NET requests, if you have a mix of dynamic and static files, as we see with many large corporate workloads, this thread switch will actually free up threads for retrieving the static files\"\r\n\r\nand\r\n\r\n\"If you’re curious to see how much faster ASP.NET requests execute without the thread switch, you can set the value to 0. This will cause the request to execute on the IIS I/O thread, without switching to a CLR Threadpool thread. I don’t recommend this primarily because dynamic requests take a long time to execute relative to static requests, and I believe the overall performance of the system is better with the thread switch.\" It's about a MaxConcurrentRequestsPerCPU setting.\r\n\r\nSo, there are more precious threads (IIS I/O threads), but they are released by default, and code is executed on CLR Threadpool.\r\n\r\nAlso here: [http://blogs.msdn.com/b/tma...](http://blogs.msdn.com/b/tmarq/archive/2010/04/14/performing-asynchronous-work-or-tasks-in-asp-net-applications.aspx \"http://blogs.msdn.com/b/tmarq/archive/2010/04/14/performing-asynchronous-work-or-tasks-in-asp-net-applications.aspx\")\r\n\r\n\"Q1) How many thread pools are there?  \r\n A1) There is only one managed thread pool: the CLR ThreadPool. This is the thread pool that is used by the .NET Framework. However, using Win32 APIs you are free to implement as many thread pools as you like. Almost nobody does this because it is very difficult to get it right.\"\r\n\r\nWhole article is worth reading.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"5a18295a-1907-312f-b16e-d7266852e939","date":"2015-12-14T20:08:54Z","timestamp":1450123734,"authorUserId":"disqus:piotrsobiegraj"},{"_id":"5006ab6f-24d9-300a-9be3-c09d1c399dbc","authorName":"Giulio","authorEmailEncrypted":"B7g2UtKbfS/2a1Q8olIZLL2TBq9gmPrsLLZLg3qrQPnbx1k0ACMGuG8AMdbBd/OyHk1oJwN6f/J17XtDiUyLf4P8Pe5BpNqLdni220IIzmpUpr1FTCqSpEzLNaySUOuZfXflGZy6WahImOHIXLqbAIHWMv3s2h53utiXuhQqMr6TYLojKc7dUiVnj34J0ZtVeRWoWG45XWnfwCknFcCvMLMudv/bhKAKvyIi5RVHxmxICv7i/yYWzMcV8HnGAastCmxgNBCNFn+xlFiizQeYGQs743OiL75CCXKji1sZOEEzHqeI7utfJNhTMekcmtnFkjSZ1Y3yRoLcVUE7iJJSuXOnTru9VmlWu6Sxgzwe5aibO2cOhNbuQUnuox6F7wpum3wqV3zC16Gzz75Jr0Mo6oMWsNDGfUEnXmjQ4P4Sew/66le1/1REd1iXd2aGjQqGQOpb5hST6bKiVHd2VVhuen8IG6Qo9H8MjIJCpm6FjqT0+QZusr7lW0UZq0L+CgmAPkkLvJUAtbv5vwu6yEOnS43JrMVcFleXTUNH8Coi1BMon7q6AzaWUOWM3kjyOXnFrY4GwzdwRCxwAjl2QB8r+c71CNSs/zPETbwEanMkpmVv3Fy9dDzPn0CkU940AnazRSw6G27pHArDJQd636rFSqRhhivC2NBhGfRAfdpc8zg=","authorEmailMD5":"d040d48dc09031501a031acd841cd580","message":"Sorry, as per my comment to the previous article, I can't see any point in using the a sync await in the final solution since the Task Run already seems to solve any worries (i.e. it's not blocking the ui)","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2016-04-29T09:00:26Z","timestamp":1461920426,"authorUserId":""},{"_id":"a04b27c4-012a-3aa7-ac7d-84e497f23950","authorName":"Giulio","authorEmailEncrypted":"paUYss8d0JvVu2bFvYmR/44ekboZJ2vJzA3tUuOhNapWcZBVZC0s4opiur164tMvPlmwVBQgJ/sHoJPL4TLMbxC3as1KzHFKFsj4SulP9thXx76DfauSay6nCIujDz/PS0NoKnB39s/z+zuFtTNt0kWD0GXuYbhzVdumPwY+DIy644e1tgc1QJ6GcW/Xu5T1tP0VR1in1MY/2QBujsHoKQEVawwnr8m/pNVGJc1t4vojkzlq9Ugdjm+U5N8XRifwRn3bJjHPCOACBaDIOdIXw5CHqOGelHFxjVxcz6KLkYovbN0kr/BnV9Weva44Vs+mITcP4lFZ9/rVhFsmx+LKSWzAzTHOv8r55kKTw9qEfE9dQwvhd3QycseaCkw4nboWRu2y/eePt6YcX5LbU274Kx0/RWUEIGQ38B2M9jgINuxQViIit8c4gG6v5oD7NQOhdZjGMtLAS+bp4qGN9EecmtX9Rb2d9ERtmzJ83frN8FvyAA0PsxcQ2w8NFtsv08ljeL4eFen36B7yJDluedCLJwYUbjdmNEMVpIgy+afc5ghprv+m8QW12eSTgKXCn1FxBF/4JdIWVxhjPPaf84ZACWPEGerbE3vLMCRmeGijxfqq/rmotXf07zelC46knP83mXCUc0jjlX9WPI0pBCnGUjvQ9wThyPIsMAGLRH2QUdY=","authorEmailMD5":"d040d48dc09031501a031acd841cd580","message":"Thank you for your answer and your time. In fact I'm doing Task Run using the results as \"closure\" in the ContinueWith passing the Gui Scheduler to show those results or any exception. Unfortunately I don't understand how you do the same with async. It is not in this post, is it? ","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"c6d8f7b1-2b74-338f-9f12-fa5370ebf093","date":"2016-04-29T17:44:26Z","timestamp":1461951866,"authorUserId":""},{"_id":"c6d8f7b1-2b74-338f-9f12-fa5370ebf093","authorName":"Stephen Cleary","authorEmailEncrypted":"IrHNJtpGHGmi0HSdYUHVp36zJriajopIiC76ZZok/ZC9Fr10PgZiMOzjVvk4lxp/RA+1x4d7fDhdoFu/6nMtaQJNRSFuVXXyb98J+rfy+dYrkNr+oLD+0cyyR3c2VToxqtYpraeNWf90HikvXa7Vy50mzVlXkSRaNEGcLDJvdJA6yrAanQldccx2iIvV79lSOKtM59T2aoz92tfG3ll+7Vl9+0d39FoXipSl3P7aPPoSS+z+150XQbiJn1r3lJsTyCUR6BzOk7lhNt8PBl5oiwmKkxJMeo3GW++r59uWsXAxUwkF0UJMHA3RDy3NHL6sjZrBNgPI7uGs+W+C3RLRAz2uZZcQ9xMtT8n34AG0j4Rwuw5LlGM0/JFDYwrx7RtqLbh7ZdSjqxBZmI4YOsYrdXQlIkZFUOQhp59rT+StTYVYoyK55Fh+n/iRRsPmF+v4icOzZqNS65U5lZ/k/nzsho1kJDnWEDOCtqbhmBJ+xWjvEspBJFQWM7TGc2NFnJNnHhBDKLR49tIAKAOc/pBDXLOtdroxQNEhT0JadBPMD75GM2VrbcSUKnHIPJwE2VTystQ7NUD3XAmD98h52fwI9gNyaL7igTCeiDlthYtXJeNsXP9CsBBIN12E8/c59/dlza3BwH1LLT9ldStFuFH48y5aNpnWa6txoGcI5L6BxpE=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"The final solution uses async/await *with* Task.Run. Task.Run pushes the CPU-bound work off the UI thread, and async/await causes the UI to retrieve results of the background work. These \"results\" can be an actual returned result, or an exception. Just using Task.Run without async/await will act like a \"fire and forget\" operation, which means any exceptions will be silently ignored.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"5006ab6f-24d9-300a-9be3-c09d1c399dbc","date":"2016-04-29T12:07:30Z","timestamp":1461931650,"authorUserId":"disqus:stephen_cleary"},{"_id":"4a8e46d0-52f1-388a-8429-87e24051e9a3","authorName":"Stephen Cleary","authorEmailEncrypted":"IsMGzJOuu3Oyeg6Daz4hoZbnn/WR63ioRyVSdz/0j9e5t70Eyz6wFvhxnbOTnm6gIaHGazZ0rAWXit4pcYj/giNrF4tnX/GCK7WheMqrv0fhqlWBMqpuJFjf5tSi2VG1ViZs/u2GbSDlof8to9ENwaJpnD3NLd1U4fDj3hsGZWLbB8qeR3Xva9jUMUn3HJcwinuvRsM74x0teFl1u9s+huUwbFWRPHTJ/YVtzS2V+MaS05FHTfkZGyW/Kss6JBlmnVCWagGcdxy96w+85hNQoB8nSLai5BU0cA9YGdLSBTRV0NHfaIFSRiNjN8zhX8UZRoq4bV0KSYysmBYEcdv8DxJ1mEjtFwNWY/6MFL7gQDwoB10Q1Cu5jBUpC1wmAzaiLdxkR1GsKU3gUBAjT+tIOWORGUcakj0oYzzosk9zvOCTfQM8jPEQs80mmOKJObJV1PIcikepoZOmxgGw9P2NDh0oLSP/o+tgetumkjv9Gqr54sA8fsJ+dy+V+FyYwOfzW7kcwyhLw9HEhHPaxJuMRr4OFWr1styJYpUabeBL4GX74YdI93yqI1pOkTRHxFK7769cxb2rhwVZKDRvePkxpxorHjEDvkAEd2BH8ApNAiAEyRS1cxOpW7bEbWswA2nHj5JUhiXJNhxJRINd+IRKm0tvLLqEel3lIYLTj7HwaXg=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"You should be able to just use `await`, something like this: `var result = await Task.Run(() => myService.CalculateMandelbrot());`","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"a04b27c4-012a-3aa7-ac7d-84e497f23950","date":"2016-04-30T01:37:34Z","timestamp":1461980254,"authorUserId":"disqus:stephen_cleary"},{"_id":"5a75c4f5-299a-304b-a661-fab5f71c4d68","authorName":"Giulio","authorEmailEncrypted":"Aw9uF/EbHnWbAtKXiWsdozq7MOPTIKaX5UlhWIU6FXV9clwIPJWl2cM50pRkMkKa4BXjPxD3bm+fsy33aPbYkvfKz85z7ykiMXQltBMSe61G2/kg4U4yiDiezAh1gsSbXCYtZIua+Z6SVrOIviCJWWeXew1scyBq9g1USfn4YXdBMHrRRGYK/jBSj8h06jtxnlrjfr0JdpP6CJQVXt6fcn2uW3Wtf1VHRl0Pc0MvLP8y+cBGRsgLhXbUZ25tDQnjKNJaK+5OviNUbui03o65+qipdooqveJskt8a9GWqzrHvvvJjpgxEPHI4h5iyXY7U4OrqBXOC5cT7nqaJ7rbVgECkQwUe15inMDeInSWL162t5Rd5VgrHd8Vvhf/0VIfGTcrwQQzcIfnIB2upHB8s0bNL8nNhau9RAJLZ5BOiNUIAYykdmaOCQMDBKCU2XSVsxCpORvvg9rTwVCjg3uOfkoB0kDqnGaGEgYf1ZafuGrJKm7/kYG2jmCSy0fOP/Y+1Pf07PhLxclHLvPFDx2lr8hgB2f+uox9zDHp2FC6ftEXTUI7M8X8P2ykBZyBiTSl5qQaF1CXwJD9Zdp6IWzSbOcEM9xVTLbolC76GYOnb+hwJD434ihO/2IHvCEy5v1RHZ0Y1u2V1GXUdjWFLX2Eoi40dPxXMjzVnO2nm9lzk5E8=","authorEmailMD5":"d040d48dc09031501a031acd841cd580","message":"Yes, it is what I tried. Thanks. Suppose I want to disable the button: canRun = false; results = await ...; canRun = true; For some reason, that was not preventing double click and I've managed to solve it without async, but with a continuation...","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"4a8e46d0-52f1-388a-8429-87e24051e9a3","date":"2016-04-30T07:37:10Z","timestamp":1462001830,"authorUserId":""},{"_id":"66080c75-34d1-3ad1-8670-27bcc439fa54","authorName":"Giulio","authorEmailEncrypted":"SG0onzgw+0k53W87UwSgbvGW6j63tEoXciNnv/AcsdD2tJsY12y1qUf1233Hh1BIg2pC2zs4OUALjfIVYn2MGAa3hNtNpP8Ed2TDDNHERB+Ax/1MGa2+3Cz7SB2sGM1WWEQUlSNUxvlG4UOz5WjrLPji6ZLCOh6DyqUfxb4oTvf7B04O003q/+jgnjYNLLo1pxWYMCezxbi8KAxQ+BKfv30bVCmadFQx8Lhi8kOA1jiMnxid1WoFaTakK0J/iV72nlWa1+CkDU73KJZ3S1hoQnqQX2qmL1N/OEcl3lVdqLOLC23b20ikBaJCoDNQgxBRH94m701ccxZV2InxfqJMJl8ZnQc0zjhLCDBW9Cd0WHngnaepSXGYueX9p5qN9vTMjGHK7t3angOT3tJWvj7ImnhzL83judVvgP1HlsKkHL6LYmwsgd5gFj8r7AUAY0WOGir4rtIC7k7ZyhDHvWPLEtS1DcC7ucBfdZbNeQ0NwSs6HPQMOG132ZYc2luGrxjsiwK0sScfv5yzgQTrnacl2fkRrznk1gHgHa8jYN0b88HRgy9j0mw4lBu6MmuSnSU58cnCb8TnROyT9Cajm/kiTCqyoJT+ZDVQ74hskiuePwxzDEso+cFI0fBJ6DjH33uGf8i0jCG3sz0I+vBgj7RtGzi/hz8DyaxB4o3irWrM2P8=","authorEmailMD5":"d040d48dc09031501a031acd841cd580","message":"Update: Well, I think it should work the same with async await :-) just asking confirmation here [http://stackoverflow.com/qu...](http://stackoverflow.com/questions/36956334/async-mvvm-how-to-change-notifytaskcompletion-result \"http://stackoverflow.com/questions/36956334/async-mvvm-how-to-change-notifytaskcompletion-result\")","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"5a75c4f5-299a-304b-a661-fab5f71c4d68","date":"2016-04-30T14:55:41Z","timestamp":1462028141,"authorUserId":""},{"_id":"9e8f9b09-7f89-3a42-9764-cffd8d0c0fcf","authorName":"Stephen Cleary","authorEmailEncrypted":"VCRp+jcHUyS11aplghnLjGYEW+fSPJpn4CoWCqItyicJQTlt85s/HT7+u+fbogHXld0eqH8t4gXV8E2OJlKabBwOZmqfONtYZftBXQ0pMwdY49sAzNcuagrZEiNIQqCuZ1+MXxvX0+UttHhghkCZ99dAcUNrQxzxBYwmQeemRpg+CjKVb62bBNehHuLGVrEq1jVnNGmL00U4BKFSXPSr0jUBBWI0JYsNPh2zpcCRtg74jlbJrwLE6KAPmWAtlT5msAeNtOZz/KtfK/W9hqPcohwcR5nvHVNwH/qDE5aak+ciyWdCMKBNybEUA5FRJEG/pUuOCkO7hhydqy8zpC7YcO3i4RVgyAPq2q7Kprjv+H9arPourxLBzWEhy1Ax/m8GBK+u8g6+KI9uEyz2bDQS1Sx1A5uzOGLa3d+5gsPfXsQUcFhbWCqFunLwuPZtnHMBgpeuBSz/Lwyr4yCUPNWiu3USAGSAbYM+QOeIf4/0O67XAEm2DR11jKfmYcx1gziL/lnj970UvFJIS5ckiaor5jBpEE/Dwco5JfTIfYW8YLeBYNmx3Zh8yx2ur9P765EfIpqSdVI8eRoLe0Rkeb5aTOiYwhZute7KUNZ8KaCuoaDB/qCKGzt0flhJOTj+aAXxFRXiDdp0KxdN+N+jJcHsToaKM4mQTuJXpTSpNTvcNpU=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"In this case, the deadlock has nothing to do with Task.Run. You could replace the whole Task.Run with a Task.Delay(500) and it would still deadlock.\r\n\r\nThe deadlock is actually due to the use of .Result from a UI context. I explain in detail here: [http://blog.stephencleary.c...](http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html \"http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html\")","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"af2ec481-3bca-3477-9372-34c716f6e698","date":"2016-05-11T13:22:40Z","timestamp":1462972960,"authorUserId":"disqus:stephen_cleary"},{"_id":"af2ec481-3bca-3477-9372-34c716f6e698","authorName":"Mike","authorEmailEncrypted":"fOVs94h7tdOcSLuMcTXMRe6INFngC+dqVQ5G6/DysieYnbFTbEThygMBlcNLStJ/tVA78bnrrJwElURh4SRXx7yDF/t4rovtFY+LicfdOhkaD9twXLmRNLLxFN8jwz/bDX9KfzoiZZAn5bbkqykSvpAtmXe3XCtqSHKgsEPjO8JpUBDxOiXZCsoNzRSHJO4ab1ygVckcIFa0DCkC6s1JHi8yWARwYJ5b/IbA9jXbs/tF4CLss6tOBzS/extfYRJrfho9Yk4zFCgusD06FSQpqrOKoq6kuZSIFfCysf7D+rmkgt9WoWJdx7qdbyAkmlP02tX8lutXFxp4mLNj5onEZVGROzJWJ9ZTlHSEfTKvKpuJAoA7kff7ITD1Jq/UKiKoCP0jY0fffsp6+rtA0J1cvFXzCTFibzO+pJrXnZMKEPQ4xtOB0tTxpOMdGbKB0F2FH5wlW+XcuATaxh8N82x+fUmYV8/KKaOFThSQvg+xR2/HP4sh2tvZO+k7Djvu9cxkytaui7dFzxfrj3B4PmOMp2HELNt9sVuFJS/MGC7bNgXqGQi/Ln+wr6M+jVb2IvYpVnKJch8kVbz8gxL7o0INPB8HGPPpz3Xyd+2n2D6g6O5+xCwU+OqVfrrMuzyc3tPicM8PsaC4DTwJf0T+ir061CEjRanIDyjMQfuQ3HimBcI=","authorEmailMD5":"d9df2298132d23d787476d08346c0b84","message":"I tried another \"wrong\" example, i expected that the UI will block until the result is calculated. But the UI will block forever and the result is never returned. Can you explain that because it is a riddle for me:\r\n\r\nprivate void btnDoAsyc_Click(object sender, EventArgs e)  \r\n {  \r\n long result = doAsyncWorkWithResult().Result;  \r\n MessageBox.Show(result.ToString());  \r\n }\r\n\r\nprivate async Task<long> doAsyncWorkWithResult()  \r\n{  \r\n return await Task.Run(() =>  \r\n {  \r\n long res = 0;  \r\n for (long i = 0; i < 1000000000; i++)  \r\n {  \r\n //Calculation  \r\n res++;  \r\n }  \r\n return res;  \r\n });  \r\n }","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2016-05-11T11:05:14Z","timestamp":1462964714,"authorUserId":""},{"_id":"ebae0389-7a14-3c34-8881-cbc06157a0a2","authorName":"Mike","authorEmailEncrypted":"hf8ky2H0btnkCZnmVp/qJoSOmEa0rXYIu8iobz324ftefcekgF/F2jZsvIgCbELmMQIfhsfW4vEMV9Orm0oojl872UZGydsSnW/kJGpRkdOwfqSb+AVFyPdkwVebr/zj3hWOLl4qJrSgYi+V4uc99A2rLkdafMaFhVE9PCEpUFpCaSo423yik3TypTUimRKtArhUiBc3OFfs6UXtJN/zTe0lCSxW4YmiSm5MqLh87qeCWLN4PE3vCFb5S97xYGKTks3uRxM6BwK2I02WBTGnmRU1uV/Y1q1tSaeO/50HVgEAvfQ+VrR25Js6JGnUebjtyJJzWAm9RKxu27tX8lp3IoZQj1B+Ob6g4hn0Ewtmx/9GjslLqyj0IGWFhj/Z72QtX9DfYAMCWymEiKD6ijLOeiMZVo3tiSxnNSNnmHhzUB3MxnqYyvMEF8yk8EDv3yo8aMKruzpYBxNrk2FYclhjaCtMRbNy3oGHqXZOu7NkHcC1Iy7QxldX5FYbhu9ndRigd+exE8SlEO6dbPd1nFMar2HTgXYIswVI7uno/nRMgC0WqU48DEGjd6Vegp7yxISNovWPtSEtvLx8zy94Fc7cBfidbmR/utrhbfPyM45ilY0hs19jCZzNa6gezCZvLMPLRz46iRwOzqGlGpIu7JTKWFaXTYdL6TZkRGdRSMd5BJw=","authorEmailMD5":"d9df2298132d23d787476d08346c0b84","message":"Thx, this helped me!","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"9e8f9b09-7f89-3a42-9764-cffd8d0c0fcf","date":"2016-05-11T19:09:36Z","timestamp":1462993776,"authorUserId":""},{"_id":"37d1df41-5d2c-3d4b-91ad-4cee83d6e4f2","authorName":"Avi","authorEmailEncrypted":"U5eD2tIC60gpE9AOfveHan1mcKVePCFAzHV7EmGgu5AyBwPNe0B9ylay3Dg6R1jrMkDSWhBIKfFErWj6zEbB6+sduaDZlLrHQXsXmnRn9ls3BTnq1N+Ge24XlMpF+umduiDhLZr4cHlQQ6MOg5ki/MsKwNilCZJ3vpNIr2YCLvDg2nh7Gx0m+hZ937Wz4uwFoP1x5k2Hvk51ykiUh/lQsqfQ6aVSkdNLh4Daoat+rfpMfx6+LTbaEVSAvc+XLx7pyNcEOONk24+4ApzpBOFS/XR5niPSFVdVu0i2BWYgEeJT8MPaoFCY53eWaRYp3/mcIc/YnabWGDnPBOxcgo3csmvotG81H+01SPUOKQIojR/BG8DcmSeYqVcwtNbvwLkw4lZqKZOAjxUGEguDnH1N7xqD3dv1J2GV3v7aVgCqIdG6mcPNewQ3EIC3LCsfaFpjwG5TsjOfdiRnR2eLREY8AGtsSpt+aUYrqW0p43nWLsSuGao1Z5yqyI6+u+Xz/6cvwvaJIEpbtMENk/ELPdymYZR+zGWvwiZbW7XsrMXv0c1Zo14AKp3W22BMNDpYy3KY63QffbuUHd58eKDPTDH2NLJdZo/PHU6Ap1Vi28us4fzbAK/FVOIyDJH9+GmWdyK9RQt5FZHIUufCDPhHsCJM4LY4hzhsvnfYj/5qCjYOdSc=","authorEmailMD5":"98f19d70948a72ca4a5a99b7afb49494","message":"\"That’s why one of the principles of ASP.NET is to avoid using thread pool threads (except for the request thread that ASP.NET gives you, of course). More to the point, this means that ASP.NET applications should avoid Task.Run.\r\n\r\nWhew! OK, so now we know what the problem is with that implementation. The plain fact is that ASP.NET prefers synchronous methods if the operation is CPU-bound\". What I understand from this is that by using Task.Run() for CPU bound on ASP.Net code we might mess the Thread pool heuristics, so it is best to run CPU bound code synchronously. However, what about creating actual threads which and run the CPU bound code on those threads. I'm guessing those explicitly created threads are not borrowed from the ASP.Net thread pool","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2016-05-23T23:57:10Z","timestamp":1464047830,"authorUserId":""},{"_id":"7016fa64-ba62-38d3-90bf-88c772b2ac07","authorName":"Avi","authorEmailEncrypted":"HRZtbHZfOr12r12bFgOkv7YARACINczbTz3LlMtsJNz/GkyaFkdlklr/eLAxb6rwugBZCxvnUI/9BbAFdfum3ohNtqZmdefHrJrHe2EUnK91oNoIlAvYvnS7tVDAoCB6FEdFA4bWkIhTtj6vYvKDAzDFpH/gfiOqUykKIJq+osnoa4qDPzapCtwP2BCSz50TSrWelFdEbBRMdarKxotYEIaVjnPuIcMhWFQI5zYSB4E/TNZHsP7hQ+uSJPl5U6N7fjCjWbwyaVyqoQG/EpEdI89RKUrTOqcO/78gT8lOoBsluoF/kazlJtsJkmDVx8XyZsDqj6Lycug3G2kCwfkHLRCSwKMHrzzgANWxsORzTp3xspJTEJ4WBGog6Dpz/hqamai6PeU1jsNikvnJQS1ebyvyQwTaJ3ibOAxHGEbOkbFxQAkKkAyKLtlujpKQqeVLdnyfje2mCUdu+ezKF08A389GECXKc0d0HcR8UF7WKGF03BhulgdYbmt+FPZvglU1dVzmKouGflQr+kDiipctgtDE6iZL6j/6HWY5PhREh3syf4GuaVS2H2atpnpOiDSDon9ijBWg3G752N3+Yh4vizs+5ib9DAeJ/NGou8bKSlOuTGNaunACbrBCQ6WllndtkKuXIRpS05uDg8eI1DaNBKQPCHleiwHTnkJLqT4H4GA=","authorEmailMD5":"98f19d70948a72ca4a5a99b7afb49494","message":"So, let's say we have one thread initially that is the request thread and it is executing the following pseudo code\r\n\r\nController function()  \r\n{  \r\nDoComputeBoundwork();  \r\nOtherthings();  \r\n}\r\n\r\nIf there is only one thread which is the request thread, the processing is synchronous, it will execute the DoComputeBoundwork();and execute there for a while and then go on to execute Otherthings();\r\n\r\nNow, let's say we were able to push off the DoComputeBoundWork to a non [asp.net](http://asp.net \"asp.net\") threadpool thread. The main request thread is free to execute Otherthings() while DoComputerBoundwork() is being executed simultaneously in another thread.\r\n\r\nWe are able to do work in a parallel fashion instead of sequential. Please correct me if I am wrong or I am missing something(which I think I am).\r\n\r\nThank you for your patience Stephen.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"b1e393be-2011-3fc2-95dc-a0a7178cdc4e","date":"2016-05-24T20:50:50Z","timestamp":1464123050,"authorUserId":""},{"_id":"77cda795-102d-3345-af82-5aac09b6a4f3","authorName":"Stephen Cleary","authorEmailEncrypted":"nuQvxwEwfM3YV9oyvxX+no9ub9wjvS7oZNH9+zuGwD9+a0CCSvUim6521w0lGtlcRdwIDb30oRJ8Tz0pzL6kPVmvKiNKyNNj41kAyG494lpUppVl0peHK3Ov8w+FJtfktcanNc2bVdYWUo7wY026BBYnNO/2D1iioLcMZCW+XVd9hKQy92+/n40GfhVAJjW8xDkYPA4Ujr6w98aURprAAtRnuLp+sh+CTYqNWTxNfZiTxmL0Y4KZ6OQHLE50gVxodZPL6pHMPr9PLa24/N3yvh/1PjOEE65PiA2D3/lMAEeoReMubmt+uQ6bL1mEBaMCygd0+6XAhA4BoaKN8PM3i+MgQT6QUJRBRLwQnRcNz1FSUGDxxUYPEc1TybMBR6s5kPCsUAbJ/L2cXc0oUoYrsvaRgUTUtbU+RZWKywZyREp57pStxCF/xzEQiMxnP7wOPKABp/k6aggd1Cqmubs4rV4fzygsIJWKDgmJCgMYb0qW4DIgq4Jb8W4O289JS3+Gfyb06ruNZfY4CmW4b1oXow3sGAM4li593RCScsIOPXm9H1UTeNzyzWilpLTjip1ObMZjnbzu9TQivFt/i00CxnC9pJ9eb4AauJRJtldu4k72JpTVk8rJkyoVIf7mJcrNZdg7Uq4CGjF5U9pd/vx4P/qE1t+ijpRrq53FHe1CSHY=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"The request thread is fully capable of running CPU code. If you \"push\" the work off the request thread by doing `await Task.Run(() => ...)`, then you're taking another thread, scheduling the work to run on that thread, and then freeing up the request thread - instead of just running the work directly on the request thread. So it causes a thread context switch for no benefit (in fact, this technique will run slower and take up more resources for a short time).","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"e9674175-f2d3-3ef9-82b2-ee54f97b14ed","date":"2016-05-24T19:08:38Z","timestamp":1464116918,"authorUserId":"disqus:stephen_cleary"},{"_id":"af89ca05-2ffb-3c9b-ad21-b69e01d44dfc","authorName":"Stephen Cleary","authorEmailEncrypted":"nw7FnhwNfXdnbtH7vpZAYvDzM5cKccmKaOeKTthC+0OKOerGM68eH2FZx8jrjEfDPbHijhohQAKZWAy/cfdeHqvYtXVUwLzKI62O2sb2u+MFZOl0RfdfKT7hf7mrGdMIwaEH1daU7n2s+zXmN63KFGn/YnjQA92OR5EYJM9tI1mY/UjfVVSIH+fXOewcyVOotU3Gp5XeZclrsVyEvPzTtiyDI5CqaueoqyIHLWx9OCKChXOJlCy89HW4ZW7mTzwHKxl39PXGhpxP88xUIX98l/B7YCeen7SjEIyjDJvZTMPJpreYsjU9XrIE7uY0DTMdhXFyfrhkSVXe/cF8Jj8/IZTH8fgpdMqSukV9pxWAlHKOz9+xoupYV/NJ02/eOW2GvdstOfdv4S6KSgDASCgo4rzuP28pJc0LV8NtABkpNotYAMGAuD+BJO4gk3tEFWNScz8f4QgyEuGdEx4n41XQnWtk0UdU9F6CBDPHTFo6z2F4GSsifklRXOzBsw4F10erweG1yhQfAqUYQpau+w+SC4qlimsH5NGGc/L1t45iwKx3ER7hkNTBV5gArnDDxfrgYSjpsEUL5K4uyToCnDrcx6mcifK+fslrrLhhKxuz6jjl+fzgyIVrwHGPBUJGct2ISAyJrHTCjQM0valoXYyLj2hN6GoM8qhibkGTiy9YW3s=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"True, but why would you want to? The request already has a thread.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"37d1df41-5d2c-3d4b-91ad-4cee83d6e4f2","date":"2016-05-24T01:38:42Z","timestamp":1464053922,"authorUserId":"disqus:stephen_cleary"},{"_id":"b1e393be-2011-3fc2-95dc-a0a7178cdc4e","authorName":"Stephen Cleary","authorEmailEncrypted":"IgBQB3du5SMTvAiJxQdRsrz49I1cF+rMTXVUKZWBJg/JcPK28pa7nnV3nOMbCyQCGtCuSHgBzr64QxijZMPazZyu6Gz7ObCbd3jjuZAd6RVjUpSh3swoJ1JYLMKOyGN40UvuwDiZ3uTE/VpGoOAFJua8PiWH/qMaVSFfUU8DJMkbA4qxXZiadAd60ncV5GnNH7uQhOit83liEzYj+HBKs3Up4ZBMNCXyyf4CRpftkyjPJophbrgj/KcPEbSSNnSC4NnHpoStkoOPpN3DFMQJhtkt33dhxB3tMrt3+NblNr3YW/b19QG3sF3rbmC3eeqJOsyiafGUat3qWNJwESE/3oa3mtHZ4YV1NF80HOIU3wBFP8B7Gpa3vO+K0jvtZVYC4x8o2TaKY2arl1ZEB+3ECWQxs7tQ+M73FpvlE2wbOXiqV75iC90Qp5yuxvBHGOKdXb+8OAtjMbJk/NsNobL4IHBpWtLoca+UY+0pzkHVSuj9DwmyxKTfmnN1nwx/GOjhRybgIY8mcP8e2O7xht+aQpc20dPZEby+kbpATX1ERhtCyVx8DCSzqQ7UY72grD8SHKk9WQ/XrK/L7QBfX3/NY6+HqtlPW97ekc1NzKL2tPPoNOdRANfHZFv/857/p50vzgvUvdAPHno8cGqtGg5ptS3Cl7e79pV67K8SKSDDN50=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"But you're still using a thread. Freeing up one thread by using another thread is not a benefit.\r\n\r\nWhat benefit would you get by doing this?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"e6926ee4-ee81-3a1b-9759-61f247e00d02","date":"2016-05-24T20:37:19Z","timestamp":1464122239,"authorUserId":"disqus:stephen_cleary"},{"_id":"e6926ee4-ee81-3a1b-9759-61f247e00d02","authorName":"Avi","authorEmailEncrypted":"tjzlnD04TQp7Q+GtADrTwNSsjGXRbnmwxqsO/TXIXK7/4YgCWX/jORLyUWPoCsFxisDL5/unACyYGBClnaCpsCO3+X87uk6z6jFjnzc7d3iVMOWWsEeodS+khEejdo4ytjJPKBMGM2NoUvSYKnsNsvRunqgC1y8pzffD6BXWtri8/kn/VPHmuiTNckJYErPpe8Oo8MXHQOD5qIUBIglBk+ByK3GKWN6mBCCfFSgOwSgtAu1NzsL3ZFUnm7Xp2eTjpSFwKkIXtFH/izx/K5JE+pfx5xW/0z3d4lBFVUOwouWNE/V1XjJe/sINDnxUX40wK86k1VW60M2G9COSV+ryIPnxkcUKKVkU5QVGTarOCWsiI0itHTdnw2wMPrWyILA975QG4kOmYML6HyFCfJBPSnOzDH+pLLDkvCxZbR3A2jX+uFUcK9d7Q2gqt8FfLrer9R8cGZMyvXQgK5v2yvB3vLP8C9gbqRggNcgnMei4Xg5UbQTRQg7L8SD0/Dys48pMQfLqQMOnmsPUCHxDKXFUT3esAcx4U+h4Vy78cMTaEnnoyBtqNqF2R6rxYx81ckgfJGISa05t0TcdTgUKT3fVNPhH1iAdn1NxTGcai/Eo7fhQpzFoTg0tkQT3G+epg3/hg1BAwT70TOQ47dMPPv/sr/Ogfs4PbZtzTdbZm/PH4K0=","authorEmailMD5":"98f19d70948a72ca4a5a99b7afb49494","message":"Yes, but by pushing the CPU bound work off to another thread, the request thread is free to do other stuff,at least that is my understanding. That to me seems beneficial? However by doing the await Task.Run, you explained that we might ruin the [asp.net](http://asp.net \"asp.net\") threadpool heuristics and therefore better to avoid. I get that. So , my question is instead of running the cpu bound code on [asp.net](http://asp.net \"asp.net\") request thread and keeping it occupied in the cpu bound code, can I not push the cpu bound operation on to another thread(which is not a [asp.net](http://asp.net \"asp.net\") thread). So, we get a win-win, we pushed off the computation to another thread(and the request thread can do other stuff) and we did not screw up the [asp.net](http://asp.net \"asp.net\") heuristics because we didn't push it off to a [aps.net](http://aps.net \"aps.net\") threadpool thread. In a nutshell, can we push off this cpu bound thread to a non [asp.net](http://asp.net \"asp.net\") threadpool thread and free up the request thread?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"77cda795-102d-3345-af82-5aac09b6a4f3","date":"2016-05-24T20:21:26Z","timestamp":1464121286,"authorUserId":""},{"_id":"e9674175-f2d3-3ef9-82b2-ee54f97b14ed","authorName":"Avi","authorEmailEncrypted":"YcR/bBORowbtdDOT/hACucFhsTclsDwayeeyenyaOesY6/v/XyU1vD4ImPAxmDbxOTbrAThtsIs85ygoZu9kz6avhc7XNeOn+DqNY3l/RTPpUeGaw4/nNaTJPErCmHKVBQQhvhLwkTpljn+PeBbhxejidka236ufaMjbxHR/RZsJHP6qH1oIsrxb1pp72fW7V9yu1ZyhmDJZNBjkzUqcXwzK3wzIKu1G3kU88fvBFXxAn0LiRzs0+RX6pW96u+pKN6t0Q1E/YaOijQEA209CmCuj9Gonv9ZhQY7h4TcrAtWyYzwOJsNwmj/tqE1ZKJQREF9PfFt/v4h4CPmG2j+Maq2MG1ACn5Xq0zVjsYUNc/zf04Yr/6WbGvb87wlRrL3JiAKIe5yus5/gbDn2G+z13Dlbgu57wEkfWTTl/aqsEcMzrEE1osxvyM/tHl3sI66mhK/EXeghoyvUq07JrRQFIwbwUvUDkJOFKK2n0JJRjMJNX8ZnagtaDpf6FVdfsyhuAr2Q9PB6o+QSbsguL2kLGaILU2CdQEJGP9ROi2wOCuiNKg0zQFRM5qAT+CIEdHNUr8NpGrYLjsxD/SSucbfe12IiP17CZzPPoKQoKwbhaRyTCC0yGHHxFv0KZbUO5lQGOjJOavaUxwwobuFKRBt0q6pLsQr2j1z6QeGgVc+fxe8=","authorEmailMD5":"98f19d70948a72ca4a5a99b7afb49494","message":"I was thinking I can keep the request thread active and \"running\" and run the CPU bound code on explicitly created thread. My intention is to keep the request thread from doing CPU bound work and be generally light weight? I think I'm missing something here?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"af89ca05-2ffb-3c9b-ad21-b69e01d44dfc","date":"2016-05-24T18:58:23Z","timestamp":1464116303,"authorUserId":""},{"_id":"36ae78dc-33c7-3d22-83c4-4cd48c5a3de1","authorName":"Stephen Cleary","authorEmailEncrypted":"qE2SNVdw6cFXmVOwNK7j9leUJjq8zzostJmyAzr8XFcGHATqjz0MOmJl8hMBS1FLMSpaRuJ9yNlyVkvrsNRNG9IUtKEM84SQIuqvvYjA1y/O7FqNPNMSsJx4BGQnv1h4wdXgS4jzuVAwRSD2hUc0Y7pn3auGrQtAoX0BfvvKdTp6LwTfe/Fk0EntNJVemUj/SNnELlVkcAiils3gx+Nri3SHjsAHyKqJbSR8IvXdAsVIH24y6U4/g4ZGkuQQakjEJ9+zeNmDm/56uGn0+KqJLuANk0leZpiwrjFjKekNMPQlJTwrl4QKL0OF13/lkxO5AL+aMY3TWTKCaHpiGqt+l2lfK6lZTCVrOU21rQ5Ngy2h7WGP35Vu7N9xFyr5OQwRRRVeIRBS1bM12ThgbWdMWNGyc5nieLmsPPNUTfJ/hXOFWUSI8D/s8L/gpCS4dtcX1aqGg3FDGyGK1pmzpeQqMnuirIiiJ9eChz1oQwa3DAVhmej/c7qvYvLLPsLWscu5PNwKBALBoVcul29b3EiYhxG1i8YdavLMWvOgC5SMRbGqqWjQjA8r9ZgCw+JFFyiWUdX7NXm1rr7IeftHV433M/BeJSQXthw0rQLAiAyyHcoQrjGn5RO4nfc13X8g+r9SuH0AkXPn/XHMfdUnzT3xxWdhB3mLBpZjoz24jQLWWF0=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"OK, so you're talking about parallel processing (not asynchronous) on ASP.NET. This is possible but I don't recommend it.\r\n\r\nThe reason is that instead of having one thread processing this request, you end up with two. If the second thread is a thread pool thread, then you risk throwing off the thread pool heuristics; if the second thread is a manual thread, then you have the added cost of creating and destroying a thread per request. In *both* cases, your request ends up using twice as many resources, and this can cause scalability problems.\r\n\r\nIn theory, parallel work on ASP.NET should be fine as long as you *know* your number of requests will always be low. In reality, I've tried it twice and had to take it out both times because it was too easy to bring my server to its knees.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"7016fa64-ba62-38d3-90bf-88c772b2ac07","date":"2016-05-25T11:14:10Z","timestamp":1464174850,"authorUserId":"disqus:stephen_cleary"},{"_id":"39785bc5-1d30-330f-8ddd-f770777046c7","authorName":"Avi","authorEmailEncrypted":"XPDVan37WrFChvO6X0d3dy17zQCU8VMOulQbRhUZc/AgdvnL2QyY3XSGVtCa4pwFR7cuuIwvyaNRQkpibJMEGjMHJbzeQ8mtMCdaV5Te1wkuK6l3EUv0gEf4Q4Vbgxy/YRFtZv+wD0jkkxrUuGcmsixJycpyeusdEC1+Vr/1zPIwujgkNJVdV50WdFW+5LZv0HfUYUqDBd6BmpenxXTtS63Jr162FEX/Xu/mvhmVPYhznYCJp9VSjeTa8G/GCiKNwtQsVGgI/lZg7Rwg9cGqdljgmtK1bq924Rj9UTEpgldRJH6paEqlkxStplSi1ykyOsRiHS4XhebsEIXgVZHaufyRjWlUQECFRy5SSbVxaGVeWyYpn3LeYj/3Y/Ds/PHCRMffrSRNz1tLejlhckH6/LbsLQtqkXedcsmwV142qpwPOEYxtrKIl4zaDyphYPU575Tn0JlsYKHDavuyu0y86Ckg3P8U2Tjn4Puku6606l3hYOmqMZWaK00+yAV2+TZ3BKuLINgHUgkg1ObDJFSAP2nlY2dDH/de08EfpiwjidUv9k4J+w7Flfj5Id/zeyZVtpAMUrFdzN7HUB7hEMRYSG9AN6MGTUXalOyCKXrxdN8iQZ+sj9a78Pda73JUah6HOh+zmN6/8nHbZR8t0tIO8HkxKPt7Rct6TC0fOBnYSOw=","authorEmailMD5":"98f19d70948a72ca4a5a99b7afb49494","message":"I see. Now, it makes sense. Thank you for all the knowledge Stephen. Much appreciated.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"36ae78dc-33c7-3d22-83c4-4cd48c5a3de1","date":"2016-05-25T20:22:27Z","timestamp":1464207747,"authorUserId":""},{"_id":"8281da45-f3af-3251-acd5-afdbef5b6fe6","authorName":"Stephen Cleary","authorEmailEncrypted":"L1idGInipovDUlU0NeOc5NVTjpVguDneYXLhTM73ReSSqDR+xQYexM70xwKjrKMmO+5mu+BNPI3y8CYS25nQailYZdmtk/eFuuogpZ8n/9jkqpDs363Rm9HOaz2CFYg2txchl7u7zF7aGx8j9CF3KGGMLeIEtK8t+dFuSX/zsvKncUFwIj5o/F6GjG2nPp1WLdoOSq0orCLRTi45yusVy2obwLbOGqDXaBJt91exAIASdNNWTZgdfi4EZ3fnPDpy/VgCDNcetWfENHKvnHPCoV0skEzO9kp6r4/z/57pYK4nMG6jJkQwwEY4AaNtlulO/usj5mQfCy5oaSaBi/MPGPEG7wMDFq/xSma0uOasDQvmDwmQhwsWzzuQH3DWo+vEyA2sqbDIWgrLZGxqywd8DTYzClI8W1ROWzlzRl2E/N0aT0u1YMV+Ak89MLyQi5lwkV9a5rZNf3oMFlNujDBoiwX06+SQfIrZT3OLl3CsznmLiVVlEkLrEdl4m6Q7xLrbT5FLzQYbnO2VrPg+TnG+NV5y5VygxNnxR16jexlxXSZy7duvB11NeX/IeepAjHlZGTlmqrgn9iYcAfY7aAyWpniOgVKzcgT3U8iPCoHZPAs6usDUBdcWrX8yfLHIPiM7Pcm4u0npDMSqm+cHNHaMUAnbFqeOH7lAp5HSqNETiqo=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"I never recommend it. It would increase the response time of the first request by decreasing the response time of other requests as well as limiting the scalability and responsiveness of the system as a whole.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"9e224bf9-9d4a-3c86-a443-122e52f40c38","date":"2016-06-05T11:06:51Z","timestamp":1465124811,"authorUserId":"disqus:stephen_cleary"},{"_id":"9e224bf9-9d4a-3c86-a443-122e52f40c38","authorName":"Phillip","authorEmailEncrypted":"ompSBZX5nPMflmp7FWZJLkWQcmzSaNSZQoDVGDfbagAV2Wg0hHwerZ84OdmhzHG749DmW3CyOcjFJx4WzaRNaMfbEF7mTEFKL9lR/TIyWyeiOcMJsxic40iKmsCfhYEib8e/Lda6UmcpkviMjD4bU1g4ivdqGy7TmDcriRGppnf0Hp1B6fxmdSAk9TQ29IWo93BYv0rd5SSTAn9HoRvr60KQ2o0BvUR13usKc5tW6hl8Wxfypzq+yopzaI6ThHQXF6UaPW0CQvdiJCiKDtz185QapEyWRH6nZ13Bb7cV9v2yyK9cuDMNc9cxH5xceA2Ed/g2y+/7uEnhBKUaew7cVFMN4LrxDtvnrV6cRXWrcty92hKcY3y5c6/PWUzvlPSMhBbdrz4f9qXoFN4cQIeoMHQcPgt3NZV00OFgL/CM7mGPOCWYzQKmW6XdJO81tiSyJbgnkP5/zASDhw6SuWOBGEAxtv8gDGaT/uux1vmHyPMJC2xy0/kvwNdNLcIkjaWWy7dQmGxxWiCQOm5nML1uqIa2g0BNiI0sTCq4Khn+IqDgTqOig5xu/Ossvw94HQ5/KUpnOfU9x4uZ2PmucoaZ5SmNWaVh4moVKO8B9sEM5QAdk/HJSl/YHw/hkGVaqEbdO5t45XPVI2hsc3MZjPZJuXtyHWJxY8h5A/fzU6UKTx0=","authorEmailMD5":"13d98c6af46beb3dc6aaf180b836dcb6","message":"So is it a bad idea to use Parallel.For/ForEach in ASP.Net? I'm assuming part of the parallel work will be done on other threads and the current request's performance increase will come at a cost to the speed of the other requests?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2016-06-05T09:15:45Z","timestamp":1465118145,"authorUserId":"disqus:disqus_tcm8RMrFV2"},{"_id":"abf152e9-0f9d-3d40-8ec5-9b1a688fe896","authorName":"Paul VanRoosendaal","authorEmailEncrypted":"iMygaXgviSnA+0VsZjOXzl90AEI5UUnjEdpceIfuPYuAecJqzYMCcf+4B+459+2P25BC2KjzK7sxX7GCapspMyUuuvsiTBxXnoOyRS356DZ66yIYGgI/LQHUz4MyQyYOFSFQK81/xJLYurEBI3wWodaPAlqMGXPszIvhAgi5NHSqC9xAuXFXpX7lSHe5k3c0RGxfQJRVLC/xq4mDqSvVqttPxCno+sZfWQ4uOml8xV6u2hDCuIo8Kv1G6pEo8BCrKQn3VT+MVo208eDXbtfdjNUCnBOlryhwPJ61nkvKZI/kJmUg3/6Geims4ASMF+uP0JU6IbHo6n51zUgem9NxVd/plF/vjh/5CRHuMVFGCSujPyXJsHawP5eDC1YfzLBeXEh/JBpNneE/IGhe0KFOVcYaTOnT28/ad9jiTw7qfvUry1helSw1CbtZooEKZkha66igC2OsluLHAp/w86+zOK8Gu9D4QEg75x2wtPYuAphv2teid8ypZAk72SATmvdscNUeVXawmKniEdPeWE2nn2Mnbad34JYmyX7rzR9bdbhMCrmA/97SSFenUBOq94+enNGiqMl021iUxxiBE1GG2YW7qQW7L0J7zEv/nuZqMwx6iNiSsd4goy7hxVZiB4/Wci8UHGLTYykEoy/Kkjk5fVKhuoY8PXx015HO/FQ6b70=","authorEmailMD5":"fb3a426ccc87b01d12e98b5c1f494f0f","message":"Good article Stephen. Is it fair to frame the problem differently by stating, \"I'm trying to offload some long running task so that my web UI is more responsive.\" With that mind, I can then expand my options to background processing frameworks like HangFire and Azure WebJobs. So instead of Task.Run, I call BackgroundJob.Enqueue, or, I serialize an item and add it to an Azure storage queue where a WebJob picks it up. I realize these approaches represent progressively more work and more complexity. However, the benefits are huge from many standpoints.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2016-06-14T02:24:37Z","timestamp":1465871077,"authorUserId":"disqus:paulvanroosendaal"},{"_id":"c379869f-2e4e-3147-a380-d93569a81f69","authorName":"Stephen Cleary","authorEmailEncrypted":"h37VX48IqVTmHIScc84TfwLQ+KBuW+EQvymuKicxOjNFOtZ251hsk0iG0k3Iq79yCWi/eFvIsGdb9qaYYUzlgXzkv+3jrrTwQwamqc+cKC3IfCX5XCgVw/JItRwYaVfiVP0PmyUYjBqAzK28YJPW/tabcErxXb5rknIjkrvbmanhG7K+dsVoUqpN32nBa0axeT3jjTgIrwjchxptZ+MccIM7WOK99FGnFjpkZydVsCfDX3KFTrBrAk4mXVOCsKJK/7K19p5Fc03IpWEjzDBQ0pDm8Y13r2JayzkdFm5nnss+RUG1g9ZU8/L9sDwzZfxr3Z2Jv7wJkTA86+MtPhbVsCZskBKe8u61nmssfN1Ti/ROHJpQKHVqrP9+pr2n36Ru5KzVw7kylofiFwru8HJy2KH5ICePuv1tETSOoq630dWKjRRpnW6HHCYLvH9IS+WyMFmRZsnCiRjXqEi51GKZBcYB8SL13wvsN5Ss11ojA5k4XRTrevDiUMMBuE7q5zSsjK+WXLC/EVZ4dmQ01AFnBUPrTDJHjE1iDBuOXK2wpT1acCek+UOQhT9cCetqJBrrEVuLqHzq2ylfFE4Zmjv5n3QuUZ4xxd0bFVbDH8GAt/JAxe9F/Z6a7NhBiaqQ5UGtcWYiFJOe8iEmCGj/FqM03j1B2O2wXxhyq9UnBgKcR/U=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"I can see what you're saying, but I'd say that's a different problem with a different set of solutions. At least, that's how I approach it in all my writing.\r\n\r\nWhen I talk about \"UI\" in my articles, it's always referring to an actual Windows UI, complete with a message-pumping STA thread and thread-affine components. There's a lot of confusion out there where developers working on ASP.NET apps are literally thinking they act just like UI apps (I blame WebForms for a lot of this confusion - I've always taken the stance that abstracting away HTTP was a bad idea).\r\n\r\nSo, I treat \"returning early from ASP.NET requests\" as its own separate kind of problem ([http://blog.stephencleary.c...](http://blog.stephencleary.com/2014/06/fire-and-forget-on-asp-net.html) \"http://blog.stephencleary.com/2014/06/fire-and-forget-on-asp-net.html)\"). One significant reason is because Task.Run is a horrible solution for that problem.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"abf152e9-0f9d-3d40-8ec5-9b1a688fe896","date":"2016-06-14T09:32:27Z","timestamp":1465896747,"authorUserId":"disqus:stephen_cleary"},{"_id":"3caec149-8dd4-3a00-b07f-acf33bc0eebe","authorName":"Giulio","authorEmailEncrypted":"vvQElfudWp9PsDcYq+EFf+66HXB+AqutJUYHI003JSmjh21Hwr4U5TBEqRY+5bdOQk02qnrkhVpjFHhdZG5VbzMD2tqxUaBP4q0GJPNx/gAdyvoTq1hmrI+VBBfM1SpHxRiyNpoDWsEk4057KDGD78SOxFv8egR6OiwZgP8XFVaKvdtn0S+BYVqhhDu0RZXc39WgWwW8dpKctiypet6qMlnIOhOig/3oC3pVFB74RVda06xxH0Q7BE/yCDu1eOmgLYfFD0WA84DSOTItgpMtUmx+BLsjDGmCBPMREOp3g2pTv6n/ry2IF5vwrW0TmsFhRJJtXH3VKKMC/eFtBIDM4A+Q4wLfHMivOjR3bwtjhNf4xQsa+b1GYaul0p94yZlgh6zEXCMMH5Ki2cck5URXUU/bnDXMDTf2azWtpjVZEeDTFBUKzxX5Eej+GDQuDVbuEDDJYksa+khOX4lCF2s4bgbW2cc/d8ERlL5mtgmraw0TtIJWOkg9xHxJ919gOnT2tWAr4d7z4Kqc173UpuXvQeRTrGpkdv3jbGUgIk7TQ8thdD0q8mA/CEZZb559VAIs9gxIiHFvzzfneglDl3KsfV7xk9aQ1WXKxY84r5WTDf2ApjkRvhtjYyfBodKwDBxIgJ7uf7kFcZ24aewAphzdrEHlycSdrP8it5pJiOLQOBg=","authorEmailMD5":"d040d48dc09031501a031acd841cd580","message":"AFAIK thread safety is the main and only reason why windows GUI is STA and a message loop is required by COM. Anyway, from a language standpoint and abstraction, Web Forms are not to blame at all: all the HTML and JavaScript related quirks are really an awful limitation for pure ASP.NET views. It's in fact understandable the widespread Unix like solution usage for the Web, e.g these comments in Disqus, based on Django - yet another web platform with its multi threading model. Is \"Do not use Thread.Run\" more an ASP.NET specific tip than a truly generic rule, applicable to software architecture?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"c379869f-2e4e-3147-a380-d93569a81f69","date":"2016-06-17T21:15:45Z","timestamp":1466198145,"authorUserId":""},{"_id":"5df8308d-f054-3731-a62d-e71c747523bd","authorName":"Stephen Cleary","authorEmailEncrypted":"VFNn22Ilp70Zdt/Dcj7ukcvsmQgK+CK/bLhfV2vhZ4QXj7DlXWveV+mM++DFdgxgjrMyPFyLOT1vH5f+/LAt6PdzQytJFWRe/ZzWojjBaGjSL/J/7TvBgj2EY2787jDE3PlUP2E+uLzfeXpfXQ7kofmtPQV6+khyjXNDWDvsgAxnMiCFc5Dcc56YqIY71ENZ5fEkMdM8+udQZJ/mwpuLkow+lndWUvb/jigahzWFqxbR4DIQeT909yFIG3kg+NnsQpn8KYEMqf0tsV+me4pQ3e3ZEkSFBOAYCGbKlFpXtfkv+IcUQvYSoee6Vl4tk+yBaTBbqK6aX25nh+T11sQ0KrXNORYqoAeo2N9dKskPkrkmRSRFYpmLJLgbYwkRM2JfbeHGTlCbTKlWbA6tCEP4xsPfa7ou475tGtXTz8P4NTvkm9VjToMR/4NJ+bzj7OqkdBaNhiNgHswYmilQl9456uQzJmWPtc7/9ycLuo52z+vzFV1fnnHz4/r8Yt3GWsdRHTWGgeVVobYuT/+0gZBJ5LvPWgtlYWdCtHr9fmpi1chsUl2cy8Gf5W+9wg32zKCpmaRkT56qiCgH6Uwy8MZLrGE5Dy3vLpaIyXuDYlOHvthVzH0gp+1QPqpEjuz7Kuc3NBjvR/lNWQIrIbCfqCrkqm1G1A1s+ub3yArNX1Zaw70=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"I think ASP.NET MVC and ASP.NET WebAPI are vastly superior to ASP.NET WebForms. They embrace the request/response nature of HTTP. Combined with ASP.NET SignalR, Microsoft offers a complete set of tools for building modern web apps - without WebForms.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"94e93e49-bb71-33a3-a427-c1a3a7716586","date":"2016-06-18T14:56:29Z","timestamp":1466261789,"authorUserId":"disqus:stephen_cleary"},{"_id":"85838337-c96d-35e7-b970-eff51981cc76","authorName":"Stephen Cleary","authorEmailEncrypted":"jruwAbPBEzuq5FEWcXHu5TBqm0a8bwCFJL0zyqw1hCArbL8yxpp/1A6X86SncGr4ZoY/O4MxPFocjOlNYPv4sk5wijVo7OeCb5hgmxSmtKbkKXN8B8ROEuPxc5I5A7M5ItT2NZGGjFtwPLvbclyKHFHw1L8ppgSAWBbzfp7J2xwr5h+s02Uo5OT9L1IcypL17A4uEvgZtFUpb2pTPmZEVgn7AfWOIw5s7Q8NrtD3P6idIqVfWXkr5ZAb5qXMa43s/VRrEweB2PDTmiGFzO8QdtA1kfhFmP9Jrea17K2aRSOYgFpAJWbyyIo6puc0aJq+GLidHWnPYNPgefOpC58mvUVGynJHly7yH1732x97WBwBfjYOa5jgODf2K9jI1pdf4ey5n8j/PDHC8gecqZYKebDEoe2qAC+nnsaSf4sYxNUuOOKNPiOowGrr2HLltwFHrs10KLCJVXIm9ByXoex/Rrd/emlEDyNkCbtsOSzJUIkhLVpGCSdkR6rUC5IFO9z0RQPsUoyD56NDPzf40lnfI2SKd7Jevvh2wmbvedB6gSixoPe8iMwHF6ol26L8DkaP8Dk64H6sMsANlRaCI+VYJVEi0PZR+4qv+a5c0aidAYwVeJ999CIasUuMYEdONU/g/IHX/N/7bsy16ITuwK20nNh5ih/EAO474b3PGxwAcVs=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"I would say that \"Do not use Task.Run\" is a good rule for any scenario where your code is hosted in an already-parallelized system.\r\n\r\nI'm not sure what you mean by HTML and JavaScript being limitations for ASP.NET. It's a web server, so I don't see HTML and JavaScript as limitations.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"3caec149-8dd4-3a00-b07f-acf33bc0eebe","date":"2016-06-18T01:42:58Z","timestamp":1466214178,"authorUserId":"disqus:stephen_cleary"},{"_id":"94e93e49-bb71-33a3-a427-c1a3a7716586","authorName":"Giulio","authorEmailEncrypted":"BoMUhfyCXn9aymeuVzscd44r6qb3yMN+8mMDPolucWrMuUM0kQpINHccCQUxIZf4jAKQLoL/Z9WZETaGgKb533pnv56kykeTdv3MeI3HDMPb8460gKPZPOzi/UcCpO/qXzWcTwD8h8GlkjRKpotyXwa6IdGrhN1h3eChWpFCNWBpeRXD1elRudDWBv151/QPT5BKqMGBpFA8FAtn1AetqUWqpz0PhvOMqTxsAcYNe6oOjAKr+QVMVog3d/PLNH6fIFW53Y7xByj7GAH/MecDsPy7r6A0NygR3YsJayUqDc3ViZC0ddaanL1Qkw7EQQo4Kwe+aPKtHpJv7fzubUX9jIlIvL5EaS8Z7mMNYTJOYLhcNw2MI7z3pqfV+34tvVN3FCnocF84SfUNy3UTaQmuKSDSISb5yo6gfW88GttEwHoUwOIJtj0SNJyYTExSosVdyEcHgazbujQVQJlNAp/0+Dpa8AvVvFfBzh2zoyZP0Dz7LjAL7V0HtjjxFxbnHU2ndswQzLcBymI64ldwps6JBXoMkxs5wz3c/SHpA49xWeg7iSeBJ6tA0/GuM8kSJ4T6SbZytlI5qvPaYCpZBe+pj+vRpXpMRK9KwNJuSPomyOviItiVRUYK6BfuYnKvHJjK+MVkVqnFFEWBsaV96Ib6yRlIZe0pc/jsLE/vlQjBNN8=","authorEmailMD5":"d040d48dc09031501a031acd841cd580","message":"I perfectly agree with your definition of the scenario: when your code is hosted in an \"already-parallelized\" system. What is strange is that usually one needs a framework to support application specific parallelism needs: again in the example of Django, it could be like developing asynchronous tasks with Celery...\r\n\r\nWell, it sounds like you don't see assembler or low level language as a limitation for a native desktop app: why do I prefer windows presentation framework (or Qt with C++) in that case? Sorry ;-) I'm kidding... I mean without WebForms there's no Microsoft alternative to Twitter Bootstrap and so on... thus also for parallelism and scalability it's easy to hear about a differrnt approach like nginx, Node.js, hadoop, etc","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"85838337-c96d-35e7-b970-eff51981cc76","date":"2016-06-18T05:41:52Z","timestamp":1466228512,"authorUserId":""},{"_id":"f005b8f5-ff5b-3c01-bd15-6b27f2a6e9eb","authorName":"Giulio","authorEmailEncrypted":"meqne9pg2FSgZ8ah9r+kxRGcx+zoFH9J3Czt0E/ihcLlMCbJbrJ7AkrSUHG9ga/K1nLiIw7qTbMNIjtHhRF+9O6XI2MWytrDPDced/g8d+zrIVOBLHOahJLe4kDVw7xOn81Wud1fr/snyoiRPRj2gqxDthKEatEavyySol4nb0LrEQAvG9BvWnrNCOKLz/5iqhUY/j8ni/q7YoH2SAEUoANmWk7bivVdI0XIGW7uBCS3f8zisUV6dPgbzKOiFl0CTGDqJbJ3qU3R5cMcE/s2jWQ2fD8Oc7yiZBqoI3tSpLANDNl6+/2XQhqWrZ2/bKTqK5449+wGjClotGCST/vWUOVli8TSwv0E9PLsTsr+FiK05JHWQnFeC1zUIX3b5hZZ/SlcV4QRK1PwICHT5BLexxO9V6vjvFbEbobWaFe2y55Jz53Zd5yLbaualvutL2HHp+vyw3jIFXip++7296dzSyIiNPL9HnxT9yBl7g3GgvMz9sE8r4O/oobsBsF/w0cbBiat7aACLc8J/5BfH4XDxLN3Om91MWnjdmu8OJcNZf8iZlZwGAICI+68txFyf2LM3p2PVpbq81lL1gMzI7ZaR5H8Gq6GHC87ZkfAtJie3ducYm2L7O+nEEwTdZLcEOj5Vu/PGs/yt9VZ7G9koBU1VJudfiooIvtnS2zMHaE1Xjc=","authorEmailMD5":"d040d48dc09031501a031acd841cd580","message":"Thank you, but - sorry, my last reply - let me ask you some details to better understand: what about the *responsive* web Frontend? Starting from MVC, I guess you choose Angular, then (I imagine) you can't add jQuery and JS Bootstrap but maybe the UI Bootstrap version replacement?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"5df8308d-f054-3731-a62d-e71c747523bd","date":"2016-06-18T18:10:03Z","timestamp":1466273403,"authorUserId":""},{"_id":"54c1a3e6-14cc-39e8-a096-785cff4a29de","authorName":"Stephen Cleary","authorEmailEncrypted":"nQvQOtPj9oTbTCvj8TCHSUv3D3/JttA28oiBPri0IIyQj4J+DdbZZ94SWvDXAw601DqD5d5zyX+bJVGf1Hf892xfxUCJrgHP4WoddcIl+a2m+x6aT5CWGy9WRuREnxttiITKckfySy6gtQ+KvI7231wL+CSMtaqR4y9NE7tL8w0npN/JiBXjlv/2jjjPgbxiuidPQvM+21ludJ7jXTOqhv0nPlOcM0N0ehhNRQFrD6krgBrztY/Ph7u1u+eWfMUZJpyE6xGQZDuebfxGteP3p8ASXtYGe65/AbZVF1eTscT/2arBMRNpr03VKCwrbbFoPiLCum3u5AChFpo59seIMdp8jWRbCw/B/P/0Z/0Vkw9wuEOaestX4a8xmiv6unFlXH5zL9pmxzo/LvyXtbwvb8aqeEIUIYrr5tKBxzKb6aqsLxhSOlfJ18KAQD/IMkidefFqGNFNuK2PaymL/slLFDCDPw+KozemTBldcydJDQY1UicTGZQ+bYYbZRjP+FwvfG85+4ap6s0s1tDmQnFSjkg2y4oPFM4eEDDKZlyxQj2RDdg8JOAC6zpGAaiJmH1p3zss1Y25tKLjec5sA1o1o/wkvBIquiVTmyewkPGf55KS+BENWEJxeiWYhsHTf/FxUXjzKScUSlYDTT1KbCRks7gHNxqkRCfI4gKnTayMG9c=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"You can use any of those with ASP.NET MVC/WebAPI/SignalR. Personally, I prefer React.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"f005b8f5-ff5b-3c01-bd15-6b27f2a6e9eb","date":"2016-06-19T12:08:54Z","timestamp":1466338134,"authorUserId":"disqus:stephen_cleary"},{"_id":"adaa592a-00b8-3cab-8d87-7923fa46a938","authorName":"Jaider Ariza","authorEmailEncrypted":"iYDPwQ6zhBqcauVwDmtTXEy2UcsjDi567wtbBHlj/Z0tM7aA3AePFF7q8rpwmtgsKckpFr+TSd5yj+QfwYdeKfGIvfyGQztpzMgsNHRc/BaWvCKyz5P2DPShmAE8XasScfToSl5LKgCPUxWelz111JQvvCRHUBUPWk3o+tcFdXhLvoNjQ4BBr01/xXOaNggHZzVWCUPYFjikozr5XiUvn6mzDmVah2nBGh4d2SniJvBmvxmGpP2CTeDRt+oKxnYWPplidm30ioHBO5JzsZ8o6BW7MimV6j1otd/CnKOYxPYzTmpPcSJN4oi5eh92dQOe0hvcLxU19R2kxlgHEesLzcn9xw4WSKi8Ka38PfILy0pKxUoZeo8S3YO6OIlIPgrExbVEBePxXc3PfSb2WMc+r/tcA7CjxU+D81DEB8u6D9m/Eg6cjVzcsy4rxTrtBt8fQyOeXAlUt+knD+LKi8sm2aABF/3EbUUXuSwiaHjQM5nRb4p8sI0DSBjVxZyNlFA5c+jpewPMvi/BXfsDB/JPPUHjOZ99lwhjRomw8VyyronlOjSMaR/hb/TTvj3KBogjxKFwAskFDaTM9pPgR/7Tj0PidfJKE7UTxByWieCdMa+3wh9aI6//HJr3Wm1cS+NHPnr3vI8OscRdWEdyxP441QWxoEwpHEdZ8ZaBLy9SAEM=","authorEmailMD5":"faa17714bc577d1061f33e21f1d83551","message":"This is interesting! Can you provide more information about this. Thanks","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"5c5d839b-8f21-3611-b991-4b12fc9c374c","date":"2016-08-31T20:38:05Z","timestamp":1472675885,"authorUserId":"disqus:jaiderariza"},{"_id":"bc83c246-884f-3bec-9c5e-3f83ff83941b","authorName":"Stephen Cleary","authorEmailEncrypted":"go3MAT5c+r58R+dG/ww2i0MKDxtwJgN/pL5Trehn7Cb3Cbrw0MlZ+cZOC1wTUMaeVP4fp/qaPDKMyp8hpGQOkpEpsYuXyrS8DF0NoXzEFLaaUVP0Xqk7II6pGA5FCq0wF7vcMVrSPt0EqLlXAN0gw19r/3nMUInTYMIHaHebhzIUDqgoJU9qz4OjL8oDvoR02b6OkCZMVNMvUK06vwKgRVPecStPvaU5BfmWYi47J9aNS4vWm6gSUoChswZt5CyKit3yk/WlD1PC6nyqgkI3Rh5oAg12mPn3C3ZPgyUKm+kjPTj4CZydzXjt0J7uQ7hnH4OX51N7GmKWvtF+YK3Wpa1ZqcFYFgneR43sCc6ZGeJ6NeXdVCJdYwN8XnSER/cGvWCpE8AeN8xAVtbl13Fm/2ogj04UdpyKguB5E55cpYvOVUauyrAsLzCFdlQblRgr2z/fg8DzWJ8Sf+JCr3l8sv/kcSalVepEBgLPRdMowVC3ES9mDC5LUa16GQa54YxwVZ491VT62bsB8/TOOYghSmybAYbtNHArh8mVwqS1WqZSu0R/FiFF9UmSeraGnctXJVsxE54K7xNIiaXGI16DEl4CB7T0xec6y73AuxDIqAye+uhDC7ig3Z6XDtUwTZnnMS4cfFepIF9PA5amD021C+Il54YdKuVBOH2ytTWMDV0=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"I'm planning to... eventually... :)","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"adaa592a-00b8-3cab-8d87-7923fa46a938","date":"2016-09-01T02:56:15Z","timestamp":1472698575,"authorUserId":"disqus:stephen_cleary"},{"_id":"0e2c8e47-55a7-3623-be0f-30a8e8b9e065","authorName":"Antonio","authorEmailEncrypted":"GqmHXUf4bhUzbmpKhi244SLnA1NkcKHjCLO6Qz0Rmje/RlAu5mLrXfccNXq1d/iipeIDUGOWprODbrmgyUs7iOmW2hjCVOc0t3K1apEHBbSN6UwZ9DVDUNV8yX/rgbd0REZMvU1ltgH7tgBSn13FNTz5KXgAdI78hT2YIhnlemPQwVQgVTjZIT1RkZ8zXosiWGGgXJdxAfTUwhuwbYeD0dYjLjaoq2E8+jefd+OfuTi6+/vqBMUrHlayqdInvra758XxpKMrJcZqgTyQOlSutv/pIFRQLQVTlobenns8orRKUGaZAHCh5i/kPLmfv4LD29DI2apInKCqCq8hsJfo3ejzoecKAMXaBl/B/EFwLfK9tRZbmcoGDoAxl/18BHZI7q+/bbqALWvMkhbyBWgdAATY5XNZ/CMh889mAZ6BO5pGMqe4K9FgiyMv/D4EZNDdzTN3qntrB0TJATCVdnQDnlo/MXUd7txrZVhHux/BQEC6zvSFJ+0ByPidnzpz/gALvgZrEhwLBn5y6JgC/uVOgzGLg32i02FGe0YcV5uaFIQ5tv4aauX1+SFw9cPVA/brHO3yjtC5eUjj9pNx+3TppatiBKNTAuKYLugkhHUVH7WkE3MQb/h/l7J/uDv1mkZqjfH/TmUvKE9vde6QRGQcR1n0Q9EOHfeqsgWT9s4JRRc=","authorEmailMD5":"d10ca8d11301c2f4993ac2279ce4b930","message":"Hi Stephen,   \r\nWhat if I am implementing MVVM? How can I reuse your advice above, if I end up writing an event handler for the [button.click](http://button.click \"button.click\") in the code behind? How can I use a viewmodel and still let the UI layer being responsible for not blocking the UI thread? Ty","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2016-09-16T23:32:25Z","timestamp":1474068745,"authorUserId":""},{"_id":"6ee330ca-2ae7-39fa-ae09-568b25934856","authorName":"Stephen Cleary","authorEmailEncrypted":"ewgedHeKnxVRkRxuOdM+SLMQXkpWQCwCR9tM+VZwikPc1p3tbDhLrWtNuhvF8oaN2IY3YmOhW2xk1Y5/OpwBi8EKd2Sq8ZL4+MMyFJeZiGkmzqx0kbeLWD2vyyosPbWtky1U3LrJl2kkSSU5UtR5GCPF5vJoZFZtWk2GnASD3hM/SVAyZCZxpxEDEQMFrHGMeNKiRkUie+rrX+zaE3HrRbQCyHPXgWFro1I7oFPZ9NfDAjDBs0PFbImRQCrwdR/ZKZCIr02HTeWOSk8cY4IbL7XNbYSV8Bj1IcGoxUSVLrug97FNu2o1Wivkpownz3ul2HD8bFl7FieLOPvz8gxHzCAFcwAQcDvTKaRV8VDtVgm5PaQC8fANSIuRhMIAEBkGVZRFgFYbIbE5CNtMAgsf8W5iHBRIl8seLhd+S/Z2vV1f+US9f9FsYefqqK8FxGMM6ZE+cHYOntbJR/8V06SZwD7kXXczVPyKiVyXXw56ngQh6nBXbA0oaLCM2VCJXy2DlvAG5slqE0i+1ZmSgNmI1o1Ii00AaQFZHIg0IHuJndS93BOZA9OyGLapgqLfjJCEu0XwT5PrR8vV5vD3XEnMAW7+UrAC31Qp8/Bgnx8xBlJdToIoEwdlgWCPmdmgiRY6wcNLWl6iR8DG+Ry9xsdLxyIq2dCDXbpRHgUrvhVoS9c=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"I have a three-part article series and a helper library for using async with MVVM:  \r\n[https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/dn605875.aspx \"https://msdn.microsoft.com/en-us/magazine/dn605875.aspx\")  \r\n[https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/dn630647.aspx \"https://msdn.microsoft.com/en-us/magazine/dn630647.aspx\")  \r\n[https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/dn683795.aspx \"https://msdn.microsoft.com/en-us/magazine/dn683795.aspx\")  \r\n[https://github.com/StephenC...](https://github.com/StephenCleary/Mvvm.Async \"https://github.com/StephenCleary/Mvvm.Async\")","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"0e2c8e47-55a7-3623-be0f-30a8e8b9e065","date":"2016-09-17T01:34:08Z","timestamp":1474076048,"authorUserId":"disqus:stephen_cleary"},{"_id":"6fd9548f-6654-3101-b050-5f0544a9061b","authorName":"Stephen Cleary","authorEmailEncrypted":"lBUTcs63TSGYUgBxP1G4qbl8rrsdPmfN1+hvE/od0ZkbRbKpEioI3+1VwEwYQAL9i8yk2dPZotFgebplbKmNXUQvE2G77G4fIj/J2lqvVQlNtjsgdD5TVZOG+48sOFWx0UfSkVp3rUhE7dLwPp9HceYkyCbXcHQNCZXA2tk3McrQ2suMYwdVg1bcD192zaiyinAbUhY9mXz0M6fh6zW0cWjykrnsMpGlRgFZdCCTJWkVG68ZyrfnZRqnZQVZ9oENNLUE3dv9tdsRSqPNoR3MPcFxkcadTNzplYEO4FqpHDJ6kL6Q6QlBnwkuBjsIJxToRU3qRxBp26QVxpEcnSTDaKKnaN+GdlqMYgRGP107PFAgXNsNFnztwczKhW9NXwOVvnk/tJowSXazc9/f4tDS1+Nbzk/Y3xDGzb19Tcr0KR4F9w0KCrOmsDYJR+zwUK/HVaL1z6pUqBGc9Y2dV7c7ur2nABJKMMDp2a9Yq/O7ifkYJMm49C/siJ0bc/gGBAsK00xjq5H+JR9xTXFVRQvvriuytWLN7QORbb4ztOEZxcxUUg6AmZDNY47rAyS6c4V0gTa8MZrv6kHhMctny2EBZd3rzmYduTC8UDH9JjhQaazNtMxbED313Q8pho29gTuouRBSYHDoW2gb88tpMkBtw9eNROnEDBGQa52/V/7EWIs=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"That's only true for controlled components that manage their own state, which is not idiomatic React. For more about controlled and uncontrolled components, see [https://facebook.github.io/...](https://facebook.github.io/react/docs/forms.html \"https://facebook.github.io/react/docs/forms.html\") For more about different kinds of state management, see [http://jamesknelson.com/5-t...](http://jamesknelson.com/5-types-react-application-state/ \"http://jamesknelson.com/5-types-react-application-state/\")\r\n\r\nRob's definitely coming from an assumption that two-way data binding is better, and shows how React is not as good as Aurelia for two-way data binding. While I totally agree that Aurelia is better for two-way data binding, I disagree that two-way data binding is better.\r\n\r\nFull disclosure: I use both Aurelia and React regularly. They're both great frameworks.\r\n\r\nI'd recommend asking questions like this on Stack Overflow. I'm only at an \"OK\" level for both React and Aurelia, not an \"Expert\" level.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"c20227e6-bca0-3315-af34-cab5fe710454","date":"2016-10-14T13:28:21Z","timestamp":1476451701,"authorUserId":"disqus:stephen_cleary"},{"_id":"c20227e6-bca0-3315-af34-cab5fe710454","authorName":"Giulio","authorEmailEncrypted":"Os0yuUm+Jesxdi6a5MEc2lmu/GNzlDyCuxgOhuNSuYyX1uAIYI1YQQ79Eez8BCeLkIAR+ew0CEaCX0m1zfonxBCoHsdXr54GHoOxv0bkYhwagPDeurig2NRJaYemBEsWgNc9KlXf+qjENCJ2U/MGkuLHfT33S+dEfc3EgYkyCVHN9F4T6iriq02MHoWtCdxkyKPjMGk9HcBuoj8xxU1ztaw3ahFg0gnDuTojzfwTj5FrQ7Cf0SuFMMZK5nuatRnW2zptOzkUuMEiCXvZfPci7XOLQsv6rOfnKYV/pqDQDk0wYziiuCjXnLHlAajlXcf4AUl2fUSj5KDswUvn/q+erwBShIfaKmImqtGNj3asB5he7p9l0+9xabf2AorHOSS6S4Tmt/jkRPssJrvJ6YGMAiuvESnOOwR6vtpKaJjGCu07Z5vUj3As8UyK+hKRA+vGo1QLxcmIiyiK2j4u54ARdXkSnsy2B/nMl+8hvmA8cQR6e26wWRGR/a7cHYkIzW+bfozSsiJAdcvB3HuWX1bNM541c04PqCqMmXvuC/rn8ulK/avxF+Msl2C0nSkGpk1o7EQkgSMJWmEEJRlUzxrWpQj92CFe7uMGYXupb0ruQ01+fg84VIxy4rGjVPZmvLNs7OFdYW4ZobK21fVGfaQanTWAIiHrkx2KDUqmuIM1SUA=","authorEmailMD5":"d040d48dc09031501a031acd841cd580","message":"Really? I'd say instead that React wants to supersede MVC by introducing unidirectional data flow...\r\n\r\nSo how do you manage two-way databinding in React? Do you need to manually wire up the events? :-( What do you think about Rob Eisenberg's comment here? [https://www.youtube.com/wat...](https://www.youtube.com/watch?v=6I_GwgoGm1w&feature=youtu.be&t=1591 \"https://www.youtube.com/watch?v=6I_GwgoGm1w&feature=youtu.be&t=1591\") from his \"Choosing a JavaScript Framework\"\r\n\r\nThinking in React, the whole Async Action paradigm needs to be redefined (doesn't it?) and it becomes much more complicated (than the C# async counterpart!): all those async action creators + redux thunk middleware... e.g. look at [http://redux.js.org/docs/ad...](http://redux.js.org/docs/advanced/AsyncActions.html \"http://redux.js.org/docs/advanced/AsyncActions.html\") ","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"54c1a3e6-14cc-39e8-a096-785cff4a29de","date":"2016-10-14T11:44:21Z","timestamp":1476445461,"authorUserId":"disqus:disqus_f9KlsNfakp"},{"_id":"dc294082-f26c-340d-8276-6093e5184e69","authorName":"Giulio","authorEmailEncrypted":"fRjrrykC1jYutvpp2YHxvmBu6CtUuJWuDIGypaAzXXdcR4lZiUIsxZDD4kN0g0PcpB+liZJ10ZUL4zD7XqAYyhfw4D2ZLSs2tHVWjFGMSMOCIj9VkEJYrnoQTZwIBtbK0e43U57rQfvLl7HOXXSQZnPaOdJ7iD6z9LVPjCtQtoELoBDUGZnUT1sE23igN2JKce7uwsuGBm6cY5v39BEDN1S8JNtuueKhIuvZR/trPmW/thnH4UxYHSPDVuB97Di0M3vFgg0fM5g25ED+5LAd+hvj6j+VXvY4BZhFX8hPQTz7Ku+gbgv4h/KZtcTqE6gPclCWAReJAZrZMyxPzn4Qc3QVlU7ZAGcrTgN+h6VzNoxXYRGJGgGw3rw7bco5ZGOhExa20M3n/UtTOG2inb0xDCmTR6F6fawrb0bBaSztY7jd+kfsEvYyEElXK1uTWvzRPvvOeKUEcNIDzOsv4sJaDVAOt2UHQH7FHsehfHybAZSSxlPGLq3Tcn8OVj6cp+RUrRlfwXCXsTPm3k2pTMRgzz8EMgMK2SV3LsR/UyurIEndl7zNVW2WXIPDgEnATeDyHFc2Aj/JIzTjwHmUQZ7W6so1fLnsFtbGse5FpJzpooaV31sRuI2ahR9sJq3LKMsj7R+/SD0OgtdYfyqBkymZAk0Ju0bWtwkaVatGsUVduHQ=","authorEmailMD5":"d040d48dc09031501a031acd841cd580","message":"Thank you very much for your kind reply, much appreciated :-)","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"6fd9548f-6654-3101-b050-5f0544a9061b","date":"2016-10-14T13:35:54Z","timestamp":1476452154,"authorUserId":"disqus:disqus_f9KlsNfakp"},{"_id":"3ca897b5-12ca-3eb2-ac0b-82b5234657d2","authorName":"Eric Rey","authorEmailEncrypted":"gGYPFg9GFbzs4ZYLskBPva1AcJONnEcb68ZOfUGMK9TrUv32AmafTUwgNc0V33ARhDNFNNrRz/9R8RfqR2lPxcDtGoKUvWINQ7qMHuGpK4IejgKj0YecB5yJa6lTTxjxGd5hPOP6UJY6DGVo9U7QRmBQeyzExayJEbpa2AKyC9g06PKm5gpruxT/CHlg15E4HFUDF8PtRHLRcngjDKFyTcO7H7mcsC/mAC5kezFdZUPU1UZ1MOWqg1m9YtJoe7bmaYG63goWsA5ejFHPSToRMtgOOu/5GWF4cMfQ32Dc+CjPHOpGLISXudpa4BR9giZn95J2tOmODm9djZA6HPRZMkXBz/1aYSN7J3vA1+BuHbsSxyOFBU/xwEODBtjIArR/4rAVjGqqMy11SbRf+thfGGNCu3pijxNhQ3uS4c6fafULdZ9azxG2WwXI/i0JcABABPRU9lkzEutIpGWRVALlv0Lf1hklgPDRe0TBStT5/fJ2ToTt1J0MnyMn/NpktjFkaftaWLhnYnFHVamKxrRMXISdnic+ldKMKTIzYj4LSz0xAgpVDHlAvT4cWt9jUtajJtsGfP/tyFaX4uVZwn16+TpJTAf/2MH2nBpJM1sRGBVj9dd0yL/O8v2UHOYZyUGq+6y1R2RnlY/QUi6+hhQkq2+wxBnPC3gtEcgRsZ76lBg=","authorEmailMD5":"792f0ba41abefea3485d6caefc678c90","message":"Does this apply to awaiting async methods that are not implemented with Task.Run as well?, let's say I have a Web API service that uses a repository in the data layer that makes calls like this one: await cmd.ExecuteQueryAsync(), I know the current thread will be released to the Thread Pool and a new one will be assigned to finish the request when the results are available, I have read that this helps to scale up the service, but how is this async I/O operation different from the CPU Bound one in terms of drawbacks ?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2016-10-25T20:33:36Z","timestamp":1477427616,"authorUserId":""},{"_id":"ab74d4eb-bb78-3a13-a22c-e53900c85f66","authorName":"Stephen Cleary","authorEmailEncrypted":"ilozPU5xkB/sRxDuGnekHfHFF9/kUFVXrmBgPeyLfcZFPpmepU3nc83MTenQiMfYwzj/KCKv6Aeeg7jn0wdRr3XnJXgjXAe09MFNu5P8Ydk2EfctlA7i8RU8DDvqsxrvIrmCT5+v/laV+ayMGOjuzzgpY3lk0lVgA1Jh7gOk0aRfaD5uYU1IsLaE6eMPAfoxDQ3IOAC2xWFtUKhFK+OfJayxYWJAIAuGH7N2WD0qTemnqDch2SS2st26hDSyJPoYMYe9vQ01buIlgrtgNMQkFgTiGEADzSlX2pFg/lg6TkGVbxm46QI9gIblGWUN+IlI+bg+V0T4vNMpC0lhIyH6Y8JIiXw2h6Uw3H7i5E7JapOAuBdFeEP4K3fDnmgAg6NoXB8oPxMG78fBUP/AIJSl9tC8zWQDYeLq7d/vxFzA4Eo7YZmYQhIPeKFXMX/l2b4NPLFj2xCTTQZMAmUV/kR5XcBPHCIfYexCFNT3MsA6mVRPsq+hjbm/cBBdNctrqS9kEXOS+3A6slKBv8NZNNV2NiQl2yx1xbK/r8xunb/6ko68s8j0UyCkv1wF8j5G/nmU/LVGP6LkdjwKAjJTHDeCe0R7Zxse3GulZVEAlmoBcHGCIxxH9VCKnuZl139/atwT2g2iDD6SZyr0rjU5wy0u4wW2qxh7P6tFBvcZ6zB+VyI=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"I think you mean that asynchronous code will also have the overhead of a thread context switch, and that is correct. However, it is preferable to blocking.\r\n\r\nIf you run a CPU method directly on ASP.NET, then the original thread executes the code, and then continues.\r\n\r\nIf you await an asynchronous method on ASP.NET, then as you stated, the current thread is released to the thread pool, and when the method resumes, a thread pool thread is acquired to execute it (which may or may not be the same thread).\r\n\r\nIf you await a Task.Run CPU method on ASP.NET, then the Task.Run takes a thread from the thread pool, and the original thread is then returned to the thread pool. When the Task.Run thread finishes, then the async method is ready to continue. (There's actually an optimization here where the thread resuming the async method *is* the Task.Run thread). So Task.Run on ASP.NET will cause an extra thread switch and throw off the ASP.NET thread pool heuristics (since there is a thread pool thread used to run code outside of a request context, and then returned to the thread pool when that work is done).\r\n\r\nIf you block on a naturally-asynchronous operation on ASP.NET, then the original thread blocks, using that thread (but doing no useful work) for the duration of that operation. When the operation completes, then the thread continues.\r\n\r\nAwaiting asynchronous methods will cause a context switch, but this is almost always preferable to blocking a thread for the duration of the operation. Yes, you lose a few microseconds of time (asynchronous requests *are slower* on an individual basis), but you gain significant memory benefits as well as faster responses to varying load, which enables much more scalability.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"3ca897b5-12ca-3eb2-ac0b-82b5234657d2","date":"2016-10-25T21:01:08Z","timestamp":1477429268,"authorUserId":"disqus:stephen_cleary"},{"_id":"850046e1-da6b-3599-99cb-14f47651aeb2","authorName":"Eric Rey","authorEmailEncrypted":"X9wd8kw/sRVscjMYyjjrOcwXBkP5id8+xNxZaO+77jP0VXask0wF12Vec7JhHyABb3zeMFGRQvV9awU5zy301iTJaJZb1udn59O+DIKqMfSXEIopF1oklmqzYZpozd1Oie5bsJXsvBiQi1sRXxSXrMiLoKs2WafjJrtDhY0tP+xj7e8K9ZN902d7s9X7D50/HEk0KvHJRyCnjkL+Wz7UOoG0HCpRlXt0pOGWU/yciqEIIP53dUnfOKf8JevaYI8jLSTSuKRTFVPCN0Wz7zUGgBA9N7qgqFlvUO7pbweGhc3CFOzh9yZQVUEXZ+tsfn1HQKuMJrhM17oT+3WrYgk3lu/uB8B/ChFjl9hlKyJ1ge4WcqlqejdM2bljELpAIUNFGI/W8rKVKo2L37s22E7EI2+8HZV/GIuMktlLf/l0ca0Q89+/QK+p+ndn9HC6XefCK+qA0WGO1v0wZhlKjOt1eKlBh4w39e1f8IuAVJzt5BBl7TX7ico+75NubtiyEoOgHQe4TiWnp9iWhk/9n/O92+bPu1eN4veFZ6QerAMlkpqPMYgmgzHGIsqhZSrD97zvF1IXwDDGDHL6jRUCj14+77p7R/xJXhZ1jSMT4M7056qa1VxVGJeCdbAYzGWF/aJx3NF2HuezFMIDZSPURid+HfwRPSDqLg0tFxTdeeGBcbQ=","authorEmailMD5":"792f0ba41abefea3485d6caefc678c90","message":"Thank you very much Stephen for your exhaustive response.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"ab74d4eb-bb78-3a13-a22c-e53900c85f66","date":"2016-10-26T13:58:53Z","timestamp":1477490333,"authorUserId":""},{"_id":"4442b79f-c628-36b3-a995-b4bf81acc56e","authorName":"Nathan Phillip Brink","authorEmailEncrypted":"ZesuNripVEizN9ZBCRl3oLJtj+RIt5OKOpyih1F2Mz7wq7Mb/9BwWt+JgxQuEs2qzKF00OH0K9bJcbwQ/ktwfxR/JAozNT/2C4CfZ55t8XKVJ02p0Hn/rtAQG0MRowgoEh7JmlPkWUZHd6KKPWr2jZNoXnZ/gDePHoA2iaT3I+XSz+rVHkU/IbkEtcyh/Ma90vEwpbu2rrE2O09BPNRrYxx7u+5FZTXqKEdZp+olYhIj5cytD0V5R8gIKhqwobuSZOSHuu+KVw4DGF56lcMzKF+QMERQVU0I5eEc5Hgb9k1cI1O3Jx9O5QuC4j2cw8qcMx+1LlaRtjYiKExhxXbunvD8q0FDq5Od+JilkHjo6sdjfJHExTWve9kwqCAO6OXmwqe61wDe9HNjLN9srfIYpt5qOykLBDiGB7Xp+8tcvjLWp33Ucbil7ieSa7TjRmv5E81MrloYbHmGnyarsGVuewClQWB45DtDMa2pkeqOlo7MkBokvSVjEIm9I1GbNtjzSiSSpFGuXNAVUkBd5mus83MVdagPhlQ4ikMmetq8it8VnSwMaKMUKcoD/HT5mZgk9HYOGrG2sPbQda/3xBNHqtZBxIiQlUoBgtYkWVZQEXu05h7UMu9/ir197zaOklmDf2xSHKKOBuna8VszWaUq0xu1bmjfvhs0ZzIiPzrHuNw=","authorEmailMD5":"a8defe14b1c80bc2bd59a1fab3848cfb","message":"So what can I call instead of `Task.Run()` to get my returned Task to magically execute inline on ASP.NET and go to the threadpool for winforms when `await`ed?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2016-11-07T23:16:55Z","timestamp":1478560615,"authorUserId":"disqus:ohnobinki"},{"_id":"bca506ae-0e38-379b-958e-c8963e987ae2","authorName":"Stephen Cleary","authorEmailEncrypted":"Ayq16vqcxuiT1n8MZ1mPdBanyvj3xHx9Th+mwr+4/piVXEAyRY3AB1xcXZu8BwMDATm0phyH6i99Q/KgfTzKnNlqCEfnUE5jXFDB0hX0EYW61p1zcGfoe+MkyQ6BHzm2quho9qPr06Sd9D+NtDDB12XP30b5W8F76MasWcmftPAF/PIPg9FXo3X8NmRZm4gyE2LuV2ewvLI4fbIHhdfyx38X+0vWjEnUFm6OcKSBbbcpBsR8blfyVst4QF/fxbAPmu7AQl4DT6L0INpmUFdM+OofW0RIUwoGruCN4igWvd/Fkn06huWRFoqaq2mxQgidmydUvbrJOdWrXjFr9ItHIXO8zCFW2iPkuYZV6KmpYGe5KaOHxKRgS6J1GWoPu8MkdXq4wpbsMzBdFpU+aHsxispD/ngVVa6QySI3LOehqvW/p16eWhXG4b/uo7jVbU5jWrCjYq20SeQVHQ2vWOE0dA205nMco0LYwMcfE0e/sRe6bmodGwSLv8vL70JZB2fuJNIMA0fIN/sVj6xwKhE5UJpzYjIxuxu8dxsUfLQxagqjgMW3tKqrhdTcH8+aiBxUF8hZ/aWjBMO5Q9OcBcQ+5AaM2Ydwrpx/kbZmlIMA2na80xSiK4JQxIyBp/lcnLhQiM/fUtgap75MFu5Sa4J8cQAX8RkD+nyxR626jzBnDXE=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"You can just leave it as a regular call, and document that it should be called via `Task.Run` from the UI thread.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"4442b79f-c628-36b3-a995-b4bf81acc56e","date":"2016-11-08T06:02:39Z","timestamp":1478584959,"authorUserId":"disqus:stephen_cleary"},{"_id":"5a7dc694-8903-3e21-9b62-34fae0d2c741","authorName":"Stephen Cleary","authorEmailEncrypted":"s5qynexKOd1kuPCBrR0w+Z2ESgNVRck+Iz3pby4aPTHoWOXHA7q+wXYSZE9FF08uJiZ2DM3U/W159f3aVjWJryMEIXWmDff9DWJJ3W2rHjoB4OosjGg5AQSbytXzbfeIXOM+IxwUDBK03ANB7h08iwOCYse4nK+41G56l9ptTZ1Bp8qCokgJWRDY7ydiY0bCIKJer3OKUJiTHDK/xHqxKB7lKMZT+768dAjR8IdLjzg+Q6pXa93ZFZtTF4xQ3BlU/tQAFijHE8FagBas6f4cWEJDrVf3214PYnAWuao70GBYdQpyTSP2dy5M/IJRcgPRcp+OnvZuyPoHihXOjJJpu/ptLF9mP8j7iWFeNNZjoRUsGQsLAfuUJB3rev2NZvcAvvsJ5cNgLzFxT4r6Uuz+nuOwv5INfOf9kmR0o1gW1eiKgk6FLv1MKFQxqBmPFoZAlGP72DwDjLnMIRGaj742sk6kOv2DygDb8OTwBYkrpGPKqQXEbXg6gCu6ZhrI3NM0YznJUamMCerR36cBVEHfzPjE8rDBb+T2yjpttHP2FzjqUBI3bF26lyFBqbXM0JNtrWT89LzTNM+Qv3pkT6fQx54DOxtUHojbMOqKZbqHdPCL84nj3L3KyjtQxcgEWicfESdE+fVyd1YFDsNt6EBW7KrR53vFZ/T4nCGqRr0uZKM=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"There's no UI thread in web apps.\r\n\r\nAll network access is asynchronous by nature. The client can be synchronous or asynchronous, and the server can be synchronous or asynchronous - they both make the decision that is most natural for themselves, without regard to the other side. (Exception: Browser clients *must* be asynchronous).","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"64c85f15-9192-31ce-b559-3b4779fa8b5a","date":"2016-11-27T23:57:54Z","timestamp":1480291074,"authorUserId":"disqus:stephen_cleary"},{"_id":"64c85f15-9192-31ce-b559-3b4779fa8b5a","authorName":"Soumen (Rimbik)","authorEmailEncrypted":"u6/kzOQYy1Jsnd5xfhkCmBDD927LLYnv+ECh0C4l5w8TV3hCm5sHJvLuWPw5zEfAFwuQ0ikiEmDqydvlJpNE8YfAgoFM6xAccvEohcX7TS5+T9ApyhHXvZwJ18R67CA5qd2AhhGX7vRhN59sk5Gqd6On9pG8xV30SMxHZ64mxuZCBlLq14nTjhPeVtohXMC/6EsI02rGXrqFvpx9+jAnQG9ExXmPDzz1jOVWHAEPHIghpbMe6uIlJuvIQk7owkoAL4mEQLnGlHzO3KyUvIa607M/nzWdKjG8b1xy2kE2vhxAUTX4CSrfCz0dQ36NVL/M01C+5fIfZzNboGCiuVs78snBHAFluywwwbyZU+5tWFqvAkfdqGbXxeGbXRtAsYNotbVKtfocuTYGWW9gzyjD+nMNFeP4G7YlnMvdVeA1RkvyAgMBDEHmXzyhsA9LO4WL4EBTQOhjHo/EXB3SE8dzOlo6WPc96xMhCEvhZCblWgy72gLHy89fPUkr+OWhYJVSlLsOPI0T36ajkdmcMbXth3rB37APcKY3YJZn9Aie7RHPpdwZI+kA3iaHD16dne/ApdSgNhYvnUs9ZCMEG+be1og4ojZMZGF1/K8ohDi6UnQPI/2OvVZLKFDriW+ZWPZv0FIY4iNQ2FfjGjdjSRF8GQxdNR4rpeilYqelxfQx0Yo=","authorEmailMD5":"07ac5362c00d77a0e1d888f927668f91","message":"If the concern is UI thread then:  \r\npublic JsonResult Foo()  \r\n{  \r\n}  \r\n// and call using $.ajax with async: true Jquery call, then no need to write even Async await in controller level.\r\n\r\nWhat do you say?  \r\n- rimbik","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2016-11-27T10:34:38Z","timestamp":1480242878,"authorUserId":""},{"_id":"847f4194-ea84-370a-9c29-1325ea733eea","authorName":"Soumen (Rimbik)","authorEmailEncrypted":"Z9MSLuSVcPL0s4SDk2ZozcD0e6S9z80tgb9Nw0G8gzCJ8dlEDv64i7FQmVkB30YskBT5ce8EBJckjagt3DS3vQ6U6mKbI097kkwnXOuP74DqxPIFPT/X5zCU7b+MYxIKplsCsJmqoebrKF1kuqr9UcB64lbrcK3b9f4NJMWbm7WPGgYPYf/lXeQCbNL2fRLVCTr3AE7CanYJQZLLrqQnFRHqFETWWYeJjpKB3vz1yf6LDBX0pCds/eclVrdbtjXBMqe1OIu4qV7an4lrgDurAMNqphd2XgCMOzqiNrUSODDvJpMTouiSxV1vjR+H8wI9oHSwtBcvBCYCt+xuuzLys82mhK3YRm8NeG4CdGOdqbXwOPkG/4nyQ++KfVIdJia3I7YbngJhm34SvstgiyMHHWjee5hETnYtJ992g0vCYF5RFiq4Ozta9T0rNq0/TYVXIQg2FvGkGkJQEw76Zv9fg2SpWeS+mVnguhxFrAlEzw5QIU8lR2JwLXzyLX9ucuzZc8wNQZaohXl2ayJETt0RlUFJzn3go0qM8rWpAnAFeEQiOxP9XW+GuQkjy3zu1M9kkNK3bxQs73L3vhVVGjHpEzJcbQYVajC/PGt8cMyFxh+T/R0MSYI+LQd/5D7jiw2lHDLtRDH0Qy5qfY7NrA97Oq5Spwc3yimqUyGnsDY1B5A=","authorEmailMD5":"07ac5362c00d77a0e1d888f927668f91","message":"A solution for UI non blocking thread (no use of Async Await):  \r\n// Server side (MVC controller)  \r\npublic JsonResult FooAction()  \r\n{  \r\n var response = SomeOpt();\r\n\r\n return Json( new {   \r\n Ststus = true,   \r\n Response = response   \r\n }  \r\n );  \r\n}\r\n\r\n// And call it as\r\n\r\n$.ajax({  \r\n url: '/FooAction',  \r\n async: 'true',  \r\n dataType: 'json',  \r\n success: function(data) {  \r\n FooActionCallBack(data);  \r\n },  \r\n type: 'GET'  \r\n});\r\n\r\nfunction FooActionCallBack(data)  \r\n{  \r\n // do your opt here with the resule received  \r\n}","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2016-11-27T10:40:38Z","timestamp":1480243238,"authorUserId":""},{"_id":"e9cf9d09-2ae6-3e18-9b89-0f93f033d64f","authorName":"Stephen Cleary","authorEmailEncrypted":"DLak/QWJ3SEazp/fDuqnjJUq8O8GuJLO8zXHQAQOJ6r5ploGpk32+4dnkgm9u7x4MQKeO66xb6wWA2m6a3IAs8G01ucJAiDUCklFzHyha6BqATJ+DLMlAofGDvPf3igb0sulFNAAJ+quiqWLC3ddhK0b5xkdJ7WosXxwrnJKFMPQjAAmp0razjgFN3wa5NXkbetkdAQa5FrkHXHaNBOCYUQ/3y04M7htTLxJSL0JllfzQkfZYBi8eQa2WtVHHzArKfogpPewzG5XBeLcmYIwcHphOa8KJS0vXZxJb0hY9bAnxTj1O7gnxfY/qC1XQixJPntyROENnUvHswVel/UYmL14q+t9nr8Oko+uqZF07AWUCRDGrUOMY9Bv6RkL969nHj1Dy91hSP5RxxmMl6A5aSi9tu0CL3LkHYUuwiBJQuCu3YLyxbvb2bNqVYrlvzj8meknkUn+s8Oa9UgiWrxrOOcyPWQJVh/wPQKcI3fTDNIbY7fccNhf7KB+UKzXbHDa7S4KoCJTlpjTRVCZ8Cx+xgqP9cmUMRFKAfAYpW9skYkKcEu/DLYbGnX97QfdrPlJUe9LP7IErhEhjKTfIdZw8PQGOJRo6wDH7mlczuvsIUdToJxWdxsbStJv2Z7pD2z9KJIxNBPKTiETH/D/rZESukGuu5Qn95KFu5Ez+OAO5QU=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"See my followup to your other comment.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"847f4194-ea84-370a-9c29-1325ea733eea","date":"2016-11-27T23:58:39Z","timestamp":1480291119,"authorUserId":"disqus:stephen_cleary"},{"_id":"80acc5e2-21aa-3f6d-80fb-709a6815cb24","authorName":"Stephen Cleary","authorEmailEncrypted":"qpMaTEAP4z3vnhHCVePa7SgFR9V4F4Cw+FKjWGHWC7iL+9a7oMnIcuX+8C5IGuZPRgXbINoleCR45UPjBT4UP3KshJNVO0S3KjUBpOM2ysRRfZDaKoij5+sIJbKmTlJLMbAHvJCvlVMJkStQQeckBeFr/I+leJR1nK9OYc8PjydCvrLRabzlzIsRRCMlkKEui1kcwVahoX7e/VrrnGpt4eFo9RWJs4a02dbRxA7tgUx2WYe+/1nn1K9p4hYMzJRAKxVXIC6bf0gge4F3+5pPyYkhSwFTME9ehp/1BtrHII2NI64rem6saXmyXmvmhntoLIYv5O6j4ovVvGJF5rs13CdpE28WqqD5PyK3JB20K7L31FQa+WdHoz0ot68FovwjGM5MFZjIJKyYXzA8mdtFeEvMq0cOvlFJSoG9vrG6ue/iGrCDtNzcS55LFw4vAzuw+6adm+wqdWtEjYIKm0twG+WxJ0o1bTCa67pWJRsr9Vo4prCEqAKX4eRrhCPwjkW51mETbxVzDDQtq2XDuIyVLR65ZjOPXPnZBlIBgalvt/VQkn2rX3S6FK9/wYy9cj0Mhko9lg9PMJ1kIXF0DXhA4eas6wsiABxGn7OJQN6HkczmsrYKp9YfbxePreNURdkGKaJ+lsvVz/x0BK5uS8B6GCuw31+t3nsTV+i/VVtDXik=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Yes; any kind of UI application would have the same approach. The idea is that you can use Task.Run to offload work off the UI thread, but you want to avoid creating APIs that *look* asynchronous but really aren't.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"98bdc182-b2ea-3205-8893-b6c3845cd6dc","date":"2016-11-30T14:25:13Z","timestamp":1480515913,"authorUserId":"disqus:stephen_cleary"},{"_id":"98bdc182-b2ea-3205-8893-b6c3845cd6dc","authorName":"Resistance","authorEmailEncrypted":"hIHDVV9t94a+N2K3H7MHFL2f45VUWFTIC2MiZ+f6QyvVyPE9zzZlaJMnVXFLTbm5i9g74to0n+mCjv9RfZcCKIu7I8heMbZpcxjMVvqagmbMU2iEhR+BC4b32euFQXkX1/fikRuHD4OmSJ/vOainig7dGxuH+66t5ceNoX50XMel/5wzOQvqNimNJor6KXH+WrjrG8H8QNN5OHquErew7KZqxPBMR5UYdH6WbZePEIE5KW0iYUcMaHzOF3pKn38dqBfJerz4vTWosI+IOlJFoY5mwlgQZH9Bic2mFzE4Z09TxhFUfeTEUZpnmMaBR89ZLYPXusgxHPataa0xMf6aIMhL/fh9Lvuqhp8RmDSRKbRGM0M2zCLmGob9Cx5D9lMTRTB+AIC6p+OS+m08cZAUKMTx3Pav+Mp14PH/lsgVevZshJEXgrw6A5D/bl8VE7VwcTgQEgLiVzS3FBsx7FwiOyv8uqEf0QTo4IWEomSg0D9UjCbaWGVBvKQEayl3aRkwIB2rxTpOXh3ZK0yhLnJ8jhd+2i/I9hVl7KpSmu9pPj8bwTJh62Q7A2JjI/ygn3n4iwZFCzqxel8snMNks3ou4qqyAwL3voUNijw3lX1d6PM2l6OxksUcQSD/f7W1sCZbZqDMXrFpihsKmyVKY8RsZ6AjKImngWE0D++h2JCI5k4=","authorEmailMD5":"70266aff3107f40779ec2d64028a1f43","message":"Does this also apply to Winforms?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2016-11-30T11:18:17Z","timestamp":1480504697,"authorUserId":""},{"_id":"06a93d2c-c741-3e39-91af-7c37e3c572e1","authorName":"xleon","authorEmailEncrypted":"tA30Uvfd4ErIV2qwt1yIw1bypzSVbKOKTSZziOIUa3RBlbn9zujA6HxAtEzFX6xts9dI11pNarCjPtlQT6EQTvP2CfVWWCWG3yHR2FgmEi3fw3iDhJd9XA/MC6AUkgLjJI5TqSR8knHGH0bSr30rKd35tOkGVlXUTS3P1p5P+BEQ7l21tkzHVmIrraprSkZ/jE1sKHQLH2TL3zbMTO6CHb8MeR2hquKrMrAz6gD3hw/V3MzlnMyxygdb1zbMwKydm5NkLQ3cldfGZ2oeOYgnw74y4qvWg8SmgsXbXbIngMSBsR72N7H/ydPGeu6QlyyrZtw4I78kigJfRp9Zdt7CnGvGn7lZ0vN7Zxwb+Y+V/DbDg55CBWmem4Q1oT3e+uEWULyZlPgNKcpWEPLzrTM9SdmYTMqrRxkiAZfDf0WbRy4Zth66zcppL4G6EhEbtt4I/0gM5SYxuSbj1Yi5Xd+0hc9eUqX9WYn+gpDa4IKpQau4UzV65ldMWo+jfDbSNuYoSFi19Udwg0xZB1FRWSPKzqixxolj1x+5YTY26qTL6xM9B2p1oM/uess/ok4bnTeVs22kQ1+QBUYMPRc9tDTAeHrJCDqNr/pdKzkzj0q4eC8UOkByF4Cx7PLhm/58oi4WiM2+Elj4vGMW1DcJp7l3SwuXcNOHq+wodljG/aoKC+M=","authorEmailMD5":"b9371d959d3460b285f7f5f679a45c73","message":"Nice article. What do you recommend when calling myService.CalculateMandelbrot() from a sync method (i.e: view initialization)?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2016-12-14T21:38:36Z","timestamp":1481751516,"authorUserId":"disqus:xleon"},{"_id":"ae227531-5f1c-3043-8f35-b08a864cb7de","authorName":"Stephen Cleary","authorEmailEncrypted":"L82HSm+C6ZddXJnz4o4342fyGe8Ik7tYTbrkAZj2bR5++6x6n93LrEOpgxMoqElb+CVHYbyN+vnLR7S+B1qt6bSyKdLjjQv8PjtKkTav04Tl/sw09tinINjD1kB7Ly/ftSgoEZjmHTQRN8hgmkqn717/UpFDeZf48KaaGGWGTT1Q8FyMkyT9jaJiXT9mikQ/9jo42dGVmgAa7pbej6oQ+9fhXl20yd8Gp91UKehRkjqkbHGbB44YDKr+fP6LIm2nBIe4hOMd+rUSRfbB2sQf67IRP6F+XWDSeQNvzuBBnsmtUfYQ1rPrErjNjk3MaWFAWLHwps2M/ZHzjY1H3p3Z6mghmIMD2pRfKfhVL4snRiUP3U7HESGm4rjT+4jG8EM9QqCqppv8BNbFIhBn0v6dGj/wvbnS67Y0PHqkwr1cwtwxaSFdA2fH/BL3B05vgs8D3KVW1COTFTj4Kkw/NK+Fx7ik2jGG7fDNqqj9N8yXek175xD3lTVk8ow/e8oJVN/G2QsFZtLsYMB1px5DaXji0iRIvJwYhSWlIehkJ2tCVXaLXjLfrHoz2zkLW7/9Q6lR7RJTHJ0Xt2gc7aTtKBwhQeaVtDjBGqRZbGAqGHlzx9qA40AEyhxym1o6Q6DOxSK6AWDsqS/1o8tjTUYVB4GOSly+3WG0NKr9Mx+O5gS2+Zc=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"If by \"view\", you mean a UI element (e.g., WPF control), then I recommend:  \r\n1) Initializing the view into a \"loading\" state.  \r\n2) Calling CalculateMandelbrot via Task.Run.  \r\n3) Wrapping that task in something like my NotifyTask type.  \r\n4) Using data binding to update the UI when the calculation completes.\r\n\r\nOn the other hand, if by \"view\", you mean an ASP.NET MVC page, then I would recommend just calling CalculateMandelbrot directly.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"06a93d2c-c741-3e39-91af-7c37e3c572e1","date":"2016-12-17T13:41:48Z","timestamp":1481982108,"authorUserId":"disqus:stephen_cleary"},{"_id":"2e3e342c-567b-391b-990d-78ac00150d06","authorName":"Anass","authorEmailEncrypted":"DwahmIQ5pJuNBI0+Rd8kpDe+BTTaNFoVdqdwGmH94USYW1EJLwAFjlV0oGF30VkIkn1GbDkjS4yhta2fdu5OaHtYhqAM/ZS5x8SPwgMUEL25qA/kRhx5M1qTBYPwxM/9I4rOjqSLmnworWm4EJNgZzNN9EDYBZRkf32daaruBCR++ApTZxm5R0irjz4tGu+vTO+i8e3xyylsJq+fPeHbPo+nluDfKZyHjIc+hn7E8gsXyECxpmkxz7oIPKIgc6q8rFp3a9Xm0tbeHWJxhc4OzU07ZrkzDAEavJNKQg39moMYewXzHV0EEkktnMuhL3ToJ+L+2Lo7orVUOacrRNBhSVp2hW4EsdYChCMK6pq34YaA6B+4hd862IbuB/q3kwajsDbinzQnlx5FNS7CpI5lKplGfpOqKrdx7WkbpMhkhfOn8qZ8H3L1fAE5FQlj8KKnAASbAf1BBIFgT21tw3aJsd+Np3YKSvPOUjZW0sGl7ywAXg/ss41jt8i8zJ37SG15T7CP8p7NDXZL92GozwwYLrhTARZT9gM2XX+hwq4RpkGvvokpy+/4Qr4IN5DW9g4Cd/tGlw7JX5AaY16IxOC+q8TIAQQJnd/d45nYoCii0Cm6fQnIh56Br4M5aqASgR9xFoQGqO93Hb882h/UkoXe6LILE4hbh+vyvGqeDqSDARk=","authorEmailMD5":"343c038a8c2069be216a1bcbc7841636","message":"I guess that the ASP.NET thread pool limitations mentioned in the article no longer apply for ASP.NET Core, as it is build on top of libuv which is specialized in handling this scenarios in both Node.js and ASP.NET Core, also the fact the ASP.NET Core has a new architecture different from the one in ASP.NET which is also designed to deal with this scenarios in an efficient way. I would greatly appreciate if you can correct me in case I'm wrong or misunderstood something ?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2017-01-03T17:47:55Z","timestamp":1483465675,"authorUserId":"disqus:disqus_AuwFHyA9Nk"},{"_id":"bb9d4296-6fa5-31df-9e43-fa9484267826","authorName":"Stephen Cleary","authorEmailEncrypted":"fPb4WF2uE+jJbR+6wi4/GgvsXirfu75JXBC8JK2uTvaWEg6M8PPdc+UTPkHtIBqW01hOh/43oIHXf/IxSHCPxIJLg1tsav7YGPd/HFa2Xvx/pe+3ti6w3aFpMt6Jk+waV8ltQpgmRU8JEQSeLSO5e8OmIuQ//Au8Eiz3H46o8LKONJ3Sae/5LfRNibZE5MQIRBfMhT4dXHNzvS5nxJXtphnirs9nc6M4LAbfCbkGivsVI3qgIDXUgY47v/9zkUyM3KfLXaGtKsREk0RN3uPOrWqsjs2RK6Vixcf92nunWpFKW+cTwQCoZJreZxkWd4gVwEbZDd3KUXckvh1eOLHxytN00GzdyDbjo97yUjRvXfLImh6J1c3efOX5Z+Cj3eNR7XpDYX+iEDgByS1J8p+whQl3CUiDp6GIuvz4EFyrr6XS/Jqixn5zuIZ8MzSkXbBahpAuDPXFVbLHKzv5p8Za9zOmtMcR+RszW5ebgTgoEfSjoWyY+JEAs+8N1L4fubtJz3cRHglaEmBOzbNEm7j2EUYy41gZZu5quyPPUg+Uz2nq7gJdYjRqIH9FyqhUPcHdoXUw5Y0rrFRfQ80vi7WjZLcYWTbKRY/DCeFhOGAlZe3glQZ6YQNdho3J1YVk4vIeFxUAFTy85kpfETqB5HMxO701xD72M6E2arA3zMgR2+4=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"I'm not familiar enough with the internals of ASP.NET Core to say. But I would expect that it uses a similar thread pool system. Regardless of OS or library, a server thread pool will need to have some heuristics applied to avoid thread churn, and using Task.Run could throw off those heuristics.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"2e3e342c-567b-391b-990d-78ac00150d06","date":"2017-01-03T17:53:46Z","timestamp":1483466026,"authorUserId":"disqus:stephen_cleary"},{"_id":"d8b2917e-f565-39c2-a220-208434f96c90","authorName":"Stephen Cleary","authorEmailEncrypted":"s2sduGczHAg41kwPWlS1HJASqJ/E77JpnLSYda7DBGCdw9QGw9alSy1brjSjsJ0Zb4oFvJ6DQvSx4vpbs3uIVabZUylfwuvtiTGF1h8sYf5DPi0zlRNujdJA24QJtu5GkZE8VpUtuXiJ8Ri8a7uiENpQlgOP4Ozw50hDxxe4TNMrP0lZWTMyE7MTjM82sBJq1k0uQ9G5cmwXoIqKhUocchSRdMqKoJ4D6gEKFx02sU13cSftAR5X0WngYwUfX+zXs3AKF8Tuq2Y6eJPTC2vyrKoqigO81qIAAXsW1mu70CQ/QVBajBnve8wV4VlZ8hO0oufLt/R2GohuCLR9YBKRVM3n+ZdOuxJ8OS7sW8ktjyUyhDvUYEdaqjxRwzJ1CVDZcNNE7H40cQgEQIu6STEGJ+WJlHqRsRwPfnqm0ddKF9CPC9w4fCfu9MC2V913997QuXcJAinP2WIq7QC/ORNXS8t99l8CwvMJwgjsmmGkIswGiSK883F2iZg8cBp3cgb7nosvKIT+cBlJhe6uMDLw0OY1B+y08zVroHYr84wL8aPiIOyRV7YSl7IeU8/RkHKjm73lXMNKyX1JXIY1KiMDTLo1coSvAJHqHa/fi8rdGdW6auVrBg34veh2n3kng7gEb1jsdWdiN0NHRgwooAGf6w7mvkBAiEOkFzBRIoedwII=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"CPU code is fundamentally synchronous. It must run somewhere, so it *must* take up a thread, and this makes it synchronous. (In contrast I/O code does not \"run\" - it just waits for a response - so it is naturally asynchronous).\r\n\r\nSince the code is synchronous, it must run somewhere. If you call it directly, it will run on the current thread (which is bad if the thread is a UI thread). This is why the UI thread offloads it to a thread pool thread.\r\n\r\nRegarding \"Would it not solve the problem of blocking UI by just calling the calculateMandelbrot() using an await?\", I'm not sure what you envision the code to look like with that approach. You can't await something that isn't an awaitable (e.g., a task). You could mark calculateMandelbrot as async and return a Task, but since that method has nothing to await, the compiler would point out in a warning that it will run synchronously. You can avoid marking it async and return Task.FromResult, but that's just the same thing - it still runs synchronously on the UI thread. You can stick in random await calls with Task.Yield/Task.Delay, but that's a hack (dependent on client hardware) and it's still going to run all that computation on the UI thread anyway. Or you can wrap the entire method in Task.Run, and this entire blog post is about why you shouldn't do that.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"dbe84c1b-38ba-398d-98bf-f5fe98efcfe2","date":"2017-01-29T18:37:25Z","timestamp":1485715045,"authorUserId":"disqus:stephen_cleary"},{"_id":"dbe84c1b-38ba-398d-98bf-f5fe98efcfe2","authorName":"Shibasis Sengupta","authorEmailEncrypted":"h0HknNs4KH6Vuh77YQCeTa17ZqcUZrqworoJqAs1Jj5Hg0VDhzLrv7T0ODEKZ1sEZ2HWIYMDd5Rs9dzrhXnnjvzs7nuJernK4/zy9p8/82a5OABIX8oSJIJmeqcW0QfX27CJhRjab06dJkR1ozPUoOS391d3v9CJ8YKBdecM61a+dnUnLYSwyyxj0hIHvnk9Wlvu8Z1O8M62EM5Du7WQXuaLlmljTkCIf8XXkvYKRwUv8tefFFUMgy0lHV0dlhCchdAFlgIlh34yzLK1cKpwOe5kAtvQsKD4gt4RScHTbYHI7lvyhCZC9rnTAD18k7aG263TJmII46yF6wwmTechJ0OhS/FGV4AWNKuNALWYsnggGEwn9tNAVGLiElXeHZiABk7K638Nv9y8Yw8aJ5bqHTL62wgg5vWTrKHir96xUhVzD6bJJzflaVdtY/ajx4RR1KFdaRMgWjZBaUwK5sFb9DHUb+oTZVAU/9+mdbUBoDSlC8yBmW76vL+ky+O081ereXnDS6J2h2VCl4vkto49Q6npiwqRPXbO2tYfJuvImZ8ZCSD4fKWjo/MI3r3x4SPstsb9wLZNlZBTFvFf266naqm4KLXehWcf3rUCc7dQQAtlUMvmh6ev9y0zuikAFuCzJ+UPbtK6TaKvWHNMt1Xpb++Ni5Bt+GS6QrP7nFuHl08=","authorEmailMD5":"287ebcc391ebebd6332aaab93403ffd0","message":"Thanks Stephen for this wonderful post. I though have a question.  \r\nIn the final solution, you are still using Task.Run within a async. So the Mybutton_click still needs a switch to get a thread from the thread pool (for the call to Task.Run) and hands-over the operation to this new thread,right?  \r\nDo you really need this [Thread.run?](http://Thread.run? \"Thread.run?\") Would it not solve the problem of blocking UI by just calling the calculateMandelbrot() using an await?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2017-01-29T03:36:44Z","timestamp":1485661004,"authorUserId":"disqus:shibasis_sengupta"},{"_id":"c68f41f9-9512-382a-a05d-0f4be7cfd11f","authorName":"Shibasis Sengupta","authorEmailEncrypted":"CgDOrxRXuW0fuoq/xjUIWBU+T4SsK8QaJbIvz7BrdOVdwb/E5E99CCPtFpVSo9EX5OE4Rr6jieF4ku8uCunGpusgUTv4bwmTcDVzzHDuF+Wt2wP2ZTtJ67qgVkPvXQ0DTIER91ODTTsuDcunlaSw+C86uBJF3TFto0j3oez7jx7/kCoIVrKNc9bW2pu8zt07EYE38YZwKuI7RU3IL1bdC6WJ+5hU+IkijrZJ+sQH3BouwtHbjRwppzlQnMcgsFcin86NpTLmV3Fcbxd0n1Wpp8MKA8l6PIoZHoeMSP4gYD+U25w1dpfOBsNascJU2BWdiSbDjXYSu40rXW8iHQw9QcPa9pQ2O2QcuBB7NDtkxI3WSPA1YDBzGWSdC+PfQCmAb4Wle/JsymdiTrqPGiIragvpTrm5x4v2EQLtobeYvFmDfRTZMxk/pIiKSNpuZN9lv1JWBABkv5JOIrlfg1YGI8/+mMBHO44oaX8X0RWnp3LHm4sNf7dUBMpD0WoK98B8zShFbC2l81M0xH0GKW9qXV2V3ladWqtoGQAo64KLuAfzDqxmDrrILSDS7XB7XTGfwkR6V5EB2eNrsdx54Pnhs6uG4Az1j4timoSVidhKZhjqEfLllP5kGBKDdBvFUh1MmiP49SplIIyHrv2JR1egXS/bbXbRxhNUNLVz1Mtbo98=","authorEmailMD5":"287ebcc391ebebd6332aaab93403ffd0","message":"Thanks Stephen.... appreciate you taking time to explain it a bit further.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"d8b2917e-f565-39c2-a220-208434f96c90","date":"2017-01-30T12:23:15Z","timestamp":1485778995,"authorUserId":"disqus:shibasis_sengupta"},{"_id":"1f631b52-80e2-300d-89c9-3e7c582f3611","authorName":"Mike Lockwood","authorEmailEncrypted":"GF2Lx8wq2EfjKmby+Zb0Zme/Mhr4y8nOLyryA93MAJ5pe94MVLhJitX3LZQtK0WZWDcobuEksxlxPy0EP+SKwp0pAG5du8ZzWr0hVMh9lu8zu+7v3zd+9L2PdPcvHDfrrJcE44tRByYzmTLG8u6NKEx+QlZgjEET2RBWSU79oJ0WsSyMKw8wM/EW90TABrsbCVGqS6rtB0ZEAAnJjAmI0HwkxiQfbkTAvpxVZ19wT/ROsRVpuT7oshS3Vu80EXgngZZRMxOh4gUOmFAKoVhl0rK8u+VlUjua54U63AMd0RIP50UrD5xmnolVe2zoDuNQyMfb0ZnEAB5Wsxyv1rwqMWTNQ9qxB6Pq4JF+vyyC6HV9q6zi708AY6+WRU9wOf70jp0kU9RWBcrfolQ20IfT0rmEt7jS3/ZZG+WR4DmxEaB10cI5Y4XUwkrCXKds1CSQikfiq89P+qsPN3Ck9GvI2fnAKZcuqXk0z2M0eN0o0JpAEuMEiZM1Zm6d0ZcZYHGBqrwjzJSimzEJJa1ACfYsqK3eva6eDKickk6erPnjMFdwjrBIcg32Dxf2vQWrLSYxIThWpCaRZcAol3RzSzf3wK54GFjDmR/2yJRle27fptRi5Ycw/zkhSmLfV5hUzrMGsb0nRneAeVID8fCabSvJDnUcmRgMVZRaloOvBo+JhZE=","authorEmailMD5":"1d6adf1ef1268f3b583e976cfb1b80ba","message":"So I have a question about status reporting. Using your last example how would you incorporate status reporting. I read your other post about Tasks vs Backgroundworker and understand the use Progress<t> for the status callback but how would you implement this so that both your Application could use it and the Web App? Would this require the methods to be duplicated so that one contains a parameter of IProgress?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2017-03-20T16:13:45Z","timestamp":1490026425,"authorUserId":"disqus:mike_lockwood"},{"_id":"75316956-e95c-3908-8e34-27b37bbca760","authorName":"Stephen Cleary","authorEmailEncrypted":"SAs04reH71qTv2Bi4SXDUakvcuFAj9z4RHsQFw2u29V+dbt6KmAf3ccPtk0CmI68rlYNPsYUZsPQiTcODlS2Goq6yYSZ/YRq9di8Ldw/VzlktXvQ9hEeybpwB9vWWQAkuvE/yPspb9GlShUQ06e6IVPa951Hi6DT8VXuTKqBtskKNcMtYOS+7ZJB/jQKnt1D903OUwzLfo0rmvzgvXnk68RSRgVOdKdtNRzbR8j8AzOVmbNi8GQbhKCCG0VIP+IDKr4rpG4aEJiZTpMK+FGo60RwvL1AVp6+kQL0hdPJofkUPKyyM4SKEZ9TsALUXqh6irtQKkuTDGRz02A+PNt+PIdLFdhbPdtz+TEZzf53TfPzx61W2wBpfGhri1PXXFvUiB5v7w+iSY0oLGdlHrbwTlvtrQE+DbZRsybZ98TYAjjyl+y0KWB3aoSpMuQqPrVd4cXUmAFsXRBgmFoeEZAFroseeMU0YzvLhWhepWKb5fPHWcmMTXpLAblvnn7uj2rsSdlfbq/ZRd2F6ll55r5aZDj/c5juyBPEwKA3zewD1+zMz9JUaXbLwTTW5UyRxYNGqQ4BW1aNzJU7XjUncyCRgdIkjbRMVDKhfkHMblcrr1vPkE8zEiLF2+xE1rjbGJBC3CMpes9iGuwgvDURqv7lOufS/8CA1jqDOUzNIzc1QRY=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"I would have the core method take an IProgress<t>. By convention, the progress parameter can be null, so you can use a default value or have a one-line overload.\r\n\r\nRegarding *using* progress reports, Progress<t> really only makes sense in a UI application. On ASP.NET, you would either pass null or use the SignalR implementation of IProgress<t>.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"1f631b52-80e2-300d-89c9-3e7c582f3611","date":"2017-03-20T18:00:51Z","timestamp":1490032851,"authorUserId":"disqus:stephen_cleary"},{"_id":"29aa1e76-9daa-354c-9904-65286f7b82a3","authorName":"Stephen Cleary","authorEmailEncrypted":"upRTQb9oPHznPjp/q9UhKSl2k3J1ZnFhyYYlB8QgoXEiSlYWUptZM6mVxo7KgDZF+O6PVuZGxtCDxUfkiY4JVguihT9Vt7HyoED/FuSFzBlfzzmAvUWvVvh1zizlYGGQ/cO/PA7a0c3nklsUhX3Qn2jjip1lm2mvPMfNCAxjJVdE6aFDDMPTlO838TnnxHb3MbICLi55ID5PBU4F2/XpihLUDAyUL9txRgImL7W3BjuRDrCuzQx+93T+9WZMqVlBKyU98F2cfuTiUwOhFXdmmlgEZmIluyqJzLxM5+k+dMueRW8oiXJHfUi/COWYQCuaGHp3yHR9SsM+c0DC2NoSjDm/O9F/yr3GAFzkQnIb/KcCaJ4jqcpXaRD3yh2h+WMNHyzSJwD2B4Cr4ZGAH9y8R/Rc/QlAtticFglUOycuBrF7VFqhVdAYEYvJ90eFpiCY6EqsETU6DZ6vT6OkYXOUPf67UdqGZ0vDQ+TI7pmdcJdbNA+Me9t5+XBTzfff0VTkldO5gj8ACmd5F3kdkuo8PkKXv1L8nRAVXnVYwBhDC6buCCDwyx3XBCeyoUDCsj5016+RqmvyiJRxEta7hBYNiR4zfbPrp5yyk0NqJSC3G+hBGXWJ6kjpFGGt6JlQOeTt4w/q9HAMGqzwEL1iJ4AIByv3LCObJW1KHuh5rpjf1xI=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"It's exactly the same as the code smell described in this blog post. It's definitely an antipattern. I don't see anything that would make it an exception. [http://blogs.msdn.com/b/pfx...](http://blogs.msdn.com/b/pfxteam/archive/2012/03/24/10287244.aspx \"http://blogs.msdn.com/b/pfxteam/archive/2012/03/24/10287244.aspx\")","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"2cab4ba1-6a68-3aa0-bf77-97018cdaa2fc","date":"2017-05-04T15:50:47Z","timestamp":1493913047,"authorUserId":"disqus:stephen_cleary"},{"_id":"2cab4ba1-6a68-3aa0-bf77-97018cdaa2fc","authorName":"Chase Florell","authorEmailEncrypted":"IlTt87vqTBcp1mpfYhl9byqvqQA7Y9MAoFEzIhbPbryiHGISYVc1rK9iSc42paB3S7Gh2r8epeRjLM5GaFNnXsDWPtl6GQd8TVRbY99vegYywabpBytL3aaYP7gTu4zW+LKTAPB9u1TvQSqnyzFbUg/DC2j8kCtabTsDaANxpMebujwTMjUekHWJ9QjEimsl8htYMjzwYtPlqrk7ivs0kOvdNDoVZi9Eb7w5/Qy/f7N1U70UUbQnV9x/TXONRgX/h7EXZPQDTwkGXGDTap/APBW0+nzhwyir/nvL9IFkxZn5DawPVYGVbJB0JWWY6bIN1Phriu8l0W842FKd6c2dHYQTdIbZ11Z2Rbi940q1sVewzdgvvrF6wbuhar3uXtigge/VbGpWj6nxBuhGA53HMw35IjHC9okJ25Mx8XvxKwKAGqyN10ClB4BKo33/pkp5eBpTb4BYRkicuwB7A5wGCgc3NgsGoopKR0vSpvvCvUB3PzT4ey/TUcSo+7CVBzUdM+EW3G0ZGlsgEX4ESrJQeXCdhf6x3YKLGjBK8GK6i/RA1CffwP0Tuq7guQdWlWxdgCI7tZETgLCKI61gtVCce2TnZ+Np+tnxRqmEU7KLcykCXb2JbyKR0+8oGz+EXfEL7Nk8NHATUIMj107nY9ToQfRLP13J1Rgj/+GH7OQzmnI=","authorEmailMD5":"9ebf02738be8b03e5688f0b27a545ab9","message":"Hey Stephen, thanks for the detailed explaination. I wonder if you have any feedback on the following. It feels like the code smell that you described (except it used Task.Factory.StartNew instead), but wonder if you'd consider it an exception to your rule?\r\n\r\n[https://github.com/praeclar...](https://github.com/praeclarum/sqlite-net/blob/74b6651394b59e122960945131a9b35648f19b88/src/SQLiteAsync.cs#L101 \"https://github.com/praeclarum/sqlite-net/blob/74b6651394b59e122960945131a9b35648f19b88/src/SQLiteAsync.cs#L101\")","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2017-05-04T05:02:12Z","timestamp":1493874132,"authorUserId":"disqus:ChaseFlorell"},{"_id":"56de1776-a1ba-3c42-8300-4a7e0c555c84","authorName":"Stephen Cleary","authorEmailEncrypted":"txwwqolGU7G3E4AJagl1+gtdRxr9UQApbdEYHwVrZlaY2x0PKdadHTYa0ZLFHtSD1fVHHY9vqQcNvoOZrzk2hRjEpbTqul8K0RkKlYJFR4Dm0Oy2HJv75sssqF1D7mFtG5BAyGEpsGzDEayErXcDkzXyiC9KQu3JlggC6vmuLfxZzjSUXhFoCORkmRm6CIQB8F4pN2TaHmjMre+JjwwwW3XnMLcVEmhP2nBsxQxfdYtYrH9QedmSZaZZ3x7j6tFOmDQAs/0Sd2RWA3bP7KqJBf8GJJ4k3w+p6F3v3pW4/R/amvx6UbJeee15CGg13QMS+t8LjtGHSpewu8pn+NZSfZF8XEF6aIXLdqF8evBWgFa2Cys57qtrpFaZy7XU8lJXzvHetu1b5K03FGwp4nZA5p9GJoAY4bqchDorDPR8bd7KrO05erls4swXDBtw8j37o6svHs58dqUdI6QPa45/NOvjUdw5erO1/9Uv6ihUXZKwin2h973X841nokY8GhZHsJ1Mns6b0AHMLyXqbuYL+bEjsaz/a/aMiLI79lY/rcBWv5YUDeO+wUVVqNqA1dw6rGEsS89k6PG09JLIw6Uc6NiCqY1wIVvIagU0gx0G3/v7TKjlxN0I+D4X6rG4D+A9H/ZERoSUo8Fm4JEfJyyF7XCH3Phh9UihYsXrQslKKZQ=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"You shouldn't. CPU-bound code is synchronous by nature, and should have a synchronous API.\r\n\r\nIf by \"IO/CPU\", you mean the method does *both* I/O *and* CPU work, then I cover that in the next article in this series: [https://blog.stephencleary....](https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html \"https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html\")","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"db987788-33e4-3ed5-abf1-1127071a2fe4","date":"2017-05-04T17:38:29Z","timestamp":1493919509,"authorUserId":"disqus:stephen_cleary"},{"_id":"db987788-33e4-3ed5-abf1-1127071a2fe4","authorName":"Chase Florell","authorEmailEncrypted":"sVttIuXk4cpGxSTj5lc7P9TqmMeDZTpWAE9lsCE50NVxkE5ILVxiBCfi5eE3UDjTvo3P0BOlu7BsnM7P+dguk+E4M9cdOwsi3kyFDvrbNXitRmc7J8zK2Z79WP+kAbW7cPTOS3uwZzccS8Qg+/YjNHWeej4Z4SfgHhoXeDL36u2/ob5AVmqSloQfEiPCLsZ0KMNqU0tuME+Le+Th14toO8qLV32FmPXm9zCOCXsxbIqQE1ta9VPF6OY6hVQfg4DkZHKjD0YLdvVfDmOB73LyUs3E7INMvZbwUqoacSJSzsU4Db6VO64nZwuVTKj1nSZV95C5pdRyS8GULmKN2/fvE72fqkFUZcuMwUmpjZxuTDS4vnkzSTU+95E6Pvv86UQqGAe19vtwMhdrGcH8y/CS8zNWiOr4/jO/HSacZ6GvDC3iPqc2q7mWuJvwwRaImYf7cE1apx9rOMTvOieptMmwVk0PZzPk40kcEOowb9b/Jl6pL2VyULD2RavFIfLw0i/XOTE4B//3h+NKdCz0Jef2wLc6eFVIjcRmi8WGzTr7O47t+H0WhaRMehDFgpc9Cr3Cb1uNVWi6mR2b/TcCl6OhZApsdC+3Ic6ALywYJB0d12tChFHbMkGDzAmd6TfAh54pVacFRzK0z+pJD7IT0T3skuIvqg4yKuBgd8GvacgAVKo=","authorEmailMD5":"9ebf02738be8b03e5688f0b27a545ab9","message":"agreed, for such a well used library I was quite surprised to see it.\r\n\r\nDo you have an example of how one would properly write IO/CPU bound operations async? IE: If I were to write my own low level API to interact with something that's CPU intensive, how would I write my library to expose the operations as async?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"29aa1e76-9daa-354c-9904-65286f7b82a3","date":"2017-05-04T17:10:20Z","timestamp":1493917820,"authorUserId":"disqus:ChaseFlorell"},{"_id":"21a6be5f-fddc-3c3c-89cb-d92be0defb25","authorName":"Roland Harrison","authorEmailEncrypted":"rMqPfUj6NN1X+VDaOBCyqCHrUlO05npl3beJP7q96WqVFY1JIRuDRq7pmMbRaf7GuFGWAJBxFpqHv76noMpg+ycxTkrUP7jM2Jb0Z0Yt1ddCApUoL2IKOyqI5XTz/aqk2qJgXWrwLd9dBWHEvMBLL4B2MR6PYGMTyj/QwXmBFX5m4tokdxVd41rCq1zcnyn0nEybzReULFC3BFV3Rn4jyTYVU+1TtMWzjLpNPUULrOb5XTg1Vy1DXQJG0VHefh1M4Agun70iarsrELgJv4eFTHUSmdxCte/in9KPS3eCdk35D1S56w+q1zQlnILUCqiXC+U1u5QnXmjNraRmiVrXNWgrWvRO6u28dUYCPfkhKseSZtXBbshuaMbpHtN6SKbAC+v7Exr5c0ah+qnUJWYvL2vTknbO1HUrebyg2uCxlxPb3U3P7AmVAv0VSUCgq8h39iWMp2fkBhtA6JAtMqMzi0HJrRBy5KFzG7po83qI/FdLMklAVuy80sKrIcNh6IINLpogDmF3KbiEp3o5DtjcuL54BSN6tPhXRN1eaIPR8BosqN/1ozmOKa+ccS2IDzpFMfpgFqA7H6TZPT1aYFJTAFbCd2g11OmLgO1yprtAzHAwai8XNC0iRX+IWJe61p8yeojfJVLnBOIDIRA+5c6gwmmvcrdoMJJfg6Fy82MaSyg=","authorEmailMD5":"b8570cde8f8a6a5de4a2d78c4389dd22","message":"Could you give an example of where the typical Task.Factory.StartNew examples go wrong?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"f7f673b5-af3c-355f-8bb6-f0564b8aa583","date":"2017-05-24T03:11:23Z","timestamp":1495595483,"authorUserId":"disqus:rolandharrison"},{"_id":"dc95f81c-ee4c-32a4-bff3-70b4e8d3127f","authorName":"Stephen Cleary","authorEmailEncrypted":"wQAssZVNPhptlT+cnuPwtFNCmvB1oY+/3IgXSh7BVjOkGo2FGy5nsDeVuZw/IY5v2u4+7f+fDuH5//AjvwYI1CKzOiyd4ISal1Nnu5dRUpSmzomTBO12shSpFUMLc0uzatbt4IU0+UVmqPV90em1s3o0hTvIMYAzaBybARH1nV74O2M25bYJDf4NvCz4S/kPGJRRUqFeqwy93RqoKck+/mUa+TgNbpImoztDuthzp+RtESLKyLckn4QYCS8f+4H6NiWDRlVAK8nQ0Bind3QSA2tySdPjCpSLr+/1fJn2i/utfxEMomdgifE9Staw6w7xprpACaX3R29h8s4afajB9PwyWLN1yTfbdmBVEzABoKGgsUML/5tGNP0wtlOYVLTnHnL5v+mkCBJwx3IvqgBe4vcggw5hkW0S3JejaOQSuUZGdmbzK0kmpPAY5OQxZxdLI7rgjKR5kpGMS35Q8QPHpClynA67fkv/hATW0L6FNKD8kcCFS2uqo4Z6dOaZ+WdR+lL8D5JXcNjbC53v6SoydZVxNT3/nm8oNicQdBvyvSBqTvAY8iXdTrvk2HOqfrG0n0/ptOO07S7nCl2ruTtVBk2wGmg60PbTu1iNSifZxLdV3Y0XbP73RzV8tiBfHLNzJFSQ1G2WIKxwTowT6XWLVxzKhL8HY3E+rdHkr9sDI7Q=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Any StartNew that does not specify a TaskScheduler is almost certainly wrong. See this blog post for details: [http://blog.stephencleary.c...](http://blog.stephencleary.com/2013/08/startnew-is-dangerous.html \"http://blog.stephencleary.com/2013/08/startnew-is-dangerous.html\")","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"21a6be5f-fddc-3c3c-89cb-d92be0defb25","date":"2017-05-24T12:03:11Z","timestamp":1495627391,"authorUserId":"disqus:stephen_cleary"},{"_id":"3b95b965-60d1-3e07-8d91-229007c48fe6","authorName":"RonnieOverby","authorEmailEncrypted":"a2kPEihP3Tkyt5jQSi7Fm+w9k+XpalExUaQdwA1RLsUcH6CTUTFG+ACNClg4I919MYxJCqK220zzGMxe5wPKUyXqtTfBarVmn2hMxY+8tbVFFGNYzKoC3CpbLCnw906K9lzuE19xzktON4peulTI12UHz0Y471vofeC+3MVWSwNvh+YBQI96aPGKipATrMhZGY5D+HtMi9+up7cFkZFeGR4HD2PjczlWTfOsjQLrg9XsR/gCZILkqg7mzzcH7akzVddDInH1iA+0dO1Jgsn7MW8ef+HiKstDsTt2hCNjHt8cQfiN2IKX9nkhM96KaZElYvuMDIuV/r3+ZQmi+7ZYuVUdzCD5k3BJORRGWeUwdMJ3RIDNgQreDg6rts2RZ6adJP9c2pbIBBbUre7yvyHXLNJFw1ev7k7t6xbDuKPri5tQKDPsSotXhoxaD3t8Amn+VC8s4mpOoCDIcHpxEmbsgz38g1jP9xTA9dPqGurAqOi3B2L7CdzqpFWxB3ELscA37C41tZKvAwsoIU4rYRlKkNa5UDNpk8vZqRdyFxhXhlK6v7dVvgcDaZfYc0S3kYwajkceLUilvCxKniSfvtH0AJgHIzR17XOd38jzwv01uZBB68TK1Ke74AOAckd6ifJLQSeY+58OngafmRqBy6EpJufB1fu3qQrH1yIbv//sNx0=","authorEmailMD5":"805e562badd03fde5a760b4a0d83b066","message":"I kind of miss the days when we just had threads and the thread pool. At least I knew what was going to happen and why.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2017-07-28T02:08:57Z","timestamp":1501207737,"authorUserId":"disqus:RonnieOverby"},{"_id":"cd7d4f46-6959-3f9f-bbfa-717ea029cdff","authorName":"Stephen Cleary","authorEmailEncrypted":"jj8CSLBr98a8n//qIiTWukdh5oh71bmDfZ/tpMdA398yimtQylc/TUb0/cMPau5bpffwvjM+EmX3X7mR+m7MirMzFhS/wB3i+2bmR9LShIGsxQj19OdIdE1IoaNGwnCkwCZRUZdmT85ZKLA3an5LOLvbDtYoMAN/yHcFlX7HI+Nl7coZVKjDpWlz9kh+cahsp2AIMtWq6TKli3xO5Y8ED4V27EBqxOv6DdC3XaWtM9LRk5/imC3zAZD/3D6vx/qTJKFtbSHioYApufiYBDIm3NW+dfqVMM5buga8M+vRsvGuweZhsSd71UYHRg1pxY5i0JNVW+XE4optVIDvbigd/ADgPh6Lf71/Nr8OSflTmIxg5Jnjmasg5Q+AU/Vxg4oe7pYO1FBwfbbuXNpOuiOpW4GdLMZKAI2KnYUfJQl6PbXcRstYrDP5yMmfS4qvYXBhToQbzoxdqc2CVfXvC2/PohDjvME6GwVbkHjPjtZ5yhygQuUMtcz8Ay8UEk2duHCUZqxKIlRfu1Y2dHOp4NRPFdvi5g1kaGkr2LKhUbEoaz+dC3yJuy1JqMxzXoWLwF3BFg3fq/bf8W7ToRj/DYtLVznqL1nT9dP5Eyb9e/WqdsK3yR8T3xHHSw0qVcu1cURmCHHmr/RK8jT/8ATlWuRiVfAPpYaoI/41rvXF+eHjmg8=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"If my response below isn't clear enough, then post a question on Stack Overflow; it's much easier to ask code questions there than in blog comments.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"d4cf6f6a-3c87-3e62-ab4f-9844be468125","date":"2017-08-14T20:09:22Z","timestamp":1502741362,"authorUserId":"disqus:stephen_cleary"},{"_id":"d4cf6f6a-3c87-3e62-ab4f-9844be468125","authorName":"SHYAM S","authorEmailEncrypted":"JG7Yai/THbi3wXIuISctb2dE8hbYobZWSukdUYiz+H7LDagsQ8y6OKyq1sB04d0B4RcVuRt6bnBvKvhGXUHiSRYUzj6WgikDdry8WMxLz0OFXAE0rm2zbCfGDbHfs/n0CgJwsUNIuIVffNBQkMkIV9lH9SE3CElsjw2Pe+8PeQ6LyfbnzbRwpGQbs/xwTNWSHiele4mYR6iftwhi9vbgOZe5aBDLcYD+L9fymvyawraL8U1glouHleezyQcRirARRRkFOH3LuDeOgZl8wTYV5k+5mCi7JON5sUR3bBn6QxL0QM+ecsRtUVkMQMhR8YCv0utUWnMRMoL8GT0VwF0KuU2HokUrQn/J77w+oduTo6SjI3P8aYyl9YJ16r+lmqMrSiI+FkHW7sQb47AW7rO1LrVKEGEsTDWZXgOYBApNTG39tGOs3cbJGCRidLzAhCNRA16n/zNopxAH1s9gtUzLvPqdLcmfbY910f98Kajzd2a3anReO8b2nzKUoT4DrNNFcnmgzHumMJ5T4BHBwdh3wnSIPUeSje5duS3nVisiCZ/b7PsqFZtGvHszx1FfRj2zBpqvyYf5t330cFOYwVPGe0EXMBPsrYSQCd/lUMTF4PTGFkPz9Pp8ISFBQon1CIHmvnYlbrOi2suJ9uMfeZBE6QIt0xECl8gnqPha7mHrCfg=","authorEmailMD5":"302c587a8c4d1b8c6a8ec6291f1438ab","message":"I wanted to add one more point, actually these multiple DB calls do populate many properties of one class (e.g. clsPlan) and methods are being called in a one method e.g. LoadPlan(). This method also does costly CPU bound operation after DB calls(once clsPlan gets populated) to set more another properties of same class. So, in conclusion, my call hierarchy would be like OpenPlan() Calls --> LoadPlan() and several another method related to view... LoadPLan() --> Several DB calls (private methods) and in-memory manipulation to populate clsPlan object.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2017-08-14T07:53:08Z","timestamp":1502697188,"authorUserId":""},{"_id":"da90ab1d-2c6d-36e4-813d-dd62d07d25ba","authorName":"Stephen Cleary","authorEmailEncrypted":"HMEGJFr5gRoUAa2Tpjlb/Bvr8xnmOFQoMu44AbMXomzmIujLzRqOOcIVlCIaSvS+gU8OSArMrWi+GQbTZs1xXovR0k23Fd3N7Ldvh/xwQa5kESr2Gtfhu11aKGCSF1G2IPfI/eKhAbyfIz+IlZjGx+2OA5I26wTUg2+FqyHU2zynLNYhABLqLVeb+eNxP3y3GYhO1O4rhNoH8hIAeNYZsiExQeSEV7E8zF8bafen80vjPlzWASC12o2OetJhRysWFXvN75uzlVTAzMPH1hSNKrCheyrKOpNJv+x0v49reGsw+jKxtQL8eNbLbjsJ8yM4uAD6+rwZbN54d/jAYyuxa4eJGs9jZt47URU+W7pmBsyRpBqxPi6HKfBI2/XKzkfdwuEFyULWwy2aJ9aiHgzq2YgkKCuJWnfJrnN4xhw173XHyHc/Su5mk3LIwJooerw6VmAvIMDReb/ZaoPPGdWNBNg9Bfkkk2cPLuCJc/Uwdz+7FX4cnYQG2vqJ46aqmJeybEsoGTVnAXpNnOC2ekiG9oLFqvSTxissI4LYfFeRp/XLXy9RjIKgQUwM+QoyTbWcItzERR/BM2QUnin0d6CWjyMWwZxq8mOOqrM1djVQbOgmOPVbTE9npb9z8Y+rFl/e7tqLZVMLwGXlPPoiQm+2Ns8GKj29ZzqRjLLmSPgWLXw=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Since these are I/O-bound and not CPU-bound methods, you should use async/await with Task.WhenAll. This will make them all run concurrently.\r\n\r\nFor more information, see \"Async Composition\" in my Async Intro post: [https://blog.stephencleary....](https://blog.stephencleary.com/2012/02/async-and-await.html \"https://blog.stephencleary.com/2012/02/async-and-await.html\")","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"f14bf2a8-b238-3ea1-b6d7-0987667891f6","date":"2017-08-14T20:06:31Z","timestamp":1502741191,"authorUserId":"disqus:stephen_cleary"},{"_id":"f14bf2a8-b238-3ea1-b6d7-0987667891f6","authorName":"SHYAM S","authorEmailEncrypted":"i22rfHuSXcojZr8mdAajsdXUFCvOQ0hH/GhC02HDiOa0fm9G3y/hmrKySNV+sU21sdyOoXMUdZ/UShepMoXdmu0b9tmMkbEVV97ZN6nqFxmh29PdFlv4feu/LNxxWAdMvWgMvtK3FN2qtj/bj21YoDg3cHRLlrPIMDCArIQacauiZY9w9LhiD5+QqFVgNdc84ItZuXm9N5FNvlw7HJ7F0Ov9OhvphaQh8a++qgC8OSkYLNDqsCHt73NIq3sOCp1OUqrZfuWMmK2ZMV3AQ8d4twtRZmOvVvMV20gcG3JBaZwfdnVI1ZVOk3hoksippLMbxAWix/GfjK65IKC7sL/wxOTFQqhe0+StzgnvyXoeBC3LJkjCyQFsDkq0fzXMI85ZxCx94oZc0OypSubnf8kfRvlELCVAGY1iyhLFSLfWwahiMgULxKQPagfApZQ4xg3s3z8hMr/8ROKNioCDONYjgh+BCCiK1vuNOK7e+GB+KkCih1SO0QCrvWsnQ44d2vW645wZFnrOpUYZCIKVOlVCNbz/1ENXTzpTg+9H19H9+rcIHPO6OXpt1pxm+cP0fWlUfxiInzbKKikbjlgbNvhwyltrxSFMODvzC9/6f54LALJbvs4E7ix2KvP9Sma36kXq4wrzWmXQbTPJCxPMrZZr7sGH+9hHHFJf+2BUuYqbEBM=","authorEmailMD5":"302c587a8c4d1b8c6a8ec6291f1438ab","message":"Hi,   \r\nIf I have mutiple getDBMethod()(around 10 and all are synchronous) Instead of in-memory method CalculateMandelbrot() , then how can I call these DB methods in parallel. This project(Window Based) is already developed but having performance concern so I started to refactoring the existing codeby using Async-Await.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2017-08-14T07:38:47Z","timestamp":1502696327,"authorUserId":""},{"_id":"5f25e192-5a90-3e88-87cf-e1aea6299637","authorName":"Stephen Cleary","authorEmailEncrypted":"gAPDTzecPmLGWoD7UWXnltoZkHfqgMfVGLgLILJ5C7Paz3xFtC6yWjUSRBxC+XwhhITZdxCugq573n3ZSscO4pcEhyQgoF7LYO909VoBBkFXOAJj1fbaRatZDTkjzpt4WqNeBx8OYZNb8w9CGa10n4ws3E6KUIr6PMrAk43iGxFTvwgXnWrN9QH9mlctvwiAfodJKJ8zEE+n8r+bBtoktTHJJVBLcjYOsgRmiFLDQFogHzZfhck4UdijMucqSSvuspN+D421554Bmd2E3646lUGLnM9PcCi+WLmrZ8wm6nAQOa57t0LI3OTpQLYrFwqLEwTBrQw27IzW7dRWhqnX/IVBKegSY8qIAeAIBzFFVX/WNVbX08qnp0WytqoT9PMzGIsOwFCjnoBALBtJOXEWswEzci6xbLGH+xEW5qfFwH2YNdoEDJmZRlmckfrBq3oXct8Rz7uFTEmL1kS41eDbv1/OcfnQAA4kt3YzG3GN7Pr1nPuMlx/GiZF4zNfXWL8C5XwMRvej7BK8oOFM+fJvUNfXp8dk2r0NrQowZ2QCRYC5jExij9IZK+15ITc5FC4oyi39gluYCGwURGbfkD1ADPtUyoBb9ZmESQhQuOh62ikjkmi0K0BBmTaW/fTfIBxAR6RYbl2lXoB6ub+pj/AvZ3FjJvI2puPD73ojMGSm2tQ=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"For any kind of real performance improvement, you'll need to remove the DataTable completely. If this update can be done server, side, use a SQL statement. Otherwise, I'd recommend Entity Framework.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"715a06c4-59d6-391f-955b-56c751d6a738","date":"2017-09-01T14:51:38Z","timestamp":1504277498,"authorUserId":"disqus:stephen_cleary"},{"_id":"715a06c4-59d6-391f-955b-56c751d6a738","authorName":"SHYAM S","authorEmailEncrypted":"rzU/rX2YEGAK3V4EFHV7xO/eECRYTuytsrkQA+78u8CcAZyOtKLuzeN93Pmumda6LitXb4gRHPjMIArih7mfrT/IRUiqqTMhYK7V1s+ZODp17pHjcCR6xMbMM9w+fVadRf/d/S3rpa5SnWP3mvdCCIbdfHaq6CMkAxRlIWig/B5Wfu0i5ZbHoviAzNUNMBhaosEsrw2ASjH1xsIB5vM2hgb8+q5eh+ooztU2bxmjGk7yKvpAX9ebpbL+UK99xnem1xPkSDFEA6AJzCfc130fhjCNwvUfa+1ZSY1GnrQWaXhA/Gj1DvUupyW7zgPc0NI1u8Pd41l8sT4G0N2Tbzyumuw9vRBk98Dz6KtQG1o5frYc0PByCSaJne0GATy/tfLa9qJwgRp79BiQocxghzHCot4ht9FRntGFcW9tQh2oGBzFLtl56JO62ZzbOwPW3Kt6sOCj9lThFNtCMndIkAou0A4aLWzsGgMRQExXE8McvNYoiYD7mMIAVwdEs3kl3jvZTTdLtp+x5mOqPQXBqrIY1m9L6nobCdopnnmF7Eh7D1DPimjw+bS4YNz5x6Q26KbToUukbUsG1V2GWNNAqsp4b6KWaCosUIakDsqzS0tR3pdok3BJS9OupPRxODBq4UMa3KzPnPZ9YVQOsVbfhQh56itNIGcgfpgg3Ox5GG4QEFA=","authorEmailMD5":"302c587a8c4d1b8c6a8ec6291f1438ab","message":"Thanks a lot for your answer.   \r\nHow can I improve DataTable iteration with million of records, in which I am updating the records(cell of datatable) by some math calculation (e.f. cellvalue= (b*c) /d ).  \r\nPlease give your suggestion because client is asking for performance improvement.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"da90ab1d-2c6d-36e4-813d-dd62d07d25ba","date":"2017-09-01T13:39:45Z","timestamp":1504273185,"authorUserId":""},{"_id":"9e40f266-a67a-33d0-9675-3ae4c6ad419c","authorName":"Anoop Thomas","authorEmailEncrypted":"qSjzvk7O13DAthIEotllM45PBu6dtP40+4JJLrhLUP6FXVudARVBW18DyMgSLYa7znIKCRrSiYHhKusPbqWgOC2VrR1cEWduCvyOrNgqUkWhIe2wN5/7F013jQJcvYi76EWoFSX5fYqENUFeeyTLHTiCtBJj5lisL2KrNAQkY9v9r+gdyMtM0l3lNciofSYv7OugpHVJSISzARG2muJ2NR3frh6jaXbemuwrT6NJgWvswdMnGrA1spJOrXT7QMCxFvuSqk0QDTKro+eZhToKktgb/47yVPBZ1jbJaROzeeTlIxYlOwkY8sj+cPpCZ7dbNXg78bZ5XW9fdbvcaRG9nADjMNA2ut/IQterV55F3+n5BKGUlbCTJ+ZQzOozd0WlwdvPFY2VzO6VVYwHl1UTCLlnmzA4HsUCvXpGn1ZLaT35mUYtLTViKmk02cQco7BJxBmjPNu1iVx1F7kKuDw8oqBsmaYQOGjh0EAO16TT02orcwTM+0RHV8t5fkhLRMMq54ujtDlIoza50R1U8h7srT4Afvwje2d7EdaRvUs6skJV+kzSKqtX33pFHL3MLPqiElNgdyXOnirzcoJsPW6aHJb89YhwsCTASjjgZCo09gc47vn4hNpgz0VvX0p9BYCOts+uHBBmU7NMPqglZ1lEYkyE2317/BsuPCozS1/agng=","authorEmailMD5":"9bb9e60947145b135f5e8cd8a9e6a191","message":"Hello Stephen! Thank you for a clear explanation about Tasks. In a current application which I am working on, I am using the technique which you have described here \"using [Task.run](http://Task.run \"Task.run\") to call methods\". In this case I have a question. The method I am calling via Task does not return any value. It actually selects or populates a database table. Therefore I haven't used async-await. Is it a right implementation?Will it have an effect on the performance. Here my aim to use the Tasks is same reason as in the example. I wanted the method called by the task to run in a thread separate from the UI thread.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2017-09-13T20:13:25Z","timestamp":1505333605,"authorUserId":"disqus:disqus_gJNBTjkFHI"},{"_id":"3b3352da-269f-3269-b230-4d32ce0920ca","authorName":"Stephen Cleary","authorEmailEncrypted":"trIn49xd8cFxbLKEeKHn1UeLCUyaWZuXdYBZeydoi0jXQd+TTqqG3xjIAxXUFpC+Q2LOqkwwd55QgtByXbJ51zajUYdN7lxEa7n2Kl//ysUM8+F6KEVHMiVbSuhhHpC385LdGXFwcrJjSOGSivK12iYIg/eZlukVvR76nVY87iea33BID4DvD9EjmPqsqpM2lDpG2Drro0x7k4VsZcRYknqyDlEZctqoBhjVgMFt2TCfYuJw3jyzrLMQekjLDFKv23efPk9nvyW/w+7B6xM1qwkwgudaHJU4mvN8nPUl/240SJzTHzvvjN+77D7+dTyBbtiuPT31e+JgkAxGS5ocORnbc51ug0+Jo6eipU5a0Lh5YuIWDN7ofmCIMDL184WdY6w0MySQQxskf4JuVB0uYNh2eaBRYSVTgZ8gwtboNlOuu2B5VgtUOt30iY+F3dE97sEtzCz+lq5crL1KT6t2ioLF6/JniVjLav22+lIyi+jLctsPnEo71QU/vLVYj9zWi6GMEGYLuap9tT7TK6X+yJDBcU3YfJoBmObX+5S4bUoOQczWnoYLXoTA/P1TQ7AYHLl8aUiXIP5+IxCVe3P+50Y0SuJSqBqpWM9C9SoTnkp1e3dspgRJIXwpWBHWsogSHhO/MVd2LrC1MVYizL/Dfs4LKKsGkAaQ4E//hd/a5Jk=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"You should still await the task returned from Task.Run; this will allow you to detect and respond to exceptions.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"9e40f266-a67a-33d0-9675-3ae4c6ad419c","date":"2017-09-14T14:30:47Z","timestamp":1505399447,"authorUserId":"disqus:stephen_cleary"},{"_id":"d24b4127-2baf-33bf-a461-566d1a85ce47","authorName":"Filip Cordas","authorEmailEncrypted":"Lo+Xd9GMGHprXhDjdAZdK5SHB1sdAlyFc5uEDhNS+tt1CUg5NDEH+CvwBcTSdHHepiaO6+pPTQRXsu6sj9FW/bu4bw+U/JaFTD9MVn5sLzZrb/8iy4YIOnzS2gMt6wOLzcjW9o7uI6LnouVBO0fs0Klet5yZ8vigFHEMGf9AcnVl7E3t2sjF8yIr9AQuNTN1WPr8Fcppt9bBsVrXjkLFTpWl2qcqlBU5LTIdi38E0PamuweJsNa9blEuhmzbLQ+cIFozWBaxed/gRp3d/gRkKzHLO0QO0Y7/QEqEwKgiWk5o6z4/KjiOpfMXUPHuAPisqgDr8Yl8jG22bvdbFEhRlw1FYs/n1WmMdTvNsJlVHIy/HlJhdczLDG53ISapwxdL/zitWpKvkhOsb/LoY2e6k1/grGOfO71pTb8nLmeU9ewLIZjS7atM39W2l/86rvDgcsbMlbOcvj+kOXRJOp0bdIccxbKx4b8nEbZKvFLeN+FHQOl6efHUQq3h53wWjT8O43MmmzNklRFXjAMHNxKHykymr7/HTzeb7v5fR1X518v40aR/0RtPnE9Qm89VLqlK/Ycau3jpnD0e15DaYSyjLw5GLGAfof77dSAtDrMvJZooUYx434cS+/vDmmxszFaPFPHlik5oOIoB9RfnepNkaURHR5eXegXOw91PDV5eu8A=","authorEmailMD5":"5a0f72bd57a0cd7441313cf75d048196","message":"I think you should just rename this to threads don't increase performance. Even in the none [Asp.net](http://Asp.net \"Asp.net\") example the code will be slower on a single core processor. It seams to me this is just for people that don't understand multithreading and has nothing to do with tasks. Threads by definition decrease performance so I don't understand what why would it be a surprise that this is the case with Task.Run. Making things parallel is what increases the performance. But I am more interested if this is really that big of a performance downfall or is it in reality a micro optimization.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2017-09-25T10:10:09Z","timestamp":1506334209,"authorUserId":"disqus:filipcordas"},{"_id":"36b0a164-4433-3a2b-a0ed-efcded40dac0","authorName":"Stephen Cleary","authorEmailEncrypted":"ThBrrypDqvXCeZ35V7Xk52uTPEhW/Vt8t8MTYCBfhYbiXbCuPVUCKQ+sSimldqF7mUW/qGLlMMji1Dw8qf4KIsQ3Y1nIu2GTmDyT6xUHzCO3UfGoXTW7h2BMzmrmRuxtAdlt3Saq7hdb5+btlfqUu1CMYt2BygXHBGcz1KL6ZVRZEvgBV1nEPkDYjdSGAaKycymrVmDYmaniThNbiyDd7QBJGinRgYZyky/Uayej2UWo1scxPKU2s6PGpm6klKdkKhr5JaztAcIL5qSGNlguMkMat6S6ymJ2jeYkqw4WuFOtVE2Zll0/evv6JfdmwwN9qBvgHP+b3pavYlM4kfbFvo885R6050MZlfz2tadxzL2unKTDoSo3vSWZipzb/BrW0bxCpBwSYGurH3pvEy5HPcZ4pMwpTyWKGnSD5XL6y1ewhV7SlolJie2C3BowOvjtI5v2Fg9YkPvPDxIojGWUxfmxGKf1we/2dJHhpHyWXLvroETRab51kKDpz6FbAIoKSVFtZGnIv1PzZmJZCFx6/RokylCSik4hMuQTJJ8cOwVksJpnK5OUY5vit/cF8CqfOvEWxJL6ntHyG16w1mH3/JzMWPao7uSUL7+ugPyaaPIVHVcb99fe4lO9yr6uO2ma8SyFL+xCiRgRbty3YcMqn+gOMQq0qpIUBG452MwKH0M=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"This article isn't about performance. It's about a developer who wants to write asynchronous code, and attempts to do so using Task.Run, when the correct solution is to leave it synchronous.\r\n\r\nThreads can increase performance. Even in ASP.NET, you can often use parallel processing (multiple threads) to return a single result faster - but at the expense of the scalability of your web server (so I always strongly caution against it).\r\n\r\nAvoiding Task.Run on ASP.NET isn't a micro optimization. Devs have to go out of their way to use Task.Run and make things asynchronous when they should be synchronous. So avoiding Task.Run here isn't an optimization - rather, it's *not* doing a pessimization.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"d24b4127-2baf-33bf-a461-566d1a85ce47","date":"2017-09-27T13:29:47Z","timestamp":1506518987,"authorUserId":"disqus:stephen_cleary"},{"_id":"50e2989c-bc75-34df-8416-429a0df8278b","authorName":"Stephen Cleary","authorEmailEncrypted":"YLijN6CCTvfBJbu/QSjAYbhG66gbb1yLxk6AAaZy0P8KdXIT/z/j4W5NHF6Z0/uNO3TYq3tBPyL8a5PFp8plqosMexGMR2KZCMfA2fmp9JWpBm5JMmOxGto3Oioq/WZ5n3pEZFV1K3z54VVACQBCs8fzsBVUOCrxzdmGdpW19tSnIkw2GlLcNsIrK5RLHE7/6uACJnjKBq/0AbFqMTqZtmLS4Rl+QpjAX0kTWBCFPOX+fEYUP3UPXELLCv3oKwmkqd4z/2GRgfnCl7/YWqQuU41Pr8WgigJVvNIyyyHs+nWJBPhlZtjo5eWlp5VnW9grTv5MHcz4yjnFL5lSGQqRTj3yV9LYOVqAlk8AYJ4yiu2DwyWnewZsnfH/2Egs84b4XCatTHe7e5T4pb2T0+ZpuUKk7j0PktGjpodkumKBkOjk6L6Oy82EfCNto0r0181J9XUyfKW7MKQGgO6P/Gu2GLt6dJWdAgUrWyxFkICAFrqtPK5kVqkLREaLrlIk/iahNbQB50eqJSZ+pYWt95/p8BVRtFPY9EwdezkTPnZvStFG2bG/UUiOjlasO8sDeKldJE5Qy36r3M0YA8+zxTtdQA9kaVupFJFtmcO34NdL+wE7ecTDVT/4o2QAZW+7Eym5MgxyKXaYAhLgl3WYp2pE/zVIjEM8/39pVxRZMVd1bcM=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"My point is that using Task.Run to implement a fake-async method should be avoided because it's wrong. It forces multithreading into environments that don't need it.\r\n\r\nIt can also cause performance issues on ASP.NET in some situations, mainly dealing with heavy load or saturated thread pools, and especially when the work takes more than a few seconds.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"bc813a6d-7eaf-3938-b500-3ce5e92ac48b","date":"2017-09-27T21:46:18Z","timestamp":1506548778,"authorUserId":"disqus:stephen_cleary"},{"_id":"bc813a6d-7eaf-3938-b500-3ce5e92ac48b","authorName":"Filip Cordas","authorEmailEncrypted":"YbPF7kxVuDr6CmlKTnpHtWbJHM1l7YLvHiLvV8C8vthSuJ3RNR1hRQIJIqdnIk08oN7BE1IdDEYr0au14OmvfERXdBVUVuOioAyQh2/7MNnnm9YA0GoDd9dN6FrZATj+dKSElgrqgsw6ObfssdXc/a9lU7/igeRpcDvBMLiAoOj5ByocpudXP7VKUjDlrTh5RUMRpUiZEIHEwwxoFjnTp5Naew0bdvJiBcQD2oi7lpRn5lFrCyxnq3/Lge8ove7RgbADRWY+65N+k+GT7FBNp3Devd824M/qEF0G0hKZM1FWwA9In3tyN6gvnnJK/o7hy4ID7f4uKgSc5rVAcPiLgbZMenIDKGXTCNk2RJ+v5tAXbGSs5XV9RDY4WdYfALCUNNSVR3ErLzYl3pMzcdNswqNbbf0RBDF8ENwreKnJTV+RJntxDh1pCzjNbbUr244DjYDnAYqR8D7mM8Ib+tbjykCsmtASoRTNpknY9Ju0t4Y3DK0NBKPVpKazsFGkoEkshVoBJtzaLihEuaPy4lDJSGRFB9Z11VP3arA9rlzmiGpQ5GGR0Q0LqN+J0KR9iysLOPZvEqrDpqQPiuzoyMHhHgGSfCLvivhI0OrgGgGA9KvA1TD/87Qo/TstfpYlFIYmVQtQhuxiM5w+e7Am7WRAwzmLHeKvZrk+7lfCj2JguNg=","authorEmailMD5":"5a0f72bd57a0cd7441313cf75d048196","message":"No I do get what this post was about I am just not sure if this is all that of a perf issue and should be avoided because of that. I mean linq is slower that doing things in for loops but I won't stop using it . Do you know of some tests that show how much of a drop will you get under high or low load? From all the tests I run the perf drop was minor few milliseconds per 1000 requests I didn't do anything to fancy just simple calls with http get on the same machine so I might be way off. Creating a thread will have a big impact even in the UI example it will in fact run slower then a sync call, but if you have a multi core processor it will run in parallel so your UI won't be blocked and it gives user the appearance it runs faster. But when it comes to ASP.NET the new threads will all use the same thread pool so in most cases this will just reuse an existing thread and not create a new one. This dose have a perf impact but it's not as big as real thread creation. And I was just wondering is this a real issue. For example in a single thread javascript timer function was used to split an execution loop in other to let other operations use the processor. Even in c# parallel != thread for really intensive math operations that can be run in parallel you have Cuda and other graphic engines that will run much faster and they don't use threads.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"36b0a164-4433-3a2b-a0ed-efcded40dac0","date":"2017-09-27T16:31:57Z","timestamp":1506529917,"authorUserId":"disqus:filipcordas"},{"_id":"c360807d-30c4-3ddc-b986-bc9d48282819","authorName":"Filip Cordas","authorEmailEncrypted":"I9so1a8l4dAHl5tK8slDCcuOaC796rYVBvj+pUjvxridA0kNQbvRpszZYGew7CFF0gLv73/A51E5mZt5YG5sJ8Iy958rKH1+R4NJlxVj8XUdTO/32W3a0U5sEU+ZP1ao+LREaXE3i6+wevX+hPKV+WqRg9mCDcQ8ZJ1RswQy7drJanBXGTiHQPqpFEI83XlS2419gaeP4aZqkWpbdUnXIrYEh9pX5osGJXc6N/Z5WVXrYiugHetpFAKdUY2nFmRRaHJ9xIlwdx5S0YfM0E1a7+CglkjeBGNBEvoBNiBNQsFpi5gpoTCg0bPxR4TZZaAWI9nz/xx8MqgZ/Z+e380W4C65hBolEUAWf7aOkPam0JZCDUsPsrKzeRREY/cDOCv/JSsJTV4JhD0hs/ryiZt+tUvciIiAW1SRWfIIyRcoWRUW0C+NV0L055/JYihzBDNsd1+Do7/pyPSwGkhIt3gQAXWKePOX21wulSfzPqYj459id+9x8cO3ISVZ4d4bUX4AV298sGhk1iHAG+9cycdiIv/HH0bKsntPu/lWzL1KPWJzsP9HBFid6rDJ04avIQXzjjI9E03AinZkqmcjmHDkmp7MHnll+FXIf8GA4IJxuJJd2FwHxE0BckxH/iWLdj5DTbvag/Xqlwk7gwVvWXdPYjSogkZX9V0PTdCFt0TCWlo=","authorEmailMD5":"5a0f72bd57a0cd7441313cf75d048196","message":"I don't know I just don't see this as that big of a problem. This is not a 'fake' async method it's just as real as any other method it's not as optimized as it could be but I have doubts about how bad this will perform. For front end apps this can be a excellent solution to deal with how different platforms handle background work, that way you can reuse your ViewModels and have different implementation of the service for different platforms. For server side you could still use this if you don't care about micro optimization but if you are just copy pasting your UI code and think you won't have problems this is the least of your problems.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"50e2989c-bc75-34df-8416-429a0df8278b","date":"2017-09-27T23:07:27Z","timestamp":1506553647,"authorUserId":"disqus:filipcordas"},{"_id":"cb39059e-653f-3739-b7e6-12e7f145d530","authorName":"Stephen Cleary","authorEmailEncrypted":"SQVpfEaAXwc2r0Z82vSCQhi+W6retNuNNDU/9a1PVmPGKDthUy4+2A4eo/CJ0fdrawCJYcMSuhMrk+WWtM6xStbVUXDD/8Jo6smiMVqcZ2DrZ2OhCIN6SYYtP5eWuRSFKqwW6/pvhzLOc4YnsAMN6qhIsIrpu+SZ+foviGpuQ2FFBTzuX2P2ItdimudsgGiGHaadYtTgFWEvLFQKu+adZZFUS6zncyXQF+f1Jv19R3qVUQqZDuUHaB9La1YzkOrxcEogTNnKczUw1f0/y7V+xB9ehGK9OhejKPJ6txBSZ/IpH3VEDnjd9M+4Ivdol0T+Pu/F1SAlirlp/6IvnhFhaKpC073zC+w5AlUIEhXy74XFbm07PFdYKkyim9d80ViL0DWBQEnAWgg0lcIZF/k7CDDL96tmHQVULe0F6ZD6QCE98GA5D8et+wCkT/g3n9z0I/rgM1+B+j0ofFK8m5TePxb1xxDXVpPiAwo8hA80YscSckiy9fzMdXqj12XKi8rMwAqBNja/L3waS8ICaKRMXwAXhJYnzcdmDPpcZf+gvysIOtw+OrM7blPmxec24/KgTbIpDl/CPsUbY2xJfnjVsQ3Gk5cbvpqyBgaVkxG85TiFAzB4LuzxtHs/xVptc+08+7nxAnoShhCcs+/c6UK5kiZL24wfGVZSjoy0rzcXJEA=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Yes, I agree that it's OK for UI apps. And it may or may not be acceptable for ASP.NET apps.\r\n\r\nIn particular, Task.Run is OK (though I would argue not ideal) for abstracting platform implementations of operations that should be asynchronous. But that's not at all what this post is about; this post is about operations that are synchronous.\r\n\r\nThis post is dealing with the common problem where devs assume *everything* must be asynchronous. I'm searching a list for a string? Wrap it in Task.Run, and now it's an asynchronous search! I'm summing the values of an array? Wrap it in Task.Run, and now it's an asynchronous calculation!\r\n\r\nIn cases like these - where the operation is synchronous - wrapping the implementation in Task.Run and pretending it's asynchronous doesn't provide any benefit over the recommended solution of *calling* it via Task.Run.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"c360807d-30c4-3ddc-b986-bc9d48282819","date":"2017-09-28T13:42:32Z","timestamp":1506606152,"authorUserId":"disqus:stephen_cleary"},{"_id":"1fe8efba-1885-37cb-ae5f-312b77b4b092","authorName":"Stephen Cleary","authorEmailEncrypted":"II08PRDIjjoAU9TiHSzbdx5sdzFFMj6QFnqLG4rhq9yEfdJqfHoi4cLxTE0MRblaHN+GNf7ADYo8w1de33iBJ954tw7LK5dz+wXHSbFd+hll+aJDnuSfQu07xWxENWTDMiScyg3lZdZKLEX5taszDDCPKUimjZSsORUCPrgaUhJJlpk5ntPa06PKw9ITPNq3r1g0xlQuYJrCDw6yiTPfJjTydA6L/d7XcUi9HmxjFQ7lJfHL6T7pH9Q/3ktSDTzxDcJOCgMQ6KTbaekdNbj978sTIhJhdZ5XeK7QYt5fxjXXoJVoSM+s5m1V7j4Ln4RQzEzy7q3hcfCa3GhdK+Da9lg+Jm5ZRfzYfiLGqQUS5c1AoH73VDi9KaE5rkGOqsc61dF8J18EeE6/SnbXTtavMaA0jIp+WiQ9Peay+EwaF5dQWPHi4z5AtH6vSvEQ+uJ/0uzvfK8EJPO86J2efKJ9FTpAkxJoAE5Uv+WQrUHW7Ot3s09NnYkXMZRlb6VHTc7BOFcIZP8oubsDybGCVewcKsMg5RioS+xTX2DLWUEtSRr49cIEwAPB5T/Yk5Txap0lkblBCmyX2Q4n+8MvQJJlwTqyWRo2n6vD0fUARFWTqVsEK4qBbGbKqmLjnWg7mXneGdSCXLG6ZWBRLGZY/imj6r9DaeXtJTnHfNrYB3nh5fA=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Yes, it's still a bad practice.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"3b35d465-3ed0-39d4-8551-37a8342fc13e","date":"2017-11-01T18:40:02Z","timestamp":1509561602,"authorUserId":"disqus:stephen_cleary"},{"_id":"3b35d465-3ed0-39d4-8551-37a8342fc13e","authorName":"Zdeno","authorEmailEncrypted":"fjT/Mv0wOSXEULIItPKP1vI9ZLV20ArNaFBkBQQkle5X3YQh0MCeccw6nEzS0VfFlhg8PBbP1lB6iQQIt0boVvhcrz5pLDw0ISRIsaoZvhcu2vzJqiM1/E9wv1dbcBNr4R8VlAmwDCsXA7eSziELtdpKU5hYVGNRKvEUT/eLV5B2+qJ4ZnOSzaYedz+vngAj0IJ4va6D0xULu5aYbuu9VEXQ9cUKEhDhYVM9s9YhPhjfZnRjR5/MkjI9d+pttTfSX4j9tJRUF9GyIhXkaZzZ6OcnMJWvCCWVTe3QsFDx2ce7dEi2a623mRgTpgT2g2ZexfawVLkx/XrdIaJJgRtm2A3A4/8a+Y2yPdhhwQhA4l9z/9Yr7nQcTlFIK2236XbwlpXReKOBOJ7AY6xB9bP32HyGhJxjs9G/xx7mbXMF5qOF1E18BcGvDp5lek1u+E3VntUY4PnUadAJ3HcXQ5TznjHS6K332QhRcQHlccGBWY8MaCf9FPcXv+Y8NORjtcJojgIfjSPmbbdI95Mk3llf4mLkqgwFQenJZr526aum3yXBg1f3nDoI4fLTpHtuJX3wm4OsClr2gfgZn7HGBlhK39/AEs1kDg6/IbAG5r8zwENh4rSDq5nwnhPNcgihPinCLa9a3YqaRqhyIdAah2fARGGIIlHu7pNS/EJTNPne1+Y=","authorEmailMD5":"dc0ec3e4dafd2207137ebe76d765b8b2","message":"Hi Stephen, Is it still \"Bad Practice\" to use Task.Run in Asp.Net Core 2 scenarios? Because Asp.Net engine doesn't know about \"borrowed\" thread? Thanks.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2017-11-01T08:09:03Z","timestamp":1509523743,"authorUserId":""},{"_id":"ce2da673-579d-3b11-8611-14ec537f720f","authorName":"Denis Malyshev","authorEmailEncrypted":"blqF8Xy5D12DVBd3NdbVJ37DfzbRN5WbC6ChAbNCoWUNj4fa6FE/E5d4Q4WpJAXlcouAytrgab4TCX7X3m0VkMBa4gGM6EJoPsZTTnNbzjZ7bqNrQw1Y1s4qb/8WkPb0xteKBMS1mx7uBHU597V7tOV1e5nr1Hmp0Vy8sNkWgazlS/2nUA+22UBp6k02oM6gPgvqcbXXyva2SBNXovTgHeDwuPA5z8txqgx2OuPDICdnAFGBW8Mg69JrwhCO7NwBbNZ3mRdUj9ZPW8P1ji5gIwv+SGheuZe0yTuUbr4LwEIFtS5jtNjGRKhctowLE07541lTCxX3I4qjMdb08cEiPmvVyPMPispaU3SKuxFnOiS4n810EagDGEUB5MZgWpTkibtvyWfijgIsuiS8Jn+t4+6a1SAvOYYef6UTFvhwxyVU2UFO0RKRW9gzib9iLB9ChNt6foFBC59q7atf52jnszpwpK4TrVsZecZwa6gp1Exs7+R5ipDaJg92hJ0a9wqd/5r9XVXntM6nLazBBy/Y9NIVOyfBCmzY33g9a8z3ruMqVx0FGkvc0ouEttfCpR1rvBjj6JAlOsRzW5IOb4rQEmN5cl+D3E0XpMShlW5Y42B8fCISLCBZab2DxvUuaScf7arzR0/TBsvmOr/r5fNE1laUcTeCfPP002Ul2AiMT2c=","authorEmailMD5":"6a436c69165ddada62380ce86e81007f","message":"Hi Stephen, thank you for a great article.\r\n\r\nYou wrote:  \r\n> More to the point, this means that ASP.NET applications should avoid Task.Run.\r\n\r\nI have a question though. How else can I make File.Exists call asynchronous in ASP.NET app if not with Task.Run?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2017-11-23T12:10:58Z","timestamp":1511439058,"authorUserId":"disqus:disqus_P2wv3ihRJI"},{"_id":"ee950e0e-c3fa-3fbd-b506-aa75c40354d6","authorName":"Stephen Cleary","authorEmailEncrypted":"bi+Yx0+Vhb3Aeu8mbqRZhJKsggLnGnbbUMza+brzEEpdUsqehoncbpgCdag0PbD1kEVlH9t+Cde1v3OfjddAvFoTdfeFVKsXQouZH3Yl5nVrXkESveRch6PeilwnTu/NewKns+AfgpNHF8GOMJ0GVS/kmDx1FrC0zvtAJ35kuKu4G4X2f0ahqy6h4aJuew/4NLZw6rC8Z5vtJr5m0GayR8idRiYqtEbAh1RSNLSLZlNRH4KCg9dfUOuJDI7bPKjcEl13LM5OFOawt9zQtRBwnBQQ8HV+K4Ypy6icNnewxdLSOywzed5gu9B5idHPbZQEwPUbslV844Dg7aUrQZJIiW6SY5BmVN1N8nu3iPk4djicp10FHxGX5/zqfWCMV+Bcp1SuMSXglSxSeJ+Vf0Wb/GFKuL6ifkyNce2SKtHSuPjE39uTf7bOjd61pwJXHFCUNwvUV7bSqwckayyQnGk6R8s3WVlsKtYGpnY7d2Dqr7JQCKzTIkpVdKGhcbZp68wyyO+4SSRL63c7XThYLt8mKOA0cglHT4g0Rh6X7Q2m2mY6jbimLnhZk3JgbrGMBRtI1IhoOoQxp2aU0981DgX7oir2yV3SsFDkpa97nJ+4JQc5sRGqmz6+TnyVpwqHErc4PVlp27vViCDTBEzN5afA81VgIVZRzDT70hfLRPud3VU=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"File.Exists is an interesting case. It's a method that should be asynchronous, but it's not. So you just have to call it synchronously. Calling it with Task.Run will not give you any benefit.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"ce2da673-579d-3b11-8611-14ec537f720f","date":"2017-11-28T13:33:45Z","timestamp":1511876025,"authorUserId":"disqus:stephen_cleary"},{"_id":"0893ef3b-1f51-38ca-9213-11e9c3dc4f9e","authorName":"Mark Wood","authorEmailEncrypted":"Hzm+WtetM9ERlS/gNWluI70CypHIz1Y/5LuToC9zkyF4zSRFrYGEIscPhRVt14IvYWGx5GfEt31hxYdhHYmRIcoKdZa7fWV0okNRBL+Nw2ZNtQE+RGKhO8Qt/8nSCuWGlVNK6z+D6LAkmQs9jZuAVeL5uN1vtb6YHAw71iQbchBnQGDFXHG28/LaC1Xxexp4T54w6F05iEttHiez49Wy9aJj0mgrrreVAvip0lsS37In+B7fbKvBrJuTl9ROLcSESsHcQL3RhpoM/vG532lxWCIcfmXkHpPLtDoqJO5/lqv6xS+DkqxcCFY5rxJssAB15xmOhNsMiPm1A2R9UCGmnWwYWqPaAN5BlZp+Od0vUpWql2dJn6Y1gsQZtJE3fWtuRdNMfaHI0f9lAJ7xI+sAs5/tLCFrTraDgrVk7molsdenKofPsn45cJrjoVJ1RMwiZCi0tKZQDkGLHaosQGOnfciMADKlcXJKKDBzQK6oWEelHYKfdx33aHS3NnGhXd/FEuyX3a0oFbbeLx1TwTZxTXmJDd3snZvDLwNILWg1dOI+pd+/VbYAK0/LJHUZMd8cJHSwl8/DtIYmCaYH9RCwDN9hkmL56A+NsD2QRfJgzGtzdlAev0g2yUNJRoDGrOcmn9j31M+Kfe9KvCfjazO+eLti+vxGUWVkjvRe08MUWgo=","authorEmailMD5":"35c619f3abd4883d7c123fb584feea98","message":"I have a web service that, in order to respond to a request, needs to retrieve the contents of multiple files (Azure blobs, to be precise). Since I'd like to reduce request latency, retrieving the objects in parallel would be desirable. Having the entry point make a bounded number of multiple Task.Run calls to retrieve each object seems like the most straightforward approach, but based on your comments about avoiding Task.Run in server methods and for non CPU-bound activities, I am wondering if there is a downside to this approach I'm not aware of.\r\n\r\nThe retrieval of each object should be relatively short, well less than the couple of seconds you speak of, so perhaps it should have minimal impact on the threadpool heuristics?\r\n\r\nIn my limited testing, the parallelism works as expected, improving performance with no observable ill-effects, but I have not put this into a production environment.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2018-01-03T17:58:33Z","timestamp":1515002313,"authorUserId":"disqus:disqus_djXku1fbK8"},{"_id":"20831182-ea6a-3e18-84c3-04b75389ee4b","authorName":"Mark Wood","authorEmailEncrypted":"Lz7hUf3l+Ovc15VilDvh9R/8FR+lLqTcQUqPIjLpgtKsfTo4taHaR75Q+gUE/ig1KbOvWpT4o/ITAaAlhuEgziBFfReHQmG5M66QbHYlWbb9TS5y+5Nq40ypl7Wa2YnneryyzBLBLAWpVo8Y+sf9S7g7T4hDxBXEWSsoxe2ONlHfBbh6o6q7t8yUHRoUGZHCRfD/aB+/CsWCAlWaNPByWGClT9l5ROC6Me1Go/sVebA34hOjpdBZ3tiu9eySgze6E9eRi63RAvQZwG+cG5kgR9FYpHrglUa8X63qmWTmfsN5wj76OWG5vPu3MgHE4JCMI6QOLhB+N7ZLN/B0iHP4nHK7rhWHDt6WyLWXkVP9NC1BFFazTwqH/XZU3ykSXGTud0WeX1TGYZhnNdbFAgeitLceCkWRaa142JlFJbwnBAjxVpOjjUhYD67sQ9JYmc52heRIz2+HN4i7nnVMOiTT5xcvkQc/pQ6q810KCuQWC4K58T+1zrCEjcJZtRlzsbhluriIVVhoFoYBSod5zTZYD8Idgo709J+vslKq0L6EzhfMiThUBZFDF3unS/YoNBWElqNwcSXx8ZMdP1uFcBuZMwhYYmcxTF/FaN0yVihLpkE5yZ4nVnuCqxkFCE7J9iAf9njki1guNHoOc8UD6kI27E9A4/aA5PKE8YW/h9ATD1o=","authorEmailMD5":"35c619f3abd4883d7c123fb584feea98","message":"Thanks for the response; it's greatly appreciated, and that is indeed a very simple change.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"fff513ab-5516-35c2-974e-9e56483afa47","date":"2018-01-03T19:38:41Z","timestamp":1515008321,"authorUserId":"disqus:disqus_djXku1fbK8"},{"_id":"b00b5b8a-4933-3e39-a909-60240440b631","authorName":"FCin","authorEmailEncrypted":"GXghIgcnuT68CfOrBOZ2jIuSy8L0eFnKksDOg3gqCo3Ab85Sym5YY06ujEiNTkucUQEt0HfDFmbEMUDF79aXBkEKJzjUPLzitaDGOah5/rokIhhsoPH6XUluSwa4LMw8k+wBGJg1BjHpP9shx+EolqWnadRB5xSTzYPRFXpElS88RlW/UYQb+XF7BIkQK+9BZzB9p+Vm2JN/EHTmB04eLk4lakGPsKHIZWFud6dOhgpc9Ao4vzMsWMi1Hmxy4WEaYAGvfKmYVudSxVzSnOX5RDF2W2nEL1KOW8p6/9bsTX59yTSlQltvQGcrIpqfVCAdhf3x/NV2JJG3jMxaTxxjmHHwuId8F1Mgt1oe1r5LSdzCJUZxSYobnW9AZqCyz1KAjFmdzm+/VnaVulRV0pFkSNHOEQcpLaD3ZyDPkNnu2Ig4oMBp96qeIbfPDYwl2Lz11R+0Xhzw3FU3PjxdtWq/dRs03lO5eNzPZaxjEWkYm8pYgPIpTrPCq6jsui13KO/2LL+cyUfaaPeG82Z9uCKKxujrd3OBR9+zHP7OWJbGXAhuWH5HOzQaqusCNgd2cA4LjxV4WCAzskx24roDVSWGa5mgZh4tY+ygViwAk9UGjkZQBZCSO4zmCu34NmglBwY0DbbeT0MW/vcJcj4zNt0ph36zjYI8txqq629KnEdiXJw=","authorEmailMD5":"e56519a197bbc3bdcdc2a72523dcfe60","message":"Hi, I'm a little bit confused by the second and the last piece of code. They are almost identical, except in the last example the caller is responsible for running the task asynchronous. So how come that with the first approach you lose a thread and in the last one you dont?  \r\n In the 4th piece of code you wrote \"Task.Run starts a task on the thread pool to do the calculations. The ASP.NET thread pool has to deal with (unexpectedly) losing one of its threads for the duration of this request.\". But the last example also uses Task.Run so how come it doesn't unexpectedly take a thread from the thread pool?","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2018-01-03T20:24:06Z","timestamp":1515011046,"authorUserId":"disqus:disqus_Tb8tUtqeBY"},{"_id":"fff513ab-5516-35c2-974e-9e56483afa47","authorName":"Stephen Cleary","authorEmailEncrypted":"nVoOJusOAembiW8XlRgL9RvWsl4tN74YLb1B8g12JhWNbZUifVL3eNdtKgyhX126lL2/qnyqyL9KlWpBkm5aS3vYb1wWuACnyjMSvBafZ2CvM7dE1+6P3xKjugMclJqPfwMNDZFYxorH+B227br2aCt/WfcAKw1TKbWGfYDz0auc2VgRmfRnETp1++kWcSrm49EHFUVD4HD4LmG+8DRTL9U3qX3ZMrqtuo5hmbY4kRGlaU6BNsAgpE4Jscbu1X/KITWiBFx/bjdE5l6XedGrgy6fd5MCo/GuQO8EZFr/iKj3mOgLAzr7oXn8RZnBnXEmX2wusTjdSFpeQ2xg9nP/TlBnoNpbxCK3urEi7hXi1sgNWOzgK68xTUHYWKcjLdCN1/l6oLi9iLbbpH6UHhGjHeWqMqQqdChMiveAG9V8wAwGNJFmaIA3G1C8bY5s/Vx8TcPqe8ixcHHmMR4XbFk/Pe61zY7TenAvZ6nTxWOIdjHVOpiP0M/IqwQsLJbn79N3iy2SDwbyfkuDEO+DNjCflnwdlNmZPq4/rqGe9PneD/zujro6QOmr+cDz7RYuf8y7H2ufGWsTL8Auw6VrM5P+MOz4Sx7GYgK2d5xem/gUHT4Gt71bDFh8TE4M89qqLRH96343KUnJt8CXK7x2lvRLntVVT6eeK6PfX9erhFXkvp8=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"The problem with using multiple threads - even for a few seconds - is that those threads aren't available to serve other requests. Since your operation is I/O bound (reading Azure blobs), it should be straightforward to start each download (getting a task instance for each download from the Azure client API), and then await Task.WhenAll on those tasks. This will give you a fully asynchronous approach.\r\n\r\nThe asynchronous approach will reduce your latency for that request, while also not reducing the responsiveness and scalability of your server as a whole.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"0893ef3b-1f51-38ca-9213-11e9c3dc4f9e","date":"2018-01-03T18:47:00Z","timestamp":1515005220,"authorUserId":"disqus:stephen_cleary"},{"_id":"985b1f3f-eba6-38cb-9d96-3f9792c0405a","authorName":"Stephen Cleary","authorEmailEncrypted":"pBTObxPOeJQJNzcodHogvWuAAHXMrtRWC5/fN1buDrW/Xikn1bpalOiNf8MX05f7FZoJXw0gNOOdAounb0+y+UjGNvL3O3iBjRfTPqzwsRBb6L4tgw+zjtJvMksJypiUCrfCiz+koqGYroD0Lguunr25nlew47nJADrph/tQtXv/XULehLRR71tnVP3DcwwmPH/DGfMvJ06qqLBJ7wsZsIaqTsTozPvgVDXRcxZBS8VjgIpCiIH1q60/YOmS8G8RWoZj55wIT+03Oy5HdC+DzNGS0b5THMWJdo7Sc1a4FbgmktsYphitw2N6HKj8/6dxNvuiPIJz+omIQ/vawChJR/bfJLe9RJBXZNspDMHcGANdTWYS6dF4hRDHu0BH9/b0ea9xZOfbNbOCnL16tZEXWBdxBsEMAp24Sm1fzZY2whNtw+K/+LaeduF7Q6sg3s9i9wcZLz7K1qBw7HxMtNTh3mnnTbydrTYExy1Bd07NU7wariNdr5j4SGVvzf3M/iuURZ6Fm9D3NLIk+kbWeV/MbvEKv9s/Wnk8+OzS/ibVN+N2FR3PQ8kznSFXep3y20Pb39og0skk3Uj2HSK9C7AL6HN+czBoPL5SxGZcXJp7BBJEBAgcV890YVaq1x3fCqI+h1m8ez4AzaRIz7HJxb9DI2Q+Y4sSNJ3HfrMX4zlUi2o=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"In the last example, the only caller shown is the UI caller. Only the UI should use Task.Run. The ASP.NET caller would look like this:\r\n\r\npublic class MandelbrotController: Controller  \r\n{  \r\n public ActionResult Index()  \r\n {  \r\n var result = myService.CalculateMandelbrot();  \r\n return View(result);  \r\n }  \r\n}","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"b00b5b8a-4933-3e39-a909-60240440b631","date":"2018-01-04T01:58:10Z","timestamp":1515031090,"authorUserId":"disqus:stephen_cleary"},{"_id":"5bd16eb2-12b7-3830-b417-223ea2737495","authorName":"swguy","authorEmailEncrypted":"FT1ymDYtD0m67NG30WEybUkLqkIF7lKY//EiWpleXdML3TF8gGZueielwWDgupICtJHaKYcWOYf8vHbci1L8E88Ih08S6hmhSldh5Ai69wnaeApzQmz//xIaoFwpGm9yS8+8fE+1ew0+ShV68UkDZzIGZw9iu+RCgZWIG7fs+xkdadvWwJnL/AQhpUUHTjc4u+7HDX/1GskxewbrqR2IgFM7zRrhbca5f1HtBSJt2ihuKaWE/DyANNWAkfg+ymKwIqV6gj+8WGWkyqeLUmCA53gKYgfvSPylOv7/mE1eNO3wUgumhoh7Dskkurd9S+VHctlBCUOiq5ibzkvzSUW0BX7ub1I7hwWgCyTJUE9FfqEOfy5WoHfeatl+ydxDNOt5ENhc4B+2lS2tJMV25JpuPWnhAExCcsqiwFVa6JhNq8sdy6on+cYz+ZaCo9L/Nn4NfrmBlZSl2y85EGU/AQN9nb3411TAAdaeVVn0V8erwPOecr0TDr4qZxToxH7vrUxCryClrthA2hhrKAmA6nz5exKTyZk/oMMVckgJiolwwfGzrUVD6ew8iBtHXRxRVEFnAkpb3dmdN7BHY1ODk7oFjKKzkDUmZ/iyz5wgR5vdRG21bDgSXAF3EWIQ1ieqJBJeKGijhVaaYylpoB5Rre4zjaWl8lo+N4MPMwL1KBtfv2w=","authorEmailMD5":"dff31c2dbf470bf2bb52b4475a55bbb6","message":"Hi Stephen - Thanks for supporting community with your work on async\\await. Your right way seems to be in contradiction with this - [http://www.ben-morris.com/w...](http://www.ben-morris.com/why-you-shouldnt-create-asynchronous-wrappers-with-task-run/ \"http://www.ben-morris.com/why-you-shouldnt-create-asynchronous-wrappers-with-task-run/\") Please take a look","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2018-01-12T01:05:02Z","timestamp":1515719102,"authorUserId":"disqus:disqus_AotfLQLpFq"},{"_id":"9f28d167-7db6-3863-b01d-91b952052bd9","authorName":"Stephen Cleary","authorEmailEncrypted":"RSlyXMottm30LxTn4XhKWIfs+eX2TKyZe4Z4qS86DKOibefVL23NkPyqcMS0EdW/WfRvLLQG8nMiVONwwbG7hgz9b0Pre8rgYWSWaeL87tX4JqxH8HBQ9c5CThOtyfEYwZ2e7x/0rdf+ajg+cCjpbKK/Xtaw+8jTtvdEcIC4CM7G8evH7ThZPa6RYk9iqkPnim6VwcQsU7BztbZq5LHqcKp3CoCvGHboa+ZBKQD/G+EucjVKU7Mcj2L9IzmOfJ68mfmd7dYOiR1E2fMEEap7i80fc0QzensmNbtHyyd7QLfhor1dvE4NOGMDtkiOMkjiVc2Il+UlVal36f0oMf8HNWCvNXv8RfhWYVLYJRK17jBJgBrGnG3bpua/QHfoEIsf5KWcCXpf6JzEdEW6R3qzF4AucvzPyeCcZVR7z2XhsnmfryaKH1mE4UKlUzkCtqOPPbJ894xzsydDKfFbwivVYmvLKxoOA9o6GicmsrJ/5zcFYj4BTM7Di1gUVkkPS46u60fzSxJmiil04CV4WWLLSk/lFEHQ1OXZahIa1eJOWnlWwyxKPm2tlb4hFaZ3MKw3dogeF7+rJ3pVVgABAQtALQQWRuO5cPG66kq8cC7lAee+YtUMJRZWjBvvDsN6tmI6WP/k9RfFukNz1JiB8f/rGBaPpuZOTf97+Q0GDi3Qi0c=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"No; we're saying the same thing: Task.Run should not be used in the implementation; only by the calling code (if necessary).","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"5bd16eb2-12b7-3830-b417-223ea2737495","date":"2018-01-12T14:10:50Z","timestamp":1515766250,"authorUserId":"disqus:stephen_cleary"},{"_id":"43735249-20f6-3b4d-96ba-f43cf5f40c31","authorName":"Emil","authorEmailEncrypted":"XohWcuIocK759B+KQL+j/uDkkLHP+XjnOlHMDosRbZYfnZwBO7pduKPbLojJzAhgIawCKvgjP4V7SBRS7qgBZc32YSZqQo8dFaYhpr7jH5W8Ys72NcrYZ7amjw7I93BmQGPkp7IuKIonVBl44k/m/kjSNOddxATDUxLPi/FsAzD1+prpgj5McHD10723TNdPgcinWfepajU0jGzg5gzDZL8ZfH7VsKd++NYz/FYGoHNvIYPlPOSybzS9wlidE24Eu3DKSY8KtZEaKk2OzGeBqR+/AjrXvNLD2OMFxeP+r0KiBqY4ryL+zMQqhHUz6BbV++kH+i51UvO4k6TzRTc6YC7gM5imJ2T4baE7zy/y5EAtyx+ZMOXYK2vFpA0HrrGwaRRczu5CEIvOtctXsn6netINY1KnnBTLmnArEkK3QKKlX9d075Dd8b0u8cZeLExSd338OucYyZ7JkVpP9nw/IQVPJyomGOwqa3TMr/1CtI+G56TOYJMXDGX461Wf6izppj0UOIP68NVzcZPtRJw51R32bj3MVZTk2htNydtDf8n7W0nm+Hh287HFECQaLCGAQrSYnBWQ8RRq1CqjRx4Mw53SKcC31U6VXE4p7gDGSfpjjCojGM7yv2+PFHDz4KqNdiJoHD23RgzbeuxePpIUrrYPNmrAiXjDLPcQRHUogcY=","authorEmailMD5":"0da2f1f5c2e83c6a2fd2291f28651175","message":"I'm also confused here. In the second example it would appear (to me at least) that you are still on the UI thread when you hit this line: return Task.Run(() =>","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"985b1f3f-eba6-38cb-9d96-3f9792c0405a","date":"2018-02-25T01:44:43Z","timestamp":1519523083,"authorUserId":"disqus:disqus_C3jMJB6Ih3"},{"_id":"6b926083-32b8-3840-9980-343e1bc9f07b","authorName":"Stephen Cleary","authorEmailEncrypted":"Ukpft16yh655qylSu9+PKXJno/rHNwdYf8jQ3EtcYpE7PKc2WNLeW0ekPB8pWcCqYwEYt0h4SnHjJNT8sbfErj8BYKCc+Nl+nznSijk/GlneLjmktXt1ZlXQ4rGlyIyj5F9CYXF2WjnqMyD7/t60BA6oegdytYHrVTeF4qP7yPg1otQG8wnO9F58bQmsei5h/5dwgqA6waQ9pB39jF6iZug0GPz0qr00ybD4SxiBZKWrCcpMY8BTB0JCvvmPjyDzBi8KmmFS6ScL9COnk7IflnNJgFMlCfPwlcfgpuMc99LTIW8wNCz1blZHcfDBmeaWsd3EjBvY5GY8TpJmLEoZOgyWnEASdLJ/wP6qzhx9t7d5jRkwkPjtj043JV/vJOie11HNKqfJ10kSmkIh0ELukcsVwwbFagosCYxwXMCtN7sHdFtSevMPFCnULI7skKchddFqbo8OG/z1pUyh99VhYpx+cUQ+KA5SVKh0sFaZ5ehOMX3fa21I0o1n+1dTqrV/xAoLXgySkNOIuTeuaFoOVa63GOYbjfw+2RizarIsoe5kSS0jSZDtSKYbFDuCujbVUGLDcFNgrvxCCZl1ddfKqnNrDR/I+tJNF8n2r4KC3CZ4Ia9k3N3TQ0hwq7Dy8f/VWsU7SGC+C2nqbA7qVVI/8xcHel4hJZIDLdwr+RqqLmY=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"The `return` is on the UI thread. The code inside of `Task.Run` is run on a thread pool thread.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"43735249-20f6-3b4d-96ba-f43cf5f40c31","date":"2018-02-25T17:51:18Z","timestamp":1519581078,"authorUserId":"disqus:stephen_cleary"},{"_id":"af71f6cd-2902-3f9f-96da-38d126786be0","authorName":"Joshua Austin","authorEmailEncrypted":"GsjgIy2Itqa97f/JBnywaQ1XUH9io2WXPTXimebuOylFljWOCMuBJKO+/tEP7FLt2LO1/lBLKpmWcpuFdnd4dfn8qCjCvLChr2F1OK2sDz4FoYBF/7P9yzyII3JIbtJx4kOuyshzpAVmC2uhFuUDvUzcji19yy5yznP9YUCLhWub0smrZ0HX+pMErOBX1uHZkTY9SXxSHxerYFEluDC/8zxqx6c00TdT3ZTJ6sz3aVx0CtH7oN4THjc6Gj75kZTugYnk3n2PexMdX7mYAUT+JUbVRIrP+cMCrW3iT2uER4wLB/F24iL/FMBkI3CBG322XnDJ/GCs+wEOugIRgf/oxeUxtmh2+4uGj2y6wMfRHFcJzkv2x6mXkwMRrqYkLhpgvGphm24APRG85ZDMFKBfmsKJWxcKumpbEAAEAP1zxqPBDFQGN+jylrXt1jRFDM7kixJP7gFBIM/rco3TgdS1lsrvmBaSAGGRY/VG6QwtfMeJ3rOkYS/Z1hiWO4LIS55Ll+V6CXp3HhBDCdlz3jHwZqdCHkx7/9NH12xNjgtDHnADWwpT83Dm91ZKgidrFIDcJnZjgPhSKDs6TL2yiPPli7v7qn4ZABsCcQK1pieogDVDejDGll91iMyBB9QtiBD3KaYVzzhuL52k2rdxL2SFn1g86mge9lp9CIQk8tB518A=","authorEmailMD5":"cd8f6f5544b9bb3faca4580aac71ed8b","message":"I am not entirely clear on this. It seems to me that, whether it is an IO operation or a CPU bound operation, that a thread will have to be spawned at some point. Whether that happens internally as part of SaveChangesAsync in entity framework, or as a result of me calling Task.Run() somewhere doesn't at face value seem to me like it would change how [ASP.net](http://ASP.net \"ASP.net\") deals with the thread pool. Either way it seems like ASP.NET would have to deal with this \"The ASP.NET thread pool has to deal with (unexpectedly) losing one of its threads for the duration of this request.\" scenario.\r\n\r\nIt seems like it would be good practice to abstract away the call to Task.Run() as in your \"Using Task.Run for Asynchronous Wrappers\" example. Similar to how there is a SaveChanges and a SaveChangesAsync, if you don't want to use asynchronous then don't call the asynchronous method.\r\n\r\nIf I am wrong, then I have a fundamental misunderstanding somewhere about how this all works and would appreciate some clarification.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2018-04-25T19:16:38Z","timestamp":1524683798,"authorUserId":"disqus:disqus_NNQAdRCoBK"},{"_id":"cc37b857-b392-3a86-b1be-684d3d87202b","authorName":"Joshua Austin","authorEmailEncrypted":"NjT/cu7W8DAsXN9KJLEOtSAHSB4B2pkVwCeCxD5tNizLBjvM+uqNiySE9h2oG8QwjoCIOiDKdV9pFHUhg77UVJk1MuZS7ybB1WmF+KmK/OEMVhhKIlqZAV2wc7FAdBVYvqHxH7WRE451TmiWXewBURUsx6/5J0TJjB1yl3HQaYFB4uh2xM2zeGuUmaM0SOaZzdJFDrbDJkGbtyuevk1LJPRqrTD8k47dd2Rnex1extNoPBUdLEZcBKqEMhdrIZup8a0kLjn6MnePkThn2cSMKV0aNZH+WPuZKowV5kSfa+fPsJn8+/wtxUI+5wQb15RW3VqvLukoaXI5rJczLcbdHZbcFUXbPXKhKVkyJU5wQz6e0ckB+/ZDihk5tWRGcFTBR/3WAMKG8rmqwQe+16O+wtnRVxEWO6uFetfEtLUNikdceTGZrdp35Vlkgi47xAiSBHYxRDY21KtcufT1LbdgSEzVh0QA5D/WT8u7oFO4482W+wpdUOuJUXdZuSN2vMbHMc4U33/0GcsKeusDqrKwRWDSu0nbnzvjfNYAz5Cbb34NFigtacpjxXuJ2zr+hvc4vV37ZAXK74mguFS20mm0h7xge4Lkn1QNo4kp9mXpstJbXiN3cZJYq8qopJeWIxUDFcfvnu3JkECJZSAoqOazskFQ5Rkxs/7wiCnInBzXusw=","authorEmailMD5":"cd8f6f5544b9bb3faca4580aac71ed8b","message":"Ok, that makes sense. So, given that with IO operations there is no thread what I think you are saying is basically that as an API developer I don't know what another developer's requirements are down stream to make the call to run it asynchronously; kind of like how one avoids try/catch in class libraries unless there is some specific behavior/reason you need to catch - you leave it to the top layer to handle/log, etc.\r\n\r\nAlso what I gather is that there is no real benefit (in fact it could be detrimental) to doing a single CPU bound thread since at very best, the request will have to wait for it anyway (making it in effect no different than not having a thread at all). If there were multiple independent CPU heavy tasks you are saying to leave it up to that application developer in the UI layer to make the call to do a Task.Run as needed.\r\n\r\nSo, one case I have been running into doing development with Xamarin is that I often need to call async methods on a method that doesnt really allow for it. For example, a method called Device.StartTimer springs to mind.\r\n\r\nI make a call like:  \r\nDevice.StartTimer(new TimeSpan(0,0,5), MyMethod); // Run MyMethod every 5 seconds\r\n\r\n// Returns true to queue timer again, false to cancel timer.  \r\n// Because of the bool return value expected, I cant make this method async.  \r\nprivate bool MyMethod() {  \r\n Thread.Run(async () => {  \r\n await DoDatabaseOperationAsync();  \r\n Device.StartTimer(new TimeSpan(0,0,5), MyMethod);  \r\n });\r\n\r\n return false;  \r\n}\r\n\r\nWould you say the Thread.Run is valid here? If not, what would you suggest to be able to make the call to DoDatabaseOperationAsync? The only other thing that comes to mind is calling \".Wait()\" on the task. It seems like that would be a much worse tradeoff.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"de829fc5-546d-3262-aa9c-644f2911a51e","date":"2018-04-26T14:56:34Z","timestamp":1524754594,"authorUserId":"disqus:disqus_NNQAdRCoBK"},{"_id":"de829fc5-546d-3262-aa9c-644f2911a51e","authorName":"Stephen Cleary","authorEmailEncrypted":"ePLMueGAzTu1XCsBW/P+4pX0wfytqd6SiYQ5wulRxJ76IFEo+YO/PK5CGEermM/rWZN7sb1RU6NVGO2DQb0K+wjMtfk95rseNmljda784yG+tUtgsoUQCXl+QSPZVTljmLgAChxwCP9iHdMJoXXjJvWt4mjg4auZ+YfE5XHfzyiQYYM3OPvfGRuAwY7Vli3oqKVxBTucMIJEMDcC95S3fNvRO0OO68lEYxR1Rxc/rA6xduwGDfLJ8xyBwI9qI/9DB53jz9W3Sx7SEEOLc6HBTAd3TKneh6hFqGQTqnghnntJvh8SMW2HZC/dV7AQk4knkY2D7z1F6xau6C5aIl3woUJsJZfUH7dG1EgUMww33BPYasSP0pEnLqoHaGe+IqgOx2i89w/Skz2KUW9xvdkkBKpCwz5UICqLjqKDgQ1zOfzHHx+HxAxdLn03wsJMqeMWkYVKzhwZ3MgdUjaaQJh5lY4+Jvi2YtVBR+TLn41Tos2bolC0kEdlVyPuLYJp3Vp0iRpvgpwt+WIqKeYS3fRZXaV9CYGZrTQ7EPMYx7IG85/wWO2mVY98DVh+/pjJ3VMOjYqTODRRpighrz10kTse7UKbXEdKos2xgBxc7g2cMc38yLVrte0o8X/aal4tKxc1PZPFuHr3t/Zq3M/IX4+S8AFJiJJcTEdQc/i/d3wi8hc=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Yes. The key aspect of truly-asynchronous APIs is that there is no thread: [https://blog.stephencleary....](https://blog.stephencleary.com/2013/11/there-is-no-thread.html \"https://blog.stephencleary.com/2013/11/there-is-no-thread.html\")\r\n\r\nThink of it this way: EF's SaveChangesAsync builds your SQL and sends it out to the database server. It then has to wait for a response from the db server. What's the point in blocking a thread just to wait for a response on the network? So there's no thread spun up just to do that - that would be silly. Instead, it registers a handler: \"when the response comes in, call this method.\" You can think of async/await as being event-driven, because it is. (At least, when dealing with I/O operations).","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"af71f6cd-2902-3f9f-96da-38d126786be0","date":"2018-04-26T02:29:01Z","timestamp":1524709741,"authorUserId":"disqus:stephen_cleary"},{"_id":"39bf0e97-815b-3ef8-a6e7-383f368d223d","authorName":"Joshua Austin","authorEmailEncrypted":"VxfwZC7jA4jaLQiG95kQ/bmyT7kxUaAFFTbl4DvNRHnN0MYVtJcKGb25i5qTtaj35SZa0yGQWYAO1fhV0oCu1sa7AYKWw+NJlZLeV0tGXU4tLueOQIiD5GwWdT4w2m2wEGyoibcVcESTzh03yuaK/DEK8Z0rPeIxYusJULDFAyg2oM5zRFrAwUswlmbsPNjQeuxHZZFTiF9ZsQDOwaZsUQ6t3JCHtx6WL4tOWIHPl2Xx09whq+GTNFCyGsKXUgjUygnQ43wPylEfBvNLkOo/FXxVb78Fhs4ScTKYEdydWQC3in7UNe5LyO0XKcU2xIi+2vK+1o4QcnIVhXzYHotE8aOQN6PIHNdJ73sBhfcoyC4gNZxXjV2QXSAgd7BgR8o5UQym1VkKmGRnf8l7UevKQ7nMgqSS2giK7clvfT/rjrpSsDzh8nu2n1UU1rjZWB7mNOFUgLLA4OrXa73Wnh+arpIHR1tGlWe6Z7HKXiMfD9qENHgDAlCAJU7s9G9BsgXap6FMgdmthnaBR2TBrgtgRYn+jKp9pUp4a4xjmDoco7uI1mUksFiekddDodQuONpHLKOGb3h8vyELl4+HkjN1cRge3Qd4BZmD0xj2/Yfzj9ydEt8aD9zQQXfWHcq6I/bj4jNMHOpzcEXesoZ1cRZa69yWXvhGTulyFU7E2TZ8hTM=","authorEmailMD5":"cd8f6f5544b9bb3faca4580aac71ed8b","message":"I wasn't aware I could define a method inside of another method like that. Obviously this should be reserved as an absolute last resort, but it solves the issue in that it doesn't fire off an unnecessary thread, and I can retain the async functionality without blocking.\r\n\r\nThank you for your clarification, it has helped me greatly in understanding this async stuff.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"e52a4660-b627-3f4e-8fe0-fbbf544c4ad4","date":"2018-04-27T15:29:14Z","timestamp":1524842954,"authorUserId":"disqus:disqus_NNQAdRCoBK"},{"_id":"e52a4660-b627-3f4e-8fe0-fbbf544c4ad4","authorName":"Stephen Cleary","authorEmailEncrypted":"bGlUWDdwvM/o11/TbjKafCedb05Xp3D1usyhCjcgmRDakYBmd5YqQ9EzDYmc0Zd/kMfEG2BthC0mpqoxCoqbuD0LoZSF1LTOBAROXWOAxNPpLYD72xMh1Bvp3NJ1L4oTVncqTyFdHdWRkDqGwOnyNfFqh+SKpo7vpaDNBRmLDFPmP8shn9ILQ649rvzKe2+53gobChmXCIrLdnqAPWzFHZsrnDMF6Lk3T7OLj79i2yvGQq/FbPLgI1MMs6YR97wECc8c+niFn3ymQP3mh5LZWrz/hUT0/nDR2XiYxDOarGTetec+Qk0nwP4gH907AMWKT3n8hiyRDyqwjNGdZm7nZ2Cpevx4DDKZeGjsMMhIVCtwYQulnXyiKPdMJdWnsZiK2Y4yWsMaSPxmSAFBbRkjw86KO5eg+hkw1gzT5SUB9ZHx4rJbmyICgyNc1A99ub85PJRRw/6RZ4GywxsKshezhswrTucqALHQCdrC7eghQUe/Zx+8OPvysF3Kqv2k+eMl0hikO2u/C63LroPZ0R1zItDntilIhEl/nvUHd0i+/fr34VWd+QjcIOrwj/nYC5HcjmCoFf5bfi6w5gQPO1+1r+u5lWf0X4TwBVlm5H9iu9wxWMt3B3f9xAFsXF97tvk2fuUV1oynwlsiLudlVMf+C0X+ZXA7O5Y8SexcerzDkrc=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Yes, in the general case, your I/O operations should be asynchronous, and your CPU-bound operations should be synchronous. Then, if you UI layer needs to do a CPU-bound operation, it can use Task.Run (or Parallel, or however it wants to call them).\r\n\r\n> one case I have been running into doing development with Xamarin is that I often need to call async methods on a method that doesnt really allow for it.\r\n\r\nThis is an unfortunate reality of working with APIs that were written before async. Due to the limitations of those APIs, you do sometimes need to resort to hacks: [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/mt238404.aspx \"https://msdn.microsoft.com/en-us/magazine/mt238404.aspx\")\r\n\r\nOne of the principles of Task-based programming (including async as well as Parallel tasks) is that you should always observe the results of your Tasks (unless you're really, absolutely sure you don't need to). As an example, the code you posted would silently swallow exceptions from DoDatabaseOperationAsync, since the task returned from Task.Run is never observed. So if your database operation starts failing, your app wouldn't even be aware of it.\r\n\r\nSo in this case (Device.StartTimer), one option is to block on the task. This is a hack, forced upon you by an outdated API:\r\n\r\nprivate bool MyMethod() {  \r\nDoDatabaseOperationAsync().GetAwaiter().GetResult();  \r\nreturn true;  \r\n}\r\n\r\n(this only would work if Device.StartTimer executes its callbacks on a thread pool thread, not on the UI thread)\r\n\r\nAnother option is to use async void. Async void is for \"top-level\" operations such as UI-thread events, and should be avoided in all other scenarios. In this case, you could say that the timer is a top-level operation, and use async void as such:\r\n\r\nprivate bool MyMethod() {  \r\nasync void MyMethodLogic() {  \r\nawait DoDatabaseOperationAsync();  \r\nDevice.StartTimer(new TimeSpan(0,0,5), MyMethod);  \r\n}  \r\nMyMethodLogic();  \r\nreturn false;  \r\n}","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"cc37b857-b392-3a86-b1be-684d3d87202b","date":"2018-04-27T14:28:05Z","timestamp":1524839285,"authorUserId":"disqus:stephen_cleary"}]