[{"_id":"a94c24a9-4e39-31d6-b46b-3db54c5fb351","authorName":"Chris L","authorEmailEncrypted":"","authorEmailMD5":"","message":"I'm using a third party library to convert a PDF to a Tiff. This library doesn't provide async methods. I've written a method that calls this library to convert a PDF in my MCV API web (HTTP) service. I then called this method using Task.Run which I now realize isn't correct. Is there any way to make this I/O bound method async?  \r\n\r\nMy code looks like:  \r\nvar success = await Task.Run(() => ConvertToTiff(filename));","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"","date":"2014-04-23T23:23:32Z","timestamp":1398295412,"authorUserId":""},{"_id":"0e60493c-7e6b-389e-a303-b957b9bc86f0","authorName":"Stephen Cleary","authorEmailEncrypted":"OvsL1iniBvE8H++p58Co3NXYzts3cpI9wMEa6fzJhJsYRp1CgKGy4o1jIOkABg0VTAkCsvLNAhR1U2OCHGKk2GsHMe5QpkJTI2CguXDHGSesarzIs09CcD8XXPnIyYbshOdlZ1sgBoIAUpHLsmuP478bsIaI+am086A9TM0xxMXsNj1aK5QbWIDCPEa2KuoWYbkZuoQCnOncqH59i8hT/OhhqYoGHK9qiyaqRZFG1TVbvXN1y+vye9vTMD3tdwA/gvYe/0XsLDWsuBJi3c+pmmMEeE9GnzJTsQe40/NLr99cURExSjWXNwHzht+qzDs84rWTA4CaL848s/8Kdm46kzcQblnCjZadvnXr+cTYDWt+nK+1s13Ai9KWfx54nMWNjPkDz2Y3AGS1PbXpijolWJUd8rK+rhIMIosrjPhwE1XhnRfhBwHJyrTdEd04+ZhXsr9baVkLRmDetBI2SjspEBg0NFEC9aergcTlhbzOl7L0ax2rE70szd2co/KZZZ66oki4c9zDVEsyNd3LCsNsSU02q4KMZVaq4FfS5rp5PuTKIrbZU2fjNEW8NJC9GcxueXc8/gOYhH1SjIpjOsH+akvkSBUUjeEqJX6D/tCSeFUGivq/apErMH7geJnZYbEbaxeDCmCd21Dn7HcYoOIFp0wdPqtwklawdxY2quKFJiM=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Unfortunately, the only way to do this in a way that is meaningful for ASP.NET is to actually change the third-party library so that it supports async methods. Task.Run is an acceptable workaround for UI apps in this situation, but it's pointless for ASP.NET.  \r\n\r\nYou'll need to contact the library maintainers and ask them for async support. In the meantime, just call it synchronously (\"var success = ConvertToTiff(filename)\"). ASP.NET will work fine if your threads do block - and it handles that situation very well - it just won't scale as well as an actual asynchronous method.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"","date":"2014-04-24T00:28:41Z","timestamp":1398299321,"authorUserId":""},{"_id":"502c05e1-d369-3852-8e62-615921073af4","authorName":"Chris L","authorEmailEncrypted":"","authorEmailMD5":"","message":"That's what I figured. Thanks for the validation and the quick reply! The other alternative I suppose is to offload to a queue that another app/process handles. But that's overkill for how much my service is being used.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"","date":"2014-04-24T00:52:26Z","timestamp":1398300746,"authorUserId":""},{"_id":"8fa07172-8556-3b97-9658-cf3e7f3f0b49","authorName":"Greg","authorEmailEncrypted":"jgExL7GvaakvkAXSzIJkoCS9wjUcO9tXolTjmOfFir1/FM/VV6GWVTPYmAhWQBzp0MZ39VWk+8U2UEE0u0+JiQe0aFNwKzFxWVN2GLQXV4VB780+HWXcPSBT/DnpXidBSSqky86riSpnddMpfzKJEUl6rQzCGuTL3sZGyWhLl5nWIeq6sDl7CnNxh88EMMnsG4Yeu3NYkmAae+sx+mY3JBCFYzj96CLGMzDivDknmWMftZFpVJtkVMG3pwzPAlYw12aNjEiCRCWcowVVf0FyvHgPS4wumwY8cYw2/uMn+MPLlN1RDVHRA1PO68TQDjfnznXlVAsAQZoEf6y7tndQFeYE1W0jOyU34QtEzcnluoV/M/mItb3UEqGdsLFa39pIP8yIq2Lf+LZzTO9+WsQj2zkx8iPdIxdRhXabV1x/GVq/OqbRvpmF6i4pvSIwzkZOWh2gCsLC+k7WeslsmWdM8fZnYNgMU6MeBeFbE82PhcfCW98XU3wOrCGHj3Dr+LybmShX2KF2curVVRainrCfnjhcpVK+xnsNOr9r27cI9btd65f7RJTT9LEccaUR2vWawxk+drze6YTsnuafo2WftJh+4H9JcinzUXtjxWFCEkb15S3FywlhQD8Op/aJ3ow+ICmth5Mw0tVmd+4h2t/3dINrrG7zmfq1ocbwTUoSIPc=","authorEmailMD5":"f3eac793786081525a51d07fc1d15656","message":"Nope. See, you're stealing an ASP.Net thread pool thread when you run Task.Run, so while your MVC Action might not block it's thread, you'll stealing and blocking another ASP.Net thread pool thread anyway, so this is like paying a home mortgage from a credit card at the same bank.   \r\nWhat positive thing did you really accomplish?   \r\nThe user still has to wait to get the   \r\nimage, and you're still blocking an ASP.Net thread pool thread.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"a94c24a9-4e39-31d6-b46b-3db54c5fb351","date":"2015-03-20T15:07:49Z","timestamp":1426864069,"authorUserId":""},{"_id":"1df7ad95-ea49-3413-b4f3-f6534376d60d","authorName":"Stephen Cleary","authorEmailEncrypted":"dRw3nSzmxz3sgs98VGg+3sIvrwJgMPdWTeFitOcpSbVcCLwS6Ey/kyXlot5Oy+DNEKLpWBIMA+kt29E6/qTvjWVMqf0bHgu/9Owxam7slfsQeNMUaVGMOJecXImgLaVpXVpBP1voqoMJN/K14AEdZSEcdABsstYk6LyQGacnLq8rw5zlJm0WbYQi7qcJdJkLKYj5smmEnSnRzS/11ynp7Qy2j9VC/v+Q+cvtqlhPtRl0EYkizfgRZHeL+8LRGCremfG8MXxYgzfKN/AqzcVClIoEjmcl7fscDBZUK8A7mEvTSttuUgETbA7J6xAG0RfG79fj2vQoM987UPtrhfnmEVxgpcprCyS/YwlqhtXBUHWVR3E7nGNYeXJHh/NinckbBlYj/dUfPmW/rZu/relALjDpNMsPPiqbjhPqyhgtFtD930F+lPyDyHAMs1gFk8XqyQVIYyGrkJd7OCQD+YJQmh0ulUiGQWBPa30L43JtdikzwJg70FLN2AxDNwzHfsN6iUb6bqCF0TlNKVuveEqj8ui+wOrOf/uWg0l7eXIRXWgYx8ZPpkv/pviHBYjG+37qRnNmKbxoqMXMtrZFlrWuPdbnAZXB28rDwg+jxPa7mXFmsGZjy8kTarqtudUnn5yTYH7vhZnOqJgI9y7h75F22efIDAsC8xQaq3/8yvFEe80=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"No. At the very least, you should register the work with the ASP.NET runtime. I have a separate blog post that talks about fire-and-forget on ASP.NET: [http://blog.stephencleary.c...](http://blog.stephencleary.com/2014/06/fire-and-forget-on-asp-net.html \"http://blog.stephencleary.com/2014/06/fire-and-forget-on-asp-net.html\")","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"a95eac41-a6ff-3320-92c4-6d96bd83da11","date":"2015-06-12T11:48:29Z","timestamp":1434109709,"authorUserId":"disqus:stephen_cleary"},{"_id":"a95eac41-a6ff-3320-92c4-6d96bd83da11","authorName":"Prasad","authorEmailEncrypted":"fVBJG1JyMVHPVCcH8dGy5NRAL8E1pqhYVaGRmEK2QtAt5RzCi1jflA83ihEk5RXXSmWSl1Z888EG2bZwkH4X6dyiLGlYEg+IRqfBjVXGrSCkgCZK8fhLcktBBm+iT2q7Hov9LVSQKSuttgxj7jrpjFC1DnHe+f0zzdhPMVvtrB6W5E4ElNrLgz3q2UO8mRnhicKxwVmShP8cJ2VmltTth+zNCc9PT93RxxntNLt9eyOWQHHLXDyDv6YKuM9lZaGDkUkcGA6K7/CzFa/7JOKzlM8cfLVM+bvTOGlr4F72zaJOCHdTJOyhuWFtOZqbmVswtXEylDF7neUcn0UV8CFaeu0WGtUzm/Q3zJF+UTuH9YTzxDWRfEsdkFZ8M0O5LHVsJfElncPr9WHH517OFnU/mQuBCa9bC1aIlQaqRyJPUR5f5nZgp6d5dlHcgipquqmkf+E085GNHYCdrw9mEr3DtwfUOaEskCX3zVzkWz3iaUUIJCnK5oVaXEel+CBVL9B1gj8QUSHIfYAQSWW9jqm8nttSpBqgTNcF70+tvNLiDOdt44wZQtEsJMXSmfAbRtKCGZkU/JHDZ46d56tFTQbsAmP2lRxiBwsTe9BiE0IP6IXYgq28dj1df2TVS6yQoX8CySZ5Qah5TMMWoy9PkiwusHXeZiQ1j9Q/XqkAzOf2/7M=","authorEmailMD5":"ed84de8de17c845d622079117ecf1895","message":"Hi Stephen,  \r\nIf I intend to perform fire-and-forget cpu operation in UI/ASP.Net thread would it be wise use Task.Run(()=>CPUTask()); and not await on it.\r\n\r\nI'll have 100's of requests per second which land on UI thread and for each request i call Task.Run. CPUTask() function takes less than 30 msecs.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"","date":"2015-06-12T09:43:34Z","timestamp":1434102214,"authorUserId":"disqus:PrasadPillutla"},{"_id":"ff6122a5-94e2-373a-9876-3a48a4c670a5","authorName":"Prasad","authorEmailEncrypted":"ThzlciQBLt4XGSo5Q1w/ZrZU9gd9TE2jklLiE+R25MA3eG99nlx1mSfpeEwBFUxwG2cH2pRjV4d85wi7yCmexWJABcoxeD98qzZoFG3XI8x32UDkKt5PCA/cOAIWDdKKVZK/afmX+y7IUj3k+Ijk6W6q7XckuGiMOYc+3JQ9keJLHXVKiGQQY02785F72iqFv4pyA4qbGN985s9AOdC0LE2uWAkdWFL2o00/vYUSYF8tEm+jcbijAux/sBysa7gfkfaGpGblNri0BcFl37E7bldzfE/8z4UsMHi0nGtgGVe5zjTuOFs8oelppofV0nYZW8FmbtJcMqLXjy9LkssWnQ7qMrg5gspL8qSLEqD8yAFA7SpDe5qN4ApD9CSRIvkvlu1GaQGsbJFqWKMU1REnNzwHAV+PJXrCRdGnTKFb/dedad38ZRpSHwXmDdz77U2iKqgMk21peffsULEcq7jz3QwVlTEPZLE+c+8sNxjXcFq8Oa4FT/lnMtA1AdtZIus44tiepXSKHarhAIGHOkS8m7nGVyppigj/0cohnSmAiEXiJrvYkhOxtblu6dsX4sYM+nHRxpAApH7GhDu17u5TSVorzhWD/YUJdnSRyDRZcT/c8X4p8aQaBT/7HXYHuhYO2ok3/84RfKP5hDuerNT/cSmbgbhwQJ2AlYoGzmaOrE4=","authorEmailMD5":"ed84de8de17c845d622079117ecf1895","message":"Thanks for the clarification Stephen.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"1df7ad95-ea49-3413-b4f3-f6534376d60d","date":"2015-06-12T12:34:00Z","timestamp":1434112440,"authorUserId":"disqus:PrasadPillutla"},{"_id":"3a66676a-95ec-3d6f-a20d-aab0ad642e42","authorName":"Sim","authorEmailEncrypted":"iT1iPtlOwVWry9e09269Z2EvUdUQ1SSZCbMYVZ0Oj6ni30QWF5RqfkMnlzyByZKcH7OIeyOlc+MJcOeqn2ewbwD4U/CpBb66WMF7Lw24HNckdgNWbktGU4fVwdqod59ZoSXy8i1azJ0FP5K65lQGpzGloyfWH0L9QroAh0X7KDkmf+jD1CQhT9hcx0wuS+1wt2d2pKUNmGZb0j9hOjDwA6Wl6vuViRqHwt5m1KBd5SlC71f3MKQiaRgBA2v9dt+NkYMdhTkqyUqbwWEDt2btA4oybGljkuq/wi1tauFF/tn53CqIZ2UBC1q/eKrNpBmK1Y9Ln+jbafxIdjcA3uDNOoln5/bv6/IgJay3WGHXo3PlYGkeBUIP+bhwPymGicDWU0t3mwFAMgU+FVpmKUyIN+rDfI+oJ2GwkTRX+bPInrXezMUrvu7JH3FizAFMiyNqUOggPGkC+YHFYOmnfTYshBctBD1c0RcBSNNu6JrCa3+Ru9piiyfsZ++zKoKl7L5qs5O3OFkbtM5K0r5Foq2VoN7oxgD5NYMF3QJ5MEbsVh6/NzCWiUYVleX0VjvV8vyVyMThjGSqGuWb6wHLUFQjPnGsI+tvdyk5oylaZGeL6fv0Uc4uQr8YimUIx7WaKEzGIMRL9vZXJfWuPQzIAGHTztVh+8heRm0Z5ClxTXH/i9k=","authorEmailMD5":"756a19cedbf833909908c70a7cbc6c30","message":"And because the point should be stressed; you should call Task.Run this from the UI layer and not in the implementation of the method.  \r\nThis is to prevent the UI thread from blocking and because its good etiquette","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"70ab64e5-7c87-39bb-a80f-219d10a7f954","date":"2015-08-21T09:49:59Z","timestamp":1440150599,"authorUserId":""},{"_id":"70ab64e5-7c87-39bb-a80f-219d10a7f954","authorName":"Sim","authorEmailEncrypted":"BxKALVBFALgqJU2gx/j49v/2nKdHYUcGFVAdRDJdKpWmaNzOpo4trzQr4zjZRvmjWpi/6bXTwf4CVjd5bjYXb+hnqQJQmFiZTGFlVNGEQ7QHmOsLrPe/4TnuU1jWigvAOErEuh74yiKRzmHN5uhGcw/cGGN8yKY2G0g16m4HQSZCHVpVFf2lFXVD3qeSRGeMJNDr3E2BpTX+TfLYpON0XRd9DuThEJPxLRa/45kH9PPGEAUKe5Ewl/lvW+vQ88Gdzf9TMOWyD2ECykYzzFWYO8jCSY1KPht8KHoeyOt7zWQ5/XW4Z9yNhPDzln4IQIB5tIGZ3rVnRo6ga3idKMO4Uh/iYrU7C5pI2p2cSDfd8w/0+TjrJZb4xekeyq/VeOAgfYtUf4sSBccRWtsvwJ8skOBl7Hwcdx4yYxi80687AblBBJNx7iZUmFvX/lmxJMc1A9f1Hu3gjuFLqo4nVL9AW6lv1RuUSV1Zx6Ktn+HPpsNNz72Z8IAyGtBwTcoTe5W8dAx+5zgUpR97VAoC03CESijDNjTO4E/+4Y31mNf8HQZVYFCa8BCySQljXTNKh9osCFofO5JTDR+Bm6c1zAXxxqbEOAngGIsvRuLlN5iTYPtHIVc+VnfhjQirJHZyvpNh24yKzq+LOWUeHGLEkfDPpY2Gm0Ft9QIfs5Jp8sZ5zlU=","authorEmailMD5":"756a19cedbf833909908c70a7cbc6c30","message":"In Addition, you can avoid the overhead of the \"re-entering\" the UI Context, by using ConfigureAwait (i.e. await Task.Run(() => ConvertToTiff(filename)).ConfigureAwait(false)) when the UI Context is not needed","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"9687f4de-18df-34ca-b880-3c46c6f6c503","date":"2015-08-21T09:39:53Z","timestamp":1440149993,"authorUserId":""},{"_id":"9687f4de-18df-34ca-b880-3c46c6f6c503","authorName":"Sim","authorEmailEncrypted":"RZKccxmws4siNePs5/X6ySwdLzykjDomwpdnTRC5kXY/7CUe2Mn/6EU4fbYufpBgkSMY6qdpEL8Dmp9qrD9qqUSj+VfFQNYxUO1aTjbz7htFg5hMahe/jtsF3BXHcrokQYO2FQy95mVOAnZcnwlXVtv3E8nd0V3PEp7YPUQWW1SrJB1PgeOZwLLZH0yxrl/nv8sQXUe/m3psqVEswk/+ye+RgRMTWKvca2EJE0VgwR9o2ASJqwirQhDEbLHQPCjbpwQByxzjXTBBe9o2+4T7gksmj9s/U/bd2nEgqUF90JweZuFhaM/N+e97OylpSGjoIrz2V0GinASq6vi5yHALXtl4o6EusvyGfbSRxMNqTsjT80lz0Y+N5ayTHQnoQr+hoTOnjAdaGo1j0KgOimHDdpA4WuX9XxjTyt3fmmuIXIlPr+4mP09zk3MIx66pSG92Adioqb3x1U10e8tmM54Mh9+TpCh5YvX2PFJYGLmhN1XzEQhHs3g3DBZc/WJJEwcq3FusMGfvgcj0U+8bFiP82jGvcztplvJE98+R4OVZvk+Bn/bxDVWWA1Djni0+mHJ3DVzym/Li32yq/XPWDtczK7dl8Rx3Wt4FcC/Wn158Dloo7rs0SpJ8fCCt9F9opaMViPHbJV7bBdwADOPTCHJFCcZjF8x+YOzbKIxvtlMudXA=","authorEmailMD5":"756a19cedbf833909908c70a7cbc6c30","message":"Actually, the benefit is that you are releasing the UI thread!","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"8fa07172-8556-3b97-9658-cf3e7f3f0b49","date":"2015-08-21T09:03:43Z","timestamp":1440147823,"authorUserId":""},{"_id":"d0b313cd-213f-360a-a410-4e601728fb4d","authorName":"Stephen Cleary","authorEmailEncrypted":"LQagp4h7TMqhz96QZljrQj++pSmHGFLhXU8EH/9ZCY5674yKAFkn81bODvpyMDB1xqR0I7DDLf2Q0f+EIEZqP80+tw6wQn4WsTqCAIschLQnEelyH5Lei52kzUnq+zp7H5bCW7FHp2DC6k7SBFZiF0jeX74HuySW1srRrwh5wk8RU9xL/8TCc0w9L2i1u8ZKLKEAO4iUOKxKl1ic4a5Kypq5d9JntJS0AcWHby8mByhKyOPBs2w2hOf5Nq8OFBgbLGLRxeRB2Zeov5uNl8TPgrOmjS7eXB+v+RJphqLSzgeeNTL0sy4tUlTW2Su7+yuKjlMGBeXvzK8GX8kTIWYlHBLEC/Rcs8RevmHkqZ54jPSjZczjLiActw1yPJ/qGTlZnfHhIxZH8MrK2SfLHOHZb2j2868N1pyCj3t11mTCdfzkk18HWEuoYsKRimm2U4rwbYfKYaP4uk1xYaH1oXrWAyVEgbc9aD6uuX03FNFOMmr84kwjAfl5vkr2EvEExviShhhO/8LWKukAORzkEFtJCXJiwrMupxv+4ji/5/fuXU7RYkAFhedPlZbqanfmsEfbyH1SoZZn+LeTp0Gqw/DGN3j73b7N4/xNhb94Ocs5HXJWtQpPRSDA0ipSk6beaoJEcAb/HCVz2p/Pd4Rc/oI7Y9uDETZ8EqnDCvwpRO8+H4M=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"There is no UI thread in an ASP.NET MVC/WebAPI service.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"9687f4de-18df-34ca-b880-3c46c6f6c503","date":"2015-08-21T14:01:26Z","timestamp":1440165686,"authorUserId":"disqus:stephen_cleary"},{"_id":"848871b5-585f-3dcf-8289-f73633447d4b","authorName":"Anders","authorEmailEncrypted":"Czn41oC8UsHCD0M6Op3AT54AJooIgk5jdkQB/LYQTGCFOjJS4K4UZTrwTQ45qnHUzk3tNtCDqixYrLIegqoO7tABah9hqfs0C763D6pQ+X1cH+4LxdKDsWrZg37BIEbmiEqjwJKzvdeAt8IpVobVl01jwIKf5xAGyu+BjFbrE9ZyjASF1qFS7QpS8oFShLNbjyNjk3hXA8H4GyqD3DeYKGPW27PKPRlakctpPBsTRrF93sgGK5Ie7qJxciFb0aRywl3JdVjEe2boM6ZaIUVOS8+rROElZV9NUBAIlLarPwOJkMlUE6pNky4Mcv0WM2373f8J8MJTRgroKFoDvhCbWTf+do8zOIE5lYA+W3aNMsUiH2lO+c+gaKIQFh5e2vxM/Stwm6Tas4RaqFWp73eS+cDbhB3oqYN/92zcwLz8ANsq1E8/bpV3btmskLuLulC0vPk5K0A68XphVRadgguwYhI5f1pc4G018UROi0sAOFaMDeiFSdfToepjTFzoL1ZHS/vsMdD7lpmrR5lFRAWfga2VH4s9VJwL+KGk9uBS5fa945ivRvyglv+6hDLhXIWdYX2sceUjqZJBbENhbJQrHh8v9/oOW3sWDLppatLYn4C6w8Xgfa4VQQ2frOB5w5fCsIoaJhHEysctvaWWQQfWN/eQ0ACvUmxpkKApI2kHAow=","authorEmailMD5":"df0c87fe57a95cce1df1b512109a0e0e","message":"I receive a CS0414 warning with the variable assignment (and it is not pretty). I wonder how you avoid running into the pattern, thinking I must be doing something fundamentally wrong. In my example the UI thread wants myData as soon as it is available, but I also want to update an IO bound cache.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"b576f01b-c140-3da8-94d4-620187a8bd11","date":"2015-12-02T19:36:34Z","timestamp":1449084994,"authorUserId":"disqus:disqus_czcHhkHzPx"},{"_id":"84c7f830-8ab0-3c97-8abc-2845cb38e4b0","authorName":"Stephen Cleary","authorEmailEncrypted":"EtX3E+b6yqoweSTrxtODcHdCj1iZons9DSzyVx3lYsMZ79o6rCM7qw3j/j5IJHLXL0OJflqk3sqD64Br3BnTJyKYG6jeMVplmcFa5zFiksWFSEHIh4ZZtJboWfFsipxVEGkLshQ2dg08/w3Oyh+WKqfpIK2QESei2c9eplbpdhxP3RZqCWFjc7lFeHkou6WD/DMnBjbD0E6kwgSFxJlcecpGHB3sgsIdmA7tck/80u7Zw1LhnCIBO5T+A6fmxN4n5iKgQqOsLgt3wCCsYRYQIJYjUkKVnCD0gBFc1ITUrkhsCCSNituiRqMg2neW1WnEa2maV7H6zU/OBaJ7diNcYrhM/hJs/lZJ+Z29Y7MyW09Sj/VNdj6BplF36maEVwNzKvuNhIb3MnDPZkzCPdp+vXw5xXkv6UnG3PAj2UKPa05JX7xEDBDnCxrUoojTb/3NTZjGe/lTbZq2TAXl+Kw5NBpfyrOcCMpuvo7AnBRfHAvS3W4jh3eOHr/fkzh8rnUENRG72sePq4pQulnL1DAgyCGOH5ia5dFW9EMCZexgDLi7PIKkPvTIYwLI8ezrY7LWlkHHCrdYE6/OLk8nrudlfO/9EIncCTjUbiUSs7qPFaNoe/3TDOu7MuQKhcYFS7FPXL32VfBbS1fJxwFBBoy2JeMMpP99yVOIdVUF8TSnXKM=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Sure, you can just do this:\r\n\r\n var _ = CacheMyDataToDisk(myData);\r\n\r\nNote that this assumes that the method being called does not introduce any functional differences if it is not called, handles all its own exceptions, and does not attempt to resume on its context (e.g., the ASP.NET context may be disposed before this method completes).","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"99282677-61f1-30ca-965f-340bc3843a20","date":"2015-12-02T16:32:13Z","timestamp":1449073933,"authorUserId":"disqus:stephen_cleary"},{"_id":"99282677-61f1-30ca-965f-340bc3843a20","authorName":"Anders","authorEmailEncrypted":"ITq++wZCokmon+9TFsd3v27jJKLkC2DvB1zDpHTucsAdTQB1UHiBtqAH9msjIex7O+X84cz64L6DoJDyWoJG/3i6ximNg18xQbEevwtOea7EoihQlxFt7GEIeoccGhcz9j5g7sd22aaZZ4iicospWkuGCS6UvV20ELscd1EhFk4pJ6uAo/qusQe/6G2qb02S1Rn4og+k0IWOIAq3JAklrCgiTqVOgVcwEIH/oodJM3A/xS2tCSPWY7om21mrl46enrUW1TTeWMy0l/se3cILqh0TJ4crOtnzaNbNTBd2nT8f7alZIl0YsIxf8KJ8HIROAspLSSHPeyENh76rjvSR8ny1rueaa8EQzfFBpv5EMylBo2XUHVWTHEnI2sDDAo5JhH+qSpDIE/DwtWbrTBLT1M88vZRSPM5jJuHhTriCHRlvjI61xCo9xMdoIvkrdT/E9vQUuyUDv6efssLnfv++K/XZEXRZRICwvpZexlN2iyoy58XLq0pF7Ti3L0uiQ75bMShbR1C4E8tPVHdQWK/UFX8Hmdu6fhqt3Chbs6U/UeIxFGPIl0ao3wxKoExmnFuZRq9vTvo2ZCW5CGXVLDs3VOYQu9H/bzeOb/kA/pZegAPJvzVqE8NES1IrM8qqDU42XmG1lg4BhEwUOQhyo+NgOQSnChkMqWOVdbYkdzN2Kug=","authorEmailMD5":"df0c87fe57a95cce1df1b512109a0e0e","message":"Hey Stephen.\r\n\r\nI have an example of an IO bound call where I'm not sure how to avoid Task.Run():\r\n\r\nasync Task<byte[]> GetMyData()   \r\n{  \r\n var myData = await DownloadMyData():  \r\n await CacheMyDataToDisk(myData);  \r\n return myData;  \r\n}\r\n\r\nSince it is not necessary for the function to await the caching, how would you avoid using Task.Run()? Calling CacheMyDataToDisk without await throws a warning and introduces issues with exception handling. Is that really the way to go?\r\n\r\nThanks for the articles!  \r\nAnders","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"","date":"2015-12-02T15:56:03Z","timestamp":1449071763,"authorUserId":"disqus:disqus_czcHhkHzPx"},{"_id":"b576f01b-c140-3da8-94d4-620187a8bd11","authorName":"Stephen Cleary","authorEmailEncrypted":"DSz7eyh8TSDFn8KakRJ7FjBNQC7GAmjhsmvQNVgASH3NShKOBc+78O8o8lEuzZZCGbvNIoxHMvwIT26vfkCi6t2A1kiyiT4qgZttNPdAPB9nWMsYxDB3n8tQrdHpcYlcA/D8wpQGeopbkBnBEvgFmnfXKztcfKVxL8hyvI9cVJRyYHL5vPo16/h7M0zjJZeqxGAvDLlpa/ziwsi5u/ljjlXkAtkdieOflyoXzcvY2ynFupajX/JXuHY0nDQimimPgdUP48S229QEJJ4CPtAankYHNSI8iKobBCP42KAf+TziAFoAQ51YN/bMk+fjtG5yZhLvhTMsiCDIux00pHcqscXgsVdjBgDWWpJIixn+wb68QZ0UZE6AQ/h9NUASI2DgSH6muL4L8VULA7CsoMwg5XPcszQTsGnTRkDDh6jCEHRYD05omqGksupiHSHewJ950mtek+mYDg6tJfP3VvaojovkHt76dT5IBM3HoZ2+KgKRpDJTCaScw+LYP3VyN2v1g1WzXmYvqOFWyevgiitnNsmWC55OLCNOCy+B021rkpIqVcuLfog1LD6EyUkAF2hIjiPeR42q/GUcSEijhHI1uptMpdRVTXdsXgZ/7RJGXca/7X2VWlHfM5tMK2KbvdjjFQ6Fu3rkGA7zlUuSvwevfL5E5qkeZhXtVOcFL3MEPfk=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"No, it doesn't cause unused variable warnings.\r\n\r\nI disagree about this being common. In my code, it is very rare to spin off work that isn't awaited.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"c76b5480-8827-3a00-a63c-289e4b64bcef","date":"2015-12-02T19:16:11Z","timestamp":1449083771,"authorUserId":"disqus:stephen_cleary"},{"_id":"c2e98b3f-2df5-330a-a097-a36d172f3dfe","authorName":"Anders","authorEmailEncrypted":"o4L+/4n02DOo47W9Aiie1mc5pji/xKR/dWh7mo1C0ycq0kkDaj7v0AUzV2PUjD7rId8JF4ImXCbh6u0lrBYcWOyezKlx7lvTCQK9lOZdKIKeDfu7fo4oO1NASOJgYvSriUs5PSa6+j6SPqdM0tbiGQOBG+hDn1UJumWPIMarWbJ1g9nKqXtH4vXCDewZt9igfRlVd6y+yOeQ9IZVckljd77m/toMDQ39vtf5xLsgbIyQfNDEzSWwJxSgjbCAoQ7yAZbBKs87LTEouMp+mJnS9AToDj5zCTNNO89mzOrSNmzFPSirEP/Tgchh8b5BFuAztF3lcWzQBYVcwh/8IkIeXOFLnbKARr7BakE8v+akG80lVQCDl+0yZHy2GCQdEQ1LtDFbm/TskBKC1ATf28qW7U4Qigy44b7nTNIvqpvwxpBM3kXj6Uev4ai1lQPEwTUeqlWHfQE9qKQw4YsEJFsa/7hqWU1WWoYLakLyBc3Yg0xZVWSsLAiF/UwwAvCqk5BPZS7Cl7lRoMq8c54ssz4NMpUclyoMZ3KFjWx2XKhrONUG8YbogiXBMvMTzE7q00bYcidu8JCVKq98gYEE4cpHn9P+uW5csfXiUdReoOfgw6mq56ImzMTDiGTvSxjutXKkB5+X5hhlJSdbrvlh02YYXUQXlDF9Fe1pRvGmGolpOOs=","authorEmailMD5":"df0c87fe57a95cce1df1b512109a0e0e","message":"Perhaps global suppress warning is set, because I also receive it when i compile your code example (besides, in what other kind of situations should that warning appear)? Regardless, i recognize it is a matter of taste, but it looks like a code smell to me. Maybe suppressing the \"statement not awaited\" warning locally (CS4014, NOT CS0414) is the best way, but still awful. Could you think of any way to avoid where I landed, taking the overall goal into consideration? Or is this the one time Task.Run makes sense for an IO bound task?\r\n\r\nThanks for an interesting discussion, would really love to know how to make things pretty like i usually strive to ;)","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"e16e9ae0-f918-3a13-a6a0-578ba48a8514","date":"2015-12-02T21:10:15Z","timestamp":1449090615,"authorUserId":"disqus:disqus_czcHhkHzPx"},{"_id":"c76b5480-8827-3a00-a63c-289e4b64bcef","authorName":"Anders","authorEmailEncrypted":"E81U8VpEYIcNmogGsND26dwvXMf55DPUJQ6wC/beAWCGUU0dbXXQ1fCB2oRHeHl+dvlzSYSGudVf8Sh5kZ8OiS/Y3HT6eBj9gxOOhxHQz5IrZW4UFxdNPW60RcOlWuuh4NuAdcRlh0BrqrPrQ/wcDHs1B+615qAcg9QhJrBOLEfe6dFN95OO1cdvclaIatZk97HoRNg+Z0JIrW6j6i62zhlO9p+Em79bPTHUI3XwNPVM9JPpyN+7PzKST6bER29QOIXHicXhgl+XSERGQui1y5acPx9/Za/2z4VKC4LpmUuitkHpLPl0qohAZBjQxfivaOGXbZQrKpqCCaTf4OWI5ZqNRIS5BfJ9/blw63KxKpY4GyEc6TcHd27taTGrgXk8rpCubQRiZaBK5wUkKtGLxBfrLB5KZ9eDFWa05QWD/QZBdTMSeBTG8+tRTkBySumh42ZdTQp1IYRTBthaMorAmVZ+0d6ywnFEayVYnHvQCSGHQ4XRSKBXiqG1OVfWfYX7iCfVMfDY7Y0AKxacfZ1yLVDbqWD8tq3VHlN8aiiIpRogLzs1Md49exulN2uPiT5EJLI28dfzPMFEtv8WbbpsQHI9lWxmr7uxLwWARajGpAj3m5WJh+eiKUTLIyxJ8aJ8nDs1OleakJvHveepAypVsHz7UrV6UeaxbQVOBYMR2Do=","authorEmailMD5":"df0c87fe57a95cce1df1b512109a0e0e","message":"Hey Stephen,\r\n\r\nThat will introduce unused variable warnings instead. I could disable warnings, but both solutions seems sort of hacky to me. I find that I very often run into this pattern that deserves a prettier solution; Doing stuff that is not related to current function but should run in current synchronisation context. To me, it seems like the async await library is the first major C# feature that isn't fully thought through. Unless I'm missing something and should think differently to solve the problem the function above attempts to.\r\n\r\nThanks again ;)  \r\nAnders","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"84c7f830-8ab0-3c97-8abc-2845cb38e4b0","date":"2015-12-02T17:05:05Z","timestamp":1449075905,"authorUserId":"disqus:disqus_czcHhkHzPx"},{"_id":"e16e9ae0-f918-3a13-a6a0-578ba48a8514","authorName":"Stephen Cleary","authorEmailEncrypted":"vKO8T4JmsiVU/oZXFP6C4fSGd/nSPrg9TmJnFj8qWsIMd0RBDYDqjxK1oq6Y1loCi8cxTelBusTSB2m7GREAsiXwEkmF6WN1BoQadlhbYxdeeS4uOon+n/tduax00G+j707SyCxmMlBVFY6SBhFealtITi33x4JotcRaUBGNfMpUJ12nm/hnc/FEtixi0cF7QocZAUQE9pRGKP+edAGcf8DvPWw/Am9GwT+2LY2gakIHJW4xoFxsgBuOkJ10AeHhs9qogoQC+QXVdLhmhjZ3PsIxNvHjxjqWFHEsmxUXa8P0VEVf+HQ7qmPlB+mi8fVWjolpZO/m+kGQgB5ZNoc2vRPTMRpnAH55ny83NxE0e9X2ha4h3ZHePqQxX3o0vQ54UL9UNN7ekqj1m+dlS7GS+db0x/bvJfxi81Z7nu+P3mgjhBVGDRLaq1qLNpRy8EmgobIYaHO3HoDhsMnaLWGbajvVso7ULcV7kq40G+GI4HzOk5jylSP9Nnkm7mqwNQ7JqJmOeuJw/5xsfT/OPPoygaqwAuJR3W6AVI2l7qc3a/lgPZjp4GPXatuwnHtP9kEkPSVNsCj4MxZIMWPP/n/Fq1Bu7fmVhu6Y/j4D5qVqsz0pSCjGTsylheu9Q0EIlRVVTxkBO06BdZLpkR6jvZfeL0tfD0c48Q5Tkev+ZCGVo6M=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I just ran a test and am definitely not getting any warnings with this code:\r\n\r\n private static async Task<byte[]> GetMyData()  \r\n {  \r\n await Task.Delay(1000);  \r\n var _ = Task.Delay(1000);  \r\n return null;  \r\n}","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"848871b5-585f-3dcf-8289-f73633447d4b","date":"2015-12-02T20:41:01Z","timestamp":1449088861,"authorUserId":"disqus:stephen_cleary"},{"_id":"58941c04-0d81-3646-b719-fa0ebf05d5a5","authorName":"Anders","authorEmailEncrypted":"rl/OXWgQ9TdVYcf5aaq//wqxj6TWUgFL3TPxa+pUIiMG6qBKgm3KV3bcDzwDvSQLYV7ZsPGMPMjmnuXI9POkU+TTsOyW1eiY1oTlK0EMEFanSVzvFkYKKF3w2H8g9y2GHir64Y26MvVDyQ14N9x+D1jzFdz2wKK9ZmZLbZus99YHIA1vYpwqML9Fx+Xjnj/SapaBbKvxWcfNrOTeItwl5T9Qck6LXgZ5U6Le3tu7BUdjdZ5WzkCT2PF/MA3OvAzIQ5y/9AazykhAgVoE9tYUQdCjXK/jF1wJ0ZvIKAfY7Zx8oZM4Qxo83pyWkaXoeTQ+534LVVp89q0kWKVshgDFk8mcobbFJkTGS6LXrQXEv7NHqUVnmYyh+OotLybw8UgdXdETV3WOGEPbKEJJXw+jxa+qYZ57jTIIvljU8qXSy/3XmTUSMuG5DXa5uvQ2aW4DP1gyPULU1yjlfTyfbxcmYH/wVbGHwwwnsX+4Eosc4tvWUtxOU3cWWKOR22IfqWU82w+YuClD8DjftncKiBt7860Ed2FKktPqU5PEymH2ufOEMZZ17xmU2kVslYvUEvx3jgfoFeGS2DdgM96WjfNSRqThTJfT+dCjXLz5BrBQvteQjSrFNY9c4ipRiRbQXwkv9At6cPDThYcTmQkJwZA7L7cpfFn0jxQefGYMylhNPQQ=","authorEmailMD5":"df0c87fe57a95cce1df1b512109a0e0e","message":"Hey Stephen, Regarding Task.Run, variable assignment wouldn't be needed (no warning). But my older ide version explains the variable assignment warning. I considered the possibility that the warning might have been removed in this special case in an update but then discarded the idea as ludicrous, but apparently it is so. Async await streamlines a lot of work but also introduces syntax nasties.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"5b0f4850-58da-3f07-b1a9-22b85a999dfd","date":"2015-12-03T09:11:06Z","timestamp":1449133866,"authorUserId":"disqus:disqus_czcHhkHzPx"},{"_id":"5b0f4850-58da-3f07-b1a9-22b85a999dfd","authorName":"Stephen Cleary","authorEmailEncrypted":"K7YkizM+3aRgLDtxoSkmg9e3m+fGu0wuvuXoSx5USmotP6eM5W8ZUfpNVBItGZ/vwi1yA98KTNrhFSo3oTOH8Qw5Pdf16ySTIkAx+TVR+/rmcqinnmppR3pEdIhFiiSAUj02OBPayMd7/u/WSTdUAsrYyYL9pHOu8sMDLER4yQekNO6KnmokmqqSdtXpWXTlnrLbomHRiX0znWcixsC0ehSDTvskVJzwvE1GlW8gyaiQm9hQ/KwYspIPecRslcKPrcxWi5AcEkDsnORklzcrSjFMI3YOEGoLzjNZjMwiLuxAsm665CJihiHOoGrmjA+OG8BexD76bQwGrXdD43WjSgaBcXCSbfihPb4nlaDT6Zf3TitEuf/2kPnvovzDmmR1IejG1fFOZuzrdlNs5kCTQJ3DdTE9OIDChVq3PoYrFW8zO761OJnSkxhjIvodSrxjzsK/ljV8i3Ov9pMi0K4ypHypKLwjsE66CBxFUMYXn3wzFD0E+QXRONAaflHMJ5FK2l4TDFogRruY5zqrNvljMJF4I5ZeT7cXQEvwOE7ZqDZUy91tRNJFf1FbXsyrWTvXTzNt5sBSpIzCDeFFj7qpqYueibo6i1MULYVinTzAUEwyZpZ8cP6pg0lEde9GoBApQsvKjDo3CgbnpTnWCnQcI40kfUZYAlvFdSK773i5fl4=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Are you using a very old version of Visual Studio? I have all warnings enabled as errors. There is special logic in the compiler to *not* raise this warning if it's being used in this manner.\r\n\r\nTask.Run won't improve the warning situation at all. It returns a task just like the method does.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"c2e98b3f-2df5-330a-a097-a36d172f3dfe","date":"2015-12-03T01:58:20Z","timestamp":1449107900,"authorUserId":"disqus:stephen_cleary"},{"_id":"20ff4838-717d-34e5-81c6-561e80f83708","authorName":"Stephen Cleary","authorEmailEncrypted":"L6v+qe/VU0/QdCq2UHLHoEoZu4unQiIv4LtkeJeV1C8wC+83/vyRQ+7joN2E5ijyqzh2rCmiUM4cby+ImdWjz808E1/5jH2rPwymAkvwVd/Rn9N9krGz+9z+iCFcUfuDwObE1m1+gL+PM7x6lDoFNnQ9U6Y/tYex/p01gR8cWY60ACzvAzOfp78dHi9lA1AJ1AnWu7s0GkFo8llyPBDsJt3Pfs3zDGBecF0WDv46zYbfHAHxfSgpRMo0hW9eqbviFyUmOyRS9V1pK8y754MLOMkE7fCdY/Svgy+uwAxwY88cP8/DkCyp3hMeWUo1vzncjEibZtTiGEfsksgVowaYgo9GioEWKF+FhyLFQyBg+oNKz2rJH2A7bteudvyyD1PM0CeBolt/GR2K5X9EVi6u8tnh09MydAJpULBk9FLsB0oY4OXe4EiLFjrteCFIs2obEnw/8GiPrvoWWiP0WT4OMQ/9xwD7UOhN8/W2W9RZHzJ4NI9//TE0ZLIx0w8yvbll7HL0AOxiy7vn0xgF3SwMyV9g3c6nUQJcb2uo2o8Es7OPys3IGihaz/UOcGW4MSs/y4f4pgalKTasMf4kX7Q6MDHygPeOIoChkb2L8pETjIro1a3LnbYARwJ0yxpLP40glCr0PC3WLMUrZUb6iNEs1zm7I0aesw6obloiEWfvtMo=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I would use Task.Run at the ViewModel layer, with everything else synchronous.\r\n\r\nUnless you know the 3rd-party libs will be adding async support soon - then you could make a good case for wrapping them at the Data layer.\r\n\r\nThis is just a guideline, and reflects what's worked best for me.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"835b9a44-e8aa-39b6-944c-cdfe93778956","date":"2016-02-10T02:58:58Z","timestamp":1455073138,"authorUserId":"disqus:stephen_cleary"},{"_id":"835b9a44-e8aa-39b6-944c-cdfe93778956","authorName":"Jan Magerl","authorEmailEncrypted":"mDj+oI4WjYdElsx7ikxXzsJgXQePFhhf+aofIAie/PfMLpT8LTLRNVPlCCliE1kjb4eX4DvhYvFXiZTv1AWmtFw0KEm5REi8h64Ezd8hKWzft+aGLXeVyFacJGC6klkeaGpwBPtH2xa0/LGyHNbhH5Xeq0C+lqmlYfU+Q85ytBi3AnAhjqu+pdVaFTMi+0tqsHC99BakljIPr6CRjwT13KAsZRvC7gWJ4L2ul9EvJcqpT2DwhR6MZ2eCiRU7y+kMn9BRZ1Mq8PoktGA+B16T1sxlw5yJHlGUdIQRI6PcrVDrywtTH+y0whqRvKxGRxUTm/CucVbOG41025jY8Uk28Xy9jvF9nJvcRA31uJZA/pPfFbB/0+jPA9Kc92iFpCcFd/m5GQTXmuNlxpUT9Z4FpldAD0E6DnLIB593O+OAzP+Ss33/EfUoRFV8YySdhOtGId/IzZwvmSHpwPLNKPLh+TKGILqrjVgpd/lwOYp0E2EDi5KXiKSmStMkpSaCnYotU6bdfEniiKC9wEr+bROVSCIJxseL/o35hht7NVRRQRtCWLGPTe85oR6sFaD6k7cL6s+lSiXKOW5tZmmh1VpADpoPyaxS4cQfuMxzlEke4L8+tGeJmkISocv0FBASevC87f+s5OHN62JmrhzEgguxPk1rMSb+dSTt8PIdfiM4nv0=","authorEmailMD5":"efc6de27e3345d43530fbe1a2e819e50","message":"Hello Stephen,  \r\ni am working on a Desktop WPF Application.  \r\nWe have to use 3rd Party Libs for some IO based work.  \r\nThose Libs only provide syncronious, blocking Methods.  \r\nSo i need to too something to keep the UI resposive.  \r\nShould i use Task.Run at the Viewmodel to wrap everything in a new Thread is it better to use Task.Run in the Data Layer where I call the Lib and make the whole Data and Business Layer up to the Viemodel async await?  ","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"","date":"2016-02-10T02:20:11Z","timestamp":1455070811,"authorUserId":"disqus:janmagerl"},{"_id":"d30b69d9-ffd6-37e5-9a57-df12742717a3","authorName":"John Baker","authorEmailEncrypted":"hoWFUVGmQdCTHzCpUksc1g+ZPC1hTEJ1AqlvERWA+Qvkb7rL5XP4CVdEOu5hXruzcF0OlK39CoWAEmDYHTbjmbLClacSrzG5kHnHF6npIDDu/fQdRZZ5NaYfrlxkIeGNrTy6VgoVv68ydxbwm/gD13P7k3IEjMQRea+asXBPjzCRJ5uSzQ0RbirO0cZHgdDWY1Es5dtNkvlMAs76aLtpx18CbP0wy08jJ2El+07Rqk6AIRzyXd9bqkU2d3otVR4HDtyb8uJvGd2+X06Cugf0qUvXFcEY5/H+Eo2MuWUe9A5RfLZSwSWPDthgzajuCtAEdQrdix2WEeMdm2Xas0sFKXmC+z7fcXy86T3nZOZMA5DHkL5Muk4Zxk7q3TY4Tw5499M71WIKtD2rSwdCdQxGRz5loaIqhSNu+T3HTEQ57CIPYHdR5PPf6BTOQGRRLL09nBB3t2LNJVCf4xf9sLmIBJwnz66Cgg58GVeEWY+cZeskRvcmd+pwVy8GScg5QBFk64e4mkGb62i9nnBHjkDIB9icQC6gouroAcO1rUaShhqevmyRwwtt+T45FemnSmcCXrCpWyWX0fw/1uqCZEqAwc2+Jdait5j++iev+G+I9OQ5Kz7YIdQqrB4thg7YB8gCpWsYtKyOYrT7HIyflmd7mBZyNhC296gHv39ojRpQmXE=","authorEmailMD5":"275e0507a59612361def8c693c4eac9d","message":"Thanks for the distinctions Stephen, and I wondered if you could reflect on how to implement some local long-running services (both CPU and IO bound) - implemented in a WPF MVVM Light Ioc service. Since the Ioc service signature must return void, I was thinking that having the service synchronously returning a Task that the client VM could run to suit its own needs using await, this would be a good way of getting progress updates and intermediate results, and being able to do cancellation (because the task object is available in the VM) - while having UI responsiveness.\r\n\r\nNow the service implementation can be done via a Task.Run, but unless that's done properly in the service, it's not always possible to do the non-blocking implementation all the way down (sometimes 3rd party dlls get in the way, or simple laziness!). Any suggestions on how this could be achieved with MVVM Light Ioc, while respecting the thread pool?","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"","date":"2016-02-14T19:58:27Z","timestamp":1455479907,"authorUserId":""},{"_id":"6b60a362-3847-3d37-8bad-a2a61aeed26a","authorName":"Stephen Cleary","authorEmailEncrypted":"CJlu54BY/fViqoWlqVtoBxXeiR6j6uwux6TN1mIV3QjDpCgJCgnWwqZusR5eQhKvC+o73YhWa3C2a5JfJsPIFYIANf7cjIfCXtDos3C+SMCDaVX9gcecjmipVUtmm/5L2Z+pGTC27WWOfURnjgSPsEtR+rB0io6Ha10W/31co+YfcdQkaFDMhbj3bcGhmIlboYgKU6hArgPXIQUl1Z1AlBRhPG+l5AJGIC2ou+yKTR4LfXBvdlYpA88AO/GNIRum5M/yUL2eqhPsoibYEZCUGQ+mDy3Xfd3a8xCx9SNcL/nKfC/zJMelaqQbOUC7w04ntDTPfRfZcstCGoBWP+EwzDX5+u5u55W741xaqB7mt8w0PQaxRX3v35Q0mRRFnglmsccp7epy6I1UA+0v1IzvdXXTmJ3Z/0/sjo9VjSRDTM+Etf9fNCnJPuJW97GQpulO5O9qkTGe0PkuhE792C9LwHyzT7msH1lGEQfnDJnph2ElEjXgQ0OMhE/iZpoOBd2I1jgr5e8i3+SI2T2c7O0jUSo20i0Pnkkfbf0481O4hffe2m6EeIm4is9EXVUkg8tTvDu7rYDbCP0n3AQ/1/ccRssyieBDLuiGYDW4wDRGvVm5Y7f8M64a/38flHEooQDAO6B74wjmgaNi8qXNLgYQWC/TEj4SubwBedPDUD6Xa9o=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I'm not familiar with MVVM Light loc services, but in a WPF app you don't have to be as careful about using `Task.Run`. UI apps have the entire thread pool at their disposal; ASP.NET requests have to be more careful since they share the pool with others. This is why I do not recommend Task.Run in any reusable/generic library code.\r\n\r\nIn your case, you could probably just use a single Task.Run at the top and that would be fine. I wouldn't worry about the blocking calls further down because they'd just be blocking a thread pool thread.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"d30b69d9-ffd6-37e5-9a57-df12742717a3","date":"2016-02-16T13:11:09Z","timestamp":1455628269,"authorUserId":"disqus:stephen_cleary"},{"_id":"c90f6329-2bed-30b8-b153-69b47e3a2d4e","authorName":"Stephen Cleary","authorEmailEncrypted":"bIFHgs4SUmtl56Q21/sQ7iBDai8zCz/7rM8UJk9NI9diZVOKkoyb8jOR70tJ2Hrskak0ddPf4dgxrr803UB+NnphuhHnT77Z3aKg83AU96R90oc4noQtdEFSoU8q+ZcC4kz5nA3MQQmW+BW7VVNZ77Qr4ZIrTkgMQsPQ6ZnFmOvyCtKlQthYCc9qCpkXVQyjWH2XxrRrmErlnTT5LmlgSeSdxhLc1N30CVVRHrCRuongUkBF++u2a+RgYqSJTA9BYxaL+d2fPCxppJvKcDLm64bZWkq4dJfEIC1CkECGBpAfMYfvW5T7Lry4PBqBlo8wRLWHcLREIWKc5n725BV6oO7vXTvWup/EYwQCfd0f/v3FRYnUFxy19q/8W6esqZsoseh/OSBYg9enu4WrI9Hva4V9uW4nfpN/avoQVViVpgMabh7f7C2UAw1RuzCwcIOR1R3E83280MSBnuSOA48Z+WABlKjMniwvUmkBUy0JejsYd+TayXrqjplyKo2BA7B4m6s+Qsy0Fut0KwrwHIWX+mbM9fqON5ITop6gizmf6zL4dljjix1oVV8avV9fSoeUgaT3cjLtqirQzV1fZuRmcc0gaAIrKJZV64pCNu/BqSFH4TI3IryQRvkn9vPHrH1g2RIGWL4cbdXdFmvmZJMm59sCaRHpDXI0+oFbdlw4Rlc=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"RxUI is a very interesting project! My book only covers the basics of Rx, though, no RxUI.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"d21864c6-7498-3345-bda9-4961f9609943","date":"2016-02-20T19:47:30Z","timestamp":1455997650,"authorUserId":"disqus:stephen_cleary"},{"_id":"d21864c6-7498-3345-bda9-4961f9609943","authorName":"John Baker","authorEmailEncrypted":"tsDgn2yHmMFxI3WpmcNoX/wirhncdzSmB6p3i7MCZfunOVax719QdJC75hx+XPTF3P0ZdY7Kh95o9IDLe/5wee6fOwje8ZeJGrPfa309sI43k/axsdXhfxQZsm7H+9JGpp4FUBsNK13EJMsDH8brDvz+rvnSc5ZRS20yHGslAZuCZ6ru0bQQpszgYppuCeSmQe/iEwRGWduHANVoxSFXUr/SgEtF9SPRglJeHZvi1s5gkAZwBg6QLpF0JxA6DtVZM9e3kw2woKuQXiPtYTMPNliOnRG0hj5xk+/IvytPiruUYQ+JUupBtEC0/Vxe72u7zKDW3ThACVpuSoK2D/mbRcQPV7fqjAB99sFXw6qehsVIoUIWQ0vF2Djk/BF4Sr0zckVgpmAruX0Oghe29SghCFOJFKjXZkCySJhmNTHbEuu4c8B8N9rmhqPQ4QDj9wh7WvxHWwex1Z3jYUG22L0XefiY4+j5dh5XhtLP5eoi4wC/7bHYpl4NHhaumQaR2ZiwXDE8mcEz2PaQ+p+y7BeRuwwfWc2Cp6zprhkNNFNiP0TKiRyMdupFYwbrtQGxs5gn/i/Py+OKLtyzghfwN+KlPxv0nReohfsf33Myz3d5Rty2La7RSTQLJg6Cj4BPLYQfL8Mwx5cdhbSqwWKsmNxvk+jDJcEtuvGezwvrCsVLmq0=","authorEmailMD5":"275e0507a59612361def8c693c4eac9d","message":"Thanks so much for sharing your knowledge Stephen; I've also become interested in what Rx and ReactiveUI can do in the circumstances, if I can get my headspace into what's happening there! It's programming, but not as I know it Jim & specially hard for someone who started out on Fortran way back.... Time to get your book methinks, thank you again.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"6b60a362-3847-3d37-8bad-a2a61aeed26a","date":"2016-02-20T14:36:11Z","timestamp":1455978971,"authorUserId":""},{"_id":"64fc3dcf-de7d-3448-92b7-09e2d0ddc47a","authorName":"Giulio","authorEmailEncrypted":"LYKm+br3F0IIv3/ooV3Yf95O8Vmpy6za6n1SZTUQGH5SxJWi2TDvVJmNqvfoFwq7ZTeuawWBXkEnnkkSRB/Vw1hqwfA5MBPGhsRmEcB0pRrB2lZcgG70rComP6Z+V+uTRw4i3m6lXjAexG3rzaOnLqmKTYY8C+QXBMxl8gFiFx/PlqkO33Sjxs/YcjVuCOBLpn3gB//efiCTjzmVf3QHwEwlM5LyD4VtlJp3tRcfo/yU6CZI0yZ7XRdAHCEfMPrR0j2K8Q4Xd8avBT77VHvELwzdyKZKPc6U1ZT8ph7NKgBsBSvZd/p+H5ipPHKEaPNo4urPjiy7pPA4C3/UAz5Y5OHoM0AEqi1bitOlXn/oUG4yHBJIeBSfwBPilmfs/m6Kqma3N1fhgTz3V9LmPxmfWWYQRYn90ctgr7ln9i3S2A2BgQPg/dSIVayrHwIh/EZOUWGFyPyX0sWxxLqtb8mRIOTE3Tl8EtI4WjLbq1UznXZp7lNNY44j8+3fFxkS0dZLOjuZGG5xtXxPpDblw4u8RKP3BfMCzVIFpVySQF7XGXMdUm6PIBQSzcaMDUX3PH/4hhLZt9xEj9EybOSMKaMmoo5+PyG4f9PPHMbLUUe8lXM5zY+X1jSjfTfv/d+w2ym8HeoJXVCyzNYU38v8fIXXRMnl9Lp/Z2jH8kmcAgZ+qfM=","authorEmailMD5":"d040d48dc09031501a031acd841cd580","message":"OK, I understand this. Just the comment above the placeholder was more generic. Thanks for the clarification. I don't really know ToListAsync but I imagine it is like deferred execution (like iqueryable)... If it is a similar concept, then it will block the UI once its binding requests the content of the list, so it will be blocking, just a few milliseconds later :) sorry if I misunderstood again","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"869dad8b-42d8-371f-9909-7d60c582b54d","date":"2016-04-29T18:07:04Z","timestamp":1461953224,"authorUserId":""},{"_id":"869dad8b-42d8-371f-9909-7d60c582b54d","authorName":"Stephen Cleary","authorEmailEncrypted":"sD7N7GtQNWGaZzF/DUmpHUjj3wigvDqjSFP9Cp8zyA17lIWdAvRNI9EZ+S+uML4DmJ1EZzeAuClDsAR/qzG8cfhXLTYvd+dk1KBRwzq837EoBlyfbQGdNEAiqQ8bqlDFWjwzmfJZQsTzUXwyHtdfv3RA2eVPmAqGrtHl5sgtoL2YNtXK1wPPwULhYLI/6R+QmFs6687sm0+bDr1Wwt58nvFS7NpT36G/rSNaDPLVGm8fJdqoiIbp/RoYvb30WqlJhjLicmLT5mHplHwOpIxK3i0Txq7KP6lc7REr6HtA3ISDBMMDwEyGH8NX3csFPxep4dg2/z/81D83KfTzqRx2shFXSanvdql5j8r26mLWGxcQjYW0KkfSkliZEKt8UsnTBwmSKArYl+ysDYscE2sC932HsU65UTJxaWbT6drBbKmUxOC5qx5/H8iXYCdi0j+JcsaIcbynAKrXgsfX8PDe8W/uG0J24V2YfX6l64EyZrTAgLXeYoVP/i22aiDmWCdu5IFjT3LfNm0NxGGfR0pZZbhYQyxyrvg2fyKYfTaejQpYmwdc83w9Htrm6Y2SUiNKOJL66SywS4Swl3KOdjsQWZUVmjGIPgFb4zm8VW4g/oscJ6RYttSegQ6NkqdPmmLnmQaIm8QYDBpi0Mxc8uSEwzVKEfOo1+i6NFNrOQh/FoI=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"The `await Task.Delay` in the sample code is a placeholder for an asynchronous API call. E.g., an asynchronous EF6 query like `ToListAsync`, or an asynchronous web request like `HttpClient.GetStringAsync`. They are asynchronous, so they will not block the UI thread.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"ca6f8460-5d65-36ef-acba-ae07dc12f5b0","date":"2016-04-29T12:04:45Z","timestamp":1461931485,"authorUserId":"disqus:stephen_cleary"},{"_id":"ca6f8460-5d65-36ef-acba-ae07dc12f5b0","authorName":"Giulio","authorEmailEncrypted":"sBH+10osEAFWtVZTufQb3Cjq3j2MKw63vbUR1uXjIkDh3JxWEiKyWzq+Fe8j/wPkrsLpN8laxiTnGzjDYFEg1pzjn1u3qT0rtu8seYoDbrvDcQ0uILYyNA/KuEfv3zZsfNc3qQlQUUFrHu9vr2akMS01vQHS5/T3S+WHpMuo1ap7OYKweDJEGVbhetT3uHtO132QlMinyg5lwWBZWd3jos6gzPGDljX4aXyVfp1Vr8u+BdBt9dm4+FKAeeSLc1DLXdvREDYrTt4AJ763DUAA3mU2sukY0ZggcCKRD5m86J74w/27i+Lk4nBx/Iq4XYaPIFU9PEpUJAwh4zNFxhM+ndjM7GXB7Y8XE0Y4pN8YJ59wmHtMCOzbZ7iS8mEo8LSQ6+F7PGvUR7KENNbjXspLTeq+HTmSGM+qRENhlpSo0znF4cu9E8PdLXpj+96sB9XC0iHFmRtvjgckp7SNIpiPdQzTydo1fJyLsvcNA1NDEUzA55nZjSzcP5oa0NeP0gi0wgymPV3/JqfSJAMQEtD+GRAc9h7xpw/LH8+SiPdkVU/UE05Ue3FudfPwNTYSAS5ayrSyGH2owhDJFynGhaLC47Y8uBXX8oTvbQMmbzZFToeH7jI8sGMLtJFyZATgU9VbPDPeSTtqbwrUqmi0xCI2g8HiAtTpSKF0bR2y/KdVH7E=","authorEmailMD5":"d040d48dc09031501a031acd841cd580","message":"Sorry, I don't understand your last example with RetrieveValueAsync. IMHO async is useless here. In the Button Click I will have to do a Task Run, otherwise db access and web request will block ui: thus I fail to see advantage of the async here. Thanks a lot in advance!","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"","date":"2016-04-29T08:55:15Z","timestamp":1461920115,"authorUserId":""},{"_id":"3d5c9354-0fc1-3e68-9d21-7ca3c7c18413","authorName":"Stephen Cleary","authorEmailEncrypted":"WFKI0QiSo1O4pWe9HuxyBgao1/dAIPxIZ5Q73eAiYOPbo0XKsabyqNNgHErFfsGCAXyVvoeiS3GDhd0wEAMb0jUdIC5WZS713WcyZwvV8u3ZJxDdBHYDDhjdqRplaElPMLVlK3cr8nbUzWNPi6OrunoB3n1yE8KeeBq/go8yhnfOlnuokswuYI6K5b7HsAFjB3cBXqk1SqpyL9vpxeQmMCO7eG78g6SdGpqO29vJdEWJQIE4T8JRwz4aw1AEukXV8g4Qbk4IUED0y5FG0teixEwW4yRtAZrSj9/0R2w6M99Pd4NbPJ2iLas5FLmPsxcR4JOXuzsVrq6Qxf4NMRopFYCvcp69oW9tJ5ilutlXHzisCVqaUCHud0f1lmFTCr8ddJUgx6jp4DhPf5XMumdHp4WK5WCkw30t3UwsK3bQz2HWrEtS9coAVdxXKwDc0gkmXNIlt0R46prhnGKqJT1ND9/l0PO+/RCIDcxldnxk9q+nueqk78KJP2u8nGSU9XY07y/weqiCBKV+7ioOSQAgb/qRb/1FnDs70Y85tZtgS+4poaCgzuSc+Af/K8TVLN6bRrCi/Ssz/kSii7wjGAyjkgr9DKlp4i7NTXPft/o+WufJei21t+Y3uqHklsib1h+Na9i++OzjQ3JOe4I+OmjQJk+5unISkSLvfiV7SMFnpwo=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"No; it's nonblocking. `ToListAsync` will send the SQL query to the server and then return a task. When the server sends back to query results, the task is completed with that result set.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"64fc3dcf-de7d-3448-92b7-09e2d0ddc47a","date":"2016-04-30T01:39:35Z","timestamp":1461980375,"authorUserId":"disqus:stephen_cleary"},{"_id":"65c7d7f6-cac3-3796-a519-22272b53be36","authorName":"Giulio","authorEmailEncrypted":"K6dGLh5zOKrglUiT2P/6uzaTN1/G55lH2bKniZYZ5hwAZKkpOPDZbLYZbSmyl41xOONe1UyIWmXQ7ZiIELj83TR9ifnuYol1S4g+t4KwFsvVA3OAThnWs60QxoxpgvZag/Jzg/fKeGyVG2x5PK5VHhroNsiT0C4rC24BuCbEM5rcUT2qcojXGogji3iKL/4osWzdiHvxxioLoqFvWw23zhcgbpXDIKkoEkPa47V3H8aI6vB+Pxznd553VZf8PfZNBsBSW/erb98xkIaiHvmGgv2CiJZ+9mFo7NIUB+GhWvO5hGMwRcSdN2Wc/sQzQRBsXO8Ve7DJRTnzOV/+mx5UH+3HjAyDb14lt2P43RBiGckq9M7U329h1K04MKdJuG+el8+G5c3mNFMYtoEJA18Ouz/HGDc9eV8xXMPPv4Tsa3tJI/CVQayb+RH3YBUzkQDXU1CWbPFYRjsxGkWPPvnVJ6DzM+JumW3OHNef5M0CxiSdizgcaj2levUf3y8kceFspLL9X7xkNcfB2eu9buCv7OutxwZOafNtIA1kpnwKJK8w2ixfDhsHtqLuftmp6pqb/ocQS+DjPDc4NLhKu1Cu1wrvJ+ThWXE4JDewuB8FzMVD/y9b1di+yZDsILUS73mogGF6HYmMmZ5/hwKmaEXNAFWFjn8zO/mq84ELwGY6GM0=","authorEmailMD5":"d040d48dc09031501a031acd841cd580","message":"I will try... but I'm not sure if a can build a small demo app for this with Visual Studio on my laptop or a proper SQL server is needed (in that case I would change example). In the meantime I've found your article [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/dn605875.aspx \"https://msdn.microsoft.com/en-us/magazine/dn605875.aspx\") about MVVM. I think this is much closer to my situation. I still have to study what you write.... There is an interesting part about binding and async in mvvm: that's what I'm talking about. (Side note, off topic: your attitude towards mvvm is a bit surprising to me, while I'm striving to understand and apply attached dependency properties and so on...). Back to the point. In that article you write: NotifyTaskCompletion<t>.Result is data-binding friendly: it answers a key part of my question... Thanks, I'll try to follow that link.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"3d5c9354-0fc1-3e68-9d21-7ca3c7c18413","date":"2016-04-30T07:20:06Z","timestamp":1462000806,"authorUserId":""},{"_id":"7a4bb2e5-d718-3ea6-a312-b0045fce6fde","authorName":"Giulio","authorEmailEncrypted":"MojpJwA3fQJrMcBmOo24/U38Dbh1D/O7UXp9gge348JnhOeLhnGu/kepMHbquxwzR6twzHHKsErSQ0ABzPhIIsVjtQMaXeCF4BMBDKvwuEA12zD9dYiz4r5b4ixkhoQwqr4pNdkKabqwIUYQl51ANOGd8snjcAFnBF3Y5v71wD64lEr1vOVnhsiI+F6T3E/bi0gaEGHgfZXqRbf8yhprIE1NROSKT/P3CORj4mVQXGwU015wXP+0LImtRG0JHtjqXczFmIigQfneCyZ6UtxB0z2d9YN2Z4/GyLfkqbKZ1qhJvWYyn7KROCz6ByHyrmnIVB19+uhlQ/aDC9KkhqRXT9Doi+CBQSKwvbgZ0TKi8L2L1FyVDyzDvNjaqxD2FJRpGCj6gT5AS8cnYKkh+NrkqTf4hEZIyUwtxmG90tAewq9IsgAFhKtWM9pyxO2nmPKHPWu4XfMGNRD4IWIM5teFsvwSv1F9HfebErJ44lEtwhKHOv0czwjGu6X+tUEdJEfl64ezRoLESSK9ZkkqEODxSNDDJ4irAv0JKW0Gtk/wVx6YZMNz+DzVg4s/IdwwaYcW0fcPoZwD9xR2NgiWHQ5M6ILGhP8O2Ns6xC+X8q9i//+0QxxEU6ucrqvpX2pMSmKiR7HGT5Fhtqc4I1ZFAWrv63wY8lQvGjQfeDus28oyzG0=","authorEmailMD5":"d040d48dc09031501a031acd841cd580","message":"Sorry, but there is no comment section on that msdn page. What if you want to the change the content of the Label with Binding UrlByteCount.Result through a Button ? It's absolutely not intuitive: I'm wrapping my head around it :-( ... Please look at my question: [http://stackoverflow.com/qu...](http://stackoverflow.com/questions/36956334/async-mvvm-how-to-change-notifytaskcompletion-result \"http://stackoverflow.com/questions/36956334/async-mvvm-how-to-change-notifytaskcompletion-result\")","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"65c7d7f6-cac3-3796-a519-22272b53be36","date":"2016-04-30T14:51:24Z","timestamp":1462027884,"authorUserId":""},{"_id":"b56d8934-e044-3517-960a-29fad7428d88","authorName":"Asif","authorEmailEncrypted":"mMvrDvPBXolOmSCniKMJJhC42Na+XrefcfMWg6WQ3LJlknOMioFGb0XYpSvXS5AzOoNMyMb/I6qfOHCX09PSQ8swgNE/Uls1SwT39Lf82uTtHo3Uc7BogPyL17w/rIiGvQfWCWyaVR0JXYOq37K3ETQK6LwU4/sx7FQYBehzvzjfjvxZe2fDf7ZO5b258owSKt7OgrbhIUosq5HYNSpxf10XJeDaLTmDz2wkvBm1EZy54o/DQ5gGlskoFreydomQUuQiGGXx3ltCmqrT/PzLPkLWJkVXf3H3zCqaW8E5D87Q3ShFJbc0hCvtPpHvzlqDR+uSkEd+LDFJod3K3RSolxjhVY0V/KPtkk3lHS9deUcAUUqQPzsw5S1nxdpyJADIYX4ALAvTM3YeznVwY/7SgDYkZzeDtXAFdzg00y8hBGb5SNPpzVJiiez07tHnH8h/ko/TMbZsm4xdviL3zH0QSsmyAMgaJ1WgPxCk5/at3os/4APc43zK4JCVuON18W1/2lDASJ55WBzw5HShXxcaSGFTYH9j9MHopTWDOGoEa0tnNmCjRPCNRTNaXRt/1Vf94IlRztBPbe0KbR+vGN/RzZND91itBgOvBB57r1BGAiFKLnrI77oNJnTOokk1v7lttsTVlV9uBKmJW6oo+AlDdGALhcAyOGlE2xGKFD4WbrM=","authorEmailMD5":"1f2d98cdcdb3bf1455f23f0221c6092d","message":"If Chris L's situation were like the following, would that then become a valid use of Task.Run?\r\n\r\nvar t1 = Task.Run(() => ConvertToTiff(filename1));  \r\nvar t2 = Task.Run(() => ConvertToTiff(filename2));  \r\nvar file1 = await t1;  \r\nvar file2 = await t2;  \r\nreturn Merge(file1, file2);\r\n\r\nPS. Thanks for maintaining a great blog. Very useful.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"8fa07172-8556-3b97-9658-cf3e7f3f0b49","date":"2016-06-02T21:32:07Z","timestamp":1464903127,"authorUserId":"disqus:disqus_x1Q3JpMQXr"},{"_id":"0e2f5dce-8764-3eb2-830c-3ee8da08a0a2","authorName":"Stephen Cleary","authorEmailEncrypted":"qTc4jeM6BFxSmDIVDoCwA27P/Mqc4qzzwTG7782Rnr5/NI/DXmF1zFsg7BkymYNKawPAGkYFoRHcxBDrOEjaWPpY9ib8/3xKKX0fRhpFLxHK8TH5ve/5fntW76hKWBeUSsRyi8D1Qz/ErTTdMCJEUP7YTElP25kKeLkrhMBCM2/18+s/LXfIrZcxf1NyzFfV+XMyBS4T6ktNF42N/8k1427L8Z5nV7jYt2xOOoI754sKb2Gr9u4wvUfLRZ7VLx5sJmAX5JiqY7fcnNpNdZFtaP7PjHfELb1mklK+0j/R7gIzJqKgXJuVuR7ImqmzjP5ngbg7out44+iygbNcfN0SZi/lYN5QOYrUNkER0CQYCeUW2N1Wo3B30d47PnpdhodifkEOlnAEs0DXWLaHzXxwZKZyoDj5Y2bruxuBfJqDHlP6MeXTQJm+z/h9kJONtWIWkoyNqAd3VYuCpyAhykqFhp7DNNn/gFUec9RpX513JbA59NqWQFallya1ZEqGS+yDtRVto79rVqnqeEvwrUX7BcWsoYHgIHoQWzwcEpGxGrdM1kohzIeEGFt6IeEa0F/BF1AoqXa5dA1clqLJoH+FxbWGHfBE5PjC+ah2pWL6iNb38/q6q+TGnxxYzpDs2EJNGbd/kX+0nyrApKC8y6uJeofsuLqufxiILR8iQapO7JI=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"The code you posted is doing (a bit of) parallel processing and treating that as asynchronous operations. I do use this pattern in UI apps, but I wouldn't put it in an ASP.NET app.\r\n\r\nYou can get away with some parallel processing on ASP.NET, but bear in mind you're now using multiple threads per request instead of just 1 or 0. This can decrease your scalability significantly, especially in bursting traffic scenarios. I'd only do this if you're sure your usage will be low and stay low.\r\n\r\nTo be clear, I *have* done this on ASP.NET, thinking that I knew better etc. etc. and got burned by it. Recently, too - just a few months ago. Sigh. :/","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"b56d8934-e044-3517-960a-29fad7428d88","date":"2016-06-03T00:12:07Z","timestamp":1464912727,"authorUserId":"disqus:stephen_cleary"},{"_id":"964d8956-8457-380f-96bf-6f12aac8936b","authorName":"Asif","authorEmailEncrypted":"UWhsDgw+9Gh/PxX96ioalSZcxoNCMyP4YlkDk9eqI+JofNyJy9uS/Mopht4WMPsKxOk55yxS6ZSpMptP+hpXBM4iCZIh/eEmn6JzGXUCUwKfkM2+BbDJp4RoRt/79cCnvuBioTvbxopEdUP3c9p6k7DS80utEuES0CITRavMBasJESSLvg3ZXSgd/em5A46SgMULX1qVqGzv0hRXY2wIdf3W/9gHyb9p6mEunZXMmwAqlvQKMxwsxWzXKAXM4SBOEuRqqoSu5j+pCOCLNnB5ofm+mj5MBO0ict4pv4EfgiPVulhsGhGz/odgNVHvXwV06t9C6TP33Cef6MHlNFsLgbqLUF8+BvtanoptSB6O5Ev4BQAITuleWqH+VrASyrASILPyK2FHPukEmBNGlR9vEFBpHEThszSJomrHnhwQJ6Lrr/A2/bPfIXzGU01BAz5PediNkalPgz8+dQ1J9qvvA8yO9M8CmqydjyMNgHnP2m5ajF5rYk0LKc8rkix5tct0t6rFJufDeheWJ1JDO92/mwfqS7D4nwaCFggl9bmMr+UQ8sCfv2BeemetGoaZfJI4xJ19tyqNNQBCEdIs7kOZMri2Of7i6g1MiTBTRS5EsW5fXW0qH+zSAq0rXl1qDlIvqxkWriVCeZdpaeEFmnLWcR3oI4Qu9MkfwNKYJa5KzTU=","authorEmailMD5":"1f2d98cdcdb3bf1455f23f0221c6092d","message":"Thanks Stephen for the insights :)","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"0e2f5dce-8764-3eb2-830c-3ee8da08a0a2","date":"2016-06-03T05:51:10Z","timestamp":1464933070,"authorUserId":"disqus:disqus_x1Q3JpMQXr"},{"_id":"3aa84c01-81fb-31be-b5ac-52281102c1ea","authorName":"Nathan Phillip Brink","authorEmailEncrypted":"BcvHZfNr6aFZBBXLus2tA4OmkLsYibt4LsqPxQykwzdWPYBTzWMwuTmremUmW+LTFjaWa6SdkU5WGp1jOL9vGgwviWtitUbGjQjOzsyjZ8VanCHgK3AjhueCLsQLO2du68VanBZcPhKOCpJpK0ydUXTQqMvIvW7inEuSOYkUuyfdN63+U6sw8VOs/h7VpxwWocL02sDwa1WuWwufxbM/JQ9ft80L4HGlKztev8O8zu+dgIYed+PKGA1z5mbKn3CqQBmTpPJ2rz3NTsKiP7eMBElFrJtRDTHwA+/RBDP/PF4yFoExBcBCyR6R/a1ib30JLTP9bHFsvwKL9mmEEewqmNxcn30hjF4kT5grUdPsXHbGuKFQIy1fSoQnRQGZVJkE3uUyw/XxY8jxDovuT0IMBhKCtdfUO50H+a8IVwXqQsH0X6BvdASh3TMzgQxmAsrdAJMR9416sxauASR0nMvZkVaez/uvpNnKtMkK2EC2JI4kAlPrqhxyChNmMM+pUCu1zqe5WL9CsxJ5iX3ICTP1OMVcsnCDDj1c1ao/pfgI4wucPbflUTicJn4U6b4fOZwdIts0T86FovlDJI5vriOR6fNgB2JmmKn4ZGVAeWJCtJM2r9gLUZ4ktMot7AkLiz9Y4U3B1pDCQpK2PILOfkx19n7C+h/2aWoM2cXvBVjHrtM=","authorEmailMD5":"a8defe14b1c80bc2bd59a1fab3848cfb","message":"What about blocking things that have no async implementation? Like `File.OpenRead()`, `File.Open()`, `Process.Start()` (which I assume has an implicit blocking `PATH` search). I’ve heard that some of these functions don’t even have OS-level support for async and *require* sacrificing a thread if maintaining application responsiveness is a goal.\r\n\r\nI understand that just using a simple `Task.Run()` would be bad for these if one is really properly putting CPU-bound work on the threadpool because blocking calls would just sit there preventing CPU-bound work from running. But is there perhaps a way to create a custom threadpool just for such calls which have no async alternative to keep the main threadpool performant *and* keeping the main application responsive? And, is there a way to keep my code concise if I try to do things “more correctly” like this?","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"","date":"2016-11-07T19:27:55Z","timestamp":1478546875,"authorUserId":"disqus:ohnobinki"},{"_id":"8be6d5cb-146d-380e-b0e1-7d0e70e74f40","authorName":"Stephen Cleary","authorEmailEncrypted":"aC/bTuB2MgBVeGzcLhvQayUT4YYg0OQnhNKIvYOaTgFB3i040pAtvZqHoJlLubscF5X+TOw+2P8t4bDDrT9q0Jv08ZbUW+XHRMvwaOSdqOck+Hkkf64KzLnfVz6qsTwUOB9ElIDhVWepY5mQtY71qzlAQDtkxrm6WgZQJAEEl6qVrDfF9og1QCb/PfR+WnTVYHsy6/mY6gRUeLpr82s17T9EOn3SR2j9ulv09OII9NnqbUnn2z1xTISxxlAzSDsoOB+SO/LgxfgA5O543DtRvAqkf33t3x7EqTMFcQ9JJSaGzxTZtyC3+oRKyR9SP9k4gyHcJ0vjbek0JIH/0/WxBW8NT5OTlzwKbgDZgHyB+Mtm3RKKzaJNRd3c7HKgdJdOzSC1YPs89Cecdy5L6I39B2Dj4fCnKdAK0cOPcxGy6Itc2FTocs3D5vve7CM/tylHSqv3QqTJWYCofz5oyMtLhNuPnE7c/QlM2p0cvsILjDd3sJh5VVV0Tp1XMz2smCbfU+eeF2SngPZ/5Tyv6IjM+M6LxSzxDrqtgKn/CkR7JO2dDKM70GpeQ/RKkmepTy/Yr9xAj/Be4kZziW/GqXIgXqtXh+NPSvnWYCE91I/9k6sdFhjCWmnlXPOgdv7DWGn8POHRW1YKEzuxew62yTnWXHCV5sRqAnmFFB+1QyLP2c8=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Yes, those are all examples of methods that do not have async versions (and should). Win32 is where it breaks down; async file/directory operations are fully supported at the driver level.\r\n\r\nFor these, I would just call them directly, and consider using `Task.Run` from the UI level. Windows is still a preemptive multitasking system, so this will block a thread, but it won't block *on* a CPU. For this reason, I wouldn't make my own thread pool. It's possible to throw off the heuristics by running a lot of these at just the wrong time, but the chance of that is so low I wouldn't worry about it.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"3aa84c01-81fb-31be-b5ac-52281102c1ea","date":"2016-11-07T20:13:53Z","timestamp":1478549633,"authorUserId":"disqus:stephen_cleary"},{"_id":"878671ea-c336-3866-8631-3e51cfb5c1b4","authorName":"Stephen Cleary","authorEmailEncrypted":"L6/lQP1s16XvGAXXx+tPJhRRFqE2l+vVKaphdaIOtDKq9MhBMVaItFoXP8lbHhxA0nYNC8Ryl9AUorqs9/SC8V8ArPzZfaVD2PmyXhz4EdoeBoLjNHrdoun9pTaL0yAEGwLAR9YwMOKhjh5BILkiPWPOINNhnxZQ7oMUcX9FeDfEvC1Jpllr9QG2zPv8xonnLuQzSsnDa+qOJe8ubnJB/7BaCy5UZY+6Pf5BISZshOMH8zH0AUW2Hvc/53lcVlBYPe/k/mEYss+yMgPBirNfSx+iIcwnOylg3k/WF1zDCDmbu4u8RfNe1T6ujBHUlnRufjyj87ml97EAKQku2HOoYvpqfeQ+3mwmg1+gjt/+4RbVoQrKzxUNlKd+6pjyOTgaH2Oo7ZagmYrFBJ+k3LtV8pgR3CeX04UwHkbetk5on8dkOqnOcMjv/JW0R51Z3Gtpl7yXcQr/oLxJLR0QBhxO5b8hlrcPKjD3gnxibGZnZged6FZCxtpP3pgzzsplPuPLahAMTZxVkjD1AHz2i205wAeJXsV1WL9Big3P/wz2siHfwGTIr3LIDfBNhrgamvsv7KCStjMKGaDPV5fV89Qe+X4v1n/JVPLtZMsCPTjg60ZWT9aUcIMA0cP3nGuSQeAaD/rvgIXdkmBTi522JfcYnAI0wEiJmwy7n7SATlKsY3A=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"My position is that the best solution is to use asynchronous APIs. However, if that is not an option, then you should first file an issue with whatever client library you're using to support asynchronous APIs, and then go ahead and use Task.Run to push the blocking work onto a threadpool thread. This is not the best use case for Task.Run, but is a perfectly good workaround for improper API design (for UI apps only - not for ASP.NET apps).\r\n\r\nThe blocked thread is not going to take a core; it acts like any other thread in a wait state and will be swapped out.\r\n\r\nHowever, when you do use Task.Run, I recommend using Task.Run to *call* the synchronous APIs; using Task.Run to implement fake-asynchronous wrappers for those synchronous APIs is highly questionable, design-wise:\r\n\r\n[http://blog.stephencleary.c...](http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html \"http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html\")  \r\n[https://blogs.msdn.microsof...](https://blogs.msdn.microsoft.com/pfxteam/2012/03/24/should-i-expose-asynchronous-wrappers-for-synchronous-methods/ \"https://blogs.msdn.microsoft.com/pfxteam/2012/03/24/should-i-expose-asynchronous-wrappers-for-synchronous-methods/\")","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"d52e1275-e85d-3f9b-9fa2-25f38a5c0ad3","date":"2016-11-23T14:03:32Z","timestamp":1479909812,"authorUserId":"disqus:stephen_cleary"},{"_id":"d52e1275-e85d-3f9b-9fa2-25f38a5c0ad3","authorName":"Mike Waldron","authorEmailEncrypted":"ukBXWLpEJILtJ4QFQZb9vM/bLUFb8dMJOvfXCfgelXfkeO9+LX34GTCt9ie5zoKojh6RXxMFHvsE2YZsSLvTef140cB5xa0mi4VtpLmtHKnHCuxxME/DLXbYDf23ncvbmekvypMKln4CjHlA2h2Wgwgl/H8W41Ib2VD59PNQVg8f5SksT+z2BrC2ozkCWUfVkT+00+o75+AzgymtRPUTIQ8+m+e/w+iA/tlbhVorF88+B+Oku6RqlIoo6O8PYzgRYZPJrSRGeFL0zZxZ3ym4jydq9t6xsxHRYYWYwipzqN7WN5piTaaZ//d38fvUg/wV+GpCXwRcSL4W6nf+6Bns7NaQUnY3I4kZjh/JBFtcseodB4evjNR6HtcspjlWVJ8NBwvXC6psMqH5VTPpVEcl/7y+uhqVfvBLHVvPBVNh4q5fkuGzGwY4/K2q4L1hzxA9TDn5iami6kx+w27+L1WRKi6SSVyxQK8oZXNcoWdM46SXfya/gw2u14N5MRtyV1TyjbL46tyc7IpUy2v2X19GKCU3xtyYyeJAs+OCTIf7RJCm6uSPTURYX879O1/lNLnChHIpHfZL1A9J4eXFlvg8gqq9u4CIjKmC7CzPHaAI7gs7g+QoWSzCK2iVhI+RX3mRwBcGiNR014ceDhp7ckEwS+EcJIvW3pKCqzIpvMeqNYU=","authorEmailMD5":"568ebec42b1b05a894243580ba4fa18d","message":"I'm a very literal fellow, so when I read \"CPU-bound methods\" I assume that means something like \"We're going to multiply these gigantic matrixes the CPU happens to have entirely cached.\" I never need concurrency for that sort of thing - I'm always waiting on a web request to complete. Where you write \"It’s still executing blocking work, blocking a thread pool thread...\" that doesn't sound too bad to me, as long as the UI thread isn't blocked. But what I think I hear you saying is that the blocked thread is sitting idle on a core, rendering that core unusable to other threads in the meantime. Do I have that right?\r\n\r\nIf Task.Run is not suitable for freeing the UI thread from waiting on synchronous web requests, is BackgroundWorker a better tool, or does it amount to the same thing with less syntactic sugar? It seems 85% of the web server calls I need to make are synchronous-only (no async calls available). One way or another I need to make these synchronous calls without blocking the UI thread.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"","date":"2016-11-23T06:15:54Z","timestamp":1479881754,"authorUserId":"disqus:mike_waldron"},{"_id":"4f854d99-96b0-34cc-af24-b9f0a6046b17","authorName":"Vincent Gravel","authorEmailEncrypted":"LyqNJHOUq+HHhOd/mb/WdUSM8Q0GDPQ4dUFaX9Sn9vEN34CbzAtKz8Bbmk1fvOA4qKmt3JPXqXS/7hyKfnsSY4g7Ft90iWhz+1tFS3D+n2QY8h0sbvPxF5Rq9SXt/AQL6N4o2wLCmb8MqZ4UHI9PElW+R3QQMgIb4s7e0JaHy2MGf+fv1tMQ1dbSj8vj6xy8SlFo6CTr7GMPdK3HibqqCN16IJsd0FPHT/eMaZqpU4V5sGSJRTyhIgpkOVr1/vgoZnmJNraSdPRtQZNCpxoq4tOPK69x7J8S++OzPQzSUEa6J5/jZdT1ISsS+McBDs9WuFL+/cNyzkmNcJfIds2OVLNERRRLrhSKXBxKewQPWeCrejUNzHMPm0zQVUnUCyZ6Ko0B0fUwZFMcpZaglWGTHV85JbbAwQQ1WTK4ZQdOtPAPHpWvwj3kaoHHdzW7Rdd5dwb7VsU148WNopyrFZ6354DXqJi7DIE3RPXCkYyJVHTIacv+bRPUN+11a/5Gy9CYnE7Z4MTu8YURzp5b5UQSYOLczs/wDxEvAFT0GC3zvqb4pMPxPs1oYLLJJDVjko76CRJ9Q38tyyywm4mCY/AOdgyVAVCZoO6uguHsBIh1U6nWDYRarRLoPe+N29ygo+HS0ZPhI4+wB1Up6d7bLMCzc1kaG4FRFfDbgeE0TAzfwGs=","authorEmailMD5":"4e9d619f1a01bbb4f1c209dbbcad2498","message":"Hi, I want to do an async version of the method \"DirectoryCopy\" taken from this link for my .net web application:  \r\n[https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/library/bb762914(v=vs.110).aspx \"https://msdn.microsoft.com/en-us/library/bb762914(v=vs.110).aspx\")\r\n\r\nThe problem is there are no async implementations in the .net framework for those operations(at least I didn't find them). Is it fair to wrap it around with Task.Run even if it results into a “fake-asynchronous method” as you call them ?  \r\nawait Task.Run(() => { DirectoryCopy(); }).ConfigureAwait(false);\r\n\r\nShould I still named it \"DirectoryCopyAsync\" if I do it that way? Considering I am blocking another thread.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"","date":"2016-11-25T21:38:07Z","timestamp":1480109887,"authorUserId":"disqus:vincent_gravel"},{"_id":"57eaa870-9391-3a68-ab08-25c214628ae1","authorName":"Stephen Cleary","authorEmailEncrypted":"r70Kq1GPg53bRzI1hdagozCXk6PCJLfUGuBXqBoX4nNesQ6T+sr0JgxPOaFbeh10KAG6KJQBj+n82BO1hdiU49psL35CkHyCj/tDCUwCtrsnt8/J6Yn/eClKq6Co32r7rSnP88kOgqLDJupvOBUR2BbLevWmDDu9WVr0AhLWxuObjU0rihnKCDpa2FPUbIc9a1RkK21YwfQmVIZqNwP/6zR7YABg4qUG53nGpe2mJxbaBD8vyIIj92xe8aaZZXkbD2lniHPGGPPJuAXxoGlz/m8lAWuojeURliEjq6ssamY0gODNZ6c/wgkIJjxohiu+lp0ORul6WemnFXpa5o6Z3+ISKyJC4ewkCZPy3UnQrhPIBs08UNISZ0ZssEVfaNwpG8+tm1L7UlLyEdy2lTEsZkimikpamXeAsFlPvT5nusKg8DC7+q/Eatm0L9vfOAsgDkXcFPN2aww3YPJq/337l8bK63irP4zp7l6AWGt2yc1RtBUFDarQik2fd00KteGnh5qqP2kjewrG8k7BPegsgb9xQhkuBAA8N988r/w6T6mXYQE5WLUsOAO048ZzEch+AEQT3l0/NdEIWTAprfDkYEi/X/H5tbL5TMPuk8xpms1QDdaxN0ZwavWKEUfDxjSK3qctU6c8eMUy8x7UUVcPxei1odVbR/9JIvNd4Ae+s38=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I would use the \"Asynchronous File I/O\" example linked to from that topic. There aren't async versions of directory enumeration or opening/closing files, but you can do the actual data copy asynchronously.\r\n\r\nYou should not use Task.Run on ASP.NET.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"4f854d99-96b0-34cc-af24-b9f0a6046b17","date":"2016-11-26T21:50:43Z","timestamp":1480197043,"authorUserId":"disqus:stephen_cleary"},{"_id":"4884c2b4-a4c1-397d-a0d9-f25edb47bfda","authorName":"Samuel Bamgboye","authorEmailEncrypted":"sMGCvsVEhS9JTLxr2pS33ntc+w42jGHt+gd+1AQxGWMJ0OA4DrdYnBrR4i+iAOM3IS77feKXjVM2yO8wLxc9fSyOFddW2ZXp0V0G59G5LcYxBgmHTdn1FNsjJlmcrDwRsSeW4DoR2olsZ/FqItWVZ8JFw6F9LBKqvMi+QmsRdUuI1izjC7zZaNzktC4afSh1peG7BIVszVHbYE8+TQAv7KzJLD9izjeqKIpv84bdu8VPI3Qk8AItZLmundY7aZ7iqRXg2t0m7m8f7s+ynFcpj9XVqw4KASLeFy1mryvsxtPSBV9SW30AMPFe2mHa3TSjoNMtKi3hti+rf4H+udX2Y22SpMIYEjXKDWP8VMzEfMBCEHlyzzj6bAt8CWPo+NU8zWjC8cWC71rWDjVoIVLLYmZ54f8hCwPvtRBIVY/fCTfntlU2gA3HKprZ2Fvxk/IRZzOA0MnenDQX1YGo0PWO7xMu3qIoQ9XAQoyi5NYvI6664zNIw6VCZmNl9UYQuVYtbXWe86oS1QLU+7/b8asuQgdqivLY+OZJYCNIWE75Ro/sCLksH4sCrPCNvBOwBDmzDPRGyTMAKNaSOwduhOI95arx/OYiqLz8/AtqQY4a/Md4lALd1pBGh1yd5rkDWL2OFOEhWqqe7dHPr1vPRGWVgQtCY08ZPP5YNX19A0FWdLI=","authorEmailMD5":"869f696d8bfe04adc490266a5173ead3","message":"Thanks","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"d0b313cd-213f-360a-a410-4e601728fb4d","date":"2017-03-26T15:43:57Z","timestamp":1490543037,"authorUserId":"disqus:samuelbamgboye"},{"_id":"ab7c326c-5c14-3c24-b391-b85426e1a440","authorName":"Hai Le","authorEmailEncrypted":"QI1TYr3rgbXTpf3G2mYRi4ywHlXCqHGIXk3/1SvQlVSH2l69qKPQngrOpJaKEkctox8Kx387HLAkEPd7s5G18JwyaHlrhxFenmZJS5wcOWNvtsQdT2FWxPvcxSWttFoO6M+MRl6BWUQ+g+DlsvkFipj9p5qFZx7av7VjhjcFRZaNJakpplu0ukoC88YelXT+IPuvOZlHf1ivXMHBHBqiBPQCg2vqkI5fSZtCko1agaUsLBOG4A4k94pEc0ZMLJh2HnXA06gtt0csKSpuUfwEthN8oIsGSI4PiCkhm0C/iaLWE6bVR4qX/aXtfpcOHhe6EKAf1K9DrdlMdutMQAjebALEaXW7B0y7Eh4AG9LhuKy12ng3Z7/TLw5bpQdhhfsgerxgR6KxnSHKzUr7ZEs5FNr9vmGM+XK8WqnBN4+5URgnZ4askx70XTklnghvdD0AFzYIDeXiFijWVMXliYhOhZHwlo0iztkQtOFt3loZjHNyvOOLvOlAh3tSyUf/1IOjwo4jNxNMtxN/GKJabSs1gjHjVgGX9V0moIDtXYotXkeJStSR3GIfgS7hXJaZg8I8YUCR4ETLYuyHd9b1NzD8K2gkgAl3GA5VdzJDMh2Kk3zU3Eh7N4UJkdwTvj03DOK6YBEnbvbuXQNNSgwKvJdfHVeA4oc3j0H2tcjPFPy6jN4=","authorEmailMD5":"fa153687318c55d55df5e5ba8f32ac97","message":"This post is still relevant even though it is ~ 4 years old!","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"","date":"2017-05-16T18:42:41Z","timestamp":1494960161,"authorUserId":"disqus:disqus_OaaNMkV00R"},{"_id":"1a82fd02-06bc-3e30-9bd3-828d06325f82","authorName":"Aria Roller","authorEmailEncrypted":"RipfZSn70XTQT0YHUdzkrm4/rIRf113IaOmYpgqEsCwkIVM/JW2rY7zdn9/StXydaTuPFDymbv+r9Cxm+ywpJE0/jXVCQ2jtQEfbA4liIxeNMnwvmG5oA5O9d56R8FP4lflBDzPbacfLFTwqPDeKylfWdjxNsFwo3MwCWmuujp+bnWjwH6dLRA6XjSsDggifEsYxfpLQe30njVwPgEIPfH8ZZfblPwKAT5SrG/wMglpYeaTzl4D9GLb4WLYlgeqtyd8o3uq2BWu4CzVFBzZGP723UPHUiasgvILvTqghyjWIrYR4aMONoRTGD2OzVfzAqSH4buozcQDr/cET/9RgxPbQzR7BJn7K7Gu7nXUU+K6pOD6ZhkVckAqAlHXlEHGV2MqtwxpmdGO/UAbO7MOX2GwIZPymn9HaUEw5e14i+yR2o5sEY4VuiEzs6QD5YG1tu0AcaAdg7zRYUdNQP4ihQ7s34+zBsU10L0yv46y8zkmW0Z4P5A9N5QJ7Gmc24mHnT/Ke+fSqwtsa5rJ+7am/oxiMhrUv3hb7aaW7hZTu+dDdAk4Elgkz7475XqAgxB7cCFFvaCcB+FGE6WK4yem+KhXHB4pnJZljWqtLtDqbEgk9SZToF9n/TunALfNSJ2TJ8rn71zuIgXJWtrN5ODBDtkLtlidzGUrpB/Q4ldbT6ho=","authorEmailMD5":"635f80f6f28bd346fa155fb2f1f053f5","message":"Hello Stephen,\r\n\r\nI know this is an old thread so I'm hoping you still see these comments =)\r\n\r\nI have a question on Task.Run implementation. We have a page that is being loaded synchronously using HTML.Action calls. These are calling sync controller functions which are then calling an async function with .Result. I beleive this should cause a deadlock situation but it doesnt appear to... code below. I'd love to understand what is happening here. My understanding is:\r\n\r\n1. Call to Task.Run gets thread from threadpool  \r\n2. Start execution of MyMethodAsync  \r\n3. When await is called, synchronization thread places a pointer in the Task object being returned to MyMethod()  \r\n4. Control is returned to MyMethod which then blocks the main thread waiting for Task completion  \r\nHere is where I get fuzzy:  \r\n5. Task completes and sync context tells main thread I'm done  \r\n6. Main context is blocked?? and cant run continuation of Task from MyMethodAsync()  \r\n7. Deadlock.... but this doesnt seem to deadlock.\r\n\r\nDoes calling .Result do some sort of thread synchronization behind the scenes? Thanks in advance if you see this!\r\n\r\nWhat am I misunderstanding?\r\n\r\npublic ActionResult MyMethod()  \r\n{  \r\n var item = Task.Run(() => service.MyMethodAsync()).Result;  \r\n ....  \r\n return PartialView(stuff);  \r\n}\r\n\r\npublic Task<t> MyMethodAsync()  \r\n{  \r\n return await SomeOtherAsyncTask();  \r\n}","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"","date":"2017-08-07T15:54:32Z","timestamp":1502121272,"authorUserId":"disqus:ariaroller"},{"_id":"2f8dbcd4-574c-3303-9264-f584cb0c9193","authorName":"Aria Roller","authorEmailEncrypted":"CP2cJYdNUa6zE1AUE52ADw029Q+mmyv1J+mSeA4O4I3tmsWrKaeFGyqpy6TdlduDCp6wJ4/UJo5N6k258mtPSrXHyEpXTooqMKDDs27L+I89Wo+9M6CRQqk6VP7U+Nf8Z8ofFUKwIXNTR/OMaLAlLN6+2v85otSmcWnq0yq5hZg5BUEw+cVBXPKcgVxxBeXt2SULtWQSkBAH4HDWZUqUwO/9mQKnHwNz8/RW9wPYcYpePdOo6Pxyr/jbzRdx524+ODXXvsaleiw69VO3m4wwr4zYOOf4xTkaZpRfWZSUxs1C9KDuVwFX2E9vPeu6v70u7HdpiGVR/bT505KDOy9ezhEKk+5ixymTKWckcJllrPOytp8g3PSepj1tiDVBhKIhl/clsFNmJ+V1ESBwU/TRAID4cDV+lPYJmXBpH9vasuTta2QB8Ppx1+1kNXo3F2m17hgWnZ9oWoHXF9Qfr+lcKtPfzhHvxKOHutP8sYLcWaZixDsYMasYbvdY6n2YXtHdg3u/USdp7bidK8Lac4iiinip/dtJawnviVqnQxZto8G2//H+lY0Dj6dikd7oh32Rcpe9tXZoKHyhglFEHm/HS1Sq9JkowAHEW4dUCIg4HNuU9e0iWZYZ5N/v2LYrXo9wU7c3Lal+aQdqCcg3bBbSUM4+zLN0ymkG6LDQ5IGjWDc=","authorEmailMD5":"635f80f6f28bd346fa155fb2f1f053f5","message":"Thank you so much for the quick reply and the reference! I did not realize that the context is not passed to the threadpool thread....though it would make sense, since the execution is blocked, there is no need for a reference on where to resume.\r\n\r\nAgree on the bad practice. We are updating this code...I wanted to understand the deadlock scenario.\r\n\r\nOne last question... if you call .Result on an async method that is awaited.. does it block the main thread? Again I've googled this but I cant find an exact answer and my understanding of .Result is that it blocks. However when combined with await, I'm unsure of the side effects. My intuition tells me that the await call creates the pointer in the sync context and .Result isnt actually called until the Task completes so it wouldnt block. But I honestly dont know. I dont think calling .Result is appropriate anyway, but I'd like to understand what is happening?\r\n\r\nSuch as:  \r\nvar result = await httpClient.GetAysnc(url).Result;\r\n\r\nThanks!","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"c283337d-d392-3a84-94c6-cd0681dc2fd7","date":"2017-08-07T21:40:25Z","timestamp":1502142025,"authorUserId":"disqus:ariaroller"},{"_id":"c283337d-d392-3a84-94c6-cd0681dc2fd7","authorName":"Stephen Cleary","authorEmailEncrypted":"T+v9s21MCGuB70zKr17wfZ1vdAXfNw6bgQfJPwpoehUWuLVeA2DuUs3PrNT9dpUggkwxxT1bGLFUwH+1iBgrq99VmlvGKtd9JUzI1Is/YTCti+oH5k4ztYxzoPSNlLwhoWoFi7YcF6dk/XD+LRnm1pKSjXZW9Fr+B6/9wX2zYWEaGUkCPU7wyXjs+qCN5C4DjVJB1NcVNC0M5tm6dAx60AlcPyzAtFkpxBUb4LHqtmpkuRtKS9gqv5sbtK5Ghhc4MYi0Kk5UR4B2ZC3M+PqUOCk9KmaeLuwdPwzrUYn9eaemadpe5sX/de+rfV2E/O5s6Qc/ILDUoI0kAWmItFMK5KKnNVSuEUbvSgkoVXWd0Fg09vMnWvATg0voWTr+yle0gt/3NKW6ta0VuuB00MKE5DRuIqr6XDKrWOwL2YCrHNHNwghyzSU/UKid6JhF+km0C0JzSb9fQc6jfFda15Z+Op9kW65wnoKCmBHL1zacc7HrsSlQ9BTejGTuIs/bE3Q+sTpsJ4OavxCx8v1EMNT+fEB+PfRxihDZS3YJgre+tg5Y2ztNjq7+WovP0Bsc4QQNn/LUl/Mk/bBfqKy9PXiN3pmrf67MRXZ3f5zzSeTfMDqQzXnNpUvm5+UUxT4POrli6/9kUNYpJYxEy88EA6ajZG30OXy4RrujcAAY0b+AuCo=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Hi Aria,\r\n\r\nTask.Run executes code on a thread pool thread but *outside* the request context. This is why it's not deadlocking when Result is called. This is essentially the Thread Pool Hack that I describe here: [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/mt238404.aspx \"https://msdn.microsoft.com/en-us/magazine/mt238404.aspx\")\r\n\r\nHowever, you shouldn't use Task.Run on ASP.NET. If this is just temporary while making your service asynchronous, then that would be fine, but this shouldn't be a permanent solution.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"1a82fd02-06bc-3e30-9bd3-828d06325f82","date":"2017-08-07T19:36:35Z","timestamp":1502134595,"authorUserId":"disqus:stephen_cleary"},{"_id":"01ba3680-fe43-306a-be76-25d12305d75d","authorName":"Aria Roller","authorEmailEncrypted":"VT3YdmyUotCWJoAZrO0dS/UD5u4uM8AoWdtTJ3BJZ2fi7Uigdwg4dd/+YhOayzKP33AMZmGHi3871+jFHHWN67X7UUpUYViDWXwdm2GY267vDlkMAaCTT7F/AeEDZwZEdfij0q/fi6KsY5gO/yQxcR6xeQ8531Jx8Xl2BPoVA9abhJts79tpsf/IVnDXnRdByiQydWQVXIX0Qu/e+RYE3RWVLGDx3nCmV9moFlF8STyclTjkWDBv3qfjXzTRSFE0zm0ASSjiZKYlCfE9YC2cXVvSwduBUQdcVBNVc830SJgOaGEjXdJKkfDiIKFEJGY7QbT9eYQ7HNw9lSEE+qKA1TwesHchUShieLky0EoGMSqJ/Yub6xyDovlIov+2Jg5m1ToxiTH0QhP4htNsMC+W8qyIqa8w3kMZFbmSEGWPGo5XfvVj7ygtq5eopbUw0cdkZ3TevsL1mV+IVNFkGelnUFy0AQCOdmC6wTEO9C3SwM0opi6Gi2ZFYGksBxN8jjS6z/I6kJAPt8Rhu+jnjRiBxh7k87aJzFJ2OnyVXNel9I+3TAVVN1SOqdHNcoa72RsgXtGCCSYxG+Hn+2rcBiSbaVI5Ahea8F8cKM0+HNteL4OG4BluwPYo8QLM27A4VqhX7xJNoBEWASBRGQajF+w/pa9GETB5bxjm9EJsR93qLMs=","authorEmailMD5":"635f80f6f28bd346fa155fb2f1f053f5","message":"Thank you again. I hadn't seen .result called on an awaited async task before and was really confused.\r\n\r\nI was really hoping that the .Result call was chained after the Task completed. :(\r\n\r\nThank you... your articles are great! Really appreciate the time you have taken to share your knowledge.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"4b14d8a3-963f-3cc0-837c-766a2f8c941e","date":"2017-08-08T12:50:40Z","timestamp":1502196640,"authorUserId":"disqus:ariaroller"},{"_id":"4b14d8a3-963f-3cc0-837c-766a2f8c941e","authorName":"Stephen Cleary","authorEmailEncrypted":"K1Fhv3o2EOeZn9vbPWoqDTbdtfefZaNdgppONjahLPw7N1bN8uGqRzGwlErTn9mhUaKckWEoIxNNZtfBDZJDMat6KmlxUUsxA7H0x/m9b7AM1DdRN7fERTcQTzeGvmlEmFIa9uAfINIzmbuAxPaI85d2P0OCqL/wNJUd0rc40OWBBa3WDSTd/p3vzb4m3QG5O46fWtLPKGQzSvLtsBiIsfovYQlkjFcP5CdYbBKy+4jzBhRlu3j96ortIYP7NpBDNPdu2PG+bwZJN4wgDOO4I0LV7iK+tbRdAB32teFYzd39j6n3OdXfNh3TToQfVrifIrzMIUMjELJOHJAmtseVU6ev35q3klaQI6K7Y+YVi1MuGUDqi+Nyw8VVXVTjqmU9X+nuR7Wjxu0VFpjlj6fOrNIrPL+uJdGBMWmvhB5L8IcyYpqAAOx4MsQ+kNF+QDmn4a0wLL9KumfvDgi/6CFV+Tx0ucU7X1mywT/niL2dky+YUAr10f4E2RAgvyFaI6e+YCv4yZMTVHdX8kQT40go4Q/fVrzReY5CaIFkaUOWObGpEt7eTdNLPHkSy9pKxq3UKVe6sxAD+3wcX9RI6hy0kp88MJ8CmcAp+3YHwQbNtaTg0iVxj3pwuRshHmUq/u89g7JLYAlz7nVH3goaYniV3FvAxNrUtwKIvwqI4l3R9NU=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Result will block the current thread until the task completes. You can't use Result with await - it's one or the other.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"2f8dbcd4-574c-3303-9264-f584cb0c9193","date":"2017-08-08T01:43:02Z","timestamp":1502156582,"authorUserId":"disqus:stephen_cleary"},{"_id":"e0796e12-5d7b-38af-9155-d89cec1e78cf","authorName":"Stephen Cleary","authorEmailEncrypted":"SFNefGot+T6AO+n3/gABrJk7TUbNof1R2Z2x5L1n1CcG0mhPGPmj/2PRHvH5P6GXqNTffUYrL+vesk/hXEo+gSY9fSQGyZVfw34rM+J6V6HYD2E9ilst4sdsgJTlgnmV7twcPVcm5y7DEe865uI4sMedbJbWNG/M/8mAWIWbEhWg4zh/iEfcWOEKqkFSuea44Vcg1hlAqsD7PlbCP3H7JxpbZ71qmdbN8sVvZ5WeGHdIMzIUVS8GSfETo2Sz+VJBVYJwLrRHs6aeHs0Gq9OJopPciMfvmsNIuxgw6VPUBkzOUUQShVJQNjfy1u1vwRsMmaImY5vdBNCzic54Q9rmNiU8IX0B1OGIUyhfgJyqhqVX2iYU6rii+3n+z8nnC0WfWgy4lSxUIfYISzeX0AjgiuwH5YsPmu13Tuc9mx81bq5Abw/0GtQsGkBmjR+VTLm8mAudXxtAgI0Q2EXJp7MmO5paDddnjgPCbO0nbWy7fdJ8SK+bHGTPQMKQc3NhTwqYzMnmtZsumsI7kAGMOEbdUt9LirmwXUJSOPVSQXadfRIApfW9x5Y8nQS1H5QfdANetOS6GxZm5UDfV5XuD7N5H3IprCGxfXmLjZi0kuxOvN1h6nmJcjz8rdK//sSC/EErmWFaHxuda/Y0EX5xA5JuFXojTeGYvIk3nRfWXgPrqa4=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"await will retrieve the result of the task on its own, so calling Result isn't necessary if you're using await.\r\n\r\nYou're welcome!","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"01ba3680-fe43-306a-be76-25d12305d75d","date":"2017-08-08T13:15:44Z","timestamp":1502198144,"authorUserId":"disqus:stephen_cleary"},{"_id":"6d74f16b-d545-3e28-b5ab-57471f06050e","authorName":"Joseph Louis Lagrange","authorEmailEncrypted":"JLBX0gU/kKp6xCpiqUotvE/UzqENKzq39SN4w+Bs1gIPnZNTEjdcF3NVPUKYUgUVLfE54JNvtMRI1526jQiEG4m+E7eG3FViRzycBas9/iPTmqs2jJM3TzMXVO61bDUKvuCwA6cRRvHm7hrDft2k+S5AWoabPFE+te/UwT3XDhOueZCwuT1/KPHmWd5cMo1ksQ/SPjJLpC0yT78g9Jb15Hc/zKKvI7b1J7wRzXFuga2UhZFwNlsh0XlvgKZV88pINZtGDcdjT9zTf7Fx/Zqm/IOGEc9jn7WzLIL3y3+Wqcw6Wjgy/QncAsKfNVy9014EryoOiztjHKmdXKh0G3ZYva/ZuyOd4hh2+wmGNMPt/o5ueDqfIS8HLEHKFdtcn2os4XCqljycKNtVbEZMLS2XsLzumKQIosYoyY8Fk21+pMEx314YG3bgWA7Nmlf9A4wEgkYsGnm63b3FSvO/Q93RGUQIDgtUK//nt+AXUo6ZB5ZAmBsJvdZMPF3AW/ly7piGi6SI61BcpiICv/SmD0PKO6NbiCH+oIWbppPPu7SQBLsVDrrLBiEeHsOMWx59l+jJoWhSOLJuYuy17IJd/S+ejKB+ozMyVVkiIVtzLYl2Vbxl09AEnzGaBWyVOtWX+q9HjvypYotL5Cy2kq7DRa1Whcb59RyOoBOGpWaW5D+MsL8=","authorEmailMD5":"7e6002f0e0c986706f0d834f7db3c134","message":"In the third code snippet, I think you forgot to insert \"return\" before the \"await\" keyword.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"","date":"2017-10-30T03:51:47Z","timestamp":1509335507,"authorUserId":"disqus:joseph_louis_lagrange"},{"_id":"e470175e-55b1-3a82-9688-3f0c0d92ba07","authorName":"Stephen Cleary","authorEmailEncrypted":"BybszvQJ+4+iUe6izssgp4XrgVwabBMdnBRhLXFudanchlFCaLnD9Pp4mLhzmrZeGw3rwTmCm5o60cFgPbkvkbDUdm75fiez+cAYwyKsE1Vto0P+VIGI6x5KZ8XCDLHgrwh5ESWiYOYTLqLvcnmDAVBGdP7cuBma+eNMOWtFaJg4yUCaD9HHEAeiOrwWA1G4BoydGqAbyOf8M1TQdZzmWE4ZLVm6WN94I6+xPgVEdBBbS84yrj8DevnmSe28BeNfKoXBbDRnfXxZujgI4N33A0/Ad7K2ux4SuAL6mbF8SV3BIUljoQYykpokkGhK4YD10N9xysUZi1ktCdroQtiRqSdzmxr8jJ4kOKeZ30QQI/19VDCV3Mm66vQ2pMpUedjBvczVA4CSqxB2fyZ1P1WM35BmfWDPuFB3AkbyiNpiq+ntQgaN37nEIpihH2zT4MP3BPjQUUsJK7s49JmjU88PAClyd2dOJmFh3HEBydf+MCoZSyQiS/HBPhxvJfRE/f3Z03ndGVMH9fAUxCwNLqmTR7Td3YflZO/cN1lmVkn6QZ7ZdbxCIr3zaL2wjDKpuGxGROfjmfDOJGbSN9tRAixbsK1wSHoLQWurzqovCjezhKgSgX3WNF5+2x83LVSFvzJfMifM6NHus8VaXvz6Z5Hdg3MdyBWpsvqD+EYRuyK4sK0=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"You are correct, thanks!","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"6d74f16b-d545-3e28-b5ab-57471f06050e","date":"2017-10-30T12:35:03Z","timestamp":1509366903,"authorUserId":"disqus:stephen_cleary"},{"_id":"f1fa98b7-be81-3bed-9c9d-b4313148a460","authorName":"IgorT75","authorEmailEncrypted":"jddQ9u+9ABMkv6Ub25s/H7cYWNCnDYvm4tJz52sm+XbyuplcEQtPwL+4X3pr30vFU1q9X9Ey14S+9sPUFjEFDEOSWOdXWrK4aA7BLfNHmXm3QVybSspA4bpX5Qx/SVvn7AzTcsABdOSQUaYPQdjUejcVyI/JzZXE/c2W+buqg8v/AYN7So7LKvt415pujowQcXYotEa/IJ763x5KRe6z5fa1HVX66vU3qrMq7DeJS5VXBgJPdEHzeizwiLWsvPb7CjLrfqrTLiak1BRYDm3Iw2Rq+cejBQdqV5nbyBlp/HPcDx6Yg1vyVD4g1E55RALrzS9AQkISOmBwaA9igkIjlD2DTBs6b/MMcCHRp1k5VWTJUwd3x4kglZ3uAxIaRoAMGDEFQoZ+IrljkqorvP7htyBUrvKrGHVrDzTfnXJqUV4Lk9fU3FU9pwlmIu/OVvoHqw8KZSFK6JRfsMkH1fjI5TRyAuhOYUrLPXNzW/eUSsCuQX5bUv7gduzPcfnWb3M5HE/f+GLujqnjy1W7Y9vLmaW0YTDxTwuYiOaKBYJ1cNersF+1TC5zSVDdQj9P8WGcjrzHVCBKEEdZLfRnG4E/B81JfXif4DNEWPEIJO7o0sGPBRDB/XCJcuePP85HbiSX4W0p+n6Wd21vkjfWnBpguAU2UOu2P0AmR75bQNHgqdo=","authorEmailMD5":"160a6454194230908dede268d09ce1ba","message":"Stephen, what if I can't convert to non-blocking?  \r\nI.e. what if your RetrieveValueAsync method contains a bunch of calls to 3rd party methods which are very slow.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"","date":"2017-11-29T18:27:32Z","timestamp":1511980052,"authorUserId":"disqus:igort75"},{"_id":"0e67a1d3-12fa-3cc4-ba77-71a1dfdeff6b","authorName":"Stephen Cleary","authorEmailEncrypted":"ge5KAhZqaHtFgona3Uf7D3HXAXS+HLCkTu4DlgLZoq2sAevMHdNEbOBfERASyKTuT4cDrTP5vvEAOy8OjYny9CHoYcvSIXI7wzfWVt38RV0vxghiGTZq9sJbkLaPxy9EFW49SGVIutgGB26FmPNPmyWZqochWx7+3ReV2SJuQiuZx8Na+5NvVNwhb2BPK2UFxkI/J2YeBeBy0GUWx/8CqVIu0ZY+ay3kQA/jyjPlBLFO1JgWvebnKlgTTrqcYDrydD7PQGlSYmS14cH2U8jQuZzr/Az4WHApl0KZyKkAo6WVdTP907Z8KxnDif3mHyaZ01VM8wqUTqQ28R9EVZ5RgrDLhV2gon/3yCTrUJf8FaZj45oGUHmSQ0euhcvMINHcN9ML6+Q0tZhAcnNOFCnOS1GSblJPNgUY8EsV/+JD8IaCfis2wRc8GOGRv9Ay/AnxzhFGAW2MJN8Td1uiP33hvAkcPbXXxke1a9MJg6g1APz8IJAYX3Z8GkZDfJxNkFS/IXVumuCd2A/Oe+E8vSGB6qq6oXvXUGJCYw/LY4dk6H4fwCzwBxOQKzIzu+SOSJ8aLmKt1sdmvCLXAQBc8JbsA7+SZ+CPQ7GFpZVNz8xCvaAM0aXaSegjQm+NZSXhOWixZc8ny39tXI+ytwbYohA/xWsaV95O3UKITaoEVvSNVDg=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"In that case, I would keep my methods synchronous as much as possible. So any business or service-level wrappers would be synchronous. Then, when the time comes to call it from the UI layer, use Task.Run at that point to call the synchronous method.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"f1fa98b7-be81-3bed-9c9d-b4313148a460","date":"2017-11-30T14:20:51Z","timestamp":1512051651,"authorUserId":"disqus:stephen_cleary"},{"_id":"1ed42792-501f-3f0c-b1a6-e858e5b42000","authorName":"Andriy","authorEmailEncrypted":"BvtTKM2nt8eN9ZXA39Bo6O/4+AX4eZ/1dD+DPCDiTWrOYEDWsddB1PT26yCRbZsKf/KEbJFMwbCzUHORs9rHfvqt3MiIaL2V+NutWXjRvrpYIA0YrjLfudZWoa/biQOgxc7Rv3aEY0LjJpm73aV6nC9NardBoqMjJnuYCvim4jd4Y2u2h8QrJweI/SBwizRw8ABjtThwNrfHEMt3a3jOi38NxdGyMAjDCeVwf4ghftrl71+slbFQrnfKsgNLtdS8EQy2u7GR95FFdm9ULuHRB/CzZa2+iWRbhFaWud6m+VfdFcXtIHY2i+KW66DujJiyuLWIAKGOZ52MnIAqMT36HGir/+1YfOA6n9zgqJ97SEmniOOHGIYxuDnOZ1QsNvFR015YC9ajiz2ph64XYQRHH09dghib73hYqEELFdfpsEwmHPmcbAmEd3Fpr0m0dM+oXNXO9j191pGH0IwzzMEeCNY6IywkJCuFN7XzlK7ESIga/apRUUf22AG8ldStBKAnJTRW+HLMpc0Lo0BQFoTVg+z4k6WvCAXNFMjAEsdAzzYSZA2DmZnb/HEqKvsu9IECdMikrH+X7K1E/bXJIx7wfuN9WsE4hh8t4Vp9trzFIlfH2b8xUnuSzcBcWTue1iRFDQSok0A3XyX7kOAcIVZr3kdCRfc+ptwD2XyyMp1CkwE=","authorEmailMD5":"7b3ef8e67ee7ef1ab8207b8a51c348c0","message":"You can queue a work directly on a ThreadPool, it doesn't return a Task, so yoir method doesn't have to be async. You can also post UI changes on UI context by SynchronizationContext.Post at the end of your method. So it will look almost like async method, but will return void.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"f1fa98b7-be81-3bed-9c9d-b4313148a460","date":"2017-11-30T19:00:45Z","timestamp":1512068445,"authorUserId":"disqus:disqus_xVnVZUEaIe"},{"_id":"c77c778f-a76e-3b07-8d28-c0fa83d2fcb7","authorName":"Stephen Cleary","authorEmailEncrypted":"Pzpm7xuKXRhymo+w1iVhp5nEt5s9XOFY5eFloc+66N7JGWwPDTnpWq6y7oPVAW36OMuZOxEqTe+aQcX0FJqqg+wwO7kiDeBoXsHySd0RvAvTOgdpFDk+AE7wMD3YnO/v/7mnTEW+cUcAdMrGFLU396Afv7LtBXHWitKavjIaH67mMpjW3j9f6hjT2VFo0W9S4+7HwuXwUPvXd1hd5qFyUjKs+JS7ijhfWd67O8dHdo9QgI7QbAYie3+Opu/TZM8agtgpilYL+oRkHDLg4l5yoG7jOUA+h15226AGE+2D6IPooz7Xp2p62srFh16rxJL4UL6llP8AOKFtShpqYlQCNxojyCSUMhiin/VH5V/cAM8QNm9L6oHz7fIs1aCNYS7RwLz42N/q4cHJDKgxIXqa4KE4J8QrLs6447YDIP/1je3eXYiqa2Ub8ss8jAzLQbIx8yTSmA9MyPfCTYelk9t+z0EtDJ76yT3S6Iysqa2TDAvKwKBX9xcvysI/K8BdXzi7QNLlUKnp3Wp90qyh8pnjK3NzEdVEZpc4ctT6OZb6K4CJcMJyBVpW+EWFSJjdRRHekdYbW7ykIIIfHydL+nhnCQxtpwD8aFAG/39kzE9F2jm0pnSXo9eVPBKNTdEqIKQEVKrGSf2GlzcRXd+prWcqDQeK8B44D4MeLOf66q/vWXo=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"That's a very low-level approach. I much prefer Task.Run with await from the UI layer.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"1ed42792-501f-3f0c-b1a6-e858e5b42000","date":"2017-11-30T20:09:57Z","timestamp":1512072597,"authorUserId":"disqus:stephen_cleary"},{"_id":"951e0c83-39df-33bd-83f7-a70cafdcf5a6","authorName":"cateyes","authorEmailEncrypted":"KPO0GOhWoBQC75WPBqmaM4XiUzRGs7z4M+vakTwOJQK5E0ICBPLA4E0nd4DdEyQImyyvd5JFKuFHcppkZC8/BpMLUvtg/NJqF08H19Hms2NV+5TEJ8kPsbyfrQto2e8xdT/Rv/dnxMaaEnj8wsC+lx8TXOPgQ/jRcCMM34asH6J5sSzZkk8VDgAdY1gt5zBQ2cr7SYUMUrWKTbHq9fRZKwsNa1ng5fdbrwALKfHBWvmFpRVXcMk4XS7sQfUn+164OtQtHtNLntJl6DoSjCYt4og3Ms8AwbOowbvhn03hZc/B/HyG6UHkMlnwnOyXeWIEApcO+S5n5h0/EvJv+FGIuVV3YPNrTgC/eTstc7kGtTgDK4dVoyml1y57BEByhLfYGeAYCRAxZgONLIvE59lAeJ0ztZCsOEEMOYRUqNBXGnxWs8DXHMPyStx7SEic8m3kQ1Bezr+0D915PimRpJo/2tfrCUM7wTFCE9ef4vOKmxBYtqFyx8pP9Xrc5mxjLX/99dcWaJvtblj0mKocUbic4gF/YATYfFjpaC8VkZBgfD2qLUwnmXsrWp0dYMfQXlyniKsHrnBaYSyFWIjUKpgKCoQk2mSccy+/YTjjZzqov1Ea/f9vgaqqG2m2NBG38ASPWiR4f8THbep9pGAqd3Abpl89IIH/GLbY8ib/+X2iRF4=","authorEmailMD5":"a45c2b2c1647b28ea4c058f06e418785","message":"Hi, Stephen, () => service.MyMethodAsync() in the Task.Run(), it will  \r\n return immediately without waiting service.MyMethodAsync() to   \r\ncomplete, so the thread to run it will be returned to the thread pool.  \r\n Thus Task.Run(() => service.MyMethodAsync()).Result will return   \r\nquite possibly before service.MyMethodAsync() completes. Is it right?","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"c283337d-d392-3a84-94c6-cd0681dc2fd7","date":"2018-02-04T00:42:24Z","timestamp":1517704944,"authorUserId":""},{"_id":"b2f412d5-72cc-3914-8eeb-194ca9637bbd","authorName":"Stephen Cleary","authorEmailEncrypted":"GgyVVRFbs8ZF0XKlPR1g3DXRzWPOCPOiLikHmhjEeItCxp/C6Ehcha25YAIvC70O9cdJ24I5VCtBwgjiFmE2lJuTBEQRzRiQ79pVmmJFXVRIzYwb/bnbx9M0nrUazE61cP4x80UnIqprBSMGRb92pIU4JjWMkAhYJQfeoyq6ldwRHkDIivV11XlYtXBf8YpssoybYhTBqIXG+4sstBcnvHDbqiAKb23lCnZ7UTpYS9ga5qiMc2wpu6DH1CBuGVZXCrkOmgM9b3ZQHEGFy1cj06gtFAL2ZNEJhsDKfhzM69xRLr9ePON/lCMmj+WuGLBgEItXQ091Hy1T/xj3G/U2VRxm9oyefWTaTUkZZVDwaVvvxztB/vDL/k70BLoP1F8TALLc32yJLedrAA1NtkMkOVmWBXzu6co33Rvz8cL/Nsg+/oryhoUuMALQ3FCsA/KoJO4kLl3NlKCS2e/W1NLifCWU4BmpV/GiGsjG+AVQ3X9UkLy0TYLy+lNIduKZUCSVkkBUK+MWgsOXlpaBOmqE76c4m2iTpFehnb/2xokJiNi1g7iTL8MRF2qFgEN6AGKmPpySl5blNliEbqovQnuhp8Nf029CXvTlDYdK+QSNVgTgR/WNn0iUl+bCTyxeNS6v1clTxHkERFHfMgXvPVzuWCaUmgLovjIXu4426GeffdA=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"No. That behavior does happen when using lower-level methods like StartNew and ContinueWith, but Task.Run is smart enough to know you're returning a task, and will unwrap that task automatically. So the task returned from Task.Run(() => service.MyMethodAsync()) will only complete once MyMethodAsync has completed.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"951e0c83-39df-33bd-83f7-a70cafdcf5a6","date":"2018-02-05T18:54:47Z","timestamp":1517856887,"authorUserId":"disqus:stephen_cleary"}]