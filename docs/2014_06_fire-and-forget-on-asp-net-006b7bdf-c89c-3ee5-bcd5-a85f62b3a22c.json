[{"_id":"e1feaea8-a545-312a-911b-446839d0d2b1","authorName":"Alvin ","authorEmailEncrypted":"vcA1vLUoCHsTRgNVhwOKYPX4wTXfQBJseuFDsPsV6yOqW6B1jvyC43ohLSgZkjCmVk8hHw5F2UE6vrbSIEpl7kdqFGcl5J25UK3gxq5Xz2wyeuweyuhlzWo2wtmQ1bJP/7/dJMP1XSDQGvnntd9kkMk3dHfoc8SYMw/QhsM16XfUCrsU7hJaiupMGAYrK2Vzd8oCvOnUZAjwNx57z8tLK1vZgw2pWQklkvuSNfjUJ6Y3O4NfZj6gQpbdU2nh7YhuJN9KhJ42HMxhxORtl+0vx9yZMlot4l1iZEqEqVD2VRSsWhKUZ0D4t27LZqbCYP0w6tu0OKKVr8e/QNuV9t+ocfaEwuAKjP1UQYXg0y8qWLVURMEjNWRKIBUkzbxGmSkVvTfHPaAxXhw7O+edhz6OF5CwYYjiyWqdOOMLuYdHPns5mIcc1VAVY5SLSxCk5ZWipqNilkJSTM4fCP2U0sDOa1DExVhqCWDKyaCpi9KkHQTev/GeBL/83xA6EWOS/A/kYnw2gLJAcM6Ks8zJyVyZYQyOwSezlhFWAz4jEc5riDi6hlf1n2vhokZiHA5W5bpqEQAehYthD0/SHA110klSLnhzqcr85ga7A8J0ChXGeG2Uimo5hfpKfCFfXp9Gh6YJtJDTu4NGxw83wgrlVxcZ751jMkWzm7PL3xndbzP+K1U=","authorEmailMD5":"57d544a1aad0e1258c55c5b2d6c0d213","message":"I would love to hear more about what you mean by storing work semantically. ","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"","date":"2014-06-08T23:31:15Z","timestamp":1402270275,"authorUserId":""},{"_id":"0e7479a3-4532-3b0b-9231-3a20459beac6","authorName":"Stephen Cleary","authorEmailEncrypted":"Ya0oR7YOKhuiGc3iijs3s7d30U8WF0vOrJwkCkP9zSrsglIVQ5U/2fFqYFM1R3PLRTKkpxab7QTTLwRbHYYqR9QyZMVHy13CICzMFnIaGxUupLskQc6lza/oH2fFZ1ahi8LEGED6jl/y56NEgwWkJxoHcVhTyoVw7EbXf/g+/TItry3cXp9EXZR4J+anAoaORf50pQqdjRtCBexMP+1UYVJ8/rD0Y9OOzNHzVmde7ODmdRbTWvx0AZIhd2eM3j8pz77j1WS11p4quOMUnUHS+t9U+TWNjMnkjnFwAIR7OPa31oo3tywQiH6txSmVolAyzzd5CDClxPWK2LKQnUiMjnb1Lx/RUzEk9kC1vR92TWHx8I0ImvgZGJkl9VVt8suaY0XaEdccdL7uamgFphXWHLLHaneRXPbK2MpUZIb2s9QVC/TBN3XhWF4kol3/ldoONjreDX46xzy5mhkhQpQaoZc5ieOgF12oNhcPm0hUaazelN+N2j2yGkLgqpmjTcFe49uGaFcY9yNdP1Wy75QOROoZw0c6AvKrsWGew09UIMSHYE7hKGCCEr47VqPKME820XIlgIsmklTPXotdZYotTnlwe+7zcOmy0jXZ08w0735nurogFqcrjzaN6wFl3KelV9sZ68JUj4B9C5vcJkWtFr+I29UGJ2bC+IB+sx8DbkA=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"That quote is from the IRegisteredObject semantics. QBWI does use IRegisteredObject, but it returns immediately from Stop(true). So, it's true that ASP.NET will delay the unload until Stop(true) returns; but QBWI returns from Stop(true) immediately (without waiting for the background work to complete).","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"887a921f-0358-344d-b38c-1a0d8a062ea6","date":"2014-06-09T17:09:01Z","timestamp":1402333741,"authorUserId":"disqus:stephen_cleary"},{"_id":"3d187730-ddea-3cd2-9a8b-a8dc99d713e5","authorName":"Stephen Cleary","authorEmailEncrypted":"p57ZgxPTRlwngtD3QgRH57NI+VVpR/zuijhYSJElvEUuyt1xKtvHqbKSwKYxy9PV/YfvpK79IZ7BOPpw3X58CAwb4Z5/WgbW43uqDeO64ot0ONbwhjC1QEMRruKGXQAHPsJygvweE06HpZOONl33vSnHiaEzy9vi5s7w0OzFtsBZgGA2riq6JlAP9bQqLAbo8hpMB9yiNF/EahUcruT8BhEde/xv9nUJmBoK+KIPDeF+y+Qiv1JzNe3nyHNODg4cdNeBm+/eD+9WCELcU/LLskgLK19fOlTQuaBY6kUxY+JkUeY2uGwtSDGgZTy88r/p+SvfPc0tE8MIgTGiEzl2k44/HlKATBPRsPXqpf07ohvWd7coHvA2YJuoWBYIQm95vQ94E+wdLEZA03qOxY7oTNGCOneWFU1cHASsTTGCLjtBmI2mWWFyrpT8rOGYwLdQ+liCuUq8Gsp4ih+lJvBU9aSHLL/PypQ3YRs7kB4zZnsZBM1ri50WoCQ4GDMow66kxSocbiMGHe4RmF0l6Zyi2MztfXmr667Z7KKwUe7z3ozQdEEWZsFxuxOUbYqDreP48RlhRUJh1u24lRIq69hjrmjNiIKk7Gu9j/cpndS7/7lIjNqjflvi0rddqBUR7zoG9P4J//3HEXwClBEBv/8nvXLOPeRV5NtG7O4c+++NmmQ=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Yeah, I was trying not to be too drawn-out in my post. What I meant by storing it \"semantically\" is that what would actually be stored would be something like \"{ version:1, action:'compressImage', imageUrl:'[http://example.com](http://example.com \"http://example.com\")' }\". This is in contrast to the way HangFire stores its work, which is just as a serialized delegate.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"e1feaea8-a545-312a-911b-446839d0d2b1","date":"2014-06-09T02:45:42Z","timestamp":1402281942,"authorUserId":"disqus:stephen_cleary"},{"_id":"887a921f-0358-344d-b38c-1a0d8a062ea6","authorName":"Felipe Fujiy Pessoto","authorEmailEncrypted":"SGXCFqzMj9N3vgB7jRqG1i7R5hJKxW0jg3eewUT4boJyS1nBVE4+ijgPBFxmkGvStG8kAW06rJ6xoBx4wTdvM4mCdbbp8YiG99n6FJ1hjoZIoypImg00Y+T+u9vO01VdmPNNq6g68ZAfo37LG7xbq7gaLKxwjSlDL/FBsY9BXdQ2VXY/Gd/WFxM6y8sV5fqFxb7uM5i241vRTx6bOlx16fXorYh1QkcJnnYuNThVvcx6uF6ixgns8IvOD3mWRs6K8eTYuNVVzkcPtGVZ/dK5oBVZsuK+cEyg0ku2KjKEOSPbqb+PtZHrLSqLg1M2QYOLg7CoNARJ0hIM0g7jT9MOySCcc5qdxtIP42RcIwXt6uPSiH4D7WnTGRS9uCeAbbiNtI3asWBcCiDnmT0LHwxQ00cKaaeX9CPS2WSfiebkRNW7+rkJ7RD6TbtgNRaNNhQhLdV4ncoS7kaQsuLnK3bc7Bxy9mwF8ddpoK0JpZ68Q76lWI/ZDxo2NEKEkS8kXzslGhVFiXu3OWvrBe43YkOfQp9y+MtKrwl/FVqmf9K6TfCyNJNyOE+OdyohrC22E8ylPinfWVXEqImCBlwedHl4zOf3Zkknctm3/kwOkEBTQUVU0gd8wm+95008FGljYggHNPTYJkUqD59KnN9+kNv8D/y/3uo90UgBmvG2ANQzp4k=","authorEmailMD5":"39429a964f784d31ae353038f724e3ac","message":"Probably I understood wrong, but seems QueueBackgroundWorkItem also wait for backgroud tasks: \"If you need to, you can hold up the unload as long as you like, because we won’t unload until your Stop method returns the second time.\"","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"","date":"2014-06-09T16:16:29Z","timestamp":1402330589,"authorUserId":"disqus:fujiy"},{"_id":"a774efc4-1211-36b4-8acd-dead4fb506be","authorName":"odinserj","authorEmailEncrypted":"t4XiMSt/bmeRUetrWJo5XkNyISnFBtKxprpY2tnpsYuIExeOEBdgo1ThZxnm9NyzWeapY71j0sjnhn21huWBfuxKAmLGw1csZiKaMz6drfp+rz4LRXFZVCo5OkHG3xygf2/wyIlsdD9dVV14QDJB5kxPZ9Rgrc8Vib0pzel6Dhq6hyvtTFQGapygwNM0EpdRoo/v8KzPejPwopxFKt5u7wdPPSDcLz2o/39QTHT52TGAjgwf7yPr0yz4zqgt2IzLKuzpZwcPUn8Rdx8aqxDxVxAQLWBTh2egjH7n9zEMhq8Z9rVobXh5Q+CX6rjVLnvI0n4m03mNm5V/rAOD37SVm9g5Bsvv6HRxqst+z3BrR7uZI+i3ui0SJu/JDBUuW3VgfaoQg3/0eJmba0hjJVuAuuvIwV330/PUrxFbsAKvaUobuEhOMyCTfPP/pZLTnwPDOeYr1/ziZR7YPjUAlloegEFWvrqPfUpkaAWTys4lERfuER2QkdJjIq+k3+eMxqPaHYMhbztNZdNxOlgVBelnLy06nv87L7bWq1St5tMNuC7QMrxsF2jhEHktgTBjNaafIcp8alU57lSeUbOO9bPjcrW5++L8MlajgV3FO/a38zYv1pwq7FnkEgdt23uEMO/G1F5CL4E2ilkaJhZgHcFHrMyEboZMeNRczpkPfCbFqqQ=","authorEmailMD5":"0a71abb01f527c8830f708948ca07351","message":"Thanks for good post! I'd like to provide some things about HangFire.\r\n\r\n> I’d like to see support for Azure tables and queues as well\r\n\r\nCheck [https://github.com/odinserj...](https://github.com/odinserj/HangFire.Azure.ServiceBusQueue \"https://github.com/odinserj/HangFire.Azure.ServiceBusQueue\") and [https://github.com/odinserj...](https://github.com/odinserj/HangFire.Azure.QueueStorage \"https://github.com/odinserj/HangFire.Azure.QueueStorage\") repositories. They made as a proof-of-concept and not tested at all (and currently don't support the latest HangFire), but they can work together with SQL Azure.\r\n\r\n> The second assumption is that the code will not significantly change.\r\n\r\nYep, but you can put all the code related to background jobs to the separate folder, name it \"Jobs\", and refactor it carefully.\r\n\r\n> I’m not sure how the system will respond when it attempts to run the old background work.\r\n\r\nThe job will be failed (this is a well-known state for HangFire, nothing bad and unusual), there will be an error log message about this event, and you are able to fix it, redeploy your application and retry manually at any time.\r\n\r\n> as previously mentioned, HangFire prefers databases\r\n\r\nYep, it leverages databases for full transparency and manageability – it is very hard sometimes to debug background jobs.\r\n\r\nUPD. The way HangFire utilizes background jobs is well-known for Ruby on Rails developers – they processed many millions of jobs with HangFire's analogs – Sidekiq, Resque, delayed_job and others.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"","date":"2014-06-10T07:33:53Z","timestamp":1402385633,"authorUserId":"disqus:odinserj"},{"_id":"e84dbcf9-7cfd-386d-a22e-f661155bdba6","authorName":"odinserj","authorEmailEncrypted":"iDBYU8FVbMyPX8vB/lRYvl97gkIJECyXf7llJ1EEvcCP9CLbb3fo+7Ncu12pE0iOyZDfVXUI29AfVVzuCECDFTc6h6B3dBJ/jO1zxbbH8W2Y/tsTmKWYEndlYPkoNAbujSOHGWxamY9YlfuXriVShtDHpy89g7Je7B88WHFsDsfp5pOShhkMDvz0WJAHCF302tV3mgjm2TyNKKiXKVSL2BUvmJ+Ujvwq7+gIpxWMlqzrE5/eNnDNjfNZS/HwY5Adqb2cJWjMe84286XyHdZvWwvKQStq8NTIXtznnpRzJSjxCwn3sgjhVRFCLEhL8WC4xXAkcPx9lay7a0hQW/yAQD7i9pQ3yJFRXtAZGHyaYRxpJh6ixIyjWnkQiy7MR80XbHEeSmdhQHMefiu6ofa8tIMTwy1+LscZ5wH9Yu7bYWpApJ0Xw8+37ACM0SuuIbkfS5O17zErffQIAeOofuefnhbn4vfoiSN0QqjF4ERIAK/5TwqG7sVx0Fzy89lyrk/6WGjf2e7etjo6eFEsIz96n7zq7OJrMa6rEE2YoWH/K4cl/OfOL9EcaLy7/AXw8DLqiLrS2njK6v1uAtHJfEtPjRYaRMiPZ8o4zcYNEiw8hYlb0PifyTw/SHRGhgQL9uJ5h0lPYenzIME68YA1PENG+p85EYMXFlij113A/j3fU5Q=","authorEmailMD5":"0a71abb01f527c8830f708948ca07351","message":"BTW, for semantic invocations, you can use interfaces with IoC container plugged in: BackgroundJob.Enqueue<isomejob>(x => x.SomeMethod(\"args\")); and choose different implementations using the container.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"a774efc4-1211-36b4-8acd-dead4fb506be","date":"2014-06-12T15:20:36Z","timestamp":1402586436,"authorUserId":"disqus:odinserj"},{"_id":"96ffc66a-b00a-3705-b2bd-676b9d2e2a3c","authorName":"Stephen Cleary","authorEmailEncrypted":"q4BKOwgPOhYOvEOAsW3bUhtqL39ORv3wvxOeWXzAqx9aSeBkKibmuy2hX40BHQvHHGqqTUml245grP1NtI9vjBYBRHiclnTBhM1JWWl5fkg0X0BYAJ3F7XGByLuLrYEF3QHra619oA+OPE7AMga0repjEAJj/zY23MiXz6pq7ke54mOny+oltKyGJT+uO0jk41rbZStyOqLSFnA9Re63jmg3aWhU8Zr9sCrCFat0FF48xmCfETHol6MMO2s3WA6Tw00fkobvyjEdExF7/L4rQ/B1PHa3VVBmE4WQsZ1fpKHeN3DygjplmSWgEYE9FRvHzGGQZ8LSFWuuG9oNowl0dzmNz304DKcrIBNA3OrINO+Av8JYNYMficFekA36t1bJGZGAYQ3i0FjlIS99g4nKnQmZRsoqbKpwnZ5efsZSizNpjqSFJk+7HeXCJDz7eLE+PJFJfNiSLohnEGfOVUAy8AI5gMUcEhDBBTO+I8q84us8iJEs4AF9EWB6EccrLfiysz8df1YrHWZAoBS7Zc2Tpqq9fqMXkOKXWSXM8vyFnANBW5GXbOeHH+7iujSc9bhEFOCaORtwTANpJCkoQCQN2KNc0YJ7pd7ai/jg82EyCgT3u5aURLc3m0uz9ls8uv8PMuzGB/iLAjtV9VCnJOXWNdQpeS6ZttLAPm5esWjsmYk=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"It's true that WebAPI is not an ideal \"subscriber\". With those technologies, I would recommend a WebJob (if hosted in Azure), a separate process (Win32 service), or (if you must) a separate thread in your WebAPI app. This intermediary would subscribe to the RabbitMQ bus and pass that notification to the WebAPI service. The WebAPI service can pass that notification on to its clients via SignalR.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"bbc92b7a-7d7f-331c-947a-16dc649002e5","date":"2014-09-18T20:03:43Z","timestamp":1411070623,"authorUserId":"disqus:stephen_cleary"},{"_id":"bbc92b7a-7d7f-331c-947a-16dc649002e5","authorName":"Adam Hiler","authorEmailEncrypted":"AGgOjCKOq250vT5+lxDRyAS9ZNTMzDuISwLBeiId9aRs8DhGHtjR06dlgggS/bA2RUQuG/pIiBcu8sIFRP3FghR/VlKHNj8C+7aLZRtmfU9xgThlnGKz8RGOm9EhNn6WrgIym78TTT/afozYpEwOoXtij1HPIFbjAhfyWl0kC5dBN8zgEox6163M7SJH44YsGRdXJO9q1V0HlqufokuvTY8T9+OsEfUmIokmFsuI/ujyhQ+Q0t5023wX6xpaeQTTgzImLOvuGTGpwsj+mVrF2TSUeuzcJ3MzRKisKMU41brU8oG0tni1KeeWUUoxH/Q1xj3oZtx17vm3VIk5Oh42bzbR9UruBO3xPUOgyQ+tV2CJDY6cc0hVY+YJPuet/8cl/qfpeXUvCha0whDNVGpK0qgUJ9P89edFecTJntdKmvsCKexwwqJosDKjjdVatUTnqh4/QPMwI6iCmplRjA8pWIoV88/AnVYSS0SDJf/cKFFzl8LivoUig6190Aee1lBpi3si5vX9tkj9DP2k0sboQ1UnOlFhR1FlNtLO77cy3A0jR3p9eu6YKVDJdbNQJFt1pjCVbv/14ymfGmOEbW09huocreEL8c/Q0As80Aqlg4ZouiEyjRn91SHTsuqCLi3/B9/eY+h8jdGdaXGF5Fvk7S4SETwM7SLZSa07MWj/HSg=","authorEmailMD5":"a339705f3d79035f605795ddffb5d235","message":"This seems to be partial confirmation of an architecture choice we made for queuing and farming jobs that are initiated through a Web API app. We are in the middle of a debate about the best way to handle asynchronous notification to the (browser) client (if they are still there) that a particular job has completed. It seems that the Web API app has no choice but to poll the datastore. Our farm sends reply messages (RabbitMQ) with status but no one is \"there\" to receive them in the Web API app.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"","date":"2014-09-18T19:49:33Z","timestamp":1411069773,"authorUserId":"disqus:adamhiler"},{"_id":"6fd5c3c0-43e0-3e58-97df-b0a0205dde09","authorName":"hannan","authorEmailEncrypted":"Tb9cePtSEzOxGrIkOH6qdXYhu0PMCYU2kh8jHWzGF+/UNykPnL1nI0U3uN7wH+M2g/4HI9Smz1bBdiQISI3MDOmoFW4B4+vD7Zy34NnSJbEmf4I2sdG4KxFALt3N/Ud2bjGjjErv2oNqjQkFaeyKP9OUNQ/AD19QzsjIqIOYh5j2Yp6tg6ivxEUpdOmmgE4Rwt1mzm2SxT3ckbz3lqz5csigRw53NWYsplgaWV6H3BYZIV3UVhbgdIfNYU2pBh8p7A6v4hSJ65OpAZxR7UPFNPFVp724kgh0y8LhAs2srdR7T3X2G+88PyefMMSqNhV1jq1V3zSLElCXd1J3rWN526M6nbnSNZJtOXv75guOgLLDDfCdFDMmD1cES79Chpq8FEwVOCes79koeEpdYyfC0UQLISpq8rul576PMrdjyhT5URCg0bVNE++RGJIcUBK+qSifQ2BZcldPEH4OCwfj+z1FeX0gGEPFcoWCWpQaq3nT9YMW/ewnGvRr+6fjz9PqJRmIUcrVowdyrTwtqavGFPky4bu0JLNKv7e1s06Sv3DoP9vaLQxGToWjSvDalc7dOxB76u+vvXUI3lf90He6aoDmOF6omyQsNWnSvAXqqICyuqZZjc3LzDIONMLmY96t0Go83mwUyJD73FIK1KSq17EG/NEm1GQyG+Nr12ciQIc=","authorEmailMD5":"a399ec896d50731298760dc2cb5393e7","message":"First of all, thanks for your valued information.  \r\nI want to clarify my second point that If a WebAPI send request to itself using httpclient then IIS/[asp.net](http://asp.net \"asp.net\") will not aware of the request?  \r\nthanks.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"c3df7ebb-e0d1-3821-8e21-098527068cb4","date":"2015-04-29T13:05:10Z","timestamp":1430312710,"authorUserId":""},{"_id":"c3df7ebb-e0d1-3821-8e21-098527068cb4","authorName":"Stephen Cleary","authorEmailEncrypted":"V9CYA+l51delGN+lO/NVgN+AMR8RWVuajFeuYRQe9zMwXUjtecBriNjr7Iu0lHwm3kcc5f4DeFLH/46budqgtm6pMgRykHHRe8epWKoRuYF6MhOCOwfighfRAmsxJKLTRbG+INL+AJvfAUr3H0XyNw81M+FTSZTjktyugLZP8zIq7vRojtXwr6GhN+VcBAfus8bqXyg9AI5ATpGNGD7rAhKTclpRJXD0TzJbVUf6odOabSzpzHFLEIsMIMZgHw36iTwXAZFWbQJQaqO0DXBf+9F+3XEdIWFzy9JUnj/4U54D2UnbbR3cQGbWH7eEhC+yQjZyqsdF4x1HracCRpi+yfwm9sbOKIL5GGEmYqjVavto9XVgaWc8aqp5TOuz5Jrfvysaxf0nnx8ww9gJpUUKakwU+I8Yo/GUYj6TxRNtfXTRxmnuYGL1AAMAOG2kfRdHN9IYoHaxnj4KWAGW3tgWvcJbjWK62hfgUCD4Flad2EgNxS442xmC02qCh/HasB3goluFc/cRgmdMVGOsAUJHa1tIkYNYYiomQatoK1RkLTQIF55TRMSxE2xQdLZsm1CI/mFIpA9mylJMmVO08FzDNkdi9hQ0dlG+5w1vwYKA3jD+VKrRJD1uXMCUafMH8fHJiFxw0N7iQhnSCwll9gEg4IX5fjwu2eD0JzHTwHx+nhs=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"If the user closes the browser, ASP.NET is still aware of the request. In some cases, ASP.NET can detect this and notify your code that the request is no longer necessary; in other cases, ASP.NET cannot even detect this situation. But either way, ASP.NET is still aware of the request.\r\n\r\nIf you send a response back immediately and send another request to your WebAPI, then you're in the same dangerous fire-and-forget situation. Because you're not waiting for a response from the \"inner\" call.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"e99d346e-e8f2-3d36-9afc-d0e4ad2ecff0","date":"2015-04-29T12:27:56Z","timestamp":1430310476,"authorUserId":"disqus:stephen_cleary"},{"_id":"e99d346e-e8f2-3d36-9afc-d0e4ad2ecff0","authorName":"hannan","authorEmailEncrypted":"W8+q791jNCIlKbLXzvGskoz5XvEWNwgfxeMntuAh0C7Zve0C0XkxzFIlq5W+06uJkHJZz1HKlCR6Xs9MxdldMVKonRuxZ1O3I3lyWSxsDqjKJf4JDnp/XE6+wwPDgNbmJxlB0NKXitrFz4PkF7YUxd65iF47MGUXJ8WynekCy81ea1gsrGlzTfvdHMIlKXXsbsMlopNyVjU+lCXcc6JVMPrMKatVp3L0rh24oh/RNc53iiPVGau2RG5SxQT9S39+KvU3VI9Sygcj/U8kZF+hSxLIxfgy5TNxMAzGOmdQ5PVXNkFp++acKh3l6EW5Hn8HiTmxiRFJLxcdz2/I5zKRUPVZjx1MPjqhtijFC9GWbN0bTPPT/vaBNJpLNTCYKiJAr8pMz30QpxAdx46mfn12YL6CpoOJ9MAEhx9Gs9QKrALomR0avGkVXio683SucYVDJGjDxccfuHDaxaRKLPj1rDODPXs9QF6nsyFk2POCbo074bv8MH6nhUYrVmxMouovT0tmDIjiRTRqkITIpcpO4EBvRVy3X1bs2yjZa4QWSDT9QbFtT/tfDOzWD96bRq2oQzvw7P2/k0izgfygmtieLTI2R14sQBzWBWuE15BLIM5SwbXFMpw535JJVq0tV32WSvYNZHAYdMtmmwuDkJ7nFg06boKhUqm8qhznu1jn+mM=","authorEmailMD5":"a399ec896d50731298760dc2cb5393e7","message":"What IF we close the browser after sending request to Web API? Will it be the same case as you mentioned :\r\n\r\nThe reason is that the ASP.NET runtime has no idea that you’ve queued this work, so it’s not aware that the background work even exists. For a variety of reasons, IIS/ASP.NET has to occasionally recycle your application. If you have background work running when this recycling takes place, that work will mysteriously disappear.\r\n\r\nWhat IF we send response back immidiately and continue processing with sending another request to Web API from within itself?\r\n\r\nPlease suggest.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"","date":"2015-04-29T07:52:08Z","timestamp":1430293928,"authorUserId":""},{"_id":"3e299f8d-43ea-3a4c-ba9f-c826298a8492","authorName":"Stephen Cleary","authorEmailEncrypted":"HxIygY8yvjVDk2En0+a98O11KWi3KzeIvLk3ZUgdXmi0RKrdPXnw9fDzBe8XVHWWm2YYmzvH4+PbWNytPWyQosy9DRaylatLsudPoEtIcw8pfRiNJu28jzSF10Bpdq+RPsWX0uF4BanDPy45Vz0LlI1BrSoA7Icxuwcu+Bcd/j1Mc8az0kRGpypmhuW7JeMp1JIf3sBE+mM6mat6wpa5NK3+ANfPtyznGJJl+FkWv4ZbWXL29KKVTi7pFPsB+xawF50FbWnYRKCtSw5fHQ4JbfNIWZelOgfj88dfmCWBOg2NKbLV8Gku1/V3rdlHuUBAwGEwuWbItc35VdalWI0M5Kdbh08V5i0fzjlyZjuxwl/gf8xa9F7/fn9lnmjMfiPGqc2p4JtJWt0beC6nlbx9JkyahJI2YF0AxdjzaQbsNJqvBGLQzfzaxQixVYpUBD8MRqNC5nYMomFjEcevSnHxHSgVy3scOoKDPkSfSKVy4/+kiSWkoPUFSbZdKQNqNXhEU27luOwZPkVXIFXFti62tFxm11KMySjhZwL9qLCNz+JAYR17y+PPtmCmsOBxhOEd4VLYyY493tDqvvs5AyeCCwkVu/8qxwnNIVFbwWJJMQvFRwvEVXSF/BxzEtgPT5si1ib2fJuj0Nbtjv3wCcQwEsRNWEavl6unUCaBmKCFyzs=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Since the \"outer\" request is not waiting for a response, the socket for the \"inner\" request can be closed, and so ASP.NET may abort the inner request.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"6fd5c3c0-43e0-3e58-97df-b0a0205dde09","date":"2015-04-30T00:34:06Z","timestamp":1430354046,"authorUserId":"disqus:stephen_cleary"},{"_id":"877f15b8-b495-3e1b-9dc6-03fb84117baf","authorName":"Ibrahim","authorEmailEncrypted":"FBfPVnRWzjZApni4B0vUjIJgp3E5Gk8L7MeYC9AqY9I2N/sl9CSEN2tRHM5V+PA0uGlpwrg32z+qVKotEL1v2Kx7XzqYgKS5mdRjhPJ/ubRwWunFnJpEB0ak1aCNNXN7tMW3RNwL/PW/yaljVO/Y7L18yFZt/s+LT1f3pcH7KmQDc8ZWYYr9DHfRRn7ZkTwvKgCd2ut0RAuanr99akNYT7bKC+iMtLemvDi5RXG7rmlgtcoEPXMaU/BsqWVrC9ZE27HTAiLwkybWvTKKXwew7Ve9eiNTI+btvCPaKvjTqmNwvXl3s2fENxBdD2OKSHvScn0pGjRvrfA0ZqGWEIpgi6JIXaxx4Ym/THQJC/01lm5P5r7VNaDhHJoMOhqF2UiWsYkWFiYgEW6AYYrV/U/eUcXmT0bthMwpcytYkyCyj9ulMX19Yrc5LTiM9t17UfFkf/meWRNIvhiaGbxMWGadw8sGBHf5gi0HRL9iJRFBi3Hf7E8Yhb7KEqbmRdXHzIf6G06Xgsmcawf0Rq3XVoUN7CH/fR+U4ZIrGeOnnPb31swOlYiWxCO1ICG4xFkkG4GUwEaCuBi0jmTgBDu+RCWCif7OM9u9Pz+TfHcUIMPuaQic3Dr+uheVzBzoBC6eaZayTGNp7UV6p2L/2dvyD6ijmuSXQ9yNDma9TVwLKPcbN1I=","authorEmailMD5":"9b6b1ef9d92de1784d74f0d74941a99a","message":"Best article on Fire n' Forget in ASP.NET!","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"","date":"2015-09-06T10:19:07Z","timestamp":1441534747,"authorUserId":"disqus:ibrahimdisqus"},{"_id":"0fbae6a9-4ca9-37fc-b753-78e61116b755","authorName":"Stephen Cleary","authorEmailEncrypted":"Y6QcqURbaZVj90TA1g6/EUypDCfP9Vn0P4X+/0cOSpJq0wYW+84xLKh1pM+kYVDGbJteaKCwvICffVNr/932LF3KVAyQscODg7KKzJRq3HWNSCi9YXSst1D4lJT2xCD6DVvaUmAwps2LOWPkJ9rqzLBnoCNoX4Lk6Adqaib0k469fMZauIM2nWtVEC/dd8favpSXCN7ircjp5jm9NwM7d39Sk+Iaagm3J+hWEgWID7XC7jCi+6d2bOJX1abq8Dbpx1VGdy6QEoDHiXJVY6VNN8aOAnPO0QdDT9v5AHQIjKsqtZkqFONR7U18t+qgDKW9wUnQwbpx4nlH2XGHrg+lP3XYXIBMt9r32fol2+GxdLdc1x1DttkDH4+T5VlKV5jcjEOBlPnYV2iggnXWf1sdj0evplBZ2MSurqmvllH+ovuANr2f0JK8F0zeJIGj+rp3Pnq9Px3TQkzWktwBd1h8yrgL9eALEau19qEpp26yidtrdlnVexOqpd5KS13i9YRwMpXfhPVrTfYRE8j8GmGMk4SAIMpG4EAfk+NcwJfjs1AUgAP26p7fGa7ShlPhIgDgyJUmzi7vMKWyVb2mtJWaKi67VgqHTF+dHwmADe+NyogtjHU16sG1MUf5Van1j1tB/qnjfWm94cZUmR6MY4Pm9Ozky6BlUc3M6l3OcmHQyNg=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"It's not a question of scale; it's a question of correct behavior. Just tossing work onto the threadpool with Task.Run (or - even worse - StartNew) is simply unsafe.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"39954e6a-6deb-3fb8-bac4-149e4f6bc115","date":"2015-09-30T22:42:21Z","timestamp":1443652941,"authorUserId":"disqus:stephen_cleary"},{"_id":"39954e6a-6deb-3fb8-bac4-149e4f6bc115","authorName":"Daniel Vieira Costa","authorEmailEncrypted":"Ae0wTT4VQO9ja0w8s/P8ik2mYz84IUrDLDKPea+ntrDtQrQcjDBgUhzpJ8ifZIuAQ5SX4bwRmUJI1GQnge+7sP8cnMk3FtYmDa5xq6OfWHj3VyJdmKuZt+XqdDJjCJlqOw5m60ppruqK7dzJ0bLYiTCMTKMoJ+lvhPAaHzAvFGIWhmpyKUBS6KfmAxmZUD47NBdT+bec7GiWRnOjJP4f1WK2B0obx6XsweJ7cJkfkLst66KXgFyjDJiRxy7mcMvKRLVq29qxeLCewTAGL6Fdc8jslPGtzbOr99qiSZfYM6pAc0m7QRZFIWhDPmjrGv9dcv8BcWhhg3DyBS8Z6cfy4L8ENrg+43Th9hyEseNfn4wrPRG0T87c/v74qjXlrP+/H/HOzadCaWDU3DqZW/5Gg2n5TaU0+GbnIDVjqMBmf/fyXsxjcYtOkEY5nzS+bvWq1cIhnXkkxfwWFF6Y6zkBox/H7dN9kJrfXaaF0KiJ+WP3hbz/Ucp/CfUI5nB7tIii8INHzK9/ktocpHvQIv9tJwvIAigjiBYnzUP+8S+jFYLcNrZqw+O0dr2QfEyYFAzv4t37vTxH4+UdFFu6QGincrTkeSsSt7jGw9gFicHIVmLbbOHekC9XNI88Pe4JCP1hC7jUvrcKcoWQYzvtAXN0Fnu2wARt36fNb1RJCJFit1c=","authorEmailMD5":"5121227e0455aabf2410615006c0e9cb","message":"I'm doing something about sending emails in background: I like too the idea of queuing up the the emails that need to be send, and I believe that it is the most correct way in large scale, like this case. There is no miracle to do, however, while this, I need to do a workaround like Task.Factory.StartNew","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"","date":"2015-09-30T21:18:53Z","timestamp":1443647933,"authorUserId":"disqus:danieleritavieiracosta"},{"_id":"a1b12729-eea3-3b67-b836-e2266ee8f745","authorName":"Alex Zqwez","authorEmailEncrypted":"SOFAb0BER6TXzKI/hTz6yX8sSpTqswvHXrF/xDeCzmQRToP+HT50wGS+YSBUaViGbqxxU/YS93l0xgYF7SOcCwqmsP7tjyhVuGkFzls6MOZwrYdKUZj3iuygeqs0fJeQ5oZYGHcSg8wG+dcLFIkaORjz5mVMpNlQsCzwW173TG55EGL3aAHTuigzRhneaciDJBa1HeTSe0ud9mgflpBdSQGtoWlMZmE4IH3CCiODSN4AjhxATuHjRr7xkNA3N/1wq9w2hppzlKgFZOfdNxPPnvLWR/iMKgujCIrW2bTkKVRUuFltJrvdER3z1g9CyE4lggSRAS63+Gb81ejBCeUQW31Q7J0v8TgSXR09uLfpyItHWhIjcA0jgudmRVRThp6qZHETTjoyOh9wGL+UNci7qqXhJJr8LOyZJQ8PseMggl55p2sJJT4R+QsngH9TwLQJmg/uKkipQ55D9ZlRb95cSkSfZ/ZAFmQ+OjcZZmFJj7W597jPhmDbYxWQeyW5GHFKeJCwhKREi8NRwdLLVs1XvRS78lXHRkdwEeWcJdHUKvYsd2wWjs554tB43q80tfjaRhn9kgZh7xm7z7kBSpvcEzrzNzplW7G2hc+6tqj18tww/soCm0+yB+HIMKwPBmUmoO41LrgqJPVyWvVSUW5SVtEFgmn+o1oZCenAdQzU23E=","authorEmailMD5":"15faa42c097aaf59e55537799b092575","message":"Hello Stephen - can you explain difference between classic Semaphore in Win32API and SemaphoreSlim. I understand that SemaphoreSlim use only locally and this is not kernel object in OS. May be you know how it work internally and what is it ? And what about speed ?","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"","date":"2016-06-06T16:06:22Z","timestamp":1465229182,"authorUserId":"disqus:alexzqwez"},{"_id":"bd874324-db86-3a51-83f3-d5b68dac9d34","authorName":"Stephen Cleary","authorEmailEncrypted":"dCLCHmh8HmShV6hSd3ejgp3CxecQI4ZZkgdod3Lud7g5OdFCF7Lb1T5Ux6G1D4w2mEENtPu5HSSNYpyqm9m9uJbqwCQAaA0BAqvULa/W4ERtVRV5+O7MLMyyRmScjguMnGZbznMokXCacGfdjNlDfrZcdX/rP6GDJKXwzW01QdCXEY6ERaWPyM6RZnztkYnvPR8S6UYd/SN4PL3NJaWuZXjNIt/zwftOIKuPDkgcQBe0VzvdpukS6wuA9p9qdTHAu8/ji2EVUD/CCnzepAHMIgNCvcOBspkd6LDIarg2Bp9WJK8/sFB4Um/BV5esN6f8OK1Xf+DPkiuCmBwhP4CKPf18sk7InA9x+FkNnd+5FknvINqv/CJQlOhutEV2v/mw58WV6WuSfWDTS9mBEAhafrWMwzjghYv4qZA4eLvnIYyUUKpa8lAzoIwa/jQwfiMNzT2MhNsm1CqDQv1EzTAb7yKl22jtNOJoizWxPCvfgF/P92gMEZzZ46YoG/9VTmPGXllLPxPd+VLKpKngfN/qSQbJRMNLW9oA96x42Ax4a5NdWOhMns46ymU3ZhVegJqiIwdi/dC+pKLB83cx0DKPQAN91CutJ0FFh5TABOM8Iv6WeNcPXyfg4orPeOQhmUfcj3Z7TWo9po0Xng2wi0HzOx0BWOmmT4KEbcIZo7KXJ9U=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Semaphore is a wait handle (OS kernel object) that supports cross-thread and cross-process coordination.\r\n\r\nSemaphoreSlim is a faster implementation that will fall back on a lazily-constructed wait handle (OS kernel object) if necessary. It is only for cross-thread use and does not support cross-process coordination. SemaphoreSlim also has been enhanced to allow asynchronous coordination (WaitAsync).\r\n\r\nMore here: [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/library/z6zx288a(v=vs.110).aspx \"https://msdn.microsoft.com/en-us/library/z6zx288a(v=vs.110).aspx\")","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"a1b12729-eea3-3b67-b836-e2266ee8f745","date":"2016-06-06T19:35:21Z","timestamp":1465241721,"authorUserId":"disqus:stephen_cleary"},{"_id":"688db17b-32a4-3478-862c-fe2eb09c28b4","authorName":"Doron Grinzaig","authorEmailEncrypted":"HiNrmscMSqf7BPWH3n+2pErdFXNv+GBII/niNIPvNkKvPGQkXETUIWmCrPqLw+Rftn6bclecJu7KjuJoWGPn3eHmP4nEWZI/m232wuurd5VuZ7xkLhg41FyB3lZ3g6zi3QrgRcosDx/ep2qKs4Z4N/F5b/vbz5PXDM0nWi81J6/gRqYLnV3v8VA5ECdxVZZh+DsLlgXXMmkaIVtzsryw0nwlW5uPwG774amfXLygSLGIx82/LFWzQ4R+j5uFXgUSSQNKVaTkGCg0TdduPGz4IAWXwcS/sjCjhMcJMVChqtwAyOuRD91LMiEb2shlJnNm8js+BI+ZYeCHrDTSbWP3rI1E6iFtzAPyqeC3id647TUSWbOatZwTps7aXZ1mJoizIqgHgtH739p9RkYrYT52rzWdeq5TViz3aTkjp9zWw5wbSR53Ltxgtp9S+7KEVxxfkb72J1JraUDqNrUuGtpDUrbppvy73CRUTBhyPrODQSMAvVhRB1q00wF/4XtiU/c/eYRYlfw5UhbBvzc8YTPldkvCa/UH/nuVcmO0buVr+n7+sYiTPLJxQoYexvyGAOF/G44Wa+5LftnETb7TrvRTu7CD+nlJGiB1uaRVhdx6cRsCaCklODC6DM2kOLTenYsfQERGeALWY+2c5eICbEuUASFuIHw/O0fNI2Hs54XbHyI=","authorEmailMD5":"02b2b843388c866cab51a735f817b291","message":"\"In some cases, ASP.NET can detect this and notify your code that the request is no longer necessary\" can you share some links about it? Thanks!","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"c3df7ebb-e0d1-3821-8e21-098527068cb4","date":"2016-07-31T16:22:05Z","timestamp":1469982125,"authorUserId":"disqus:dorongrinzaig"},{"_id":"0455c565-1a4f-368c-b2e9-79c58e12c58c","authorName":"Doron Grinzaig","authorEmailEncrypted":"Xl9Alazg4wLcQ2Ofux4ci8tkEjYtsznNId0NDvRi1NTCTVRf3Whhfml8zRm5e8276nM20oUtuECN49A6gdVsaqgX8gTYSKPJRTQVSqr9SNhGDrdyJpsW83+ym0NSdhkIfhqsMarctKIyhVzqDqiVBfxvZCtz5wNdw093yJ7BgbEXvCnPB8uG2fvLCOi5f3FM+JcV5OW4ZtUkAxTuSBQc5oPQuMyx4A3t8cNxj17pCQBMvq/iWb9hxpULM/ihWHo2ShC15aWcKeOVZIMWsjXgAc3eiZ99vLTxKcGzQ66LclscaU4S7/1UybJQyMJv8O+92tS7Y8+FrAD+npoBYgJd0uZpHUiCVM9h1EYYnCZX7YyaPWGpULXktFooyAAkmTdCitKYWKWgRppD16Y/uTMXkY9+taDzeuFgZYJeXvc1ykaL+5Z5EAGvrQhXNJ2vLhbZxNsRW/lBZEEIuSbtqEAArzs6Utp3DmubR4PPX1Vq0VeglhlQ9e2x8daEAuNSg9EOZUUNZey8+Jfa8vMjIz0kjNqmlVeiaccN0sTY7Lsp1abu0KW6cUi1y4Ln8rbhzYsA5QZV9jNvehPmkqtBf0W5+x0dcT3Tl4lKZaVeVQW2kEt1jNaVGBchW2sP+kQylyJGhs568NL5tLO9bMPnX6seD/iFovRee1B4IEsv2qyDDLQ=","authorEmailMD5":"02b2b843388c866cab51a735f817b291","message":"Thanks!","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"61a0bc8e-41a0-3052-a3fa-b58a74ce403f","date":"2016-08-01T10:36:25Z","timestamp":1470047785,"authorUserId":"disqus:dorongrinzaig"},{"_id":"61a0bc8e-41a0-3052-a3fa-b58a74ce403f","authorName":"Stephen Cleary","authorEmailEncrypted":"ShQgO6kcL6nWmje57YtUC1Thu8h+69jQG9GsVtrfHEtkydrC2/gSfoJstdRdWcE4BiRSnea8QfTiRD+CHhXc0OvqaAG8nwumPB4/J6QUNQUduLctlmF1RmXUQE0p8ELQ256MXrLxqrxSuZhWs+yrCwfUpRETFHnWsFMNNiyZyCnY5BhP2LsAZAVmdi1XYcZqqkZjQE/thpzWNxuNW3WVi6trYVDXptS1Y3QpyX9fFvQu2ok5ebBsmfCRKw2PjHdxAQA5k/J8+N1y/sYo5IwNZNep8PU1+S4qOWlYapSVdH9Y0CltEdcOy+BiJ0Rpv2Mo6M4po7dNqQYNi2w6/MXoHCnXFaHZzPJEaWb7v+/zvxiE9dVuJWLopJATQ5pjshqymZLmbT/G7DpZjCYbxo8T4A1X1Z9s+57K93kXD5eu8GtiezGGj95YCqcO4WQua0s/n7i1u0fE/NZWlu6aCdSsTv5GOdBYhc0wpioTGY9wqtKbdfosUzr+2SJL3zBWJ4ES/XjAFSvheXYE/LiI5WNOycUTw5OmC5kVGKWSYRjhXN8EBx/JxrnPRDPjsj+Ns/uwrkSiIAMSTCAhWHsGM/cTtC+GZFK+Mrw5diAN1iB+jjDaoZCMOSyGV+BloZhjfVJTEVMgeViMOIVfJnvqon+lzFKCQqOdMTB1RXtQGzvFYzc=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"There isn't much written about it, but here's something: [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/library/system.web.httpresponse.clientdisconnectedtoken(v=vs.110).aspx \"https://msdn.microsoft.com/en-us/library/system.web.httpresponse.clientdisconnectedtoken(v=vs.110).aspx\")","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"688db17b-32a4-3478-862c-fe2eb09c28b4","date":"2016-08-01T10:18:37Z","timestamp":1470046717,"authorUserId":"disqus:stephen_cleary"},{"_id":"5055e0c7-b8af-3b9d-bbb1-d04812901d14","authorName":"ayman metwally","authorEmailEncrypted":"IRaqFMpPUFauNNWaoF7dIazOUGa7oAvIHBMOCGMZhLBMQFTphZnMjEBgKVbvJK05UErQwZaxYp7Ke2BpYFLUdyyeNBesKyk0S4hZ2mn9VDY+hoFpN/Xja4VRc1E85R5AUj1VQ7MO88PpR+rVAIOQ8KpoRj4m82R+h5bbXG1RXbuCXdPOKOa85OiQypMss3xVokEXrTdQKo8tKc/yTkLbHqWquUj3xRcwqtYlOhd854GpXg1aVHA5PndUQEEjHRwWnX2fWkIVZvGaA11LHwHXpv2kDtrLuIsNXsXDE4YjTIp9I6I+rxvp0yvd26Gn6+hisoyxgx+AiLywSeIEugLAHUuOkjbOkVMyNHiVVRj+XtKHcOMK1rd+T/HObzB+V6MvpSeDgRNcnOC8VnDmzpsAXNj+fW3Y8GaxRT2fpK1p06fUuAKsbz8ZsRuZAR+o9+Q1uHlZK5eKO7XX1IH/AMAy6nFQWg747XeZLwy5nnYfLIshn5poRTZkglrwJmro+pEYqW9W3i4y9CWzOr1E8fKUHYBeB042cRpRbsfwBqggsP/JHrO/4hxJdq33kXjb+rkTmb4WeX0mtqAr+BFTkGEedAbVrL6Kf333/8IHisO1mDy/8gRndG8WPzIdT6xHmxPPFJ6MdOR3KMfi6Nf1rfX9KBRtiVDzGSzG/NiC0gvkBYw=","authorEmailMD5":"424e448aee11240309cca7b0023de2cb","message":"Great article .. thanks.  \r\nCan we add the following solution?  \r\nUsing Self-Host so your ASP.NET app is under your control and no more IIS auto recycling. Then you can safely use Task.Run and all .Net async goodies?\r\n\r\nWhat do you think about that? Although I'm not sure how to self-host MVC and which version supports that.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"","date":"2016-09-16T04:30:50Z","timestamp":1474000250,"authorUserId":"disqus:ayman_metwally"},{"_id":"5a248b30-655f-313a-94a4-bdc1e070c8b9","authorName":"Stephen Cleary","authorEmailEncrypted":"uPVRMac6MLax8Q17nlHyceezUGfbwv7FRTpEliXMUyLn3dqcrYxtxdLCfPh41+gA4LW6TY4opG1yHzGwkzsDuYEeeriXZ65o5cy1qi+NNfOkHN5DecA8cpa7W1bnf37APyuXj24QbV5FMslM2qk7pXkYJEAHDLWtBR1PGkOMOmsK1fI/eH9uQ3XTnEtJ3JGS31bbeF0x7Sy+3MOkHBkMC8EXM/IpEq/Jug1T9UZMGbQAJMkTatU70GO80O/GSUCiw4cpmsWrHnOM7ZhVe6m/JT4a1pxAGoDx4JB2TU7dDpCz0JJ5hsAq0T7+hykJmDvkDSMCvJznqxceNh4d96KX1U2m4L8DHrnKzDWKjDdhHFZU1CDTQYjZE9Vjr6eeUV6z+mIOphi3OT5en+YSEiPF0VM9rpe4wcQL+0ccto4BdFVOlPPH8We5mjofoW8+LhGhoS+DDOccdQmdIYUbwnHa7I4VZG0bTv1c+0DOV2amJe4Fii75V2LYO9eVne0vwTqR+SaSH6qGVU9/2Fb8fcacpHk0TebRkQesccbmsTxtBMugjnv25rnyWcMxrFb7TbhXRz4R9o1wRFw4DZZzjZBbU37PwD/LXUjn6mRVQ5gR0+Zwvosz0H1tgqLT4DDpfUmplnnKmMUVBmEoaUMGk8/G6fTCmuMhAhS6ddPGAPLt79c=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"I would hesitate to take this approach, because I don't know how much of ASP.NET assumes that it *will* recycle occasionally. Also, (of course), this approach will still lose work when the recycle occurs at a higher level - like a power outage. For truly reliable code, you have to plan for (and even desire) system crashes.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"5055e0c7-b8af-3b9d-bbb1-d04812901d14","date":"2016-09-16T14:08:15Z","timestamp":1474034895,"authorUserId":"disqus:stephen_cleary"},{"_id":"5c9ae958-30e2-3f38-8e5b-47e5e1704b8f","authorName":"ayman metwally","authorEmailEncrypted":"VU0EHVRdfFZHe/J0PNqlXSIN1DVva6TC4RAgslSbJwWt5zlNwGZca2t2y9/DEnMk+3BFg7areurVzTzX0m1/xat6qDgA33Wl5PEErm8syWBOmBhHzKMzWzT4vRAmNDpGeeYN7Fpy2TNXWCkw41a07qn14bpfUPtGbpjECyEdihfWh+BprtpvrBw3BXRvSUOn348XOAr9hmDFmqLbY892F3DFdoUIsU2XsC7h4DUNaEFCCf5JdKwUXp0eoSpHYsweR08+0zY8r6Kn/qBKd+9MJBIdbW3X+lwjtUCJ9ubDI4chNiQbxcAJEr6IxZA0QJXPLeW0x6Z7vhI5ylGeSJR2i1nnZpVvCiCR73hOdXRHQKKU6qcNZ9GryLBqZ2Ah6REHkstSaPssCY5mMRQ+zfcKyMq3Ni5Y3qOyzT+RFY9v9T9vMI5O79BXkja9i4z7LpKlIRc/ecnCn4WhPyMh7kuV+JPgOjkPXTrGgCDw4OzUc8pjhiPAveSrEG+9E2Wdt5xoOOeURJ2OdMBvzRexX/srpxabZyMOq5kjuB32DhtmdvKW9rszwC5CRPpqcCsUV7j099ssbIRCXglybC9MtjV0vbA4gjZakHC1N7PD3IcHUcrUV6aE7XniEeW0X/O3pP/POh9Ts6z+1OQWAeNWD0UNNPj/REdb8EjP4/NZIECuuX0=","authorEmailMD5":"424e448aee11240309cca7b0023de2cb","message":"Thanks for replying .. I never thought about that risk (the ASP.NET assumption) .. such a valid consideration .. but this brings a new related thought about \"Self-Hosting\" in general (for Web API for example) .. would the same concern also be valid here? I mean to avoid any self-hosting for ASP.NET even for the Core version? What do you think about that as an expert?","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"5a248b30-655f-313a-94a4-bdc1e070c8b9","date":"2016-09-16T14:45:49Z","timestamp":1474037149,"authorUserId":"disqus:ayman_metwally"},{"_id":"75230143-06cf-31d5-b40c-2b543141f1cd","authorName":"Stephen Cleary","authorEmailEncrypted":"UgH2342iDXhhHgvwCKA/6z84kXL0xsBgCxew5BsfjenYrJpoliem38jIhjBh0TISAMxKSuRT3EbsH3rZyhf7m+V55X13ORgMOcQbO+PjSqnFkXkxK9rNTGYYkJ76UhrfzEPkT5/iSJCyGGVNiUmWx+PrlsYWf1JvQk6bhLJvxcsY9NcFIMebEH80rifpvhVNlOEznbQPHjvAly7otsIntsi0RqKxhD5LxLtcgPYcEzguhqZMSQDbBj40IkSpVbo9Z8kYWEwv3kph5RSEz3AZJkIL/9LuBwYWLBjbsm4fODbwz+GD0e/6K7rKdI8yarw1Hfhj/SIbBnvIsFTlWmQdJuy6hR/23MpqKR4ksbMt0pF6JJKYRtroDSwAgYoYwAz1KQ5DgmY1IR7Ui6RINekkc8lYUg4BUn03P9cemUunC6m7BCqy+xFD4pIu7cFRuRqzXFrAibt+6+yydSFVXZjwW5rspC9oKdMm9jMkKyJr0r6leFejJYATxPkewSMEQYrb7+Skk/W+WBrgTq0MTVTi3seADTplGr4ClmPfrc7BPsCoy8JEkdX0IAT6QLtPbRuRCJ8XughwDxg8PmP39tg6CKqASguRrKk1uUtAPVYOdWbdzG/R5sJnI06gArpvOjPKKqv/DEA0IT95t1K6iS64cxF10HcWv9svI7F167QdFDQ=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"The Core version is a complete re-write, with self-hosting scenarios in mind. The auto-recycling was originally put in place because synchronous requests were cancelled by thread aborts. In Core, thread aborts are not used, so recycling is not necessary. I *expect* recycling is not done by default on Core, but I don't know for sure.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"5c9ae958-30e2-3f38-8e5b-47e5e1704b8f","date":"2016-09-17T01:37:31Z","timestamp":1474076251,"authorUserId":"disqus:stephen_cleary"},{"_id":"13c0fce2-57c0-3cf2-a89b-4916abcad358","authorName":"Vincent Gravel","authorEmailEncrypted":"cYz0Q9sotDi3SVv9MsMAHHdNBxqDus08m7KaIi028NlXJ4pDtSZgSI0sYu5ifIw+MqKVZIwtTOnZ9Qzxws/stZZEAaQNAf0Sd2QW3TZ87W1nv0aqlY3EbfclSCGn1BZNEsHiN4TnOXX11qh7n3KoMPR6HKXelvYHPiAUWT663iqH+ldO1/QH2UIdHNkKz02AtfFCKgAKPQ7cilVcMiF+Bfh/hTfJhgJInO8EJcsE+R/VAWkAbvEHehazTJjgd/Kk/cGTl3g+/vGqUw9p4h4zvsLSjEQC1ldHlVMy5uHJSX+5ccjd31q51mU3Zt96m0QUx1LvMzefODocWfdw5dNNNuszc8Y8zpu02LwyY3Fu7mThfOTepYcbA4QjCsB9HnKOnjHclE3Wk+NO9tLmtSqbUSo+WknVRD1DFY0/1eXiODboYD5+X6ff0SQDbMAtfvD4nPFu5gLlyzCi8HF17b0YWCwmGz/UBdX6X7B5yq69jbv5vzWg9XcZ3xjQAJXDfd6yHOPPL1B6Lmm9mc6OdRk5Aq8YYSItaRXVg9B13jyDCQP3yGx/U2TeoM4Ijn+5RaMFpqGVnosobwNopo9nw498ZZYOfzwkBhG3iLIc/Bc1yw/FF29tgnkjDiFNqhUfS0tjG1YJdrdLtP4joBCoMOqbkNu7VKY+MFjj+dNL2SJkmsM=","authorEmailMD5":"4e9d619f1a01bbb4f1c209dbbcad2498","message":"Hi, if in my case it's not quite a big deal that the Task mysteriously disappear or never gets to completion, is it fair to use Task.Run to fire and forget some work? I have a lot of small and quick tasks to fire and forget, will my web application scale well or I will run out of threads in my threadpool and then the following requests will have to wait until a thread is freed up? Does HangFire use a thread from the threadpool ?","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"","date":"2016-10-08T04:14:50Z","timestamp":1475900090,"authorUserId":"disqus:vincent_gravel"},{"_id":"3eecca4d-aca6-384e-89ef-d98f267d476f","authorName":"Stephen Cleary","authorEmailEncrypted":"mOinWQmHwwfwOT1VGmWIooVs5P3y+GFOCIODJrjnEP0FMS7bz/GNsvN6m8g9V7LvzrLh7mEsQXjaLKL9oc9+UUh01tmWFs/M1FYQ6JbAALw8NlTfvajRoIfsVhfwaJep435Dj5u2Sx0HBM0Lu4PEuJ8PxMtVIwrhWeflh+QXZe9hT1N0tMdB3hYAjjeTtSTJVN53qL1cQbJnY8rpYAT385K0G1pSamC1oEXs4eB4DQE+SRcsuButpBXgQ8HGI3r+73x+AJHp4tbCPfrAYjd/W/lx525W+vk1JT8qDAljMx9Thi6StfVgjCs2t+hpGOSCjO3WYBBKPTEmhgjXG/O6MvQdgFqjV3AlurvjSfvozguPHUfj9YhEsm/ER9ti2rqwYRjP4nNABNFgNa7USzPNw+DrJ5BnDaKF0Eqa3glttJNYzKb2Z+a/5x4aStN3DPgI6InWEMI0b+fCLuJnDR2phdd3l/6/CDiS+BzvQNXC2fOF1XXYVKb/nAXEbfYDliPKIi43wH5P4nFA277+x2vcKs9pfHH1PoLbZEjWV56NlEmwY7kCBfx53b+W+eO8qZbcj/EbM5asQdT94dKtovD8Cc8NXb4dmiaOHO34kAc41SpxfNXb7eK3EPF84BjJxJJJvaQzDy2SkGudQkjy7RAVUekfIb8u+/iKpLfbi2Mnd2A=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"I'd still use `HostingEnvironment` instead of `Task.Run` - it's practically the same except the work is registered with ASP.NET. There's no reason *not* to do it.\r\n\r\nThe only way you can know for sure about scalability impact is to build a realistic test and measure it.\r\n\r\nI don't know if HangFire takes from the thread pool or not.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"13c0fce2-57c0-3cf2-a89b-4916abcad358","date":"2016-10-08T10:32:07Z","timestamp":1475922727,"authorUserId":"disqus:stephen_cleary"},{"_id":"371baae1-f883-3de5-a5b2-602397bedda1","authorName":"Stephen Cleary","authorEmailEncrypted":"dB/Gq4Vys+RTyysjpII2LftRiO7zz7iPhWFMHRSCEm5Dm4FuQ8AzJVva9msgdGhEl5fn/myFUWpkX0rGhMja4c2Dyrf3eDWVA/6mxQG/75+ozaSMzAZaDA/HeOmk0nuo2OJYBDVTFp9oXrqOrJK4OHncLr1+Eh9CkXoe+2HsoMgjUFS1NMkvewAT28E8X1nX8S5FLFyixHQ9vI/Dv05h7HHVgOdkI50Ny05xu3Y2/0rw2xPV9LKKALuG+jSmpommC7nH0iyandW42RRbRtL7aGGGjsRqAvx4alfvtV+JTvxyjoH3xCi7+pSwToFn1H97ziu6oCtsRDoOOzbkLbadwRP+UqqXUKfzmdFM2giRaKglNgU7xc3gowD6ipxZtqFGRJrXEcQCaCrWfIMaQaSO6bpY8yimpV7mf/i4HbAwL7fBV65jueGc0B7NKmP0ooYspeVTlTRlIsa+fOtFdGIVAE7OqbU96/bu+7bZ2/0P9SP6D9WnrSRp2klxyZt1pljYutnE4YwAQHdLm4TwOU8Me1mflNEPVhgpLk5AzS6Ewh9QGYT9MSEY1VIpZVy7XbKrVwDYOIhdQBk0MzHMyF9NoZvKFlUQ37fsHH09DVH3tHjYwvMp3nmp6ty+2yuIu6o/Hc/esDg2sq4C5UFDo4vPT8zQsGc49TAuDdnsC0Ayn18=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"How would `DomainUnload` help you do fire-and-forget work reliably?","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"d5bb44c2-c017-3ebe-9b88-d6a1e85fee94","date":"2016-11-02T19:39:47Z","timestamp":1478115587,"authorUserId":"disqus:stephen_cleary"},{"_id":"c01c4ac1-bdbe-32e4-b335-3ced2b3c4088","authorName":"Stephen Cleary","authorEmailEncrypted":"o34a7Rht9rh7AIzZ8XloG4gc+9bSWqcpL+n3sGb6rrgOM0WNyvixvhnTcIp3RfdkFNGJY4FHW7HWI+/o+XznoDYnSzaI1CfmIFAJ9UZ4izViAIpo4U33pIsOnvfvAoZ6Gbz2k3BOvXKSLGD+uvT121P4rLyYpxUsjs53MiTeQL6YqCYKgg2077XLMTJWCLSlIFfPGl+tZFGl7+jWhILkKCiYIdEUmrg6U5DMDnwPG9s6qg6himVgnmkrtk63h1azyL/Zo8ROCitm3I79MI74GzHYjqfpETI+UoO6eTOSUEBwpfZrnsh5zkoJHlsrY8AACoQRqN8xAMeZjkoDx3EPxDxFKcLVLE2iERRZso8/3T9T9wFCFnKaUjD4YoQMotvAwivet2WgVHJTKp8jQunI81jjXRpAUeEC/bH6SDuUk+9+MYNgcTXQpxNp9z1MYAdgDxqRbbCLVxPGqKZvK09rN2nad/eJ3jI1Y0kP3msGoxuFbcHKPDWm1ZfjAISVp2LzMbTMWC+YrA4vVwn84+Hi5ciSOH5wjJ0ipsBsDm9UIRra5FoXUnE2M9opbWsgYVnyzhXU8bfKmBuwl9jsp/yKgHsOQey8AfOwR2nJMGCJzRD+VNW+e0znNMoaxPlpAQ0eC1YOegDIEjXN4XGLM8MmDmxFkDA8XH1EU3y6lvlUWMs=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"I suspect that there's a maximum time you could block the `DomainUnload` event before ASP.NET escalates to recycling the entire process. So, it's roughly as reliable as HostingEnvironment.QueueBackgroundWorkItem or IRegisteredObject; not as reliable as Hangfire or a distributed architecture.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"d851d9c8-691e-3289-a483-407960d7d1a5","date":"2016-11-03T13:31:08Z","timestamp":1478179868,"authorUserId":"disqus:stephen_cleary"},{"_id":"33bb7ef5-630e-3135-b0ce-1982cba051d3","authorName":"Vincent Gravel","authorEmailEncrypted":"P3a65M+VV7R0sflM11azgrJyaQ3l4srfDyLOqwSphU+udXnwGNPpoR6c8pFkyOCHArv2xF8C0Xq3vrv/ti4d4RzJyAml+gEOImuUHRgUR3u2zH3AgPJY2ur11i6a58g8nQnjvs8wLycWWIdd3WnOPkRUM6nuZ7zEvX4553NA3/dVtzZOF23At02o/GjFn06tPKRkHOBAcGPJIn7Mqb99lZdZfG7RGF1PB6pWfnNltRV0o9CoWNW8IyKQXsWqHUmybV3lunCZ9NLQlR3xT+4IVw8UzegvIyT3cPFBkD7AV88DDUyzD9iAk5d8bEsXB0Exgv5x9XKm0LXN52METLr6guqPUF9UVLI6uyvR7UkLPT3wcalM4tlk2XgkPFbpswNfUtbciNKofeLB2SiTPBNjTVtbXuTV6Af/IHVfjk6ip+Hil8aj3zpVKEcVoZjDIxZhtYTf3ANUmPV5MZ0XEGLGub1U/5oE9jFnTKvjkmeY5g1sMjwgzmFaWibO6Hyjh2e+JsxMBVeiV4VG+WsmkYKvMgnzdgaU5r9JVLyOKQZ802GNSzaVKsFtlqugTuySLE0ZKqpT/lhteWDOGg8l2Q6u8pfn9YZK9eRvku4mX3So/8Rbwps/A15n3fugzyfFvfshOCmbVJ9COxHPc7a/tZUaydwndGJfaDsD2LxZ+eW3BAQ=","authorEmailMD5":"4e9d619f1a01bbb4f1c209dbbcad2498","message":"Hi,\r\n\r\nWhat would happen if I fire and forget a task like that :\r\n\r\nHostingEnvironment.QueueBackgroundWorkItem(async cancellationToken =>  \r\n{  \r\n await CallWebServerAsync();  \r\n});\r\n\r\nWill it release the thread used by QueueBackgroundWorkItem while calling the web server so the thread can serve other requests? With a web application in .Net\r\n\r\n(By the way that you so much for your blog, it's always open on one of my monitor, it helps me so much)","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"","date":"2016-11-30T14:30:27Z","timestamp":1480516227,"authorUserId":"disqus:vincent_gravel"},{"_id":"8227901e-c6e2-36e9-9b8b-a2ebe21cba42","authorName":"David Fowler","authorEmailEncrypted":"pGTvNDCk1c1DqyGVs3oooIakV4RRfnAmX3dgqEiIZGonghYQ4dBfwtEGs1X2ZIQCsQCiR0DFo18v13mVKitRK7BcGZDX3FVQAgjc1fnj/9/U5WO+sQLf9NdQPQwIyhOjlBmxikfCEUcKbUtqPIxtzZ9JHERxkH2XDgIS+MqLlcaItwlXovgdtX42Xo4TQR1KSKLtH6lHkXsO2OQ6t+Qv3BXFAnm2WO80L/mfz6Tzchxv77VvfHpJzNN4PoT1G0UoTCPOuaaLvTvnV2cgmGsGDJkNEmDfi9N84WCu4AxxvTi0KgzU3OfHeXJ3rTCMoSTi2U+PhXeyZjAV+qz6gtBZJQyE2Tz9WeW6pZ00oQVP/Jh9BxuM1pDKz3E2kiKSFe9zn88XqUqI5nQksVLAX+KV1sXxmf0elf7vv9nnl+G2O6Fab4Kfl1w/lKq6sh7UkwdK35VD32Hs2U56XSRX5jK7sOQ/Ty3WjblJyHuS5uQ7JF7EWuvWYb0zhaXOBFF2QNYuO4eDJKV3EbzbdkbfDfWXzUeInYAZG6ph/d5hbGBBlZOqYM67UyCU3B+CIZ7ZY31ky9wl2cVO0+rTu/dF4Z9Bg9km7O4wrWEVmabqmBEzsB7hxb6ftwQr0Pdde1Y97cF51d90DTG9QXh4Y+AEidsvfEPBMYZANscUb16LNT/zZ5E=","authorEmailMD5":"1fe64ebb176498be5f73ab51986c6b7b","message":"By the time the domain unload callback is called, you might not have access to the same objects you would have if you handled IRegisteredObject.Stop (like an ASP.NET object your app might need access to).","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"47a7f61e-79d0-3f9c-82bd-f97e8868d0b1","date":"2016-12-03T11:09:10Z","timestamp":1480763350,"authorUserId":"disqus:davidfowl"},{"_id":"a30bc40d-e584-323f-a69b-f09629827b1d","authorName":"David Fowler","authorEmailEncrypted":"jBmBr4qGI+xQkQd24eeakQsKEyA5/MJcP6zARxFXspo0iO0ewLtVc/eAGj9IgrDYZsesAeOoPRQTv+M+abEZ7aVAVVbOXXrpqBapoVvSmY/mMmWXnwy0yuEDb4IYU0TDcu8p+0/8F4pBvcP4AWsmTZgCazkmaQtnjad8eoDiM2bllD3I5IRR//sHdK17QucBJ2tWR59HhlvOSKobaq8b5vCRRQK8FFs3XCqef7/pmfq4J7mD4X4LvMC66aYIDY2ohGrCu3WtK8GtRSb+cwbmxADuwSavoFBc1WgT8n48nJGgV+ZJiA202GoobHG/SnNd5+aJqngG6jIshgbhh5BPF7UvccVgPLDMnvhup03JoVidUB3+p98YR+xdsz+qisOR5rVxHwqJwMVFDHRGwJ1UGBItIVUWS0q8CAdqytMgsYJi8RzlRTjAop5Iwh8w/01ubGZgRLffCvF1zfCgHx+c9LCsOmyiF+LfWET0j1gDK1Kwl9tENVqEnI1F/ZwHWU2+VpHgDpSbUEz0hKs6uNNHa1FtVuZWrTvSvrzqBj45J2GT8L1AdfClbaeX35QqSVemmlXmnwUCETyzUnFQsiLvOXKa1VOIxnhOKohz3VfEXjkgpAh6ZW3zTmcaQ2b/v1S39xuNt1s8lT+iwDJ9pd+kZluNMsN9UPOeWfZOpWCRTC4=","authorEmailMD5":"1fe64ebb176498be5f73ab51986c6b7b","message":"It's really about the hosting environment. These same primitives exist in ASP.NET Core in different forms but the same ideas are all relevant. If the environment hosting ASP.NET Core decides to shutdown, similar components will fire events so user code can handle them. ASP.NET Core, even when self hosted behind the ASP.NET Core IIS module can still receive shutdown events from IIS.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"75230143-06cf-31d5-b40c-2b543141f1cd","date":"2016-12-03T11:12:25Z","timestamp":1480763545,"authorUserId":"disqus:davidfowl"},{"_id":"432c4404-5c52-3dfe-9b00-ee3dfc7b43d8","authorName":"Stephen Cleary","authorEmailEncrypted":"wdSZyblihmaNRf0JMt6rx4wgVxti+44mH/C0LSwu92tS/KGw1j2bP+hAI3f3xfX/iR0e8SPssYevt0+k03c4tcYTz4mbDY9J65fgQtUPv/6oK0Q7/I+lBzJefkNE8NKUbxeSbZjMBzgaDq1RJYMeCvmVWXzwMZgooir7qApZuriD5CLQ5kyV6G7nKd0rZsLyoFVMoUGsok9+JumzivR/QNkhv2gowx3VTWtE5a+1QVoSavl4JlmIvbbSWvVAC4d2vixxbAOe0oTKP4bv4SoAif6ogMPCqmOnQ/8zf6057YRhAIP7bjY1BcK9EEnk6ekFj9hZ+kS87/c7oJAKV77s8+zfEwgYmaAXpcg1I1yrBuWf+PxTwOHxcGDS3J2cqmRfBhauO2p5b+Rh9T6i/2MGxDpoV4mRbg/UxKvNOwzgHbRDk1yEeRKDUUih9OX9Zz0H7na1uSf3GJ/0kefYB5eTT1pV+EpV7Ojd0jl2soodeOrJLOflAOQpLHPFGPX3UG8As+jOdI9wyTHyTezLbIWnIi+y6DDV8CVp0DNXqf3ILitVcuk0ePyogRpjYw0ozBTNUD8WHzld53bW0qAnePvAUq2d7hYkSXkrexJ4BUKvGpjkVfV6TzaAXqmg4IZqRr7u4tfGZCU8fbMFv2P47HKfE13Y1CgdMj5vwmcE7AANV5M=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Yes, it would. Async/await works here just like it works with a regular thread pool.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"b067bfdb-a477-3e60-b4ce-e1dad9045074","date":"2016-12-05T14:15:36Z","timestamp":1480947336,"authorUserId":"disqus:stephen_cleary"},{"_id":"b067bfdb-a477-3e60-b4ce-e1dad9045074","authorName":"Vincent Gravel","authorEmailEncrypted":"AmGREqznZOsQ+XG6EFpXNTvg6+rWgfpOZLBzjAg0HW7ZcPwtOXijzLRr0tTtTa0n9gYL2PHSRTrXtCKknxXbB0zZr4ytClrC1ncnKgaSPaaPgU+vTQanCdOuJw1BI3oIKhXKmDVNmtb+XPuXiPZOHSqWf81v71APZLIg3jiTLQ4WUhE0u1ruKi1jnTAY774t/ezLcuARef1t5JIWJVr0flkoq/0D2zbbPHXtYd0O/y7g3GfWsMgSxn7DkELDJK0olG1yRLp9SggfCeMv/4/AI5VbbPWhvXzyPNP55fnrfLoTS78Zj2lGmujtSuN7dqYJxfsV1k/Q3zLmFloqD1Tjyw5YqF+KftbuztwBz0+GfhuiWidubHsu0/32jrfJnH989HckJsvctlwyTsNltt9TDwhPHUcu1LizYuCelK1pVObXDkW96Vjgx7Wqg4lf0P/hV/X3UF6Mc9saG1+B5gr0HInan1+q7kGKQMq9N9ZtvJAjoP8+rZQBG+NQx2+D+RQG4XYmvGliXXfBIyxhNQ/J1h7E+00t1a/W7lnnvhxgHlSSuWhSFOZjqqagpt3Vmx0S+xe5Pq6pLLVygyXHXgrBro9tf5Itb0VDrRPKJt2C3mOxHiTVjIAsvnKnS5YV7DGW3ORF/hbRkbJ3AT3OQ9EQDHrUYb1v8MnsbJ7/4NEKOFg=","authorEmailMD5":"4e9d619f1a01bbb4f1c209dbbcad2498","message":"Sorry for bothering you,\r\n\r\nWhat would happen if I fire and forget a task like you said and I await a call inside that task ?  \r\nHostingEnvironment.QueueBackgroundWorkItem(async cancellationToken =>  \r\n{  \r\nawait CallWebServerAsync();  \r\n});  \r\nWill it release the thread used by QueueBackgroundWorkItem while calling the web server so the thread can serve other requests? With a web application in .Net","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"3eecca4d-aca6-384e-89ef-d98f267d476f","date":"2016-12-05T03:35:18Z","timestamp":1480908918,"authorUserId":"disqus:vincent_gravel"},{"_id":"178c2a89-bebc-35f9-a24e-86b4ab3f6f3c","authorName":"Igor Kondrasovas","authorEmailEncrypted":"QeObl1X+Q2j5LWiEAGt1hcmjJgqpdtca00w5Cuav7q8L8UtZXJoo7vairAtG4SuAjcOqafLIVDuD2Q62+6lGh4kkq2eU581FIiw1Cxn9lthBO8F60auo5a3PbSt5Gkb7oOQNhMhO4gbdJg5R857yi3mjy171wYxqig6GzSotFrA3nJiGupNJcVhfgkRDhLPUOSEO66sr1WnFqDPFyUQ18YH22w29xH7EPPc4NtgLvveCOOn8nW3PvOdTyH3bad1WlBuLiKzready1yyf2fVtJ6pouNtm9BrLzf0ZdqcsNY5dADT9bHtTwTfBgzV9kUtjY8rIj7FtCcNH2FIZieimNlfKPujrk4E+PXTLOEaRrqKFJphwILRNEdgWLTsg+IUd12tJbfpMJbwfF/dOwxBKWwp37uRa+Z8DvXNvWNFBZMlxo64E5KmFTKP0Y1Rk9evUv9Iipw0zIvVxMuNbMweYIUh/4Svdnyne0k/UD0VoUogCw/wx4Yu6W0hFfWDyewdSQlfIaBIWHEMEKp4Qug6T04kuyLcB81SScm6IgkCH9xaxiflR6rS0mEpp+enoFKKRYhiM4Qv2GJt4GaOtlEbcZqYemCiFi1iHZAlQBfTucx0I3CA69J/Pm0dkroN/Adi4YNqeJX/v6AdQjgGE1G1SnVy3kZRCRe9DmUl0F0KFLPA=","authorEmailMD5":"86121edaf76dad98d4a2a7ba979e4f38","message":"Thank you for the great post!\r\n\r\nUsing a distributed architecture, where the background work is performed by a windows service running in a virtual machine and listening to Azure queued messages, how can I notify the clients (web browser) when the job is finished?\r\n\r\nI was thinking about SignalR, but I am not sure if the notification should be sent by the background work directly to clients. Or maybe the background work could callback a web api and then this api methos would use signalr to comunicate with clients.\r\n\r\nWhat approach do you think its best?\r\n\r\nThank you,\r\n\r\nIgor","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"","date":"2017-05-26T09:51:59Z","timestamp":1495792319,"authorUserId":"disqus:disqus_7CeRgmnYkL"},{"_id":"79819145-f385-3670-aa88-3e0aa2049d27","authorName":"Stephen Cleary","authorEmailEncrypted":"b9vQXNlGqUFLZA/fQ8BEBG2a9nmC2pYHN+7jq49wUaXPl1BlIzOTQdXtWuecY5ZccYjGbuDeR5NCWlO/ZRmNyTWfDdM7ZDVQzH3ysnXo+dNDaVKZjqDG6P6uhamvFrvbArQF9/kurNChk9jDy0IGL68s2yWDAgNqmhCRCRgWr7m4EwWya+i2c9jSnS0eIPbfgxRCdrK58Bdzd9u2Hq3rRvMJ0t9R7++l6NKZhpnBaDcDAglbAhbNr0CgLq5mh5mvXgxpfsQxkjeAcpH7SreM+JRUylJaqyJcwsZcOf3/8XEXmJJcfsFz/XncUF0jTiXV5LESLLGGm2p3IND+5tSRgtbmBrkS/wDj1uLXC85QLAnVFRRJfq4wjKEcG0PIAGJyAaSNhC6hJjxzHwIND6RBOBZt8j/hnWSEP/6LeTQK2tFRd9oa809MZm2nzmvsxou9aOR9Dd2wL1rqfOF3cjKvPooYynBYwQqUC2DIZLRzZZXwfJNgvqcu46wwbIGmCPKK1z5uyej5HmTZZv9ytnnf0X5uMwfjWb3Cq8SgvYpfR6zkPbhGdpzGpulFz3YSn+2Y//wIAm3p8XSFRt6R1O149m5/c1sEkIJRlwapo+Q/rHCmTGeCSP/FNSxSvxpmnrM37uwqPjfxlGAcKhkUWySguowoNqrU5xC71iWqs3thlCY=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Good question; I was just looking into various solutions myself yesterday...\r\n\r\nOne common approach is to use SignalR, e.g., a Message Bus with a SignalR receiver that \"reflects\" the Message Bus messages to HTTP clients. I haven't heard of people using a WebAPI endpoint for the *backend* to hit, but there's no reason why it wouldn't work.\r\n\r\nIf your work is more permanent in nature as opposed to transient, then you can also consider polling. Polling has a bad rap, but it's appropriate for a lot of use cases and - depending on what your app does - can also scale much further than an actual bus. There are some big names in distributed computing that swear by polling.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"178c2a89-bebc-35f9-a24e-86b4ab3f6f3c","date":"2017-05-26T12:39:57Z","timestamp":1495802397,"authorUserId":"disqus:stephen_cleary"},{"_id":"f5c4b9fe-7f0d-3009-a4d5-f6fa014d8cce","authorName":"Bryan Martin","authorEmailEncrypted":"vGq0y0g/w+AGJnlJHOaAtWg4WCkMZZIciTVHQaCA41sbZsiftcetC95kSywtv4hdjAxrNeAk2FaTX1IhdDMrHPWwDCkPoXMbyVUJCwGK9Ds1I8QCYN2L5G9VAcG4f0fdaxzgtRiFig69mwQqAlnksd2PEdFKzyQG57WNjHWvtEk0KPZS2SKYni/X2yloQ0AQllSkzytZAgi786HvAPhV5a6L4NrCaqdoVX3hOHRQ/3bHJ3g9hzwGJpNY1wCTciY0/sCDwWlL3kgi9P7QRoIkis8Q/O9uq1SUv/+vOCz7A6yj90qBCjHOWX5FlF9hSOmCGH7N11IRWvwDj+uTvINUodlsPuSI7n+FexVNEKcYRNym0hbsnLx7vZC6Z/TCEInhfe/Z1qHVxI69cdBfYW+kOVJR8XY3FfcyeWspv4tAFLukoB82TKc9XKxYqR+Px2Eea6QPoTZhUnd+/9lAva+ZwY00HiE7GUHgKNLBvKhiWlGoetAfhDlI6VlnXSdNgOLfNhhLfJmjqQecQVslA92VGisa/7H0DdNhfwT3a1lEHibflpXcfaq8r4ERdONiKbkoZoR1+fCAb41yGk2W47NxhJA+w7xSnLbhhSDN/19vVapLOWZ91YotC1AGQZG1968GADNB3mlFQc+IKrDLgAXWUeclsme567pHs03Ddi0+xmw=","authorEmailMD5":"7a543c72807ab80eb69ca69ec8417ac2","message":"Great post. It was the basis of some research I was tasked (pun) at work. For QBWI, based on this link, ASP.NET will wait up to 90 seconds. But even that was misleading.  \r\n[https://blogs.msdn.microsof...](https://blogs.msdn.microsoft.com/webdev/2014/06/04/queuebackgroundworkitem-to-reliably-schedule-and-run-background-processes-in-asp-net/ \"https://blogs.msdn.microsoft.com/webdev/2014/06/04/queuebackgroundworkitem-to-reliably-schedule-and-run-background-processes-in-asp-net/\")","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"","date":"2017-07-26T21:31:29Z","timestamp":1501104689,"authorUserId":"disqus:disqus_gzcXLIqYXy"},{"_id":"5fedfc9e-3e60-3c43-953d-f46291b0eb95","authorName":"Matheswaran Sagadevan","authorEmailEncrypted":"kMSQe1Umr7sGCZfXMYIdTKJh258/dCwQ7Ms7DzQj17cvIvmhc8glm74bDIcmV2/yhJLLCArQ57jFeIB9nzdsZksE9K0+JCznbfYBZsjnci+vGCDV0V1VnUVASHzOcR/AwvGY+7oY5Rh+X3guet/QgMvdcUKz6MyLYp7Tn44qHnEhdJy9jfAKuXFVRQekqMJcmiLJhLFRN2VjWz9toce98qpW0wnDZjHmV7y+vPIdG0vTsOTmPTzFnLV9gxoQud/XLf6xf4ienVYV0YnQO71U1le3hlgfmStGcvCsdVqAcp+e8stKsoJ9IPcNyN0x6e1fsFV2z7qQILbX4WDBsowioTRtHk+qchg7n5mwd1I1aQnImGw9IV41BSal8FG8cFMQs5Tbzla+qU9uhOj8Ul4YdG4n8SMlttJh9/1WeWDVd0AlVUjhpdSHYo6LG0suTHByZbIgiu3jzc1v2iPZehsAXiya05ncNsAp+gT373ke2usii5QAXo5XIhLp940daS34bt0FW2MM+z2wVCihZOIC4wFEj6IK2RLUhHImG1YE6ipKBsOPJzjMcmnADUdhpqIXuLivxFYqaDOyQM5SbQ1H9dmG08i5wFKl+md9Oaj3w62JAxdOQ/wOlEiU+AySaMEKzwbQoipV3254BcB2CW61BzM9HZtKavRQqGuQleqIGR8=","authorEmailMD5":"23c2bd3f80d190be6cec9fe4ece228ad","message":"Hello,  \r\nThis is one of the greatest post i have ever reading worth. Thanks a ton for this.\r\n\r\nIn my project, there is need for fire & forget call from our webapi to other project webapi, and these above I have chosen the IRegisteredObject and I have used your nuget from [https://github.com/StephenC...](https://github.com/StephenCleary/AspNetBackgroundTasks \"https://github.com/StephenCleary/AspNetBackgroundTasks\") here.\r\n\r\nThe reason why I have chosen is,  \r\nto go with Queues, Hangfire or other distributed way, we need project level agreements as we are following SOA. we are the consumer, so the provider should be reading our message if we put into the queue. So this will take more time from business perspective.   \r\nAs of now I have chosen your nuget with IRegisteredObject as i also need error logging mechanism which may not be possible with solution 2 above.\r\n\r\nThe code perfectly works in our qualification environment. But when it goes into Pre-production environemnt which load balanced, there i can see the 401 unauthorized error. I do not know why?\r\n\r\nDo you have any idea in this regards,? this is very urgent.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"","date":"2017-09-28T13:56:36Z","timestamp":1506606996,"authorUserId":"disqus:matheswaransagadevan"},{"_id":"7f832460-446f-322b-9fcd-59936615714a","authorName":"Stephen Cleary","authorEmailEncrypted":"OUNPaKL7cN/zTaXmRXT8qXQ80V3uyAWFC8SJfUS3tH46edhhCKeBiAWNuIEvb1viMbUhT7eCE2GaJEpyH2u863qhL2QQP2Ufj94QT7XZdEUs3K81jvBjeDiD2rdIiVHBnChMXuOO12EzaokZozmDzAUd0u9p747J9lsMHTOFsl4LLwcLuNoGONmx+2PdXMGCj//j+r7daI2DcjBiJ0Q+N2+ZpnsTAUrKSXVHLK1LdqWcV3weBNv/d3atukq/SjsefVb//2Gv8pxRBLH3HNfzeL0skCFW8j6dMOt4ioyhR14dW67sohLnxJJnYUL6vH9w5uwsPmkJpm8CsoHxspxYtWpHnUUL8wPOiLkEbl43emyM22IsRdasJ4mOG6T2DYywxtGBk/OyTg+mTlgME9mnZy6HBExTny2wTcuAVYl78f/1Bf4Mt1a4JfuJH7AVmOMidpHs5q74cGIgT/H+XEIEub6MlupbAlZVNr/MwlHw3b6l7+t0PnLRoTyZHeSIrzix5gkfcuf7OKBF4V0+6wny9XYE6L1ekcVt0D6IoRpSL8m8JCnoUbm9w0NpROQyIkMqQQj6E/GrdmbjyvowfdIkdCVOFfPYHUt348UAmbTlK5fxE5stBQXB5pUH96xGrkjy0iCP7vRIAYDsxakR/5QGWmueHV36mmJHpzsxfpSDFcA=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Regarding logging, QBWI will log exceptions automatically. My AspNetBackgroundTasks will not; you'd have to add your own exception catching and logging code to whatever delegate you pass to Run.\r\n\r\nA 401 error showing up in a load-balanced environment is usually due to keeping session state in-memory instead of in distributed storage. It certainly wouldn't have anything to do with the type of background task technology you're using.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"5fedfc9e-3e60-3c43-953d-f46291b0eb95","date":"2017-09-28T21:57:14Z","timestamp":1506635834,"authorUserId":"disqus:stephen_cleary"},{"_id":"12c58ddc-58ec-3fcf-802d-14f1d06e0452","authorName":"Matheswaran Sagadevan","authorEmailEncrypted":"vycBCXpVxIlx+y/hWd5W4PQ0A+nIB9cAML+n9RGuScYjav02UiubVmukp5EwnbwfjvxKg4t+UPdLYlxZvgXlskgbPzy7PT0nOoQTXz6/py0lAF11iOSjmm8ddZ1w/S6Wf9TzsWmPDqTHK0/7HVzNfQisJs8LiBfuSbZlWWQIZhjCNnLZfY82LwNHHXVg9OAl4+kuyGwzI4h5Giyu4E+Fsp/rQn7LCBA93qQNSN0fWiEkoAX/lSSHe6X3p0Sx1euEjZdgOuRU41AT0d2jt3kBkPv7cmJv+SdM1kbssQM9/FTerMYu/Ld6hbNO40P8BuxGH8uYkRL4pZzwN3FvBwCXQ5q8JNkXzu4zaeLz/V7tck35b4BZNn1Y6QlLni3Ng0VDjrtVW642PRDlrKbqCGwYiR1GHmsL9RJAnNyw7itWmPQ1jRoJhkLBP6cs8uTi5l6ToCjMrvlos9/G61ItMxa09DvtmA1PaW4SL3qFBiIEkc1VQQVp/hsH8j5/7vSymU/X1nFOlEz8i2+3BuqVXY1fleMWpuGMpJZFu+yL9VSWkl/IY5iCUBhsedWBAye9hE73m6incWZ84td16pmU2z7q2maBgJOVDUFyVUXZ5mfbKFfL4dPLMPek6LGz8du2CyREzbnJtImQKQQiXXLA6EFGA1DMfZUSTqezD30eaWPst4Q=","authorEmailMD5":"23c2bd3f80d190be6cec9fe4ece228ad","message":"lot of Thanks again.  \r\ntwo more questions:  \r\n1) QBWI - if I implement this where can i see the logs and exceptions ?  \r\n2) Regarding the 401, I found this is not because of Load balanced. Actually for our application we use only the IIS-Windows authentication. but it seems the background task expects the Anonymous authentication. Because When I enabled Anonymous authentication, my background task are run successfully, but if disable and just keeping the windows authentication, it gives 401.  \r\nKindly help me.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"7f832460-446f-322b-9fcd-59936615714a","date":"2017-09-29T09:16:25Z","timestamp":1506676585,"authorUserId":"disqus:matheswaransagadevan"},{"_id":"8889074b-e094-322c-9740-7414dac794ad","authorName":"Stephen Cleary","authorEmailEncrypted":"SqLXbOFyUxnUjFfCm+nWnFRH0GPOeyVuW8/web4fVJ0akJzE5bJGDfAnL2Vi1DnlBkm4/f2q9HkXrnJV4ybPX/xXBTIt36wLlBH74X/YNWoik23+NOzxzOkxBnpZWOuYkooZPeZYOHCw4JivqlK/TB/+v6mdCmPHhlcjkSVy5Hg7894RWOSU0Ynadxw6OC/oLJkmLHjLKDmYc6kcJBSy6G4YqDZYNmKHBfoePlFfWREk+iMOlOCXh//ZfDhRVIF4vcGwBxH6yPUOcyGI2IBL1kZB0x/yMW+GIR7WBeSsWdpQtTFoHnj/e+7mbRCnpHDkDLbZfmoiUuM4Fz8u45G8NuEZqZFAsvaJwhwCZ2pDJI5496yaspzx0V3cpHmGWeCvHuqSaJ4ERSpB73ltbFO036uU4jR34n03XMJ3+bWpC8JeqcIXtRkENSo7TUKUBJ1rV+XAAbGfVgw0uE1Pai8sKpkL9A6tDr/F5EABNB8D25lUxtxeOWkFlxxHaPvUCzrh8f54PTqDF0J08Y5/QRB82sNirDfN/VnqEf7n+zRj7oOn1EW6q0QkdnFeEXzfGKm1+mx4PsCrxSWsMZXQUaGDMTHhA19aAQJTSh3SEpi2ZFI0t6jI2X1Z5kNKRj72GDDac+OAXdGp8whw4jkwk2sNqb8J3NWkeZE1XRvogZefTrU=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"1) I'm not entirely sure. I think they just go into the web server logs, along with the standard request information. I've never used QBWI (or, for that matter, AspNetBackgroundTasks). I always choose a proper distributed architecture instead.  \r\n2) I'm not an authentication expert; I recommend you reduce the code to the smallest sample that reproduces the problem, and ask on Stack Overflow.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"12c58ddc-58ec-3fcf-802d-14f1d06e0452","date":"2017-09-29T13:13:35Z","timestamp":1506690815,"authorUserId":"disqus:stephen_cleary"},{"_id":"6b75d485-f570-34a4-86ce-241c38913801","authorName":"Stephen Cleary","authorEmailEncrypted":"X1IBQw9q+SbOi4ENcZT//MD4owZNEDgvoBmxCocOKb7BNAs6OG20xypvlqgB/HbFeYaA62BPx1dzebYT+0jlZK1dMThLQpUJnQKnzxfZc7psFA0d7EhbAJyTA4gbW9zKj6X+EyXNkjJVxCysvNr5oG+tzJfK1IXmm8mVQvgI6PvPNvgssDKfN9VNfpnKofWm6RBUeBtg8YD8XMP7chkF1GD9Qnhfszl7OxaFMBL7vtPIOLk4UE/9nnB48Hde2d4WWW9f1lWSA5QndWuCDjOSZgNzW21RRqCSfQ1iXPe4JnCP9M+oE0TVcPHRDb24kK42g9fKhb00A5XvVbSuIir/ciQrHJnD/stldgLSejgVpWohNyp/3V6mWinnDu49qQ2ZWpYr0sqwhDVwjrd7Kvw56GumrH0+AZn3uxUIuYJeoBvWQG08Ut2n8nofEteG3NM3jwDt5ztIy+rB6t20tCtD+HaVe+NeyTOPx2Fk11+6r8+iJqUoN7qMxxO3d4QBAABuM/tznMdvXsqJmFT7z8hwvAWVyq/YA1p0CbKbY7rIJ9f1Fps/1iiJRAaB5m5jhqmeIscrlULRODlemYiV4y0Z3BoXBfSyuisbuuC4yLCXS3THvtz2cZbYQSkQgk3S5HT3wn26ys+afilrcVAJxGF7BbDdx4BuBtaqwFdFm0yQCWs=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Yes, it would. You can think of QBWI as a Task.Run that registers with the hosting environment.\r\n\r\nSo, it runs in a regular thread pool thread outside of a request context (just like Task.Run), but ASP.NET and IIS are actually aware of it and will try not to recycle your process as long as it's running (unlike Task.Run).\r\n\r\n(Sorry about the delayed reply; Disqus has been sending a lot of comments to spam and I just noticed today)","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"33bb7ef5-630e-3135-b0ce-1982cba051d3","date":"2017-10-04T16:10:41Z","timestamp":1507133441,"authorUserId":"disqus:stephen_cleary"},{"_id":"977dba87-4cbf-3c86-a939-e3ba5d2c2ce3","authorName":"Jeff","authorEmailEncrypted":"Ua7+ASY1iXJZvY7ku99My9AcSO5MC+6hU3HJtMUOC7CpncLNujF7VZ0T/AaOQGeCsAb5jD6vF3cLc/ZoHc6WadVfPg2lu9EtPepdgF0SupFhLNcGTh0d5UcMo7mmy8uCM/gPTwMEAaZLU8v8Uh727UYLTsh98kW9yqkYhdBWt9q/b/Bo7UAODH+7t6O2z8U3OsacNU8OHS1X48Zq5LM4W1YyVBidhByMxXfL7h24+AqYCq4cMc6B7lLheThcfQMsodTK00GxiLoqx3m7DbBDz45uM1WN2jBdTRDVOp3xMtw7pgN2lndOOtq42r9zZ5rvbKNOazodIPdnTiyDp2GEzynWmmY/IZyhVaqBIQhyX/SpgdNhb2iAa4WI60nlZComWs2EbYmfin7y7ZDosgtpKdLzaNPvrFKZCOrLrezLcSQekT/oq508V9qDExJ0aQ8Etq1jkIwt4mnwNqURmPs9zq1Iws5t8mOVYTOZXzKeoi9e72KY2Yzmh6PqyQdCPgmpar3kKkxddng5pL8xI2OemdLukR9q2Mlxi8bMNs8PLkIcJe0Q/FnDDBhMI0eJMg93WI3cO0QiQOJ11vOn5JlB3Fq8BFF5rIhRCQjCJ3+3EIQQRrxr6FPFQWQAwvyPji6aCYGeWRhikhly6YBNDqAYsZZf+E+6U6XMjLvtH+XdDGY=","authorEmailMD5":"dde3bf631a325497e9e1d211ae80dbcd","message":"@stephen_cleary:disqus   \r\nThanks for your awesome blogs. I have a question, I am building a library and all callers may not be ASP .NET applications. Do you have a recommendation on fire and forget mechanism to do some task asynchonously and not block current thread?\r\n\r\nHere are some options:  \r\n1) ThreadPool.QueueUserWorkItem: Simplest approach but doesn't let me control how many threads/work items will be created and there is a risk of adding too many work items to pool (I am assuming number of threads will be controlled by CLR/OS). Also, the API I am calling inside the work item is a sync API and there are chances it can potentially hang and QueueUserWorkItem doesn't provide a timeout to kill/cancel the task if it is hung.  \r\n2) Task.Run: Provides a way to put a timeout on the operation but not sure if it puts a limit on number of threads that would be created in parallel with every Task.Run - can we create too many threads due to tons of Task.Run?  \r\n3) ActionBlock: Allows limiting number of concurrent requests through MaxDegreeOfParallelism if same ActionBlock is used for fire and forget but doesn't have a way to put a timeout and that puts the risk that task I'm running can get hung - same problem as outlined in #1.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"","date":"2018-03-02T04:02:06Z","timestamp":1519963326,"authorUserId":""},{"_id":"8b798499-b628-3d08-95e5-e2104bc10d66","authorName":"Stephen Cleary","authorEmailEncrypted":"X6ICf15z6ty6LAoV554CI4RnqGlIPE0PnwvOiFQWc5UCJF4y99V94/j1w+fmBYJ2ZvCBJWDD+4Alzm5mcMoC7xr9CGjRsNtDFKUZSs0H9Sjy6zfiQ1t48nIJpk6VbPIKrV6n9K3w8sPFRff905Pg2zdbOzGvViAx6+Ht9f+UrsIzRafwcm2J55pIOXvTY3QmkuquAFetPuUVQ5X6C4vp2RSf6wZyMNwhjsEGeodXGmjRRi4By50Yii7RvQRp1tE84pBO6ekAFSDDgRd0apGRHXBxvAiO3F6rHYwStSdmoGb3OVlNFvX1LNJU4XBQzoag9dq/T3ahvRYelHIH/IhRyUeU3xeXOBkCKS5bzQIFAs0a7d0s7DrWdtemHvdG1+CTVcRTazJECT7LuR+rH65mWrTZrUutA7NIaCyVW31ottF0JrJtKD8YLSG+sOSo5U5fG/hCsguLuL9/xpExIR/x48xZdKW9UHuNLyMW5uxSijRHyr/A5Ke8mlEQJsKIswMbbvvCP3XoOUonLIAYLVUsTg/L0p/gZ83TOl5iu0BGMGb1mqRgLLGhbyDxU7crwuWr0FjI1VVJlfBYj+hVIcaiynAUz93FrFp36UdRVFaZQ3l4hDIMc+WZGo7N11sOVgL3koBfE41KtYNU0mAIGWhkmVBW/zLip9Nv0N1Nbqj18sA=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Since this is a library, then if at all possible, I would push the \"fire and forget\" part on your users. If you have a synchronous API, then your API should likewise be synchronous. Async-over-sync is generally an antipattern: [https://blogs.msdn.microsof...](https://blogs.msdn.microsoft.com/pfxteam/2012/03/24/should-i-expose-asynchronous-wrappers-for-synchronous-methods/ \"https://blogs.msdn.microsoft.com/pfxteam/2012/03/24/should-i-expose-asynchronous-wrappers-for-synchronous-methods/\")\r\n\r\nThat said, if you are sure you want to provide an async API for a sync operation (and in a fire-and-forget manner, no less!), then I would say:\r\n\r\nStrongly consider providing a \"done\" signal for your consumers. This blog post of mine covers problems with fire-and-forget on ASP.NET, but the same problems exist for any other host. If a Console app uses fire-and-forget, then it can't know when that work is done, so it doesn't know when to exit. If a UI app uses fire-and-forget, then it can't know when that work is done, so it doesn't know whether to prompt the user to wait. If a Win32 service uses fire-and-forget, then it can't know..., so it doesn't know if it should delay a Windows shutdown. Etc.\r\n\r\nRegarding your options, I would say that it depends on what kind of \"kill/cancel the task if it is hung\" behavior you need. Thread.Abort is dangerous (can easily corrupt application state); AppDomains are a bit cleaner (more difficult - but not impossible - to corrupt application state); but the best all-purpose \"kill\" solution is a separate process (impossible to corrupt application state). I once had to encapsulate a database driver into a separate process because it was so unstable it would crash our main app on a regular basis - not fun, but doable.\r\n\r\nBTW, Task.Run doesn't provide a way to timeout a task, at least not in the way you're thinking.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"977dba87-4cbf-3c86-a939-e3ba5d2c2ce3","date":"2018-03-04T03:15:24Z","timestamp":1520133324,"authorUserId":"disqus:stephen_cleary"},{"_id":"1df10440-5e43-3ae3-914c-d4694f4093b7","authorName":"Jeff","authorEmailEncrypted":"tHA0g6XoI2JG7xpIV1scqJEhmidzjXQgPYjwxaueO1keqjVTfh0KdnCQUW5ldR9CO44xhqA1WJT0s9PxpXgoDXhP5wBTunswTZPgPTCVlhsDZURsB4FZmQZHvK2L91FD7V86AQuXRdt8++cURuc90rNAnbJg+GE2SOEyMc59dpOdbLm0CGD3GVs82Pz6hinOczFFfoWhADFM99d+WHY2um2ul3J1wB0KMgaR90QQQWGqVhx7S9+3ipV66xt/R5/bBsOzxUPnZyCwnOWQAAAdgQmq2VCrfo9XrwV5+GcNIl6p4DfisIhiOA4FeiFQxXUbsXy/X283aVBGIYEGFUDeS2bwSwdLTXBXVuzp3ZlnPXtNNcmwG2qhKRxdYm8Pk+dhRtVZU3P4Iw4bdpFpeZHKAf0Wk9uKgN65O767QF3GgQa2L5dUdB1QmzA/JmItl0F/ERtuTHrIuFOJ1xDj0oMKQuv1M9qNgUfc4tm7uItH/IBBu4oHoPIwf93yp9tEqyWuqzp69ZVoz330DyBtK3vqshhCUL8AJ47EahgGwPz3tnVKQj+VMGJlqHNPQZxsxxtfVtQYYDmwrjm9XHORFXGCdfzmdrvHHt9ZN5DvCNGw5WDY0fZgXaXlWpGlVQCtdwGJS58tFOUOIGhpXBjtl2g64HsPpavf1s8rPelbxQ6FvvM=","authorEmailMD5":"bedfbecae9ad412ac942b195af154544","message":"Thanks, I'm doing the refactoring and the actual background work can be encapsulated/done in a different process.\r\n\r\nBut, I still need to call the API to initiate async work from my low-level data abstraction library in such a way that the call is not blocking for my callers - this is avoid my library users deal with this complexity. How do I initiate the call from my library?\r\n\r\nDo you think ActionBlock is a good solution? It sounds like ActionBlock and QueueUserWorkItem provide similar functionality but ActionBlock provides the capability to limit the number of threads we will create and hence not impact the whole system if something wrong.\r\n\r\nAny advantages of using Task.Run over ActionBlock?","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"8b798499-b628-3d08-95e5-e2104bc10d66","date":"2018-03-05T07:46:21Z","timestamp":1520235981,"authorUserId":""},{"_id":"57cda899-4c47-3892-bd9b-be5979cd9e68","authorName":"Stephen Cleary","authorEmailEncrypted":"CnY6frUy/xwBbPrk34WQKHh8ylb7yadiAYper2HSHJCWUuGDSTtXF5MpSeZyC6KzuIA7gJNu86srXhgOfigbVyEyLKTbNuzmM1D0T+ZG68KS53PA4pJgcK++64dD/Ylq5FaIPxLN3M4Cs7k9PqANXXwhbiy9grk8uLihZ7gvmIeEdhLz8ocLnD/xW+p2rkHsawO1D1J/VJgiXomrYEZsp4TnyKEZGudRNU8auMdMnKps12lsE+O5pFjhGJgjyowDW6sYD6m4Fz10kIgbJaOwYNwZKnbRJNskLgSEjUkAG3njdDpQPtbRAG+LUYPuyr0lr7wm+WSlVm7npWx/wcDtiVsu8x/Pbn0e6WjMZX+BX2lpJPRKzuCZfLs7O84/1XLgPRIvJerARNqJOSOOJ/uUavFRs8oJ87hbRRHSMmEirFrAmYK4zksOB/hcL5mi9b0yl0qqAgjBOEdGh+/n/SBrEbjLjJvzRYqQhQ1GvDNPYZoTgJsQ04IOuyGHRDFZMBTiGD1ocspyUJOenKx5nJowDRZYJ9NUAdDkl1qIHn6+YA5bRwjkAcXQgcke5Zp8kwdV5HSN2bDju8C1u/PCykkyNs0qm49bXzmQE3d10zQ2nBEaDEwNuWkaQq4gPw6RaSPrnTesnvYVUPfjxmXCOj3qnXYYaiobiebqizQma4NfMJk=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"If you use a separate process, you can be treat it asynchronously (so no async-over-sync wrappers are necessary). If something goes wrong, terminate the process and you'll get guaranteed cleanup.\r\n\r\nQUWI is very low-level; I wouldn't recommend it at all in this case. Task.Run is a modern QUWI. ActionBlock is a higher-level abstraction; as you noted, you can limit the threads with it. But if you encapsulate the call in a separate process, that's what I would recommend.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"1df10440-5e43-3ae3-914c-d4694f4093b7","date":"2018-03-05T21:23:57Z","timestamp":1520285037,"authorUserId":"disqus:stephen_cleary"},{"_id":"9374c12a-313d-392f-af7c-e9fceff89a3a","authorName":"Jeff","authorEmailEncrypted":"o2oDO6axNuqled3t8TObXYzOkyA9N9izAGcPLjvkG/6bUOmRYBhkGsUndLX2Jcfyb2CtB/4DQNF2UY6hcQeviTxErBmaULPr1+gZj1txwZMdYZWbI8LPca3IyLNMRrlAm8Ps9zR0c0s5m6W19KPkqcD2ZUMutv9jEln4HNAhyEonBRK6GJXML1uXjeliXXNpr67HNBFz2ljZ6idh4emYy7jJ0azlYrLMQt8Cd16QQ4zdseU19pQl/LqLBl3YWo//l0TPgeY6DTlIgoKMUVSwSBKNqRi7XDse+AInYClaT6SMGXUkN5jxHxzGFgdvy20zDOY+XpLN9+HPzWfUP4iW27YS1MKavyEKSXgGldZFxfOni99zg4A28WNvVRm9LccBdYKfFu/y27C5xSsPDDTSld52Kuulz6xU9B8Mmyh4McpyXcnG+wX0FTkuQ6u3NPuG5LcL75j47N0jiFl/Ix2quUJlJt65lvftftcBbJmmW/CkyK60q8xMXOO1RJEJOT4AelSJgtK/4GY66edAo8Au+fRcHNIlhSq1PDMOhYegPiHn38R74o5C0VSI4VR+DzdYBX/T8ZGzj9TO5RAo5GyAZ8dnl5qAuO7WNTDuRFoIQH+n7Us5rftcu2rF1utzU8DAQ6aeNMy9u89wfG6kDQN0JN2+mKHplWWMqKV3w5FwmJw=","authorEmailMD5":"dde3bf631a325497e9e1d211ae80dbcd","message":"Thanks Stephen, I'm doing refactoring such that async work in separate process but I still didn't get how that will avoid async over sync wrappers. Let me take a step back and elaborate:  \r\n1) I have a data abstraction library that is caused by several calls, not all of them are ASP .NET  \r\n2) Async work is done in a separate process P2.\r\n\r\nHowever, from the sync API provided by my library in #1, I need to queue/schedule work using one of the 3 approaches (say ActionBlock) outlined above in such a way that my sync API caller in #1 is not blocked while the async work is done in #2. So, I am still scheduling some async work from a sync API in #1, the actual handling/heavy lifting of the work is happening in a separate process. However, to even make that cross-process call from my library in #1, I need to have some thread that makes the cross-process call . I don't want to pay the penalty of making a cross process call from my sync API from library in #1.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"57cda899-4c47-3892-bd9b-be5979cd9e68","date":"2018-03-08T04:51:20Z","timestamp":1520484680,"authorUserId":""},{"_id":"e51b5f5e-dba0-36ab-bff4-30781b612fcb","authorName":"Admirador de Damas","authorEmailEncrypted":"I1IgRj8kWWQQN22UJmk9t7pyVg0vZEkVcNEcle4znUhSuAnzhNsg2eAyunvKB+5u0sLd4Wj0YPeB3ai9/HOKpqHA5Gu7s9j6vN7dJQsJ1c+rnUznW8rgcKGjerDwLf6FbrY7xJmKq/Xh2ie7u5fP20Kfc4ao+QvmysV/L778tK0wGeu9hem3nrxagcemw4NLA7AK72Tx+UfJ2hZRtRHdkgaF5QjB7FpPimbi0i9W58MVRF6JT7cnyQJ3IHmTNuYtBnu5QwPVInLeCeRkPUa/XG9sNZVOGDzbT0CmuFf0iU2fSLeGv4R0do0a7ZT8tlIqytZsE3lGs5i4KulkTdTAUJgT+ZSUWhMdqzuJsWR1AbpuIKauls9gQARNRPa4mU4YrYJYGWwuI1SC0DGErIUYDIxzcPbDXBtxTwIZXMy5n2YXU4HAHapRl0cwmvJGU69Eg2TmbTuDhdjP5mxFnbvvCtfQSCdov97I43RONgCRbJQD6LTx56zx8hvBGB+9NGPN1vfPfzIu4sqYbOXqcJcJElwuAUUW+OmoGhdDOBtTzjfb3rektV16J/Mtz51Xm0lEZjQiF82lGo4lSTEjJHl/8dgKr0k1uHxC3hcbxMFoTCZGMH16GyP0IgVrR1W5q6+wZg9bkJmEX5ZQPNF9b1BJ0VcqyFNFZgRGQoADphEQ+4M=","authorEmailMD5":"873dbd5fe8982d6380307a3d52e59b5d","message":"How use HANGFIRE in Windows Service, for communicate Website WebForms ASP.NET with HangFire, using Sql Server, with full source code real world sample and good patterns and practices? Maybe too using log4net, Nlog or Serilog and Exceptionless.\r\n\r\nHangfire Server not hosting in Website IIS, better in Windows Service - Console   \r\nPhil Haack wrote a great article on the dangers of recurring background tasks in ASP.NET\r\n\r\n[http://haacked.com/archive/...](http://haacked.com/archive/2011/10/16/the-dangers-of-implementing-recurring-background-tasks-in-asp-net.aspx/ \"http://haacked.com/archive/2011/10/16/the-dangers-of-implementing-recurring-background-tasks-in-asp-net.aspx/\")","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"","date":"2018-03-10T12:33:00Z","timestamp":1520685180,"authorUserId":"disqus:admiradordedamas"},{"_id":"18c0754b-d791-3a12-88e7-5f67eff4eafa","authorName":"Stephen Cleary","authorEmailEncrypted":"MlLOQbYxzzWw8MxqAmuIKO9J7VjJyTQ6/sV6lBtHQvHg1E5aL4UXWlHuW8ZPuIPcJBYPODT3FXProL8rR7XH420YG+TfMOUW/CTlhdhVJIASgehnqE3yqJjUti1g17hc39en33RfFVrYz2R9FbopNYlumLB46h4PcaLQ0F17nw00LTNmD7zj7fC6bcJLu/AmnTjE80BQoUGl7oxBaSOv+Rd9GN+96W+H9XuMvF/fPOZNcJELRitOleucja2Gh5qGxrzhjhg8f0J4WW2N7AC9bW0zpweJCVnlBjLX7Q8cWrCtY7BUJWh4XbHcbj3ctMyml6cTSaVQFG5XtwzkiLQ9WaSRReryfhitRn7IB9RBh1Z5epRBVZpqqAfK+LmFL1KNWFfwHm24/l5VY38z8cFQ0cBNIlfLZ+lYEi2Fsty0gV2KsdwcuPXPi/Ypf8aW8+j95xYXnnI3BQcJYHHkkElMtCpD3BZfrLnDNhkwXXSWVfvZo4I7Ua0HhIFDULalpQ58DYeg0NxV2o6VB/QgUAFQyMJtB6RMx5V0zMLMdZesVy3N5AHtzpFfEvJQ8a1CdKZ/YGrUAAL5s7kv43dmZcKFCz1bPoBo0uFWQRixbuK+ioCyIILjzUaM7gCyU/LXELDqqfX/eECRUQCIRFj2y+Dj10dQgANb3TxHXQru1OZJrRM=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"If you have a separate process, then that can act as a sync/async boundary. So your slave process can receive requests, do the work, and send the response, all synchronously; and the master process can send requests and receive responses asynchronously.\r\n\r\nIt's the same as a standard client/server scenario (where the asynchrony of the client is independent of the asynchrony of the server), just in this case there's only one client and they're both on the same box.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"9374c12a-313d-392f-af7c-e9fceff89a3a","date":"2018-03-15T15:01:04Z","timestamp":1521126064,"authorUserId":"disqus:stephen_cleary"},{"_id":"5ab879d2-e127-37df-a211-71398404f840","authorName":"Stephen Cleary","authorEmailEncrypted":"pBlZEI6cxcBW8FBuTj6/Z5kD1xHlyXcyE1AAPLBheygafBB5jVWsoZ5ebzj6d5FSZSQHL/c3iHg2dCNl2Fewgl2PS1aWI9W4NvuBA/wqpNiZGokwHdL1U7VKVX9x5UeJhYLKDUn54Vjj5s1+PPwm4uMRqIDxP7PzWP3qgygeszKO48OdVpNCD5+bExsCS1Gl2CpSuXDVWFRe+WXVl6ETI5eabWYkPQ2gW73uVIKmPkpZ5AI6UlxgV+YqlK3cztxfGbmgtTA4lDkPUnQscREwkXXCUQ7TuyHq/Zf4tkLsgBsd6g5Blf0jfvqO55d70Kihi3boi/RE8FafeIa1PppfE+IuiD7L2LZ36id8TVKMxgzTKm4yECh7fPX0vu7AIj2XiHIsEslg6jtCKhKNDh/DnJb31D8kymadA86meZDIoKxKaie6sipRcyiiscuMkkrixmadw7zmZ9W1ApfXRD7jKyuJBphhZjnoUqwZcZK9r/M/o+Kw+PGXOwwstlrIXTiuHgQo3ltyW202+6smRJjV9ngkrHqJHwKtwJ3fM5njPSlo/Lc6zZE3qhmZ0BKtEdkJ00rIFcKBQscISFIQIuM6spTk/1EMH/kfGz7sa1pMoRHcEQIX6OmT7h8d2NlQLTNlt2s8d51cHYB1vmyBujwXuMbS1/jo8PUkDsc2rwtYobs=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Sorry, I don't have any sample code for Hangfire. In fact, I've never used it.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"e51b5f5e-dba0-36ab-bff4-30781b612fcb","date":"2018-03-15T15:01:48Z","timestamp":1521126108,"authorUserId":"disqus:stephen_cleary"}]