[{"_id":"66ce0a98-95aa-351d-b31f-747ba8cd5b6d","authorName":"svick","authorEmailEncrypted":"X2zJupyhZufo5g8Wio4Q4mtLeIM9hTuV9QI5Us/XghZdWlRbwYhET5qBvmI9pM7fnIC7HbaXE3Z4pSbQ1krRnEM1O5OkQkvAeSQLnfZL/Ri+7hRgdF8L2Wc7HE01F1r0/bpZg7qMdzwxojyz1Nl+azXbdNP4YHDZHx8WtKtyVNeyAnR1tZKoqlTMn5zrNokj7L4CdlyDoRWtHs3wPnjmVWgkA5m9M3S7z8MixEM+QnQxpazWpag0BKmpiwRyQB/y7fwMf9SwssIhSWUfxh62bzKIOZWbszNC8YSIJKBlS3NDaxVRqZ1WS8NEox0zBHHiHu6GjLvUFzqCFJmTueDiql+v01aWqd6A9JsqcaugAwWGJmyjgna+WxqenZlzKototpmnlwGJx/iVqQGvmuzDhclfkPhURFWW5Bltpr6edDzCN3XZCWhtBxAiUEHfuCs63RIq+6L5n/VDx8q8yDgFkuTbhZc6Z6KI1mRty5qErEymXd86OGdnqkfA40VV+E0PtQ4rUxQFuuHZ9tDAg9VnYAx5CYVUcO71Rm3O8ccFeSXzSPcQeyBaUyQUxXOIC8eKYdzCJyVw+jqcmtk5DrDnd6vhTuCtbqC4xn4MFneIyBXq7zk+2az4N4JrSLM9hFujVmxz7gI4zpDqRCkxNM3ILXPLoXW14iShUqP/X57I3k8=","authorEmailMD5":"0ec0f5be7749c8cc8ccda4a809103f36","authorUri":"","authorUserId":"disqus:petronderka","authorFallbackAvatar":"https://disqus.com/api/users/avatars/petronderka.jpg","message":"Did you mean to have `await Task.WhenAny(task1, task2);` in GetBothAsync()? Otherwise there's another race where the list can be read before it's written.","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"","date":"2017-03-30T19:54:45Z","timestamp":1490903685},{"_id":"794073eb-5a16-3245-aeb4-fcb334fc54f6","authorName":"Toke","authorEmailEncrypted":"nOjXmQF7I9byssXRhSVELR5PrAfh/U7nHZLpjm/J3mMINPvym3Y0XdAWz4c8TLLLGAKK3NhFW1g71IRm0EbiLENxx2ibeiGcjkX38BfE1rCmCXXWx8gHEPpord2S8zt/v1lzjwcsvMcNx9bwDrFJoSA0aIJn4LW66lIdQjrQCorrp9co0w99aH8cwg0CKOBF4jXGYAPd9WSXOn1YC3cZmKzPIx0W7VFr9BIdXGx3cBqY06ta6vzoDsv26j9ORqYfdd5tMFDKqh7KNwV3boMjEyPlJ3AZ9uD4WR/26VmgUoXPyF4WmDJw/D0XEU3K5GLeC228ps7u1pg0yv6Q5qs2FfVusw3b3aisef2h18k76mZhilhwoAaNlX8HD3WJ6OUFfriGd8Y5PeIkAXGWdu4/lmYggVIDpmTKtntd664GNvB/w24UzMLkxRT03ZfrrStlu/SalaGxcT+B+4ve/71Q1/GAmmRmSfcRKm+mk63kubq0bLyd9FVMvf6oG+JbjlDkcz5sulznlYA9Dg6quzvDdkQtDr2+V7qfrUR6TO+tPH0A/Z0YzNqP9MOtyDVQ1Cy1AlcKxX0nxDizChOctSmJ0t0MjYn7uMgLnqdRIRa2dq5yPpM9F2yUFqYTHVPKYe1FCqu0Un79APh8aGJvrIrdTWnizzS53++ZtQD3Q34sz+w=","authorEmailMD5":"cd769043940abcfc6ecbc1cc290757b8","authorUri":"","authorUserId":"disqus:disqus_BsTHioZIDq","authorFallbackAvatar":"https://disqus.com/api/users/avatars/disqus_BsTHioZIDq.jpg","message":"Thanks for sharing. I do wonder how thread culture settings flow without a SynchronizationContext? Or is that handled somehow by the localization middleware (if present) and could potentially be wrong if any other code in your app changes culture for a thread pool thread?","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"","date":"2017-03-30T18:37:39Z","timestamp":1490899059},{"_id":"13fbf2dd-32b0-3644-95f8-b3a1a09cb658","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"Ha, yes! Thanks!","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"66ce0a98-95aa-351d-b31f-747ba8cd5b6d","date":"2017-03-31T12:32:00Z","timestamp":1490963520},{"_id":"2e9422f5-b41d-3149-8b47-86fb84a22acc","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"The culture is flowed by the runtime in .NET Core (and .NET 4.6) - see \"Culture and task-based asynchronous operations\" here: [https://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo(v=vs.110).aspx](https://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo(v=vs.110).aspx)","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"794073eb-5a16-3245-aeb4-fcb334fc54f6","date":"2017-03-31T13:01:46Z","timestamp":1490965306},{"_id":"34ecd002-9a5d-3ee8-8788-aacd0fbf5f62","authorName":"Toke","authorEmailEncrypted":"qWXRKMK1AAg/9+eriEPP46IJ6OzvF/T0SPExXuqjCE/cPVVX4PP32XIiaq2Xdz9LcGqaphZTBmpFDzWAOt33BB1i9jddpqNc+7bl18VxZmVefl4/JKYpVx2C9vn3G9bVAQlKwVeNWHQCcjsbeDbk8Flag8ZidX2lo8rtXJFpLRODX/aT/Ks3hzJWHFRfk8FoMp+XFsgeo81JsMLoG5oj6Mh9bDq1lKxnOs9gtqHmEKuk+mY9Gm+PhBayCPeuLGus44MaojvSi6iVspLwgTC7u8wxDkkMcPWVVaoTy5RSlAp8AN7py29hb/wAUnXsoakk76wNTy9aBnoxOf6fLwNhzVGS191k/syK+Adgr+UKYi9wZVgjIpiJlUGJ5lgY5zYwVkMnYBagX2Dmb7irjOC/9y5bfmzmIJRI5wwGwSV58RODEbVroQkNIvKAom0QJorp4rBIsh/pa+MPHQJ2+SkTF6RcCG1D7tGgM3v6DuYCDoiiJI67nng/xNmMLpkG+6rppnQT/1BZiN0LPnL6xH18+GsW0faxZ7vqz/9M+yFgthtUhMOHG0ESlB8GEzInIwgj8T/RdweOKWwglYutLNbTqeevAKVx0zrBgYqXnMQN9QjXI5u0Wbd5uE0Gh8+kfihGgvcEKitz4ODDVfhoDkVmBcP46uAlGjvNufBsOLBcSjc=","authorEmailMD5":"cd769043940abcfc6ecbc1cc290757b8","authorUri":"","authorUserId":"disqus:disqus_BsTHioZIDq","authorFallbackAvatar":"https://disqus.com/api/users/avatars/disqus_BsTHioZIDq.jpg","message":"Okay, thanks - I always thought that was handled by the syncronizationcontext.\r\n\r\n I have seen \"weird\" stuff in our ASP.NET Core project though, running on full framework, with culture changing after await. I wonder now if the assembly is not set to .NET 4.6, as described in your link... I'll need to investigate some more. Again, thanks for the link and for sharing! :)","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"2e9422f5-b41d-3149-8b47-86fb84a22acc","date":"2017-03-31T20:25:52Z","timestamp":1490991952},{"_id":"780018ef-3645-38ed-b7c7-41a0946e77f8","authorName":"Sotirios Mantziaris","authorEmailEncrypted":"JbQ6QHqCtYqSwYlLItZtcD+D56bAAzXzDy63uaBWSVQ1mEKP/d4qrkjWgJJsjjOYwep9fq73YZ8CtTF6wUEwtoSAU4ppkoMVQ7SAvFMZ507igPQRgxWohCY7Mk10vyHCXeI3acoehxyCyfNpoe9o99yaYc0DPaYJ7epaChhBKBppGTEHq73YEVPMZ5wbRZub2wdQaTPtlmc0fJGvpjkiwBLmoCGTzA5b4ZVrOWZv+Ul8choVC3KmaiRge0/zgykduZqyan38MX+j+VJYZOgGzw5apGXb2AiBtt8rt1qXqy5YcyvLCMw3Nkf5Pb/JBXiDfWVbccCj6VgaqB1P0FkBwH2M3nlAk2xfaoeP7JxcqzTVJU8Nl56aAjkXvJYnqlfNnk4D25ZABdK7SMA4+66Em8YI/1yv87RK3c2NeGRSkVlzWpmmOdtM/H2RSpVzzkjmQYibmTVZ7zqN1BHia/qbPpzRGa0Fwj27bg8tQkvNXr+wLZC6C9ERjO+avu6r0WRdS7JricBTfUjjVNp2c39ycGHYDJogfqCTCCRweXA9A/CxDZO2njP9s4Xz17RHVl9N4WiIkOBSUJRjuptimJn/+BaPMVngunFmALkM+W/rZNA916GWHczi2p0KDkTaKP5yxeZoXLQxgrMSOFZ/AL0xA75Y2B6wcQpX0A7X0NJ6Rj0=","authorEmailMD5":"77b9abe2cc4f99740bdc9592ecbe1b13","authorUri":"http://blog.mantziaris.eu/","authorUserId":"disqus:smantziaris","authorFallbackAvatar":"https://disqus.com/api/users/avatars/smantziaris.jpg","message":"As always a very nice and informative read!","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"","date":"2017-03-31T06:49:32Z","timestamp":1490942972},{"_id":"d0e0a006-2dce-367b-8212-ca25ed2923c7","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"Be sure to check the `targetFramework` in your `web.config`, too. Ever since .NET 4.5, ASP.NET has a server-side \"quirks mode\" you have to opt out of. :/","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"34ecd002-9a5d-3ee8-8788-aacd0fbf5f62","date":"2017-03-31T23:18:47Z","timestamp":1491002327},{"_id":"6173a217-d358-38e1-90a9-9ebe961ddb45","authorName":"svick","authorEmailEncrypted":"mnMxWC2U/fqS79/16KlTFAXsK1QEg5NtmxDaJ1b0bqsdW+FFI4ZzJhzLX2RJkkhdb3qlyXBQ+aDgm7u620VOFKyM2D3TPlCY8boSyrd30VLFO78fDWESuOZXYTPVVh9oHA5IrVL/3SN59gEn2ONQHSA7vTOuIk/bYKBs8iUEc6kYqfTvmb2c5h5tMf73q+xzcorchfbZ4/zeTvgdq6OxTeRK8n/SqggYpmw8V6Q8OsbhwHUaislXinpSbmivcoKPaEXOsYNPWMeMnZ0galzFBMurvSQhoBhdzy6s/2gdublCLjphFYpttxpsspAMeN2NRXaTBGjPOLRLjkjFYbATbQ+WxPbrkLZ5/kSXP4xCYLli2VKMtKRgG1j94DPpTG1uSzGpKbzctvqJLj2H8ySeWAbIeCwfnw6FKguJEbyUiTVGzrxj7zb38ZgiWG/I/7eToVt2eVzCff5BwGJ+HQd4eBgpqV6YtU4pIW2DeYf5h6ca1/qJOqiqSx5Ur5GDjhTwLsV9Mom/kBP+3ROwJ49QIUVgJlc5WFL2LTe9OZ0iSv879uC9jOVyprQkEvE7qAv971IVnsbsGegN9tAoRuU9JfzSmSfWvXBvPSLMIur/q6Y3BcHSvxJBxdV3Bd8D2cUtbvkunkRB1RF/XJmghqxH6f8IqpT8hzo1y2K1pOff1AM=","authorEmailMD5":"0ec0f5be7749c8cc8ccda4a809103f36","authorUri":"","authorUserId":"disqus:petronderka","authorFallbackAvatar":"https://disqus.com/api/users/avatars/petronderka.jpg","message":"It doesn't. ASP.NET Core does not have HttpContext.Current: [http://stackoverflow.com/q/31243068/41071](http://stackoverflow.com/q/31243068/41071)","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"adc8536c-56fc-3732-a755-44a0440e0af5","date":"2017-04-01T13:27:55Z","timestamp":1491053275},{"_id":"9aa966ef-25ba-3918-a680-c283a7ca9c5a","authorName":"svick","authorEmailEncrypted":"pkeo3SnmUcyp8tdAkwB/jvFj+YUmmShyu+TPbSTBmZHzawRLTEsFWf9q5NIT2mJvDMLhwnzujkIPOrzZzufT73OmBzZqg+PAAj+V+ws+vOpBqc0k3xmdXTHJBsK/kO3X/Tj0UYQJ2EBiTn3CTEGOvVasHjaBPo5ZyxzrvVJA2aeoPdKPrNOf8B+3UB0LSvtCQzi0ZvRAcwnSyAQAHURi78k8f2Nl+o54uBLTy0Dg5R4xNidajA+4DgzXhniB14VIZ9UJpualrDIYHNX3qtqkoNJy+DpsYBN5xFVm+nwai46xrAMQTMPdKMag9deYhQsoAo4u0VIafV5vA6HXgGx8kD+Z1yQCsZeu2gSfGX82I3t0/oDTgOyZC71b/f6uj/9S1QE95VeUj+DmuW85g6nXBTnuWo+PnJ/JnnWKEJ48DpAls3cWOf8It4dULnYCyetSBsLaTZukJWAjvXZKwnIFR6TyNh9jj5ZzhsPQcKk4FD5ClNj1kizSwoKT7wqBOA+/UheAgH051mgTe8XwpxT9uHyHC5QadhPtYtNaZRJCEdMoVn4lS4qPrrJ2ZRvIITGK9xQdIx5u5WDVe+E9xaCBqI7UQ176/Oid1QiHhwSttD4BB/Cn3wVQripCQ2Wuj3m2AhdeAqsBtesiaYk4LVb2T+fq5kwUQklw6kPeaXrQavo=","authorEmailMD5":"0ec0f5be7749c8cc8ccda4a809103f36","authorUri":"","authorUserId":"disqus:petronderka","authorFallbackAvatar":"https://disqus.com/api/users/avatars/petronderka.jpg","message":".Net Core tries to stick pretty close to .Net Framework (especially in the upcoming 2.0 version). ASP.NET Core, on the other hand, does not really try to be close to ASP.NET 4.","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"dd92826b-97cd-39f1-9c91-518d3fb733f3","date":"2017-04-01T15:26:53Z","timestamp":1491060413},{"_id":"adc8536c-56fc-3732-a755-44a0440e0af5","authorName":"tobi","authorEmailEncrypted":"nFRvCNtottuiLJ6RDN1FOx0p+KVdIbfy649NE1blpT6Ob2XNqWzhVIJuNlHpa9RAnlAuj3RK1zzwC/l6sTlJ7FBp02Jr/cyxKkClwQI8CQayuquuIgoAyEnJJmGXrNT69ZqWmhZNsHlFZMwW8BZdnywdbRT87MOMkUdMi2+uQOsQopIJuzuVg6484uG5Ecmh+K8hiVlCmZ8BnXrz7fxS1h94gujFb6c5727Y4h1dC2wPP1ATXITYisuKDMZm9OrMtNjaNVeysdlH+whtlor5W7j4qcrzStVWM/6No7plnHVXt6Wljxy5EiYWJu9ezyiFhLic3FKpBThJSqT3uxUFqUGNQyzWUoqxogRMJpPk7ViVjRsNAQG860Cfu1BrDaLhWpTavmJLPU0TfVKbhlv6EjdvOAL6BR6Y71IfooKgczIcXWN5GizMrkAQ+ElUMEtVHCHcqpZEKSYgJcVL2WN0lH5paWJBvn0r1bTRi0TB9RE4BJ70BENUHfChtt089l57+qJdKgneBFSpjBif08uxbAgLBM5VO7jy6S6lWrDJ9lScj6kR7Uv1WaMMoY5F82kpyBavP2rQWyAokOBnP4DUlAn05gv/qmuDbujbGtXRSvyYinhmzPyEluJu/Rq3bLEaFYwkHWDHPFms99SXULM+7F3gmiRq3+3pxvtB28Xcj58=","authorEmailMD5":"4024224ab7c50d6a61538600cf63fd71","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"How does HttpContext.Current work under that model? The same way culture now flows?","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"","date":"2017-04-01T13:11:05Z","timestamp":1491052265},{"_id":"dd92826b-97cd-39f1-9c91-518d3fb733f3","authorName":"tobi","authorEmailEncrypted":"ECotXcfuSCL2uygzf5kiLtZ8/0eQt/rBv/h/d5am6ag4vdW/B3L3N9O53+oEaNVPbfYSPFauzf02GvnsKag077tkdbgql/erF2r4yBa4QW7BEiYiWWPCrlcal5Qd8x2xV0mhdCt4Yu5IDgnXxWs6w8g2O2O8/sQRUCNdbbE2E/OOvniohXCPQ7SzQu/55WInyst7UEiUihqOhyrxaXdqzZm67J7krtQ6HhppypHfhU3H1XBx8hW5Iaa4jwWyRDLklVoYmgJOeEDtmOwJaGLhUbqw6riiIlXgRIz4EgVeeHkXNrq7zezJoN0QPrm/P51cg2CcyAaGFn3Clh4fW6ukx1vUNB6jmJCLhtXxQNGlLgJ5GCp+BbWEpAZW9u/izICXz5+s1l4+KJD6BsoR5CYBOGHO10/bLefQU/mJbE6aI5cooNqEULGFopovF4TXNXriHobgZvjOij3nkeIcDjdZVP//cUx13ffLP16haK7V0sGVH9s29zTX6Jt+oQ7cqV4jp9ikg03Ri7e8olQnQBFBgddKaei5TncKTLf7Zl3yUoP2qOS0hQW+ovhUMWjKVmEWaC9MQDGucJnf8a+hHTeZFNE1qj5ruZB0pLerthWC10XMedEkFelaSz2aNobMtnHdfmw2vye2lNfqvV6eu+snFAwLTiahsHkJOHdzba4PIQY=","authorEmailMD5":"6c66dde938129e75ff3926e508070d05","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"Oh, it seems some people will have a lot of fun migrating to Core.","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"6173a217-d358-38e1-90a9-9ebe961ddb45","date":"2017-04-01T14:52:14Z","timestamp":1491058334},{"_id":"8702cb01-6ec3-38bb-a6b0-d4c43d7a6b41","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"I can't say for sure, but I *believe* that a lot of Linux I/O is actually fake-asynchronous. That is, the underlying APIs are synchronous, and applications have to burn a thread to treat them asynchronously, thus creating a higher possibility of thread pool exhaustion. The core cause of this situation is the Linux driver stack, where drivers must support both synchronous and asynchronous operations (in contrast, on Windows, any I/O data transfer *must* be asynchronous; all synchronous APIs exist in the Win32 layer well above the device drivers). And asynchronous drivers are some of the hardest things in the world to write, so Linux is trailing Windows in that area.\r\n\r\nMy experience is from over a decade ago, though, so that belief may be out of date.","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"d24b6398-d50d-3099-98d2-2da41b5e1bf7","date":"2017-04-04T12:48:08Z","timestamp":1491310088},{"_id":"d24b6398-d50d-3099-98d2-2da41b5e1bf7","authorName":"Krlm","authorEmailEncrypted":"mEQpwZSppWz6QuMnzcZ5ybum8mG5SuFhoQJSVO47SY2rgArlrHwqJQB1V0dUdwQy8uY0gYnId2khc4Dapa0DTjxLgex8qSzk3qn0H7WlRBrrOItdlRwWdmnkx1LqLHb/ktDvnXxEFJJydDr7iWi7SGek43zQ1IRvCLbdQN0gwUuvNqfmmzDKVG85tZ0dkMpLJagcr+Esrh2nXihR82xADrqSxUbt2fInkbj67PcOt54HVQKW9NaJahFa/HpJurXoUcHj/kBIj2NpYYgg1mI+DZyPzT/bJz2Am596ZNF87n1rwTm/IIPP1SjK63iJ0UeeVtAps5WGpcoxj9oOjE8vvlD/Mbx5XKyyoN/INlw0f9O54Wr3sukZKcjs+Z129vZNBDeyzIpPC1aqH9Yeg6oVRJLrfz+/tv1uctO40gnzdjcSJ3fC3DeBwQkWnnTSdO1L7bOaLRvoyfKrbRjMWy/sLOu+aa3Lr5LFmfzb63nDZz3tVHdBPG7kpRVMmrPge7N1YkNe40JdzT6g33LG4fJI9TT3bOHWYXbU88V2yt6fCAsP3hIBpQcMUV2bIRoxMia2AbsC3Kgy46Q5y0jzBwsScj/pp1Tkxxjd5aR73SsgA/juLxfW680FMZ9HF5JNL9wwRPkdpWcfTLp78tQ1p8IVevRvEWW5lQpheQDR9onxPIk=","authorEmailMD5":"84c0065aeaa77718b0783f36e927d4b7","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"I'd like to share some observation and ask you to clarify this kind of behaviour. I was performing load tests on ASP.NET Core with some 3rd party lib. handling StatsD metrics. That library was using Task.WhenAll ([https://goo.gl/kj5MvR](https://goo.gl/kj5MvR)) in a one place and due to high contention (load tests) that occurred to be a bottleneck for the whole application. What's most interesting was the difference in behaviour between Windows and Linux (both with the same .net core SDK v1.0.1). On Windows the performance was degraded but the application was responsive all the time, on Linux I've experienced a thread pool exhausting(?) which made the application unresponsive (req. timeouts) for exactly 60min. after that period application returns to serving requests. Would be thankful if you could put a little bit more light on that difference in behaviour.","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"","date":"2017-04-04T10:24:39Z","timestamp":1491301479},{"_id":"4ca027eb-8d8a-3b45-9505-a36dbd545e4e","authorName":"Vipul Gaur","authorEmailEncrypted":"CgOoWOEB8yEa2ZUWnzzIXjXXyV0epNcxyYOK6N4L+ZksEmfnrpahc0BJJnRNN4fWIAoYNhKIiG18Hz8jlWYiiwIvtNjH+5RyQAiZdTVF5M90eSsPcjEzo5CqOd1RX+PEldLnjm5f395YybAkaskNVBzYXnA+8gikjPhI10GU+xcXIqNrC9nknIvBQenxpP3h8ogMiPVdiyFRAdyTDRF+bbV+K1Pp186Rs2EIemng8sJ55f2wncdG62QSDTZWl2Zmyk19aHL0uxLjnqneYGh4jBpUXyKYhF2A/eDQpVAVyPsOyOwMUEga7o0cLZs4IU47RopvW01UiLOBg7yfNoff8Mn0GCJWeDKKkhN2OLql4b5FAswz8G9EBTJQvBte8n1+4J6ntN1TLzzppVEmt4YJxWMn1u8C8XRmHEpiXoU2aRug6JczhE3R2Llm9TQsD2g2KK+SlQF5hnrC8wVEfhf7tDst38/BV4QVXyh5ZtXik/ZlLKoWT+1Tx9Co3CTMrJ2crY9Svm87aB4xpSUb+6HFXEv8OJUB+xnRP+hIQ0veK5+MKd/IeE5QM5ZL75mb8CvACjFbb2NifJ+Adh09g60tGkDWmQC2yaEyXe3ucxfOxJ2+uY/p83MHs3Ebt3FnBBzO+TpfLjcDchq1tRQ6uo8cdOfS0zRrUqkyA/iAu5JuFq0=","authorEmailMD5":"330c8876cb27d9628c1a7bf05350ccff","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"Thanks for another great blog post Stephen!  \r\nOne question, since there is a possibility of implicit parallelism, are the threads being used to run the continuations taken from the request serving threadpool? (Like the Task.Run threads are taken from the IIS threadpool which it uses to serve requests)","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"","date":"2017-04-17T03:19:43Z","timestamp":1492399183},{"_id":"b1dc21fd-caf9-38eb-b1ae-520befba599b","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"Yes, it's all one shared threadpool.","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"4ca027eb-8d8a-3b45-9505-a36dbd545e4e","date":"2017-04-17T14:20:44Z","timestamp":1492438844},{"_id":"0624c771-1493-3ba9-a8dc-c1d4bf9d0a8e","authorName":"nguyencaoan","authorEmailEncrypted":"DZGUjQNVBpZQ5cOknrOf4CMaVwn1bcewhBwZvNCKfaFU4M8CPz28acKKMTEvo2JJyknekD0Nurm5Jge6pBPbINVisoL48TBAPvKyJqPSs5oDfjUeO0jrQyr8lywJ4wOFFyCG0gY/sIMqiG4MT3PjeN1zuVIRIcV5qPyL7Ssx9YBL9nIXIAQDbOQHWbS2aRyCkVnHKnFfDf+FgIqUQ5nz9zyYYF7BbLV/u9iKjcjc1g/pMJO5PVkv6VGqp7fmWOUyj0wALYo0KRvOkeIRM86jkmEvPlBxuZ4e3P+Gpg47fNm7PN4dM31/VasSJYvoKA1gqzDiXVgDjdYOKm/wGYA7muSt3e02hZ3jzT0AlzTj0J+8YXPpPXtjJVkXA2WblV2Qqckqc6NYjVeqlQUkSAStmKt8IN8iT0P92wuFdWZ1vPw2T/ORWUEpRiS5ZewqCkoqzOE1GFhc8xp9mIP2SWkH60ly9nPtLdwJtpu790VJS2ecHOZd/DWOYYahGqbbG2Jp2lS2z6adbKaBBZBaphfoVqqzHbSreu2MSk4DBmJy2oXXm57aUdneu2zWRHnGZHK0/dHvmBoutBi+QMDmrHhE3KXEqhHGBwCjHzNVpYOXtwBZnzhKZmp3dka3SVZZNVUYANaDQxnL2E91CbZvH4WV6o1fbpI7a18ZgYk7rE+E7NA=","authorEmailMD5":"82f4b139a318cd6a3b91d540889a222f","authorUri":"","authorUserId":"disqus:nguyencaoan","authorFallbackAvatar":"https://disqus.com/api/users/avatars/nguyencaoan.jpg","message":"Thanks for your post Stephan","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"","date":"2017-06-08T09:52:20Z","timestamp":1496915540},{"_id":"1bb50a9f-eabd-305d-ae5c-82d0f90d0fe3","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"A lot of people do block on HttpClient asynchronous methods, in a way that can cause deadlocks without ConfigureAwait: [http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html](http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html)\r\n\r\nAs a general rule, ConfigureAwait(false) should be used in library code.","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"43b9b56e-0b21-3632-976c-c8f91d391c3f","date":"2017-06-23T23:12:33Z","timestamp":1498259553},{"_id":"43b9b56e-0b21-3632-976c-c8f91d391c3f","authorName":"Nick","authorEmailEncrypted":"m4l6cLiStG0S6qTKH9vNvI23BGFc9LGulVmlytipZJ5xpzzvqBPeReVyr4BANcf9e53Mwt4pfDpNSMAfml8NiFLBxoI1rGRpjkBeSifKW6td1gV02MY+KmqnbacW/s7rIq4mL6RB8l/3TbqhLlEbGmQSeXR2+2x5D2gWfiCCzhm9JJffguVublyiPSJkRxhahKIBZsyf23hj7K9HdHgP0UMhTe/p3wwFLlAfZGUO3J7AvTIFbQzRVO6wnW5rMZnkn4SGHsL5rCcccLJMtOZydXG7ZREzEGgSpszYoF+SE8byCOse2gZUCEd6SDYCeG+Kxhi+whmw6uJkbx2Ztdbec83bx0P1PlbFj8Txhx9kS1M3P5rwIkN0YWIRYtE8WD2Eb6AxYF5GIjEFC6YR+dCiON1SNsp7OJfhJ1POZ4OGD2yoZNoNepTdsGIi/HONhZ+j50Go58p23CdU4j/B0aCjxPAdZ+SAbCnNL8R60QnpeWHoRrLCf+fqY7ganYAZbnmAfl+YjfRNEbbda678X5uXDHNH4LVHKPL4XO3gU3Bsd0GgI09f3WUz/BWPd6k3VwIMkCwRcxDy87YXB8xeA2ZsNcfUAq6TSOxcPg3QFIc1gL6ft738WXmqe6s3AQTIvTISbv9fODVZZFL/YLgpPUsHFGz6qd0lpqRfn/W8MU85Cts=","authorEmailMD5":"f089e70f17da27da76666f47c417f0fb","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"Hi! I'm wondering why than HttpClient core implementation contains ConfigureAwait on several places. Perhaps it was made for feautures releazes .net core.  \r\n[https://github.com/dotnet/corefx/blob/master/src/System.Net.Http/src/System/Net/Http/HttpClient.cs#L139](https://github.com/dotnet/corefx/blob/master/src/System.Net.Http/src/System/Net/Http/HttpClient.cs#L139)","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"","date":"2017-06-23T22:33:32Z","timestamp":1498257212},{"_id":"12a1504e-335b-375e-928f-d3c35f0450a6","authorName":"Van Thoai Nguyen","authorEmailEncrypted":"AwGJUgzAbaIChJMOwKTAExaPjlpf6FPaVKeyWXr5ZeMqFLQe4zxjh8XAKh8bVHBz/4VsNiyEb0mEo9F5Vy5MZZeakld+p6Amh0ibVT8C6ypX5LthEcoUOkOrUe1s9CaAKrYO20eR/hwaM1vejMeOATsKjbkg6XU50o1xE38YH97/ZB2uiyMh8n5C4Gg+ga2fFwYx/TBGBRCpEzJg7bBtj2DIV6z5GO+8u/shgPEy6ge0rK9NIKvZTLqVmL1DsG/GC6AtuaAiyeDFHRxj6j8sKzFiZqhU1T96Mh3V/VIj5RX66rtH7bTo1g9OYM1MhSjK08TXaBPccp85Vi/Le8yNpsZ5fwYTPVNH2L+n0h6hveErM7CLBEX0vC0eKDlsmuhIIVE9HnU+HYlly0z1BdngrjmOcgyHM8AxSO4BQNCWLdUTXpmYUYsXLE/mtk5dR6jY+ErIPwwJqYMTrA1lszOd4UAOCS1gX95Gomq54MXPGMw/Or3/g7zgUpKZ+B0FT/Rbo4ClyRZpCAI7xUam6FDeQlBTZSPQjfNEohsYnxRHxTD2QQAqEHrprtGe4dZczMAA8/AVlGFdwzydUSmE2uxeP6oPWFD/mzWr69sdRHJHRjpxEum8Xs79B/pN+XMgKMcSbTn/WOKZoubNf6oupFmVPOdC4MRyAtQWcD8jE88f5+U=","authorEmailMD5":"0a2d4b6ed85d0b1578ab33effb7aad21","authorUri":"","authorUserId":"disqus:vanthoainguyen","authorFallbackAvatar":"https://disqus.com/api/users/avatars/vanthoainguyen.jpg","message":"Hi Stephen, thanks for your great post.  \r\nI have a question, you wrote that \"within a request context, only one thread can actually execute code at a time\". Does that mean in legacy ASP.NET app, using Task.WhenAll is useless?  \r\nI used to think that Task Scheduler will run the tasks we put to the WhenAll method using thread from thread pools. Is there anyway to do so given that we don't need the request context in those worker tasks?\r\n\r\nThanks","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"","date":"2017-08-10T23:24:13Z","timestamp":1502407453},{"_id":"10c949a2-fe34-3545-b880-94c834360c34","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"Asynchronous tasks do not \"execute\", and hence do not require a thread. I think this may clear it up for you: [http://blog.stephencleary.com/2013/11/there-is-no-thread.html](http://blog.stephencleary.com/2013/11/there-is-no-thread.html)","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"a1f0374c-e7ab-3fc0-b734-a666f75c6850","date":"2017-08-11T12:18:56Z","timestamp":1502453936},{"_id":"761d417b-e928-31d5-9717-d9350476c57f","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"WhenAll is not useless at all. This is because asynchronous tasks do not actually execute code for most of their time. They're what I call \"Promise Tasks\" as opposed to \"Delegate Tasks\". Thus, WhenAll allows you to return your request thread to the thread pool until all those tasks complete. There is no Task Scheduler involved at all.","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"12a1504e-335b-375e-928f-d3c35f0450a6","date":"2017-08-11T00:41:16Z","timestamp":1502412076},{"_id":"a1f0374c-e7ab-3fc0-b734-a666f75c6850","authorName":"Van Thoai Nguyen","authorEmailEncrypted":"wd2UJQ9bN9OuUqCRq11Ok5dPit2Chcc+zTlgk/9UdO3bjA4p0te4KxjqT5WcrHuWL8GTG+VqvLTDBketNtwa/gPdhwe5ZnM8aFxj3valR9C60IjoSA+aGrQ10EhzEYjnxS6HedwNclMl4b+mQCtkCqgGhdkIEFKK6swzDow6v6IEc6/bH7sAN5Wadltnw8gsxH9hn6jcLWgznbgWN89jGJCu/N+jMJZ/F4iZVhHihJA6or96PwyO5IcfUAv5ElYEJdcExVBl+SfJsw1xtY0iNWzIsxZV+BMDtRoWuHgkEIPW80bJXiJUpyIkynUK9AEuOgudZjT1Lm1bjvamKeDi3IQ4AwQnjTE+h3rok+L1G29Jmwx38gXJYJxxVJFdaCR6hYbuhgxsJ65Vl6VIvjqiOb26XYHvDzlbPpWG+64ZGRL3dC07uMlxHMsVGYjTcnf2ZeHhr5n0h4ty31VGmE4pYLnXpU3YEXIojl//r1ru513rSBfhaRb6IILMXXrADf3uHrL7OjaaEo0l8fIDpmdQDiChFNCADbnjChNNUkV4tSI+pPOE+DdxuQd02KFg2IRW0e9HgyEgXPGmeyQREGMsb20XekOR/4RJeHnhfhHW0mCfiAv74SSA/lJG4OGCJH+5ERGKXlHi79+FlrV+30vT20OJLlcdPgi9H0z+Xl/Z+Zg=","authorEmailMD5":"0a2d4b6ed85d0b1578ab33effb7aad21","authorUri":"","authorUserId":"disqus:vanthoainguyen","authorFallbackAvatar":"https://disqus.com/api/users/avatars/vanthoainguyen.jpg","message":"Thank Stephen and hope you don't mind my questions.\r\n\r\nWhenAll allows us to return request thread to pool, but would other thread from pool be used to sequentially executing 1 of those tasks as you wrote that there is only one thread can actually execute code at a time?\r\n\r\nIn other words, I'd like to know if i concurrent composition (Task.WhenAll) in legacy ASP.NET requests would make better performance compare to await on separated tasks?","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"761d417b-e928-31d5-9717-d9350476c57f","date":"2017-08-11T01:28:16Z","timestamp":1502414896},{"_id":"5f187a2e-b766-34d2-a281-7742d91fd1a7","authorName":"Gavin Sutherland","authorEmailEncrypted":"B8qsdy4t6z9okCQLbyX56DzldqIqyBBxJOtNJO+LOLBA4xhnc1GwHTEX8sesuW/Pte18bHmy5N7KvZV7OZhejScUP/QNOGlPL5v5sAdBC88zbul6nv/TWSezItEcYF4CcjjFiSTRQwC2uOOhSIJumYiFZV5I5TvzFYGAFC9/jpZf5bFGtDfablKfxiOSByeVvEnF8FwuF5MoFKvIBsjwtdFQA8MxATQXx8HqaNxoptxh4EycnLIpkax0c1iobzhTnZEuu/KBeF1oREf7fo4u6ezpasYZKGoSrelGEkTp5rSac52ZDu7BTItHyq+2pmj6507qf9kC2c5KriIFMaZjol9gya7CF0KCFk3rZkPMobxTpVz1/SzCik/sXP74UrtbN/5vCyHs/ro56Q8uFEfXeJneUn3ZTlLMJobb/k5umUGocLpRRWGnRo8Zpy8W+BZoSB6ZEgJUTkcwqS8qfVoS4vp1muQHZjr+3m2hhBN9eAinP8dNoeIxCu8rg2pCEJMrjZcOGfD11oiQJ6j8kjsfkRXa6Oc6qhafr9xMo49cswd88sxF/gGge0sdjXmgqzVCaLo2dGXejsHWPzMYHk7cT2Z8oo8ww7iesuy3knBPRIm1QXsN2JkjZSWpQwO/pJpxJQCxZDtcllOHV5zDI1EVZB/SRe0dNpMYXgB9wFNFStA=","authorEmailMD5":"d35b65f9cfcbbd7cef73c194d7bee4fd","authorUri":"","authorUserId":"disqus:disqus_ZzEOg9V0as","authorFallbackAvatar":"","message":"Thanks for the quick reply!","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"cb00d154-b44b-3ee7-b2b9-d08ccea10531","date":"2017-10-24T19:38:58Z","timestamp":1508873938},{"_id":"9f44162a-87d5-3f6d-8b41-4b8c5fb8cfa5","authorName":"Gavin Sutherland","authorEmailEncrypted":"J/m8/SsAEx8LAlVIr1a6CdpebpprOcz5q/0880JsOyiZs5aG/BGsM6dOdmefV9u9bMiTcuRvSkeqADtvQb3B3onNv4WpP2GX60+CBfcLe3vgEnrqRLlswU3Xy6hs33SlwJG5F/SU5A7qGhrPxm/XyaKvW2IrLyjfyJH7Dfb7eTZS+MBF8ehtqwAj4zS4Jw67m8nuYALEO9vred3wJE7GcY8xIBGyPCflEYb6Kpmp3MYTSwom1OppWfhilDyqkoO+Ek2+wWeQ0nH1bBHmxMzykBLpBPqeJph7hzxP0u4VGtCnDJoPCoAs6bW5yghsAD7UL7DLCZDfhC+A8uCVimAxlyqXqhgHczraeG5ppXndOwS+CjLYxZ+aA6Rok9H9pnAMTPVSsEqhNbn+wt/VEy9EmrfExeTJk/oziwccbxcHUnPeNAOwZADny59vi6o/RoONIo7MYdtM3GAgKWI1lnUmD2kgXKa1n8+aux488clIK86RXpESmWvNK4VgrFhID9VJN8PLVUzvsSx0pwVj+F8tg/A04OW8Li6QEo27eLZevp/sEXhAJw7kduCl0bx00UunAIEV9wlpxDqWNpwh2tSiaTOQtB7PSJqWmmQuRRHOcDUCddx4KKPUHLmdL31DMLWZu67tDqC4kcqiLawdXeD41wpsGm1GosP7lwNUUaopRM8=","authorEmailMD5":"d35b65f9cfcbbd7cef73c194d7bee4fd","authorUri":"","authorUserId":"disqus:disqus_ZzEOg9V0as","authorFallbackAvatar":"","message":"Hi,\r\n\r\nIs this also true for core projects that have a TargetFramework of net462? Do they also have no SynchronizationContext?\r\n\r\nThanks,  \r\nGavin","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"","date":"2017-10-24T15:51:59Z","timestamp":1508860319},{"_id":"cb00d154-b44b-3ee7-b2b9-d08ccea10531","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"Correct; it's the framework (ASP.NET Core as opposed to ASP.NET Classic) that determines the SynchronizationContext, not the runtime (.NET Core as opposed to .NET 4.6.2).","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"9f44162a-87d5-3f6d-8b41-4b8c5fb8cfa5","date":"2017-10-24T18:16:33Z","timestamp":1508868993},{"_id":"c191fe09-443d-3b0c-bad6-25f06815e6ff","authorName":"Christian Gollhardt","authorEmailEncrypted":"aiDfFhXs9i37fCGtf1GPdRyu8MPYjyrjQNBLWCFKsUXfergqqsZIgVH+ZW3nPs0VYvFfYxMn6W1WEZyqPMl8CEwyrfW4mbR2jNXRnMmRsAOoY0kPQE/JbEv0bVc+c5UBIDLc3rZVuJ/Z3L0PuGMPcOFq8Dq4GKVMTT9ZfbBFKrL6hL2gAjMmDhidozzhtICDsTVRlTPQUFq+lGwFT48Tvk66nglLdtPWWk1SFJAPwoS0hgmO3LNWOHBq6Xu0W+5l4YhoZ7v93WvxOHheRDZ6im7RJy+2SKWySxiCLQhLlvmd+i+vgGFpFL7qOmzCqTQtq3fymxBJj9nMcxB1Q5COZWNr3LDhBXckjt0rhDXQf2MqOSl7fDSnbHKOt5AlUdk1/x8vBF+gxAaydLXawLWGJqZdjSTE8oXYypAmQhHDMN7ZXt/k+4e+8StcRJgb+rnOeWR68kHGJa8r/i2invKVRt+y2sUge/jfoMyMLBca2cDsuasf80WIciWFCEpJUrJpzzaXpQze+oYbXRtUY0i2q1VLEb6aYXq4UBWtzg/VvKn69/dhRWqfy2DVizQtlScTbiDLgqLfcULJlM3u+CcQuOVpd11e/5tNh++ehl+lwIWmcpfoOBF3h3T9PRICg3Vk5Mxvc1V8hN1m+zTPdipKzMNKDnDkxUriHVFLq9d0Bps=","authorEmailMD5":"1612ef1fc9788d1190b4489d072484b3","authorUri":"","authorUserId":"disqus:christiangollhardt","authorFallbackAvatar":"https://disqus.com/api/users/avatars/christiangollhardt.jpg","message":"Thanks! That was the first question which came into my mind after reading your article.","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","replyTo":"2e9422f5-b41d-3149-8b47-86fb84a22acc","date":"2018-02-09T02:24:44Z","timestamp":1518143084},{"_id":"1ea2f620-7b95-11e8-91bc-f795b759aa50","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"2f64d0e0-7b4b-11e8-91bc-f795b759aa50","authorEmailEncrypted":"rdmrtke3C13NaNUZnJlFmXvVLL8hH/bD+lfh2UbSy1fJFb2HTVYRmpcIzYdyltIMpsxKruZO4m7LB22ti7gWTL6f8q7oPCNt/IRuNSvxMaI9/+5wa2NOwftKHy1vsCEvzkS00c7iLjJ9HToAUSjKqjAciQdIinofgIIwUBkSQVmpRHgeTUAQfkBMYlSe0GW21l+zZSscUDGXn0wDWIObroAwQCc2B1VRozBfCV75GzfC3EPcZC7/PCSLNA3jaXyZJbQIT8soqJe9/Ek021M3THuPN8LnQAXIT7keYTCMwj5CeSfaxYqi/zhWXTisYlaZkxdA+Ljr1xv5KueMb0nL1wVg1x13AetqgqbCtDziYoX7hi8KBNCpijZhJxX/j0L0uq7W8wAu3n5Me9GqyYZOrRn0oLtmwSVUOPcReRImFbUjoX1OA5HciCYGxziIriDTNs/1s0SctakI34sYfv5HHA/GUjn8+KXFLrGUEDm7qPVYBeNByevmYuUl+dtig1vEu4FJhrhjeGnHjYWO7ueAwyTBELlDLDnyra6Abh4MjVvAfrKoi2gh2MsADAEiSX1CprhPzSXScXRtpCLtnhvGlmEmmhhFS62f/9tB+8wpBHkOBogNLCYMISYbpYeyy8igK5NbVUBDDxm14/Zla7Q+2zqE7sRFN8zLW8XNHNudQyw=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"`AsyncContext` behaves similarly to other contexts. If you use a plain `await`, then the continuation will run within that `AsyncContext`. If you use `ConfigureAwait(false)`, then the continuation will run on a thread pool thread and not within the `AsyncContext`.","date":"2018-06-29T12:08:23.306Z"},{"_id":"2f64d0e0-7b4b-11e8-91bc-f795b759aa50","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Lucas Vo","authorUri":"","message":"Hi Stephen, great post, now I know with .NET Core I should not care about ConfigureAwait(false) in any await calls. One question for newbie not relevant to the topic if you don't mind :), since I am using your famous AsyncEx library, seems that It create its own SynchronizationContext, do I also not need to include ConfigureAwait(false) for await calls inside the AsyncContext? Thanks, and I will keep learning from your stuffs.","date":"2018-06-29T03:19:08.712Z"},{"_id":"781e8610-7b95-11e8-91bc-f795b759aa50","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"d4ee22a0-7b4b-11e8-91bc-f795b759aa50","authorEmailEncrypted":"TB0ZJ6h97+01ZVTa7hzb4hqPLpEG5lEltJNXMWRkeUeLK8cgTgnbCYisjdC4V60Pt8gkNCBM0hBcl1+bot8HHg3hlgdBoO3101gH2CdrV/6cXad6qvUcyHUIhcA1jDLCWMynbVqZrvCmhy3Wijms6qhpn8EktT1SJLD4+s0O7wIPoT9anhhtwYYKnl3cmotGbuU7iWXj5zGO4E9OHdqQgfWWMpuopmRa8hQvol72zhiEVPcSqRSyjH9+CbXBsifmN/y86XVpMcBC+JBC4lcmmxzQ6vMTdScdZoK0ml7j9nkqF+nqVwVFlcnIXOL0SN9oJxHHwXCiuVrWMGTyRxP/UIz64utT5etX1B6IL365etw/UbzcLEs4i0pP72qwrzOotiEaGcErRDW5vcyS/Ntrv83mUOcz+F2PAG236F3k/yNYYiGVeXzdBV4EOqtL6oSg22vdks2cOqN+QtJem8HSzXM9nPwsIpvoQrvOEyI02aqbGjo46LAADPnptdtMZ5b2DxFEaKs0MUYWpKp/LGYWE+Lc8U/xjBhmIAGU+Q3AO3WvrTa9hpYiO2psy1wn93udQd1lI4VHBWDHsOFIITvvcTUV16QOrY9NGzbwBoBFFpmS0Ml8K1dWvlqzdOJWwJ3lxIuJhJObRRWigfXgStR4wAayg3M7WhefvwSO7FrlunY=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"In that case, it's a question of where the async method resumes executing. If it resumes on a thread pool thread, then that CPU-bound work is run on that thread pool thread (which is fine). If it resumes on a UI thread, then that CPU-bound work is run on the UI thread (and you should consider using `Task.Run`).","date":"2018-06-29T12:10:53.440Z"},{"_id":"d4ee22a0-7b4b-11e8-91bc-f795b759aa50","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"10c949a2-fe34-3545-b880-94c834360c34","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Lucas Vo","authorUri":"","message":"Same concern, I know that true I/O Async tasks do not require a thread, like your old article mentioned. But what about Async tasks that include many operations mixing between CPU-bound stuffs and return the Async I/O task with await?","date":"2018-06-29T03:23:46.487Z"},{"_id":"37c86c70-a980-11e8-a35f-f529256716de","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"","authorEmailEncrypted":"cGWEJ71TAMuemZemL0YC0s3Po1xjV5K42srQXOrG84vn971P0r3K99mZfDu5s5sGFkkkEafVdbZRHJwHAgzbAwZAmTpOVsOedsdfm30ORtY4tVjjLSQ4mZb/DU2M8stjDkS9Lq0hFC4PqthCIqouOz12zY2GIYCWKvhnBH4mBADUzPcKpRJUtwBCnXZT3xAu4kZYbVzqvhWXzSjtDaIiok+rkeHFAeaC2alLXRnBs4VYZHsw+jXrsVZqfCfm9DDrVHR2vJoo14LXlGrHUv6Vl3UzWPs1uw9lqJTxOmPgol9zLL4EFepH3nw13NnhBwP+LUMU8irdqvDux8y7BL6zB12RA8Yf+NzgPd07iguQG+ciZuMN3IhOXzsVJ6QtWaYQqtVKrpn42yzcG4dMSi7vx2NHhWdMsW8Rc8vSLseAa0au+u/aX8WUA6tvv9wr9g8j5LZ2VzN299sV3Uvhme/zU3kXdhnqi+H72gPcBo2lKZIqf+qyGFOTR5wfwMS7G6rLe7/Mo+DitHq9wKUynLiu2lkq7M9KeQgWDXWVrvlFp7S71inpYE4fV2kXjb94AMH9VXVlYOPWfirzFMBeYMe4OPuchxtr91XvZJlSYiKpMYUVA6T5fld+N2M0NdeXutzIyi+WXJ7zqvMJ8XJQTBMrFaS9NZLEJLGUNDfnhvxnZAQ=","authorEmailMD5":"37511e0a682d90aae2b084830473e006","authorName":"","authorUri":"","message":"Thanks for great post. I'd like to ask what exactly \"thread pool context\" is in the context of \r\n<i>\"ASP.NET Core does not have a SynchronizationContext, so await defaults to the thread pool context\"</i>","date":"2018-08-26T22:34:39.685Z"},{"_id":"79a3e100-aa0d-11e8-88c0-ef9d7cca50b9","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"37c86c70-a980-11e8-a35f-f529256716de","authorEmailEncrypted":"HwhJOmwclMofYB/eippvZL9TYMWooCeUcOnz6cBcXRO9V3k1i6H7T5qp5xuHwlXy4LRJblaH7D/qzzk1ga46UjXKKTv4RgI1tTVkrEx0ke8FTO4+mHUNm2AFu0o7asQvO/gzG9Y70PXKirw263MftDyb2NRuYsOVewQ7Ojccjrm9CZrYd8fWGRvBWoKovXgjAfopRuqaOB9YTQ78+CClCU+YqLHDVLNjSZPMkdcFkud1WyhtiMnUN9HxTrvz0cmLMFcTbmeZoU80nPNAVGlMCeFIx1tV1VFl7Clawry4nmf8DoQYw6PY7nT3rx8iOk5l3McL/H0f4372GZd8suNYPvZl1G+VovGX9CnQ6neiXGZRJ6+BbfkFsd8SiKcVV5Eh+OQx09zCfyJwb1kTHACdYZzYzjoUBYjqgzFRtGu+q/oF+rvzjg/ERyF6tR+as/idlWZrMycDBLyeLJvlbJ4d49oYHuS3VPtAEvY8o0qw3cr8h6ooezSmTeox4necmR/p1AxzHwmHGQzTm9w0exk02ki+QBkSafllcfqCapM8L9+cY6v0KG0wz+pHtba+cKSkufLmhYhUmk4AGCmfmyv7eaTlWxy5b8mYE1Hb5qvvGdL56kosExMA7VsGq22q7GXuk6E3d1wcXmhA7plsbtXrkZUBlzfx2oy7CBTe5mt9VQM=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"It means that any code after an `await` will run on a thread pool thread. This is the default behavior unless a `SynchronizationContext` or `TaskScheduler` is present.\r\n\r\nThese are the most common contexts:\r\n- UI context - used by UI apps to ensure that code after an `await` will resume on the UI thread.\r\n- ASP.NET Classic request context - used by ASP.NET Classic to ensure that code after an `await` will resume with the same request-specific global properties (e.g., `HttpContext.Current`).\r\n- Single-threaded context - used by some test frameworks (e.g., xUnit) to ensure that code after an `await` will resume on the same thread. This is intended to emulate the UI context behavior, but without a full UI thread.\r\n- Thread pool context - the default if no other context is present (e.g., ASP.NET Core and Console apps). Code after an `await` is run on a thread pool thread.","date":"2018-08-27T15:25:49.146Z"},{"_id":"0a323ea0-b15d-11e8-8dc2-1511f82e59f7","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"79a3e100-aa0d-11e8-88c0-ef9d7cca50b9","authorEmailEncrypted":"KtlnhmAgJtzJBeCfb5Wi3H0MgilNxzMhaypA4wJ6fBYsI+paQYN+ERFD/qvsJefWFPRGC8jrjuBUeU9hy/tOddswP6+7hL2tlLedCXxl3wVXIpnUcgjYVjydFRihKlfVW2IR4JK/PxcXCDO0GbHbk9hq4rjDmkkqHbJ2vcvLPLkrBu25VfgSJzZUKGsHF3R207/RM6RzdGmJ3Bxfd11Y9m7sVQKbSto4FCaSYcUe10Ois8762cgHmYGRmNjtHdqEr5hOa8lvQ4F3z4euKoFsAoEHCtuaFfXrn+MoJobGVh8Vht6XhbCcc1QfaYq3TcWtPITgAPHbH7navyEh02G3Bs9OasHsY71mTzP8giMSpNptMgZSeZuG7fJej2j03+CLAwlYq/wsHeU67HjsCIISBcPFTmQtpSCF9J3c6vHqOrQmfKOireg6MVYqD2BGsYyoruJ1CBdveGkfnPVoDCF0fOr4xcODfUI4xVJopj+SQmVXt+NF/eiVR8fnEbhE1ez3H5VuMNj4j/jtKLn3hPpGr1UGOrIt9Duf+wt9t6J3cGxvD6g7v82MdxLyVEelt8/OmadmJwnk1pg7X7tOkRqH66Rf4ufvIY2yHofFAW9RSQHyeQRlIZEgo5IvonaLI3Fgpz/1ngKpzXfeHnubSWCkM+tr99JiDm6ygmNDlcjTmKA=","authorEmailMD5":"37511e0a682d90aae2b084830473e006","authorName":"","authorUri":"","message":"One more questions about the code example. I'm feeling that I am missing something fundamental.\r\n- _client.GetStringAsync is already awaited inside GetOneAsync, why is Task.WhenAll needed?","date":"2018-09-05T22:42:59.994Z"},{"_id":"3f433350-b1d1-11e8-afd3-cbef5b601756","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"0a323ea0-b15d-11e8-8dc2-1511f82e59f7","authorEmailEncrypted":"Hq9lgDdV7ZBRn/Bs7e1hyhfntJCCkXyh/MTCh83S99aCKch4wb33Ho2/A5lN4kWIhGDLvOf2FlUFkQNDLf93pba2ZEbSiPDASM2d917WPtJ4AJgsrVVpfV8pOIC3xcrf0K6K/yyaC4i41DOkvTXRtMU3koOGB1VvUGQPSaAcVyS5L8x4fYXcJ5wiBWxJQV/blJsqVgB6us6tzL6oSqQapbBwRlLE6L+6QvyjZfnZv2KIKdKwG9EkB3TW9Liq9EkKA+f9+QEHBKgPyqI1727gio2kE8z4pXvUbkGxPctIm6ld/emCXHMxCAtGvlXcJG7ChNnPhgpCjW1KsGRNGap8886xwbcrWvL+w4y2kmCk3uJ+FE2GM1maBhbcULNRLSZJCCq20SGSqHV88h8dFl2gs7fLssznm1Q8Az2J/nBwuMkr89By4lqS7KUP5LP7S8fRjR2lKwcasLgyqz34Cp6KyueRowzH27Now1fY9qhiW21B25wyqOZS4kjmD7MPwqYlBFk0b+TiSJ6SyAwInzBtT5MXcN37aughoERBOibCUEwIPNE201oJjR8g1sQuYAcziArdLS8Pq7MP/m+OCFaBALuotQU5sNt61stGIBArkJ0ndAMqe9zJ5bGmJRbGe7RDvQ/oOrICFq4G35atjXdHLQIJ72u4njFmJ1cbLHX2eo0=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"`GetStringAsync` is awaited inside `GetOneAsync`, but what awaits `GetOneAsync`?\r\n\r\nThe `Task.WhenAll` allows you to `await` several tasks at once - in this case, tasks from two separate calls to `GetOneAsync`.","date":"2018-09-06T12:34:50.833Z"},{"_id":"2f422ba0-249a-11e9-8373-bb00b160a353","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"","authorEmailEncrypted":"j95qkiYFcInj2Evn1w2vyxl6dhaGqoIPzIOe9dZjnKAEeaye66Qto7pWjp4kILx3xiySIKndwwCMdXOq688b/82S4LC/kPpAu+D1YVYEyHx6IfTTE10eZEyyW/Necqai2Wi4aGJBD7RmPdMhzJUNZnP/cSsOmhaQGzgmA15IFjWbysm+rs6oHUdWzZ8Q88XDqkKNKiQpaPs8bzNbL+6y4DB3SeYD+PYW+rhHtt4/nO7ZQpUSovNXecPA0501a16CDodE9J6HYfI1uNkPF9Qcc8fze0188qRAitsX0RrIKuoUqR+SIai45nm2VmrLK2KAWJYlzUL1dVB1R2rjlCDGCnE2MUeWsEEdSwLlLpHYqkUyx3T8P2dU/6xxOSzJ8ueOYyYXGQMaxcUTJ7Bf9M8uIp8X129onTTWw3yYMRrNjigtMt573U0A16DruA7iltaCj9xxh219XQlNIaa6tL35oTgZkkvMH6M8dgPN0StC9UfdyJ6Lp3MJHlGksejuXMtvm5sdq8I2NBxGYeBVX3zgaa+romrsC0YJF6rWFfLW4FBevApXOXRpBH/yEm0OyywGvZstlNCUN/C6hpXMgB2IlT6okPz/GdHiX7oZVvDTDQpBwtP1bEaygY8ZmVWZ9u77jOZluVQCxHnjGJw4lvwfG3P7OQpv796D17QzfUX/vwo=","authorEmailMD5":"b619cb6f721b7b23132cd8ccc814cc49","authorName":"developer02","authorUri":"","message":"this Task.Run(async () => await httpClient.getContentAsync()).Result or Task.Run(async () => httpClient.getContentAsync()) in  legacy ASP.NET SynchronizationContext, \r\nCan that cause a bottleneck? whty?","date":"2019-01-30T14:20:25.523Z"},{"_id":"adf8f660-24ac-11e9-8373-bb00b160a353","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"2f422ba0-249a-11e9-8373-bb00b160a353","authorEmailEncrypted":"P9UsIwOwCYDtQNadSSYwR2+JTrVX9CNhICOE16iUyHztxpOS9RolBT3os9GUuqPyIxGDwtqfXW9R9eX6sC50wTGY85TLyFW46HnbXkdkhhcBP6v8F3XiZekV9qh/nzUevw2Q29hniI/VCu0kavDOvIhoq7bT1kMhlIXwpxoepuDfcRFj1g/QuC0U1Y6cM4RNxbKK6brToFGlwWY+95c8IWHuTeMnK2MudhfZaLExura05PpSkBJIAnn9sXl3L5Q/la5VdqaZxTrX+tPcj0OR4dFVSRPZqFR5yWMcKaerbYxpDLsN4h0paxukWCZJoqKRgv5KRmk6S0yQJXiUyVz5aWklL9YZS4eaSvrZrueSfDgoDb7HLMly1T/s3f9urH4Ladv5UrsJqeodKjQszLkp8dbwDCBRxZYnmCPU3bi6mvfbwIw3hOzE08UBsrzLbdEMjyggfMVkCQwl6tnP0wEvLTsa1sP139rmItCliM8w+qSAIAuUW4bcWPU8geqMm4b1Uu9rJwsWBwxyu+D8XLtkESQEAbKdaUpb7OEXgnfF8yTCmfJG3LZ7zQI1+a+smBydiKoM61rsyuWXdVDlUGylrYf4dkiQF+5efAeBOe5xNB5BrJ+mDSGTJbDl3c2f+QXJR+kyqy0kdRqL+IPnevb9Y54BXB5ax+grmYnoVpE9vo4=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"[Answered here](https://stackoverflow.com/questions/54444555/bottleneck-running-task-run-on-asp-net-mvc/54444748#54444748)","date":"2019-01-30T16:32:48.864Z"},{"_id":"6900f270-45f3-11e9-bd30-ef60667f8352","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"","authorEmailEncrypted":"GWJ96FyVrwiJS25ZEY5vv/idmwGoEkzwrybRAVeohteDsocCp5ucjIU3PsbmWzFWlxGYmJ1doNihc2dtBB1WV3dKFBFjhh/mru2PkcIfT2b5pitgmnwfm3xB55m58zvHR6YvzunRzPh53dknT69KroBtwu9UnoSg+JQyBwSV01dp/WOAep04bmeRM3E/iAqS2qW8vhR7oiRymZ4nw0vnRh5f0278Is2atDnkHSI3Fn1hK+DGYhLwqdFUyKKRA+Y2Z5uWEaWnGWsq+LAetGKNMQPmfD19nhvRXF4zfcbE7W9xGYExMbvaQ3D/wbYiLDr5TCNSzISbpufLL+JotZPO2T00ih0NWmZLdZfsqwTvSKkFYiGU2x6XUNDuBOK/PjaDE4KarZBnOz2SrHoSx2m/8l7H3rhvHJL2oPTCsAHaqVUcnoVjg7KXjU8jL4TfE4hyn1ubQd94nVIhebDFLLgLnO7MPnmwTMGcjRiNuXDVVpLsB9VLCYRu1/wj8cZQzJvNlKOiFeaeWD1r4SmbRz4qZ3M7ELCoV82+uXGfCvolDQh4FEfFef8Y+jeamdxB1sJurwV2jnkSPsNWzN5miaezGDPunyu2mc5vLGvzG5oPWrL8tFP590xeyySsp3uf1TVtPbpO6MNTaPTiZbZxmmD4ByIXUYZQommiyxO/q+feNgM=","authorEmailMD5":"1b789c5cfab296ee4a8851e4e9acc466","authorName":"Joshua","authorUri":"","message":"Stephen, thank you for this excellent post.  If I'm going to write a library, and Async/Await all the things, then you mentioned that I should use the ConfigureAwait.\r\n\r\nHowever, if I were to target say .Net Standard 2.0 and force all consumers of my library to a compatible library (i.e. .Net Core 2.0 or .Net Framework 4.6.1), does that mean I would no longer need to include ConfigureAwait since it would be .Net Core compatible?","date":"2019-03-14T00:52:15.818Z"},{"_id":"c3f87400-45f3-11e9-bd30-ef60667f8352","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"6900f270-45f3-11e9-bd30-ef60667f8352","authorEmailEncrypted":"vAdW8vV4AK24UkmNoxzI31A2TFSiAKgErfC7c7WFu0UGWGF4zRqZQXA6aALHsaBqouS95OGkOR7csPCvwF+LK3oI0oll00kBAQeUstgc0VDbCAIaMCaux0xc1MVeNKyF2kM9i5Y3kkpwSiUI/TnJPeg7ecmsZGjUFjzVqximQFs9KyJEJjMowW/XpkNK34IuxQdreCqGy2VhWFl7W964Jsi5FEOlA7qQ9iQpSQVvAT97aXZ02YmlOYkp1pMFU0F81ZwzGQ/eF9sq44Cb4sicGgfa6d4Imt8fhu9vPZNM30KAlikmO2XqvEKc/B5DiH8CYAJ6mD+/gn8YWXbeYYpDeNkfDOXl2vwCilZyLicJyIAQeDUwKoFo1i+OOVSVb4y4j/bw8rYU/ibYUAezdPfAxo2cYlCkrhph/mONyAazdOEQc4WSXh8siO7JUKZ29nDOpMjEtvowD0O3kJy3D6SzY9wgrSl7P/Sfl7a490cdtKOq9YwRZcEGqcn8r0+P/uqLt24F8waG8qDlX+yy0YBPHEo6E8ycMW2/jKX28FRGa08LisWtKoTr6NRip4A35ikkgtW/vsJo5wub2hl+b7cC4tK2g2EFjNLOSK7zwIgQIRvYfhUeHO7/N8n/m00A1WfLHGeFW5UMGyVK29dUikm9QLedspXzrPPm2w6oqzXC1/0=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"No; there's a difference between .NET Core and ASP.NET Core.\r\n\r\nASP.NET Core does not have a `SynchronizationContext`. If your library is a general-purpose library, then it should use `ConfigureAwait(false)`. If your library is *only* going to be used in ASP.NET Core applications, then you can omit the `ConfigureAwait(false)`.","date":"2019-03-14T00:54:48.419Z"},{"_id":"70b2c780-818c-11e9-bf18-0702ff164891","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"76ba46a0-818a-11e9-bf18-0702ff164891","authorEmailEncrypted":"cwZkGy5J/Qt3yXEpM0q4eWqHzH8ygzbpK5RbFrr6XaSWcGP8T5Y9hspAdpv4qLEJEig1x8SupOkxTL8NkLoG2eN4X5BwXfCSSYw1ciaKRVmp1UA3IdYnh4U3b4655VuZGdGEX2H/Cgq36az68zucEcKQvkZF0bjxPdreP1ZbVXHZuxg26Ahtf6sxF2g74pegBVacYTrUemYw/aYi1jCZ7Z7vUTTXXxQFlRxSEkbCMKcCWjy9yEa2QYB73ocNCDEfxU5oAWWca39h72I+yIv6Qz54IaTKB3ciimHtFKTAzlywOXpcbLKf3KMoxd4klqOTH7CEpEcXr+IDS6lIYFmvw5zObr5aF7p61sNlIWn1lZl3N6gunJ/YzklPkE8hwOo97xohoFbL91PjXtobSTmswOgH3mjDU6YndlbrMeU0agDuo+8OYtWaUgGrsEgBI88UbtJ6Jc26rxYJ6RNKArADCErDUaFmnAczTrB5X+Sp6WEGnjyurrPwzb1JrghYA3bmGAqUkgEUaJlfIbwghDONrRpfvchnrwx6R8TLiFtQaEY270YTNiowK06M5oq/3i+hSW0MNWkmsigBGUKdmh8GKjKm3vYnNVDKEGZesqaeXEGSdKJDLx4mWXAyWnPorToRAmy71U4K7CezELv1XhDIm6JZL6Odao97wAPFZpC2uk0=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Console apps and Azure Functions do not have context. I'm not sure about Worker, but I would *expect* it to also not have a context.","date":"2019-05-28T21:06:20.275Z"},{"_id":"76ba46a0-818a-11e9-bf18-0702ff164891","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"","authorEmailEncrypted":"Qf3qq8PfoxqLAMK/oZdjFx98RlVJsV0oCKs/4Pxd0XZJzUJYL+ULDOk5F13/aYJQDwDtD78mmjQfh3ZykkfzkBJ+62Lj0YsLme9LSuj9Ye6FlvbR7EhXmaYzvIVjzajyBdSaMIoISXYQHyjyrFHsYWCaVAXOO/lSpIwjMlHJ+f1/m9oFj8RpJfxr5eLkohEmyEwvTUrFAqy6wPnKi4cEnne6j+GRFKD6DBFz19u0+8bk9zz+xEZtuZZ1a56Izy1ANesQkCkDdEHjJVCtqcx0tLLXygg7HykCAKdMQBrbfB3WQRRNLUXlFzhp8HSUgKHHV+n+lqRAaji+wB5PBjmBVvZOKozdMOneED/o5DjZBHFvo4jsNATuajwTDFChNGF72YvMpyjpGcuA8o0qigjRPB7liDGQ4QXUE477KeYYTRZRxqNeU7bH++1Q1Fiux7+f/QysBtXeaLxRj8v/yxPIrVTm6CZF3rjpfDWr97UeDLWv5yaJofCjn37fSc3bUX313kkI7G23Q2uqZhGqkaLkFLJcSsinCo2/dJV6E630wv+ecbkXy5X/LEEV3UvdKGrL7k4QikJj1G9iauYnKIOsxy7nJxp3CMz6jcnEg8A5qnSZo0GRxHqv5XtFYptMylNQpV4F0MGl8GL4YjvIRiTKFJ8e8nOCcv9HyLLz4CMyD3Y=","authorEmailMD5":"2927a2e304e3714b26552d37f960323c","authorName":"Dominik","authorUri":"","message":"Hello Stephen, you wrote in article about ASP.NET Core, but what about other types of apps we can create in .NET Core like Console, Worker (in 3.0) and even Azure functions. Should we care about context on those project types?","date":"2019-05-28T20:52:11.501Z"},{"_id":"afd42360-8190-11e9-bf18-0702ff164891","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"70b2c780-818c-11e9-bf18-0702ff164891","authorEmailEncrypted":"kKNFVd0DTE1jw1xgh5yCW2EXeBffi5RiQFmjriKvUHGuKvZO22aDRnYJgzd5ztEQKzE2hvRsmw9KnzcoOnK9C4FVdaiORtZVfrp4gQlUlm+g8/pzxCsw80FWBftSAbRDmLVAu8mbZ5cAbex96Bquq9tGymsV5vePBHG/eQyJ8uoT/T1NPudTsbe+vlyUwqrBoKL715G0UAGuAhNGgneX+tvG7X1F1AtOPd+gxig/9py5f+xYWeuFRqWhUH/W+5pwYS6q5yxXgYjgykO2xys/FkklXVSz6zMIXWZtBmzfU3lqIbnfOtZlDRekWe3ozWT9aFbrEPMfTNQ9qPEMrJNI8Tiw3p3PgZvJo0K6Uvs7OQ3KvAMXPi1Azu/dsB6IfH8pxvpV4rZlNwsd2LCh78lzpwvzqaH3HlmcwBWOvMcECK9PBfVGg/2jhNTILoEsyajz8q+QrM4EtSWn5rdGcb/PV6jbrREHt2dJDPTptyIHg617Tn+ttB6azCynUJEuSu920tJzn6BUlxfTqqJMSwVzLH+765jhxj80OLT+drClHeoYGkHErgmGczpz5L9rzzoV+5aQ1Hp/OyYub4mbt+FJkDVdWfnUOMepMQ6hIZN/6Jp1J+/XcEuPhlaq3ktmH3e4HZf3n7caN40H7CW1HJt/C+ivu22VqHrYAQo4Po1lOLk=","authorEmailMD5":"2927a2e304e3714b26552d37f960323c","authorName":"Dominik","authorUri":"","message":"Tnx","date":"2019-05-28T21:36:44.163Z"},{"_id":"d54645b0-81ef-11e9-9106-19ed2574ea23","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"http://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"70b2c780-818c-11e9-bf18-0702ff164891","authorEmailEncrypted":"ShnqUG/k98vRSDP1Iiw/aA3OO2ZRa4r31LTLQYIW/M8y2SCMQ/b8U6jcs9uzTZte6ZJN/ktmnY8qrKqYGOHGk6wKNxfkH9FAtUYXDXsWQs4Ity7iOyq1orHcUTTno54Hr3okHh1vsoNfAXdALeF9wjEQNGsEzySZVKjVdTaeA8RpP2rkadwCWcT86GGdAtZdsolP2Nmv/4V8Mbq1G5O+rtZjU0Su4Hb0NkBdvPVU5avBcheCBtFGGs7QyYHOrDc7I/ORaxAAiA90trWmHk5MSa5YJKIthaAL+3WIyz/V3mjH76//ioHeMQtowfrvMpvefHHlc44qK07AS7uspYabdbgB0RreAmzElce+AwbqVEDi41WzrPjF+8NpJispkMbHs6DZDXPZlf1zcCUhl03qho6OeMNlD9jvEpiKkNGV6dahSgwC1Yf24IaQe/xwWAwSTDzozqOUpAKb9m5IK7r5VT9HDneQ5MdV11kdHM06KlOJJ4KnpX6qRD/ooGSUqq6hya7sGY37g4hDGN3jvqbpTL+2OXUZbNrjmEJF7zcjhAyBmhDkqes7zLBzpY4uJGusx4ad/nLPghZTrrqmFQcB5VttIpPlPRe/cYemADobx+bb7a1qdHkB3y3Vt5TsrQQ/EYGHG72fo+zexHuE+8ups05I0BTD3UGF8ae/x7UuiKI=","authorEmailMD5":"2927a2e304e3714b26552d37f960323c","authorName":"Dominik","authorUri":"","message":"I want to dig little father in the topic and hope you can help me. Is there any way to check from code that there is no context? I’m asking because I have tested value of SynchronizationContext.Current on couple environments – on WPF it is set, on .NET Core console it is null but on Full framework console it is also null. Other thing is that when I run some awaited method with ConfigureAwait(true) when context is null I’m returning to the same thread so it is working like it should even with empty context. Maybe I’m suppose to check different thing so question is – can I execute some code to check if I have context and if I really don’t have context like on ASP.NET can I return somehow to original thread?","date":"2019-05-29T08:57:49.634Z"},{"_id":"fd5338f0-8213-11e9-9106-19ed2574ea23","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"d54645b0-81ef-11e9-9106-19ed2574ea23","authorEmailEncrypted":"F0A+uT2dOUBGJMsIludZeLrLe6KHuVwEpsWH9BdQ1cHFRrVzTrMZoYCkLRgXzsGORtYG3Tn7iLy0O+Lzk+IPA2+7KgE9M6+AcBo8mNBg57CsmUzYybfSpQs8kGFRhszFxBeG9zhklc6Hx7NyPfOdlgrdiXoSiuYsBqYbpXUMhMwOtS9h55n14tOlaJMr4ekLQQeWFcWetVQx1p3M5r5wStWJrIncY7no/C10dDXa0GR6v7Ce8azR0Fjot4dVKEts7tx55QKB1BX8QeO5HWGmZdXnHZNkHmbvG6cvz4RYntnWUjLACktYuBJi0OyH7GsZBMCqge91/Ov6w0j0MJHR0AfoYuurG8BarNjTnxrudPMeInfubuS1T12eMYRIeX9P2ZANzL6rA15yEet/uvHig0UpMcfSJ6/3J0bIF1sqFCnKwdv+Ec/vYuR+KthJVO+Rv1pL0bXpX5OnELZTQtVe2lGlY9BJvkRPQOHDsk+V2uSD/t8luKfpPsAtLr8sqXskAi4g7VeyFCeb3EP5fJxeas27odPy4WRvOV1cJx+RAgjLwtm+IXJwWmWAm0xmaL7QO1NA7Ubd+iLg4QDLYkYbdgf2gl68fnecB/4r/hhQE/JIblyxZquXRMHNiucYdzE5FX0k1DzODaxqofb53tdmnDhtjUqnzB6bPth4h3zpT7Y=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"> Is there any way to check from code that there is no context?\r\n\r\nYes, but it's awkward. There is no context when there is no `SynchronizationContext` and no `TaskScheduler`. There is no `SynchronizationContext` when `SynchronizationContext.Current` is `null` *or* it is an instance of the `SynchronizationContext` class and not a derived type. There is no `TaskScheduler` when `TaskScheduler.Current` is the same as `TaskScheduler.Default`.\r\n\r\nA better question to ask is: why would my code care whether there is a context or not? Can I change it so that it doesn't care?\r\n\r\n> on WPF it is set, on .NET Core console it is null but on Full framework console it is also null\r\n\r\nEvery UI app will have a context for its UI thread. This is true across WPF/WinForms/Xamarin/etc. Console apps do not start with a context on their main thread, regardless of framework.\r\n\r\n> when I run some awaited method with ConfigureAwait(true) when context is null I’m returning to the same thread\r\n\r\nThis is possible, but not guaranteed. If your code is running on a thread pool thread, then resuming without a context will schedule the continuation to a thread pool thread, which may or may not be the same thread pool thread that started the method.\r\n\r\n> can I execute some code to check if I have context and if I really don’t have context like on ASP.NET can I return somehow to original thread?\r\n\r\nContexts don't guarantee returning to the same thread. ASP.NET pre-Core is an example of that: it provides a custom `SynchronizationContext` that can use *any* thread pool thread. Custom task schedulers are another example; e.g., `ConcurrentExclusiveSchedulerPair` is a context that can use any thread pool thread.\r\n\r\nThe vast majority of code doesn't *need* to return to the same thread. If your code does, then it should manage its own context. I have an [`AsyncContext` type](https://github.com/StephenCleary/AsyncEx) that enables this, but before you use it, make *absolutely sure* that you *need* it.","date":"2019-05-29T13:16:38.410Z"},{"_id":"42744cb0-82cf-11e9-8680-edf14881387b","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"77adcee0-82bd-11e9-8680-edf14881387b","authorEmailEncrypted":"ECTNkb1/B80yBwVYckSc1lW5uPEpFKX8WjtNzM5psB3NSEmyIJskGpL5Gad/VhlRxQU2zIlnUw4lSgW13FWGyvGsTmocrp5u3tvAO8XPGnLns4SWfD3TeZ702+PmxYEUUAU6HU/B3NQccFMCtaXKQnW5yRQtphLnYvC57M3DeGRiL6f7jSpE7OMzYBFeii+cQ1NDwrnVhM7d4dG58j0ht+P0ARWcNB8BBA7LvdvbSEcvKZFt0qqXPH0Zgs+BzkpkX3zJ9Gp/oFdpISfH/MTUK2qI746vIheNe/GxLEAuikAMz0IHW51S9Go0kkBF3vLG6a1cflJBAv7U/ee8yYsVQe5pA9efSJP8NE4QmXkl08kiFXEBR86l6M57gnBlMD+PBIxKmZa1YCsqumEQeMXHAE9KatyvP7maLTlRn69avRtr+F/qOJMPXfeJuhByCPbIf24O3kZ5yo3siZnLv5OfjR3a+4noybtUWeYW+wL27a2k96kN/bPQX/jy1ILbIp6RImPBlZoUniJ39D52jf5zmtRQBb3nLVKLu34nYI9BlCelK9GESZJDzej/UMa2Fe7VxbqpIwD8l0ftJUCjVEDHESK/U8jx0521Xvil+YhwOW6wG+pBxFSvHZFBFoSdU86Lxj1useyQ0BVZa2fp0DNlfGiIMKOfOCZskBiMw9Bvxkw=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"If `SynchronizationContext.Current == null` and `TaskScheduler.Current == TaskScheduler.Default`, then you have no context.\r\n\r\n> In my current project I have full .net on service fabric for example with many ConfigureAwait(false) with looks bad and I wonder in light of our conversation if I can delete this code and behavior will be the same?\r\n\r\nI believe it's best to leave the `ConfigureAwait(false)` in place. Even if your code doesn't need it now, it makes the code more reusable.","date":"2019-05-30T11:37:10.121Z"},{"_id":"77adcee0-82bd-11e9-8680-edf14881387b","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"http://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"fd5338f0-8213-11e9-9106-19ed2574ea23","authorEmailEncrypted":"C5FuqN3LMlrf2G55sEeQYGq8jamaUdDXmtsY1CTT16wVNRuySgxa886zKPP26FDN2q57eLgiX5uLDy/W5ND5jsFomN49PD6BoJWU+ljLeboPemV7nrv67M/iNFgldSo4JZl9bSE1EVHYRJzPU4NGDiQBSzj+pBKsB965t9tkh/+H6rU2Vmrl5Me67K2gqHyAqILaRs+HAGKFRT8LVXYicIsFqFPD1Xqwlp7sn7jfR1iLU4kP36HKp/LcUWHvq4k975J6SLMvVKsqOXR3iQFE2SGwks92vF5/lgFmqA3XF9zLoJCdiKMZDrsDPi90tX42VSFguSu6LokvO1qSEbJSG3VSeADVZBVOL6W7P+PrN8UIdLNur36nH/c8E6A6cMbNHqhVMvSLwNnpqfEeaoBLPebFIr3YhPUrd7PbnGrvuKCVC6/BDg9iHBWFe/qVYIPVn8Y9ls5E2XF2BXzAcN0qqWDILp5bkSMy2O2fMwqkMSMa66qqg+FOVokczCXLuLi05jG6YHl+vQiUVB1Eh06Qlt2XM//dvFbk1WUpMmJ8zbMraDecWvBg929wOCvOqw3N73Uoa7+R7ba7kExsp4ZSn80BU9+qbUsMh+pV7Nmi0SEZ6prxEjHiwoLB2gwu9dQ7pjiu/clsr1pxBZD+YYzx/TRQTSTgSYL15cyYhJnoFKc=","authorEmailMD5":"2927a2e304e3714b26552d37f960323c","authorName":"Dominik","authorUri":"","message":"First of all thank you for your time :)\r\n\r\n1.\tIn case of detecting the context I’m not sure about TaskScheduler. SynchronizationContext.Current on console is always null but TaskScheduler.Current == TaskScheduler.Default on .NET Core and full .NET so we have a context?\r\n\r\n2.\tI’m asking those questions not because my code need context (I agree that this should be avoided). I only want to be sure that I can omit ConfigureAwait(false) and be sure that framework will not try to sync after await with previous thread. As I understand right default behavior is ConfigureAwait(true). In my current project I have full .net on service fabric for example with many ConfigureAwait(false) with looks bad and I wonder in light of our conversation if I can delete this code and behavior will be the same?","date":"2019-05-30T09:29:48.586Z"},{"_id":"81ae5fb0-82de-11e9-8680-edf14881387b","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"42744cb0-82cf-11e9-8680-edf14881387b","authorEmailEncrypted":"BXOzDpKq5n6H0IqlKCtNRDwKB/eIWiUIvnAa5w+PptJwcKUxmLi3AuKEcwxjK4tiOqUZDiKn8CXeCbH1BG+grms8Uf2O+HzGRcQAvmSw+iB1Nta3ErN2NYlHbfsdlQjCauLSaHrDn7lGTDCjqsY27CwzANMD09aH7/y8+J60S1XWBXKmv+dtE0shdE40zru/zGyRSwcxPe5fmhwiKeYMgNeL0Helpqww/Aqe5nPvGTvolYFQ/oIb7OaTJr8PtM1htseOOSyCMfvt6oXGq2Bxr+wGCquwj8oQbiX1OP7EHHdcnVrHGJaaHMFdgtS24c9JD1jyq4Z+tRcYV1ukbLQP5ZgYsSAAB5liHI9WpgHqkl92mUXr6Z1sK53ygBdWYf5qEvQIb7ROshk/5BlPXTKgVXhEciPy7NPVnHwuX4o50Rw7tVvu/Cy59Ab6oshf3HA3N8g/Xg3IPq305N8hgL3+kiokRkg5RVbcLyQuQhVJVLkDcn3+U7Ejl8ngsp17QKC4A+tlgz69GpYhrw6pbQMT6F+j39tLg+Q+KDGpr+TzkxN6XrtaLdrtDviP2Sj2c4ZX0wl5Sh25fyOVvll5sjpa2KVYuFQDqNP3/zcKDnHvDAc0FYICgFvqn+wzRy6qWsyn0GSxZ1HzgCQ8ioW4qdTpA/TFjNr2ekosTa3SfwNMdy0=","authorEmailMD5":"2927a2e304e3714b26552d37f960323c","authorName":"Dominik","authorUri":"","message":"Now everythinh is clear - thanks for help.","date":"2019-05-30T13:26:18.668Z"},{"_id":"2c923680-959b-11e9-80d7-ad3767c843eb","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"","authorEmailEncrypted":"reZLNUpS1URhl3Qrmfu5zBcdviPHz5rtAlvWvZAY6WEeke8L2V1HyF8sjJUnDpV+FdTjUBcBCTWXRiWpr2wdNicfjlPuW55E4M665N/+a31urxHc9puPCs8yWEQwx68+gsCr6cE/B/OfMWVo+xXWJfvSQNrqZnuxhFmFP59cmNwoOE3EF1TMFbKysVWMHAR49H9u00rOFlIigSNERG2+b6aemSXV725T5OIWaRRdp6NBBjlQk28yHlSFAkGR2I/AgNISE6LE3u7pu2Nqgm1n9USGxw/tv+tTBPxwkBxL79JS3V/HzOs/xEs8eQGTeXtqhKjBJlTW0wjY1a61TCbpNFNOvIUms9yVNTC9Q1LOV+5dLeZyhu7Ih6tgaU8uvHiDyTRS29S9PUo6UYDx9RtVE+KT7ghAl755O3RcgiTPduHK6w7qlfIOfvYs5MroXkU1o1jIxIIGaoLmJ8qL2Jf4P6J9nr9F0YBLOrrjNvueRZNnmerRk2ouCZHHogj42jCFJDGYb5+OiSg4grfrePwO0seF0G/7Vg630frph3LwogWIjRw5z29fq+u0C8SDTDmHgHem1xNLItjiCkIo6CNtb6EBvxaVTqZ+UopF0PlY44NaH6wq68xxf3Ff3Z7sVwMe1d+7gNizz/ROsSOTOkzLKNieTFPGOH78+c37f5a2kSc=","authorEmailMD5":"6ebde701a897859a145e11b53a7b2387","authorName":"Jason","authorUri":"","message":"Hello Stephen,\r\n\r\nI read your article about async/await and it's a great read. I have a question to ask though and I couldn't found an answer to it on multiple blogs.\r\n\r\nWhen we use await keyword with let's say an API call, does that operation happens on Main thread too ? \r\n\r\na) If yes, how come then the Main thread (UI thread for GUI) continue with remainder of the method ?\r\n\r\nb) If No, then it violates the No thread spwan theory of async and await.\r\n\r\nCould you please clarify ?","date":"2019-06-23T09:42:11.573Z"},{"_id":"30c89f30-9c28-11e9-9e10-11c8a6edbe4d","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"","authorEmailEncrypted":"FPNT1aXrArCGlL0xnEVHuokYcLoITQOIiqNMHiBMriPiJiXyMCtpzz3ojvjlYiRvDJPSKohj0veCqKlx+SOby7fzWdShAgOLazqI2IIPldolaJwTtn2+orwH+YgfspHmHPuvOdcCudBU9CzLxdgTn4cSziefYSaQjyOd4Ye6Ve5LL9vOC2GzSdsmEKA+uNX2b2GLwtR6t6QCq9D0YhJ4FnTxDNjySWq5tzMnsnRdD+ihAhV02Ik9fZFlv+0o/y62vSlxuOX9ZzG8lCtRSvg9lkCprBGJmbPMeTm+o9r6EdJKK6qqaPrHI6TVjVZRqtt62IR6yMg7e3GmxgXlWpDTdj0HPWDM2sfzrnPTQWiWIs5crLlOrlh35kqF0ewWCKsnOyKDT/8YawqjaKd5VaHtJFwd8bo7hdFZAmVVu+F5P23xsQnK+FhY65nWoiM3Nu2PoETijOQcxGA9d659eUCnMd3l5NX8ysepsMn9Av2YYghzDnUDAvVvIMA+wQ7+puBwnV4TkEVuBH8r1iLihBV8jG7TdT2AeXlbaR3USv/lZWg1Zrum/1DxTteJWQMw+9TWHpDog1HvPII6SyB9en4OCf8QriDWjVwQ3IGOVNj4A79ntXAMlkQ+TacJ4Tis2jfXWzcWUUenU58AORXwggMl7RMEqpBP2G35oHqLHC7tlO0=","authorEmailMD5":"4089885c430ddbfe3ad641b783bb59c1","authorName":"Jesse Booth","authorUri":"","message":"My main question here revolves around the \"UI Thread\".  So I'm running an Angular client app, from a ASP .NET Core project.   Am I at risk for deadlocking or not?  Could ConfigureAwait(false) have an effect on my project??  Or no","date":"2019-07-01T17:46:44.690Z"},{"_id":"66259070-9c2d-11e9-9e10-11c8a6edbe4d","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"30c89f30-9c28-11e9-9e10-11c8a6edbe4d","authorEmailEncrypted":"Pgjh5ZIPGj3C3mfH7CToWF7BKav4iaTbFjuhkFFqFqd7bNuBzGb7l1K9ERvwv/Dj4hrLZYal4BbTIQkQzroGe4JH2y9TTS8r1JtjQ8e2Ct2jylhbTmu+zP1LiAHCyOSq/ryWu/VZyLP7oFf6ZK+a7pHeWZZswcTQJGqDV90rCOP1t0D3SDRRS1dwaHpripX41PoCFgdbRHx3I8NaRecjDn1yAoo+LBeoU7E6ebo2PkS7LVjupm3MO+tv5JNaptDj6dlH7gCvZuHgBX4V1vX1URF9DKM+fZAlMsUGUyk7CR0Cl8bQk49HvKN4gkusBZapAUIqNaIAwBCyfG61RB0lSdK7jzm7p1VLJgaqYExktcyOW6k81MOd4BWbVFN6bLecG5KHlqXq4USUYgR9ckzfCJXjjalNlZBkQnYMRrHSglBUwoj58SfGnm8jVfW8QfBrYU1KvnkkuJYRkBSC/Hp0t9EEEefqL8Zd7hF0S2hmjluRLzFriJOVfU+2qJxgCozYQKzbl1YLtrttFM8EvlRNArHoGBcOLujQXgW5c8EhBeYULoHeyrSef4j3CMoeFt+MYzN8FH5ZvRREnh99wUCHDoElGCHM50iYp9mGp7EQOqsLrIsLnQWcfgeAES0VMDlWHrkBnS3j4nGEp4IsZXhO80eyGmZHr0Kl1gw0XAPhkT0=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"UI threads only exist in GUI applications. Since your application is a server application, there is no UI thread.\r\n\r\nSo you can't cause *this kind* of deadlock by blocking on asynchronous code. But you wouldn't *want* to block on asynchronous code, either. More info: https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","date":"2019-07-01T18:24:01.670Z"},{"_id":"bffb6970-a822-11e9-b6bf-23066150a6f8","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"e2b48380-a803-11e9-b6bf-23066150a6f8","authorEmailEncrypted":"FkP/Y905h0+vm2x+ipLtmLGQpduyJkpA+O1QBP3qqhe22SkJeuj8TJtn/u2CDtglGwp2talHvASPQjm45Kt+eAWuuAueoDOW01q0P62zwBzpaIlwsv3FVtTCtDw3rvnVDS9ksO2tWZ81uyN2Hp3jEBEZrXtf/PAUib9WJxcX12wCBCeWGmX7uFdfWDqY01g79ElDLL/58/Vm5ZVNJSAxeEmneSr+wc0HgToOHL2nGZ61Ufmgx0vX8lJZ71QBl/BpHmuRiO8kFyLz0SdsQA2iFktvcoIHcHI0OqJqgSc68K+zUNdkIpEkQ636dEYgy4q8yy75EsVVIaDEW7Oz9UjUo4+OlF9FDdie5Eu0yEfKyJdgeziCSps/4pnTJo03YX8W1yY9OzXeRpRJD+Z/6E0HE1Rm90x83hk0IeuhyMPl4/tK+Z0PTHLANXVL08hsjbE5RxTBWPvFigIqqJkhIjhNMa99+rHApRU+Ik+zp4E6sAmQUeacvqrVPDWlO/Zqp2nJNM0lRuCvQDlqcSLx0yyTN/JJsQA2lPyRfthSA6+vlELDOb9HgtMrJl7qSU23xtxU945z8ZZxJ6foT+NKfRNyiM0/ooEQBeTZBL7eS9TBQmvM7f5xGShYeuBDyrNlpSY4h4X6Ki+MZeJTqrQGMo0BTP0Cd2POq8p88G6/MdlNmKw=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Sorry, I don't know of one. There's probably some discussion somewhere in some issue(s), but I don't know of any official MS documentation stating that this *isn't* part of the platform.","date":"2019-07-16T23:38:01.891Z"},{"_id":"e2b48380-a803-11e9-b6bf-23066150a6f8","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"","authorEmailEncrypted":"gje1M569TjIl6sqgjE3I1MvPHq9qAdkIXUmqibWt8wZA4W9dCennxooSbz+ab5omqSlfTSP4PqR9Z59nqf21m+cdskaist0jzI+6EesNom67yWzFXFryVasoCsvrdZ7qie2aZzK+0lzQx6a04XV70KUJQe/n25Idm9S2PqqbhqA9W0+T6hYqywBzn/pNvI6Ge8in6YdLj+pLIgyp2ICEWs+xvCxyewgeFFPbhyoB1yZM9YL8MHXx/o8PwMxWhEbaQWhBaET2V0JQFE/0q0OATDCMNARznkSNqu/EvR3ycL/bXOUIgyWwb02Fhy/1C5qifBP/paBgk2JFAt47V7/PMnOUSyz26nrATw2r2UmZN4P/FsNbVQsfKLjiJUv7KBrPY+Zoerjk57BtWneLiQ7gKWiRPpaYmYEUQbyvEUSMY7PiAbXGeAOWHsKDC89uYcNng5X8V74eqe3oz9UMwgELcap+VK9vZpmtXwM5Hu0cszfO1NraBcPyGAFN/21I/cVpjEnSHcz58J2S66Hp9mNlkLDUQaCOkdvu8DSrn8Ms11h2GBmYMXeQAkWKnM2MeNbPaxaCKdFqYuBPRZeblMZozn/ybAd77EigSZMJD3jgTRiKhL5XVowMllOFFgSaOioIegLQxEqM9nslkQm9SN97TpYIu/sKSQxlcadGKE9OugQ=","authorEmailMD5":"9d803972302a998aaf0ab04bbf3d45cd","authorName":"Royi","authorUri":"","message":"thanks !! BTW I didn't find an official msdn  article that says that there is no synchronization context. Can you please refer to one?","date":"2019-07-16T19:57:05.739Z"}]