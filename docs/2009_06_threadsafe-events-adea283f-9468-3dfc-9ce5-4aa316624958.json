[{"_id":"5f2b02d7-d04f-33c5-ad83-befaecec6387","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"Wouldn't the solution be the following code?  \r\n\r\npublic event MyEventHandler MyEvent = delegate { };  \r\nprotected virtual OnMyEvent(MyEventArgs args)  \r\n{  \r\n this.MyEvent(this, args);  \r\n}","postId":"2009_06_threadsafe-events-adea283f-9468-3dfc-9ce5-4aa316624958","replyTo":"","date":"2014-03-26T17:50:20Z","timestamp":1395856220,"authorUserId":""},{"_id":"a555c063-b953-36a6-9518-52849fbe1a4c","authorName":"Stephen Cleary","authorEmailEncrypted":"BSuYtr/DqUvlKHMFEhlhGBEvDnoeacVSTFDzh9Bj2qOpTROmM4T9l5L9YFXVBD/3bdR1pkNVX+G/IS6WciMEtrZi5eIeN7JCin5xdkr6veOoZnw+FRHiwdUu93ax6xGvd5RKyloARWuQQ8lnqYvmcizDELaWxfWgbkIsbe8Fi3ivfUnTam3BycXlhXOkjeQSVdLhEjWwObAoPvxmJBkGRCXycoVUFLFpFlAhDdNvuOYbDKhgTF3hWVRSaxYeq4ch3EK2Of+UOy1DI7gYGOZgYelur4mSE62IHot2in7FeqpG3D+seQ7MKJP5s5A2D8KwJPzW8/C5wdq9Ro0YJ96rKGiDpL3WJqpUEc7UJdDmBhSqaRfh4vYrDMSev6ETpCJRbGFZqxvOumJsQFpp/0eJkWUBXrrNDXhvDB4rvJtnv7PY4X8t6o6wEbRXC0qLnwr03KGpw9OIjH2GSTz6acrAjQdjSv9Sh81ZRtcJyRqZv7DJE9PRAhWDggBmaV7yM7rposnkda3NfcFhHsnXBrHbhwBTAUTze0nQbT26pA2UojkW8LBc7C5ePFO9btILMC/1vY2wmIU/D8odnnYh8MzmWY0DpWsgOxAhdRTl/HlmTZWs6aGVL/UVHExD1v/ZntZo8UtoIU7vgOeR5Ie8Lm0uF4nCZ7kHCpkiqR+PI5E0WAc=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"No; there's still a race condition between subscribing/unsubscribing and raising the event.  \r\n\r\nSpecifically, it is possible with that code to have one thread unsubscribe an event handler from the event, and then have another thread invoke that event handler.","postId":"2009_06_threadsafe-events-adea283f-9468-3dfc-9ce5-4aa316624958","replyTo":"","date":"2014-03-26T19:24:01Z","timestamp":1395861841,"authorUserId":""},{"_id":"ba02ad13-0455-3e7c-8471-eb87cb53d03f","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"I see… that's so complicated… anyway thanks for the answer :) btw. I’m trying to read whole blog since it's very interesting (especially the multithreading parts) :))","postId":"2009_06_threadsafe-events-adea283f-9468-3dfc-9ce5-4aa316624958","replyTo":"","date":"2014-03-26T19:44:39Z","timestamp":1395863079,"authorUserId":""},{"_id":"797e77d9-423c-3582-917e-6fbf3a4a4177","authorName":"sjb","authorEmailEncrypted":"DhwSxD6ajd0idsM3FpkiL3Y8qtmAL2gKT3+QRUgYDcmio6g1H5XNL65O+V9Yc40qynM0546dgW1MpxU/cpnRZuv5wzhxqpwIlnC/PC75JuWE0eXl3DaPOC8jsUYECAriN2ccw+1OF4mtKruOQNHF1fRijwB0qv6ChgkF6abMpVyjwji3NVTtOWJPA6wIqJ3j3OJIGXUgE3h7UPhZSTmQmn9uZlmsBYqx4/qRn+3hxho/OQxv1zfdiaTOO0UI6vvDT4pWAxVoNI5T66nNCQsUJB54RNZTgDKuHpXMgHdhc2+xsSA8TpS+iIm5i58/weYJvmSEe0GZimhc8lWYBMjOr79DlqAcyC3edkiq+6LqGG2YG/KEFJqNVPR692q0AYvUoVhPefbves80j/yxHIPhoYSXEGruTfCb/WDd/QHCvg/r74G01tc2Sb/opXT1gB8EjDzlIK4HYHJGPJLvhelFuPH3zdPl0qnV4GYXJ/8vkH2sZB/YTq+0dzilZBkHGHvjU1nbwNo3auyo9YSSUgIIIUIyzOANTzynfRErShbbS+1IYGtGOJqnBVVg5ItQfpF3XVeaslYvGjdS8+bYQeNsUOeUTdQmI0As68nYLpp6C53wLwHyJtmzikTp+EgjQjC6+EjP/x+LeSIMG1UHKq6UiyJnjHXND6XRx7oZSMTpZGA=","authorEmailMD5":"961ac36915b8a21e7cba9d2c54b5d1d9","message":"Thanks for a great blog posting, and just as interesting today as in 2009.\r\n\r\nI think the first group of failures (A raising, B simultaneously unsubscribing and releasing resources, but the delegate in B is called anyway) represents more a race condition within B than an event-specific problem. One piece of code in B is releasing a resource, while a different piece of B is using that resource and the two parts of B are not communicating with each other on that. I'm not sure that it is A's responsibility to coordinate this for B. Eric Lippert commented on this in his posting, [https://blogs.msdn.microsof...](https://blogs.msdn.microsoft.com/ericlippert/2009/04/29/events-and-races \"https://blogs.msdn.microsoft.com/ericlippert/2009/04/29/events-and-races\")\r\n\r\nSee also [https://codeblog.jonskeet.u...](https://codeblog.jonskeet.uk/2015/01/30/clean-event-handlers-invocation-with-c-6/ \"https://codeblog.jonskeet.uk/2015/01/30/clean-event-handlers-invocation-with-c-6/\")","postId":"2009_06_threadsafe-events-adea283f-9468-3dfc-9ce5-4aa316624958","replyTo":"","date":"2017-10-09T16:11:23Z","timestamp":1507565483,"authorUserId":"disqus:disqus_yaGF2uMnNq"}]