[{"_id":"2d146c6d-97f2-3485-8dd7-b5d2f123632b","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"Ok if you allow CDATA which could potentially contain the closing root node it gets difficult.","postId":"2009_07_xml-over-tcpip-ef705309-219f-33bf-b68b-bc672c257e4c","replyTo":"","date":"2011-01-01T23:07:42Z","timestamp":1293923262,"authorUserId":""},{"_id":"3721c537-511d-3bf2-b21f-3f01b09a7d3b","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"\"Reading XML from a socket without message framing is extremely difficult (the message must be considered complete when the root node is closed).\"  \r\n\r\nWhy should this be _extremely_ difficult?","postId":"2009_07_xml-over-tcpip-ef705309-219f-33bf-b68b-bc672c257e4c","replyTo":"","date":"2011-01-01T23:01:05Z","timestamp":1293922865,"authorUserId":""},{"_id":"ec712d6d-06b9-3391-b480-3d9686511756","authorName":"Stephen Cleary","authorEmailEncrypted":"daQ3afjoCn1WNapvH3456+gR2SQTJ5LeXjAKpFYAuK3dWFhgQFWAxf6JsFk4muWIexz0/LoM5LeXCFN1RiYnt3Pu+MHdmNyAvkqlcafihq/qYaBhAtzFStHJq/2NtVS+eGR5Ytous/pevqUBh+HE6zEeqHDuV9tqFadgNz9LLURnajlQUi1vJQPDIRZHaYEsKCvVc177+bfVbD9v1KH43gND9/kpSvOndH8jt/oNnJdl7pzm/l1q+OVFN7tSkfTF/b79VKswDvI/IViZkoqOAEF6tV17C+C0jU1GmH86ke+pzNo7wzCwF3yQBVFO9U7y8KI4BFIkIG5yzEClH7pgQe9z2HAF6wM6+RovIfLw1KPWG/Cktup4G2+5WgKQjRQJtHuTvP4/BlKWu8RzZTAhbQw3Z7tGrtZLgIAJK76lsntfVvYvvDfrd0K6if6M/Y/FHM/e1syo3Ww0zPccjamH8RSWtFSC1uFNkw/eX+s/8Oh5XYBHGZ3L9Ga1++vUUttWXQc/rn0FgeqChRlfhd8sPidzN6Qgf0j4z8HxEllhpx7R7UuUFYtvHevGPnvd+YxyeTzQAUvwhyodEp5D3SRlnhGf7fROVVzNDTX8C0hpSMC7Q4CvaCZyvhjJ9UbkK5B5GtoYA85L6WQClg4uP8XTUWS4SNbJWMAyO2OyOr9MRHg=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"@Anonymous: I should say - reading *arbitrary* XML from a socket ... is extremely difficult. This is because simple substring matching is insufficient. Consider not only CDATA, but also comments and child nodes with the same name.  \r\n\r\nYou actually have to end up writing a partial XML parser, which is made more complex by having to accept partial input (i.e., a SAX-style parser rather than a DOM-style parser). It's a lot easier to just wrap it with message framing.","postId":"2009_07_xml-over-tcpip-ef705309-219f-33bf-b68b-bc672c257e4c","replyTo":"","date":"2011-01-03T09:11:16Z","timestamp":1294045876,"authorUserId":""},{"_id":"08b9dc9d-40cb-3e7d-9ac5-85b7daf931f8","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"i am a noob my friend i am doing whiteboard i want to pass the object over network help me","postId":"2009_07_xml-over-tcpip-ef705309-219f-33bf-b68b-bc672c257e4c","replyTo":"","date":"2011-11-13T20:48:26Z","timestamp":1321217306,"authorUserId":""},{"_id":"13a76e44-df2e-3dd5-acbd-68073e61e074","authorName":"Stephen Cleary","authorEmailEncrypted":"WcVM9noRuIrD+qG+IQZ59E605Bqx5cdcWK0INymaSD7lruRVdmzLLUrFgLgyMYmS1ibVc7tfeGDox65dDpEPOm4D8qG1apCQHA05vYPVkULSJB4UuWaM0kjTokrtMLcS3Ffu6tykLxg3GBw1E5T3x6olHyJxfLj9ncGH3W1j3iQpUaiQsfGGTD4UnnqcdzpV94g75CFGE+YYO5K8K/HR4+uwQRf7BRGuVSLXm/k0EeSLXwRZz/IRhCtG/ratZTUMsFCrsCWfhLVsZTZiBCkBb2q59/BbGno4ogASVi5HrM+BOQkbTsJ/1MMZMQDtZCe5VTZGnRoBwyWrhN3MQGoCLNaka4TKYiJKXIatC0CrWeBw2yqYyPFwo0qBHIuJTPFFlRm4bFljxbikqTEmU7YgPxXC13ocAiqllIecHpwZZk4L1sMmqjxGX7BCzCk58DdEzZfSIyC4k1k1ZHES4aw+VtcKkLjvy03d49Z+XdhyUAaJcMqqnR89k4435fnH+beCYc8X+3aR42/06UMADXZwf9djyA9FbXtO79Uxz51f9oRxZ3b9Pp1y6GmgqUgUReo1QUOWKkkkPu6IiGAuvV7vIlljvPxg4buTlRhXuG3YgofWtjY26f1ppVpiIyYG+D5OErLRjVF/sStIj3tS80wYJxUeslGAxDRva+xKl+FsLxM=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"One socket will only send one group of bytes at a time; there is no way they can \"interfere\". \"Mutilated\" messages are usually the result of assuming a single Send can be received by a single Receive.  \r\n\r\nYou are probably missing message framing. In theory, you *could* build your own XML parser and use XML as your message framing, but that's *extremely* complex. I prefer length-prefix message framing: [http://nitoprograms.blogspot.com/2009/04/message-framing.html](http://nitoprograms.blogspot.com/2009/04/message-framing.html).","postId":"2009_07_xml-over-tcpip-ef705309-219f-33bf-b68b-bc672c257e4c","replyTo":"","date":"2012-11-17T21:59:00Z","timestamp":1353189540,"authorUserId":""},{"_id":"76b008b5-9121-3e38-b25e-e9ed30146cb8","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"Hi,   \r\n\r\nOn behalf of a real-lief application I designed an XML-based application protocol that describes both the requests that are sent by the client to the server and the response messages that are sent back to the client in response by the server. In addition, some request types result in that notification messages are sent from server to client. These notifications occur at inpredictable times. Is it possible that a notification message interferes with a request message if they are sent at exactly the same timestamp (using the same socket)? Could this be the reason that I sometimes observe that mutilated messages are received by the client? ","postId":"2009_07_xml-over-tcpip-ef705309-219f-33bf-b68b-bc672c257e4c","replyTo":"","date":"2012-11-17T20:14:20Z","timestamp":1353183260,"authorUserId":""},{"_id":"c36561b9-4522-3a0d-b3a0-6302ef9a96a3","authorName":"Stephen Cleary","authorEmailEncrypted":"g6fbgNVd/bPtJv5cpMAVehZcptko8ZuhcZSzv4/LDh6JRq8WqmRxDO6SNaN3G9U+67CktSO2lGZ7O0L1YWOxneScDwnjz4JZqBG6Mt0rtct+Dgwo6lE7ANzNA3hae2P0Rl3JMPWKYiglUU/4KTKDh2hXExKRDhFx+xDDV9p62+lqRx2vSlaS9dwRnTS3jiPhl/5/v1sGEZ+p4VF8DGBL4TXI73r+FxFIQL7AEGX1tiB3hog4TYgPl7LvU1s1Prio6TWiqTdjD0Ph2QXY0BhPk9rgIySkdWfTVGIU4uVZXnwhNhbU4bhXTbXaMWyiWNlRkFQy7OiZmFruaN/+zFwWHpEmxhhJonPUdfwl/JC7yojbMn9IxYwU8X/3jBh70VREmUiojRNihvQzOZzm+lko5f2bpJ+tuC7gITmA6R57jNqzXEeKmtMoCNFg6EMk0AJ/I2bW+zKQgX7JmnJeHIx0as4KK/BTeCOsPSpdrOYrOh4lS6TeOmB9aXwOx076l59gfbyh12aFAYTNFSMgMXCIxs8fRCUzMoiso3+VmRsQh+Qi3Xd1O4vjSWBqm4OVZJOjxHyOkPZrka9P/LBzjfmt8UgnNpKIUn/xz3iEyps1+0gmTgzhkiI8q6xkF3/iS7YiQkpyW85m43bqnf1YREUe0+OmqfVToAJUgX6vK4huSx0=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"There are two parts of the nito socket library: SimpleSocket and friends do have length-prefixing, but TcpSocket and friends do not; you have to add it yourself if you're using TcpSocket.","postId":"2009_07_xml-over-tcpip-ef705309-219f-33bf-b68b-bc672c257e4c","replyTo":"","date":"2012-11-18T05:11:40Z","timestamp":1353215500,"authorUserId":""},{"_id":"db89caf7-4929-35e2-bc06-69ce23741849","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"I use the nito async socket library, so the length-prefix message framing is in place....","postId":"2009_07_xml-over-tcpip-ef705309-219f-33bf-b68b-bc672c257e4c","replyTo":"","date":"2012-11-18T02:36:18Z","timestamp":1353206178,"authorUserId":""},{"_id":"6cd0e202-f755-3186-960e-2fd00da562a4","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"Still problem is not over; again a mutilated message was encountered.  \r\nThe message was sent from server to client. The payload xml message contains exactly 431 characters. The received payload is exactly 4 characters too short.   \r\nThe received message is: \"AC01 0000 partialpayload\".  \r\nThe prefix \"AC01\" means 428, it is not 431, and the difference between 431 and 428 is 3 not four (which was expected because we tend to interpret the \"0000\" as a keepalive message.  ","postId":"2009_07_xml-over-tcpip-ef705309-219f-33bf-b68b-bc672c257e4c","replyTo":"","date":"2012-11-22T14:09:57Z","timestamp":1353593397,"authorUserId":""},{"_id":"86dee045-a1c5-3d18-b467-844d80dd6046","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"You might be right, that my sending code is wrong. Maybe you can point me to what I do wrong, or what do not understand. I will send you (because your e-mail address is on this page) the code of the class FormServerMain.cs from Nito.Async.1.4/Source/Examples/Sockets/Simple/Server, and my code which is just a variation on on that class.","postId":"2009_07_xml-over-tcpip-ef705309-219f-33bf-b68b-bc672c257e4c","replyTo":"","date":"2012-11-22T19:49:50Z","timestamp":1353613790,"authorUserId":""},{"_id":"b8e66fce-d3d5-34e9-ae49-e85382248d01","authorName":"Stephen Cleary","authorEmailEncrypted":"ceswLX0/sbS0ZfduR+AslyiNUFgoBqcQ5a2BowflAQN/RSs8gNZXW60UoEc75JQvS1gXvsqAJXH4hlOULVjOJI7QXxKporl6PrvNWIaYf2u9Lz+7sLzGV/21SwjQ6k/UEDm5J3XMnpFCoyLBGm8ZPeedkkESiRljZS7LwBy5dGzEn59D5xzr/SzCJkYfvIp1UHT/bPqQCXX5Ez3lcLoxakYFzINxzTRgx99Oo71KaqOQmnupf2SNJUngKP4z1gIR40C8lgWlTF8ZI0A97MT5LxYy79xOOGm5G0hjbL8jCq/3ZpDCk6InI9IRU9P6V0s+hkOEgecIYBQqBt2lv2GZigTbgcDSNXXYIc+ho2XhVpn3lYhxaelOv+ErCAwTaRdCpeLVHQ1VYLIsbqqmZkyNuDzSsj/V+UCZ4fHttya9uJi6BUGdv5Z2y6DXHZ3blhTPfGSiw2ei6DggTrWA7SkeELwFXgFpcEUhrovoYgfP5NSkbxQEAygPLJ97+yZ3nw8P+h4FpcsHiC/vT2BytN4JJrEpP9jlFLNkrNhCJDeJ2doWdnTY0U0CS9e6pFn5IF6Tqhe5wbnzfFZxmNVHvU4DWMwHjVB8kR4CEo1amuFZi+0kXmUukBaru7R94FLGICxBa6G69/ALL9+QUkszcQJzZezsEjw9FSEFLXjt90LFZAQ=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"TCP guarantees correct, in-order delivery. So if \"AC01\" was received, then \"AC01\" was sent; there is no other possibility.  \r\n\r\nI suggest you take a look at your sending code.","postId":"2009_07_xml-over-tcpip-ef705309-219f-33bf-b68b-bc672c257e4c","replyTo":"","date":"2012-11-22T19:22:54Z","timestamp":1353612174,"authorUserId":""},{"_id":"143b3d2d-718d-3525-824e-8ac049fd9a81","authorName":"J","authorEmailEncrypted":"tVReptu9t93rN6k6SJjBr2GH28sEe9pgnhXJGaixfg2BSKh7stoYsHfycywnna1DNXfzv/4prTb1vvhelfE26Pi3C71G30sLWnmH6LELtUfUO67xDbzmxeQxAYCKBkb33A/0eY4B2IPAtL4BfsjVy5il5idMm2SFlLVHMUzH3CSYkRW9eZW1mPGPOR90LxcwJSnJYKpzWPkPheBskaPEvtuvh29SG4YHzEjBJMo24HbZsbDXRON878P31BPFCI+RbhqRs0bpkTXC1K52OKRVy7l5eIK3NPMyTRzI3jA+NW7jZZW/4Jw3ljyvHkuYkK29mWxp451C0N4nTqajLX6GrTrXvmqg9FiPEElVmPR5kLwoONd2+FQWhYfMZn16qc+dtXvovubrxICadd3m70wdZZPRuEufW/lVtpFdjD6BYtUGz4Jdxs+Pg+ATw/TIeD8ThcNUD0MGZHsT4SDfLfs9ECqwznZr+iIOtDq4MxUsj+yGoYZmz3Gc7Wn/0SLklpDQV9BggMXJ3bUK+vDMkjhORZaNqC4lETdZDg9+t0TETnzSrqFRhSQEsWhThNWeAVmnARYvEQgWvaRDXt8ABAS1V++g4/GWWsR7oIPd0+BF4FDJ8yRHdQDRDpd/17eB1sqqd4gLgdbqV/mhBL8CDtokQf4qc7FMeTxyKyP3UGRYndc=","authorEmailMD5":"ac102ce20485f081bd693bcb67cdb44e","message":"OIs","postId":"2009_07_xml-over-tcpip-ef705309-219f-33bf-b68b-bc672c257e4c","replyTo":"76b008b5-9121-3e38-b25e-e9ed30146cb8","date":"2017-10-29T04:07:50Z","timestamp":1509250070,"authorUserId":""}]