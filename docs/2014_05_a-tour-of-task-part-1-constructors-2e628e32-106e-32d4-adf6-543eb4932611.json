[{"_id":"27932200-3413-3252-94a4-403eaf3cd312","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"Actually, I prefer using Func for delayed scheduling. Thanks for reminding me of that!","postId":"2014_05_a-tour-of-task-part-1-constructors-2e628e32-106e-32d4-adf6-543eb4932611","replyTo":"","date":"2014-05-16T22:04:34Z","timestamp":1400277874},{"_id":"b9180744-c8cd-3e51-84ce-8f2f28f607bf","authorName":"René Stein","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"http://www.blogger.com/profile/17167694673352636541","authorUserId":"","authorFallbackAvatar":"","message":"Thanks for the article, Stephen. I agree, task constructors are useful (only?) for delayed task scheduling.   \r\nI am using task constructor as a workaround for some problems with task scheduling in my BOOST ASIO .Net.  \r\n\r\n[https://bitbucket.org/renestein/rstein.async/src/06551e00773c6adbf807c4b4e6b685adde858cc4?at=master](https://bitbucket.org/renestein/rstein.async/src/06551e00773c6adbf807c4b4e6b685adde858cc4?at=master)  ","postId":"2014_05_a-tour-of-task-part-1-constructors-2e628e32-106e-32d4-adf6-543eb4932611","replyTo":"","date":"2014-05-16T21:35:44Z","timestamp":1400276144},{"_id":"4db02c18-edb8-3cfe-95de-3c884c1ea7e5","authorName":"Noseratio","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"http://stackoverflow.com/users/1768303/noseratio","authorUserId":"","authorFallbackAvatar":"","message":"​A great article, thanks. I once answered a question where I used a Task constructor to simulate a promise-style task: [http://stackoverflow.com/q/22704575/1768303](http://stackoverflow.com/q/22704575/1768303). It was admittedly contrived but still interesting.","postId":"2014_05_a-tour-of-task-part-1-constructors-2e628e32-106e-32d4-adf6-543eb4932611","replyTo":"","date":"2014-05-17T04:32:26Z","timestamp":1400301146},{"_id":"0fe59a6a-bb48-3ed0-9061-5f66567afbab","authorName":"Nick","authorEmailEncrypted":"ekP2KbH/M3XrtlnYq+x1YtBO+VGyUMcKTojGgsUIjre5s4X1ifbzvDXew8Vk2mO+Rv3Q2q0QSY2bJYiatkzfvipKKUEwjOX6F/NV+0+7/BDCYqyH/kDJlF17xgxfJCi+Tr9LaLvXZyJ6QEqmV3X29C5Z0X9jlR3Yx/QlQ1DvD6NatyL+sgaqSgAgx3nbVbdmW66rlMIgMxLWH4inmT3yYV27oXmGl0lngmKIKbi3n3PWrHuQIfImMztAkto6PV53BBWwpRzCAotkEXafWy/T7rFgNfBtUn9ukfHorrNFW1VVe9NMatNf+0izLm8w6To/igeFxOL0BH2P0ro5FkabL7TnQ5KEot90IZhKU2P2dyba91K1zhBuGeoFZVA8TyozxvSg45CwtikhqRk0SBXggIwa6Q5wLVSCli94AXKr/6/zL0yOx5aMB4r40/9IUvkJGwPjtFmtQ9dMyWJvMxxc2hy7maIATlefC5scKZumkz45EzznhUyRs/O4Wu9MlGAPKyx+wMWaw3wWIPc0lJQunFcyJOgWWW69YJZ89NvUq7zfXCxG94EF0TQUTj4jmSZ8+k3UOatYp4ZaFqHOgj0/TW9tAtMpiD76veyuaXJQDAFuJQQBnlPnDNuhHoNGfGwHc88ShJTllvUgHdA+KbKWXWj1Eg3ljRxGrcBgzZMVFcQ=","authorEmailMD5":"deffa4f5e332fbe8d50c94844b85d315","authorUri":"","authorUserId":"disqus:disqus_podUK3vGs5","authorFallbackAvatar":"https://disqus.com/api/users/avatars/disqus_podUK3vGs5.jpg","message":"Hi Stephen, thanks for the article. - I've read many of yours in the last six months. Question on your statement not to use task constructors. Microsoft's Async example at [https://msdn.microsoft.com/en-us/library/hh191443.aspx](https://msdn.microsoft.com/en-us/library/hh191443.aspx) uses a task constructor that is then awaited after some other work is done. If I understand you right and you advise against this then how would you re-write the code they have below?\r\n\r\n // GetStringAsync returns a Task<string>. That means that when you await the   \r\n // task you'll get a string (urlContents).  \r\n Task<string> getStringTask = client.GetStringAsync(\"[http://msdn.microsoft.com](http://msdn.microsoft.com)\");\r\n\r\n // You can do work here that doesn't rely on the string from GetStringAsync.  \r\n DoIndependentWork();\r\n\r\n // The await operator suspends AccessTheWebAsync.   \r\n // - AccessTheWebAsync can't continue until getStringTask is complete.   \r\n // - Meanwhile, control returns to the caller of AccessTheWebAsync.   \r\n // - Control resumes here when getStringTask is complete.   \r\n // - The await operator then retrieves the string result from getStringTask.   \r\n string urlContents = await getStringTask;","postId":"2014_05_a-tour-of-task-part-1-constructors-2e628e32-106e-32d4-adf6-543eb4932611","replyTo":"","date":"2015-03-05T22:49:06Z","timestamp":1425595746},{"_id":"64733784-e165-3825-b371-7b629299f4b6","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"That code doesn't use the task constructor. Code using the task constructor looks like \"Task<string> getStringTask = new Task<string>();\".","postId":"2014_05_a-tour-of-task-part-1-constructors-2e628e32-106e-32d4-adf6-543eb4932611","replyTo":"0fe59a6a-bb48-3ed0-9061-5f66567afbab","date":"2015-03-05T23:01:46Z","timestamp":1425596506},{"_id":"baa8e4f0-d1ce-3bc0-9bfd-11d875aaa80e","authorName":"Nick","authorEmailEncrypted":"gGREVJaaNq2lTR30WU87C5H45j3tU7oTizSS6u2gEP0ZgLhb60FQSNE9MZcA/K5QZ/oXoHTt0sAnUAcAsFpWW/Yun+L9noPzMIPUg9zDbOCyPdENt42MlEHDAO3qvQvd+cItq72DqiCu7kxCfjoi6CXPQ4wfhLi1of0IA2s41Jk4RiRkeeJjgwqPEV9GmXYdkdGgxvwUz00hMzCrihgAmLHiwOjN/bbVV9PKgRppWgvhMOUZScj7D9Ty7QIKzmWtIDnRBawJPkWIxHEkLqwNMF4Xdoxzk4RrgSW691fxJ1nm0QuOfuv0jyiVWak0IMNGN8ETNMOkvQesjQGnXwyh7LszOAneo9tV8f2PmcZueg5t0acvriWMlUw2TSCRJq3bDOTz9SbRuoSsGxo3Q5C6GwbqedU5aLhO3Xy5GG9lmxLb3n6BSY9TdndH/aoVaZiFKTJ4n5AOXyvJNe/HLsL2GECrAPOKXxsVwDhDgaa1yjHBuQGfZbuSA45WkfVElhydK0HTPIhnpRaaCx481mUNWmg8oG6zjv7gE9QBBQtBTn7mQT4Vl9Hx7CkRbLZHc3Nayb745bWmzm3nPD11DAZpdbb5Wbf5Ms4qsaEn1YFVPUf+kdlOosou/ICQcq9R7kqXnkGa06GsJ8wDCNWHloT8Ln4oQF8ROJT4/aKAXmRKvRQ=","authorEmailMD5":"deffa4f5e332fbe8d50c94844b85d315","authorUri":"","authorUserId":"disqus:disqus_podUK3vGs5","authorFallbackAvatar":"https://disqus.com/api/users/avatars/disqus_podUK3vGs5.jpg","message":"Ah sorry, brain fade on my part, thanks.","postId":"2014_05_a-tour-of-task-part-1-constructors-2e628e32-106e-32d4-adf6-543eb4932611","replyTo":"64733784-e165-3825-b371-7b629299f4b6","date":"2015-03-05T23:03:55Z","timestamp":1425596635},{"_id":"e7202e00-9833-11e8-895e-cfa8b3c1d787","postId":"2014_05_a-tour-of-task-part-1-constructors-2e628e32-106e-32d4-adf6-543eb4932611","postUri":"https://blog.stephencleary.com/2014/05/a-tour-of-task-part-1-constructors.html","replyTo":"","authorEmailEncrypted":"nji7IlXPvkP/NcT5txOcG61jXesi+UGhWTTaQsq3FavbyU3DbSxRioQ5iPoW9HAQ6ywv7CZRNAJe8UgpNbaaWwa/n73p5e+eaB2xTiX/wgSaJh1MAA4X+gU7tR4ypcMOstEyymSUgAhz9n5tfYSd9AniFdg72+AxaVDdmCagU+foOgoVnu1d2MR+gCF/+ql5ojThmVZKWx8i+0mM/fbaVX8gnNZLL8EAZcDNdTQNQxO7GeB5ucRDOeAjjKX/uPc7+R+RbLAozFqohgyOMVPjMm+7PYiJqu0sB5+0hLxxn7WGR2SsKCfHcJrkMWocFXssyDQLAG/WVlFcvYN2XbEUV3fV1yQ1hC5ck1H9wQKugHi1+JwD6m2OeirFkIUk1tmMiG6/sVT8F1XlVXgIJB4JRLV/iuyvCy4VxA9d09GXn0RlOgCXsCxCfE6qchtzXSpbdn3NfcqppFEzUkZCMtAbJCZlfhB1RWRhgY+yYu05lHc0lRVvULtRgO5Nr17ApTBtxj1J4iTVoxKPM/K6ExnGX9CoQlv0lWogKGK1b6oGbh6xe8TD5LpS46Cv9KuCmFS24vF44XLFPuw1xGXg/rsjaAD8I1NsdrHGmejxsoOEcnRXIAKV8SNZvZFhx62yicNAg5Y6IxnDQHLii9zfr92ad6R4VzPTvnD/2JnOh4NmGuA=","authorEmailMD5":"afc19b56149552e346daf669f0c15bd5","authorName":"Jiaxin","authorUri":"","message":"Hi Stephen, thanks for the article. It seemed to say \"it's not necessary to use Task constructors\". Since you mentioned \"Don't use\", which is a pretty strong word, just wondering if there is any other reason, pitfall or negative impact to directly use Task constructors.","date":"2018-08-04T22:15:32.886Z"},{"_id":"abf3a8a0-9853-11e8-895e-cfa8b3c1d787","postId":"2014_05_a-tour-of-task-part-1-constructors-2e628e32-106e-32d4-adf6-543eb4932611","postUri":"https://blog.stephencleary.com/2014/05/a-tour-of-task-part-1-constructors.html","replyTo":"e7202e00-9833-11e8-895e-cfa8b3c1d787","authorEmailEncrypted":"EM2VXu1QfxWYyMv/kYo6z8rpSQowEEgRw/+HFKqVz8EEHIg7MDDypPXX3LX0VfdOijiJgrtk08SoO5cCrLEJLq+EW1U8DoAAxRKWPitG5aHtdKZJ4AaPQ81ur/msos7WRla1M3AHqq0vdULenYXr8CPsTBoq/lijsIsZ9iAVoBcUe+2+xA5tKh+cGiMr5vPd9IpBeGBAc//bKqWpjRdx6HjMD6SY2TExkNmvLU+E919XHPwBZgAIUhcPTZvz6iosbNhiT3LKfZTuzoCWy0ERj/dRZUhTL8UrIRX0tdqg9tW3trshnN9kkujP8O09NyRDJlhLGQ7+X+7wpDTN/2mAyy2Jnv/kd8zyTDEr/6zGDjLLxJXX6ly9QzX27PKOFie/dcdxDwvclugpDq+48Mh3NIEj8o+DlMwXsNiooGohf2aAgfYVbYv641bN3xnS+ArB1XndzpexzjP0jygNvNE+3avMGZ7bfZazRsFv+hilnVfRRFgS80iSVOI1bHzys2ghFdRI5PojhLdVEJevnIAPGdAB0lX/3R6w3GzqBJuCOe0ukK4RA7Og7teJY8B6+d/GHMsrjgKsJiNpLBBh0bwl+mO5rjK+tZy8pxl3Q4m+bxqntxqdaN2bldVWV2u5mrDq/3m5/wCsC/hP76MU2wPLaiYasqBMA4zjXdcb2m9dVtE=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Oh, yes.\r\n\r\nTask constructors have the following problems:\r\n- They can only be used to create Delegate Tasks, never Promise Tasks.\r\n- They don't understand `async` lambdas.\r\n- They create Tasks in a \"cold\" or unstarted state, unlike every modern Task API. https://blog.stephencleary.com/2014/06/a-tour-of-task-part-3-status.html","date":"2018-08-05T02:02:57.526Z"},{"_id":"113caa30-249b-11e9-8373-bb00b160a353","postId":"2014_05_a-tour-of-task-part-1-constructors-2e628e32-106e-32d4-adf6-543eb4932611","postUri":"https://blog.stephencleary.com/2014/05/a-tour-of-task-part-1-constructors.html","replyTo":"","authorEmailEncrypted":"rgqMpaf1OcByhk681aoo9sGI1Y/Hpx8J6DylE3IVIF82dV+wZc/wDQzFQMoAJljWRIwcXsnuiHJA7baKAprkapXoyXeTLvcJbLyQtg3smQbizzSzQC2acCkGM4FImVOXvk9VqTn8ctdlae6Gq/mZMsx2Sdyf/J9UvZZyq+rzqMd8M4a/Qo/UYyd5vpE74xoM5gtHD78ZeTf4rIOMOq9Vqa9bZ26yungNKyDedIeNvxh0udg/CcZxrsHbKoBD0I7dCyMseXs2OnlMQDPKEZ8/lBQ9xW85CRKqpN6jqnoVAjEImWFY34X2cfW2n9H4SZtpD2uzDNeCCa8KM5B6zutHkE415p6OfkBXHtR1L+0C1RbZ4XfkXLIMaJgeETzNHKvFB5ofGC6h9OnZTrRtruqFBo+2X+MM6Wuua26mEHaY7ZJ1d1Yld8ymQdLwrFES9ajjQ7F6/aQLT9O6w4M5xpKsAr6etiMgBx3o+Xj6CiF/zIlsNiKW2dkcTC2f/hC+a3fVH+HIJNyoVwRqTTZpLuGQRypbgjYOpF/4EZubmDMPeSH1CN/OrKh+ki4HMWjRzktwnqZhWKz25m/TINW1LI7WRaInDYPVIAO8bJB2SjUr867uEy4urFkQnMaXmf8DMU+AA90xtrMvijnIZOM+j5SRHKxuu4TN7MaqRWKbj41to+4=","authorEmailMD5":"37ed623c7e539c1e991c5be604e4a7aa","authorName":"","authorUri":"","message":"> Remember that there are two kinds of tasks: Promise Tasks and Delegate Tasks.\r\n\r\nI clicked on this \"tour of tasks, part 1\" hoping to start with the basics. This presented an awkward stumbling block for me.  Maybe a link to a prior post?","date":"2019-01-30T14:26:44.497Z"}]