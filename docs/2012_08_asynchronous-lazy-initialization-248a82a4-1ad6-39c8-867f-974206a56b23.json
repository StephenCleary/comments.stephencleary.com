[{"_id":"68748ae1-cb91-38e2-af4b-318a0d146258","authorName":"Jeff","authorEmailEncrypted":"","authorEmailMD5":"","message":"What's the assignment in the Start() method for?  \r\n(\"var unused = instance.Value;\")  \r\n\r\nDoes calling instance.Value trigger the lazy initialization?","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"","date":"2012-08-16T22:11:28Z","timestamp":1345155088,"authorUserId":""},{"_id":"adb967cf-302e-3c8a-8a5c-68495c1be110","authorName":"Stephen Cleary","authorEmailEncrypted":"wAevojDfRRfkLj/ZpIdvFMsOiOwjx+/vXkao6lPff85r/t9b8kqLuwZ/4Vmutzq7LhgpaVQe+TZLsXhiBQUeZriUZnHBOdJbryECgDZOFfBfdYlrq7W3vZkei1bmK79tW1VCA2C4fDDPGYz6sCD6bYWd0YkrmG5zBL7DItvxwplRczGZtIYYrPxXxm7EWc7JSjW2O7EDUhQ6AWLEN/FvN04gen7Hmvwc9Iku4Xtpb5ssCWQPFAb/A2qznDKANQjEzvQoNT1771L9wrNkzqryKWB2kt+SCuePgGrV9HN/q4Dra4gBK851BT2Rl3nFb/9Y7cMkQuamFz1Z7HS0r8xbvjArtEKLsELBICfJMOQ/s7xApnd0YM0TLbhfGm0t4d6kPkLZyEAVY4rnnmaKQLfjTDCSD4rAl6UlUScLyLyxehPW3NH6OTHAs/iCAxchG9OMwyEwTM67Hq4HkC4NItUKpA3z0DnlcFWGZQjDNjiCzfdiXGETz0gMctKtk4acVPWLJVe4XuCDAiPlz6DS7L7GNYbt1puVjaMTJ9oTggCVS7hgkgTbESk4J2qzyhOoV2UeQCU+D1X1N1Qc5DVKI/f219OOI/uFp2SM7fni4a+d3XSSBCVpg2zMV6OPIia8dhN4D+toh21lBJUQzD3FlYEs6kFPoJbs2k3BoqVwLnsE9fU=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Yes. There are some use cases where you want to start the initialization but won't actually need the result until later.  \r\n\r\nOf course, you can just do \"var unused = myResource.Value;\" yourself, but I think calling a method is cleaner.  \r\n\r\nWhen you read \"Value\", you get back a Task which represents the factory delegate running on a thread pool thread. Accessing the \"Value\" property kicks off the factory delegate (if it's not already running).","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"","date":"2012-08-16T22:46:47Z","timestamp":1345157207,"authorUserId":""},{"_id":"539e6a19-e628-3c46-8354-1804100fdd34","authorName":"Robert","authorEmailEncrypted":"","authorEmailMD5":"","message":"Thanks! A couple of stray \"span\" tags in the code.","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"","date":"2013-07-04T13:28:23Z","timestamp":1372944503,"authorUserId":""},{"_id":"3231f8bd-fb2e-37f4-be45-81aad54cd069","authorName":"Eric Ouellet","authorEmailEncrypted":"","authorEmailMD5":"","message":"Very nice! What about a new one with INotifyPropertyChanged to notify when loaded(initialized) :-) !","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"","date":"2014-02-08T02:57:34Z","timestamp":1391828254,"authorUserId":""},{"_id":"756b8c59-40d2-33b0-9876-040f3de51767","authorName":"Stephen Cleary","authorEmailEncrypted":"mGG0HHA0qRf9TMRx9lQhjMP7q7d66p7poQZ+5hODmoVCCPZ+TBeqGWtK++tsu6+FCvEInjABAwFO3AYXtVNCw157OLI+3mcwN8I2AT9dAxdBfjSPwC3bGnLcEOZHQa1DfvSGFSRSiX3lRyGpA/1enB02J03dSKADyyMbJlSSkxTE+UifhKzvYgZDRAKuLDRe2ShLp6WPTDXWI5grgVdXvc2iwbMTT5TWy8UEiX61gYmDyO6cUX/tHY5z/xi/vZYDBto2/uyXdPYeFF0f0rWC5VFTP4yYnMnGluY3OuebnFJXLBh6I+0ibHgpEQ5w90xRMpl8ufc/qzi7WRRvWw5EpTex2+N4JI43sLI+gxBSF96KyD1lhED90qTcgKLLxF9ef5UwpAYGEejwUkS+r2ZsL6zLNOJ0Ufbqsbkb/j8XqEcMo36YTen0hgtH9/7IfwuicWHtlWjy2AWHcIGyudj0V0FZvVTstaYQWrPseDbPkM9maO9A3R9LG84A7KOCzXNlyV6t+Hg/l2vc585CLpvaMZXwJDwGc6r4DkROdorQOplHC7qij0iW91mpz24/v37E84LaCSxVyHEMNGJuoxI6jRYSkfRIxs70gMbALbecnVS8qADejc8GiEVTMzJLQGsAij36sONWdfJ3ShUFfiMrY1BWafVioQyXkB38QlEIHKY=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"AsyncLazy is intended for use when your code awaits the asynchronous initialization. If you're doing data binding, use NotifyTaskCompletion instead:  \r\n [https://nitoasyncex.codeplex.com/wikipage?title=NotifyTaskCompletion](https://nitoasyncex.codeplex.com/wikipage?title=NotifyTaskCompletion)  \r\n [http://blog.stephencleary.com/2013/01/async-oop-3-properties.html](http://blog.stephencleary.com/2013/01/async-oop-3-properties.html)","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"","date":"2014-02-08T06:10:46Z","timestamp":1391839846,"authorUserId":""},{"_id":"49f49d89-0fb5-38b1-bd81-84152de24e73","authorName":"dotnetchris","authorEmailEncrypted":"nh3bD/ts7zggYgX/KMm7ei1XofrDZHD4BZMPwg+de1WQJ2ydFZJcRHnJkD/q0tPGq0/+sfJ6brMxtV1RhqekCuS82e2kW7Q8YndXnHJUOHKYJ4EMv6gmmiCEIKg0QtveKEz5mOaRh+LKo/Iij4KMG8On70d9yIVRVxG8gDuFRm6+xs/bzegMIqqCUibPoSlkpR8zPLWd0PHROalZS135ieU7PvJuWx8yBNsitAUFJpDJGsnLshcTztE++E1pdw+x8CUvjI7nT70lECbM5rktgUukrcrhA2qrWqfm3kHs91+DAEWIMolunRNjXwQQZvMyIELlxJucrmUoKwnOKGiR+q+G/ta/kAnW1JQ5gcB3FOMaPTRf0kAWckzLfbSacxt2uXDzjZsCCkOZuGQYYCv9HjZMj0ZdUQlsapJyMmrgNUoy+t7mOX75M4VbQy0TPmG3Ygtoww1WVgza4OVX3/ZnGyhGKjrCOg3BkW4yU0SYwEJP1CrvT1l1WM2oKExjccfU8hKqZ4qM5B3g9RdQlgmqHEyMfGLjZwQTSMOPn0LZX3Yhz8jg7QYlmJmtUS3VeZu6oAgxMshslZCn0X9pzQ+022HXMrD/kBY3zxW3CJ8H3uRe3+/UbkfuwCEkBXOb3bYBrDdx3Tue66qVt2u6vxfCVTIQOO5QF6jlW3JgS7fVh1A=","authorEmailMD5":"f0e7c2d0d5d83c928cfcfce66928160e","message":"Yes, the .Value property invocates the lazy, the assignment isn't specifically necessary.","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"68748ae1-cb91-38e2-af4b-318a0d146258","date":"2015-06-02T18:25:39Z","timestamp":1433269539,"authorUserId":"disqus:dotnetchris"},{"_id":"71b4b46b-fec3-36c9-9dad-5bef347b3ebc","authorName":"dotnetchris","authorEmailEncrypted":"rSM1rnsOySUizbsHqVwHQdDY5WwmjhaWnAeoVAi5tjbpvAmIOHZ6c8qORYiS1y1ytzJwWKJFndzQGuKE9By5WqrO5gxq1e5IHIsrbuKEJmqUUbwOjmRc5oLr9vdKwo4CxPNL/Cqd6dgxfXaJ23CjJS/2Q4d/i8FJ6FqJj+BKtLpJ7xyn5ZNYT2tPS8+vB9CqpWrXBvQHuOeWH/sCIrjXwvmQ6HgpI/FI7AXOfY6WnubYjyAV3UB7WOws4dmYAosqYs5Gsc/SW2IBSGnbzU+mIZRK3M15zKK/rrJnzXX/7bewEiGNaFyV+s8e/AyO3sS1nW23Q0GoCENOGMFzibou8B+LjfeKb1oB1e4vF6djA3hTONw5WalZKB//vFehItjLHAt5/gX0wzHNfTSNm0qoFnf/DDv8xzd7lVQOEOfnyIPCDiMa1xs2vP97RRvbf3aewEgWG8ANXCp4Q6pC3+cQwGly1BQiEtMT6dPcPswdZdZVmjyM3SktKLZTdjf0ayKPjtH6b5kFFchVgVPONxtYjJaK4LW5Bu6G3br2rBhooASVnF63ZYpL+EGpbTlRK8m6ATlZJAC0Wj66unJxBTQHjr68XCevBpRLe/EITRQkP87L+tFXhWbomuMJFkY2OjShzoPBE2mRqYi2RBrqRSyYZ7+vCTJIfjYcmN+jcYvBd+k=","authorEmailMD5":"f0e7c2d0d5d83c928cfcfce66928160e","message":"Fair point about the AggregateException. This usage would be under a console application or windows service. If this was ever executed under ASP.NET or WPF it would need to be outside of the request context or UI worker thread as the application would be in an undefined state prior to the completion of the Lazy. If a UI thread or request thread tried to access the Result prior to completion i would expect to either block or return some kind of not ready error perhaps time out based.\r\n\r\nCreateFoo() will take approximately 10 minutes to run during which there's nothing else for the application to do, but the internals of CreateFoo are massively concurrent. CreateFoo spawns somewhere on the order of 50 threads all returning back to the single thread.","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"e654d7aa-fca5-388a-ad25-d87cb5db5b34","date":"2015-06-02T19:07:10Z","timestamp":1433272030,"authorUserId":"disqus:dotnetchris"},{"_id":"7a589abc-e0ca-3fd2-ae55-8f89434bfef4","authorName":"dotnetchris","authorEmailEncrypted":"elCvcKJA6yLOcTSDuqiwG74uaryIXKE+39iJXaHjMdP+rAuMyEF/n7uSiULdi7eZ4tIzvliWJ30QdqNOzdM0sAn2rFtTkQ6M7zavy8zt8nrYk9Z1evj6ZmQEEEs5PfSE7rJ1T+p+7oR1Pgobtf78GbZgNEAO0um66zouc9dhbU/HS09MJ0bueSSog+wSS7gdr1wvcRSxyIZ9LnkNkSfWqMDO9S+GiIopCs8jSWZordB6DZqKue0mZneVELk30Pd9evm/CCMsnRaMd+8rqPDHrchPAaC8AXEG6uLyvKrDzhVvaXFPJ5/dJB0gk+4SLVj7xcDzR9gU32XPCb4ZXkpws+CNVhkS6Wb8T9ZIQkMPa5MJC814POBbzb7W9XVnPwRLLsbODOcb1v3ZKlsXpjYI6H0hAd+WOGaI0RNbAgRcB0Rca5NxIiAOFM5UZ0za/hGWwKEmcqVRWnwS0yqn3HOT9vQ5dd4ig466ZrVNX2b+eClDCUIfDyn1SQkr3MxJxVQhOkqiPdX/lb0SSpgVtT5shd2EZoyPh5gNesCjWMr/Tuo0lmZirHoII5vWRESxQwGCstd4Rwhmi1aO+3E87EPBzbTdU341FUwlBk0dqm2XGiiOblNsN+K9whMpZULHjXefKeHMb/R7XvE5kS3VPzfEWQsZYsK9+CBjfE0D71TLnw8=","authorEmailMD5":"f0e7c2d0d5d83c928cfcfce66928160e","message":"Are there any pitfalls to doing:\r\n\r\n``","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"","date":"2015-06-02T18:15:16Z","timestamp":1433268916,"authorUserId":"disqus:dotnetchris"},{"_id":"e654d7aa-fca5-388a-ad25-d87cb5db5b34","authorName":"Stephen Cleary","authorEmailEncrypted":"YVszKx4icqHUF77vb286B/pRx6o8bRo3/yzaBuueRxqrf2hMD+/1ORVM+LiaUq7WFynnPoKDsHZfSmfIj3D9ZwVjhMT2zL2nK17eCkzsrFXr9blO0FHqWCj01kewrtpDPVBfB0EwXjprWKOke/HQr4pyekObS9B5TQ0ADY3LnWSa3zZD/DOGIjY/PLdeRo4L0uHh42dHpS7bOZq7qcBSjsZDeXThp4RW2zmWAMsazY0Q/KRK2cjWmXCKmX5b6bwKLv76E/jPuXGM7EIukYIilPHYXCTvHbDvF6c/3BYy1TdxE/leiUDtGGICopxgw6u8fsIcrs98krvyDbfBcSDKYwW4itejQbGY/N4cgdXvlLl/qWfa7ab/Ela7u8YQKJ52qNe/qtUi2yYv2N9NHa8eWra21tS5ch6iOVtp0vBPyKZkOC8aIKutZN7rD4c2dV7rhriV5907i3ujI/l0mBQc699KK9ZjeVC3U7EBSQ6bPACTov8FHhOG4nb7p/a7vWoZbh7pyHSqYldmu9l2/QfG9bQixTdxhXslvaKqvnuTun4OE24ZwoUtVk48AqhtKYIkzw9Lxh4xEQVWl9AbcblliFP5QOkBAcBSWhv6Rd0AEoS0VTCY1DIKzclN742vbVrDMk8LUXjr/6EZQ8JkocOXlpqWcW4gnYF0mfjXRKlqruI=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"There's a few pitfalls.\r\n\r\nFirst, Result will wrap exceptions in an AggregateException. This is easily avoided by using GetAwaiter().GetResult() instead of Result.\r\n\r\nNext, the AsyncLazy<t> will complete the Lazy factory in a very short amount of time; it is only locked while creating the Task<t>. Then all awaiters that consume the AsyncLazy<t> share the same underlying Task<t>. A plain Lazy<t> will (synchronously) block all callers until FooCreate completes.\r\n\r\nFinally, you inherit all the downfalls of performing sync-over-async. For example, this can easily cause deadlocks if called from UI or ASP.NET request contexts.","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"7a589abc-e0ca-3fd2-ae55-8f89434bfef4","date":"2015-06-02T18:33:02Z","timestamp":1433269982,"authorUserId":"disqus:stephen_cleary"},{"_id":"41c3203e-fddc-3d39-b306-212c781fec93","authorName":"Stephen Cleary","authorEmailEncrypted":"bbgs6JUdfi8+rvGM7V7dquQUVCz24v5KyF8rTPyVYps+/GKnjE5H7lp2hYILAvdE5OTFSpHN7H42eGIu1cYzT6/PasWb87jVEjJ8DwMKuqNhNH+X7+7bAgJyEDVuIoWf3Gv5tjo2WzqXfp6Sfv4N9hKs6Ajm5q3HEhjSiys6JsnOcuC24MQUMaqw7FqhKyvBW7gclOf0+R2mJ9YvLPl6ADYzgfTPyrgT0Th0resotBTb1gbo5DuhlF1xxoyeYmjLrcnbs8deXEgpJHcfMxU+wBNxbeadwE6Tyg1auIpUyDOAsmO4q04KN+TiRNsfe2+YrJNNvXD3zUZbnwnAeMXdAjuyyGb0p4CrBAINz+cgOBc4TECDWwVoz7bhRtOSY0EhOXbEOvjgzRcFqRU8gDxvPHWLvvyTOIVy7C2aji3KlRggWAcbzcdvn3GzUk3qfNfSQgMKnPV2dk3blF93zhqCmOc4vd2qiqFfPkg/lhAKFSM2vecn89EWon3Nj9Q6uYovdYFQSxBkBY0xIekrmebdYsNeABxktBJv5yy3HnLhU6SFpEtnsw3AgtSw1q6wnbsCEe4ohMYvhZUqfEswRfC8x7NJMA/gDKqzsDAuFy0E+ZYG1OeHYbY6UjuJya5JxC+QUKpXNJvws1pI8bpPFrWuGaomL8ib0WKq2e7o9lWQsrA=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"In that case, you certainly could use blocking. AsyncLazy is intended for situations where (possibly multiple) consumers want to wait for the single resource asynchronously. If they need to wait synchronously, Lazy is a better choice.","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"71b4b46b-fec3-36c9-9dad-5bef347b3ebc","date":"2015-06-03T01:37:03Z","timestamp":1433295423,"authorUserId":"disqus:stephen_cleary"},{"_id":"871af978-4bc3-33cb-a365-646b48bc306f","authorName":"dotnetchris","authorEmailEncrypted":"XKFvBcQFg7eSyK08gSwSUNyUK8mrdaEnopnVlz3uIlj/KQpE8OEMCTU2o4APVOdu+WJYSnIbgmOUYbk+pyiCXIALPjPLGi4Ue7YyjxWiOylJcDyskY6+5HRa3cCd7h5bc7Joyx7wipEJpKuA5ZLGBRqU4jWCf3c9sKPSGb+tbr0Ow4toC6nBslOAwq6h9SpopxRu/6ymb0GFfy8rOYYxrmwqoH9QM+GcWe2VL5BY2576MCDjEfor1RukWYXzendXCed9nFVCVneZyhScbMjscDlYIVvD9K/hsoEGmT45YvZOS6movW6r9X3rHB68EDY1MhnlqtReqX1IaSAXlLdxD6M+sOAQKSgxigqfVOUm6s4xbWvqDjrWKnWYfFNXA4140KY2QuMqo7btZW8TGHSnVWqA1vb0QuunJ02K77Em88i8aT56XtprzTrD+mxtuXVX29KOabz0szBU4GMTWLb3D499Hf83ZPRKyKWsVz4WLG7eS2WuUm+92isVG0ZD/7nBFdHp9w2Hv7yx8dBZYbCxjmnrsSJmwBr4LBrkr0Q9IkDFkFtcuGG/T7t+cymqt+1NXCSCasG+xZPNQLFg9AZ9aY+EGahgg3POC4SmLrYNvDE/NiG1dbKvglJFcAe1XRzvWbbaLfHgmPjOgnQGgc1G9a5767MAXSG9O9eC7mNvniU=","authorEmailMD5":"f0e7c2d0d5d83c928cfcfce66928160e","message":"Thanks alot for your input, also great work on your book. Of course one of the times I really wanted to double check it i have it at home 1000 miles away from the office.","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"41c3203e-fddc-3d39-b306-212c781fec93","date":"2015-06-03T15:01:01Z","timestamp":1433343661,"authorUserId":"disqus:dotnetchris"},{"_id":"7ca88b7e-62da-3b91-bf66-28346cf67748","authorName":"Morten Hartlev Lindhart","authorEmailEncrypted":"nTYG35fCI/zWXSXA3uENSHVvmva8chNSG1lk/ape2OsJLOfVJp8ssdntFhSV4vF6swEfRfAJ+55ciHDxcCIAljP0r49y6gtDd/arl2x27HVBNWsPM8DoIRchUmKDcdEaAQ3GqLijlTHFi4bEZlNzzEtEIjtsjzmZRCkTrClX6Yyz1cpd/sa9m02XgIdoZJ7I8yWYNMlqJrZvo3SMYJ36r5ww9yhXF2Sfqov/U7jkgA2Y4zbb8WZm50Jrg0BP71n3W7NeuTQjabn1Zkpsd0O7LYwlleX+kt8cAOO47rHDy5+lQaQILXA3EPUiy12tEN+gHYux4OI2tGFGxtKLVAQkY1cj76oNQNj+w8OjyUB6h0pAeSawGWmv71R0538Wt+6+j91OOfPif2CDSx68t9TKuaumtRrw/ek21c9zubhAboHLWyt3MMgQhpDoX/cENLjVvVS6lQGj7VRY4IDFyYvQkQBt/oSdC++2UYAe0zaFcl3FsqG4h8xOwSMIDYtumFbcK5NZnEq9xixKqe15DQuzPZqgm0alfAbNFnMxBDl/V7ZzP/kDzJguF72VZNQTZlnndaOOFAVSAM/q07CXF+BBiwsKp9Scu4H8NoFaN6lUoryI6bVeCpyuT7SfJKtBiF6zPzwx61UYwP8V5NlMau2a6dvLCYATVi42+E3uVXmncLE=","authorEmailMD5":"cc0ee0e44f61f25ee49857e1cd93e00a","message":"I'm a bit uncertain to why Task.Run is used, since this uses a new thread. Wouldn't the \"right\" async-await pattern try to avoid that?\r\n\r\nThere probably is a very good reason which I would like to know as to why the following constructor isn't there:  \r\n/// <summary>  \r\n/// Initializes a new instance of the <see cref=\"AsyncLazy&lt;T&gt;\"/> class.  \r\n/// </summary>  \r\n/// <param name=\"factory\">The asynchronous delegate that is invoked to produce the value when it is needed.</param>  \r\npublic AsyncLazy(Func<task<t>> factory)  \r\n{  \r\ninstance = new Lazy<task<t>>(factory);  \r\n}","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"","date":"2016-10-31T12:44:42Z","timestamp":1477917882,"authorUserId":"disqus:mortenhartlevlindhart"},{"_id":"97856346-5792-3560-834b-4e777b86c1f4","authorName":"Stephen Cleary","authorEmailEncrypted":"AAOD9vomKQGLvzYjh/NCyhgF27j72YHBdqtvgefu/ZRCP1FvkoIhd+Xg/XvsiKUgBnAGGWqex/GriOxgeFYSFvJvxdt1nFJaMnFaOFLttvhiCwvb0VRW9eORejyhBJyzVXqUrJjBWXLitgahs1q4VQDtuFdLja6YeEUFohjUwYEEbmz+wM89ffsrHlJzdtg+DcDRBOr8927XbISpN6K5Fl7poXkUWiInnVhJKVy+J0pRbMFGRssIj88cPnLe8LVbNluKUbEUPPfXZRZJ5ms1V6vYRIeiIslQ0aOTJsRngbxKh4RIgrjR74IkdheUGDbhoVxomW1IAxtdITn6D1rOpVcSzykISeInI5y1lpXGZBueF7VHzlEmNahh3eY6/QjvbsCSvtOVEuSn9hPvCub0TSAgqdCwJjWABdpTL8PmF56RYGWyOqwmvIaOYZnzYdUm0emoT3D8vFfmUcpHeKxcsX+HcXNKfSEmYa2cQV52YfHT/kfGERMp4Y8XDWgRs9EvZCoB2ZJX3SaEEfzT0HUsv+TN7/HCreXDxGjmBaoPIDYmhdSs/NvtIA+hbWMtC6lxmJDkQH/woZqYZ9d+KIj+PkUxHC8BwG8qz9eczza+RM+JBrLGdxOaIIjrjyEHB0/M+buqcjXDuAsZ4jBqL+rGG0Tm69j+Vt5Zeof4WQIHGns=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"The Task.Run is just for consistency. In many cases of lazy initialization, the factory function could be invoked from different contexts. This *could* create a race condition in some scenarios where the factory function may run on the UI thread *sometimes*, or on one of several ASP.NET contexts. To keep the context predictable, it is always run on a thread pool thread.\r\n\r\nHowever, this is not always desirable either. So the current version of AsyncLazy<t> ( [https://github.com/StephenCleary/AsyncEx.Coordination/blob/master/src/Nito.AsyncEx.Coordination/AsyncLazy.cs](https://github.com/StephenCleary/AsyncEx.Coordination/blob/master/src/Nito.AsyncEx.Coordination/AsyncLazy.cs) ) takes a flag argument that allows you to skip the Task.Run call.","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"7ca88b7e-62da-3b91-bf66-28346cf67748","date":"2016-10-31T13:13:50Z","timestamp":1477919630,"authorUserId":"disqus:stephen_cleary"},{"_id":"902dcb3a-8935-3d8a-90b3-76917704e4f6","authorName":"Anthony","authorEmailEncrypted":"Ybz4JmsM89cUakz5B0uHiypmle+Q/EjaWk7/A2V3x+0w6SfQgo8D3mvw2FQVrRO6C7AoKNe1etkDOSfWJpP5+zIck41w3Ld49F7lHOX7HhP1aMW6IpZZRkNqraHhFGTa/cvGk1HynvndtcBBAArFLttn/JDKLsk2F7RX2miLQaeJ1jeenM3IBtGA710gERMinOJYHLOOTBwD2clfjYV87tFBmcG7wPhCV4Q9s7HCoGjEXcSxiqo3hPL7yV+eeZlpccqj+VaBXsL1mf3NXx1SpqqbaZA8hK1MlTB/P9Oe+5lmfKPEuHyGIfJj7PFnhOHUaIpx9oSTWSlZAK4KBDvfdymcAVJAw4youXueJvLbfZKCsQJ+cy6PSRVaZ6xqi5nY73HnzZnGWsS+A6v8Jv0Ogcgp7MUHst4jaY8yyIRmebDJz6Mb6ky0H3kVrFFzY58YygN7glADwUXIDw4KqhpQfSbnYRlopsSfV1vOon/5nFVzY0bFOD70IUiLQKJFY7HI+0FhEOO62TLih3n8XltV/VFfSKxKCtQJuIOLJ20LB190rANNM3W/zdQjHt15OAsZ7gh7PPg83F6E4Jbz7S9zTdrL0a+OBrKLO6opq7oQn6FIjViX1z+lpEE9MfXf/q2KITU676ow5SwiXTSqZYfv5h+CTx7juUAtxKdO/CJdock=","authorEmailMD5":"93a2fb94cec652062074c28dacadf2fc","message":"In the most recent version of your code, there is a mutex to manage concurrent access to the lazy instance. Why so? Isn't Lazy type supposed to be thread safe?","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"","date":"2017-03-12T20:27:54Z","timestamp":1489350474,"authorUserId":"disqus:ahocquet"},{"_id":"8480e4a3-c37b-3ce7-97d0-789d2e76359d","authorName":"Stephen Cleary","authorEmailEncrypted":"XCcM0GEFMw32mu5HdE4dodTJS7PaaS1qyYvZ73z+RUSm+kWPprapmzvd4rcBGi3Qb+Cg5Mw3jYu0ZZqxuenf3+zaXl5uaosMecKkUfWD8S6mIgcfj6R9L4w2aV4kNA2Puid60KeyBu0BJgIiGNi+3+PEtJWP7gM9uzbF2Rk8ybvn/pMmHPQSHho3vlgxeJ4CNZ2M895INfbGvvkBuBq6f0LTPqVgHu1KNMn1tNxuoY632ys4GbNSyJGBJBX81SzrkYK1SYyNdFEYKXZEiUwAAfYzf/Hz/3HAYDVwkCXIKIth7bznmliz0p0smpiMibAZ6Rw9q8Mltivqeg5GzytFAiZbuW9Z6ligGhzExxGAV9OVoeZLhbOhPcNnd5XjuHc7tgEK4qECqJiQEAW2o0YZmk7O0GxyR7DhGTlcjU/FD90IRmZX9orRIy3XMhNgjRpM1aByWJXU/gSpodHrup5yOQgLz1tHey/r/b4d56NOW2BkWhWv2KGmc/bvb255NsuyhLIXAiArjdSYJq4Up3vlJ5oQTlgVqKI3ob6YqVXiWyYXjzNUeBD5hSAwQDVrnj8+8uMy5lxjj+U22werdUL2ReXWGER+oB7smDoPswbZ6fIVpJNF8DUANsBD6UGsMHXXqgPSLNd2eMqBse08A2dT1d3Md9nAkRHdHgQPdjZzVXg=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"The most recent version added a flag to only \"save\" successful initialization attempts. So the Lazy instance itself must be replaced if it fails.","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"902dcb3a-8935-3d8a-90b3-76917704e4f6","date":"2017-03-13T13:38:05Z","timestamp":1489412285,"authorUserId":"disqus:stephen_cleary"},{"_id":"3a872801-35a7-3a73-8dd9-f0bc420fa8c2","authorName":"Stephen Cleary","authorEmailEncrypted":"krbQGrNowteFrGUd9E1A4XIlpngvKtyT3tdN1I1cW4MrY0jmG0bxOH3lA0R3UUoLZl8+n7tEwQ0AS+jwJOpMrdB/oPHs79Qdd/kGEponMQzKy306qs4O75MIZQohebt58H9qG1SOcKXLyfEdtMqsd3hNgX5q/3ATIZys+tLX4Q2REYY76vJiUfdMTxPkYz95ZCl5U3oqnVj5n3OntBpnb7pV8F2X7KIbOEHlKc2D7A1URsD7GLhNqZx0Gr2dznXpTCxHiKVDo5eDJTrEuk0gTbE/Wsp1hbHgOVIT4Qu38pbX4oLn97a2gPGd1niuTEoWRgVWX3t6redGEWF5TqhmcbY/7LpMoe68Ty+DYzR+vcX+G5Lt/LMLNrAIdwbomiJm8xQYwHHaIpTKUvGwfm9IS/TAnITdBnESh8iDCGflBsTHH5n5T396rphzoh+GjV0CTB6jz5EZMGAhshkYTRjE0YZQDC2qDCaeyW9qpcpOBuGf/uh9rAO0fHUMelmI5GdYIlR7DiMDDqdII5bzXNyC3EQcY33mAalKr3PKHCfC37R7VC0MBTIexyR+US3TuZtWFaHtXioj6IhvyAdFjf+6eMxhHa10KJ6K5NTTwbto+dzrGCOfJuivkze6OmBYqjKyFHvbR6ROBKquhJ0uEF3UuEFhLepx0qqzHLUZp8a2sig=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"If you *never* want to have a null return value, then you'll have to handle retries and whatnot inside your factory method.\r\n\r\nIf you want a single null return value but then have that mean \"recompute this next time\", then there isn't a way to support that - yet. I'm working on it: [https://github.com/StephenCleary/AsyncEx/issues/91](https://github.com/StephenCleary/AsyncEx/issues/91)\r\n\r\nIn the meantime, you could throw an exception from your factory method instead of returning null (and have your consuming code catch the exception and treat that as a null), and use AsyncLazyFlags.RetryOnFailure.","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"7842025c-1d44-3d38-8463-36acc819cb57","date":"2017-05-29T14:47:23Z","timestamp":1496069243,"authorUserId":"disqus:stephen_cleary"},{"_id":"7842025c-1d44-3d38-8463-36acc819cb57","authorName":"BastiS","authorEmailEncrypted":"dawV2ViUAqX3KLMdf1Xufb4727LRYV+ISGZl5a34D6yeOB/uDSsnxYBf643WlmkSoGyzN4626+YeSkwSlXFWUbZh9o/Wq1z1xKbx+x8c1hhakYrropIJs2kF8ddbiLgQAM1s869hoJC4+b2Q1CuI83FuVzcHGvN0xJv6Iblhg3psom2Wc5cGXwEAa9jvUxZLiB2azEV8fmKkHX4DFRNFZb+DL17hH6OA7FKtSNHmhSANhW1rWi/1ziLcKR/j2JxJIIBvMYJCjVF4yYhNz5pLpfFroiSVqhcPannYtmzudQzWDK4ilmyDJZbNPv5Y2KZ/HnYqslM+x+SZafnvKwpcrmSj+tJ2DaixZERI30hUmvLFpx3sVSBtdUAuL69aXcsMTgQ0kfq8RpYNrHEInDatm3ChO6+G7X2aAjRqhGw0M+z5vA7O1sDjwFDQiVJDTcVBowWx9m++2HWxsrZNkM+Y/9/zJeAw35lndWXkDAqg6BekfrYOJfbBFPoXO3k4PyMySeB/PksLXSZ56m3zlZMIlt5nEM24dZEc6SH1Ul2CoTRqhv/pNiSS6f5WM8hkgfSY7ldusfL6l6eq2jaCCoQZc/mEDWmKmAw9DJEHXZWUUirp+cIBATxLAFpJnbFWLAJuGuB3B3d2LErwTzM02gfBl8pJU86O+o79DAlyTghYwmY=","authorEmailMD5":"871743a29f2406548acaa83c1722a81d","message":"What do I need to change to run the function again when the property is queried and the return value was null? I do not want to accept null values.","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"","date":"2017-05-29T10:54:37Z","timestamp":1496055277,"authorUserId":"disqus:disqus_NhGpW5t85b"},{"_id":"10b8ad1b-4261-3eeb-b228-25aa19d7c7b7","authorName":"Stephen Cleary","authorEmailEncrypted":"X7jyOkXDPRMttRKXWlpbVae8sfbBOt1RBKpIa9Den40DeEpt9zgYNW1SVzB16zXXe1nKNKCnLvyqrd9idSHNyx8K26Ab6sjVahoJ9WYVvBjFLcxVNREBo2sRMA0gzuCxsWLOf2Jzrg11oS/kdsWGSHp+x/QfeqHj2qBNGo9hgiUkltJYStfWzuT6qfg4SeFt+ejebOAES04aokkbQoSyJ9T72yhGnBWkyDX+Rr6mtD5uyoRSRbTmrGXGXenQzkp9It3BeTfJUeZxJl2JHu5Uj1OWd6cKHKb0xFnsQN6tOh8XwQAe9WAuoZ36l1ttz35ioCKdP/OhJgS9ERqb3dnwcAMKcMdCCIf1Hsq6qqo2WKo3ob1/8oh/AgCheAuNFHZY5HiGNm5mapVwtBigz8sF2wXsyF76nC3W3hI2NYeU8xAfrF6ODLn3s0SCvv0svJNRyC8KKJx2tQdDQ+8Ad4KSpJ4JQhwOxXhzBzllF0qOIFYczX6gGi3yckzMgKeVsG2DvX3fhv9d2q8Y2MMVQpN+SAI2ijJNjSXCZh1wxf6vqMqLMqPJwJZiG5267MjFgzpJ7whv5e1ri10viXkISUEPFHPaRG2dk0x1GmsG3QlSHmAy9dRn7+XBpAlEMq9lH8cuuMsVNR9LTMn7E/HM2WilWC6GqiyqIOqBd+fLSshCZwQ=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Ah, yes. AsyncEx 4.x supports PCLs, but AsyncEx 5.x only supports netstandard (and those flags were added in 5.0).\r\n\r\nEventually, this will resolve itself. Microsoft will update the Visual Studio tooling (hopefully this year) so that AsyncEx 5.0 will work with (some) PCLs.","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"f30915a3-0d33-3a62-8105-cb8e8ef0c4f9","date":"2017-05-31T12:13:54Z","timestamp":1496232834,"authorUserId":"disqus:stephen_cleary"},{"_id":"f30915a3-0d33-3a62-8105-cb8e8ef0c4f9","authorName":"BastiS","authorEmailEncrypted":"K4CWIjoJ20vRUsmmDxpdN8AKpwAlCrbo4BvFfr7LSVSBghyOD9Z9WhxlEdmiU3FS6QGe9RKi+osylUxJ4LWzHuNNPRXQeOnJV9LH6j1PCCXl2bALU/NMTpGAttZ25wMcammTVhsvc2zqslYPnLjD5s7fLgqJhfZt4A9p/0u7G7WV/53SdnkA3NZo4o7FtcIBYLsSwWtmYz9JIzlCMmtNfn/z5ZXZXZBpfZ/qX1jmo2tTl77UMxIE5Zjq3aTNcKD5s9dO32k+d8fUM3b7Eca0ZXvnn4tNH8FbVKGZ2581plzOxDvP+lWQvggyNp1g62NMIPpHeCJiTZIPA1XI7o1nBwJzdYZ2Byv6GWdBfUp+XuAWqHTQiuUaYjURea8KVdMXHTDGuCl6Sl/FP5lNuYzUWvaU2EGlRcHYyhw9FqCFrl3jKS/mudGJJdeWXnvAjONfv6S0LMvCjhG7Si8wRdWPFDhcFhFVcj0lkMpg3uzHtIzmAu4ujDFYh/fh5u7Wiiqzthc2tF1u7kdErFFkWLUgTTAjnSADojbbtVVohE26uWDpcGH/leA/PIgST5YvfA8MwXmAabfhpa1HWRrSQJ/XcCA+EZmR16TWFzpghl63kOpzYdH8vibCSenegzPCZ1vHNwp/3QD8lQp0JcOiZisSR3By26llb0kbhwnCf7OK3X4=","authorEmailMD5":"871743a29f2406548acaa83c1722a81d","message":"Thank you for your quick answer. Since I use the above code in a PCL, I can not install the Nuget package Nito.AsyncEx and therefore have no AsyncLazyFlags.   \r\nI will try to get the necessary code from your git repository.","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"3a872801-35a7-3a73-8dd9-f0bc420fa8c2","date":"2017-05-31T10:35:58Z","timestamp":1496226958,"authorUserId":"disqus:disqus_NhGpW5t85b"},{"_id":"072b6467-5adc-3582-b275-3c20ce884f5c","authorName":"Stephen Cleary","authorEmailEncrypted":"nr3LSHr4GnXKX5Tk+m8INSrs0oxZ/vkYFo8aA8Bg82ARifOhYDjO4IVFvpZ+u5I0lZ/MHtyCjgINkt87lYgcUpK/tEQNCX/XepQjpCl9J6Uzy4OTGiF52c+sDY9TUOSyRYoqp58ZAxLFx7aD8jFQqQ2PfuWQQNMLS2FA6tudda/uhFE+KopygZXiFTaycDiIo0vMPMGaWzbyi4QLd7FsgR8QPjIt19I6R64Wn2u81YdQljnKf+AJfpM5zWCn1QlsYrUi5r9zgWHHSd8n5DQfnCImHFN5MQ4wvO57BF8TSjj6exx9YUnfWP8Ev/2j/YtTPof9CEm+1irAzB4Gs/0f0m128WAvX6gBYNj+buOq3lW+45PZjgwxc/5NCUFg1EP8KEodPmaFC1d3gDmPu2h8V6GQi8yONkUYfDpu65lnVYzrkG2VAuuZNQTTmV6i4ZxtIgb5irE8E0Hpzr0tRSWERr6mJKRkB3tsFHFOSVqKqmarcrLz69cn7yu0iZnrhUIGr+h5in4pTngr/E8V3oAcK0udMtSXkFukZQuSGXa0GV1QTHKhrIUN+dcsnXAZENo939vnbd1ckxFe9NKA3sWcoO6U4H66zOA6WncwfC2f3Pf1zPXiQU9dx9tw6rCrgDrQzRI7kEeEk+EP1WZdHkQl8DcTdAvK+e3EjeTLUzh1AGc=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"`lock` includes a spinlock, so it only blocks (and thus only does limited pumping) when there's contention on the Lazy instance. So, unless you've got contention (e.g., a bunch of threads accessing the AsyncLazy for the first time simultaneously), it shouldn't be a problem.","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"7646841b-dba3-3259-8efb-715bfbeef7a0","date":"2018-02-28T18:36:09Z","timestamp":1519842969,"authorUserId":"disqus:stephen_cleary"},{"_id":"7646841b-dba3-3259-8efb-715bfbeef7a0","authorName":"Nathan Phillip Brink","authorEmailEncrypted":"Qs0yFduvt0xxDnsiDv5LjGVGG/xTo8edGrI12WEl/MqqH+0OTyHemAdxl4qQtTMDahqBgyhjLersF4TfX4OHkL8QMfN7viNLrNc9CeEWpHoa2jy1u3CWIzR6MBxrgJP5uTe+fXguzd/SWi9VrN2s8ntlolwSnlYNBVo9j1eHdUOZaqI5RMcMf3khDRvVIV5XNNcQ9aRR61nvoVmVqFys6ANqxFMoMTEOKUtM0nIQVF+XDGKE7j9/6IhS4Fm7QMPRJdvxSwZm1vagXn916kwm+JnaDOAy+7mhaD/4VkSHmJAWRQ/TW0HbcbajN3BX2XedkyVUjilI4NPJ60KEkHQajawyW5jgBbtd0XkMZt08oPsz7fD5hz1dB/x3sHVli+NBCv1UhbPQu4dwSvHift1OCQKrbMaiUXuU0x8H17PYXkC9rfPJtQchvW0z7FcL7Hl/A/CoshfOEaX8uKGqmmmX2tI3rccaHMbeq6GCkbh92Un3+hJ7Innu69oU4NEJU2o7mb32vcClhNVAGNOByDqF6Gb7xSoGM9byUwHvAHLUl86r5Vbc49CcTnQ7tAvKXcQ8fRVUhznX6glM2nRqdsVvC1qPsuOG5xoyDDT1mtb+69aX0tBbVb6OS7Ber24lEiwM+/s9xhXCG283MVQyHljHeEUeUuP4OeqdOR9hDTrAUMs=","authorEmailMD5":"a8defe14b1c80bc2bd59a1fab3848cfb","message":"Could the necessary synchronization be achieved with something like `Interlocked.CompareExchange()` (only replacing if the _instance matches the value it had at invocation) instead? lock(){} is “alertable” and can cause issues when accessed from a GUI thread: [https://stackoverflow.com/q/8431221/429091](https://stackoverflow.com/q/8431221/429091) (yes, I'm still using winforms, and I recently refactored something from using lock() to using Task+SynchronizationContext just to avoid the slowdown described by that SO question. Also, I’m still using an old enough version of AsyncEx that it doesn’t have that lock(){} in it yet—and I don’t need the feature it supports, so I guess I could just avoid updating too ;-)).","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"8480e4a3-c37b-3ce7-97d0-789d2e76359d","date":"2018-02-28T17:57:55Z","timestamp":1519840675,"authorUserId":"disqus:ohnobinki"}]