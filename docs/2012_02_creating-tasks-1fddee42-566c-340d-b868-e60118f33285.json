[{"_id":"dd32bfda-b064-307e-857c-bb5942492ed7","authorName":"Stephen Cleary","authorEmailEncrypted":"L1WwHfzgPBcvZpHM4BA2Ll+YR4EgW9YBuiyMWTCFExcgvG8ucXuTZgJvXe5asubOEuygPFX6f4TFov9VKowLyFYV+sYWRdtSpBFuSOKKD4nkj5y+82QnAuwtMRt31p/IgdoWXhAWMJycnuamKIaMk+x3s+HqEf4TUm0paggw4VnMOnjRlDZbNFdNlFFH5nwj5KsY5rfgN5auir/fqcbM9ouCjy+S5st7wWM2odbbb91CmgQKvB/i8vPaif1L5O5wH4rHrv+uwxmGzzPY1p93S8NdmfmsKuem5KuXE/ZLgnWL3jmsSz1P23wgx1nQQbSl1p0pwCyg4eohJEiMdD7pQ48vOG4nootM26u20ZTS0OpZOOvYFdWLL0usnE03Mmnpcoa0DLlU6XnSE0KxLypkZ99VH+4gnf+HnZ3dSuuE/EAdMGmiaivCk+Joyuik7+yGIsamK0tUaHV2d19JI5iRzplD3N4abAyG9PArocD5lgPEhJ7ZhTKBKGF4P6wOYXoMRt4sPWLfAvMy53Gr+4szHyAk3sGtokKTGePF84iyosPdQll44P+7byNwSkF16D9dAdiVWqBnzGnzHecT4aV1wSuKxNYjRPfAQuxrVHZYfQwTZk6zO9t6QPLQRNcoF4Y38DHoRCvjuyE2IDTKzXD0O3voBEgeOJw+stf3fQJH/cg=","authorEmailMD5":"36e44ea0274d8207eb632c566e60ecc7","message":"Yes, that is what I meant. Fixed, and thank you!","postId":"2012_02_creating-tasks-1fddee42-566c-340d-b868-e60118f33285","replyTo":"","date":"2013-07-17T19:25:17Z","timestamp":1374089117,"authorUserId":""},{"_id":"e8f2f9bf-fb94-32ed-95fe-bb5b5d4e06ab","authorName":"Robert Lee","authorEmailEncrypted":"l57A3wO1qMHwpvfrztF7OQTbu6I/3KdmBKBMcVy013/wSxk8q6xq/y/YqnPA6Hn+DC6ncHcHN55F890vjhaUEcvzPyaYZHP/bJnoRjKTuZ75g/jVP+VStTstxcnL7lEhsKJwqLJLQAiUPfymD4mEH50rmkexAyZiHqxfdNOynWwxIU6jGMdhK+DiGV9jUS77N2A9aCV4SPlVVLQd3p8YzgHtilyTWlnGrShTI2ZYMiyA0aKOq5Gp3gAmUbTVtIKuz79NOihDrWKsHCfxtcI4jWT2Jv2wJUcRli1xa9Qf3xKdUDPa+sTvwlvQl85RmnLMcLcSLE4Aja5ia0CZrbLy+O7ntJ4WP0FuuVLorcvJewAAVQMWQmNkNhexZaB/fOnn2vdcCqQZ8+A8OMV1vM0fzARJb8ML+tEosApcBYG4JC9IVF5JTMoNP5WI7YrAzlvx41ENeXZPT2l/x3LEWotOu8Q+Otsw4KVBGa5aHRCf1XKrD0FrH0Bbo9qDpHYBtftMCbeQ4QlF+OIN5NSx28UuOAxnBe3zs+sbMjch0IrLM3SVDpd2Hxy1wv55adIeDl3fU+yFhHzmzUkVKwU1biQMb/WhfOt3mGUnXjBktjh1AyXycQAur7HcCfwOfG7lm+qsqIRKN9oMRPeCfExwan8fN32s7w03xk9Hy0BzRHDxHmU=","authorEmailMD5":"31915b8c2f2c6b70409f7867e00e5f78","message":"\"ThreadCompletionSource is thread-safe\"  \r\n\r\nI think you meant:  \r\n\r\n\"TaskCompletionSource is thread-safe\"  \r\n\r\nright?  \r\n\r\nGreat post though!","postId":"2012_02_creating-tasks-1fddee42-566c-340d-b868-e60118f33285","replyTo":"","date":"2013-07-17T19:11:26Z","timestamp":1374088286,"authorUserId":""},{"_id":"323d6a2b-04b5-38bf-915d-9b90b72fa527","authorName":"Tien Dinh","authorEmailEncrypted":"LZuWFpMZ60+D3Cp4jryYMXr+RdwhsRU4pxwoYkoqy5Rc2ltvjiZvF4yLF5SAtCwaOz9NCRadGhXzJJtU+0+/G7JloEkL9CyrLv545Wv1aJxw8eT8S1vtcydCTZb1nax53bRkS6hy16V54L3ZK3Ey38DGL5+gJAEfgDeskT9sZUqsBXP1AR0oAAxygRq4Z0y4VFD/Dh+h1nO3QRJ0Igas6M32832G1miydwuAJBXHw3yuC7enQsRsO1mQv8HloW6wpBz5ky5V9k0aUUy6QEDdFQxE9LIGILPBzBKs61RDg1icYbAkHfWmqdF0VNwJwonTaMyWy76PJ/q2akrYMjpLy9vgNFwW/Ga2cdnul30uLeNT6nr+XluCTV5PTYoMc3d7hcUs5Z/aFrUr46L4GV5jrWouqV6ZHLyd69VoEPf7zxDAvLD1T4qNvmGPdQxPSgiqRSgfNR7Y0qcaq6YFc1zhE0fCWv8tmfb/O/OPcJBcAgLS14ruiRAQpSCe0VkgwG6uGVGZ1Npa7AYrpcZuGN722O5uWl+HWHZCS0nxAkNys0yOqZ9ICm6lS+Xp7XXJMPLk1hTTL6IiO8sHyEQdX+bWDoZPCFvgZRTxrWXwHuZaGaDMYzrc1dYHWa/hjRBnw+jy01xAwAe+PCaNcyXfgqx7OB/fRLDlgFOHzYGZmOFgCxA=","authorEmailMD5":"7dddfcd6919e98c51de6dec1e08bcd08","message":"Rather than use await Task.Delay(100) as a Task creation, you can use Task.Yield()","postId":"2012_02_creating-tasks-1fddee42-566c-340d-b868-e60118f33285","replyTo":"","date":"2014-12-18T06:02:24Z","timestamp":1418882544,"authorUserId":"disqus:tien_dinh"},{"_id":"8cf4d5e4-6312-3096-8843-5542c8b7f891","authorName":"Stephen Cleary","authorEmailEncrypted":"Hvh5gmU8nk9a+MnV1oBWTWTKH7l3c3OEIS27aHykPQC/BoWfww1mxn8XtrCcToed6gOKfT1R+MNAtahPIRHaM/RnvTJnHEk2f6Pmo00cR/HCtpfcZXL/NaNcAuyQ2H3tYRSLfs3URCDe0Y29hqlGpNVO9o1XaPDdZCXgdCHhxKKV77EDdpbvHX2rlnrExjyARbbgDaw5IRZ3kTmjbGaC2bT/PN3ogmqeAvI2ypQ22ZVmVUgq3iXtxUGHryZsftB6s1y7IL0oU0PERLJG++DEOv8gh6PazBxaAs+bYszu/bbeSTzJmeQvxW0uxYR4ksMvPts9SCgsVUcr9Rw1OF/oArjLVKItyNcK3o33DRULgEZKgVZdAWl6wQCEWmtUU5KI8ugFC9oxOOf3Coq8hQQBVBqWZr0lsU3XQm1I9oq4UTMS6hbMWl5L/0mvf172JrGbRr4d0McnZRQPOWuiHtFawkqph+WjV4V8xZgApWVQWcjxvoDeyWVwlEFZ8gAroQ715cY2QAgJcwspEC9x3rH3YSSqq3gNA7hBrbR0eWPlrlWHEStFf/a3WTQAxBudO/WLl90PE/u9iRt2wyfGT6oWzvc6Hd2gIgqEUzDNCJcdmxVQdB4buD49PIF2lWslJLDLetNdfvZfDSj9OcI0uYd6zDvXIkUjN+Al8qPDNDNVN2w=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Neither of those should be used in real-world code. I wrote \"await Task.Delay(100)\" meaning \"your asynchronous logic goes here\".","postId":"2012_02_creating-tasks-1fddee42-566c-340d-b868-e60118f33285","replyTo":"323d6a2b-04b5-38bf-915d-9b90b72fa527","date":"2014-12-18T18:01:35Z","timestamp":1418925695,"authorUserId":"disqus:stephen_cleary"},{"_id":"a404d5bf-c3da-342a-bfdd-d224f7f80a6a","authorName":"Stephen Cleary","authorEmailEncrypted":"Vb/y4te0eshoEjcWzNhyjcgSs+o0bqaoUPVKx4ObKnZxwftuydgpFGRNvzPsliVT3IEvHGj7SLN77Z0/qnEN7ZOP68ACBR4IPIgjvjGjc0obr2PhN/lhnalI+18gMnADY5ePvIK9zoaD0S9WCKe9v9bbzWlL1upKKROfq/AZiBOtdRS82llgcRyGKBG/efibkCU96gUe9J/K/57ZRHYEeve/6ISX9NrkIMYo1z01m9HMMQsT2d+Doaq/CG6Nntz8d8EcUL+EEH6rplb4fAA9OSokgb3cH2kn8fLOTuJoSNNf9lPFe3mCvZFzjobtclta/z/E9pIZqnEt9wcgAsrRceRV3JtWVN+MDP9q/FrrjQTowktXJ8C2H0myph2WbA/Ab7cr/4W3OtenmK8ct4RKsun8OU1eGkQPmlsOWXmZxn189IGhTKa6DFjYuumN6OxA2mizu8YsuK+469R/He54wLOVzMP4UH6xIeXq6iTkWxshMJ+fgj3R6RdCROBXvKxVqTNfHXcQ5MPHRB7uHzsX4vKPqgTPK2WaWht4L+BrfZeGcEOdqDjgkJpBWgjVHcSYheWLzKepSjUw8xbzHSoJxZa4Wz9Aawqw2rBZarVPidLVx45G1wLdOfAtNjQhk1haK1ivMbRyiGJ4GVdRbmPIKVGMDIxM56tDm7XYRkeBj2A=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"If you want to asynchronous wait a period of time, then you could use Task.Delay.","postId":"2012_02_creating-tasks-1fddee42-566c-340d-b868-e60118f33285","replyTo":"cdeb4bd4-6ac3-3a1a-a881-2204e4d47e7f","date":"2015-04-21T19:15:03Z","timestamp":1429643703,"authorUserId":"disqus:stephen_cleary"},{"_id":"cdeb4bd4-6ac3-3a1a-a881-2204e4d47e7f","authorName":"Omry","authorEmailEncrypted":"naVF4h7TZpCFCKn9tp+qxIPgpT6skTIZGrOPdcLe0fb335wRHAK1h8aG9x9k2V4mIrwcXm1roE6RWqKlMZx5BbV/HBTaXicuNXzmMQn9CYRTCBXpXlFl986LtEyfewo0UWTnhqTxdHNi1mTXziFcF6/HGLAlc3M7uy51Veatp3jiEY4RmYKPXLZH0zm1+bOTgjFMW7M3G0yNRLNBW6N8YBRUrhELF+PihycejIqO7TPisxbBTbLXjtIZgSiLBiCScbkZfYy+HLUZA1IbGN7Cb9qFkXeFn9/6g6Ha/9avqX/gopqSlABXwMCA6QRdfED3G8XLSefSiEyUbIp6F9JN06g4sxBPDWWrPNyIBF4o5p4Q1QqWimqHxAortR/uETNewVCTQ+Wx51K/kSSjR7lXm2by7Da9tntA3pUzFp5b0z4vj1LUMz2gJmRfOxvwFp+HREEWrQQ0gOyvw5bQAY4fElL/ZZxPLslkbjraAucj6UIqWlBJji2wI3AlIefx/5tLC3l7W9HXYKB6H75FdV9U/e7/89zYt68vBB2mf1Spre67earg4xSx8LoqKDCfX+eqeFInyWdACIssOLVx5KmiEM3iQoRA7YYM87gY20jib2Z8onFjekQ/mKGvjt2MlFuYEAVLSpEdoZ0eINiYWdaKUzFNflWSB5scMTCV7cQfOBA=","authorEmailMD5":"f629d7649631df73d0e791b854229464","message":"Why not to use task delay if I want to make a call every 30 sec?","postId":"2012_02_creating-tasks-1fddee42-566c-340d-b868-e60118f33285","replyTo":"8cf4d5e4-6312-3096-8843-5542c8b7f891","date":"2015-04-21T15:57:44Z","timestamp":1429631864,"authorUserId":""},{"_id":"b77aa9fa-60e4-3cd5-8380-1bb3875f1b52","authorName":"Stephen Cleary","authorEmailEncrypted":"YWkUhtN9ynNmmY/7bdTSadQuYIcMU24OoQDoJKJua83J0EzY/nCM/fVsgP4fBubgU1LNlcTVwfPk+enNKdoMrEX/J0GEJndjTOCt7ucM8G3BGpY7jJ9X5ouEL5qanRGioNdGPim4vSGvkRNKHIN8Msedry4XOnerudRHV3+o9CD3B+jyki/A+F0bzk7VBskt4pGQQgtvzzAts6jRRqpOZUXB0/AKF2sEc/k+RTSL6+EwQYpgRj8Vc5PcNc0yoWAPCweowbjCwv8iogWzdUqXEwI16U8FGpALrsGVIz5wyLGteB9FU0nFRsxWZsiEoY26G5TthZY2193wW3BxhdO+r8qH1yRg/Vo2huLUUo+REvutVrIg0K3TnORtG2x6QexIzT8mqRCXLUMMfr7jW0jLwTty8mtc2/BFCtQbTu9jifpzLHghQ3h22yZRmJmmYEOvHU94HGC9YIMgrhGc9Prx+Ja7X96xh5bQLeBBDOe0P1CAs/piyQCA02WWM3DHqOWWJnurB/52/4b0Wt+7qsmknWs/l0q3BDNI6Z1ExnwRPjAOjLbWF6XprI3FMdgWrQL/HvKAJXNEds1js3Fvbrpa3Gj57YfYwIFl7EqGxs9gqebz+jC15maRHsJ730rWMYX962xFwG8FIrDhfYRinaVnDSULjAIgsrmvk4IYveftx+0=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Then do what the error message tells you to do: Mark the (calling) method with the async modifier and change its return type to Task.","postId":"2012_02_creating-tasks-1fddee42-566c-340d-b868-e60118f33285","replyTo":"e0d8bd91-8c4b-35cc-949d-67dc2ff6da77","date":"2015-07-22T12:14:13Z","timestamp":1437567253,"authorUserId":"disqus:stephen_cleary"},{"_id":"e0d8bd91-8c4b-35cc-949d-67dc2ff6da77","authorName":"Sergey","authorEmailEncrypted":"tzjU3yfhKkL7x/wdQi1azJ8ao4oDIpQY+VrwdClmfie4D/oqtkBqke/nJcfiXbKadxNIHS76RIwruKRaM70vXKmMwvYmiwsGHaVFq6vKjW2hCwh8IXJJ9IVXISVmGzqVC71YWVUi4uIgqn+x7pOj1Jbo8oEFVHxHcuXnBVwESMJUiyFc512RmTLK1sP4xz3orf/sYFylMHBo2G708EHSWoZxCbk6Vf00COdGnZj0Jzn1/PionPprQ4BpAGNPnBLpvkh+xW55FYzp+Vjhn0GtjOA9iAeuZynnL0Pv6hrJCzDtIDMQr/xPrGSfQwoFo8mTkNoRTpzcJorN5YTrAw5RlcB012pqrB9esq8k/GQ8aluMn6kzg0yTMqH4gs19fKRJV/TDMBt0cQaA/gBa033ttjRLZMQFbl8K0s/lyB3WNMsdqEIpmXp3ODYOOOFC2B/potGjQBfzIGTesK7iCcKoq6MvkKhOlvvxvI6ijFKLykQEPXgJJFPF/lA1cgf4aRYwgxbvHEhFd//CFaTBsXdmAXRiJpuGiKMP3e1Pllk/77WkaYpmMnDpBUrkNsnyYjXaZ8sAPZIYYtOf0lxUQN/4MwbNMWuRmViNFP/6ELBtpUo/jYgqLQximQvW7X6kCpAl/cS+GXBqGMUSvbYAGtBMDxlSTH8ncYB2Btw9BZUgEv8=","authorEmailMD5":"a55ce85d84d6207834d97b08b84dbf85","message":"When I try to use MyIntegerEventAsync with \"await\" I get \"Error2The 'await' operator can only be used within an async method. Consider marking this method with the 'async' modifier and changing its return type to 'Task'.\"","postId":"2012_02_creating-tasks-1fddee42-566c-340d-b868-e60118f33285","replyTo":"","date":"2015-07-22T11:13:45Z","timestamp":1437563625,"authorUserId":""},{"_id":"ff350dfc-5a99-3975-b0bd-0874f4a028c2","authorName":"Gilberto","authorEmailEncrypted":"ZyFedM4tK7fjeV2UfiAThMkRKxvsM/CtGkIOdTdIInvNbe7GljveT2CCfRIUnJaMSyzZ1cLKMBAteZEHxISZJbp3DvfAiVmxtWGQaHPKUI4Y6T/jvc813My6n1SDFpF77DsQmD5G2A3gf7NvKEX5Iw5HSLXaqtLDJRaRyu56kBryxbz8rS1NlKUJd/EHxKqQBWj9RmN+gZlbLtuLgRCz1FnGz2YLmagFZsHAIFeur6ch9subzQK7CeASE3pxCkMitfC+2iBiN5rYLIciHvusWe8bH3jKROKXKUkJV+vFwwuR/PJ5ROSvZvZGODsX/+8L/3HiwBjmdk/x2bU/lam/2Au1+G8ufGrUVeTZiJeTbKUea9K/k/4rxthho2u7Rj1zyqO0pOq3znEITPsOfBWwAKAqAwKlyWPuBnyuESgW7/f47rwCNuemd+kOERa8lRgRrpsWyXp5kvTRoTjSbaN5Cf/W7J4LkmJ8NDNnEa4WYcIpPYroEqQGb23EZmyzlEJI5buHi6ICq9NyoSqvXTDhMMDXy+ZFlgyAfsEGYplQKzA7yjx1+dL5D5g4bL13GhVwiXEikpBK+U1LOET8KvXlrHhP0O6Sr0JfB0zR/b4bAcpjWz+ewJGgp7hEJCGmbR7O66RrRwluGbQxxxAQG4s3zyp4AEs9N8xKCMSFD2RvAtU=","authorEmailMD5":"ae536c1c0bc292aaca19574b58587ff1","message":"The `await Task.Run(MyThreadPoolMethod)` sample does not compile.\r\n\r\nI think it should be: `Task.Run(() => MyThreadPoolMethod());`","postId":"2012_02_creating-tasks-1fddee42-566c-340d-b868-e60118f33285","replyTo":"","date":"2015-10-02T02:02:55Z","timestamp":1443751375,"authorUserId":"disqus:monkeyweekend"},{"_id":"2bde06ce-ce7e-342c-a45f-7908ed26a480","authorName":"Stephen Cleary","authorEmailEncrypted":"Eg9c/g/fyKql/B+3MP7wnEoGjLSPyrjivgdSLEiOOHHrxchut8pvp+BQpyuK4SrcN03AV+wulXoQ8fEoIJUNLku/wyox0GuNhjdesjFWe2v0Mq22PBY/o4gqpXIlUbUAcvcn4f97q49WQB8C7WysvSnFV/jrmxtlEK95D5h1YaeJaHmhbRnWHdtDwqCGO2ADdI5jP+eB7wI+qZNykUHHt+1cSZovEMqV8iCri85VIuzHoRDkKUnLSCM6QSbDEOJFMGyVpJfGevyf+fKiVh1iozEBaHnX6Uyt+ERlkgjjURiBy2AhXEAR/ZiJJg5ghlXeDfBYOO294Y1oLmFnrnBJFfPodT6eVBGGLoUQxeGS9uJhxZXFlB5Sj8jC1v1Ei4IhEjCMsQdJxgE2LntNRlMMOKXTs56Y73KKdSUu3i8/iwv0eg0YLODD/u18Eah3Y64XDIzQ2ul5qUsZO+OzCKi1sZW36LxsU4we7DhhTo5wkRCNv9wRoSx65eVa3Tw1VrHUZsYcPse5lsLaFZ4vTFPqIr5/ieJ7apzc82fFPw0ucdkmQ5i8jLevvmm6plI6PYNR8aFrHMf9gMT06VrwJ5Zw33LWAQan514zMUwey0Hd99RnCoamdi2AoFZRIXhcenKEflZhFLaztSZAn0hChE75GZ4BY70t4ytwxuVHT54HPjQ=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"You are perfectly correct. It's fixed now. Thanks!","postId":"2012_02_creating-tasks-1fddee42-566c-340d-b868-e60118f33285","replyTo":"ff350dfc-5a99-3975-b0bd-0874f4a028c2","date":"2015-10-04T13:06:51Z","timestamp":1443964011,"authorUserId":"disqus:stephen_cleary"},{"_id":"7b962676-a123-3664-be68-cd670a77c7a2","authorName":"Fiona","authorEmailEncrypted":"LyHFbhafyhMhGqOVqyo0Xu3IilGElETl+E2IIIUy1kp1j9cHt9NEKwpD6Z3mmZX70PXuaKLdI4MpmnwX8fLCBbPCrS8YUoV3luFEJilrXkM2faqAB/IbASAqlQdsBDPTEo6Eh8Znk5owbsAJfV4dKc0Or0BI0QUra3b6SsoL3oQglhMwcPHmrlS67jSbzcmcd7DnYBRNEzZsfoEidT1U4sPliB4jisWV1BMIYOQPJWMTczHO8JCqq43z5ZAH3TJdUfcU1wCJYdbNXp54ClBybg6zdT/r2S5Iq1Vf3IpV6ueSw6cWw/8tXJkhU5DWiqWuPUwxR0Za4jv0zhxEo54VFM3ZrhJMZ+SCgM8WQss/+WdE8eRR5ME8YTYJDvMCztCUtWIkdxZd5LfwF0K1a8+LicIfDcyqapAAPsBqzQsSF+Zy45DxwNCvmOG07JJ7pzhJRpAzSEuBLGcN2MLkaDKXTWgvYZBXya/r5M+Y66J99TKEm/NmZXZc8C14mpwqkeNNyB8NPywB0ItSRZqV5dn4lLGrkQLh1JmrUkVzrLRDfLXBb55Bou0vGQnfg1LGlr469eNTX06xKufMdOByR6wPm2yFif1zpQlIcBmvtPWvYY/8FGzzVQxg+88qynA0G3kHpFN9GC1xyyYI1sPGiJ6b5T5CtMyQyORtPSTHY3LEcKE=","authorEmailMD5":"2acc0293cdadcda24791c0fbd8be6c50","message":"\"In fact, Task.Run is just a shorthand for Task.Factory.StartNew.\" I think you have another post that is explicitly oppose to this argument.","postId":"2012_02_creating-tasks-1fddee42-566c-340d-b868-e60118f33285","replyTo":"","date":"2015-11-24T20:16:03Z","timestamp":1448396163,"authorUserId":"disqus:disqus_4WnuRt9ngP"},{"_id":"12c76b0d-0a41-3957-81d1-2ecd3dd26539","authorName":"Stephen Cleary","authorEmailEncrypted":"WcIt3XoGTqDS37dRv4sYH2pSp5Fd5seJ7OhcMRp5l8HH3E40J7fI86PHIPuAiu1F/cRAR8nNs7Eqh9wP3SPOhVd/VwntmbFjKuhRQv7Fm7i7EGE3DUo2qVDE8Z5mxEgVFbUFz1p29oiKOM+CbaA6nSclV7YKX+42/+X1DXC1a+ZdunG3qqir+RKEmzpZwb/8MePIUTBTI6S+8y8uHLFRKxvILx2HZY5pFhfIKzBypro9k8XpTP/GaT96iyjuNbSQNL9+1L0FuFI7CJXBWDLGAZI5C+SZ9RsfJSOrW5vsUYBhzMDYidQelJJJOdlY5QjySX03CKaPN8qHDyc3n+vMH9hwV1pvf+4WIhA4tAtxZrOxoQxXngtVB9nxXivv/r7YQNCh720bEBYnNG5vpDjdD8bZwEUNl1q5XqR1G057TvbMoWFUimIF+RChuizxofefNT4ftJDYQpDFZr+PXSbOVevg8CX2YJkJmR61NUok7VdLtJd/i9cCJ+d6MfSaBnjycMDU6IFgilDM+eqDFVbTxf72CwHnNCLnhQwIil2TKWPQMof2wUm73kpjWBw4P+df00fiP+q2vEgoPYKjdHpeFB3PV+AU80Zi+BYs3tHIWQ9Ss3vd/uzXgz0h2JdQCWIFSsxSPPqxI3FpJo3bVOEBW7QyCGsZTVfogXvdwbjnUMM=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"I believe you're referring to \"StartNew is dangerous\": [http://blog.stephencleary.c...](http://blog.stephencleary.com/2013/08/startnew-is-dangerous.html \"http://blog.stephencleary.com/2013/08/startnew-is-dangerous.html\") - which says you should use Task.Run instead.\r\n\r\nThese posts aren't contradictory; they're both saying the same thing: StartNew is a low-level, dangerous method precisely because its default options are *not* what you should use for asynchronous code. Task.Run uses the correct options.","postId":"2012_02_creating-tasks-1fddee42-566c-340d-b868-e60118f33285","replyTo":"7b962676-a123-3664-be68-cd670a77c7a2","date":"2017-10-04T15:47:58Z","timestamp":1507132078,"authorUserId":"disqus:stephen_cleary"},{"_id":"38ffb00b-cd4e-34d9-8493-dfaead61e012","authorName":"PassingBy","authorEmailEncrypted":"eOIPETS2ahUklW+HloAz4StdwIR+eIXmNuJGkw8fn6hnhfQFNW2KcrXgETBbm1xFhf3pr8/N7TGKhaTyVqPkglxwDPpoWTuKUX7oRBIu/3YQElvX1pWJmfnGRLEVkJGWlnpwGPeY8fF9GjLRcZj3xjCapd1wms3WgzDE4sgFzdbaKGdsD6J+ntfGRkJGXgpTFF13eIeS7SW1YRPJuc9p1/DRAmoB3PVcuR5mFBgYHAlUTr6/e9F5LSol81KcJluesr5khPl3agC1+++0aGW9kFsaGYvzSn0vMlaK2oUbXGftA/sBGRGI9ufCWjzvVJROrL1otWYxKuoy5c4MglYaPRlhFubs7AwcNHK143roCcEcgre52S5SUESwCzj+RV26IR3dPiZW0CY7fj8aYTE1Bb+nClOd/emhqtZjsC9ss+nh+A6rWkLz309EvIiBLkHtZmsSwBh13NoIpLmyfINW277t8J3BTjeBSeeFkoJOWl9+mZNwH0NadLPu7SXi3gTKQd05AQeIF3eR6vWN48grmkttIMc5sm+TW0OapEti3JbyUJlCZSEvDxHvzn8HJXOBwdc/LnjJKh75VP1nQ4q9LeXNCMPeUfxsNERhfngt5Cbw6oar66zMWQVtQn30hupQuyiHYWB2PQOMEPro5EFlPWeNeYqDDwdkIhdL4LuItHY=","authorEmailMD5":"7303b498db923f32f44778477daadb2b","message":"Hello, thanks for the great article!  \r\nNow, I'm reading below article together and getting a glimpse of the difference between event-based & computing-based async operation.  \r\n[https://blog.stephencleary....](https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html \"https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html\")\r\n\r\nFor the 1st event-driven TCS example, I would consume the TCS.Task with TaskAwaiter<t> in a main thread which is from method calling DoStuffAsync().\r\n\r\nSo, from this, may I ask you a question?\r\n\r\nIn the other article, you said that Task.Run should be fired in a main thread for a better efficiency. When you call 'DoStuffAsync()' and get an TaskAwaiter in a main thread, on which thread does this happen? Does it still fall into a category 'Conclusion: do not use Task.Run in the implementation of the method; instead, use Task.Run to call the method.'?\r\n\r\nI'm considering below two scenarios.\r\n\r\n// Below is an event-based approach  \r\nclass Program  \r\n{  \r\n static void Main(string[] args)  \r\n {  \r\n Console.WriteLine(\"Hello\");\r\n\r\n TaskAwaiter<int> awaiter = GetInt32().GetAwaiter();  \r\n awaiter.OnCompleted(() =>  \r\n {  \r\n Console.WriteLine(string.Format(\"The result is {0}\", awaiter.GetResult()));  \r\n });\r\n\r\n Console.WriteLine(\"Start Non-blocking-calculation with TaskCompletionSource\");  \r\n Console.ReadLine();  \r\n }\r\n\r\n static Task<int> GetInt32()  \r\n {  \r\n TaskCompletionSource<int> completionSource = new TaskCompletionSource<int>();  \r\n System.Timers.Timer timer = new System.Timers.Timer(5000);  \r\n timer.Elapsed += delegate  \r\n {  \r\n timer.Dispose();  \r\n completionSource.SetResult(42);  \r\n };  \r\n timer.Start();  \r\n return completionSource.Task;  \r\n }  \r\n}\r\n\r\n// Below is computing-based approach\r\n\r\nclass Program  \r\n{  \r\n static void Main(string[] args)  \r\n {  \r\n Console.WriteLine(\"Hello\");\r\n\r\n TaskAwaiter<int> awaiter = GetInt32().GetAwaiter();  \r\n awaiter.OnCompleted(() =>  \r\n {  \r\n Console.WriteLine(string.Format(\"Result is {0}\", awaiter.GetResult()));  \r\n });  \r\n Console.WriteLine(\"Start Unblocking calculating\");\r\n\r\n Console.ReadLine();  \r\n }\r\n\r\n static Task<int> GetInt32()  \r\n {  \r\n Task<int> my_task = Task.Run(() =>  \r\n {  \r\n Thread.Sleep(5000);  \r\n return 42;  \r\n });  \r\n return my_task;  \r\n }  \r\n}","postId":"2012_02_creating-tasks-1fddee42-566c-340d-b868-e60118f33285","replyTo":"","date":"2018-01-07T09:31:48Z","timestamp":1515317508,"authorUserId":"disqus:disqus_dyYQnhsWs6"},{"_id":"e3298318-0f99-35f7-8caf-e7303fda18e2","authorName":"Stephen Cleary","authorEmailEncrypted":"TFjb8wpRo9FZuYYkXUH3ordeiEiNCRZbduNxNDR4twlnhZOv8XFZVHCxcQ200v/FBaqlGaNhqSr3KLDITNyBk0svpIhh1jySKCDd1sI8903+nxrGJ9rdbko9EdYaQAmjNR1yhI5VIBVxJTbr9fpH94KlEdWXW0c6mYWKm6RPsXJmiOObHpL4W98I+INxdHdz1ghe9xuFV3vbV+CrNHmYReUJ8y/gGFJj0fvZIebbCAlqPBrXnHqG/CIrhX0ONZ94nGK9CuNtOzv0zC+orjSdppLQzFMXurvT1jSYuiKhWeIeHpBjDckFpOIiYP1MDEZ7al9/X2gJ7K11443pLItIixZGy3eHJVtOTSoWJLswpSPqkCVwPzGa+eOieacA3LMR6ookSLVGk0j4XcfMVWkcr3kPkGQRPG3PqYC5S/JDOn5wkV3O0VCYNSZibbBNxbEO5D4AgHbtg2mXoBnRXyq3CPB9Ts28vt7NzrqTlZ9bdySuNpb/yGMOEW9KLq/4DzvIUDVImnuAlsz7i+o1BDYIpM5i5pp8mjpvZ6pKMXzAjrnWvnSVohKyVonNnYF0hc5br2KPd9t2SVh+CbNzGtxe2cGgUYsvvGaIDRFo8cpeu8nHJiLdCVoErgjr75aC1hiLSBj+wegwTkge9rjoFTNR/ifRMc9A1n7Wgn7eOPjLLOo=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"In real world code, you shouldn't call GetAwaiter or OnCompleted; you should just use await instead (which calls these under the hood). That said, calling GetAwaiter (or OnCompleted) is an extremely fast operation, and it doesn't matter which thread they run on.\r\n\r\nThe question of \"which one should I use\" comes down to what kind of operation you're dealing with.\r\n\r\nIn your first example, you have an event firing off a Timer. This is similar to the way I/O works, or other events (including timers). This is a very natural fit for using tasks as events, so wrapping these events into a TaskCompletionSource is a natural approach.\r\n\r\nIn your second example, you have a Thread.Sleep. This is a synchronous operation (blocking its thread). So it is similar to the way CPU-bound algorithms work, or any kind of a blocking call. If you don't want to block the calling thread (e.g., the main UI thread), then a natural approach is to wrap it in Task.Run. Once they're wrapped into a task, they can be await'ed just like any other task.","postId":"2012_02_creating-tasks-1fddee42-566c-340d-b868-e60118f33285","replyTo":"38ffb00b-cd4e-34d9-8493-dfaead61e012","date":"2018-01-07T21:12:48Z","timestamp":1515359568,"authorUserId":"disqus:stephen_cleary"},{"_id":"4c0a07bb-3a2e-326d-a7c8-dfc344c14aa0","authorName":"PassingBy","authorEmailEncrypted":"hocdro5mg6UIg8IH0qkXGvd86hRDvTjKeDz61VSvAaWf8QXCS8S+Y0uC2qAins0VxDDnYd+XD8KHWql4n8SXQBfti5Ro5uw1XIG/kM9Okcjqq0vX+Pxt1MtmNu5vDaeZmEayJ8M4QmEs/Ph3B8azTnl1mF2QYKnLchA1471359Esgw+nMhU1p/4MI03y42/2p3Jr3hN8Yn+dev4DIJOFDuWtVXFkHDCuosqGYm/Dcf+JSTXKpFJHnpL4FRuSO1yCyjDJQ9j9nG4hfnNxYPo4rrMtgI8wsy4/6m1SlzzC90jH/fm8NK+15g7CRB0pnwIb/ka6XbulsREm8BA7oCMjRsFjpRiEwMmAJssBrirBL/q9tOydpN8FVzLaYiukUVPgn0mQCsM9QcPLF46IUUaTcojx30GkZoTf9dtyRVPSvYf7w6zkmdjjrTW5C8/Z+RNbkWIu+PNE2OZUg0WIDdAWfhrvtEf5AoXpf7cErQT4ZzIZ4WDzI3lBF8qDteXIOelZunNoOv8oLgx6e2Gl8LTXc/986aOVLTe+D6NHwuTpSY2Cdp5iyh2dgUvnhMHU9QzosNzgjYr/o2W0upO5zFa1t1LcbL6AGn6RjBHgCpMLphQf4Yo7KQkdpB9Iq1dxnxR7PdRyUs1qmA0b+B7NpAXMmxF116lOwFSI9WcDE742dvc=","authorEmailMD5":"7303b498db923f32f44778477daadb2b","message":"Sorry if I made things complicated making you to spend more time on this.\r\n\r\n1. Target platform; .NET framework on both Windows or ASP.NET. But the reason I wrote 'Quote 2' from one of your posts is to back-up the 'Quote 1' ==> Implementing 'Task.Run' in the other method is not a good idea.\r\n\r\n2. What I want to do is not a specific operation, but to understand which one is better from below two operations  \r\n A. In the main thread, a CPU-bound method is called. The method implements Task.Run. The result is displayed by Console.WriteLine inside method itself ==> You said, this is not a good idea\r\n\r\n B. In the main thread, a CPU-bound method is called. The method implements Task.Run. The result is returned to the main thread via TaskAwaiter and displayed by ConsoleWriteLine via OnCompleted event ==> Demonstrated in this post. You said, this is extremely fast.\r\n\r\nSo, I'm comparing these two cases. I expected one of below answers from you.  \r\n A. For Windows .NET case, both methods are okay and extremely fast. But for the ASP.NET, 'Method B' above is much efficient.\r\n\r\n B. Implementation of 'TaskAwaiter' on low level is different from just implementing Task.Run in the method. So using 'TaskAwaiter' in main thread + 'Task.Run' in method is much efficient than just using 'Task.Run' in method.\r\n\r\n C. Actually, both of them are same. There's no gain in using TaskAwaiter. But this is a syntax sugar.\r\n\r\nThanks again.","postId":"2012_02_creating-tasks-1fddee42-566c-340d-b868-e60118f33285","replyTo":"df9de61e-665b-3def-9d4c-24e5daa3a1b7","date":"2018-01-08T07:22:07Z","timestamp":1515396127,"authorUserId":"disqus:disqus_dyYQnhsWs6"},{"_id":"df9de61e-665b-3def-9d4c-24e5daa3a1b7","authorName":"Stephen Cleary","authorEmailEncrypted":"DNN9RJM/wq+nXlD7yvVSRE73oREq4fRj6mwPIEs63qC5xCPDqtkZYSL4spl4ofO48mLmYdPl5K2yPd6NkdLp1hezSBGDSsDsUUw5eYBgMBwZgc4LoYfKZ+UjUfxW0WhWQjIwnMUJYsWpJZSsoGEARhax3B/I72Ag3d1EKp1ZO7agjJ8PAOTMNb7zHzRssr4w9fY1m+hsSq8U7mUx5r+y6+X1T5pC+WmsvtvKJ/48xaK0sVhBI35+efG6RvE0lRBg4JFUC5p++3NCuETCTfEZoW/MN0qG8+/VSh77RVq9qXwD4sXlgxQ+VBcckE3cSyyVB5+s/+Ie4d/J/y0DY6+105lzTqvp4CAPsDI4mFBulgm81Uvuz6H8ziJzuzOL79UQEbYTwie0SFO7WM6XhcnKXnblpVfh0ShDhw825n5A7zBL58Wq90j5/a5tibHClMxcNBeour9GjjPyaNH5QSSdEizs96J+G4VKtiLT7P78OVddsBbfQRoMDAGx8EyMpnj6mXIVck854wfJD29wZbXfO8AVoN0LcD/jlHR1PclGE/uosmE5ZllYCzc8FE/UltX9sg53PreffuC+kfvazTIRRU+EpMZAEkyGMfZgKZtRuesNK+0yAPs8OI6GqjgZaScEGlM2ZSdlBi1Wl514sLxTJjf9h0VJg8qb0gcQrXAldoQ=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Sorry, I'm not clear on what you're asking. What's your environment, and what is the operation you're trying to do?","postId":"2012_02_creating-tasks-1fddee42-566c-340d-b868-e60118f33285","replyTo":"f60362c8-1cc9-3052-b73e-523bd698c962","date":"2018-01-08T05:17:10Z","timestamp":1515388630,"authorUserId":"disqus:stephen_cleary"},{"_id":"e2ec4bf2-f704-3137-b8d3-673b28b86de7","authorName":"Stephen Cleary","authorEmailEncrypted":"S4zGzME/tXn2M+uIp7Njt6DPt/U9eGjsZi2UMUmKfG3mfs744iR84UNBu14fTYo8zOe9tVPczh2WtphLJUQFgZPg2gfI1QFdXt7C8aQe4dt2cOiu2qc2tfV5kQap2Np/Nnils5OaII6r4VEmiga6taI6P5vxOHSL0KQ6vs7SX7Ecm5isXcIWErizrCJHuYSEHoqFJ2nnHwZkQNuKwdbIMRzids8PDs7+p/AQTua2mL9sfOgVaJoHPlmLb3CQcCQSB7Vdcrof32tWfDd3Cdq5C03p9CC6A7bS3LudcgOkcxHt1R1IWEcu1Pbwp11pVDWQRoiNt/LaQOFyC6kK3B2QIeSo2O3l390AN6OrmqP3VMAQ08xAlqdrsfXWUZ3Rje+mjM6q89rTztN6xBVSLP+V74e20AWunQ2/sDUZK9LxjHL2x3/0xisI+Me0mcH/4f5oepg0W2o19XYfgN07U2+xCIm653aDHH2TaLrG+BoQOj3Yn3GqNzypFIJyAgGqGmV/rkWRojdPNcp8pZbg+63VribhaAXr06g/3DeKL/l9bBAIN0A9qNdrr92WH2vGUQ5lWxKvsHn2dbsGXRxv5dsTmKLbiP0hibphmnLXMQPW1jxlEz+tRkVbJ57FCbyVGQCiXrhBI2YmFVvbA+kEKUvEHhBEipnPeUs2js15B6Naawo=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"TaskCompletionSource and Task.Run are used to solve two different problems; they're not interchangeable.\r\n\r\nThe shorthand guidelines are:\r\n\r\n1) If your operation is asynchronous and completed with an event, then use TaskCompletionSource. All the rest of these guidelines assume the operation is synchronous.  \r\n2) On ASP.NET, never use Task.Run just to jump threads. It just makes your code less efficient for no benefit. If your Windows app is a service-style app (Console, Win32 service), then the same guideline applies to it as well.  \r\n3) If your Windows app is a UI app, and you want to move the operation off the UI thread, then use Task.Run.\r\n\r\nJust ignore TaskAwaiter. It doesn't change anything or help in any way, and I think it's just making this more confusing.","postId":"2012_02_creating-tasks-1fddee42-566c-340d-b868-e60118f33285","replyTo":"4c0a07bb-3a2e-326d-a7c8-dfc344c14aa0","date":"2018-01-08T13:30:35Z","timestamp":1515418235,"authorUserId":"disqus:stephen_cleary"},{"_id":"f60362c8-1cc9-3052-b73e-523bd698c962","authorName":"PassingBy","authorEmailEncrypted":"sC2Gc8PlZ4U5H8pZv11d+V9/7XUPvq8L/G4oQ+IJCVYuPL2YcjAlSfMSEk2oHNBuQbylurbnMsZKmLCDa/qhFqr/3PLO0uoUFeceHa8uiT7TZJlgX61kgbAcWiyTE59bIX7S8v718bYDohByAJm8Puyap9hnt7ZIcEgLercPsQaPuSC14fdPcsoXwqg2DwJp1xdsRabjgxCpd3EA+amt5w3yaDuKjC/QBaUGkUIprJ36X3v6ceunaJW5dDCWZeKjt8lF5G6P13YzgYt7YX662wnxteZ6jr+Df5jwla+MJrvB5RxdsUvEJhbp4OBC1RDhnd2dNfETDSotYDTk4Z0rPuQ3rjdGM0NaszQwwR29duKMw6+ozmxqV4/8uBr/cPsj0nNW9XaFc/MNyqSbK3fOoQuFZ/RhdUD/Q1Fo4OitwiPB8q9gfYhBL/KvF2yW8aazuB4RpMc+mYnNzLggAWODQ44X0igCcb+k/uLwvQi8n8a1pzxzlDcZSG2b5/ga0rm6M8FVThFcI0/XUiMaFi1d45MtMGbes259rXwEGBBjfa+vohhzeaAPzPomoiWHa1FpSxAeW/Qj+yhv09BufcXGCMP1PniMGmHgeKY2zxFquIz/xaqLbJol7cXksYMiSQh0CJDMmvalOmzVQRfJAqabDHbWHS5jfBPWr96PvTMobl0=","authorEmailMD5":"7303b498db923f32f44778477daadb2b","message":"Thanks for the fast reply. I appreciate it.  \r\nAnd you said that GetAwaiter and OnCompleted are extremely fast operation. Can I consider this that it is free from your old statement\r\n\r\n-------------Quote 1------------  \r\n'Conclusion: do not use Task.Run in the implementation of the method; instead, use Task.Run to call the method.'?   \r\n-----------------------------------\r\n\r\nFrom your article again.  \r\n-------------Quote 2------------  \r\nThe request starts processing on an ASP.NET thread.  \r\nTask.Run starts a task on the thread pool to do the calculations. The ASP.NET thread pool has to deal with (unexpectedly) losing one of its threads for the duration of this request.  \r\nThe original request thread is returned to the ASP.NET thread pool.  \r\nWhen the calculation is complete, that thread completes the request and is returned to the ASP.NET thread pool. The ASP.NET thread pool has to deal with (unexpectedly) getting another thread.  \r\n-----------------------------------\r\n\r\nThat is, because I still see that for the second example, Task.Run is running in a static method which is called from main thread. And one more time, you said that GetAwaiter in main thread is extremely fast.\r\n\r\nIf not, I would just let the method be 'synchronous' for the computing-bound algorihm and implement the aync in a main thread with a Task.Run as you said in the other article.\r\n\r\nBy the way, thanks to your concise post, I got a new insight to concurrency. Thanks again and have a nice day.\r\n\r\nPS. Sorry if you got a multiple set of notification because of my edit.","postId":"2012_02_creating-tasks-1fddee42-566c-340d-b868-e60118f33285","replyTo":"e3298318-0f99-35f7-8caf-e7303fda18e2","date":"2018-01-08T00:46:12Z","timestamp":1515372372,"authorUserId":"disqus:disqus_dyYQnhsWs6"},{"_id":"b55b1a25-6f91-3712-82b8-c454951bd484","authorName":"PassingBy","authorEmailEncrypted":"sesKb14zFcrjZlP7SQTNG3a/mhTURsJgoHv6ZogSrp75M6mXMXrrn9e3opubNLS6Vk4fZmLtagESBSh4wjmkt5xX+kU56lGUzoT2Y7ayM90ILVPcbJpBaFN7Quti/WFT47OSy1R6moMYEZPd3gnogF34xFZ6PAuwdPzIgAyXrr3TfbRROlkqw/ibQq03SeK7Yj1+ju8e2erDo60pzVSuBtsv00xnaHzHx52CenDk874SYc8/I40cze2dqJZoqHER8u9WNUzTlHiSdslsTL/C8FDt7Ldew1z3cGcTyR8moRfF1p9Digz6vlripfjbVZHklTjdTAptMXx84C1GuyxpjqvEQ80dKcWqRbPIFzJnJMd6aQOcPfvb/0wM/60ysJsyamzEAFb+ZKJidkLqzBpiFshC+sVjPnfY9/9CiCQJtMCDbyHjxjlJl1/y5b5shjI/swJ/bWuhXaLawaB2l2u/Cvx1WRQ0jp0NcvUOZr4W3STTxV24WM9HvqAAVESRO0ak/YGOwHUZ79RCK80Yg0ipQgjgMj78QSuOrdyZ/IUXN9M2K9W+z1vP9edjgScKn0JSjgphMx6jCH0ZYUexPdR9j5eIEgVfJY5gu+lIBHaFyGujTSjZZQYes1SZhuDfvzgcipdEAgPbskZ/d/fG0hbv4hTTZShKD3oFP7sPShxeF10=","authorEmailMD5":"7303b498db923f32f44778477daadb2b","message":"Thanks for the reply in a such a detail. Happy new year!","postId":"2012_02_creating-tasks-1fddee42-566c-340d-b868-e60118f33285","replyTo":"e2ec4bf2-f704-3137-b8d3-673b28b86de7","date":"2018-01-09T09:52:27Z","timestamp":1515491547,"authorUserId":"disqus:disqus_dyYQnhsWs6"}]