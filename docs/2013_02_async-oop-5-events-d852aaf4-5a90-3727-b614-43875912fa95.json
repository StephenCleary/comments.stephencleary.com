[{"_id":"2c5dc456-f748-395c-8c83-2533ae9d6ef6","authorName":"Anonymous","authorEmailEncrypted":"XfsJ0AGIZegW5KlLq2UDrwzlWoCSTA+NtPTI8V77MPlg1+eSnlt8DSEK2Fxz1D+PR7jW1eeaKDSQUyDfNrUe9MoiEAwiFLOSmqdEutUPvG5WbVrb/bY/PkOhroH7Ok+RdocRv1anVmj3XTBnE1gP8+0pmhQSF9I+acuNiQ7zr5ZX5XDcITCZmMuj1dvBjE0S0o1/hX3CJu//8NwkgnknalNKolBvhmrCNtIEyiMeiuO+ABsKcYAAE020vWezc0BKFN8DBUA1JzasdS4c6km+IG4WBbjjnzGxImKB7IZIkfgw8eVNYRCOdr7efUPuK6qpEj5rZiVjEMJ0xhL/47zUvylvd0OoVJGo3ITjVD/4zz34qkVXLl1Uo/8tuy9KGGDxd1NOLrI0oQbcAV0Tpjk7FuBRHwJPYCb93ezqmOmU6zv7Uwhq1W1rIHwcRiJLhcOCE3PHzgGSYyAOUFiKyxKdEzPSPJzTlAsaj+fk+z8ae7VxYcnwA0xKoLPRKroy1YkY8HabpX3PxJ6J9YBgZrgAZihEDj/e5dtP/5b68hWpdy/nuuQzQCwfo8f3exc2yKsLyAhb3a8unPxYxm883/hypc9NwTSAxHiU3b05t1Y5BHTV2CT+P/Yt4qDvfvjt9HkHdKHxm2i4Y+xOQG5G9DehxFHAnmaHIJV2BzAkbLMbh1s=","authorEmailMD5":"3cb42db01b5edab948a576e1bf94a281","message":"This is further evidence that async, as cool as it is, will never be on par with sync code when it comes to productivity.  \r\n\r\nIn scenarios like ASP.NET, when there are no long-running handlers in play, the only sane advice is to not use async if there is a choice.","postId":"2013_02_async-oop-5-events-d852aaf4-5a90-3727-b614-43875912fa95","replyTo":"","date":"2013-03-02T17:33:40Z","timestamp":1362245620,"authorUserId":""},{"_id":"6e5fed67-0abe-32b1-b5ca-294c1905a341","authorName":"Anonymous","authorEmailEncrypted":"EiYyyE7DcTmWJgdNH5cEbpwtTmCc6/Hxadtu33bRJ+n+WKen8jOzEbE+ohoHj+ly5mt4IIYthmHCqAavRgc99FFeW0iDXgR+XKdvrMk29H4qylCQ/PftvFzD0v/hVxhmKm3PgOTGpuJ0GeXfWC0BS8Snbp7dSzDs4u7UUvvTe5YnRQNKXeLKk8RMzHVc7i5S7Qi6Gg1zNcIYPczBLebY5AcUkLelTq5WlSXfvZD4Q4xVGasUJDMSYTjwiohnjExGwfxz/E3IWObS80qOglFm/nX2dwZcxSG3MeAfIjYtmeR7jFsB01Oiu4juw6LTPxPsgvK6M25fZB45W6stN+MI48nGkb+CKV54rSpKaqS+qk+qEDiiCL4CZ2esg2Th7hKs75ApmBk+W+5VD+IEgQ4e4odSGGfzzVeb+nLFLp+mauPo1pfQS95FtR56UpFq6SscyxNN1Ij1TAdqKnyPSC4mTF3D7JmbxArIBRN+5o6MqUM1ZZeAlt78s+47VYjp3DeySFE9H7ugz/uYq3XvRo6xtpD91kogcQFaP96V4j8wp9XTyHwxtuL2TSNnfRiseID7rA9Wll81+An5o83A9eAnQ0bzrJknTuCauYFUrqFczJusShUAQbVKFAf7qIeejvLkQju160X/FjmP80UPbFMjh7Q9lo/Wkpk4sQpV250meIA=","authorEmailMD5":"3cb42db01b5edab948a576e1bf94a281","message":"I'd venture to say that almost any real ASP.NET application does not have the characteristics that make async necessary (and that cannot be fixed with increasing thread and connection limits to insane (but working) levels). The obvious exceptions are SignalR-style apps and apps with very-high-latency backend services which still support a lot of throughput. Very rare and in those cases I'd just use async for a small part of the code.  \r\n\r\nYour comments regarding events and Rx are true. Still, async has fundamental debugging problems. For example the logical stack is not available and you can't pause the debugger to see what all the (IO-based) tasks are doing. It is actually quite awful if you're used to inspecting a running system.  ","postId":"2013_02_async-oop-5-events-d852aaf4-5a90-3727-b614-43875912fa95","replyTo":"","date":"2013-03-03T03:16:39Z","timestamp":1362280599,"authorUserId":""},{"_id":"77f55974-6cf2-3e32-aba4-878974270492","authorName":"Stephen Cleary","authorEmailEncrypted":"fm5BCVwoOuNv9GZg9TcUJsNOJ9bH6ZbOFFCws2HgcY/Iu7LbCbrQZMkkGvcwd2UwynW0JJuqoiET+OxZ8QXTtqfbg88rpc5/e4b8lEwD77oqqMbq6iXkkUnhdccOLuTiF08h7exIj91x1pZ3x5jiCfW5hi0wA2x1ldfr5lwfxeSvAaWhXML9nKbxeuEtKvuWkS3t07jqUCj1QgqKZFTSHZaGfhjjK3qa7u5OFJjq6cwEyUk1OexqSn4hKhEvkGvrQL0nnGj8ucgdJDnUvpRGIvNcNPaVYTxoqnVrZvQgvcwEw/A1K0MWsvAdrxBfhzB5JquCKbMnFuOCUSKOZX/Ux3deDK5dhODBP/3i/jRLe/YLcy+FnxGiLDfiINohwsRmU+zzB9g+CbaLrjsPetnoikMlt/5EMdgWQn06d3B2rYIoTTk6AeLbSYYBEmBJGdtWM+nCm+s9YYMSdqT9mwZe1PB1ekxEDagQ6rCy8kR2xpLwHtKdBAjbxkAnz21n1/Ct8lULewSig4Rovf4uSAyvRPoLNAJlYt88h4l+m1LC6hD6dHSTBHIHMmFcXPRgEw7dl+UW0W012WjKVW6T7FJnRimnr/5QuUz+b435W9HD1OKepMedoyfu9vts5iMXzlCCkcTlQjFfosplPZB1i9GQnv3FVwLJ6ckq7lWooiryj/M=","authorEmailMD5":"36e44ea0274d8207eb632c566e60ecc7","message":"Synchronous code is the easiest to understand, but it's easier to create *better* (responsive / scalable) programs with async than sync. Event handlers were designed from a sync perspective, and that's why using them with async is awkward.  \r\n\r\nMore modern approaches like Rx really reveal the drawbacks of C# events. I think if events were added to C# now, they would look very, very different (and naturally work great with async).","postId":"2013_02_async-oop-5-events-d852aaf4-5a90-3727-b614-43875912fa95","replyTo":"","date":"2013-03-03T02:46:23Z","timestamp":1362278783,"authorUserId":""},{"_id":"e9f68741-2925-31fd-89e7-662350263c5e","authorName":"Stephen Cleary","authorEmailEncrypted":"WcUlYdGbh4A5I9WdyhWeTLP9m7SU0rEzhSeT2EvfkqjFjqD5TQzasnGwVxsGkCUinghxghiX1lPXGWe60v6T1KD+L98ldqYtqvZW/SpFo2o9IChWNRti9oXJjErxsFIN5tpJAfaee1h55I6HQHX1JJK7GMO8YugLyerrY3w5ChrhcMIG6Z/V9sdl9Ya6nPO5wfgsDjr9WLtuu91Xsxr2EVf3deHzZFEGU/1ISUwYCEr0tGRbMcjALcB+9vOzEFVbcvKDKJ+6m28EaMemNQ1JA+lvy7ClV1RMccbLSGUoCeUXMCGp8AW3gd7LFXWj06IM5KuUnXXeZEyBrsw1NOizdlZcKyVgzTDE1J6kvIpwJTaCwD0siiizJCJCNGYElMuzvuoZzqLngAsHJaSs3hq3UWyL3lVGIy/KWGtUr9aHN9cBx6U7xl2YrJbTuyIJRWapjVyd+P1QAceXyhZ9Ee1xTAsBnn+feUBMgRG0iUvgaaiRwss2YIPFjCgpA8PSEROQur3HV38zq+rCHuB1Ugamj0Msz4O23vjXM4u1yeI8fWvllK9H/07fSZ9TeBmc6/SuA23mp/XUzKH1fa3XIVxJtHdEIJ8UkrAm5nvOcp2oPqjTftDqA9JLq/1grxG08iaAfCFoLnuzCB4e2tyAfuEuTPcFPI0hd0TkP6YKqkQ/5e0=","authorEmailMD5":"36e44ea0274d8207eb632c566e60ecc7","message":"Well, it depends. :) I think asynchronous code is beneficial (maybe not necessary, but beneficial) to most ASP.NET code because most ASP.NET apps are I/O-bound. Sure, someone can tweak the thread pool if they need to scale, but how many ASP.NET programmers know to do that? And even with tweaking, async code can scale an order of magnitude higher than threads.  \r\n\r\nHowever, I definitely have to agree regarding debugging. FYI, there are ETW events that were added to track async/await. They're not documented yet, but they're in the runtime. I expect that we'll see some better visualizations and debugging helpers in future updates that build on this.","postId":"2013_02_async-oop-5-events-d852aaf4-5a90-3727-b614-43875912fa95","replyTo":"","date":"2013-03-04T08:22:20Z","timestamp":1362385340,"authorUserId":""},{"_id":"1edb6290-c28c-304c-b34a-62137ef58b42","authorName":"Thomas Levesque","authorEmailEncrypted":"nzoioJwz/YNe6jgfV7hoZtHzpdIb5QZvPmvyd+Wljqu2jQFnubW2RBm7jnxbDuW753RNBinSeJ1/KeHq1j9BzOLNWH6mwuvt7Q8WggwLyVs06oEt1ebxMRWPSspTeDxgtE2Ycx6pCzeoszXuo1ykqcq8mzy15X7muvmsvjXf4VoDNiY9Y76A9P3e4R/NghGd+qEFPIUOF008vObx321vCSbIfLOyZiCeEIRIHZCr9TcRKqAICEaplCG6w3Fa4GBKmVgp5KHMA8Qu81KucEjEb6PnX6fmIhDALKGAjw5Y6wv+dkmNx9Xq64tVQszRUEaIgSeigQUny0uGH2y8dBtuxfhkZGgb4Uhy4hT5WXsu3Qvhoknhc2bN3/Ybivi7zmuMkOfX/0PDbTWi4rBUoOTqGn+tNC+tg3y5UavNuyZvKY9u3IRD39lOnahw8GYSU3Aux6DrQU/TXqelnCChH2XKr/eBDFHEoRqdc3Yax2Vtiu3BeFC7Di9JPLVi8hUT3UKSvaI2QlEkzh1HDBHb2FiLREGi01J23xt86yjZDYw2DPO2eXNXMrMSjSCsdrj2uYg2ooqK/sazEjnq2PIchTVGEClTkgBNiNVEvaDsdKvM4t1PFaW/77xJsyY3PBy8iCQi+L9bQ0vfc7MlaIB1+i7b4GZBnycqg/hKnV0cXMLzfbw=","authorEmailMD5":"f9e09a438f84e6df0278f6ef56355783","message":"There is just one problem with your deferral implementation: if a misbehaved handler gets a deferral and doesn't dispose it (e.g. it wasn't in a using block and an exception occurred), the event producer remains stuck forever, waiting for a deferral completion that will never occur.  \r\n\r\nI used a different approach for my implementation. The deferral has an associated Task (created with a TaskCompletionSource), which is awaited by the event producer. When Dispose is called, the task is marked as complete. If the deferral is finalized before it was properly disposed, the task is marked as faulted, with a DeferralNotCompletedException. This way, the event producer will be notified of faulty handlers (well, of course it will have to wait for the next GC pass, but it's better than nothing)  \r\n\r\nHere's my Deferral class if you're interested: [https://gist.github.com/thomaslevesque/7325901](https://gist.github.com/thomaslevesque/7325901 \"https://gist.github.com/thomaslevesque/7325901\")","postId":"2013_02_async-oop-5-events-d852aaf4-5a90-3727-b614-43875912fa95","replyTo":"","date":"2013-11-06T01:55:16Z","timestamp":1383702916,"authorUserId":""},{"_id":"31a24989-3167-373f-af76-1043439edae6","authorName":"Stephen Cleary","authorEmailEncrypted":"rw+4Wr8Ndu8GzWxcmf9q5Nm0X4TYTntUUffJ7cxQEH97caTxHI89cQhQWjyHfNaoFdyl3kjY9g8EejgOOSxwKnMHCgnEGKYu7jS8ag1/kJkiVXg1YxXXmq3ql9gUUtj+lfUcX5kubv7t/SEcc07Oou2LltB0NGVhiPPIOxJJEidGIT02Il4gMZwzhc2LRbDf42xxGiRYW4nC/CfG8/7nPRtSVFH9fMVjlpr8zp3qlTYwzfrJgfbDpiFRJl7m34pjmJ+CzLWpJjHZdlo8ZKE11p5e4nkKYwCCB12A1b9IyLa6itc/oncR8XXfAf7OX8SFttRFj4Beo1RnKd/J1qwnUYWB/MIMfmdxLA+vG/Vy3oSa5CuQIKRlKy+pK8nIEollrD9HSvbGxVW9iDqu6RiSk0L0ygmvjcBA1jBW8jsgLWK0Zhaty+BqSAWOLBwv3ri5zoZLsYxyIcjsgcHC3Zz4qj4k7+3yfAUxIqZWpuzhQ8R6AcXyc0kLiW1aNhqa+JscFqTl+R0JeqA2NtSsDznBL+i4IwyGy+gczjLwwVBrktHDjvBBa6lboxLS816Kldoz028fox3dcPvqSRxR0JrUUu1wNQphtN3bDJFz6D9EfnrIU/w7/yL82DPSNNmSTddJVnZjSlRw9q5esUwO53lwaRBCrZ9wDCZUXYDGT+kgX2M=","authorEmailMD5":"36e44ea0274d8207eb632c566e60ecc7","message":"Thomas, thanks for your critique.  \r\n\r\nHowever, your implementation has stability problems in the general case because it accesses a managed object from a finalizer. You can play some tricks with GCHandle to (try to) fix it, but you'll still have problems at process exit.","postId":"2013_02_async-oop-5-events-d852aaf4-5a90-3727-b614-43875912fa95","replyTo":"","date":"2013-11-06T05:32:01Z","timestamp":1383715921,"authorUserId":""},{"_id":"a7819b26-b40a-3366-83f5-7ebbc31b5a39","authorName":"Stephen Cleary","authorEmailEncrypted":"JTSSSpSxv/qn6WTYvx0yvrd03IAOh6jYwmdqwg55+n1LdAF9axEna4TQYq+oEN7xZU/z9Vyrtjx556bptYlgtkwfydL29pXNzhaz3CQE/1qWtp99MNgbIJ2cGuMxhpzLHlEKkUh7xYvlS1B/nEjncaNop7i5xTDBfJ2ke0hGlk739iIEEbVE1Kfs/uhFD5iFzgFkFV48D+haGqIT0GuPJ3l0jInDGKZYNjgwQsFtFQuqqioVXGSgK+9x8FSc4666AiqVtxtmXptvAe7zDb79qqOBnvNPV9NJxhc6PIiGBthIMrZV1vgSByXkpUhEcgzo1j/p3lVP9fISA4zaqtFRJakZvqPRXoP3fV95X796VL7WBgz0Vwiyi1DDEThGTHQ9/oyUWqPvqRS9Ml3KqjdpM35pUZEPVBX19reSRViiYs05uuMfQ6aKMTohEk+s3MaQ6mHsRv62N2i6ToMoijnlCv26GhG7t5tCk+uqhPOuc5PIfXzfy1BoCO1agVTvSJbiY8ki1CBjpDvRFJKQw853q3jwOFmfR/yycnXTHNQFEs1fLhQkwlGuQiaI1HoMinT1l0qcKes35yB/fhT661huBhQ827UDPA1qkZcvky8L2cPn1w1fWNsgXuDnrIrdUOOadjDn9jJGevpJ+dioKiNlQqwpokYZj8fZ/81SwAkhArQ=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"If by \"async event handler\" you mean an \"async void\" event handler (which is completely different than any of the approaches in this blog post), then no, those aren't testable. However, they are often useful in a UI application. So what I usually end up doing is having all my async void methods be exactly one line long. They all look like this:\r\n\r\n async void SomeEventHandler(object sender, EventArgsOrWhatever args)  \r\n {  \r\n await SomeEventHandlerAsync(sender, args);  \r\n }\r\n\r\n async Task SomeEventHandlerAsync(object sender, EventArgsOrWhatever args)  \r\n {  \r\n ... // Actual handling logic  \r\n }\r\n\r\nThen the \"async Task\" version is unit testable, composable, etc. The \"async void' handler isn't, but that's acceptable since it no longer has any real logic at all.","postId":"2013_02_async-oop-5-events-d852aaf4-5a90-3727-b614-43875912fa95","replyTo":"f1874075-76d5-38c0-b84b-38b4cd980f29","date":"2015-11-08T23:17:23Z","timestamp":1447024643,"authorUserId":"disqus:stephen_cleary"},{"_id":"f1874075-76d5-38c0-b84b-38b4cd980f29","authorName":"Yehudah asher","authorEmailEncrypted":"eL+Ljs7Ry7cRfetRyIX8gn8z75Zl7t05mOhLc1QsP3MNz53GeNpH0SZ28hdAiITZ4gxW3K9K1mj/jT6agsjgWYIbZgYGj/IHAFoWigC4hYOTcuX0wOyvTv8Ync0dYPcb5T8z9c08zlpA+TKxN0DMqX7GyWnU2QvO6t9tS0iYeOTEfGH2YafNWRPb0Qtj65GLnqYkfkbFDBoITQJrf5k+Dh/Jcb1v2eJMq1PiZ7dkYuWs+UKcICmuO8ZxyxQitY7HAk09+It125ddPCBIV3yX7AZ+ER2Jsp5Hz5A62uDhRktRZr4oD+t6h1rWQb8W6jMLnmRNZaGbw0EU3ZeqV/SKGDU0SBgGB6Muj19X9ZhE7WQS8l8Pc+6UYplMVfD12V7aM0wz98vXTcjyp/+TKM4grXWhZD6bUcHQWT9X7B/s4IvGvD6matIbW0PvbR+SpAESyyFiV7730fTynBLnPFEKM1NBCNSfgF0xhaKiIZ0b+wy8qv2dyG9KMeh7jMoHVZbMn3t1/sdm7VPgYRfO94AVHtYjABlXA/giNo4vn/mLnYXIF7QJ7KmKPIIcTLkq8Zt66F7TcOTwsrJN5+XNSFX1/WQy0BofJzQtrOiDZEEXzIg1yqWU+9GhsVmqiOnRBUbc5fnDf+OMUed9515OnoCcAwiwx1lTLudUVDqO3HDABTU=","authorEmailMD5":"71edfc7956fbc58d379e0ddc2942b923","message":"Stephen, There is a way to test async handlers?\r\n\r\nFor example, in MVVM, some times the PropertyChanged invoke an async event handler. Ther is a way to test it?\r\n\r\nI asked this question here: [http://stackoverflow.com/qu...](http://stackoverflow.com/questions/33563587/mvvm-unit-test-for-asynchronous-event-handler \"http://stackoverflow.com/questions/33563587/mvvm-unit-test-for-asynchronous-event-handler\")","postId":"2013_02_async-oop-5-events-d852aaf4-5a90-3727-b614-43875912fa95","replyTo":"","date":"2015-11-08T11:28:55Z","timestamp":1446982135,"authorUserId":"disqus:yehudah_asher"},{"_id":"d1a5dd72-bbff-3888-8c7a-0753db42b8db","authorName":"Yehudah asher","authorEmailEncrypted":"naLUNnwpZN9mITE33X+6eO/zJR51PXBjgMqvC+hvbcZE9iCMd8xV81dXsZ8sho+NV4+xjOJEgNwHzKrEq6yHTBY7FQkjTx8fKHVDApe53Pbc2Kbp+7/rYSIuTxjzekFdDWs7m2T50cwkRalO5Fw/xWAI/4HlAbLYKsjqVkQbCBkFAihkRtzPngl0b2OCtx6EIv35eFjVM5K15+Hf4OelHcvVQWpAuAC9oy8xuouVGkE1J3e28lZ+7qJTk2zL7x2qGsIXlobOxZHjMq9273T9ULGvEkVUO7LVeB7k9dK0eEcEncpkojhVDDWFqXZmP/5DTlU/Fsnfib00BiifCvyk3C2KDxLghv1+SxihAGIIoaQTE0WdC4s3eHClBUGBTuxaLf4k/SyEloXgPvQGvdfpy6PaWpyCS0lOkJaSD5LdDXohqPPohmxxSMIiFpVa/HQ8CeGvm7XfJN6Ci6O/qpzRRwnagCQjazxDSv9TBG80TvVF79IViu7REIKB5eba5ek935jPjjztPVGScy7HRlZzHGJjJzQ/kxYXp/To4FoyOlZKymFb00TGS/34swtdVEfdW3d5wKLjhxFNyknnWHm2xFPECL/8p+3YmNjRdMLptZVrXpedK5NG4F1asUF2b3EMy5911KOKYysI4m4hNBZocWKW8CAXro37U6yNB1jKHLY=","authorEmailMD5":"71edfc7956fbc58d379e0ddc2942b923","message":"Hi Stephen! thanks for your answer, it's very helpful.\r\n\r\nI suggest you write it in my Stack Overflow question, or I will quote your answer.","postId":"2013_02_async-oop-5-events-d852aaf4-5a90-3727-b614-43875912fa95","replyTo":"a7819b26-b40a-3366-83f5-7ebbc31b5a39","date":"2015-11-09T00:18:08Z","timestamp":1447028288,"authorUserId":"disqus:yehudah_asher"},{"_id":"27a97a50-11fa-3da3-9f1b-27798ed7f05f","authorName":"Nehmé Bilal","authorEmailEncrypted":"bvl8BDUF+LIwOUiUQ6drqps4nO3y+pNOiXUFLizF0Oo1EJoSq+Xty2GiO3hEDwy+PhjYJV7Q/1jck8XyvwH7JZmUFIvL9j98fbb4F9rS1D4tQzUqTrf4A2FurJERMN00iqKPMJVAAJbMKhsNkV1+GB0Hh42khMJNmnnZQY0Z+Wz7+8M9qrwhMXNccGhzDPMd6LPUQi+PoZrDZIGnxx1MXCV45Aa8VgDjv/kSj3NOY8vwb6UKy3eADgv7YXkvstk3U1kF9TMgcjKdpMB7nUPBkX/N1CtlqW4pPkVZ/Jf0BywDxnydLOLIZMXkdSX/QvPNgEdRuDl7VvBALVmzQYbRWiygsSlpjkYx8UGUAT/Aqm/9Gq+cwhe7X538RJFwE3I0UShgW/4fTmZHc7g7u30/iC2EoCVhQzX2FlnBp/uDYtmD7Ha6oeznXHqvQbYc3Abj/aL+Vb4ZrudJkBnVVlG79thOfOl1Jj45nb7UEdzDhKBu4U7veDtAA8CH5OseRdjIVBQQkUwK/heND+XGVttdlP9ChpzkJOg8jBO9DPAR9WQInvWQBZTKec/CmP1h40EMCpfvl+rQtnbA99PjxP36xI44yjXZ0y2b/+5NGMCrauh5qCaJxJiv3iwreOU2oUMoagbhcozzDwtnJKZgGYp1s0H0cZJ6CsfdsFGkfg9pQC8=","authorEmailMD5":"05804d9e1c904e2b8c17d9c1be376fc5","message":"Wouldn't that violate the encapsulation of the class? Typically, SomeEventHandlerAsync is private and is only called from the event handler. To call it from the test, it has to be made public or internal which is not ideal.   \r\nIs there a SynchronizationContext that can be used to make the async void event handler run synchronously? It's not perfect since we'll be only testing the synchronous case but at least it'll allow one to test an async void event handler without making the event handler public.","postId":"2013_02_async-oop-5-events-d852aaf4-5a90-3727-b614-43875912fa95","replyTo":"a7819b26-b40a-3366-83f5-7ebbc31b5a39","date":"2016-07-20T20:10:07Z","timestamp":1469045407,"authorUserId":"disqus:nehmbilal"},{"_id":"2470c566-e828-3348-96e4-406039c84440","authorName":"Stephen Cleary","authorEmailEncrypted":"fCXVpi5D9m/ZTVcLar9eZRnSRCSC9Qwo5K9vBXj3w8yVWEYMPbwMRE2HyMXZOengueXZuRZXAtT+XSX8ZLxJWNnKpijNmrxC+EHE9O+ixKquOYpBwXS4jVgtmzsOBt2p5PgpFiP/kQivLi41jkoP/wwcXP0KoBWhYtkTNpHyiXBwEHoDvFmRjoDfZh3u00J46923DmOMkeouiKt5Ty1RKSrUZF35+SVNmZlwoRhK72V0J6xc2daR8P0kU8GLAnHL5ysyiAPb8O+PIGrtgG16uyk79Lkpz5EyAEnA2isJtpNs2M90f2rchS87QYAoGQ5mQlQ4U+/Ir0lIyfcgGJHU/zwwpgnUgEtijxuA0qUobTgwSsqPkZnPjN1uq9DzvOQlkcxz7p5YCe1VOO7CUSbi8JZ5in2NrXztWhxo/Vz6zY8+t8Do3gVfTUyOyFgDMitS1G3k/g6S3LF0dB8YM2r9BJ1g6Qns3H0RKV+Qwo/gL8W6iG2CjFxIzpZG4Wy4SE2fCw45LYDjIjSW0mQ6GcPrOLDonCpUaod+AMh6lB7bbL7TgQdMa9YNxun7lAJ+KD3LN9TX1xNCCJH79i7mM/ujeFQc1/HGfy3zSyAHMo0bqth/A6i7DUTohkDOyYa/N50BxzHl0HGlLMRectjwzg0MorHxxYl9Gqlrlz4p46UZYag=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"It only violates encapsulation if you consider the event handler as private. This is often not the case, e.g., ICommand.Execute is not private. So exposing an ExecuteAsync is not problematic. If the event handler *is* private, then it's probably better to adopt a more async-compatible approach (I prefer deferrals; others go for Task-returning delegates), which allows the triggering code to detect when the handler has completed.\r\n\r\nUsing a SynchronizationContext for detecting completion of async void methods would be acceptable for unit tests (note that the async method still runs asynchronously; the SyncCtx just gives you the capability to detect when it has completed or raised an exception). I have a type called AsyncContext that can provide a SyncCtx for you: [https://github.com/StephenC...](https://github.com/StephenCleary/AsyncEx.Context \"https://github.com/StephenCleary/AsyncEx.Context\")","postId":"2013_02_async-oop-5-events-d852aaf4-5a90-3727-b614-43875912fa95","replyTo":"27a97a50-11fa-3da3-9f1b-27798ed7f05f","date":"2016-07-22T14:34:38Z","timestamp":1469198078,"authorUserId":"disqus:stephen_cleary"}]