[{"_id":"2510044d-7ad0-3242-8b00-b626f67fca82","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"I do really appreciate your work Stephen. We share the same interest in digging deeper for better understanding.  \r\n\r\nSince there are no active newsgroup for C# (AFAIK), where do you follow technical discussions or read about it?","postId":"2013_05_taskrun-vs-backgroundworker-round-1-b69afd34-80d1-3c0f-9885-0555b3d7c797","replyTo":"","date":"2013-05-12T16:15:15Z","timestamp":1368375315,"authorUserId":""},{"_id":"a8cacc37-cddf-3b04-96be-2080d6719635","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"Long time fan of your blog, despite much of it being over my technical level of understanding. Always makes me start digging to understand more about .NET and asynchronous programming. Keep it coming! Peter","postId":"2013_05_taskrun-vs-backgroundworker-round-1-b69afd34-80d1-3c0f-9885-0555b3d7c797","replyTo":"","date":"2013-05-12T01:05:14Z","timestamp":1368320714,"authorUserId":""},{"_id":"cd3e883a-d914-3723-aef6-51577f63c6d1","authorName":"Stephen Cleary","authorEmailEncrypted":"TNKDwc+lG6HFz1d/QoYXZ50CC3a8euXYiYb6xBhKJZpm/ads9tVcOzfuhLDPsmpmVjhdvCREEiN/+wgGvN2hKNN53X9Etknhfr+CC4I8IGYDWQkIYezBhNhSudhY5fLSYUwRZYpjSPO30N5/ja3Oq/B/d0+uY2yg42vdm0/1Orl4DqkbhrMtZ0PJl7/nE6vfJRb5S3VErtzSIGIxvUadrCt0qmbZKRarc0UsS/j556CgYB5AOm29cX+CWsSr5LTk7ZmuICnUH46v6banLkHlwDV0v4+am4KribFt0c1wzYGI2/0PHrjIzqpuTdnVwIdFhb7VJTriIi+KCNCUAnV21y8DvkevI/1XA3ZWz7lXyD17BNEsVuzNppgeoLrD3NMM8IyxAgUC8nyOJZX26vSq62hviD5Qr7JXDWOSx59rE+nScMyR+R8daxfGUqTNT9kRi7lOowuMvIL5qRx4SQyAPHcy4/NRRhRaLDAH1N/0p8BMcgU3MFqg7XgXOjgdzKsZ7e/shEdPBahrhqw4DtmV7HaxdQ/am8ZHkexguiMvhw5hfe5n75zWGUTdod5A82vNrc3KAtE3S9ArXRgEAvxhjCyBX2paHQIeDs6f903oG8Elw9n21mZbp+nh27S+dp7nElFVmuNLWmofWcq/T+Z61cU3poo/N9jOYhZpqGcE8q4=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Thank you, Peter!  \r\n\r\nI do strongly encourage asynchronous programming - I believe async/await will be essential knowledge in just a couple more years. By that I mean that it'll just be *expected* that everyone knows how to use async/await.  \r\n\r\nRegarding the technical level, I decided at the beginning that my blog would be on the \"harder\" end of things. There's a lot of places out there that cover the simpler stuff, so I figured I'd try tackling the harder problems. Also, any time I found something that wasn't sufficiently documented or just took me a long time to figure out, I'd write up a blog post. Some of my blog posts here represent 2-3 days of solid work, experimenting, digging with Reflector/JustDecompile, etc.  \r\n\r\nSometimes it's difficult to explain the harder concepts, though. If I am ever unclear in what I'm saying, please do bring it up!  \r\n\r\nThanks,  \r\n -Steve","postId":"2013_05_taskrun-vs-backgroundworker-round-1-b69afd34-80d1-3c0f-9885-0555b3d7c797","replyTo":"","date":"2013-05-12T16:09:37Z","timestamp":1368374977,"authorUserId":""},{"_id":"f64a4105-5527-3c27-8449-4e1182458237","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"Is it guaranteed Task.Run will always wait to run succeeding code after it has completed? I had the impression it would not wait, since it does not return anything. And isn't it Task.Run offloading work to the threadpool, hence it's another thread that will sleep?","postId":"2013_05_taskrun-vs-backgroundworker-round-1-b69afd34-80d1-3c0f-9885-0555b3d7c797","replyTo":"","date":"2013-05-12T16:12:35Z","timestamp":1368375155,"authorUserId":""},{"_id":"199dea03-6550-3884-b9bc-7af331018150","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"That made a lot of sense. Thank you! :)","postId":"2013_05_taskrun-vs-backgroundworker-round-1-b69afd34-80d1-3c0f-9885-0555b3d7c797","replyTo":"","date":"2013-05-13T12:28:33Z","timestamp":1368448113,"authorUserId":""},{"_id":"28100cfd-154e-3987-814e-d706cad4495d","authorName":"Stephen Cleary","authorEmailEncrypted":"pzfAodyMtLSKr2+ows7GdBS4Iwyb6Use8190cuaADJpFBP+PysVypuIZiiKlbgO2AMj9wVqV6BLqaw06lV1kjVzYlCTfXWh0ub7WXmeIKI5aSM1xe8XbrX/g3D9omzXPLEtcQMeljnb1jfebORO0jUT+iOHuIvAC70v35nKQD9aZFJj6XtjG+lYLdJiPtGVqtaU5elFidwHi+NBqfjxzMLFXZfZmNRiQgSBwN2G1YIrGPlDNdkYvl2F9OjsmVcxljUMHDwdQ2jx2P7BTBqi1xqP/wQgbLBG6Z5TqKrthNiQfmItz1HMelqN6a5138WIdhrQRGM+IcnYLOtmIT3lpXDgEDZKkme+bQU3OSOfBatLRWUcGDrzsHgso7T9eqHxiVsBZtL66bpHRsEG2sIqRaDmBKBjzeqBBEsxnOZS+RFR7V1o7S99fIIgIltcQ+xBb+gBmmIUhxEoTZVB4eNZo1pHaxKE/rcP/k9qgdLTBW5MwA6+voqr4H9AOAulJbeJwl5Qxhos639uFjD5z10sfOw0/T3BVkojkq18KT3pZHm66R+hXsHsjs9T48Az7vb3YKINy0CsWOUvLU4TjVn0BZrDpR6HdB0CmvaK6KwXej39WVhJn0BDlaDldTRgSusOHW5ubfDKge6mjaXcyyOd9B0hUaB0t5k4ledX+dhXw+fA=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"That is a good question. I have often longed for a good mailing list / newsgroup where C# experts could discuss things. I have not found one yet.  \r\n\r\nSo, I get most of my knowledge from following others' blogs. I have over 200 RSS feeds that I'm subscribed to.","postId":"2013_05_taskrun-vs-backgroundworker-round-1-b69afd34-80d1-3c0f-9885-0555b3d7c797","replyTo":"","date":"2013-05-13T08:15:38Z","timestamp":1368432938,"authorUserId":""},{"_id":"91c9cdeb-e508-3185-b2b9-4d14f0d7fc30","authorName":"Stephen Cleary","authorEmailEncrypted":"Du1vKZLjndN49k8RyLgz/K4lwsUtHVyq4tQABdUKLvz4Wo8bxdRN2hFgu2zKV2363VF/ZtOz+UpB2ZikXw6CHVdJNGVb8pvLe7Td2of8iXIi9k4X2PLMqlDxbql3nHEBr8LF4+xN/DHZVU6wrUSoUKIzy2LPhDZ2Jnz9KVPwWxBqItfbuGeXPaEUuMYBeEz1KOYL7a/HxCqvEd3P7LSDswlKRSYTueEyFIBsX8z77eVATjlRZf8XjjxQmxQVJTR5SiY3Y7/MkcuYPQ34VYce1bqFlHqVzOU6GBu5ImtCY3cWpDf+QV1Lzxer0ZY2G9oiMm4JsHgwVGrMqiL900RITq9Y4qqsIruJE59iCVcqeoMzJMscvGxn4MCfHqXw+Putr7UrdlpjxDj/u7M/wfQSJ5e1rT9BKisBNbxiHrNsqkWvgWeEsVAWxXyqLcTYmf1B3/sBm9fqNYiFfE9EcGsMV3v3sEAXg09NhyY9oTN8oJ6U7pWuLJynQLwZjlPlmedA5aTmB/Xfpray8KCb3HkbvwlRprTeSbg92fDTPLrOqqTQHhOUtrhJCZjqznSUkApZIoQwX/wLZIQyk3r5riS3pNvdivgSsJ/a1V7/WeIJx9Ldfcpp0pdulFWPnGsXz04BhzvJreMtSZywD85wstopIisHKBpYA0YoNnDjny/WEGk=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Task.Run does return a Task, which represents the delegate you pass to it. So when we await the Task returned by Task.Run, we are (asynchronously) waiting for that delegate to run to completion. Any code after that await will run after the delegate has completed.  \r\n\r\nTask.Run does put its delegate on the thread pool, so yes, in this example a thread pool thread will sleep. This is similar to (but not exactly like) the behavior of BackgroundWorker, which creates its own dedicated thread.","postId":"2013_05_taskrun-vs-backgroundworker-round-1-b69afd34-80d1-3c0f-9885-0555b3d7c797","replyTo":"","date":"2013-05-13T08:11:57Z","timestamp":1368432717,"authorUserId":""},{"_id":"913a4548-9831-3772-b9ee-94336b60138e","authorName":"Phuong","authorEmailEncrypted":"rdD+wRUNylv1oT2SbIdpHGwn6LggjC3gRsMITv1rPDptOkOR6pcE4A13B1f4srTTlmXmxvZKeKyK/bdskDG1wWRV/9eaVEcq+pHFDFD57X+JMRXIGGoNcvrwWVK/zp+pLxeO0F8k8HIbpON6wgNzu0KbhTLcYqUgDs6xexT+UEZBh2PblMy2eGgsmMdiUR0rbEchYruJ8q7AxZJ4c6MM0PUm/BuL8OjVoNJ9a9awwQP/Orxf1BEiohoCDclFnsXU91QVq8rX+xdKoW6mFDTA3k3jR3N+sM7wppI9WVGd1FfGWTB+uqUDv5NHf5wp3Wnn7GnDzB/319pcwCAIdXA1v4jX9lv+bONuGx25f0+Sj5rf5U42kn4VsI6StS8fK46biWsQuBoQo6FJwBs6qPzPwHDkG8MKwJub3AvxxHg5jYxemj5J3u3mz72YUvS5FEACJwygktzqIUMEVSYNoFcFXkiYExfqW23TxEEfgrjGBZxfW3o2o55x2xw6oGdFodTQ0vL6tiGMFnrbPjGe7IHDzRAOS3w0zNjfNWdKAfqGcan/x76zbH8JuXTQbw37LSFxCRq4rbL+T5aRcVbIPpXptpJVTZo+TxPJS8wXfd5LPA9NI2i2vvxq549Ee4ixm/i4cij00ijSP1hLv0T2U9BeRUyv/2bdTmzTosMzwGjEchQ=","authorEmailMD5":"5caa292ea13d730613cfdc70d61b7958","message":"That's simple and straight to the point - what the difference between BackgroundWorker and async/await pattern. Thank you.","postId":"2013_05_taskrun-vs-backgroundworker-round-1-b69afd34-80d1-3c0f-9885-0555b3d7c797","replyTo":"","date":"2014-10-11T02:35:09Z","timestamp":1412994909,"authorUserId":""},{"_id":"644763fe-2607-38f1-9868-cf75a3e5d7e0","authorName":"Bilal Fazlani","authorEmailEncrypted":"i+Un1Bj43R8UG5K+E4qDFu02nvd5NS2oPkx1XEnf5mnbXi3gn4DkIhZsVRyiD4NXEtZmufzkxpD+69bp81j1pljGij7Q+xDv94lX3ckX6n3CQkPAv1sasFIxe1rScImBRE4LdZ8QiYfi+73ETtenoUfrHuOszXDzhdJuEBLTdyFmUosHQtTKiof4jcEgBA3jLL5L+HRCQa8MjVz/F7HB+yNQW3squAowP4buXEWfCj/HU/GtROlThPcilkavnxHkCUccup4Gqjw51bXNeBiBsd+y62JebHvRgjhHXVjTj7Iziw+rSFozWlON4+301a+pBpbY4Pbd0YjeP4LsBdvSfY4eBjDViiGKY5nmR5kjLDiVMBsORaJjLo/v6YfarTE9poqv65tom0R9Fb7rP4gIrzsH9WowqHDmg6KPVWgxUcEsmHM3/UiRVzjm84mnZCrWM2MTYPpAvK1qYtGlr61JUy/vMBf2byroRpMmtrGtMVRjSo9VuVvTOl1a02gsUh28DSfxYnhqLW+ZH0DcoR+ImoRLyy3+WHu6f8/YpaPEkK0WefZo/DMhCsmYKibVxmb0Oa8rxp0YxBlMCQvlGHqq0kdrkjrIplIcrDttMu+vhFWHhS22o1AMhbtiFF3OhQg83FC8eBsdMrPQk64xzATITwJyx1Vdg0sjPiTG2NAsfSU=","authorEmailMD5":"329381200b3974c701e3a84cdbf3a440","message":"Hi Stephen,  \r\n\"The core problem that BackgroundWorker originally solved was the need to execute synchronous code on a background thread. If you’re using BackgroundWorker for asynchronous or parallel work then just stop; you’re not using the right tool in the first place. The core problem for BackgroundWorker is to execute synchronous code on a background thread.\"\r\n\r\nJust when I thought I understand parallel coding in .net. I read the above statement. And now I am afraid I am in a position where I am asking myself.. Doesn't background code mean async code ?  \r\nCould you please shed some light on the your quoted statement. Thank you.","postId":"2013_05_taskrun-vs-backgroundworker-round-1-b69afd34-80d1-3c0f-9885-0555b3d7c797","replyTo":"","date":"2015-03-03T09:45:06Z","timestamp":1425375906,"authorUserId":"disqus:bilalfazlani"},{"_id":"ba48f75f-1e9c-3f59-88a0-d1020226051f","authorName":"Stephen Cleary","authorEmailEncrypted":"kLXbzftjAtmMe76jyq7CYEQXKGm1q2cuR1p6RDiq/DrfrTrHctLJ2qo/0W+VMpP1YleGLm7N8a03uWcBVitHdVL1Q3cTv3kdCFyUxbuG+FBuHw56E8IiLvl9/ANOMvhakwv6h8dS1R8zU9hvxir+aBX4npRl/isiOG+A7/UI44pQ3Le5kzO07UDpMfd09AcGILpTcf3sHhBQycORYMgJdVdUAviEBbLIs2HogHYtRjP1jz/6T93eTEKW3DY4opCdvgeWdVGvRrnRSwWv+fKQDBEpMbY/IPJOD/iVht3u/KjvWL3WzXurvvkNSWAP3j+kFtMQeefI9v5MfTbqcOs2ZZFbGHHW9dlMpU5dJ2P0J8uVz41he062QoSCpgO4XexT7FVCoXVwt+FXhJOXArni8qzeiKkWfxfuUYZJiDF9lk+vtttSKqIecn6PXmARt0tgS1uaiU7KLH0ou4Vk+jfI38B6gXO2aPVKt6JK358EiDzhQbn3PRVQcQLk/rx6GD6pB0ZfJvkA/s3v4gonopfZ0PvWMPXtG1lRneUaeyS50SoC4NuR4WRMnOUoXKWWkqqXNgMTBqT9rfmdOZJPaDhaAEiTDypKE/BZvGGnEDlYGOqiUUx2nS2DEohHW1O5F+ivqF3gC6f4bMEWxn45huWmi+eRnX5Aji8a6MiZBeqJCP4=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Not exactly. The term \"asynchronous\" implies a freeing up of the current thread.\r\n\r\nSo, you *can* call BGW \"asynchronous\" from the perspective of another thread (i.e., the UI thread). It's this definition of \"asynchronous\" that MSDN uses in its older \"Asynchronous Programming Using Delegates\" documentation. However, this usage of the term \"asynchronous\" is actually for executing *synchronous* work on another thread.\r\n\r\nThere's also another type of work, what I call \"truly asynchronous\" (and on my blog, whenever you see the term \"asynchronous\", I'm referring to *true* asynchronous work). This definition of \"asynchronous\" also frees up the current thread, but it does so *without blocking another thread* ([http://blog.stephencleary.com/2013/11/there-is-no-thread.html)](http://blog.stephencleary.com/2013/11/there-is-no-thread.html)). It's this definition of \"asynchronous\" that MSDN uses in its newer \"Asynchronous Programming Patterns\" documentation.\r\n\r\nBGW cannot handle truly asynchronous work.","postId":"2013_05_taskrun-vs-backgroundworker-round-1-b69afd34-80d1-3c0f-9885-0555b3d7c797","replyTo":"644763fe-2607-38f1-9868-cf75a3e5d7e0","date":"2015-03-03T13:35:52Z","timestamp":1425389752,"authorUserId":"disqus:stephen_cleary"},{"_id":"1c9a8228-e998-348a-8c0d-ac1003e1ffa5","authorName":"Fahad AlShammari","authorEmailEncrypted":"gvNP2STZSVqttFHIcuQZIVQRO2rX2fEvgc5Ybg0lAZ8xV83wkEO13lKZOhdrt8aVd4/PVE7d7FPfiw0N1PpTUjtaYfMC5jLggvwsBfl39jQIAeALgW1BMrEpKGddDqcoFDiRfdyrKkxko/24DMTnUl5EnJeuBGO4EifBoC2DyArqhoTyHmxK1cR/EP3kaPyibp5FEASAbhcv+qhKKxneu/K4uy3AlGoNIAWFRalEdWEOXDohnG3dB3rfY88rOWqa6DinEulsao0naGa80NawWgG3dzVgX/cGou28qLa5mH2Lu8jMNHfSwvgCRtbtyk2AWvL9Zc6G3xDdhJGQ39eJXQjjBaYsJk4X1rxhIhmJSZ91DDofETQhq0jtP7yJNNjipcXag3QJpTfZZXedOASRLrfxze8D7VUem9ajLbqUiQ+IEUzgjwejTdukf793CPy0sLqOkl7nOxIavq5BQ22wC2JdeKKGXgC/apj22VOPWqH9HuihDylncO59duHQR4bmMVLCrUEOtCJonoCMIdkKALd/lhaFY88adtsWQujIuHhModESml4DOkgjRVSmKc92njZLyXKfCkNKo8+UYQVMV6wtbXIGvjZ/4x7Ob5qpUZtByr4gSRn4dggteroTFOCkRVe71PSqKhYfjILvdykFdO4B3mZNC7skwVFJzw4xr7g=","authorEmailMD5":"727e2b98ca32cd4a8eb4b21d84b2bf61","message":"BGW is async code but it is sync work.  \r\nKey words are code and work.\r\n\r\nThere is no relation between code and work.","postId":"2013_05_taskrun-vs-backgroundworker-round-1-b69afd34-80d1-3c0f-9885-0555b3d7c797","replyTo":"ba48f75f-1e9c-3f59-88a0-d1020226051f","date":"2015-04-09T09:46:39Z","timestamp":1428572799,"authorUserId":"disqus:fahad_alshammari"},{"_id":"ac3d476a-bc32-34eb-8eb5-2dce217c898f","authorName":"Stephen Cleary","authorEmailEncrypted":"Ase36a+31dc23lNV4hB4uzHG3YQ1jN1vQf6EpEOPgo1wr4BBz+DTCyjtYeVWRIEIQW+i8f9TWbjfvxdgw0wbnnMxgz/GZ6IN6CLa6z2del0XPaeM4vm+kNzejH2lpaCwlp43vccMAcTzDRhGFeQa0hL6V093WzAKIqQUqw+KfdY3GJQP9subHJi7mvWM0MY/+szidNKp4NMNrGguWFOUijvKZv1HnWcgccOVi/9unNQGAQE4W1ElpVlULO6z8VbVDfmDvAS/GxdLRyE34Xu2ucSVrn16PQ2neEIaPLpEc0NV+7iTo1SgZQSy4oeHmTGFQCrY054HxFPWhIsurnBEaoESArCVXT/W/c8PePgeOqvL/1YdjosBlai3ZMEzbR4U3JYHqnU/K76AInbA8zrsMA5rZj6y5gmDpWsYVWy0WiSq6vTmL1mkuxoF6wRyAhz3yZgWVq0KHmSxoSIRxEFSL8cp2Pi4hLgGtdAqfbsYWEU3EDLmIN7ftiHWeASMEkx4/rHwyFn3/MnT57HaM6p0dCQ4gt4Sk8paROa0wOgdt42Dzm1IDn1/TCYAZCpy7vsxM3gdLLOh2fOGshjE8LnKajl/+IIKVzr6fHv7dmtMjseO+IiR1CIvdSqo8es4Qnq0SDresYG7x6hM2QKegfS0YCC1EJR+Sa2rVWXcASsLYXg=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Ah, yes. There's an old pattern where you can call TaskScheduler.FromCurrentSynchronizationContext while on the UI thread, and then pass that to ContinueWith. But there's some definite pitfalls there: [https://blog.stephencleary.com/2013/08/startnew-is-dangerous.html](https://blog.stephencleary.com/2013/08/startnew-is-dangerous.html)\r\n\r\nUsing Task.Run with await/IProgress is just a lot simpler and cleaner, with fewer pitfalls.","postId":"2013_05_taskrun-vs-backgroundworker-round-1-b69afd34-80d1-3c0f-9885-0555b3d7c797","replyTo":"efce3550-074c-30c2-b26f-1f68b38d3722","date":"2017-12-18T13:30:43Z","timestamp":1513603843,"authorUserId":"disqus:stephen_cleary"},{"_id":"efce3550-074c-30c2-b26f-1f68b38d3722","authorName":"NotAChance","authorEmailEncrypted":"kZSxLlyM5NZfpyccDaO3UK/y2SWMlQMcZ9I6zUsz6dbkeDCvQ2SXeM9WIK56wqAqDarT2xkLSqhC9xA7TfOjOecwQso+2LH2HYECv/YjAdQ0xibFzCwzMjbRbsgBRm1dpEM9QgcE/xRLB/6O4TaqCYjKsZ71rTXyRCnm8h3LVWPp+iDNQ8xuQ9lQNgATOzRoOec9qIMhf7F3lVMbrxQsGYWPOiiIoRQ1JNEVxCcoVtG3OchOfEYsme+mCGstLwO2GdgcyOPqCjZkDZAhs3C/X9vtVB20FsgM5EdfZKCHjipXCdbGkKj5i3QuDjmeS1SszAB3vQOD7oFWKU8aULiP4CD1vtLEd6ZTKaiITJhEv1wqJZSuoC/feUEz6bspfc5HenPzVCHVd+1rcXw2R2JtB80h5gTMuOuGDOHHD7GejsVZVAkfyYPgiyrsF03mS03/GJyF9/3DBwmIbG3ApEGZZ/Sv3jAbEYCzAr8svFVlp3Y6wUPAkvmhx4LjpQZ2dxa5efiCBQlX4osWjiB3WpBO/xPcf/u85G9bTinA2BABFz1KHc5Iw5P+YJYRXtrQQR0gmDGZ19+uj2oNitBc9aMpEGuccWYa/61GUJhYk7xYSWE4HVEC4IXeBD32nA6MPWqnEdzs6On87oFKJpAaBRWNHEg4LThlaqkGPL06ocNCveM=","authorEmailMD5":"f05133a9aef915405a55748d64c3c360","message":"A very useful piece of information, thank you very much. I've been trying to use Task.Factory to execute some long running calls however my issue comes in with the ContinueWith() function which also runs on a thread separate from the UI thread, where RunWorkerCompleted() doesn't. This is all good and well unless you need to navigate to another window or shutdown the application, both of which need to be called from the UI thread.","postId":"2013_05_taskrun-vs-backgroundworker-round-1-b69afd34-80d1-3c0f-9885-0555b3d7c797","replyTo":"","date":"2017-12-18T12:50:54Z","timestamp":1513601454,"authorUserId":"disqus:roland_graham"},{"_id":"007f62ee-f12b-3fb2-af31-59171ca95b41","authorName":"ALIENQuake","authorEmailEncrypted":"mJ1squIW4OURWWBOOynVGBoFH1UrVh8MqJf08h1cAgCBmIV3YQMuh/4OgtlV7rPPLT5efUfOKud5RQFKF6+gCAGTTqPZ34tFMIQo9lUnptH5Pp9WHBIrrc5JDz4zdAxmAnVId04PaXmcvkGmUUpQexCNU0j2beopS1rIoythE7ifaVTMvpDGuLC8Laca77ZW3QInxiggt69fFKF5+dABHg943GksK3ALE09V1G9RDqlmupqSL9LME0oi2Qk4M+NIVbWqRQT7wZyO/ew9SNxbQKOjxoIbvrZgsj9yv+KCdFzLQyhO48Xg9+gTduOGl8vJIGtEwEj7GKM6R8hIzNialGh3nXna3nwstpVFwiVfxmMT9YkR4ukRfNOFOeakBFCSS99eoRaHjF6YTk6Q1Idu1ChEneH2xcoK1Kst7/PLNbSOUFXmwZaedIuqfouxV9vjcU4fmIj2fuJ1eUb7wSPHvtLwzpFWh7Bgv1uQRASIAo2QOLHr/gu0WvLSk/Y61+DfJ9pH+HJCrroX8syH/biXLbRJTK93FY/I5q0YrmDum1khzjTn1CjYdlsxuCp9PLABrj+ACmabcIic7cGVMns6IO9LfAv4VabrzIxZbC4Nw5zHZXnRdFj+VVRLTYyCWPHS3TNMzHYh2kFWy/M5H2k5XqZKBzqwOls/vLFbLgaUPIo=","authorEmailMD5":"1615ddcb56c2aa7ac30c25b4fac23032","message":"Article is wonderful but WTF is \"(_, __)\" ? Really? It couldn't be more cryptic :( It looks like two different size boobs. Still, great investigation.","postId":"2013_05_taskrun-vs-backgroundworker-round-1-b69afd34-80d1-3c0f-9885-0555b3d7c797","replyTo":"","date":"2018-05-12T07:22:28Z","timestamp":1526109748,"authorUserId":"disqus:alienquake"},{"_id":"bb800753-ade7-3bf9-8119-74f1dd421e8c","authorName":"Stephen Cleary","authorEmailEncrypted":"O0flJQKfiWneUsrnX4zjboU5UbJiQQCYkJXDRUy+V1scnohWFgPXlHURddi/WFZUhLT1mNM+HquhCKkzTK4Cws4ysdHu1LYjlgHpHqU40M4M1IZ6zPocckCje2e3cfWPo22D+adznRYO5hlCxFEz2pQ2c2puCWSUUh1Si+z/YK8WaV010H6VkzupUtSE/mc2zgx1FfFYBiKBuRI3lx0IAOSfdlUu3JYwTS37zphOYzY5tWWfBmI4HcyDTAHvhT2BPyPJB2loZJMpBAuGj8BDlxGsEfFz+NSQdrBz2GwrTmwqP4KOJ6ilSXr3dCkfiHtdwP+zEYGH7vjKak3d2dtuNCI9G2AvJA5TExlsnw964oVAefMt9z8ZGbLIos7NFReoSP6cbaUDQQd8ukpg757sireIhgFkuHOP1jdi7L90KCm4gXbQUc2+694reqfAwHTl364WGSQ/uVW8HPp9akWKpjg0tDlINnA3hD2lrJ8oCCw5zHj0TOB9Pow2KC7LrsEL0aAgm/mAa+HqhvqDEPdxJ851cbuS0Ae+Eu1BKDhnn5drU4Y6n5OXniYIiph2ELpPPJAuufekLLba022yMyfH0CZklCp0LuUw8RiW0TYgXyYXxrtpfC8UCc2a0fYqsEBsbE5wq7aek6dHQY8Fqm4TzzntMP8iARLSG8n1xkparDI=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Ha, not my intention at all!\r\n\r\nSome programming languages allow _ variables as throwaway. \"I need to have a variable here but I won't use it.\" C# 7 recently added \"discards\", which is practically the same thing (but not for lambdas). Hence the standard \"_\" and nonstandard \"__\" meaning \"this is also a throwaway variable but _ is already taken.\"","postId":"2013_05_taskrun-vs-backgroundworker-round-1-b69afd34-80d1-3c0f-9885-0555b3d7c797","replyTo":"007f62ee-f12b-3fb2-af31-59171ca95b41","date":"2018-05-15T01:43:02Z","timestamp":1526348582,"authorUserId":"disqus:stephen_cleary"},{"_id":"dd378841-d802-3cde-98c5-9554b9a52493","authorName":"ALIENQuake","authorEmailEncrypted":"K9Kwst0IcYGfBH5fQnRxgNFHIvDPCv54kFme2PZ+tZXfzXvvrKj+O9f4iU1ExBZZ7IUdX0MZjjfR7Ctmm3j3xtiB6ql3Q7RLHVAgDeJycN76ojkPHmh6dwCVMJ3t6+tMQJsE3R36ys2qDBrawrDrC1byuEakHftVmZmxDQnulaIvG7IZ2R5CywHStVPbooKdBrCaHUSnwjCP2vrldmA/jo8n48JZEi5eZ4eG2t7HgWJiUPYOIxBAuB7SCFrPclIv/lhqzxPRFtF9lzzR3ZUGiO2pCp4Ch05aoP2gehf4K2eB+L+8klWmblzleAj1TpBwZPV0U24YC2nlHBWB/T9tfh0zWT5MuHzmK8YgMatvCMGv1T8DSQMv1st8XsQfacRDOWtujKvK5hslevEH5Z0k/DGnqueGReiel5adLUYtSOIruJbVOTFvFuw/fl9xDXaZp7Chzk8uZHQt6zQTdlm60ExJAP4nAXpZ168ixv+Xd2JBYPO2BHfWFpvxcg4eeMPVNHNZ8JTakGD12TFKkJDZx+Q7RciW+VwNWAutk3GS2e1VLm7Bv9qyyLizdUY2eL4JrBbbUMzI2WPnfKdNer/hSdOCceTsChjdh4FR8h84eXLYFtCHVrtF5eslW9XdB/hKPvXUGeVzXQKe4nR3nGd43eV+KYO6w+Z2jqGofov7SZ0=","authorEmailMD5":"1615ddcb56c2aa7ac30c25b4fac23032","message":"Ye, now I get it. Thanks again!","postId":"2013_05_taskrun-vs-backgroundworker-round-1-b69afd34-80d1-3c0f-9885-0555b3d7c797","replyTo":"bb800753-ade7-3bf9-8119-74f1dd421e8c","date":"2018-05-15T20:42:12Z","timestamp":1526416932,"authorUserId":"disqus:alienquake"}]