[{"_id":"8ed8b3f2-8d8d-359b-b217-bcb9906e22d6","authorName":"Riko","authorEmailEncrypted":"Dd0sRb4HrZgxkMnoMnMDdAAWWf7ETddZxAiPAjjf2P4SYu7bPqHswTptvK8c37HOXWFvYao9Y3v+VvHunZKclupBRK4EHTZLpKfeYeptCs0g9ybcaTGqhVfRvhjx00eHofJmljS3+yzbbaBb0/Eo+CDahXT4Ty1ovklOR6LUB1lSA3k5FgLlioiFrXbpA2xn0AU0FdpVxsdnDGF/jjkTxbd3Mbs592+XpihovMrTnWH9btMDPMNPJl+fZInHkIyHd0zbADBaNDSulvRGluL8HsPxBT0OYOR16dbDNjxKLdUNpbQ3O118aaE8GaSiOBOORel5sMeOLp5UbOSGHLPPWDTCzwmVgwzMOlgp04JSrol+nzcGxHg9S8QveO7fWoG1W9po346jee52sSl9vO0AgLB9jzd/Rzn7SVzD4QxIkrWP6WbeP6B7zVIiL6zDMeeFwoa5JDIfza2+BsWxPx9Ho6bwzPP2A8gzWbsDjqoX7IGpya2HnO9KR/DDlayTIBOtXlyGv6ZZzn++txD4J66lLrSHgY50135U3Zk8tvmSX3MQ5Jfafnr5yu4ekEwDtMnGLi86zlV9SnPu7rBOKvAkBxHG5Ghw8c8nXsAZ9+gbskIlnm/JhWBOF+uJxMcPZ2hp7hTernGpVFkidJ68BaC1CoKfDMM8yzagRc6OYa/ti6k=","authorEmailMD5":"c1b99fc51717f507f13d0e2297a64fdc","message":"Thanks.  \r\nNow I began to understand what the Task.Yield.","postId":"2015_04_a-tour-of-task-part-10-promise-tasks-76cdd5a7-1909-3432-9e00-8acd3cd4350c","replyTo":"","date":"2015-05-07T09:34:29Z","timestamp":1430991269,"authorUserId":""},{"_id":"71a6bc62-58e7-37df-b550-c879b97de736","authorName":"AlonAm","authorEmailEncrypted":"QvV39e019hP2CLFv1Z6NNAOJRNuAlDctzuuZsVLbSR/Ehu/sQKOEl+2ptdK71sJFz8bA2ncCuizmb+lNhwauyMKFQCiGVOIhS3taQ1mj0OaYtKSOgVFqV7N2zWZqxH4QTvPf1LkKHwt+7b5bH08hdnbPow0My1Lve8HCJQOeC7FbQ4noyOXqa0CNFWsd7xvs0DJcmli/ViO9F0tRCrdEKeaW6eneKNcMpePeRiHgReEfVMDTHKBSqilr4ZxtpFkzfPMjal3fbNJBiTFLVD5IVqHmkPInE5ltR7WmHcBSyjnGjL4kD4F569PSwQvT5dEa8TXMFGGV+CPEg/eS56XLPBRBJNj+hUZpy2fjSkqK3eCeEJLV8uQobDEFzF+HXhshnMdfHPp3CH+SR9xI/AW88Nl6fmoBVg75MJ4Y0ZYz9M7vZuDXIWOkysV9pADtfAwKk1VABMc2BgnozWgXi+O4WNuXuWnq+8IjwhAwQl56FBwhfsmm5/FC623OHsAcfFEIw5PGuQwxvzBwpqDDJnqc4i9MihoVtcZGKi2j2CXfu5TGE6s8kckyhEX+D5KRZ8pYZmpP0VxzwMMqw4elWfViv7jhigf37mhPB6zEcGGRAfe0DW5nkiaOo4dLn/drHej/Rbtv+fobpatwYmIZ7Nod6rWmlmbojByDgdyhnNqQZW8=","authorEmailMD5":"31c898b424867589fc97fd62f85efbf2","message":"Thanks a lot for sharing :-)","postId":"2015_04_a-tour-of-task-part-10-promise-tasks-76cdd5a7-1909-3432-9e00-8acd3cd4350c","replyTo":"","date":"2015-07-06T12:38:49Z","timestamp":1436186329,"authorUserId":"disqus:alonamsalem"},{"_id":"9ac62bd5-08cb-31f4-bb7f-d8369483976c","authorName":"Stephen Cleary","authorEmailEncrypted":"VkdAm7X0JuqF1XJ3I46zwzDgPBTFnm3OmDUQw9XuC7H34Ompl3a9iM4plQpfUpavCBS3Ji9a7KComS9sdc/ePg0n74vWtXMUXttpsEZzmm7CfCoFmim4n+hifCh+tDgPqoJYcrdiZVku5/CjQxmgFfUeIPw/bsWWHO+rG1/TS6dhx9AzV024F57jC15gBAWeH/WQ5QSLT9VkN8Mb7FZcNvrYmXSsUvMG4ARwHpMXDdNOBiv7CVq9Bhz440S0VZpCeDQmTNBRLFSiGCROM4DcLVXfnp0Ou0rMon9x873Ly5pMGUQ/s3q4vH8/VLibTpH2bLdCGn9doeQmgQluxPIBDZ0PKj9vZxYLhmZe20NzGPmbCreHFN4Zp5sRibRxgi3OhJ4mWYbP7ABGb+QulArgYpPj6R31vWflUiHQSj5VEn8+uLtXgakyV8cHeHutozCWGeiQjUTduveROVGwCVZB/8pYF1ScLUynYiBydWDTHWSxJsxgP95hoWh+hqZzoYCMV/1o78XlHjhCJmB5/ibiQCnM5Uu5WY5aiWC3yoVIeD6dJnj3pihMKdfHRcE9pJHs+la4ZNGsnUksvCEn+IqoKJxBr6j7rV0HJs0HrQikoB3Asi3kt3ulEBNEPnGh1AsHHUhuZbABu8bOZwcg5Zt72LJ2JbQS679p71VjZ86utF0=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"If you run that code in a UI application, you'll see it resume on the same thread.\r\n\r\nThe point of this original blog post is that there is not a thread executing the asynchronous operation. In other words, for Task.Delay, what the BCL is *not* doing is kicking off a thread that does a Thread.Sleep. Instead, Task.Delay is implemented using a timer, and the task is marked complete when that timer goes off.\r\n\r\nThis is different than how asynchronous methods *resume*. I describe how this works in my async intro post ([http://blog.stephencleary.com/2012/02/async-and-await.html](http://blog.stephencleary.com/2012/02/async-and-await.html)). If the code you posted was in a console app or background thread, then the asynchronous method will resume on a thread pool thread.","postId":"2015_04_a-tour-of-task-part-10-promise-tasks-76cdd5a7-1909-3432-9e00-8acd3cd4350c","replyTo":"e88a34fd-5569-3315-a5c2-aea44881963d","date":"2015-10-02T18:28:42Z","timestamp":1443810522,"authorUserId":"disqus:stephen_cleary"},{"_id":"e88a34fd-5569-3315-a5c2-aea44881963d","authorName":"modernsl4ve","authorEmailEncrypted":"T6LurCs7Oi5uXufJBymUzC01FmZXFJwmjJKwbAsrjhxHKyYkIcz7sLMMSjsU6YVdx7ZVOC/mu2+8hsK1vIOObXlK3x97+lIdXr5IvWn2gd42d6cWfOKONxiSbAzq1TC/7RwknkAcjYvfMgshxQH/cspzmr27e7JFdLdD3oAl3ziakr1buHsMtHh36svHLl3fNuk3zL6+6Zi4lf0cuGwTk8NM9AWTqjsC5vK3w2nf9+gSo4VE0p4P29btMZn6ZnayoLATomM+Xolq9waj724wBP5VH+yjLeV+XwV2fbRTrnTM0viSPkQrJq4waAdR71RqaZUCKtp2HlPn9UNamB9bLVAv34xRNXEgjpdcUNtqnl3F+Fb2pqAV4l1tlXRhYYX3wnL52DETHdPsEtqowVqlePn0/i1Z8cbsMci/j9JLEeqzNFApMw02wOf8ETxi4+5O7ftKJ6xhZ5fkOqvBYqOyVT941Sa4Sv2GI8IhzbGJy3KIgGmENFAuUSvCCm8wNAV4j5JbAhIPxj0I1eVUsyS61a522yGWLKKA0C4Jm5TDmXd2lCDSYmnafHhk+F8up4zTUUUlZ0y/yturgOwsBXsiy4kxtXCy3FTCOlrQGcg5ne5hvYJ5myy9o6kP3Dc1eESBK6Fty9RXqYgBBjChU/Id92JZG3DeHUXoa6UWv3KnqeU=","authorEmailMD5":"10f9bd50e442b17ae72c098e7d3a1486","message":"Super interesting, as always!\r\n\r\nDoing a quick test today to show a coworker how await does NOT spawn a new thread, I run into a small detail that seems intriguing: Task.Delay DOES spawn a new thread, as shown by this snippet:\r\n\r\n public static async void AsyncTest()  \r\n{  \r\nConsole.WriteLine( \"BEFORE AWAIT: \" + Thread.CurrentThread.ManagedThreadId );\r\n\r\n await Task.Delay( 100 );\r\n\r\n Console.WriteLine( \"AFTER AWAIT: \" + Thread.CurrentThread.ManagedThreadId );  \r\n}\r\n\r\nThe thread ID after the delay will always be different, so clearly there's something that forces a new thread to be spawned..  \r\nIsn't the calling thread just sitting there waiting for the Task to finish? Why can't the delay be waited there then?\r\n\r\nThanks a lot, and keep up the amazing work!","postId":"2015_04_a-tour-of-task-part-10-promise-tasks-76cdd5a7-1909-3432-9e00-8acd3cd4350c","replyTo":"","date":"2015-10-02T15:20:28Z","timestamp":1443799228,"authorUserId":"disqus:modernsl4ve"},{"_id":"1be8eaf6-d6cd-30b8-b917-a141cd69bc07","authorName":"modernsl4ve","authorEmailEncrypted":"BPOzX27lgw/QPWVsY9rIAJ6QMpgCHAESlqjxky8Ixef7TeWmSp8JRR+J+5+feCFx8VKMtWqbEAuZ+o7JjOhr3KLYoOMxBhbGvOBrPejTpn0O1LnMHpcmezlAIbcmsGRwbGqw/KaYWY3HziJCxVAHcMpOGTxECsGEOnijr6w4d43+SSH0BksboBVvENAcpMppeqniBhihtSFJRk1Y/vpD9Ca8T71jbGKAfn1SLPJjz07G+RDYScf1I2EDZwcfU3MwdCtk8ZeDq+tHFIJ5uOQT+pARE7gx8ALL6UfQPgo9iCVuxt+3jD0CrCYmVp6WC5Ew1tZ6+dLJcFfs2rgWcIdy2ajm7ACQ6WZX1oyLnhSeI6x03dSm8kY416FP58oP1RqAGoZeUhw0Iv1RAZMNlanHtq1oZhiJcvnhYnaOwBtSTHMGTmbyuOMA/pshLL6GAvwUILq5Ied5DLB6GcI0TNLptLtBkf1o/mZxH/iDnslI4t2F6fQJx25xXPlpH3+NPozyfEZteJ6pZRWSZ7UoC5IzzSQaJhXDC1VEqbOuKmPi6cBdGSEt+CNsjibb9Pj3kg69SfnEYcsufmL2FgD9jIZkP4R2LRi+HoY/+Hbsorlf9LaFGoXBDTRQmTWzIMh4YID4nNPyAUMgtR2wKk7f8ywLPEOojG404DabX1JiwUbR3lc=","authorEmailMD5":"10f9bd50e442b17ae72c098e7d3a1486","message":"Hm interesting.. why the inconsistent behaviour though?  \r\nWouldn't it be a nice feature having the assurance that by default you would be back in the thread you made the await from?  \r\nIt's these kind of little 'glitches' that always keep me on the fence with C#.. :P","postId":"2015_04_a-tour-of-task-part-10-promise-tasks-76cdd5a7-1909-3432-9e00-8acd3cd4350c","replyTo":"9ac62bd5-08cb-31f4-bb7f-d8369483976c","date":"2015-10-08T08:36:24Z","timestamp":1444293384,"authorUserId":"disqus:modernsl4ve"},{"_id":"75323c44-4a83-3eef-a0de-6ddf036a2aa6","authorName":"Stephen Cleary","authorEmailEncrypted":"L4vXI8iAzY4bdEyhCt2eu96GApMbXW1sGYVV2jPw3eNf4ZLePaBiJ/85hESIShMVQ0HBL+I/6skUQPLBVjOPRiKVPpRl5a8PlfqSWYrqBVh+wVvUe/x+tfv7b671/WAA+Rv0t+j8CXvKf/wbk0qnjRHQDqfemiV+d3yA34MD/AcgmCNmjeTKqSHve+w9QBxk8bITCWU4l6oLYTCpw2sWzIOuWMcYC4UdMQLDqJFnQMKCSMETCFRnEjKaql0NscoOoNoC8rE8EkFmRyS96B72pimMXXX62v3r15XDK8JoMVPjxfhMuXL6KNd8cwzAWEXXYUzjJh1VpDzwLyWlW3BjUbiRhkTXjlFZTlKH0AyKfxIxfvtJMVZajgKsRTmg4Y+UJogch5b4kyHlp6sQExrZFnBSwBtzv6upUCzD+o948IjbMDc6qtZ9UkQJbWqHTzsitpkK83O3FU+MJn1XzooeMxwJD8mYZwCIwys1Y/EkraGEh4lXlQqXk3G1xbA0KaGH4LnhpbTTKSGYxYot6XUfLkutZSORH+rg0xeIc2pHzMwR82t7mlm0xh9JkIYToAzG33MuX2+b757Iet2qJljIdiT9nPR7WhW0MuhxLPTuo13L6/XVfsCkhKVDyvvBOJ1f9iJTMb56+SFhN5i6zd8D47O7VeHWU89cadvODoRbArA=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"It's not actually inconsistent: await always captures the current \"context\" (SynchronizationContext) and resumes on that context. UI threads have a UI SyncCtx, ASP.NET threads have a request SyncCtx, and Console threads have a thread pool SyncCtx. So it is consistent, but with (deliberately) different behavior in different environments.\r\n\r\nReturning to the same *thread* is not always desirable nor even possible. If you're running on a UI thread, then it is both desirable and possible, and await will in fact resume on the same thread. If you're running on an ASP.NET thread, then it's not desirable, and await will in fact resume on any ASP.NET thread pool thread that is available. If you're running on a Console main app, then it's not possible (there's no way to \"send work\" to the main Console thread), and so await will resume on a generic thread pool thread.","postId":"2015_04_a-tour-of-task-part-10-promise-tasks-76cdd5a7-1909-3432-9e00-8acd3cd4350c","replyTo":"1be8eaf6-d6cd-30b8-b917-a141cd69bc07","date":"2015-10-08T10:16:04Z","timestamp":1444299364,"authorUserId":"disqus:stephen_cleary"},{"_id":"fa96b3d5-fd4a-30d1-88a8-938ade30336b","authorName":"abatishchev","authorEmailEncrypted":"EUYLzcp4on5cgCsqECRuuma6ogZEinq4HL9cSbiCeq/G+7q8DAMFsZHUlrWY8VV45rnlkwfl0xUgHKZ99nXFe5FDkIs0M2fH9Sefc3bfVLiGRkeJEUZ2Ayh13AizEOb3GG1+3Y93NMqccHFBWWxGRnbVMnnDcmKtN4d3RFLpg7UXp78+17+ozQ7nGLEso0zoNoVe+n4x0kpd/aFzONTtbz7ecUf27h0Klj1msSnWxn6lil0mfgeeRKS75WzVQLNZ41vBBTx8wTehvize40qa8aYeQGiundiChj8Sxx+nyoT4Kldmd3+u/vzC5ZhCseDd1Fv5wpsibS6imQT8T8na4yvgN/PgvSr4nC2f2yNtstd2OircYxbEV58y0pE/css89L1n2EjaahdKgwH4s1RuIM0oqeGO3U2l3YfrcyCc+DxOkG9wTcQ31iR/dLtfCYQUzw357Xj4yy9R+7C8LOtMZdAJrARYGSKBXNjijeciyE/xoNYvHAsVR5skh1ua4015Y6BcAQPwlCiAeKrCKygtVs7+B5mLtxQw3hFljvj1POK9ZcsSIrlQOydF94CAVHa+fNMfNPcxNe+u1hBCdNIE4K8ITHex921naiMZDENT5G9sfiAhWkowfZMhMk6Pwf9qGIuwLrFJW4f9AlbZu0xlUH+qiLMAn3ZOOZlOiedwC+M=","authorEmailMD5":"b9da2ca6abf3a1e28fb470f2b3ae2c34","message":"I'd disagree on caching Task rather than T. One should actually cache T, otherwise imposes the way how value is retrieved (asynchronously) on the way how it's kept (cached).","postId":"2015_04_a-tour-of-task-part-10-promise-tasks-76cdd5a7-1909-3432-9e00-8acd3cd4350c","replyTo":"","date":"2016-05-29T23:42:49Z","timestamp":1464565369,"authorUserId":"disqus:abatishchev"},{"_id":"c3ff8ef1-9af4-3daa-889a-81b4c7e27982","authorName":"Stephen Cleary","authorEmailEncrypted":"VllkFqDdl9EYoJAXICpCT0hZ63+hrZolszqZ3XwGYLwjSrFymP1NQN+taEB/+NPBSAL/aRC5skgRMZvQ3B0WZy2Dvb/u1U1t3WGpSGxLmLBrrV+soidR0cT/Dpg+lVZQ35ku9RucLXnvmRcV0EK/6HEWZ9zsF2wDmNBQ6QK976mo1wxD+gBygyRvD3j8rUYCe3paqzrsgti01oGTZPMlReu3YLJWHvAsgHK/4bn2M/IGydZta7Szj+M/g3gUgAjCNjYPQxezD3Y4KSx6NKFVpfgw8TgKTYiVs6eBXSjlM6MuHs2Q0y0GSDEcHGZc2zvyG+Abmac/5CPQv07XX7p4ePVtsl9JklphHS+f1GpK7W9fn+39cZm/+FgW69wOlDQnEzu4d9eqT66buH91KA/HGbTPvfgCCt9jzD/fYG+MoxPwUhKuCVBf+8KBtR7ASf7MRA5bO3yH6T30yeXaOma7Xv0KWToCoQTd4UR/bC4IPOhbp8lLIEiu3zEwYiwASwOV8jG5V/Wukyz5GeIPcnh+gsOI5j+1zd1xzzniV4XuQFN40qyKGGxJcTZkzoQRwBETgcA2TMJOscF7CkXGqEsvvFS8Tzg9qyOldv/Iz2fV5AFC7R2rF+t0mb4PVXq54YxuH8jyQz3qa5eQGi9fLFxRtwgA8s7zZFYw22Gqu3hIn2A=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I've used both approaches to good success.\r\n\r\nThe main benefit of caching Task is in situations where you will likely have multiple cache hits while the operation is in flight - caching the Task allows all of those to be represented by a single Task.\r\n\r\nThe main drawbacks to caching Task are that you have to put in special logic to handle failures (to avoid caching failures), and that they don't work well with out-of-proc caches.\r\n\r\nI have been meaning to write these lessons learned in a blog post, but time, you know...","postId":"2015_04_a-tour-of-task-part-10-promise-tasks-76cdd5a7-1909-3432-9e00-8acd3cd4350c","replyTo":"fa96b3d5-fd4a-30d1-88a8-938ade30336b","date":"2016-05-30T01:57:59Z","timestamp":1464573479,"authorUserId":"disqus:stephen_cleary"},{"_id":"4bbc17a8-d527-3b60-8856-f32f0cdece00","authorName":"Krzysztof Maczyński","authorEmailEncrypted":"vM5IdV3Z4yPSbFw4vN/VtdbWWMVOZQ61gK7B8JM3D85EvXCaHkIiAEV8pcrEIZFFIW80t17iacUfE0dBoGtFWBLTwYGm28ZlZZXHO+4V2UgBCv0G4UTguInaTDNKDUGiWVrgqv2LlURheovTs0kWDaShqNs83RT7kpEjJhO/LZOoqyOFzTo1NsFABVB5Nt3FDaE/vIeqLdbgtEfbW4a9h1V8q0QY1oyNZMgys/HJroAqJKphSITlzfSZFq9XzuULlrquRB/k7buV9lcSHG5CUa5rhPTNZQG14QdDB3gtCLfyTwmmi7MoJ/Tqg2TN8Z+j76mc7t6rjaRji7LqiWzydT2c4w0E4r3sJk8C7YzZ7bfCZ2QGxp2oRbTW+dguwCDrqT9vJ8UGj9sfRC9Yp62H575YDpDKjvHPrMVObZTI8Id7a0tyZu21G7uPoxuOlvulwa9nFCGB1LHSAAjUeGmjdHPRsfyjP4VMy3ltN58Ber4QXmt80422nSFCZ7bxcjmzwdlHRmoNFetFlecmZzdsP63CPc9yyhBDKW/E8GnHwX6AYzFUyrRVuZd1hwgfcB8WcqMieN4STnnt9X7hkC+QRDQwfj6ASZSFeXe/pckgnGxCS/V2Y2zbrTtTJrzYSBW8Iq4YIpZdCZI3nq4t238is5MiCNNXsMQs2EqH+IAaaTw=","authorEmailMD5":"d5360532e186762fa684e2394c3ec919","message":"I wonder why Task.FromCanceled requires an instance of CancellationToken. From what I can tell, there's no way to get the token from the returned task. So what difference does it make if it's some token or another? The documentation doesn't say and others discussing it on the Web that I found are also silent on this, except this guy writing: [http://www.codeproject.com/Tips/838284/New-Features-in-the-NET-Framework-Related-to-Task](http://www.codeproject.com/Tips/838284/New-Features-in-the-NET-Framework-Related-to-Task). But:  \r\n• If it's only whether an exception should be thrown, why not offer an overload takin a Boolean? (In addition to the present one, since I recognize that it may be convenient to pass in some CancellationToken at hand, possibly even with IsCancellationRequested not yet statically certain at this point.)  \r\n• It seems that what callers want most of the time is to definitely have a successful cancellation, not an exception. So why not a parameterless (nullary) overload assuming True?\r\n\r\nOr am I missing something? Is there more to this CancellationToken argument than just a Boolean wrapped in something fancy?","postId":"2015_04_a-tour-of-task-part-10-promise-tasks-76cdd5a7-1909-3432-9e00-8acd3cd4350c","replyTo":"","date":"2016-08-19T21:39:40Z","timestamp":1471642780,"authorUserId":"disqus:krzysztofmaczyski"},{"_id":"35499f60-373c-35e7-b61c-059b68e25c38","authorName":"Stephen Cleary","authorEmailEncrypted":"Im0IFZqG9WW0iRwGMmk+WLyyfrgUmDonKknN3NoINMZaJgiS8TB0poo7NU42iAAL+n3HhBfPCGxMH2qkL0kRLqBFFEEMDkRgh42VLUG0hYMbcZbhvEFEvqpvsXYw37oBdyPBSOBXM3gD97eZV2nZT21wA0zBkvtgCax2ZYY2+3T0Ldkl+/vbsO61790NUbfZMAIXMcUxd+rMw93JkTElw/TLA11Qs4FgBdwxS1cIWldzuzUdSrQNYoHaIgoTuawsLsGOj3ObRPm4Cr/eR1epQbZuW4o1Hbiv5VRdqVGvEHgsbR33ogfsAU5jZl8V2nVJKwcFHm5CV3Oh858El4ZU5eDsHwyaQRgqPw4QLYozGPj5sp+08OUgS97WBc8o0QJhIWHYxVBD7pBAUIxsWOi0RX0ivlURI8z6kqqelPVNPeuwFX5KHv2Jm990xlNqOu4f319QONhfOuIRW3oONvAhEi0zU498uhX0tbzEynth4c4QhopSAmTtmLYcgLx9ua12lAZYZZcxpkhQfPlU7lJCN2nrdlyamX/h9nV9zDApFK3wO/pTEzU0/k9em0j6fJwhboSg5rU4Txjb9MFeYXIst4kZXeo/odo/awsYAbJhUIorku7kiAk/37dPoujzQnD/jmoXcKdIKSjnP+/R7MOTw0JLwGA0CyKVr1CJsUZbS/M=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"There was already a way to create a canceled task that did *not* take a CancellationToken (via TaskCompletionSource<t>.SetCanceled). The new methods *do* take a CancellationToken because technically, that's the right way to do it.\r\n\r\nThe CancellationToken is observable if that task is await'ed - it will throw an OperationCanceledException whose CancellationToken identifies which token caused the cancellation. The use case for this is rare but real: when calling an API that can be canceled different ways (e.g., a timeout or a user-requested cancellation), and if it's important to determine which one canceled it, then the caller can examine OperationCanceledException.CancellationToken. In most cases, just checking CT.IsCancellationRequested on both CTs would be sufficient, but sometimes it's necessary to know which one *actually cancelled* the operation and just using IsCancellationRequested would cause race conditions (e.g., if the user caused the cancellation but then the timeout expired before the CT checks).\r\n\r\nIt's also just cleaner and nicer to pass a CancellationToken because that's the standard cancellation semantics.\r\n\r\nI think the article you referenced is a bit confusing:  \r\n- The ArgumentOutOfRange exception is thrown directly. That is, if you pass an uncanceled CT into Task.FromCanceled, the exception is *not* placed on the task. It's a usage error - a boneheaded exception, as Eric Lippert calls it - and is thrown immediately and directly from Task.FromCanceled. Code should never call Task.FromCanceled with an uncanceled CT. That exception indicates a bug in the calling code.  \r\n- You would (almost) always pass in a local CancellationToken. You'd (almost) never want to pass in \"new CancellationToken(true)\". If you find yourself in this situation, it means you're writing an asynchronous API that can produce canceled tasks but does not provide a way to cancel them. That goes against the common semantics - a more appropriate exception would almost certainly be better than OperationCanceledException in that case.\r\n\r\nI'm hesitating using \"always\" and \"never\" in that last point, but honestly, I can't think of a single situation where you would ever *want* to pass \"new CancellationToken(true)\".","postId":"2015_04_a-tour-of-task-part-10-promise-tasks-76cdd5a7-1909-3432-9e00-8acd3cd4350c","replyTo":"4bbc17a8-d527-3b60-8856-f32f0cdece00","date":"2016-08-20T01:05:47Z","timestamp":1471655147,"authorUserId":"disqus:stephen_cleary"},{"_id":"76e7adce-41a6-372c-84df-27b3c2147ae6","authorName":"JullioSanntos","authorEmailEncrypted":"nqIkxpLDlENPCi6vgTlPtDoYamt6LTbtbku3N9Yb9Fxfz4LuHJGCduIYn0y/LCr3x+QECRxQ6cBQUkRgZ9bcrYKRjZRGkRD4VRC+n3giZn0akcacssKSj+mee30RHfgORMeeQp69PJZ0Rr+qNryWUmiwK56wG/6mf1b48b8kU2Jhsa1Dm4B+10h9sVirKOLasW0CbHV9QAyP7KuD7tjUs/uGgefns5uVLnauFREvA2SjRI8Xqz/HP1FRIDPXRP/FWovx4OHyH/eiHy3XM4r3eryCueuA4dVU6O8OhmVZrNqOkCAPtbCpeQ+tl0iIcnNRcL0uloL3e5cVtwqaYINrBkqQC+DntjEss5fTz+QKgve3LNolayLa1pAotbQ6cuFTarrq5qblxa/Edm/S1w9vVeR4u+gFSYh5kiIZjQsFXMzegQrFSSkINqN/Ydp3heTcsqc5I7o0dk1BTYs7pD5p8ehiYxrttJ3cS7rXS8UcYQfixK6r5xq8B/Cs/qP/ojOk1lLGWa7O9NVk9IaQ5MZ4tbSIMPSsK7vIW2XOTxT8hlPws4DrzJRJHdGhIZVEHoc/HSgfpJ8pZGU5zTKo8J8LzbRrNjpr7ciqVkTAGhV5J7b91Fp7yY/170/pwLB/hinIugvMHiXYop9wwKjDJOnPcGZRLftOrNMtaV3MSAww0d0=","authorEmailMD5":"bfbe92bb4f239103a9c038bf4d0572bc","message":"Hi Stephen, I was wondering what are your recommendations to create a Class type that switches the mouse's cursor to a busy/waiting image when waiting an array of Promise Tasks. For instance, an async button click handler starts a Promise Task that will take an undetermined time to complete, therefore multiple clicks will create multiple concurrent Tasks, potentially.   \r\nI'd like to have a generic Cursor singleton that indicates when there is one or more Tasks running and switch back to the original image when none are running. My initial thoughts are Task.WhenAll and a Queue collection to cancel/adjust the WhenAll if a new task is summoned or an existing one cancelled but I don't know how to get the Task object of a Promise Task for searching the Queue.   \r\nI can provide a proof-of-concept C# project, if necessary. Your thoughts, please.\r\n\r\nI neglected to mention that, naturally, the async code that is awaiting the Task could add/remove whatever object into a collection to indicate concurrency (or just a counter of concurrent Tasks) but that throws the responsibility of resetting the cursor Wait status to the developer, a dangerous thing and the first step on creating a cursor that never changes its status back, specially when an exception is thrown.  \r\nI guess I miss the elegance of a Cursor object that relied entirely on one single component, the dispatcher thread. ","postId":"2015_04_a-tour-of-task-part-10-promise-tasks-76cdd5a7-1909-3432-9e00-8acd3cd4350c","replyTo":"","date":"2016-11-28T20:04:49Z","timestamp":1480363489,"authorUserId":"disqus:JullioSanntos"},{"_id":"b1d6830c-f678-3a4e-91b7-f31d5973d951","authorName":"Stephen Cleary","authorEmailEncrypted":"adEF1yuOpMZolmXLGfKbTe3N/Xw6Q0ab8BfBUN93Qkx4tvw9YVCvEBXwvuoLcwwjgh3e34cJ/AFJFD8TrmgRnqLpELxb1arpEx/q2TWYYciJKeP2jZl5xPwQMBoC+8pXUptep8MaF3aAcGGgSHWgGtsZrOG8yzvExs5w6/xyFeKpJMg0JVIA7fI3bNG+kymeVEKG63wPETE6nt7i0EIgj92bNUDUYTGjus3nd1wvwIGSWFkEwO/tGRiymrBOJzEaYO1VZWhWTnN07G3IttJQ2d4xO8PGared62+/zsJUGSqzSDefL4RyP4rEEHr8dEYY0JizF6ufGmcuzF/W31QlBGTZJGcbQ2wqFAPjntmEG8KZbtDvDeHgMcC0Z9MXP4orVgOvL1qqjnaxjMOv8AY2/b4suXz39Z4VUJSPDoQvMb/OrWbRtcRIl94AN9jtojYqaU4b4CzHyeV1L95ErQhckaojdZIT5c2KCxyO963+fgxmUQ8XPDRXHQp9pz0odwfKTQc9EVunlFOOAPfdHNoHkJhsGl7i+hbDwGRGAA4pNMqZjUPXMfDcXssTrjhTjIQYRCAK9i4xFuYwrykIjegZhgi2JHCyavnZBhl9xRB4dqDTQ6/Jtc824et5OtLzYNPn3EHJuEFy0sUMj8YxcCXsYY8xPXyi7PScxOIl51Lm4J8=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"A simple counter should suffice. Since your tasks are added from UI interaction, you don't even need a lock:\r\n\r\n[https://gist.github.com/StephenCleary/5e02e043a9febf245df399e1d26380b9](https://gist.github.com/StephenCleary/5e02e043a9febf245df399e1d26380b9)","postId":"2015_04_a-tour-of-task-part-10-promise-tasks-76cdd5a7-1909-3432-9e00-8acd3cd4350c","replyTo":"76e7adce-41a6-372c-84df-27b3c2147ae6","date":"2016-11-29T00:53:29Z","timestamp":1480380809,"authorUserId":"disqus:stephen_cleary"},{"_id":"092f1823-57fb-30f1-8aaf-5178ffae8884","authorName":"Stephen Cleary","authorEmailEncrypted":"qw/SXCKu4YPFB/X4a1HYlcsg98aLotGmitl5pjBkAUAIBqXs52wAKiJHkJJDkl0T9ZutD/3UnkqzSbWKSD4MZLJ78XuaTAnaN/S/cOQKp/rWNSBSZALFk5cVHXh73sX9IjrOZN3O7DZSvyCTwbZJOU3LKyjmPEBHBIfwSkiqPwFGXwy6uRR0gFADayUM46zJoUfQJ8oL/KXBsvJZkzPpIhSCkLsefv0PKkROEQR33AXjNMkzq047ElzLJRHMnOcbGcic9LDkH8C4W/n+vWvoBu79JaZGSiPDL1ytX243Gh8rafav3j2ebEDiZ3V8cAgWaPDHgEtC7x0dNTRk7lSIgbecnfVebw2CQtF5XFQua59/oqOZXOv03nbOXlsjr0b7I7pHcFWYbQZXXS2xNtax6QIq2+Y6e17XDYBOjD4vkCofR5oBCWQNFDWNF3omkvqFEnjtJq2pAihvdg/01TrZMXHUif1whBTV+aEm+1sqHsF1k0pVv5/UW+G94gy/voL88GMSTZduwMqEmtVnG/un6OW5ItPhZmhDOeGc0X2tP1NjYLGSpo9JiVxbkqfZBRG0+8NJF4jDcfOLR12GAiefBuTqQJxihYedCxhiyC4I/4+Xxar8BVd7KvzomkTXdBy77gF0N+2sPqRo5Ev7DH29lPyiTGx8DizLtMCm/+s80ss=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"The default for ConfigureAwait is true - that is, resume on the captured context. However, Console apps do not have a context to resume on, so it doesn't matter in that situation whether ConfigureAwait is true or false. The default for ConfigureAwait is still true; it just doesn't have a context to capture.\r\n\r\nASP.NET Classic does have a context. ASP.NET Core does not.","postId":"2015_04_a-tour-of-task-part-10-promise-tasks-76cdd5a7-1909-3432-9e00-8acd3cd4350c","replyTo":"691212f3-a053-3910-ae78-c40ed2dc0dc5","date":"2018-04-18T21:54:40Z","timestamp":1524088480,"authorUserId":"disqus:stephen_cleary"},{"_id":"691212f3-a053-3910-ae78-c40ed2dc0dc5","authorName":"TooMassive","authorEmailEncrypted":"TqYLL1ZIqDWTINuFjLPoFvJoNkX+CEHFER5t7ZVbQxHwYmGXZA2+Jc0YcwZ2zhUWou+xb+6uAdK8tBpmduyXUoa1pC+dA/tzwsBcA0gNdWmRU22hC0GJXMfLgf4HAXvs4KGZSGGeDjIuWJlqtwHbuNzY0tndPExyaNlP9HNGwMNICsq2aZUop4NcW6BD1xwppCPPwLfp17hszk92repREsfNHT9A6savXZMpTRzbI/xNgII61TLS5roJuCafYTm1yLT666zc6wghfl4iPhR6nlHK25O6wV2OxZGKwdxyHDZNkkzWovGfKXKH13tMS2yrj+DoQyP66mokA20/ZWqtFV7TaNSm1RsaA0sfu2YHlh+18PdAATkQAyed5XdmZt0m+wheX6AI1sGaNUkI1FBZ/rLdG+nBKT5UYe5OvMAxr1b6pzL89YJVa6wiD9IdvrC4aulBiK7libnehMjgOTFGQEwV+QmtcTavU/Cucj5bLa/gWxmhM0d/n612GGWTr3UYlhq49tv0alTFhwSW/CCUnKBaf9NdkkXqXrlkLD3u0FscEggGTheKdIUrTdqeXxnr1XD97GH7uLfjyXzgtBHQL4bv60pVEy4UWHA46d7LbODeeaa6N4F1V3OlHjSYSrm0R6UtkNcliYfcaFtpS8+tZtdbqmhG+Rs7+sYKFrVw5u4=","authorEmailMD5":"9370c615486a06afe173ac839806474c","message":"I'm assuming the second part of your answer does not use ConfigureAwait(false) and is the default behavior. Why does it behave like this for ASP.NET and Console apps without my asking? Does that mean we don't have to worry about ConfigureAwait(false) for those two scenarios?","postId":"2015_04_a-tour-of-task-part-10-promise-tasks-76cdd5a7-1909-3432-9e00-8acd3cd4350c","replyTo":"75323c44-4a83-3eef-a0de-6ddf036a2aa6","date":"2018-04-18T19:06:34Z","timestamp":1524078394,"authorUserId":"disqus:TooMassive"}]