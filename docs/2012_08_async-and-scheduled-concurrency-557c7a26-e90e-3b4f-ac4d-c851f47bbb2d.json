[{"_id":"b3fd46ff-a68f-3a59-ad90-2727a6e70311","authorName":"Svick","authorEmailEncrypted":"","authorEmailMD5":"","message":"I think it's important to understand one crucial difference between the async synchronization primitives and CESP: When you await inside CESP, you implicitly release the lock, but if you use one of the async primitives, you still have the lock.  \r\n\r\nThis means CESP is not suitable in some cases (but that's why there are other choices).","postId":"2012_08_async-and-scheduled-concurrency-557c7a26-e90e-3b4f-ac4d-c851f47bbb2d","replyTo":"","date":"2012-08-26T03:54:34Z","timestamp":1345953274,"authorUserId":""},{"_id":"92994677-1c07-32d3-8089-e806fc7f6771","authorName":"Stephen Cleary","authorEmailEncrypted":"u6TFSd8rlkZOfPZhbj4mPaLcyKewzsj1t9ei7BwiJerksdaViWpGw3ziUFToG3zJ4iLoqvgY4D5HCS2RvJ6tvp/Lz36GiwYRUW+M0Xkd6gMu3+sNVqgYqSNxvul9JhqCAwWez/mogIlWBS87HDwKSZgZ7fWAa3/9pH3erz1RQxdjCxNe9q10f/DWpxmORjPF5gzZDzTnrkDXqDciwsMcqFRntIXba6RVLx5K1CJ3m5SSwDZdXASk4iDHnvkV1Pp6d3S4PZt9cL8rxWOGeLjExtTq1gAW9N960SVsSQNF47c1nDLm/ZJKRoOSU2XiWpYmYCs3TT5yEE/OG6pfiq8bFmVXeUfnCV5aIMoj4EsosONe166I0EiEbm4uNboqD65Vkg0sXtTAfmeLKQYTX4M+fBBJodKjA4onjpGDtI/WVgAUtHDcGIZVw1KIDJVqiLjgqUiQt4/LCAPtVO73MJwKU4XDfa6NZi/Ep3Nu7ih5Tox/k7gg6T1OSMAcRV4xMBfWefgwjr11Opy4EljSwhhYWYqMCrYZizRy63djjlrUf7LnHyhyzjZ7p+rZ7WKEDEyDx5JJjrd88zSm9j2I7eYQwE0XbuhtXeY/fDjXF4Lp7zVwKmgvtxm6Lo3Z7z93WVOZQj9m7JNx4ThUoumu0IZfiI8l8vqbbpG9tn+fRwoV4/c=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"An excellent point, Svick! I'll update the article to make this more clear.","postId":"2012_08_async-and-scheduled-concurrency-557c7a26-e90e-3b4f-ac4d-c851f47bbb2d","replyTo":"","date":"2012-08-29T23:29:46Z","timestamp":1346282986,"authorUserId":""},{"_id":"20d6784a-081c-307b-b61a-721315371b47","authorName":"Stephen Cleary","authorEmailEncrypted":"eTDIViqrS9aqqBfIHWcRe0QdY6IIpQraMJ1R1md0Cf714xpUR9TIKmaLoHmniubFt5R03vjcKAsrphVye6B0UNhijzL8e8ooMzhQMCHwn3/1Xzb5Krtluq+IYfDT2xcv/LSP7JBDC/bPTdL3ZoT8FIIzFGIOcXcxZ19hzAcpN/WUXC0gRpkoBRAgRZHhCHepQTEE4/NSGynp/EUu+QHs5v6QMqIsOFTnnTLx2VZXcfWA2LSMflvfOLLfN9OBOQUYvTNZOx38waPcFQMDIUe0nge9ALrojKOGWhdoJpVUzlBGXbgtUGn0qXX4Zx7FSw/Dyq6bLT/bKluyFAcC+Vw5nG5NfY5cJYSTLo5i4pEzo1e/02o9jPwnmH3w2523U/u16GhqbS1OvsqDeewInX+UHHD/emaNt/39vtqrRUK8fNIdJf/zqxslrp7szml+OWn1WcHpLd0swpZp5mO2DlaIRdM4TZnCOqgQc5F8/xv1GJM+yJd7FYFVkv4vmWE3hhJPRk7SqPkgzgPRGMFumFbuCpUkvj2il2ZrtamQqYEDnQ1U+kVC5laBmRNhNVqafNa4U9x5MU8/P2Qm26YNZgHT3ad92W7Jpo/mw/WhIqXRWrk0c7NLC1bYrTvYBanw/rA1PhEuXaZUgEclzu9ML1IuZyvfIeSbjKRAbE9quCAuXKw=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"The resumption of *that* async method does always use the thread pool. When that async method finishes, its task completes. If another async method is awaiting on that task, then *that* async method has its own context captured (or not).\r\n\r\nSo, the resuming context decision is made only for that await. If a higher-level method does not use ConfigureAwait(false) - i.e., it wants to resume in its context - then it doesn't matter whether a lower-level method uses ConfigureAwait(false) or not.","postId":"2012_08_async-and-scheduled-concurrency-557c7a26-e90e-3b4f-ac4d-c851f47bbb2d","replyTo":"c7acec81-bd9a-3d42-9094-80e9978a62f1","date":"2014-09-04T19:20:27Z","timestamp":1409858427,"authorUserId":"disqus:stephen_cleary"},{"_id":"c7acec81-bd9a-3d42-9094-80e9978a62f1","authorName":"Wojtek","authorEmailEncrypted":"edUdhBsCXsdQ2BapehIYKFTSveNQU3ezW8rdfsUIqlNm8oxqpwDkdoJ7BbY9wBfIpo20ikl2T83j95JawYPnZ2GniiTQbZsE3AUHOrsQ0OABCTFMcZGZ799zrA4cQGZ+Md9fH7pxyTbYKiIn3vCJOKr5TjwmpoJ10Px/ysidwMwVAybUH+ZKSNMRFse4imUTF0zD9tr+AlgIFwsqmFbwaWBCY5HCogWVxS8ssnMlbjOKNQXkLuSMUvT70pP4rZbVm4ULYQ0N3gUkNTkLUUQTsaxFCdgUWb7XljZLJontqKzjjKRMhgEWOIkGiHVgJD1xkgMJj291SxtfWM4GNC9pZ6LaDxAKNFxdw7JOzdlwh0TLbZe4dlLD5mw0TezHAp4vO7g41wMKwwKFQTGPYU0DpJhUBoOGpLFGF6ayQ6Osyvbzs52NvCdKRlTosiMJc842E19Qga04Zhseq1wIKnWAxM4dkHPIn8fgjr4QCEIcdX5o4A0j1F06q4xvoJthdPj3IdNfEjvCKIaJoVp1BDsmwc35C6RLJLBXF3LmItcA9/HCCuFv6oEEPJ77UYczdVLarSSNnH8sVPToLbr1WZThmCUN9viqg4epZrnG/cp/9k5Wa1ptCo79Hw4TGAt5goUrFewlb84/+nZxPtoRfQXbEMD1liRWzr1w+biw7FaQTkA=","authorEmailMD5":"ce6c5aab81a98d0c4d3c5f3ab7633ab5","message":"Hi.  \r\nIn your blog posts you advise to invoke ConfigureAwait(false) on awaitables wherever it is possible within asynchronous methods placed in domain layer libraries, for performance and deadlock-avoiding reasons. I have a question. If we invoke ConfigureAwait(false), does the resumption of asynchronouse method is made always in TaskScheduler.Default (thread pool) context, or is it done in the context of our custom scheduler provided when creating a high-level async task? Then, what is the context of async methods invoked during resumption. Do we irretrievably lose our custom context (custom Task Scheduler) on entire call-stack tree in case of ConfigureAwait(false) was invoked.\r\n\r\nThank you for your useful posts.  \r\nBest regards,  \r\nWojtek","postId":"2012_08_async-and-scheduled-concurrency-557c7a26-e90e-3b4f-ac4d-c851f47bbb2d","replyTo":"","date":"2014-09-04T19:11:34Z","timestamp":1409857894,"authorUserId":""},{"_id":"5c460e43-f88a-31d6-8450-539d08e4309c","authorName":"Dan Gershony","authorEmailEncrypted":"EtPQTiGTUxGzczrBegy6DcpTLLfHc9MotuOODHr1/t/s1Bbk5foyZHk9Y7h0F2ZcnO/k9sHZlrhq/WgTINFdDOrUkQZw3Ke7/KFDb2bmbWMYtPCwJG/kVgtapH2nZy5fkAB0fviBF5sd9i5BoSGjaWk51wfMnrzSQRnQDDZXufXwF7giJgg+8XkHFNpx8LAkDICyR9TVR0C84K1XhMLN+q5phqhTHhi+apYqONwYm+rvxB+PoiYS9wok7SPx9alYQuXCpK8BKo2iI2zAR1MwXKjz6JLhh9BNdXZ6BfvuT/r+mKUZIjQXJa7kZo7f4d3VaZF2UPCywrwcuoURzqoKlibmOWljzLBIuWizCY6XDh/dbCF877JRGSSeHbe9njEGfNM7ERejCVfyO7Xrfq7DcaYD+h+RNQR58sPnFq/opC5nOtdZBQivhdKCwjoSXpS5B7Gaa+WOL6hs4zEvicfLgIRt60oEs+3vJDEehm9Q23fuNt8TsoyA8NMbBSVpsN8htI9aXKKwp5o1i6RbQeIp335mEhPCicEpk0j/U70EbHZi+7cT5YbDCcBFpl/VbKe+PMe/o85ZtA5t8BOiLcr80g82/kH1TTsU5MNcEyFOXUDce52Piav+uR19kSvtpn1/ytvV9Csyh5vGUt0B5iz4lCvW926aWoXNGXngAXaz/rA=","authorEmailMD5":"71adc1449fa9b5644d69a5d25db9ecd8","message":"What an interesting idea.  \r\nAnything changed in the last two years in the scheduled concurrency approach?","postId":"2012_08_async-and-scheduled-concurrency-557c7a26-e90e-3b4f-ac4d-c851f47bbb2d","replyTo":"","date":"2017-01-13T17:13:25Z","timestamp":1484327605,"authorUserId":"disqus:disqus_Mq904YACXH"},{"_id":"152e5833-cc7d-336e-b070-3fe9360f9f5f","authorName":"Stephen Cleary","authorEmailEncrypted":"f2DBWpv0ByPFcqDvE2NhBSYYjJNZGcudPo+l02joGqqUMgZfwtA7wBsweRdadhV7d+v0B738/AXJcJwOhiXd0I3TXmDE6O46w3BwFwbgT/IuGWKHKQ8X3my/oxxHxoCtl6/TdS7N/PfVjP9Jiyj1zF3m8uho1uPq9fu9+o5jNtZ46QhIGxQMY74/VeSwAeTnCwLOtmdfYrOmWMf9gkAJPIM/3NFxFt2mqKG70ZPqEt8VRHSNrrvc060FGWPIrbytnyNWYC/juxfFjAAfqEf6QN5UHTkbjG7ThmhWjyDT/7pFxPQymWsH/kw4Ohd9uFOqbrwLIViyYlg4KaNRhpmwG2e1fN/GD8QWrBJ4IIXOXFpXQw0WcUXN9HQJ06OZJ/qIYVOyoadNeo8dmMAeiMctLgboKiySfBu1CB0KSwnsSS70C2jMvKzoIef//9KBjmpXPcLO4+hBpyUUxxukQr8G8N5Qlih1iEGBRCFWV1NxUVvOlctDr/YvM1JALc3FSNBdkZVyg3rwpwOkvtMuiwKQEU+Q7PJyLTqUGyi+0vZH33orfzbaH21CjCErBoWDpxPnWfVh4zD/CY76lCC4T7bWk7J01C8vTKDHUdxCOziTzLoYh2o0zulovhxLr/KoTHZZfSuNrpaRrsRUYn/JM7DMMpYE4qes2GLrKDBlpISnPsA=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Not really. It didn't take off like I thought it would - I think it's a bit too complex to reason about, particularly with asynchronous code. With scheduled concurrency, asynchronous code is first broken up in to synchronous pieces and *then* scheduled, so the granularity doesn't match what people expect. Most people have ended up using my AsyncEx library (or rolling their own) instead.","postId":"2012_08_async-and-scheduled-concurrency-557c7a26-e90e-3b4f-ac4d-c851f47bbb2d","replyTo":"5c460e43-f88a-31d6-8450-539d08e4309c","date":"2017-01-14T14:50:42Z","timestamp":1484405442,"authorUserId":"disqus:stephen_cleary"},{"_id":"34ee4c05-3e69-30e7-a606-d6a4b8724bb9","authorName":"Dan Gershony","authorEmailEncrypted":"OlNTiXazxpVbVmhJN1Xh68nqltHm52cK3hl9QIJHMZ6LwUlJ+FsyeBE6kktoJO7Sp9fp2KLyPFnxsM2b9ZPpSGwvRX238sj+GB4itDBKEDVzdEHYw1WxJZLS2Y2/mgVLS6+GGu4CYE/ahkL70C0bfevV/bA5rauLxs7j9MnbRksXJs5h0mtVYfUb8LaZNv2btJB7axD09F4YNHZs2/ykqyXzkIW9FwjDmpZaLTWs4kJx3h7JpzFtjGFZ4gCBWK3TwIaUvpbLMBrj8u/L4Jg3YeO7GHyUWmprEKbY6MiAYHPC76poO+cRr4irmM6GANvxCT9guNE1KmNhCpEVy23AnmnH8Rl9mFubjjyXKC2IvH5knWj/JObuCTC4AD2vFpvgf0Z35DRU1kk71LQ42AtxZH1QwF/OPjBo5Gn9TA5r0mEN3Nf2wc7ar9k9J1Pom0LayUdSP6eceOHJ0wNxiXuIWpQjYD39zTh9Uc002iAT7KUqZchI6gH8XWx/imLuMK3zVs1JzvIQznlLZRA9bvHpSs0b55lDyZ3QxB0I6TnwooPdagyMqENQ/ojuDgZGqN6wVX2+cI14xPuwHgWaokA2Uqf0Z3YTsp03SnLTHL1rKUGa2fiYvCcr5G4Yxf1VbZ3ncBDJBVnAvOXQqNNtAGAHa5ujq4aE3HbLOYExDK+Qzh0=","authorEmailMD5":"71adc1449fa9b5644d69a5d25db9ecd8","message":"Thanks for getting back to me. it is indeed complex but writing none locking code is truly useful.   \r\nMy team is doing something really interesting in the Blockchain space, we are porting the Bitcoin c++ core node to C#. [https://github.com/stratisproject/StratisBitcoinFullNode](https://github.com/stratisproject/StratisBitcoinFullNode)  \r\nI do consider using the scheduled concurrency approach to avoid thread locks when doing read/write operation on a Dictionary (instead of using ConcurrentDictionary or Reader/Writer lock).   \r\nThis raises some questions, in some cases we have a limitation where a db operation can only happen on the same thread it was created, does the ConcurrentExclusiveScheculerPair.ExclusiveScheduler reuse the thread or discards when no more work is waiting (is it configurable).","postId":"2012_08_async-and-scheduled-concurrency-557c7a26-e90e-3b4f-ac4d-c851f47bbb2d","replyTo":"152e5833-cc7d-336e-b070-3fe9360f9f5f","date":"2017-01-16T16:30:41Z","timestamp":1484584241,"authorUserId":"disqus:disqus_Mq904YACXH"},{"_id":"319978d1-11ad-3c14-969b-65c1ca4e9fec","authorName":"Dan Gershony","authorEmailEncrypted":"Zvg1ABoQmuE71u9Af4nWVj8ZO6XbGiX5GvNkXsNVBSpIfS6sQjXneuEqQVFE4mNXrVPPai7FWEXuSB9R71q7wZejrM6qGiL+t1JYzi3puAVzzJvsfJU4wwA2IMTbCGnJSEvgQ2SAgNCpe0U9982ErcWqX48KVGmNDrGsATuyuxSOfsBF+lk4jRdYuaYRg28AVTxU60CwtBqZPfvm3m4KlXmCTH28paxeaVWXnj9FjKT2gOSqlS4+PWJpuicvbkXtaGPdbYYLufzejxwe2eKXLZsQtkduTRmQWIETL2nyQtQYdhpCgmvwvqXsvXslj/vaxG/gsnrwtClQC1ytfTVvMl375lfdD2hvrJzyqH9PzkACqy/9xMiKih72cUkg5sFYjTj32Jr3fqov2cZskeRz4DseQQPNYumNxZlJJKOiElrg4vOQIOeOixvud1NOPt/cqBqNxFzDoztCVQ+mRXDX7QRauDyzOD2WFu7i7EhnI7T+GG6j+bO2NbBNcvSU2KS/zuBYBXcRC9Qiyqlxo2IhNbrPVx5MIaPB54cOc9yLdVMmdnvOgNoyPn9KMLGWA2Kc0adNHV+JECHK3ChmNM4zNCjcgwiGxEEIEvLPGGmunhtx1lWVomUHOya73C15gaSUp3lFY04OvbDIsquNPI87KefbCIVSgcn6k7cFac1lvN8=","authorEmailMD5":"71adc1449fa9b5644d69a5d25db9ecd8","message":"Thanks for the answer, it is complex indeed but the thought of writing code with no locks is very interesting.  \r\nI am considering an approach where i'd use a Dictionary (instead of ConcurrentDictionary or a ReaderWriterLockSlim) to store data then using the ConcurrentExclusiveSchedulerPair to schedule tasks that read/write with the Concurrent/Exclusive schedulers.  \r\nThe rational is to write code that never blocks (I am aware the ConcurrentExclusiveSchedulerPair does hold a lock internally but that's only to insert tasks to a queue).","postId":"2012_08_async-and-scheduled-concurrency-557c7a26-e90e-3b4f-ac4d-c851f47bbb2d","replyTo":"152e5833-cc7d-336e-b070-3fe9360f9f5f","date":"2017-01-19T14:36:41Z","timestamp":1484836601,"authorUserId":"disqus:disqus_Mq904YACXH"},{"_id":"800e4bcd-ab2d-34b7-b8ec-4fdfdaaa820f","authorName":"Ohad Schneider","authorEmailEncrypted":"t5fGZEuoEKhJb+AQ+mFAtt6yOohEW92tJq/pBRzYQzFKqGeUUggVn0QbZCzhxPdB4hJn+ouG8ctWYcch+vF40C0FVsnbmS5gGQSEmy3+L8jhzpshmM1+XxOxnb3IczBZF24ekMH7MGnGSS99p/t60S2JSMZifiu16TEzAlz0SRjdVIM/6zVhPfVosSShthm2XD2yeHClVyaTu6cUB3Nnry0rgg6KRyzarwWnooFZf7gubLqZf1Hn5nk3qlY2T0s2PsKUDzzt1oBjfsXHhdLPzaaDoIUwXceE6Zb993cg9Kd3tG7aScLSRzOR6NwxScVpZR8ztR7mQVSLD3K6AoW2E/+CqyvyeDFTMGWGeXpIqLODbKyr7aqoWmSOY4Zk6p4+3jXeHW7MT6SLr22duTYTHKaHJdPiqSABKzFzyNQkldbduJSqhZ6kfqtTYl8b7ovWVN8b+GRagLvPWnCnJtLxJtJNcej4ZghQIc+AfOpUXjKZDn9HnODk0gCsIqfcM3baID53Z355U3Rd3b+DaqV0FDQezGFPdU/lkEdECGcAgVu+01NHogc9Y1Df/oCNsn1aKYU6TWduj5UFQY8DOm3kCDpec86P9v9bWWnkXl1fGbpzKJ4qopSkWfZhmWhdgu+ZrTTt9FmwQo5atP3zUOsldri+U758ovEBSeZ5s1Q4D1U=","authorEmailMD5":"cacacd08cdb74729cd4a964ced03f62a","message":"\"If the method later resumes on the same thread (e.g., a UI context), and the “other code” attempts to take the lock, then you have a deadlock\" I don't think this is a good example, because vanilla locks (Monitor.Enter) are re-entrant. So the other code (running on the same thread) will succeed in taking the lock. A better example might be the UI thread launching and waiting on a threadpool thread that is trying to take the same lock.","postId":"2012_08_async-and-scheduled-concurrency-557c7a26-e90e-3b4f-ac4d-c851f47bbb2d","replyTo":"","date":"2017-09-30T12:26:25Z","timestamp":1506774385,"authorUserId":"disqus:ohadschneider"},{"_id":"914c7bec-29d2-323d-9fbf-bbb496bab434","authorName":"Stephen Cleary","authorEmailEncrypted":"UmxBSMR48xB6B9z3rUBjwipNjUJOJ1xXIQqQbenzDT+jmhCwazzrFdeqe1gZaY6/n7/Gjk2uP88NaMxD/ikX8tq0keBN/wkxpkoiL1yctTsUL2bAXksFqtTnoT6JUoYASx5N9odumEUt/wQoMUXyf0HMJT0lrEZBRLLYiNosKs9W3IEyVk4tHpNYoULCsF6h18elaQ9d0I8do3/zlwCop/C3MU5VJCBrEpb815kFg6maThop7qTS687xsmJWXYE4750AK4SZdoOtfS3cGvoZJlMSxPf4kiaLjF6WzxdLGyCTGI3HgWMp4rnKJqUaipEpPZa2Hje+XhV/oSKUOmR4vYtkcGYCYd0p4MXvYhbo98U04Kckf0udprGIbTu70wy8RfuEYbq3s7APP8D3tBJVZwppNvz1QrnmACWwUZzsywIsHDcwjQuEP3oa6HM0VuP2XppFfveYJltOywq4Y+GDw2YZMkogJUcPtKUTnJeMvBh/k5BVUaCuAdSqmDQ/8uK1DJ0Um5sWxQT/Vhfd51c9/KUuB1sE2rzONE0Z8pbHpbNLlcTw6YIIZMCOGVGYvOL3hDCAxYoYzvQCOAYCbERP4jCDKqSjE4ASybE8HLqybPKvNxWr9rXma/NJz8Xrvz4swS61FxqZddrcSxi9JyIP9dNTsV+MbwpyyNAl7+7Gyao=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Good point. That phrasing is confusing in my post.","postId":"2012_08_async-and-scheduled-concurrency-557c7a26-e90e-3b4f-ac4d-c851f47bbb2d","replyTo":"800e4bcd-ab2d-34b7-b8ec-4fdfdaaa820f","date":"2017-10-03T17:47:04Z","timestamp":1507052824,"authorUserId":"disqus:stephen_cleary"},{"_id":"1eb41f8c-a342-34a5-bdc1-e220121c7b38","authorName":"Michał Dudak","authorEmailEncrypted":"Q3utvFt4PjTehP7TV1B2YRi696gyyPsuSDWiJAKT1JklnObGSIGG8czv+ZPbsNdShZXViGbDDU8z+mNfc88bm+0SJp/36NjHKrBl1tOxD287t4yDOU2AqrDolVYqi3gigJiDHRaUj9bFtth5StJ8XE14lkkryewXiK2fixIcvcLE/pV8xzxWTtFUpVtjrZp/3cJxxW+9GcZzAQqYxnRbp6fSuwTrOsITnkFlKdAwTxwdv7u1TfAHsZYVrdE6baRpEYsHvBKt6PKPa5KW+if2Kp7j6vqJ7hg6kX4F+Qzu1B2qXCegMCfkd8zY4ZaEdC262t/mxrIAjX4D3GT+CsYMKHss59/8E7P2Ue8k3pJB/WIZlVySvCnbzx8ac0qOpZRCtzBSUMAxXOp/+XHh/Ws0H6pWAumjnhsB4tfAWmAZYzBoLyIRnoMvnrOulsn2XhRAkLYbJwIMnCYUXaq+5WP0Ql6IiZBMsQ6puqxlXL27EFPhGLAoKW6lnnm35GgAlUHEAMDt8BWF8ryIxLJ8SkK9QMVpa2n0I/D/CvuFB0nPNgvD7LLrH5GcMQyZYcH/l16lJtshvB5ZNb4vN8yAs3/xDcbE0fT1FTWrBKPAsT3fbeRagjUpio4wimVabNJoOGuo4laTgi+J8CvvRvS+J+IRb7isw15s+6OZpaxzo2gPcyA=","authorEmailMD5":"1b2234d7d08acb31f90a97ef4bab1176","message":"Hi Stephen, thanks for such a great post! I do have several questions, though. I posted them on Stack Overflow for more visibility ([https://stackoverflow.com/questions/48346489/using-concurrentexclusiveschedulerpair-as-an-async-readerwriterlock-equivalent)](https://stackoverflow.com/questions/48346489/using-concurrentexclusiveschedulerpair-as-an-async-readerwriterlock-equivalent)) and I'd be grateful if you could take a look if you find some time. Thanks!","postId":"2012_08_async-and-scheduled-concurrency-557c7a26-e90e-3b4f-ac4d-c851f47bbb2d","replyTo":"","date":"2018-01-19T22:38:34Z","timestamp":1516401514,"authorUserId":"disqus:michaldudak"}]