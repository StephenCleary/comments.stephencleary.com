[{"_id":"0eee7c8f-fcb4-322a-8d0d-7e15ad62bd9e","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"Can you give some examples of exactly what you mean? I am interested to see the difference between right and wrong.","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"","date":"2013-10-18T14:17:15Z","timestamp":1382105835,"authorUserId":""},{"_id":"3ce2c509-e7b5-3b92-801a-1eccd0f7f049","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"Yes, some examples would be very helpful! :-)","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"","date":"2013-10-18T18:09:02Z","timestamp":1382119742,"authorUserId":""},{"_id":"5b14da16-4a7c-3f4e-a74f-1fa9afee5261","authorName":"Stephen Cleary","authorEmailEncrypted":"VVST5tuFgnCHA/mxC8D66sP0qowgU1SwX97S3IhkQjmkwOlvzqsvwRnUQel1Fi1wcPRrc7cDCbDIv366V82Ll/Jymh+Una9PxKP2n7mTCDbrwt66z6bXASDiFm1Rsd/t4PLpbtxkKK8iwi1QHcII11crjeuqDRE8kG9K71cVk/DiTHWj2LefedsIowgT1L7a2zfVrIMbzpQ/VPR8JxlLlMDkb34orB24y/MJrcy3TNPUJxWzTz7AQWDoou6ded0JHeaHj5RNgveY5LSmge+HUqWD5Qz5ovXbLQyJiJjSF9l3DRR8gpMRzv0sg5cWP5vBvycJCf7f7i+kawzPcNouRBdVsvGh4vIJNBOmoZ6iKiTuedEsAFmi/mNjQqIp58GOGGelwAc6+KvBZ9n6YYGMRF43BQ0/zr1DhJ86bBVg2cxrYBp77EVqJGIjxlfm+3YZpeJazyfMsmcVCzvgERngQM+J09D3j/0E5cDyQquUiboyRd2iG5t1BZQ6SbEIv1947eJC7MSIT0emMMCNKYFT8NjCTztg87iGhAzZ3lCJ6WfuWUnn8EBmutkY8hDN5Z0y5zHSRlP4Z5T6IsWfGE+Sclc42XU6r6P7Dq9JdqrZIgZULLvvds3iDNaGbesxFf3XUarlVeG0ydIvB+9vtMNVG1ykXCg/I2lX1gFLmg/Lrk8=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"OK, I'm heading out of town (to a place with no Internet... at all... not even via cell phones), but I'll put up some examples on Monday!","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"","date":"2013-10-18T21:17:14Z","timestamp":1382131034,"authorUserId":""},{"_id":"a82931d1-e111-36d8-8ecd-50982acc969e","authorName":"Nick","authorEmailEncrypted":"","authorEmailMD5":"","message":"Yes, what exactly is CPU bound work? What is different from async tasks and parallel tasks?","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"","date":"2013-10-18T17:26:55Z","timestamp":1382117215,"authorUserId":""},{"_id":"5662b57c-13c4-3f2f-afa9-dee42c154d70","authorName":"http://devtools.korzh.com/","authorEmailEncrypted":"","authorEmailMD5":"","message":"Yeah, examples would be great! I will wait as well :)","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"","date":"2013-10-19T17:54:38Z","timestamp":1382205278,"authorUserId":""},{"_id":"71a4d1ac-26f3-3af7-88ed-b93a5448eab6","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"Looking forward to it. Thanks!","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"","date":"2013-10-19T10:48:53Z","timestamp":1382179733,"authorUserId":""},{"_id":"9b57d0bc-c3ea-32d7-8d8b-a5080118070f","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"Hi Stephen - did you manage to put together any examples?","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"","date":"2013-10-24T01:58:37Z","timestamp":1382579917,"authorUserId":""},{"_id":"c0feaddc-c7a6-3143-9078-babd0481a9b5","authorName":"Stephen Cleary","authorEmailEncrypted":"vQD4r2+cHBW/27b1kamojMfKSrW699vC6PGNxmzAROWt+xK6jDMrrbGshEkFDBLpts6iOsYPzLEP09zmpOo/6wBL32R+QGBzpdNhJ22E5O0HuOdGi75mABUT2oFN9ndlRf2RTVmxytRlNZCEkp+LGVVi8RZgoENlIsX6/4YODNikT00AeEKFQfxM/kG2iwY3U/yrR9MTs3ecIXTy+ofuyfnV5VY6mYgXRj+rsvSkdOVel+homdPlTwk8+J/MtLa2+A8z8MRIlVdUADQq9GMRwACHjH5OiyN7xC8ibvVXZ7KaYoHjl95aENpaIYkSMtUxfMUeYWyT07ZD244qCvXXADRhP6e5YjTqNip3T6Clzx1PgnDTCgGA/+L4uRwg95K1XvrKS9CxFe1ppHdy3KUX6PHvoRvEg9XDpKoC2h+0VBe2BCsipDitrSbDnHkmB5eMJ4nWLS0qokHMr0fEazEhPfovOldLEWUnr12PneSBislXlos+tbOmz7YVU4HkcopKTOdfHCwigGYQCkecZTZRPmGLUXLUZoY9aEmd0ODCz20CvKv+WZg1+H6JdNBf2Ak79EGZoeQORvqor2vpWsM/yD3+1oGLmvtQDmh2pKfidVJJqmFoxY6fwiEb3mzHW4DQanZP+EePtGBKEfwgRO8Q6fHKqfoEKWyeaxuGHuShquc=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Sorry for the delay, folks! Examples are going up now...","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"","date":"2013-11-06T22:38:12Z","timestamp":1383777492,"authorUserId":""},{"_id":"199891b7-640e-3e23-848f-9599e328c017","authorName":"Vitalii Vasylenko","authorEmailEncrypted":"","authorEmailMD5":"","message":"Hi,  \r\n\r\nThanks for a great article and blog in general!  \r\n\r\nHowever, this is not that clean. as for me.  \r\n// What if I have a reusable method that uses significant amounts of both I/O and CPU? Should I use Task.Run for the CPU-bound parts? The answer is still no.  \r\n\r\nHow would you recommend to improve next sample:  \r\n\r\nasync public Task RequestServerAsync()  \r\n {  \r\n var resultString = await new NetworkManager().GetAsync(Constants.SERVER_REQUEST); // Just a wrapper for await httpWebRequest.GetResponseAsync() and await postStreamReader.ReadToEndAsync()  \r\n\r\n var answer = await ParseCategoriesFromString(resultString); // await TaskEx.Run(() => JsonConvert.DeserializeObject(resultString));  \r\n\r\n return answer;  \r\n }","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"","date":"2013-11-11T22:11:57Z","timestamp":1384207917,"authorUserId":""},{"_id":"cf4f0a5b-b5ea-36da-982e-331daa501af2","authorName":"Stephen Cleary","authorEmailEncrypted":"K43i7R867hzgYxxEUKgd2/RYMdBgrH+/gPsA6jxRqdsfYMVg2KHvtytib1RXMBK6uGbGCF/WdB+JLGyRal0OGdKzkzROhVfZyFD/rv5dyRqXwPmOlibZBsk/dZ/msAJwPS92inFDimDvLepJzqeSU4+EJIOPiRRQnQA55ds3H/EiDhryB/9mpebAPSAzg4YHKMnw4XXNBtgP3OzFxSZHiYHcgSkR2lv/v5ZC+CrfvvQ4Dx0zX+4PGArZ7lAIAGzbZMiE3XSLY/1apfHnR5B7NNixpUGH/AKHIrl16oyYo9dZUjKfkytA403vmJ7hHv9iafrIsZSj8JDq57F6QQ4hNNJAgIIRirA02Xp5TU0O1lL7YHOEtBqs9dUahtP2q9vyvVTkDrp5hmpEIjrU/xoToDoj4vX+vrcUFSIaizTeqJiw9z3uaemSqpu8LO6IIjm6y2xXc78waV2s/NJFIoD2yoJAtDoIRg4JRQ/WZeZWO92lXQO5e4cjwYamy2kIQBPPwZqDDWou9XUEVI+b6KM7AXeBd6yr3F3s6JfTDrRPzn+MF3KxZy30vsibd2nnrD6W1a8u2IJU28o9bmAMI7gnR576dVXbGvi5Nb9wB0m/CJ6sQy74v86Hp6GFIane7tZplUq4nIhbO4YxN00YR/sAYuTVf0scvEgcjTwemKvmhyY=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"SLaks has a good answer here: [http://stackoverflow.com/qu...](http://stackoverflow.com/questions/19912343/async-json-net-deserialization \"http://stackoverflow.com/questions/19912343/async-json-net-deserialization\")  \r\n\r\nMost of the time, you're not going to be needing JSON deserialization on a background thread. Unless you're processing a *lot* of JSON.  \r\n\r\nIf you apply the guidelines in this blog post to your reusable method, you'd get:  \r\n\r\n///   \r\n/// Note: this method is partially CPU-bound.  \r\n///   \r\nasync public Task RequestServerAsync()  \r\n{  \r\n var resultString = await new NetworkManager().GetAsync(Constants.SERVER_REQUEST);  \r\n var answer = ParseCategoriesFromString(resultString); // JsonConvert.DeserializeObject(resultString);  \r\n return answer;  \r\n}  \r\n\r\nAlso see my blog post here:  \r\n [http://blog.stephencleary.c...](http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html \"http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html\")","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"","date":"2013-11-11T23:29:09Z","timestamp":1384212549,"authorUserId":""},{"_id":"bd378628-9846-36c3-b7da-a21a43f56f81","authorName":"Vitalii Vasylenko","authorEmailEncrypted":"","authorEmailMD5":"","message":"Hi,  \r\n\r\nThanks for a lightspeed answer, i didnt expect that :)  \r\n\r\nWell.. i dont have too much of json - say, 20 items with 10 fields each (approximately). During waiting for the server answer (i'm still using native ProgressBar, which performance is quite low, but it is good for diagnostic), i see that bar is running smoothly. However, when data recieved, it slows ui down for about 0.5 second.   \r\n\r\nHmm.. so, you mean, i should remove waiting for CPU-bound from implementation, and then call from UI  \r\n\r\n var answer = await Task.Run(() => service.RequestServerAsync());  \r\n if (answer.Status == Ok)  \r\n ItemsList = answer.List;  ","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"","date":"2013-11-12T23:41:30Z","timestamp":1384299690,"authorUserId":""},{"_id":"230147e6-94d4-3385-97a7-44f90836fc62","authorName":"Stephen Cleary","authorEmailEncrypted":"sOQKxZAgDW1sKe7rODlP0EqTPOFarqNFZSpaHLzDs5gQHyl2nZyayLw5g9QcKeGo0e5sqwOaODwmvx3MxeK9js7RI8CMLATezSFFSnGO7EQyNDLwCvOfHl7fzxxU1+XPYQj5TiacZ7+0JKg5BFXct1LFwOqrM90BNKVEZq38ACNjkFuG2QeTMqXKvRBtzjWxi1sVI0TYZkOd5lbH3hdI4v8i74iyk834OqV8NuHx+RDxFXlDZjF1DIOKgJvU512/C1+iXVpNDl+5OqtCqeovIun7FsVY6HEkdasdaXHVeUXcHl1spaNY8Re0BPHxXkwLQDjBja8DaQCkbVzzVYEZh+DZFzq2vroDFDYNy042v6R1jB8IDOk3VFykZAtAdgyaj3ihEq+IDZTWGqaxXlvL0/Z+dND31XqwBSSBiN2nUkBwK0fXRFq2tA689kJ7RnQdwvCK/2ngH/8bV5v70BoLlTRcQqpPuSWNl6IpneE7slPPwsK58d6vOG8bLqqF9zCyhjc3OgHGlt0M4T1H5DTtu49N4tlXSbSm7tu8hrEbVzlvvs3goDpKwyAkRhhR5c5mrBZuUm8p7apB/iRVIxls7SGlrC9nJfMG/q4x2GWNXPeDeBauNC8JF6Q3pduO975u/KJF8AzAE9+Ke79VnwBFqXqHL/5GNuDvXL44li0hTBM=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I would be surprised that 200 fields - even large fields - would take 0.5 seconds. That seems incredibly slow to me.  \r\n\r\nIf you are having performance problems, then you should first use a profiler to make sure the slowdown is where you think it is. If it is in fact the JSON serialization, then yes, I would call it from the UI using Task.Run as your code does.","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"","date":"2013-11-13T00:26:27Z","timestamp":1384302387,"authorUserId":""},{"_id":"a76bc3c5-b365-300e-81cb-911b83f9e3aa","authorName":"Vitalii Vasylenko","authorEmailEncrypted":"","authorEmailMD5":"","message":"Ok, thanks!","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"","date":"2013-11-13T00:43:13Z","timestamp":1384303393,"authorUserId":""},{"_id":"cec93a25-5659-39eb-a75f-a9aaaaa1533b","authorName":"Mike Breeden","authorEmailEncrypted":"","authorEmailMD5":"","message":"Time for me to comment.  \r\nThank you, Thank you, Thank you. I have been struggling to figure out how to properly use async/await. I found Steve Toub's posts and they left me baffled. I just read 23 of your posts starting with 2012-02-02 - Async and Await. Now lets see if I can start this without embarrassing myself.   \r\n.... I think I had better learn F# so I can think about this without turning my brain inside out.  \r\nThanks again, Miguelito","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"","date":"2014-04-01T22:54:50Z","timestamp":1396392890,"authorUserId":""},{"_id":"289ce686-5da6-35ea-b875-90580cf8d66d","authorName":"Dimitar Ginev","authorEmailEncrypted":"tFbWzquc0PJTIQHKoQ2tYbqF6RFMIMoDxEX3n/SW2Hhmtb7GumpJoS8AD9To7PZUuqz9M8RH9D847/jpd2SSWMz69AsB6/TbYaGuPoFyb2LrxUI9gKPX9PrcJYFRicddNKS3R/BgGKJHU151Fok6I6HBgevciCWYZVTkmoDbHfluH06aqAGASCl6lzMdCm0QclEIckRTsL9mUyhv8Sw7egC9P2GkSFrX00GKaLUqCNj/naUghfoGvqQ3kA/1WnvVm2A021/jI8JtxLKTm9ZayOHihDvMdFvoRDx+RIRejp2JpiVwdeveWhNv0iozSG/f5HXPz4I3Aoq4xlJW2jt2jSXpRPr7Qvh5450WIBVfhWM7Fv4c28ag77Tcuf/UofR4Gc+mMDcaHCYPrp+JhrYgUPy+uiqQGzX1B3jCmfqt2xoHjpaPxZFMfOpUtnrwuIlQoTb+ypUBNPwTkAPSxNs2d2KGX/T2O5iJuotw1mwcHT6yEyIS6OTZKfMtWHK9urrjSM6jtn8kkyJA0/Qoh9m7IJuU+R4H9vB+ihLfdIo8nB54lQENp3BBNk0snvhobAXy1ynaBO69nSM8ee+CXDvFip0+MFLvQ4hlZKYO2bheifUAgFab6JvKdA77G8877QhRXe2aaAqbk+86hYhI/jTVA1QB9jbELWdzleECgWdZXkw=","authorEmailMD5":"886756f0c06f96fa34273ab469fbb99d","message":"If we should only call CPU bound methods with Task.Run, how do we call IO-bound synchronous method. Is it OK to CALL it using Task.Run? In my use case I use a third party library which eventually makes a web request and all they expose is a synchronous method...","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"","date":"2016-02-03T19:32:10Z","timestamp":1454527930,"authorUserId":"disqus:dimitarginev"},{"_id":"676958df-1f31-3c5c-90d4-01b52ef21619","authorName":"Dimitar Ginev","authorEmailEncrypted":"ngUhqyioJY8DqYxsD1koux5fzDBj/hg3QdJTTWPG25GvR3rwKdo7EhXrQkIXOkLaDMtGP749G3wQuyoIE1cc/wmD+EQwBkA2RYIJg0zCeKycKU4C/aGX/5J3Xt2QtzOGFBmqHkQE852XM5oDzUKWDeskr2xquLyS0dWh2wtwkV4Ma1ddv05rzlYiprxThQU2xztwq+U5QNxNHFdk5xdmqcDKfm9wLlr3x1bK+FBrrunuONEs+Nkj7hZkrTQiAKmn8l57YILGHRP18T9kg6Rf3OIKxgVB9tKuZZJYxJUsnm5KDb+xSH7wlsOoVuBSigWlf6q9bLzxkWkbKn/F3gY++Iop9+yPjMHCJciu2KZC4nP3vmmuyDt21If78tzM6AcjePlDJG9o3CEps7IJirhpfv+Eez6YcIeRedneazFxVaZA83GCb1XuRCAnug6fn9CBWykerzY2Fq78e6HvmAYgYl7K2/WWTi4RhU9Rk2ZmsTikUZEMoyolSJ5aFBONfJ629Tv3BwCehtJroPZ5ueQZ1DY/bGE0PHTEG4h/CabYCR3cwHCsQMcOK0Q+V+nxnH5+qJlS1jWTyVXStRR+9Ez92dX1EHtvMKF/z4mvA7NmYAcTeqpccCh/ArA2V8Sm0hC0AqXRby2Vy55DYTL78wlxLncJ9jeuctzJD4PJyqYLa3A=","authorEmailMD5":"886756f0c06f96fa34273ab469fbb99d","message":"Thanks Stephen. I was not expecting such a fast response :). I will use the opportunity to fire another question: So my flow goes something like this :  \r\npublic class SomeController{  \r\n__public IHttpAction SomeAction{  \r\n_____business_service.DoWork()   \r\n__}  \r\n}  \r\nclass Busness_Service{  \r\n__public DoWork(){  \r\n____var result = third_Party_Library_Wrapper.CallTheThirdParty()  \r\n____useTheResult.........  \r\n__}  \r\n}\r\n\r\nclass Third_Party_Library_Wrapper(){  \r\n__public string CallTheThirdParty(){  \r\n____var result = third_party_library.SomeSynchronousMethod()  \r\n____return result  \r\n__}  \r\n}\r\n\r\nSo the question is which method gets to become the async method. From what I read in this series of blogs we should use Task.Run to CALL the synchronous methods, which means that busnessSrevice.DoWork() in the controller should become Task.Run(()=>busnessService.DoWork()). Am I getting it right? ","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"c06ce764-5223-39af-945b-4043aa302ce9","date":"2016-02-03T21:42:29Z","timestamp":1454535749,"authorUserId":"disqus:dimitarginev"},{"_id":"c06ce764-5223-39af-945b-4043aa302ce9","authorName":"Stephen Cleary","authorEmailEncrypted":"IV5MUiGga33xccp2vHCw0XGf9d88KSDCUKxS8spZZsjhzutvGU79s6tXE4VfZ+crh0SGupvEkwpkDVUDj3k+8DXmnWSq/sQ9fNG60BZkx3PE/LXtfiF4fGUtlgzy1427C/hQXmkqykkDA8Ak8QmbPcOX9fy0REGQrFqZA3DslIUvrARbQwS56W6TDu7Ssb4m+KNgkChRxLKHwlUBAEVKKoP9OntJEW5yyQCpT7Ri6o2WIw+taiGHALEYsj+QxE6pwnSuiEka3cDiirFPT9umsYRZ7SFb+eFPTA2SDGVbr7rPhnk+4f/9VheDEFdjOu7qkG88IPtE7A5jO0qYmSXhzeu5sklDx0H9PuIHoorS9bPdG4oArTG/PGQQtvpIPXPsShFoKWqi7ik1bzl4MT5ViwmnmfjSEPE/UnqkNyd7LXsALeOoIjBGdbUIq7Vbu70EeRXPKAyLunpd6o4xW8GUTGbs70AmsJrCjv8ESjiSaXOrEhOKrLt+9uO8H7+KLY3iaplw/wBCUIFmOf8Ln4NHewqKCN6rqj1sON24LsDEuxA8xjn/CXHcLXABsjGLpsia5lpPodh03X2FWDmwc9kUiw00vUYAjb1sut/IFfG8QYGbjDezPN59jku+By34DzueCqaNsksWkVMc0horFxOA8/uVOwIjgjsDRNsRbCo4Fw8=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"In that case, yes, I'd say it's acceptable to use Task.Run on the UI thread to call the synchronous method.\r\n\r\nIt's not *ideal* - you should definitely ask the library author(s) to support asynchronous methods. But Task.Run is an acceptable workaround while they fix their library.","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"289ce686-5da6-35ea-b875-90580cf8d66d","date":"2016-02-03T20:26:58Z","timestamp":1454531218,"authorUserId":"disqus:stephen_cleary"},{"_id":"99054c03-1092-3298-aad7-15f236ad74a5","authorName":"Stephen Cleary","authorEmailEncrypted":"VWYlbaM8n6qFIZHEfc66UXtvAWIsIWG8HfMQghInEJfIJYGtj84YfzaJf8jy80XpIVNE4eJS8/Q44Sr56PDq6Kioc6/Rwldi3SJbo50NCVeLQI2R1I6T4QFi2Ien5USbHjGP5EkDhQYgsJ7OQddrOE00zj3gdp0V9SSgF4GxO28Qj70h0iZO3GsdOUItnfq0+LJGkPXP2VyvULHfwIvlAQEeeYji374IJmd9jYRLn5BfCc6Ou0epZcCW6F5AHUNOF0LBX2mTp1KMKK0Aud1VGQQoJzY2HV2uJ8/NpCCuvswMLvjvGD9pHUjuWa+urjDoQk7U1BLhWZKnyHkeC9mAG7pE/CUZcjZDcdKG8qKH5BtjMA2avhXdqa6+4yckh3drP9bTMzL0yYGJoBNfpivL395dHwfibi6kC9659vET1TPjyiW6jnhIPqBMUPSjyuLoOj2vSp40pZOZ7+wI1W54NnxT42BXi14QuY1nBgb+qPVJuAxLeRyJ4sMbOZjKeLCsBy1DG9IeDL6U1chJUAc7TMkqx4iCgF0foenOPeQFIKKJOrASTwIROndbCIaNbR6NlIwTsZMNDboViwPldQ/HSpWqeOmYVPQ0sPB90sELKHUBmgYDGP2B31oG2g0MJZLF0c1lYJ3zCJnH9FEC2CJQfWcMRy4IP7OCBgpXq7X/KhA=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"No. This is ASP.NET code, so there's no UI thread, and you shouldn't use Task.Run at all.\r\n\r\nAll of these methods should be synchronous until Third_Party_Library exposes an async API.","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"676958df-1f31-3c5c-90d4-01b52ef21619","date":"2016-02-04T14:53:52Z","timestamp":1454597632,"authorUserId":"disqus:stephen_cleary"},{"_id":"aeae058c-6e6d-38d6-8305-69431dfffe9a","authorName":"Stephen Cleary","authorEmailEncrypted":"jrnfmbt+jxM/d5YXkEYliThRUIlpmmACo9eTT6NeUl5uevvpA5rt89Kr6KLcKzsfkyuFMxv5qAlt9TncHv8TXbGV0usNLCcqDo2ZjbJbR07V7ZHAzfDJ2vsQQMeWTuroeO284KnST2sGjD+pA/yUSkkTg1RGwLcWatqCFMMSAx5FNeOAhoNQKxOvsLlnwNdVhe+6uVmH+dgR866AqCf9Rt1z7TSzgcdw7GluBOEJ8uvX7SKR7GNTqLC5AmP/B24GbtCtOl80W2TjvppJYcPUd7alaTj4OkyXkIJ+HjHMfTmQXuviYOFBabbo56sPXDcc7J2U5y6LxWD3COY4Ke23HlZfkgqlgAejBp1pwTPGC3uCac5ycSVdYWoIQZFAmAu+Qr1TBM1FFEjeR+2EVwRVHC7v9xtVk1Ar8viSl/j2VfVrmLucHFl+5pR5uA4qGpe8tOuRFt8aogBdQsng4nibD67owIxfSlk7h3UlcDnvUF+Mppr+nrbmZaiQlHBbTTorqvVjc6J15irQLy4qaVaSkL0Zsh6/Z8jOyUJq+db9ubnyenS3Hsa/RkO2D1DYB8nEMkm2K9VF5vE3Ls0O8xTvH1m2D6RFPIWFFCSBielVwEf7HLqlvKwM+0FqYy+6urijRaR3sk4Hv1HsxICdr23rGG8tY5ynSR9WauONlKr2M+s=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Not entirely. My book covers concurrency in general, including parallelism (i.e., Parallel.For / Parallel LINQ), asynchrony (async/await), dataflow (TPL Dataflow), and reactive programming (Rx). So there's a lot of topics that aren't covered by my blog. But on the other hand, I go into a lot more detail re asynchrony on my blog that I don't have in my book.","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"c5b56eb1-c940-3d14-8171-3fae05df184c","date":"2016-02-04T18:43:17Z","timestamp":1454611397,"authorUserId":"disqus:stephen_cleary"},{"_id":"c5b56eb1-c940-3d14-8171-3fae05df184c","authorName":"Dimitar Ginev","authorEmailEncrypted":"OpPde1ym1XSiEvBY5wwCK6U8VN2LAMzztixifoFwHcaiszcYMlY/eDzvtmCRgP0C5W4Dmi44LL4/8tXAUMOLLtnegrGJP9MM5Q/ViaI2E1N10NYSfOSdMh0/RVl6Q9396qCAr2Fx78LANibi7oTDfmc4pA0gopYg/2sv70zOv/zAa1mNoYZSzJOVaPBwkndkKCwOEZFZYdV/HsZgx7/SzH9yNUsP6Eqs5qU+NDveQcL9o/zXBavo+PIp+1J32mDXTbaR97L6rCKkV1zSQPP9argKXxqsqvMZORGZ4l4OOvn5Ke7qJ2D1YBbUVWn7WpA4iV+wl8wICXAi6Gulf9ue/B0EEslupbHR+yRa7cGdTVUUJ/tynbhT3FSjae/mbITCcsVD9rj8+GRCTOcbqvN0Hd2lTUR/I1+NwSBnTSlsnpIyQ/jvg96m8zoGx+EpbJEY/GDows4JOeJTwQY9PQ1gtOPiF4Rm6cU44+DVEqFlxXe8W2Mzcx1On7mtHoH+9+4xLZgXFyeV7M6rwjS+74HRSivmyBfnh5l+AtjJPPMLnBD+ahKGjEuYpxsEz0hF28eNjOMO0JgwRVM8B8rTl8FqUj9+T+s4wmQSBjaQbIBKi7OdYLyeLIWvMIK96k0DrwXX+vJW6fpKqB+wk36E9K9F/YW0Xn1GmnW/a+AH5TPI82Q=","authorEmailMD5":"886756f0c06f96fa34273ab469fbb99d","message":"Thank you Stephen, this discussion and your site have been very helpful... It may be time to buy the book :). BTW is all of this stuff covered in your book?","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"99054c03-1092-3298-aad7-15f236ad74a5","date":"2016-02-04T17:37:51Z","timestamp":1454607471,"authorUserId":"disqus:dimitarginev"},{"_id":"1d6a1c0f-57f6-38d4-8fb3-fead45627cb6","authorName":"Jerry","authorEmailEncrypted":"iyXb0yz4wwScB/TdbCcHbqRjgYZGeY9Zf/NVt6VRVbM/WpALMGhECKNX8NW4f8+pa3qgHkndVJgACEm63+v3YVZdQBz9MWersyXf/0gwNfZNvmC4hVF5uqolvZZSfkEi7X6I1kEdlA2kA43wkMEfMURdKaps0zcEPQBD36SWnlQldjiOfTs65Ot2qNCIoilylEGdBPt8WX82CdQGYYuzEk5RLZvP6YY0G2jE6/vvXFz8iOwqbcaEHcq55N+RfRY6VEiQw17/XAl4rJER4FKsEM2BUE3/RS1d9nYfTIW7Qd0ynN/SH0J2jbxeVVWCRXUE+e06z/4ZVw+saAmjB2R3GeII1vgZP+st1Hwzy49X3mhZbwr7VOeMlolz2dST9euHHbEPGOnCswLd3msSGsqo+FfYY9RwHtzdgkEH6ryAKwXHaxFufa42K0NfswmVqBl4PovuI1aDGbACAXHRqG/t3kRfVVSC6/bz6MBXuC+u7zN6efJMbmOXFbIl4klF/j8Xlol1kIVsCWXcpU6GFMuEb5o6OhDWv8j5cTWejXMCWyHNNt89dGwJukTZ3fdCd0V1sRtQyI3potC7XPMKjJvmqZOQHv6zZhoHGqHEAj2SZfV2kwLubmVQ+0YCQ+Ht6H+Xafnfd8eVKvdGLxVxTgnvQ4wPUiYuvvbaRAefeMCyiUU=","authorEmailMD5":"b21557fd0b177abb61796ab0a849739f","message":"But the web page will freeze up while waiting for the results to come back, is that right? I worked on a similar project that required me calling the third party web services that took almost 20 seconds to finish. It won't be acceptable for web applications.","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"99054c03-1092-3298-aad7-15f236ad74a5","date":"2016-04-16T23:20:38Z","timestamp":1460848838,"authorUserId":"disqus:disqus_HrSDtjYd3b"},{"_id":"c6639ea9-ef6d-3eee-81a7-b3e1c2818813","authorName":"Stephen Cleary","authorEmailEncrypted":"doUvwNCQyNhDlwAF8rjdx6UTAgbeF6/u/yQdvGTfbcLS725169/HpDd4x8+HL46rsEEE6E6k0bCo+L6jl0gmQE5BzR9eyMFupn8A38qDJQ39o1fvQXfR1xs3VBXGRVT0Nw3VSEitISEEw2izW0SpK4XeazR7R/ZhnFsdFO205pTk12NQXTiJf0VR5ZLru0ChR2yo8kC7HtN7JhaC4KK7wEiIxqtsP1jtBz5toM1pnVzgibyBj9YIzIIIQ33hgzP/MPpeY1TWtDmYo0l51DPd2PpxMzhi67eN7sjXYzh1YfKK2JEjbxogDR1qn55jQ+OftK3J+Gu2U7Ht5WeSTxNikPv3ciuDV3/YujAbqMk4w5hHUv6660uaGED7MzUCwfKYv4PKdBZ6ZKDMw54BdNekilwNav3uhReg2a3f5a3eA1urSNL2msnsmLa45cGnii8uq9WPR5okzlxJzFc3Mtcs8w5PA/LIxT79pJvuS1/WII/ILfT+Wsu16kg7BQiM6S+m7gyyITROt/3pKm6shZipAYRrmxt7eqN6AjKb5oXPd+yzLao+Mbkmkrp3AFHqIe1Vom+kPqksV3o6hm05J/vl1vX8aHk6TMPO1GunMJOjW48vz8Ax/Kdgs7xaf8lPYRiy6TknHKBUOcauJ9DcS1p/DXHvtRwgOXu0Ac6hfpbYj+I=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Web requests are always made asynchronously. JavaScript cannot make an HTTP request and then block until it returns. This is true regardless of whether your ASP.NET method implementation is synchronous or asynchronous; it will always be *called* asynchronously.","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"1d6a1c0f-57f6-38d4-8fb3-fead45627cb6","date":"2016-04-17T01:36:38Z","timestamp":1460856998,"authorUserId":"disqus:stephen_cleary"},{"_id":"ed6d9227-a8bc-3a49-878a-7729bafab159","authorName":"Jerry","authorEmailEncrypted":"b577LOFnT+qw1rJ5jpNPKIAOmewZZSaU8RzDLxgfsnv20aRKTi45oci+76bNJRhKljE7lwCAI+M9p5GE61r29DDyb8HKZcO0kbkO+7xf5ajWxRL+H1tv/43xhW166bPxKQx7aNTe9wKHazpAIat4kDdoAqDKeu7vS6QsrEW8ETn6BvVb21F8PTd9UxBcyXyvhkJL0GHTp13hjP9GuBRSEn4uWYkq6an4lZ6ZSVmkBUTDkbWavM2zmyB/Nb0yZibv+4G5UxQ9ZfpMtTLZHA81EXRkZVoi9FOLHQaGomU7MsyJzJfCXAZGulMSsk+XCNT0X7drBskdyTcY/tp7L3xpc4Hh3u2c/gvWF28piI1QfPeREspwaq3nZ9HDg2aesAQK+XZMvgy6n0WLjok1ozlkYhxO3v0rtmm7IYlXap/35b5DJT/4LCLqJtWRBkKe0yPpyxl03HX+WWW+zkIw0nidmsYZu7lXRRAPy9DhAhKoXY2FP4SDBfRfbDIMaIlB7qUmB1L2s32X4t6ZUyrPNRZAa8H0yrOOcW5KEN8wXYpgQAb7po78LFS51BGr+T3eLFT33I+3X5DUsjJq4ZCR5VOvIVtlzgb9GeamDvtRXwBXP4h2dc4urPqip1jZA4dBcVkQIFG6iHxlxVmNQV/iOaXJR5JOTeWk0rdG3GG9QOu/bHs=","authorEmailMD5":"b21557fd0b177abb61796ab0a849739f","message":"Thanks, Stephen. Initially, I didn't call the third party services with Javascript but in [vb.net](http://vb.net \"vb.net\") as they were actually WCF services. It caused a \"freeze-up\" page.\r\n\r\nTo solve this issue, I ended up with creating a page method to wrap up the web service calls and using javascript ajax call to invoke my page method.\r\n\r\nFor some reason,WCF proxy doesn't have asynchronous versions.Even if the asynchronous methods were available, I still couldn't use async keyword because the web server only support .net framework 4.0.\r\n\r\nThe code inside the page method looks like this:\r\n\r\nvar data1 = GetData1(); //WCF synchronous call  \r\nvar data2 =GetData2(); //WCF synchronous call  \r\nvar data3 = GetData3(); //WCF synchronous call\r\n\r\nvar aggregation = Aggregate(data1,data2,data3);\r\n\r\nEach WCF synchronous call takes around 10 seconds so the total time adds up to 30 seconds. In order to speed it up, I tried wrapping each call into a Task.Run so that they can run in parallel, thus reducing the total time to around 10 seconds.\r\n\r\nI understand it's far from a perfect solution as each Task.Run takes a thread pool thread that may impact other web applications. But how can I achieve the parallelism?","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"c6639ea9-ef6d-3eee-81a7-b3e1c2818813","date":"2016-04-17T15:41:23Z","timestamp":1460907683,"authorUserId":"disqus:disqus_HrSDtjYd3b"},{"_id":"fd093970-1cd9-319a-b43a-8b9c7287c27f","authorName":"Stephen Cleary","authorEmailEncrypted":"HAWMIPLFUwifiPtfwjlt6xKpnQyBBNZzwjWDpuAOPz5NJ0/S0v28m7l6BXfHkq2QFi5RfSM03NxzEfD+2B7Lt6TZGHtJ3rzTOvO7Y+HwxCGSNDmLHRQ2k6Gy2i57IkOarTvsBNmy63GdNz0E+/0WPxM6ISbt5eVrEdKfPR/e3XxqVfvD03yVMTU36a5P6+JFS9T0fgPW69PVTlJHCOAUbkSrdGx1dLkIzvgvHry+2UKDlzQ2KtWZuEUsKvMltxgeihG8iJ/YBWAgP0f+lVr7YTdKlVz0dWb2Arv/8CNKuv1fwy6qcmktfmwGduEoybqm0ZxNhAHqWFj2m4Fz7YNXdoP5GrYEBu/IKORPMgCGxCuqTOaDadgeJ8ISE+qsYZH9LcSjCYnW0HoO7Udz8O7VIcsicjuqVl9LKaXji8fUFC8+DrOvOROjrsHkJZ5fgtk+vOqMKno4AjkhcRI+JH74mq+GvyjJjgzTmiLB7I4QQ0RC5Kztk35hnKb8vbmepbs/FXS+teWtwVhPQCONqNCceOTOvGiYSNCsBcQXU47l+V0Mi6yNCj44hD5N1Q9rY9Yhi41CEbMA9XTN/4/TgmMkjUTqNwbHZxkKZCrXU+SCztjaVpPjkDQTsVQuHhnlv9KGk6YbrTc9xzIxPMLJqebZ5+Lq0WMHcwxCtbApsVh/HZk=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"WCF proxies can be generated with Task-based async methods, but only if the target platform supports it natively (.NET 4 does not). It sound like the best solution would be to upgrade to 4.5 and then regenerate your proxy. There are alternatives, but they cost a lot in either scalability or code maintainability.","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"ed6d9227-a8bc-3a49-878a-7729bafab159","date":"2016-04-18T01:22:36Z","timestamp":1460942556,"authorUserId":"disqus:stephen_cleary"},{"_id":"4f10608b-4a17-3a6f-9207-bf55da02bcdb","authorName":"Chris Cappelletti","authorEmailEncrypted":"fiJdfwUAEtDhGsz5IiYRhyWWxfBwbspFr/+CI2G+LNUHqrjQSu7GUGlOPAImYtYR/usuP6MNl+4q1gIykWHejubRTDa7oTAnXHO/MwjMai+SQCJR67aSLloyL0BXgUkPhbbQ8qO47Yth559P4dMnyMq7YYVNBUeeqdpghyCb8RySQ8PqI7roWuDHSacT0ANu6wKmBC8XJPWiAtxtldr0RfuViy9IERlb1WFYjWu/1SM3CEhModzxEqSZgnbmePgUlSE1inKvKvp8yRsu/JSD4PEULqRlXUoI61G7izexm38G/EGDXPyuVHv190q1XeDKzFRZuhOKvs4jQPevB/qZ+pfiafOJ80Svo2cukQWH7bMbDH8EZ+W4lrFpzKMOl7ix7A3PhGi2NRk8qBHicQN7b3g965uNjjuUy54n94T1j/SCj8L9bOfUP+FnTW1UsKZ+40VbyAtJDzzOMnMKIab0wwnBfzX/Z+VbwMm6A0viRutCJ/mCtY5CEi2OHkejtQU6gltFmtAa27ja3JYe6p7FVIb1aEzgjqjcfWjVZkYWisYxVXLKCSfVPDi7uRkWRQKAO5V9/TWbriZ5p8awpPxRmh5qM1GR7xZLQH9tQNcOgUOmAhyq/aTrVU/Zm00Jx5OHYAPVaPJcFKdX394VItEqsNb0C0JOI961h/BeRKx7V9M=","authorEmailMD5":"60450cd829ffdf410c3870e6f95730bd","message":"Sorry forgot one important note, the first call the client makes is to a non async rest service call using our internal rest client which is why I think I need the [task.run](http://task.run \"task.run\").","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"fb4a205d-51bd-3cd9-ba51-2f153fd1b1eb","date":"2016-10-27T15:22:50Z","timestamp":1477581770,"authorUserId":"disqus:chris_cappelletti"},{"_id":"82bc87de-0c20-3c12-850c-c9e7a553548c","authorName":"Stephen Cleary","authorEmailEncrypted":"SSBh9I/QmcGCryRciyh2bNlREJ9TptFxeZG7sY5YPxJfvCYR1Ugzgkl1ky6hyvp09bEWTNhSUxvfigoe1cdt7SvsvtFiWcZ1Q7lQZvluWyfgj8tIcAbXgDZnmf9MfZno5xFQnVpzPGRZiFV/8fl5P/W/Ck9zlAS3s3JDs9565ZYvzJx+PX6M6BufBa2lbX+FJZqKVBupW/R+KNYdBiBBuCqlxmymRuWVf8j7j6wNf2QG9oIxSq/NUREnxjDCvhK+SwQ54dL5fL5cH6XOm0z8umsm0vnPuHzkAyWUIsg4tpMeCueTwClFNZxiyMeul/xasC2nHSZi1caxdkwEW8rjJ1MxF0wEj+KhGKsi27LlQ+V1e5fwNUh4R9lex9/rvhlahAxH3zExgBbQpIzIWH4EowM3mWNSq3y7svmFQSQVJQBpDSIjWSan7hQ1DAGIqyKY3had5RgOwiaiTc9B7yow2xdTOTP66W4517vCuWbGMUVZMLkist4azunrNU2HCRXGNh4RCWe23yoG9av6+PtfGTw1scAH/ausIR76yXYE/A/2Q7lcSeUe/60mGee7Ag7gvu2qnSBr/dA/kOrIjULw1QTW5go6RjkB3Hv0siW3a9TViUyCjKQTntMqBZB0LQDRHaAiRgQ9/9zS73C77kTOIpzcmYqEiZJUkyJhT3RFY/w=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Ah, well, in that case it's a judgment call. If the library is really just part of your application, I could go either way. If it's a \"library\" in the sense of \"other applications or people will use this\", then I would not use Task.Run in the implementation.","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"4f10608b-4a17-3a6f-9207-bf55da02bcdb","date":"2016-10-27T19:25:34Z","timestamp":1477596334,"authorUserId":"disqus:stephen_cleary"},{"_id":"a4262f59-2abc-3573-a0f1-56d7e8be8777","authorName":"Chris Cappelletti","authorEmailEncrypted":"kwPVlfAD7wvGKohwFEs1zpAyN5Yon0UEhrz+7sMVdhRqb+zHWAz8BehS5JezTaFgQETGOgo+DxN/Da3u/baPrBBv2rPXb3Uf3NwFz63uq4XABdvk9pIb5j3lGGxPBq5s0/9POSS7V5//R9xSWDOzCphjBmJe6d+H2nY5WWEfWH62v7O6plW1lzWvrpj1kWF/14Bt5AXehTDAhDAaTJyWsqEvgkzcMiLVpnP+euHzpTmUtZnB9wAZYb3XHFY50F6chepa3jzQGyCCbaVu1UkGq+H2jhnUQLTUxMRXfeTobCKyiTQ7k93wK4Hv+zlb6ZgT/M3OmBsAzktdflhUFngH0VydDCeUKT6+qTg0OppSW7SIihkrnuTx+QKbbq+bcJyHx2k/1qLv9ZwzLf4n0N1jSwzEmsTshtW0UAmOHiTCuUtDRbicQw/yRBMxq+6AYbRfxrdbErmW5+BKtIK8IkKYJNoiK08jR0m+P6VM7UKy8XdFft6BEOuRshTVCBSnIs6fl8rLSN6GRP6JRWBJlJdQoe0lXnWMBCkJper46eO4eAJaqw8Pk4g9YlPcGUf9cnX1D7LIFZkRGq0Ch0642ymIo/NK+X/+VeCh4iQKKHwKbwlO9zRPEh+7C8kvCUza2QQ37V4k6bWk1a/UP6Mkdn6rHHBo+wjLTy26nV0h1GU4Gbo=","authorEmailMD5":"60450cd829ffdf410c3870e6f95730bd","message":"Im trying to hide the complexity of a system by wrapping it in a client library. Basically the client consumer awaits a call into a do-a-thing-async method, some of the arguments passed to the method control how long the user wants to wait before abandoning, like a certain client understood condition, a timeout, etc. my client implementation uses [task.run](http://task.run \"task.run\") with an async delegate, the reason for this is that Internally I'm doing awaiting on a semaphoreslim while waiting for an appropriate series of signalr events to get pushed from the server.\r\n\r\nI'm following all the TAP design rules, configuring my awaiters properly and doing all the other things that I've read from you an others that would be considered best practices, except not using [task.run](http://task.run \"task.run\") in the implementation. Is this a bad idea?","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"","date":"2016-10-27T14:55:04Z","timestamp":1477580104,"authorUserId":"disqus:chris_cappelletti"},{"_id":"fb4a205d-51bd-3cd9-ba51-2f153fd1b1eb","authorName":"Stephen Cleary","authorEmailEncrypted":"sE/YfePXG2D3achn/leHiSx5TTRYy9d0p14GGexY/hG5VXreXwWSWyiW/5PntoXsNnNdBFIvZgXrpdUuH+ECBYQhMN253RnOIxMdDOGgCbaO3BO7flRiCmCvWxOn46Itj6xYRzTchgPQSwLdPEtHyLZsouow3NoV+BmpE2ySy3biq/L0CVVwMViZr04AtpXFrKeZoU9tjpb/Kvnhj5LIsU1BSsfASEZAFR7qki9bZICSuhGkjoWU7WWj1xCViDPkjtIPq8qdBkn8LodVo94ez01LVgQsrJIIMOqvXe9pk+DWdASrM6LKH5NcTDF1g3LzeLMtHlKbbUN+x9F0qx6iuJpmj8utLDhK7y57trQ6ys2J97k5V3Mvj9zQzhcGqcrp6Q9nAuxhHhlc2U6dy5Bt73Q4Qs1hBEklxouG0UGUXK/u1FAb1wdUy/4+fjj0iUxkjrqtYZwVX2iDobkawRUbzJ2B2uo9dE7NafIOH7lc1v2X/YOeufdmd5xZcrY2vTFPZjIZ3wakeGTwYe8ALSid0v16F+VJKv7G5zw4dWxUGh2HyCee0zv6cMzCwEL0pAoc42r60517xnZzrexyrK0HouJ0usxQ5kJxttleAbVscMbrgMS07CAycMqwQKUN2+9MeIa0QpxNWy7hWGQIBbu51nxqQvXmOs+yBH+izkqxFZ8=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I don't see the need for `Task.Run` there, so I wouldn't use it.","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"a4262f59-2abc-3573-a0f1-56d7e8be8777","date":"2016-10-27T15:08:19Z","timestamp":1477580899,"authorUserId":"disqus:stephen_cleary"},{"_id":"83408f05-dee6-3305-9c25-a5d2248aff4d","authorName":"Eric Brown","authorEmailEncrypted":"UVU7a3HvHHO15JVtpCtiu04pfcku2zBExEDSTxFqaZ2DfuC9g35vVdKrZJ6O6Z44QMh+oOMbKIarQSOh2ckjfHKMxM8yeFc+H5VDTm3d7fNYSSoHOlTkTmtWRLqt63bdi64nPfiP/mjRF6s9TmqdCY3yYfK2ZnIwMm7fFD/TqjhFHqtp9Ju5Hss58lC2phbNw3IveVaOwr70fB4X0zbEKjiok3y7CHYPcI2QmW2krt04X7jShD7YgNYXqDGo/to5ZR2z7yYzs9OIlgTiwUo1MwG4WWq4dDkVCSbNgutQHE5qshIJKYcamuwn2q36GrXiXJ0/uQa/ekPQtGgDdhSu4+O9kC2x/2OYQ4iPJ5eopHp2Fn4j3JnNssSvpZ0PxkhMwrzIAd4Xeue84bsCmmZr2PPvqOrkeOFIMjvPfvOEHkYNEy0hzYF9644jXZeUEuqbiz1BUCJsEIMaSxJwatHVVDZwm1vB75hhlg1Dv8jB/SeIZkwj/B/9rCCDYzExpLiNzt4TjglWI+45hFzBuwIdFQSRsGi48OUJUdL60rIDCh8SnPxVHRyeYJ8hF/zAkFIKVGP4YJ8vwz0pvotqnZilcptwgkGc3FP6AqKx5ordKE4/fI5r+0079ydJJfvmJNpK1SWxVgxBFUNEfCVhEH0K4jA9tqul4nFG8yx+Gbx65UA=","authorEmailMD5":"e3de71ea948a6b6d854d34256cdb257a","message":"This is SUCH a good post!! Thank you very much for taking the time to post about this important topic!","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"","date":"2017-03-15T15:13:20Z","timestamp":1489590800,"authorUserId":"disqus:EricB1007"},{"_id":"3cbe602d-1f36-319b-8f5c-94dfef1d7bc4","authorName":"Joseph Louis Lagrange","authorEmailEncrypted":"gQ0Zwh84vAUBvTE8KI5dFgchBpeDXkYCHiY+5mM8j9IPDZKUKFVQlDYgyys2xbmN8elhpLWQijyrBktEYU88lwaJH5z3dgrVN7cR5irDW89FUU0SQ0JomAZ5NhItAslj8X83vJLmYTU3XosDWwyHfWH0XiWQEfqNI9fxN9zsaN12Kj/9XVQLfCvltbJM8Y/ATJmfNqT9vqCJ6zslfdwDv6LpmfIQvDOvpNs6QncRvIkfK3J/xg3W+xGUjqXfAyU/azY1+7SqLTo1caeTQs2DtKOHf6oAPv3Qd54QgdfVauklAz2nFIi2wRvmuLJ3mJ34Y5yCEUI10M/+ZMrTPZeU3J53uV/vjn/3tB48U3pmLrhQWBo4GuFPt39JDFqH/EKNj8s/a1LvIHxuR4UT3kSJtcsFtfQG20hnejR0LYF1E8lQc108gG6POaItlwxEcNNQFMRGJ4H5wR8YAcfxJ/vtuBABULjt6Ji5GdJk/l8XekutJFrCM/Ytq0DTeqA8xvXu2Dx4ApwekraxLAfbwh2X5oKj5eYBFYMjwRW9jTX19iQk1b+uBz8yVjHFzrROlfMNwOr1/kVad5KsH7BcRoLFOqiK/Xd2+L8Q4a7Ng+1CyM2P3LzHCCyooWLPX68ty8M/GPHdkhLhCicEtjdcuOdu4qTdC4UTHFQg4d+Vx8GRHTU=","authorEmailMD5":"7e6002f0e0c986706f0d834f7db3c134","message":"You always write the \"asynchronous signature\" of the implementation as Task MethodNamaAsync rather than async Task MethodNameAsync, why?","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"","date":"2017-10-30T02:15:37Z","timestamp":1509329737,"authorUserId":"disqus:joseph_louis_lagrange"},{"_id":"c2feae65-2aa1-360b-9ff5-fd995ac8371e","authorName":"Stephen Cleary","authorEmailEncrypted":"vpR+uQvJAcyLnlWZ17xcYSm+0K2lbtPTygqMFteImbuhx0/4MmqvU/5I8CmmgcUAAGBlvGHzotq/mLE0OS6SygN4ujEli49lfnCj3hgQwxKBiIBOHR7FLTu6K7SPfSoDA/yHbK/msJhgto7bLFvOIZfAlAeg34+OGafSEJOm4NRljAVcf6AZpO2S5eVcCMFnGxOaEFMudd+AdyCO1v04UWuoXRUAm1fFDf/r02VmFJfDcgn3ZePURy+e8RrIaYzsS1ytASPQZHqoMzVD+2XlQW63oXXFGrA5DQhueOCqUQ47bV81NC3XGly6ssRk2RP7WqZzYzRbXYurvjKimNBGgO4eoZpcP/uUbFAHVCF8Xc3yuPX4Vf7XAB5j4dauBFd8XBSGi/Ql5PgqltCKshe+uD/c69jtry1PXdI9XfrFC8QA5uJ7UPPAFcnPH2fzmo+WxNN3tSwdxUvOa7DrFRJOM6z/A5BqY3bghCE/AOZZRltDbBJjX01ge0sfFCXvePOHJq3gk0ZS3oOlBkun0EYezlyNUrNKCLhdAaP0wlIv/PzrKINT2BIeRuLF12VVFD8RDEkZA8CZFRcRgocy8Vf0Kh3ljRjilQEYMwae5TDu7Faa8IzHGL6qiPbQJiC7FblsDJ1JvtGm5iOjq4bOD+PAD4BXSHwgrX6AH4/LSpzqk6c=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"\"async\" is an implementation detail. E.g., if you're declaring an asynchronous method signature in an interface, it must be without \"async\".","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"3cbe602d-1f36-319b-8f5c-94dfef1d7bc4","date":"2017-10-30T12:34:28Z","timestamp":1509366868,"authorUserId":"disqus:stephen_cleary"},{"_id":"1dd2fe02-02ac-3a22-bcb5-3d8ad3a86f5e","authorName":"Scott McKay","authorEmailEncrypted":"te0zxn3DXA8hnKpuNIjjKNElSdTuW0vf6rJzfvgC2rVyBOKDxCzIfc9zaxIs9Lg1I77hteXbsIRuwz5bCSYGornANBslr6j6AVakv/yfiYhwEGi4XL5PbRdrhJxZYtP59FK6ZoL6nnaEzcGlWtwiUhvGSF4K4TqJXLroOLW0yUy0FpxElHuVMx2I9YDHAuYZq0pUVeM2IuomgNEGJoTp2TWo3NhsHL2JoDdfCZI9yBZtUQi2lguIFJn378lOd50VBtugdNUKWRz+tqe2SgeKv2RblX+ZPR1ffP4rmSeDRoMdUXhF30S+scBAGLX9HEXikjt32aQ3TUIp2SaQSpdGgSbQ9AqUdcLTZxptISpNNShsN9/fzOKhthSx1U4NBFYUNQvcy9kGONdRnZoLCPb4qzc10w+XeR9VptopqZrdXRYmKXOuSf3x3Lv6NV3sHqQt/XVcXlwTE3lD0U4FvMrqryIYAfo3Pvp/uvaTra0LRuocsWFiBawB0jjou6EISGFgcQRIx18dLoSPVjRzzhmy37rz6ogl/sHG7g4ttULvaJdgk/EWMHTx1KgOD/ToxMxZtYhSO5MXcayYC0ggJT24DNffSiCi9VFD4xXa62WIXN6zVuAaxWvBbzEXdXN0r3lI8kq3AbJsNmrcCKW6NqtZGC7AteHdM4czG/VgYFfLrPY=","authorEmailMD5":"384d2327b00c037623207507e3a14cc7","message":"Is it valid to use Task.Run when processing a batch request (WebApi OData in this case) in an [asp.net](http://asp.net \"asp.net\") web service? There's one thread processing the original batch request, but each item in the batch is really a separate request that is executed using HttpServer.SendAsync locally. If I just use Task.WhenAll with the SendAsync calls the subrequests execute largely synchronously on the thread from the batch request. If I run the sub requests using Task.Run they execute in parallel on separate threads, which is the behavior I'm after. I haven't found a way to get that parallel execution more nicely, but perhaps I'm missing an way to do that in [asp.net](http://asp.net \"asp.net\").","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"","date":"2017-11-22T09:53:24Z","timestamp":1511344404,"authorUserId":"disqus:disqus_U6noZg42Is"},{"_id":"1a2b43f7-c42d-37da-9a5e-3e4da2af94a6","authorName":"Scott McKay","authorEmailEncrypted":"hHb911+wLhMJpfr12b51nnNS5BPei5Ux10C9nMsWZyWoKL9d/bxWqS0zZS03s6txnA5/lg8mYBudLSnWSI9TMoommieHbLnB/4hi2/Su28nlgM8+kSEBws4CysT5ssrUImCabFQ7mYOxrzVsYKqYD/zpw3urEJJf1oqIqywEt8qbvhHXbXXWDqrJajKH+MkXU0Yvu1qjsCcl4Z/Cys+4JUxeOJ+SKmgy913Ux+bzAF9cf7+RhQAeffzkcNoxhpHY2wa7Eo2vUX/AxKlxLtaGwStQCFYuryLF2a4j60nI4sz3qpRE7QBwjFz83Uik93a1oU5LQafo+BNWVucrf/y8uw/S1oyViDSqNp5/eToyqr5BX/BJWjfibJMRhUqp3va013Yf81cJfFT4B6K3KMlmZTOwfQ8kupEWsvo8PKvyK49ws2/xlwgfFvDUh8tzVOibS6uyMRv0O1U/NP+tPBtTIn03Xb9Hcud/xnRS08PDh9V5hu81Uy7VAvNRKiTWD40zpfAITnPYk5dOM59aM2IyXPoA3JCoZK3QHgA/8i19mOtVZkDoa6dxrqMiMATwlW4nawHvNMZh7gF+1jtoRkH8l3XvGWzn//havSoG93f/SOs9uEcoAECL/qXAs3uO3/Ln7aUVK8UUdHsSs/6Ta1CP9Fpv8fPKD9rRwKCmJmQplX4=","authorEmailMD5":"384d2327b00c037623207507e3a14cc7","message":"I have a special case in that I want the subrequests in the batch to be processed in parallel, but to re-join them all (using your AsyncBarrier class) before calling an external system. Due to that there's no async I/O in the initial subrequest handling so they each run sequentially until they hit the barrier. To force that initial stage to run in parallel I'm now using HostingEnvironment.QueueBackgroundWorkItem with a TaskCompetionSource in the Task.WhenAll.","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"d5438ebc-ffca-3e3d-a98c-eca36319ea20","date":"2017-11-28T21:20:10Z","timestamp":1511904010,"authorUserId":"disqus:disqus_U6noZg42Is"},{"_id":"d5438ebc-ffca-3e3d-a98c-eca36319ea20","authorName":"Stephen Cleary","authorEmailEncrypted":"wb0JHcUeUuGrwhPSOGU1if46kshmSrNjxnxcKFOSj0nwAgqb0mnoP6VESYaLYKV4O+paShOs0arRRShauKN7DA0YkBz4XCBs8rxDAMv4ZXSj62QGMJLRCnSm/2oKb61RPmClPpXKjTu3krAw/yEKIS4bI7Fbmuit7MrvfeKm6+7VYkumQRdB66HRaUsuzV3CM/4q3CHLJiCJVhabbAYs70sfsgEmMCI6Ky/GbfZ4rMTWL6Yq05Md0LD2aHO7OkZHuKoHx456B5LXyyyZGzG7zFCR6flKsH/EBbQMCZl99jykSGpEfyGawtsx28OKfI/BB/O7qt4DWxaTVQjkwygJZR+zdxnM81LE8oXYdQkxMmuneB6q4JXfSXhNtPtdf5zhtFch5QTVR+2Ae58wApcwai7M1kZwXTBJzgsmhW+br5LoJXnBJtzq9aposyHtSTPogU4NOXk3bC4KeXdxi4KqkeiEzrPQHMClNzNf/PxVB8agaP4ta+jeSJOry+zmrakSbDadE8X9UF2EZDKKMI/swzQRj+6KyNSXfDiKWDqmoBS3AdyToIuBFov+TtM5jkvfrEsiPWXE6GB475055c+mBwmlqMPMgzvecNJCrGRnPi2YQGmYWdueeKnFTzdnez4cswJczSZmaf9uEZ5RPb3mBwk5aOBbLOt+xVzpjrx7XKc=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I would not use Task.Run there. SendAsync with WhenAll should operate concurrently; if it's not, then there's something else throttling it. The best solution is to find out what else is doing that throttling and fix it.","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"1dd2fe02-02ac-3a22-bcb5-3d8ad3a86f5e","date":"2017-11-28T13:32:52Z","timestamp":1511875972,"authorUserId":"disqus:stephen_cleary"},{"_id":"1d9750d7-a733-3c8e-8639-c02c3baa6c08","authorName":"Stephen Cleary","authorEmailEncrypted":"evKSq/2a2/FF2q2WrzSccLftBSjrYS8myw1fwigWym3RXWbSyjw87oRB/EHtj++cgB0P0EQOM4DOVfbZgUHi3ipgcjVsm7Ig4Hlm7etmj9E4/KRVAn2hkc1bJCtDbXNNId2GtybpAF27kzXPJoM4E/t1VGgcqDq7ua9PTF/TJDWJRls379hEx5v23dSsZUwKHNN21UAxopZMmiXzZvdKGro82ctlGLHcJznlk67wWSihdTUdZKVbcYdMru0uA/ugMPoXTK86Ko4uMpn4pmKZTsRT+QkuH4JUWxbsZQLqzqmXqBDwaz4JE8iQqELUDM/5sBg3ga5nosHCLDJu171fxRnv+vJgmhtF45B2LbCJCXm+Vhl6/Lf73UywFLWLj6O7WQtfmE4/wxNpADyCGKMqldeJxBQx7wbEpiJ7PqyrYJVaijTcM2bFNEKYWB2WWXf2+W8al03KSyFFdL0TlwQECyPjqAsQtu08JfIw+tjFr8Pf+zHwJRxCFmnXxbxbN7ucJ5oNEySH2LHrkhgS5CKT6wbyMSKtSmfyF8V3JMo/8ZmMiupvE4aK4oHFKtBd+ee1Zu0HKYt+/xPzJ2/B8gTZi15f/ZMPbS/QH9n0qQxFQGQTAFL3TjMoknw9deNMvSJIGaRZlxo0Jv8DBkHaV5FxgN0YxY0VJ1ybwLgES5Ph0W4=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Ah, you wrote HttpServer but my mind read HttpClient.\r\n\r\nMy first inclination is to let them run synchronously. If they are being handled synchronously, and SendAsync is behaving synchronously, then just let that stand. That's usually better than introducing parallelism in an ASP.NET environment.\r\n\r\nBut if that's not acceptable, then I'd use TPL Dataflow here, rather than AsyncBarrier. I'm also not clear on how QBWI comes into play, unless the main operation is fire-and-forget, which sounds dangerous.","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"1a2b43f7-c42d-37da-9a5e-3e4da2af94a6","date":"2017-11-29T13:53:41Z","timestamp":1511963621,"authorUserId":"disqus:stephen_cleary"},{"_id":"37ea80db-2310-38ed-bca3-1e1ed36b6213","authorName":"Scott McKay","authorEmailEncrypted":"tdULlKGnjb7M/+IQCWaao7zdi+013V4702c23ap/Ueru5vB2uscbdNkwUPra7bO88m7aqaxp3MvicOjtDo5KYp3lG0a9vj2iOlq5TMjEWliS1fwJbBWkqkPz2ItWfocQlrMnwQvLrcv+utgJcZbx+N0Bl672SzQQcaegyyxIgIOJuvHnfjBMMSD32Tgz22/BUcbmJpaPDDfbWxBKpbUPuA+0yYttHFmvb4hQeXtoJZZZCYpt2L0PNA3qxMFRmLkKFDK/C6ZKZcLGYVXhvKlNIPVRkxN82EMaSf1xd3JWZw1tvOVVlzYaU+Vcr/Tnx4Ijn5SJwGrKPPtLwocK6szNjfhaH3lGwB6XCvBlSo0+G7Ab3uAwKiPHwca7MbKQs6PHMhSZHU8m4JCW0qa2j+emHquNnaYqLvOmE9cy3W6Dh5Xwn0FGlwFaQbQy795bs+v2RYyTi5ojLUWCQidqnNtcGfZctbT+FHUVNrt+zpvB8aO44f5EQsAQ3pTKa3H2D0iXI98MGCYIOpCyldspdI0bPYqQ1sIZokyx3hKqIIVcILoTmtCTbPtyA+Ey6DLwEacrN7SukwZEXrDZVmMTJisLrsoREx16Bdkr/enLRwJPn+FcYDifA6+Ha0zqvjqkMmiC69CPparLtNXfx1kyM6PR7oH29Ucd3KjWLY7M52/1JQs=","authorEmailMD5":"384d2327b00c037623207507e3a14cc7","message":"It's a low latency service. Letting them run synchronously costs me over 1ms per item in the batch. By firing off the subrequests on separate threads I can complete an entire batch of 50 requests, including a call to an external system, in 10ms total. If I didn't care about the latency I would definitely let it do its own thing. Obviously there's a cost in running more threads though to balance out.\r\n\r\nI'm using QBWI to fire off the subrequests essentially as completely separate requests (an OData batch is just a way to pass multiple standalone requests at once). I wrap that in a TaskCompletionSource so that they're not fire-and-forget, and use Task.WhenAll to await the subrequests completing. I could equally use Task.Run for that, but I thought QBWI was more standard for ASP.NET. I would prefer a bit more control over how many threads were potentially used to process the batch, but I'm avoiding adding that complexity for the moment unless I need it.\r\n\r\nWhilst I run all the subrequests as separate requests, I attach a helper class with the AsyncBarrier to the request properties. When all the subrequests meet the barrier, I combine their info so it's just one call to the external system. I run the subrequests as standalone requests because I need the WebApi OData processing of the request input and formatting of response output that happens when I push them through the non-batch route.\r\n\r\nObviously this is very specific usage in a low latency environment and brings in a few of different considerations.","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"1d9750d7-a733-3c8e-8639-c02c3baa6c08","date":"2017-11-29T21:45:55Z","timestamp":1511991955,"authorUserId":"disqus:disqus_U6noZg42Is"}]