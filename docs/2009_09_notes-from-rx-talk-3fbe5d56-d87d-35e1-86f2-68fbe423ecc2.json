[{"_id":"ff814540-4161-357d-b4ca-cb2f7d00d82d","authorName":"HeadInTheBox","authorEmailEncrypted":"","authorEmailMD5":"","message":"> Currently, we have Enumerable (pull) and  \r\n> Observable (push) models, but there are no   \r\n> easy translators between the two (these   \r\n> \"translators\" require dedicated threads).  \r\n\r\nActually, Rx does support (several) conversions in both directions. As you mention they introduce and remove concurrency.","postId":"2009_09_notes-from-rx-talk-3fbe5d56-d87d-35e1-86f2-68fbe423ecc2","replyTo":"","date":"2009-09-05T21:17:56Z","timestamp":1252185476,"authorUserId":""},{"_id":"3ec7cf88-05ea-3dd4-a7d8-a23b32b40a41","authorName":"Stephen Cleary","authorEmailEncrypted":"vpq+u1RIM9UAa5HFsE84PfRY7XQUs1U3GIXkSBkPI3L9RB5tmjrHIqQv0/0j306guWfd/jvhH7D42Aj0Ex26D3qFDf5C+eRkpp4qquu8FQsOwiFa53dffCpdakHjRPbSgF68Gz3kgqCdNF9Hw7K/6W+jFNHwt8HG0EYMBfWg2aeXtA1d0gL4/28DOTOrFmhxXhDYlEbRfMfA2lPhF7XLGxzMTm44sSsFDnewPiLG4VDXI++j6NoMYGKEfxWUoUqGXj5USDbWbV2fwc6sLxVSt4nrfIafrwvb7JT6wFbyBZpKG6fJ27FNzmaxbtJnBxs/CwFhni2p+dAxBfuVfL/xuowqwqA7GBqzjGTXijT6IL9k6vYO0GNWtAyHw6mICSse2U7dGHVjIaNhHZS8DzDDOjMwf2WGSan9NB/x8ZGdEeAkbu5sbLvH3n8TmDu7GvZG96JuEMJfE4keUsDsrUbu3mLpZyFKGAO2YZtp9nSDvtpu3CLUXzgwyxQWKJXnbxzyMS/ry0EElKsv8rwQ9qMTovTYHspn55h7pcPRAB/biuwgnV58lvF/wphtLDS8jC+E1WOi0BPNlfGIfa2sUj/CKD57inRhDIumpMRNa1tpJpb6nTOYGuafAGsL3qrG/6xUbd+iyDBOY4Lr5lJueEu9P7rLQ97gY7w3MUUqElRaLqQ=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Correct; the actual Rx framework does have these conversions. However, according to another Channel9 video I saw, they won't be included in the BCL. Last I heard is that they will be offered on CodePlex after the 4.0 release.  \r\n\r\nI'd love to see this change, and have these conversions in the 4.0 release.","postId":"2009_09_notes-from-rx-talk-3fbe5d56-d87d-35e1-86f2-68fbe423ecc2","replyTo":"","date":"2009-09-08T13:06:33Z","timestamp":1252415193,"authorUserId":""},{"_id":"9c14e7dd-45f9-38cd-b741-bf4af99772e6","authorName":"Corey Kosak","authorEmailEncrypted":"","authorEmailMD5":"","message":"Your pseudocode (and Erik Meijer's) has  \r\n\r\nvar d = new Action<T>(h.Yield);  \r\n\r\nI think this was meant to be h.OnUpdate (there is no Yield method in IObserver<T>)","postId":"2009_09_notes-from-rx-talk-3fbe5d56-d87d-35e1-86f2-68fbe423ecc2","replyTo":"","date":"2009-10-27T06:11:53Z","timestamp":1256623913,"authorUserId":""},{"_id":"d9828e51-041e-3da6-a8d1-d95a82864510","authorName":"Stephen Cleary","authorEmailEncrypted":"uhDZrr/s+SU3FVe5FrmcZ/ZO4n80RKfR9iJ45Hag+MJoYUEWg6ww+9uGfGjqYsBgce7CnH5BC5x+TAOCOwerVsjYmW8ztCzQkjdnwADkFaIBUixvRDdGQIjdOTHXaXPK4p8GMt2IM2Ku3KBm25fOf8Hbdc0/HPYyIVm8LKvSrJfWtgVRunKghj9YHtzNJygYjUQ6sqWYQicTjT0yqaenGkBwoA5qZ2wkcQ3BWlgUNQkJDHy4KRmGPC2wKfCMhEi28dhfAwryOLhzyM24oemaERDOPmegwX1cBvfZ1GywBLrSCLKda0zDT6peKH9Lang+xtSTItH2fuGbdlrCJVZ7JF9jRsQJpOegACvUsl7HiaW7l+/ieuBtZ+CF70NocY2nJPUSfwfgnt0zb2gTVAWoOurjBPqKTT15gxargUydeuxZgY1hMn67wpxeeol0TsHduarU/kRSaGJG4u/6yp+x889MBeSqo9Lz6OS7Csw0hTi8TxX2KfmyFDZGW7qcjjtJfgceT0ZBxfZte94TcQyZDL7oj0ACTGqmbFNVpJrM+bOYM061Q+qhF970pTESi6/tasPlRogsHRk7/U+h+p7fVJ8UxgYwKIHQLDIhKd/cJTpb3LZaLf8ONZUcAMUG292q4TjQourBj+xHfG9eBs+uh7WqdFfzPaxyh9Vx7qtEwcg=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Yes; I mostly just posted the code from his slides that he skipped through on his talk (but I did add my own comments to the drag/drop example to make it clearer).  \r\n\r\nI believe it should actually be h.OnNext. The names of the IObservable/IObserver members have changed a number of times. The current revision is documented with the .NET 4 Beta 2 release here: [http://msdn.microsoft.com/en-us/library/dd992814(VS.100).aspx](http://msdn.microsoft.com/en-us/library/dd992814(VS.100).aspx) - though it may change again. :)","postId":"2009_09_notes-from-rx-talk-3fbe5d56-d87d-35e1-86f2-68fbe423ecc2","replyTo":"","date":"2009-10-27T16:48:29Z","timestamp":1256662109,"authorUserId":""}]