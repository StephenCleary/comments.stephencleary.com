[{"_id":"3a04308a-9d80-3315-926c-eab83854a45d","authorName":"Stephen Cleary","authorEmailEncrypted":"XZFzo/WWHt1yq9Ay1Q/jxazKAHyvfu7P+DR2OF9Yba5xhOOXiUHMv9q88nVO6H4F/b7sq99Sz1ENjRMHIdY2A9SoGOdPafNG+tYfgN86Zf9R5d52/YHGFuVFDuCUmhqMkw6HEpkYqtbNF0BPQw3PkpBwsAMsCbp+E0RndR6m/fZnXAl//sjSmceh2UgeLFOkaVX5dzKJQW1/8Qs4dzbsb5WE6copoQLLf0kK0eJqHGOipVyaj8fToFGNsnfwcVrOucJ87+qWOLop+oIbTndztup3unCrsp4755weJGVEDlprznfgNhiNkSWT6sO8fKLcofAQeqO77C+LQpNpHGm3UQHbQ7tbE9ORS6h3LjAol0PB4sAw8PZhJF/YQ1UgPQa94Kov7bPXgRw18hv9oVIwMuyNRGmg5FD4joH/lvLigPQraj2R54X6pWnO36CHHWn7QwiBejyZ5wSTYXHtEICaoORtLip0uVYf7AUjkNrlM653HpTLqyXCQv6aiXrM23mD1E3QiS/GJGo8148QfZ4FccDt0jdQGaHaDiqcky2mIa1yYbX0IPUDlTaKfUFOgthnsrE0XtQONifbgv20BWN7fOK7ChK/mdkYYvKIzUm4Y0xEUjtRG766lHiKSvk8H6OA5T1g4xvW4i2BQamT5V898/SVO2TlaURM92h8xyQIvYo=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://www.blogger.com/profile/13192873941258824056","authorUserId":"","authorFallbackAvatar":"","message":"Near the beginning of this post I have a link to Tess' excellent blog where she describes a lot of the common causes. Also, by default ASP.NET will recycle every 29 hours for no reason at all.  \r\n\r\nNote that these are all default behaviours. A lot of hosting providers will tighten up these a lot and even add other conditions (if your web site isn't being hit for a day/hour/minute, then from their perspective they can save money and scale better by unloading your AppDomain).","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2013-05-23T21:49:25Z","timestamp":1369345765},{"_id":"6b1b9fb5-54f2-3769-b337-e368ed2764a6","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"Thanks! It is very interesting topic. You wrote that:  \r\n\"The simple way to do this is to just toss the work into Task.Run. Unfortunately, ASP.NET has no idea if you have queued work like this, and it will feel free to take down your AppDomain when it thinks it's idle.\"  \r\nBeside power loss, hurricanes, etc - what other realistic reasons that AppDomain will be killed during the job?","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2013-05-23T21:27:39Z","timestamp":1369344459},{"_id":"09805dd0-6c5c-3a91-8cb0-003a0a394bea","authorName":"Stephen Cleary","authorEmailEncrypted":"YJyXPteX5CFEt8YBlzNRJ5IflH9T9T9kmDh/pmrXb7cB3/Az79XCJMzEG7Y7MFaHmM66ilRb9S1rSm7RBUe+5AsHe/SHDOWaWeYQEv16g6mPuVfJL2tpOOXZwcy/83/FbsiFAUpFC2dTHq0ga8Ty7EAv04uudj7ytmOsmMPkrLBo5Tqg2DfuJCKrxfaoL6LEATgFtTOcNyptbACtcIk4kJXpgUftPz+BPDj0Y+riSwWJJJMMxTpZGkDa+Xq3JNqq7TbnzcBMrji05Qn+p6MZU7M51Ga7DXtxwEKA0HBZxXlbJLYyVRF5lxgJiZ8YF2m4UOEx+UlisFCmhg7RsfebcA47sSlKTOjKrsf6C3/9xmys2zB6wOA+uTHA13EcKwz5P6TcsAngmoTxYSZG6Rg6he3QeMsLR/GC6sF1pHXqpt8XhKjdfFhHAK5/9262ZCU+UzSjiXykl3QK13TC4flB2bELNku6iGYEP40c+EVqw5KNHbtsKEcFzV0oxzq8eBiUUoS99ORXaU/C7VwGM8SzjQJrbA70yFXOldWWaxqG/siJHaE6QlINpCJdlmNne9bgBRJ7eShPxHwv0syewTYIsZP4uXsBRE706qblp/SZF7y87uLmFHoS+mH8kYn7RBKQy4mDrnljYFJfIYKkFNYjTeODW2CsseCh3OdKTDJJAXc=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://www.blogger.com/profile/13192873941258824056","authorUserId":"","authorFallbackAvatar":"","message":"You can use asynchronous file I/O, in the sense of Begin/End, but you can't use async/await on that platform. Async/await requires .NET 4.5 when you're running on ASP.NET.","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2013-11-01T20:19:14Z","timestamp":1383337154},{"_id":"2d9efd47-4602-3132-9811-3e9e5bed21f5","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"Thanks Stephen. One thing I do not understand is since there is not much work to be done from the point I fire off the file copy request to receiving the result, wouldn't it be like blocking the calling thread?  \r\n\r\nWould you be able to provide me any article on using asynchronous file stream?","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2013-11-01T01:48:53Z","timestamp":1383270533},{"_id":"88349330-418d-3366-9376-6f5738a9f543","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"One last question. My application is targeted towards .NET 3.5, can I still use async file operations?","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2013-11-01T19:17:48Z","timestamp":1383333468},{"_id":"9a1623f5-8b78-3c38-802a-ca4e286b5421","authorName":"Stephen Cleary","authorEmailEncrypted":"mnMu9l6iwjujH9EUC1OBoB14ieVrSQMd57vsuyW072sh9r9eFSGXU6QvzT6BN+6qmTiRgEWvGnjQICkpvcDnW8YyVf2rTRe4r+o8pUiH+OZOf1dsyv2pYt5WoEPT5aJxbm8pcw34E3lkbyoDoPIBHfGlgLltRkBSkq5L7QwwaCBy4y+s3c6S7s2b2rM1zKvUey4rc3nUxQgw/3U1EEr4p0b/IfxueS40TOB3jVkPHQnpigDbw4Y1WK7l/D92OdLeI5mfkM5iKQtNI4cc0T/yvwYDJOnCtl7rEQBRIjdoAxDTZ33guucbq77eLcIQjkeNkTNC1IxT+7WHgZvkXhSX/4DMW7vYZgmoawVt8E89SuOVSYijVsnmIqnkFZIVszJJkxBsDaBmZYp1cMHYNmilCjjSy1N1+UI2jKWGRPcqY9nKYiiEMgQ5e/1Pmy+P7JktErkkfgYuBhuJtVbhKvwmvUPeten0sleYLuO9xXfMKCE+qnsf7h3ntD4Hc4/pvv3oq7kr8O1+8XPMy9kHwKihClF8x6R4GYf5fQtyc5qmUZLtILD2MvIVigWwwdRH38IrTJqfasyl4ZStQlvRxgg8dOjFKHA1WeqagLD7Jy86mlF0B3u0vcH/3AhcIIW4fE+HCESfKKoxbe/sfbWN/AC7BCYYpGSGfInaQ7KEABup3ek=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://www.blogger.com/profile/13192873941258824056","authorUserId":"","authorFallbackAvatar":"","message":"\"the calling application does not need whether file has been successfully copied or not as long as the operation completes.\"  \r\n\r\nThe key there is the ending of that sentence. Even if the response is just \"OK\" or \"Error\", that's still a response.  \r\n\r\nIn your scenario, I recommend using an asynchronous file stream (constructed with \"useAsync\" set to \"true\") and using \"await\". This will free up the ASP.NET thread while the file is being written out, yet not actually complete the request (sending \"OK\" or \"Error\") until the file has been written.","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2013-11-01T00:56:59Z","timestamp":1383267419},{"_id":"a07b9833-4a79-3a1e-b08c-95f59f14ee0b","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"So, if I have a requirement for copying a file into disk, which approach would you recommend so as to not burden the thread pool used by ASP.NET to process requests? This is a typical fire and forget where the calling application does not need whether file has been successfully copied or not as long as the operation completes.","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2013-11-01T00:47:03Z","timestamp":1383266823},{"_id":"d8e6fa6c-9207-3487-815d-29cf49021eaf","authorName":"Stephen Cleary","authorEmailEncrypted":"nscR41NaCcq1n7/WMRBN6CK8XsLb0PkDCae7YUQ+7CWfURhuQJMbCYvBs03SD2cjsogyB0+CBXxPWQoWfWdSWrjZjg+5/m4zYRClvQpEn7KFQG4dZVXucKbU1Jdz2XxhasUQExszZ2UomIp1hTkroL0Dj3shjn0cyIdw60OsJVLle8PPpVOxDI3HgUiTkvAJvgv0ZiufgmBN9apssb8m02oQJFKYHXqvHM5QsB+IwsuoHGQE7T82BcN2Tq4JaBkN8YaSygcCmQrWwUI2iqJBlDT2mWCo+AT2VGIm+ihFJkcPvL8hMQhff/3auWdTj5dB8h00QVM/30WZnJfm09tSBIb/wjOXKN2nysX+uc/DwYPMbwbQGGnTt20kxszePGQ8TRYtT+L3SnQNpgw+fTdAk17CuFyx7y+AQ9dnnOYkTMVsTs8v66Vvp0m4SGHNznsz1Qgid6uTgVOsxc/dqtId6hPPrgogfM4RzO7H3djIxdLBSHmqBj2cf1Ax+FVuge6fPb6KyLbROtujZAhfJM57SHnRunnl8sodS2vf4VNxZ2PnDm1+MAZIdg726vWpD4rKiuizTyVq5IB4QQM6AxFM2UtVS9+xLANtH4AUjsdY9jUHmSNtVhGQYSfpyOCfyffQSWDfzznIY+dW658CYdiPpS8fh3SajiLJiIC30WzPpN8=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://www.blogger.com/profile/13192873941258824056","authorUserId":"","authorFallbackAvatar":"","message":"If you use a truly asynchronous file copy and await it, then the thread is not blocked. It is returned to the thread pool. A short while later, when the file copy completes, a thread is briefly borrowed from the thread pool to complete the request and send the response.  \r\n\r\nRegarding asynchronous file streams, a quick Google search turned up this:  \r\n [http://blogs.msdn.com/b/csharpfaq/archive/2012/01/23/using-async-for-file-access-alan-berman.aspx](http://blogs.msdn.com/b/csharpfaq/archive/2012/01/23/using-async-for-file-access-alan-berman.aspx)  \r\nwhich looks quite good.","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2013-11-01T03:20:22Z","timestamp":1383276022},{"_id":"846993ca-66fa-3551-8d5a-52478f68f08e","authorName":"Bart Czernicki","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"http://www.blogger.com/profile/12774476834998242239","authorUserId":"","authorFallbackAvatar":"","message":"Slight tangent....the 29 hour recycle really only applies if you are on one of those free hosting sites. The default behavior best practice is to never recycle your app domain or explicitly schedule it. I know the free hosts do it to prevent memory leaks etc. You mention not going into production with this workaround (I agree), but I wouldn't go into production with the app domain recycling either ;).","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2013-11-12T08:37:45Z","timestamp":1384245465},{"_id":"c5697ced-5d1d-3138-8047-2a0979c685d1","authorName":"Stephen Cleary","authorEmailEncrypted":"VFUNKagTWS3qe3R2eswxDcSqF1h78VxtUe+V46fPbgp9B+Qqx9T5ieiToX6NrsNLpuKPg9HZDo0qtUcHAf9HQOQ5y/gYeeGgk3p5PH5uBgz7DREYvLjCKh8eLDhvmpfeq9/IoQeDv2klMbuY1RtS1zknDENv4RUCrBwtiNLiif4ySum2hIWhkwvYnNOVAaCLA8RdN4sXFubfdFhYYnTdH8g/5L3wEZdOOgUh0UcXurD/5BGJbI0fsqueWNHkXuqhOOlz3qSuafnWja2MKlOxSNPGXEr2JHC4A6i2HKmMGGJXrCawJzwBDM0nphNMSRUUYU3sYIG0DsKisQ7+P9RReexgKnYW+BsmvRVPvXmyCe9P5eeep8GuxawugGeIBstO2xHoeJk1DhXmVm2Za+Yh33sX8JSYq3bhTevfS4TdItjAg+TbE0tj6xHpv19yPfvpjG1TgjM6gPIgIHjANDsdCvDyAqLimI5azoOdDnQZmnejIZU27SqqYWTyRnNHot6PbuUfjgTl/ViLQhKiYVChPV1hv9q+Xxvo+kT95sI2VYpwPnx8U/DG5peBJN1juO3nT2FUxKfymYDOmH9dxJK9zgtA+DhD72viJZAGgruzpSMKg/jIRsZ+nLlOi+4GGy2drTabweu+eWEvAkn9eJ4SPBLiQJbyKP5PQDg6Fcv3XsU=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://www.blogger.com/profile/13192873941258824056","authorUserId":"","authorFallbackAvatar":"","message":"The 29-hour cycle is the *default* setting, so it applies on a brand-new install of IIS (unless you explicitly change it). You can turn it off; however, ASP.NET does have situations (such as unexpected client disconnects) where it will Thread.Abort request threads for synchronous requests, so your AppDomain may eventually de-stabalize. For this reason I believe it's best to leave the default recycling on.","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2013-11-12T19:13:53Z","timestamp":1384283633},{"_id":"06b218b7-2936-3e2b-8461-3d94e2624ce0","authorName":"Stephen Cleary","authorEmailEncrypted":"Bu/gY9aUrlm+eG45OcrMiZqkNcatp/KboBVjPC2gtJDU/kugf1wAzyPPoz/QFTHUBXiP0inoGFExldDfhoG0PdABy1WEoefpbv1gGqQrUK7mHD08pjHJ1tZRLyz21ndS47tXfLwLt01TmbqV3JgL+gwUkjP5kynZ6KnROj9bNF+bv4WUjqKBxgPhULtThodlY9aONEY1dupv7GHRfh0gfHnHDejcIuXVKybtn716HiLk6qOQ9CvQe9fRQLQBIz8aBUWG7HixOm90of8j/yYjsaJvu8TfguBj8KHTUCVBZlkUY5qaVjEwoSi/SDDMijiEoHs3A4ELAPfu6HR7ChVU/CccBTMqfqlkNi5wS08ChyEAo+CJkClyPbo8RleYhWr/JRkeKMtv72pdQuQ3C8sPq7+JlI45JYrlSRi+P2zJ5CXyKawd8+lSTPx4nzvWy2W3B6NA1Vp1gc1+qpUhJi0DH2FfjkiEiHqVqbJHdECHZwoVjAD1iXsO/iMyZ6B+OhwsFsCxbMwq+shwLno9nOkmzDdraB0nMSWPGOJIHBKbGFFbOk8CKfmn5tKCy14Lg+9BKuwm5C+lMh4G6UP8XEo2l01iVHq1f/+RitYH6Ih6rX6UQT6kGRtT+Cdg/mmXSuU1dEYKA5l54Euuol8maCEeq/nq9dN//R5yqSrcLQeQ30g=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://www.blogger.com/profile/13192873941258824056","authorUserId":"","authorFallbackAvatar":"","message":"I do briefly cover the correct architecture approach in this blog post.  \r\n\r\nYou'll need a reliable queue (e.g., an Azure Queue) and stick the thumbnail request in the queue. The ASP.NET request then returns to the app.  \r\n\r\nMeanwhile, a background worker independent of the ASP.NET request (e.g., an Azure Worker Role) is processing the queue, generating the thumbnails, and saving them to reliable storage (e.g., an Azure Blob).  \r\n\r\nAfter the thumbnail is generated, the background worker can notify the client via SignalR. Alternatively, the client could poll the ASP.NET server until the thumbnail is ready.","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2013-11-13T03:17:21Z","timestamp":1384312641},{"_id":"0b8c7837-403f-385b-9e2e-607fa33d296d","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"End user sees a notification that says operation successful. I do not want to show this notification after thubmnail is generated which can be 10 to 15 seconds long. I want to be able to initiate the thumbnail generation process and then return the control and thus notification.","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2013-11-13T02:24:16Z","timestamp":1384309456},{"_id":"29e48200-2c5f-3837-b157-b08175b1b222","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"Stephen - Great article. I have a specific question. I have a working code to generate thumbnail for DOCX documents and it involves intermediate step of converting the DOCX to PDF and then to a JPEG. This whole process takes anywhere from 10 to 15 seconds and I do not want to block the calling application because thumbnail generation can be done in background and user does not need to see it immediately. Thumbnail generation is done on a different server. I do not want the calling thread to wait until thumbnail is generated. What are my options here?","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2013-11-13T02:21:02Z","timestamp":1384309262},{"_id":"e0189c68-3fc3-3da1-bc4b-b659cb9d5d4d","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"and it is an ASP.NET application","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2013-11-13T02:31:25Z","timestamp":1384309885},{"_id":"14ec7099-50c8-3c20-b7d4-fb4faf4b1995","authorName":"odinserj","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"http://www.blogger.com/profile/10191348663936414637","authorUserId":"","authorFallbackAvatar":"","message":"Its not a rocket science. It takes the method name, declaring type fully qualified name (for static expression and specified type for instance one) and its parameter type names. Worker takes this information and finds the needed MethodInfo instance. Arguments are serialized into a string using the TypeConverter class.","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2014-04-08T19:01:32Z","timestamp":1396983692},{"_id":"23ca7190-577f-3b38-8599-b33bc6fa0fd0","authorName":"odinserj","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"http://www.blogger.com/profile/10191348663936414637","authorUserId":"","authorFallbackAvatar":"","message":"If you are interested in a reliable solution for performing fire-and-forget work in ASP.NET applications, you can take a look to [http://hangfire.io](http://hangfire.io) It is based on persistent queues and give you guarantees that any enqueued task will be performed even in case of process termination.","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2014-04-08T18:49:18Z","timestamp":1396982958},{"_id":"cf6ddd0c-a969-3091-b252-45349531955f","authorName":"Stephen Cleary","authorEmailEncrypted":"jV93Ju/SH4CKgFj4bUkaDhAN/4HpoIhjvYhtBzsIu2S+3u7RFvtKRXcHttD7dE0xIOZzARTKv9qy2DZkrHPL3GM0BYIU/3lUQybq9UfvOruO0GuNkDYq/Me3Ag9pM5/rsnMFGcL6OGtATDoJAdL+0rK78CPkRhkK2HbPP7Bqt4Xs6kiB4jLnr9geocKgkLDqkYZJgtfyoqdQN34NxFuoBMYvLCQBfLwn7Qx+gpKOVCP8+EJoaM3zj5JuXnO92CFaS6ADw6Hpd8u5ju61expxg/oAPQKB4OrMXhtVScfdL61/QhYdtNaq/KfxsLN79zCUyRThYSTNVD4hR4baM7T6oEiX8B9vPTrGnHQXnHD6L+FwUvB9u70LOjGENU6oLg1I5fQ8PfBDiCGOD4MgVuf4iAzZUxXApiw1iqxsxrDQ6HwDJsCnS62jP72Rg9CSQv2Cp+P1k+IAjy7kASFc4RJeBXNb/b/ultFy0nYfuJElPAwbPsqORZ0f122rUoAEBTMFHO3e5mcxYxk8ahyHeoqWbuXNx5CjlhbEd+FHwvEUUgSKvONKSxgNu/l0Pi74K8fdhzztSK/V1E6DrJxn6hxGyCMuT+Lzd+Sip0AbSdr8YF8q9woXoi9fTNJae2lb53BFfKRX8fRrm0HYg5k19n41ACNaot7bqJKin5a7T4vTnIE=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://www.blogger.com/profile/13192873941258824056","authorUserId":"","authorFallbackAvatar":"","message":"That looks interesting. I'm curious to see how they serialize arbitrary lambda expressions...","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2014-04-08T18:54:49Z","timestamp":1396983289},{"_id":"25092c31-87c7-3925-9fa2-1c72f70df247","authorName":"Chris Center Dynamics","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"http://www.blogger.com/profile/00247490467555634258","authorUserId":"","authorFallbackAvatar":"","message":"I suppose we could move the persist of the email to the file system to the response thread, and then use AspNetBackgroundTasks to send the message (from the persisted file queue, not memory) after the response is done. I would think that should get us *fairly* close to zero loss. Considering the general success rate of email getting into an in--box, I think we are good as we need to be. :)  \r\n\r\nWe went down the windows service road in the beginning to send emails, and it's a pain. I have long thought it would be nice if [asp.net](http://asp.net) had a supported, in-the-box thread/queue/whatever for long running processes that don't need a request/response. Thanks for the AspNetBackgroundTasks project!","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2014-04-23T23:48:17Z","timestamp":1398296897},{"_id":"5532eb25-b2bd-3cca-be19-dc9fc6bcca42","authorName":"Chris Center Dynamics","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"http://www.blogger.com/profile/00247490467555634258","authorUserId":"","authorFallbackAvatar":"","message":"I have been using ThreadPool.QueueUserWorkItem on [asp.net](http://asp.net) for fire and forget style work. My case is we want to send an email (SMTP or REST api call) after the response finishes. The email sending can take up to several seconds. If the email fails to send, we log it to a file and retry it again later in a clean up process. For these reasons I think fire and forget is perfectly legit as the browser doesn't need to wait for all that.   \r\n\r\nAnyway... my question: is AspNetBackgroundTasks any better/safer than ThreadPool.QueueUserWorkItem? Thanks!  ","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2014-04-23T02:30:14Z","timestamp":1398220214},{"_id":"6e786945-f90b-3072-80bb-3d5d4694c6fa","authorName":"Stephen Cleary","authorEmailEncrypted":"QfAFh27YCdX9q/Ts7wM1b1flpxKhIDOooah+Ukw1cNFEDExTqikI9ztQfGXF05gSs7z05CwBpTz4VBVO8Jny+mek+lsfXMvYIuNDqB2s8X0nzARo+gO3niOzB1IWJ6M3U6tI373JL5cqgPPJ9pBavvRFoN2jDdu3kg1F7BOP0mTRe/vrpjVl+ijrHJBuDxEKhmIqNw4L0ZLc6pEjQvlrOM03/sqT4RRSeL4P9hpIwsnQUzOoFy1FESYBGHDfVakGaeJZikgKbX0qFapnwU6L8doReCWtzFkuKY6v+DDAiTTpGxDm1xFQGvZfH1Or9M1ubfZeco0o35wZcdoFDOVdOjZFJow/Yg7bd5BS6Yr/BPhv6cE9bll2bP3cHlJuR+rkjV8sh42AXJA0nABwjscdUTPcAWnq/B6Hfr4Iv9XSbRATzwCJ1p/qEjrGGFVUhoT1GoEZO7tU6kgDDcZsO0HoDgZ8vO0bf86KgzpaKp3pLM7B240Q4dNMrWqrBSE75vF2avyThtgtCXASU2jTayR65KkIR7OdNoJpt35GAsM8nNzsgZKr/c6RuPisCGFrBo2Cg5n8ZZoJppMlQaGiZy4xf7ZY1YVsxSuZRgdPVe+UW4rfYhUKIabV4WhESwjTmjQJ8bE2JSxJqou+m+Efb9TJzDqCRkDP5f2b/Uo33lkgM64=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://www.blogger.com/profile/13192873941258824056","authorUserId":"","authorFallbackAvatar":"","message":"Respectfully disagree; it is possible that your response will be sent and then no email or log will ever be generated. Unlikely, but possible.  \r\n\r\nAspNetBackgroundTasks is essentially a ThreadPool.QueueUserWorkItem that registers the task with the ASP.NET runtime, so it is safer; it reduces the chance of a lost email/log even further. But it's still not guaranteed; the only guaranteed solution is reliable storage.","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2014-04-23T04:25:15Z","timestamp":1398227115},{"_id":"47f86ccb-099f-3795-93e9-3b50ed10cfec","authorName":"odinserj","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"http://www.blogger.com/profile/10191348663936414637","authorUserId":"","authorFallbackAvatar":"","message":"Give a try to HangFire – a reliable way to kick off long-running processes from the ASP.NET request processing pipeline. Asynchronous, transparent, reliable, efficient processing. No Windows service/ Task Scheduler required. Even ASP.NET is not required. (from package description)  \r\n\r\n* [http://hangfire.io](http://hangfire.io) – project page  \r\n* [http://docs.hangfire.io/en/latest/tutorials/send-email.html](http://docs.hangfire.io/en/latest/tutorials/send-email.html) – Small tutorial related to sending mail in background.","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2014-04-24T00:03:40Z","timestamp":1398297820},{"_id":"eba83a24-85af-3ec0-901e-09b59f23c2e0","authorName":"gambo","authorEmailEncrypted":"kt3OnJA9IxBIgCbwXyuVMe7ANJxKHdWfFVi6A1zmpAbIq5WJ7UwHRNL507akVhDBsULsvO6fLP2ZYUeoVEg0rQ9zH13jFdRMmhbhC8fcvBmN8R5X9PBS9awBGNY22s9UO2TpUBqd8+zGfbna1sq75VoFZ2Tix6cubbB3UTC50SKZdH25XhHbVWT14ruz6fTQQAGUAnniKuAl/3sAjxW3SNJC49UXpujcbB6ZGn+yDMhpAm+U/LfscCExkS8AuXjzeglPTBeAPRJuGicTkML7j+bby9c6awGBcAePgh2jleTJJNJ0Mqg/g9RbtiSq9hqkP7z/Ot/7lnP0DJxmLtb/kyXYgI48InNN5Ep1zhIgBdQqBRUGGx44eHeRGUzVG/CLlNzescFPw5lxhqmbvmol76Kz8pvXnjPNmWSPghuTwmxRmLcC3RjHtVDso3MNi3vDu77V71aRopqXdu6lalMVGpKqDs64mGZ013lMgHEAAbZ9bJKVAEsOZ3qHLgq8ezLplL0haX0/C2kSwRfu8FY/yfCUFfgFwLtdTA4yEIk6TOTHYqvji2AHLUxN/LFKWsEKit2pFpFw8poKUqQ6z3I+cwMVVXrAHmedf9EI+XR2zjcfaZ+kT4VDx0Fc1tDt8HTFZIYssIwltfeTdqsZAoSV5TaraAeTxuami5ACJ/ifMhc=","authorEmailMD5":"358043878dc0f3fa0cc9ee251d274d53","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"You have 30 seconds till the next notification in which case  \r\n“immediate” will be set to true … this behavior  \r\nwas implemented so you can be notified about the time elapsed so you get a sense  \r\nwhere you stand in the shutdown process, time wise. Put it simply it’s a convenience  \r\nthing… bottom line NOTHING will get  \r\nyanked until YOUR code returns control from Stop … put thread.sleep for hours  \r\nand your AppDomain will live for hours… the shutdown thread will not get  \r\naborted after 30 sec ...  \r\nas far as “power loss” well there is nothing really you can do about it  \r\nregardless of framework used :)","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2014-05-26T15:58:36Z","timestamp":1401119916},{"_id":"aa158d45-209c-3b49-93b9-6c4933cb7adf","authorName":"Stephen Cleary","authorEmailEncrypted":"UyijnPjXw4dyKchKsIief78tUe4iWuQGJyyL7Owq5KKvSb65SnJvv2YWHp0XlK0WLCLNblXt+nBqqqV27XzVSap4TMgxCyFUO960k94pNHOYpIVOsAYrf/6K3DMnt/oHfRjeonD0MmGCBuP5wpMmWZrM7GkVck+Nj69+/t9YPyRm1m9oJl/V6yWdTsJW3/1RnsnK5XqneX6AbeWUrnf8pJHZrN+faalqPza3NUNO6aU/QsBwE7jBp2Ewa7R0rnE6ivyo3tQEjLtjOs9B5BCtZNv8DJCxNsNl2ryzRFD3IAohKayCpG63DUNiXXZ8cyex+Cru5TTNpob4duwX6JFZM+bsetjEX0KUqN5VGNiH3tpXi9wd9G4+elFH5qopPhWhL4sFwIL6H2zC9x0tNBmSzRD5ENWkh1rp4u9nyDcUwWUSdXFW1EwYkLB0H3XCRD0bDgGJH/6uait6tlwBpdYQ6sVo5obcVN5H/DOxebU9TxknHXVUEARAzsRX6BFElbrdpc+0nLXN8gFzQDc0zmWsxrfhulTtpZO1AxGdLjYkUh2bkiFoYu7GCcH/iqwVID5ETNyfBG2A9Jt+Df9XfJE2/01+wqr5PFr7+yZkHpiavD8V0TsuJh4GyBNIdT2GaH0c4JYqFCTeihiHHw04+Huqtj6G0KMNsqjH+ayvokqWoag=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"I wasn't able to find any documentation regarding how long ASP.NET would wait after calling Stop with immediate set to true. Do you have a link?\r\n\r\nPower loss and other catastrophic events can be handled with a proper architecture (persistent storage with independent backend).","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"eba83a24-85af-3ec0-901e-09b59f23c2e0","date":"2014-05-30T12:54:32Z","timestamp":1401454472},{"_id":"d0c8d914-123c-3a71-8d96-8d9c9959c18f","authorName":"Stephen Cleary","authorEmailEncrypted":"mYyjgZZD2ADJvdLnURbeSXaLwqrSl4Dl63vYcR50HznY+2dcNPpotmeTJF+9hxZkXi5iuMtNhubr6rJVyJmxVWoDx2O3nomrbZjyK3tZoZrcOuHhbbtByYGzuBO8jI9ur1yihRXbl+cJmVwR1KGy0pB4INZ8UxSl3k+E0UCyvWshIIc3RzbK5XqD34FgdZi0vcTfyRtURqrQfN6JPbEWAQTZBbvCXIPKHhrRY3934nYsc5GM1VDsN9IyK9gnTah2c0FbZdc0jM/hsWSuBFgEa01FkByE0M3wAJCnMo/EIZ5XfJ18hJxneRKkpL/tid6i0dlQ5BYer9rTGDt/QnNLr+MwrbiqDFKltCLxX5Owy5PtDLf4zXA9Dvv/JMODZa/fUkaz0d5A7i30Dx8JrfHeZgsKh/pDPgAO+CZUd/Tr663zzZ6W22QCtJuyUDwKkyCc1LqiFXVsez7lxJZ/mNpgiY1+Mun+zYmRXJpNK/jzJ7iNmosXdNo7fWY/9T1+3rpyohmjRvKVShHMjuDVz0gpNCFLLw1ZQ6vnOcfC6gzWVGULMs6QDTy293lKnK9GYBW+Sg1Cfpu2/NBxogbU+PQfCCsbSi5T7FYnmRkpQhMd2fLmnvUVkhw3PF8TPRooYnxzd2d3qLz1x7eTvRvW7pLllJZ5pHWmBNVdrWtIpONTx5A=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"Good find! Also relevant, this was posted yesterday: [http://blogs.msdn.com/b/webdev/archive/2014/06/04/queuebackgroundworkitem-to-reliably-schedule-and-run-long-background-process-in-asp-net.aspx](http://blogs.msdn.com/b/webdev/archive/2014/06/04/queuebackgroundworkitem-to-reliably-schedule-and-run-long-background-process-in-asp-net.aspx)\r\n\r\nThe persistent storage / independent backend is not just an async operation. It's a whole architecture that's designed for resiliency. The benefit is that you're guaranteed the work will (eventually) run to completion; the disadvantage is that it's much more difficult to set up and document, and it places idempotent restrictions on your work.","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"ddac6fbd-cb6c-33e1-8497-a606dc1c9a34","date":"2014-06-05T12:57:36Z","timestamp":1401973056},{"_id":"ddac6fbd-cb6c-33e1-8497-a606dc1c9a34","authorName":"gambo","authorEmailEncrypted":"JTXLjWVGyIooM3qsbPUV8HXn09fyquyvpqNKcNkRrpdMOCvxOjMlToCgM6YE034qgbm+XFT/3DvFKkD+6107A4mhQegXCGoehFnsnMHKbj5unv4CJ2i6kWa0un+aw401h+Jvgn8eWQhWpXdurpVwTsYM5gXExpxFXKmL70FlUvB36IT66ayC4D2N4yxzs06FlSDoSZ7axWrQA+cQXtw/CjT4yc56dMJKjMdFn8emj42U579bCFnCpb5xrjOkGOrj0PA99oUogbMIfzv++24Ye/xufGNR2a5ZOB9etoRj+DEKTnECBJzHGeMOwKZ+ezS79jcouBBPO8LjYFToFvTLPPFCs99it3gwmvsGFBdaf4TpyaMHRZTtZBWj5BqvplxB519XM0OcHs4l0AKOHCHjDl7nX8RfwGnDj6bBwOJfjUdR1tCipg3KLn5gEGYPfiunSdM+gymt2U/1VKar958mYoccpOJEvKonIQt3Mb1Tnbx00tWNa27VjIE/OCPPGnoickVuu0qejSNkK/+vjSFMllNRdGSsSzxJm/ubJ+BCZWKPZf17aThAPXA/fvrkw4UrYllwkJNxTq+XtpNi1k7IikgVpOfa8J7OSDdGgOyr/gT2FRv1KL3JB1FKmzDndyu25ytDMi4F6sb7htRCES186mrzHONzDPu1eVCVJ8DJT0U=","authorEmailMD5":"358043878dc0f3fa0cc9ee251d274d53","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"[http://blogs.msdn.com/b/tmarq/archive/2010/04/14/performing-asynchronous-work-or-tasks-in-asp-net-applications.aspx](http://blogs.msdn.com/b/tmarq/archive/2010/04/14/performing-asynchronous-work-or-tasks-in-asp-net-applications.aspx)\r\n\r\nQ5:\r\n\r\n\"If you need to, you can hold up the unload as long as you like, because we won’t unload until your Stop method returns the second time. However, you should be well behaved, and return in a reasonable amount of time, and preferably immediately the first time Stop is called.\"\r\n\r\nYou can also test it yourself.\r\n\r\n>>>Power loss and other catastrophic events can be handled with a proper architecture (persistent storage with independent backend).\r\n\r\nSo how is this async operation different than any other in that respect?","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"aa158d45-209c-3b49-93b9-6c4933cb7adf","date":"2014-06-05T07:54:14Z","timestamp":1401954854},{"_id":"1d00a4f3-dc85-367a-8137-d9ce33fa81f7","authorName":"Matteo Migliore","authorEmailEncrypted":"CM+OyhiZ82oltnmbwK1usYhAYhTYM+SqdAm935IOZImS8l+FB76/MSOlFzsBgI2t2T7SFligMstHm9NubXMceX+D2o+CRBIvhSLOCI8mhLf9n8QoLS6lCzRge/eRUqIMwKgXGlfweHWA2qBLZ2x87qFyHwIouR7h9MqQgBUxuU9iaZAMovkqAkG9PPVyztKiQsUwGn63YIhqKTj45coP9Vkp4ZTi7/hlpUJ+SJkZDC/f9o1mngHkn6ZBxR8UhiG8gTJ7QC9SYI5sVXH7f9MyndcFtUx5QaFR1/2YMA7zJb0mshmQjgFLsAme7UP2j/SkbvyMPYckHt41NzgVkRfpS6DzPoAhU1xt87RpWI4Y88Naw31JKj1GhdgISk2c/KSc6jEqf9rK2Ukv8A7T9RH49o41IjcbvT3RYwgV7PPUbj4wX9c1YwdN6UbOqZJMXFZBKIJW/Tc3CjGlMsoOKc7hltatxvMpPcADub0ZCcbyQRfnyMI6lybOFw6exbk77NCTLtAMTGpahLnwWMcBguHIuGD6dGCSXGzn3vwAGVBGmwPEZZsIrRghIyplqmM8zAgnUs8N3MrwVxMfC+1WafRVsd+N1V2LYLgVxFEQSxAqFJqYwRraU35PuYE8Q60GdldNnh2NHP72fsnuOjBdD0+wVkk/fSg4w9a7g1kiy/N32xc=","authorEmailMD5":"2d27c5a0d7ef61fbc75dce0d7f9a2382","authorUri":"http://hsdk.codeplex.com/","authorUserId":"disqus:matteomigliore","authorFallbackAvatar":"https://disqus.com/api/users/avatars/matteomigliore.jpg","message":"Hi, please report the link to the Nuget package. Thank you!","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2014-11-05T22:20:41Z","timestamp":1415226041},{"_id":"e10e7870-cc16-39e6-ba44-e9d664d05883","authorName":"Stephen Cleary","authorEmailEncrypted":"B3yKhvYpinYN0MzHD0M4QVjP+J//wbT71GpaZgx2ioT9GNFgx7Xlp+7e9o/LVlkuKl4ITct8kql/myJfOaKIzmFGbr7pPzX12hxeh2CIzo8b8pA5f/mRvnpQigyOkmnBPloEr3mjcHsQmQ+Xmp0SgtfAEg9pRuwXOjdQT+Hw8IOtWYK5ZrL+xnSJkLHKHkjUqeety6r1eaedVR9DHb9Z3f+bqIXIW0Pxva7hgji4h2EsanDm9pYl3NnoQ3oyZk4TX3K/vUs6N7QyilkfF6LemmOI6vIsbEXea1S/g5ywhGGoEvvGgqumwT9nohfDHWc975ojcR3ji1k7d/m+8WBUQobw/SEAq6qsmpwA30s2N3CwFbg69c7cxQeQQon4fngZs+v5pltgOKTjQK427bkmOVydIP++9Bru+oYgIYjRQ+A2yQTLqqlIEbcTfw0VI4YwmjUv1q8HaXsF4MlNrKeEI6rmnxZoXjWYzb8DfT7xXJ4/2j6d3SVaUabsEwrfSx1xcbQD1k/KME58YDlFG+cwjRyOxvMhRGSdyZ8TYG3FN+/fIPZfzaKehBGGjmyhEh+YNgk8bOI5+mNOO06bc4nXgUflVSMF4MOJcNSj8QGyCms52j3iMWp166VLxcrjRDnshgMUeSN6SR3yvWv7ST11ib3+eGhDpwxQPRlhYlQbFnM=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"It's here: [https://www.nuget.org/packages/Nito.AspNetBackgroundTasks/](https://www.nuget.org/packages/Nito.AspNetBackgroundTasks/)\r\n\r\nI'll update the post in a bit.","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"1d00a4f3-dc85-367a-8137-d9ce33fa81f7","date":"2014-11-11T19:22:30Z","timestamp":1415733750},{"_id":"54a3bc87-8131-3f61-881e-2d4dbaf4ccc4","authorName":"Matteo Migliore","authorEmailEncrypted":"lLCphMKVJCU8P8jsObxr2kndZq4wKR6TV1HP6EAbfsEUQmdEJkmNbfx2wHHOn/raV4Bp4N7bzx4wNetkiol9B2l7qbNnUECcD81UYJIAdBDPAg/b9PaaScKlr6xjcbArPUTKm27GydVE1PZAAVo8aur5yEFRy6A7imNLcfraDlTvyFVaLNSe5xDFYwo3hGvKvBIehAWcQuJIrK+cQqUgyFQIjHPzqeNamKyETmJeKFKy96Txgw125b3Sw1PiskoNu7hQ0898+BZAukub1gIhqujvg31jAPcjJnyGutiKtx9fZqplZpgiPS12YBnFOkh/T9XymHiROfad/jdWFAmU0Wv/IoBft04ql75ppxBdXq0X/DM3mYqBDlmsF+C/6ci6PhweSa608XswiO6fTBgC9VS5klYc14O7TspdKhbrRHApfACtnn7uVaIKsLbrTe9rh0qfvL3s2hkydWpHYggzL0+kQRnexzFFdF0hpfHFTYO7SkpCXxxSzy4tmnISSiH2uY1O1V9yRuwUbW7xiEPy4TzOjsBd3Xr+SlAdqww7Jku3TMoVzE321DHL+kAKfSiKoHSqigzfP9v8MUD9vaLHu+jt8ZZHoC8+I5S9R6OhcD3e9k3USFUWoW6IkjqYk5CsYl4JaZHurSK1RZD57++zhp/buuViEngsFmWuc0E3zZc=","authorEmailMD5":"2d27c5a0d7ef61fbc75dce0d7f9a2382","authorUri":"http://hsdk.codeplex.com/","authorUserId":"disqus:matteomigliore","authorFallbackAvatar":"https://disqus.com/api/users/avatars/matteomigliore.jpg","message":"Is there a way to have the HttpContext.Current.User not null into the thead?","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"e10e7870-cc16-39e6-ba44-e9d664d05883","date":"2014-11-12T10:38:26Z","timestamp":1415788706},{"_id":"1e29c5b9-6df5-3de5-a93c-b4289023079a","authorName":"Matteo Migliore","authorEmailEncrypted":"ZciLkW2bvnrNdDioYbq/EpRvtgRJfnksx8aSh+XgPuoBTq/P5RYbUmX1uWANPCp8K1bu0aClZag2HV2hmd6l4kMmOzF/mrfLLUjMsiFtalZoFBT8tso2MFeonUEAzU213Ju+5UvSJ1wa8y1QpR5F2mYh3ZEtolrugySxtiboTfXroY2UJ9pJOkDjs5O4Tf0ANmitTGxMbFT9LZZufwAQ9jKhrMjlpeLNE/0MI8xmMU21RQEyzW2VBmsBPs3AgA82E4VmpEGosRFBQb/FdDVqMjIxLFmIMfP93QS7lfCdzj8rOPHNVHLVRk3UBFYFAfOVLG12l4wqyIpi2m37Vs8VLS9r5Hku5lwXmfM87ViYMbJswIh0wq2iRwH2z+mQsMw6nPe4lrME2HUa+alWgD3HpM/L6aez9nl6C2ig4ILmjF8HEJ7UPBsLaIzA6TbLldpjSv/ImSdvZ6lI8FVj+1vg1wA+AiP9w4jQZg/tcLX3Iugs3fN7/pwr43GcCeTA6ain4TqVM7lQ0C4R9gcHvngKysi2+fHV2fZBg+3Vlq4Mlf8LmOMd9g2R9/2iVKuR9TAf1fvuiICtQmCg9Pn+g72IChGzXQw8xQ+eNoFMvpQJlbj7sE5TT0eqqX9PXhh/qgASmjVdBTTBhb6mVUzRZY00RaKeFx3bGQvJQg3vWxb44Qs=","authorEmailMD5":"2d27c5a0d7ef61fbc75dce0d7f9a2382","authorUri":"http://hsdk.codeplex.com/","authorUserId":"disqus:matteomigliore","authorFallbackAvatar":"https://disqus.com/api/users/avatars/matteomigliore.jpg","message":"Yes, right. I was using it to filter entities, but is bettere to use Thread.CurrentPrincipal, set it again in the BackgroundTaskManager.Run method in the caller method and the identiy is available.","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"3e13fae8-51b1-352c-ad05-61a2b9c3a148","date":"2014-11-13T18:35:12Z","timestamp":1415903712},{"_id":"3e13fae8-51b1-352c-ad05-61a2b9c3a148","authorName":"Stephen Cleary","authorEmailEncrypted":"p6YORE+tMIYVpScAEohp4SLnJzbX3Zohvn4YoWbrPnfuyrAK1O6f6Tu4H06VhwrVqcCyKosP4nruGX6ic+qHb6JTkrBNF6NrfHlFyGFAfud3lfFh+cxs1hB+bFnAiky7Iha9qs+jypaFEj+lYj0uB+2MalpIUJhqByngMXCu425oaTSfewrAXXlVUDoMwkqma8x8p4Pi4kt35V7h+GuoOOyaTglwCgmGXK1LEVDCPcw9OB/LlBmkt4c6EZy3WKEJOLIZc72MtzSlgcgTxf9qUOEd3yhPolHQ0Zi5fXjq5BJzC8oiFVyDQzkNz35RmlK/N3D32RMkWIMLB4pXSRmOyG5kglvborPlb8rpBw3NRAZ/0YYNs8DKTTvl2Cl6U9rvmaO7GuIcSi9aL+pGw+T8xqcmwm+uqEXWuwVo8D0UERDm4wWbW+EP9LgtwK4tdJUBX+h0MG7ZiH1CRnaoIbVXarKL+MX6rd59KFt2PSNsx7N6ej7mgURbJTe1e3w4RJ4aTcAEyCzlRrHdwfv0Eb1j4VI8ASxAJpz5NiJc+vdjLHqeYEdo0oOUVMH0gSn8OvBS1D6JObFoX/QWVUzM1KvOLNf/vWIsJsVVszSlhGtkiYpwcr3lwNxhyFdQFw47UrmTcYktmN3oYGFSfl+chxygJHB4shdnLapOyI+qvxQs1B0=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"No. If you return an ASP.NET response, then that request/response is completed, and the http context is disposed. You could capture the user instance and pass it in explicitly, but be aware that the actual http context will not exist.","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"54a3bc87-8131-3f61-881e-2d4dbaf4ccc4","date":"2014-11-13T18:33:27Z","timestamp":1415903607},{"_id":"4d72013c-2462-3d58-a0ab-05eabf9aaaf7","authorName":"shy peleg","authorEmailEncrypted":"LKMq1ZSlcUPvI6cmkYtOghXjgNKK+CEkT1Aewu/HRSetTGSxx7peB2N0q0a7Q/fbe/71rT7FFesRfus7NtoZLQn6FMZNdBTDZykKwu/83Vv8cZAhI5070ST8adACWw73wy8zjSuMO2BbVfIYc59hmiVfN7DO+DUhVeEkQDo719oz5Jg7ybhNHyoYuKfSJRvAfqDED6hqhWY8ZdPz4p5eLZ9Ffh+vii3ZD2b47YPzPjSPgoggUpgGAlxhaynwlxEKxqzrbJtrEnWKiUxxJOz/PPtjO5Xus0wtejIGOxpY42ms0LZ4Wai9GIJq1RRbzH4g/TFVcCYvu0UXGuLVeVahiN8UN86W69CF1PLCjnumGyhFultoZesq8EI1LLLAJFCziqhC/3zKhdbBMFffz/I9T8FFSqb4J+pdivHY0CGkhY/0ao31U0+wdLxXxAIHnO69KvkidYZK+FiHOupvnlEKl27zNiyPz9jLrk5nggtGgitxB8C2usa1rTtTnf1lOVgrszhJs/13BICMkIyD7eQ8ptgoTQQBD5Gjn5luAB/wtlicweMTCcybzsJP/gWZMheFmeafJ0iF2iXTNuhOE6vHb/+BDeI5KPFC7csTbRuvhEk4XrT7iV+GewsZHpoMxxupgVpXg7EC4n7VScvB2cq/M3IxfaDa5mXk4j1MWlGcYlg=","authorEmailMD5":"3bbd7e5ed414027b7e169ce00decaad1","authorUri":"","authorUserId":"disqus:shypeleg","authorFallbackAvatar":"https://disqus.com/api/users/avatars/shypeleg.jpg","message":"does this apply to wcf ? ( self hosted )","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2015-06-28T22:59:55Z","timestamp":1435532395},{"_id":"a5b9401a-04d9-368f-8960-faa68c54dcd2","authorName":"Martín","authorEmailEncrypted":"HF1y5nAIQHMjxVSEbkmlldYAInSN5SuvW1A3e2Wb1sVj/7th+smLzmtCq5Vqmk9+3PYvRYLltNRUDxKLd+E0SGgHjq9mTiMDueMXHkOOE8ZWSBM3l3RaQwzU/UmHBCxfxMPhgw9p+xA2DEMmj5Mznb8jBw4hUvfLKsp0icG64DDRhxsaI+WnnUMmNbez9dIYu6YdvMeheK+G3fultfuqMrlTWPs1BuCJCDrl61OFXFY68J9x3xEFbBCCrgYo5ICB7QS3jZuYEVXtMIKJ+PrWnU8YzhXiz30fIQowYqLesnONpYA57yYGEw3gDaVxiIfhP9r0MGllyax6DyNbDygpbafetzLGEtEwNOgsbO1iBWoF7QFoPoWadyECXgIeBSrS0Pk15B6BHjSqMPxThC+4/av0l3QrdaMpBAGeO52c9lXhMKGaRuq+DMb6Q+KcCf8vbENF+OwMUYGHTfcK8tpx6Yan3oH7ePvEAYQU++dp09qpiO+ul4fLQ9Cl25+uS9vl9CiZfUuoaog2CyhgdWh6ylceKJvlgs/Xu6llmFrJJZW41mAjdj5hK8Tt7aJhJf1Qwsb6ureWOh9TFkgMTeKQ3HtdU6Qqm+2v1vxbBX1k6cDtEck82moIkTqB3GJM9Gl4o65x+AZC7bf4w2oOjDkTS7WSUuq8KoWJnDh6TodGr6w=","authorEmailMD5":"d55e330b28aed346b34c04dac78e303a","authorUri":"","authorUserId":"disqus:disqus_89nloQoRr3","authorFallbackAvatar":"https://disqus.com/api/users/avatars/disqus_89nloQoRr3.jpg","message":"Most useful post I've seen after spending many hours trying to find the best way to fire and forget on [asp.net](http://asp.net). And first time I see someone ask (as I asked myself) why we should care about power loss any more than we would if we don't fire and forget (assuming the tasks we need to do are not relevant to the user, i.e., even if they fail in the regular case, we would send a successful response to the user, so no point in making them wait). Thanks for the post, and thanks for the blog.","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"ddac6fbd-cb6c-33e1-8497-a606dc1c9a34","date":"2015-06-28T03:28:32Z","timestamp":1435462112},{"_id":"d7717612-5b47-3785-847d-5eab30d45448","authorName":"Martín","authorEmailEncrypted":"CXpA4jth1y90ZZCg/34UgjvPWevdDPvjWcSgLJHhd6j8SEuA5huTUkONzgfdHneOHLzpTIMI2ixxhT1BOAVsWVpxZg8dUYTQX0k2BaHNFX9jpjZfw1qQcuYOdsjwZqPQY/JBJ+Thh72edkt1I1BM6sDLL/cn/rnMO4foYHIzfcpb6CFKBEPNnALFa0dS2uC0W5i/6rHU4957PsqVn8yDihFq+bijOgU0OajAr5DX1rtkMMj1ne05L5N+NU5jM5AWmlJpmuRrHcoXBUwj7GZYUzSZGL6ye3655TvmxfsAT79no0lL9U9etjSwNPksVzHXTFtOolBPsEcaabzcKeqAYNTccjcgorZ0LD9gQ1jbetttEzEgdLxaFROIwzkIlzH+rxvJ1RtQ/Sq/KENydmkndha9qTFm+t/cfxVJC07/Br6gW8QE4VfgjRqDcD70C2gI9rgPyofJrpUrEO9IdOeRN0OAMmNaJVzGwtTdjVvby5wKeGBy5uUUNHYmAEJBtGC1uRm7XhPFfUwcJYhNibIWDIh/yb+f8bizzUDGjFJrbreEUpTZqQzEJ1oeM4paa3WjZWIxkrEbzOEfXvEqBbcK4XejNzuKmIwVXI3XD39LF2CRqlsrmQ+gxu/I4rJLQoZQYW6pZkZ6LSbAWn0+dEnUI064is+9Y4F+ljfQFSQBvSs=","authorEmailMD5":"d55e330b28aed346b34c04dac78e303a","authorUri":"","authorUserId":"disqus:disqus_89nloQoRr3","authorFallbackAvatar":"https://disqus.com/api/users/avatars/disqus_89nloQoRr3.jpg","message":"One caveat about IRegisteredObject. ASP.NET will wait until Stop() returns, but IIS won't, so you'll have to change the \"Shutdown Time Limit\" setting in IIS if your tasks will take more than the default 90 seconds. If it takes more than that, the worker process will be focibly killed.","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2015-07-01T03:52:29Z","timestamp":1435722749},{"_id":"1ec7e742-3846-3f41-b06a-d0b9c3babc00","authorName":"kemalcankara","authorEmailEncrypted":"R1Bo2AD3DSQWago/TZYMCogWnpPcNJCH3QaWKmLrLNsvsoFpbAXHdXA8rTDmfZ/6lyaw4wSrH8iyTNuT1EfppN/guuE8bmRJDxPNNDdXNe0SXAlTiFipnev0IuS9smQlGcvtC413+3LVQ+ftR8ScC7DKP14/UqSf8eu6nokBoOSXQJLRBnXUVfIwKJ6Mm+oakI7WilQdi2Klahp3uCwTvAIVUrb35EM66NWY6oM3C30LDat4KItI59gaveY9J7JQFTQ9sFSue5+vmBuxa1p6PZ9ugYAOoin7Lyqh8BCy9WHRoSrrYplWXXsfrK05oTAGgnLFH6SapWg2NhGloI4GL4XKoJKS/RP82m4vRBDmeWEvr9BrECEAE4CSZWdQ2fUrbAKa7B/zTws6GK3zfUQQ8hOXhdYmPgJ+wqmPrzs1TaMCKcx9+bW5ws/1IA8ckiBS7GTbSbv6td1AaMhyqumvPXefBAH5ix+3obp7iGPb0lvzfX46Jt2oW0Dv2W7+Qm5ZvGCnRhvC8OLHlr6GGbCQ9p1DUPQzPnVpeaLyD9iCKOzXoNlkWXbM3Z/rOppsOaJ+Ml3FoH3xa4QBhYjcCa6I5ITe2+IgrLKtslYgjdEz5J9fgSTKcTrSKZUjwqL+a9Imvi+RCKzKJmmAQ4q0c8w9nqX9FdW7jj1YIsUFvgRolVE=","authorEmailMD5":"90420a24f64b7af3ef9dba9b9168bc38","authorUri":"","authorUserId":"disqus:kemalcankara","authorFallbackAvatar":"https://disqus.com/api/users/avatars/kemalcankara.jpg","message":"can we use just smth like this for a web api call and respond before it finishes?\r\n\r\nAction<cancellationtoken> workItem = PostToRemoteService;  \r\n HostingEnvironment.QueueBackgroundWorkItem(workItem);","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2016-11-12T22:40:52Z","timestamp":1478990452},{"_id":"bf298a90-3d49-3321-989c-c620e6e69f6f","authorName":"Stephen Cleary","authorEmailEncrypted":"AY+VGu9PP03ismBzVLWPxSGzWKPN64ls3jRXJ3/rdY0O8sCI0UI3CydbXoBDfNqUUxJzoIt3OC/NTu8j3bdk/Vuxa+kpXlWMeD4tAKsfjD59RuIq62M/EkZm/LadIE3moKvBcTZikSV9t2DVr4sBrJ//4wwDxlWXY/G6nIsv3SZJKhOZJUY2M59BwwmSGWngWEbsYgIsLAR1sbg3QvsrDJIH3D7+/z6hqgYOr/2gjDEg0QcTpJsK81SWRmtGRNlB0alFHaqAgcBgo0gPcnRavlWhxz46ncXg3a/lhZ6shuxON4t5V9gPQP9V7aB1k7QzHkIDYxJl1bvFh0cOAxP/3ZA06wCZo5aNmLv+N4mEVwVXGaGB9onCC1cz/jFfh6xtp3+IdzPI5w/hEiJCdTYSv47Af6IVULHpTlCUWLuaPEroNztUkNhhyjnBqGSQ8d5w+rplISJ9Z5TjOmf6onYHmlK99gWidAJst4DIeJ8AkYkwLsRtAlHqJ20uyL2XHuDQXnz8ro0UFioj/hMaIy6I6SBSb2cITcLJW82xR0NU72eNl8YN4Bj2uKlDAAyhAofoFaxBToVo6Ma0LoOszSzVtn682YzG07jgIRbMGRWhuvuyE8TSQSHIaMCmKMK7cgx69u27IRd1cRX1ieo4b1CS2rDGYSmnQWfgt4ZXWoTpFmw=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"Yes and no.\r\n\r\nAs I describe in the newer post linked to at the top of this article ( [http://blog.stephencleary.com/2014/06/fire-and-forget-on-asp-net.html](http://blog.stephencleary.com/2014/06/fire-and-forget-on-asp-net.html) ), QueueBackgroundWorkItem will do essentially the same thing as the code in this post.\r\n\r\nHowever, it's not a *proper* solution. Meaning that it will work most of the time, but it *can* fail, silently discarding your work when it does.","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"1ec7e742-3846-3f41-b06a-d0b9c3babc00","date":"2016-11-13T01:32:30Z","timestamp":1479000750},{"_id":"c49dc5d6-e9e3-354c-85ff-750633c3f5ce","authorName":"kemalcankara","authorEmailEncrypted":"SrMN7DbwxQs3G5udJWClXngNuGsX+JjdWaIarLHD6fzARDSVFyh0DWmNdkPIR3gD+6BGgQ7SFSDVjp3bJpfwy4LhgYTtvnjkMYywmJNp+DPA3z051Sh/GWBc+VjHURCMwKekmR6g3YMocK6fuKmlqsA5MFJil9aJEvtwmEDo/BwrUJGH5T0hYsTkGrkd4OhVOfehErHlcopPyqk/PFk0VXXfA3H2AvNWQ4XTwd324YvDkrZYSuy9nVg0fualbu6Ehw9/n3FEKLWQcFkSYofksQv9nLOSb3Z6bmT+xpgW6jUVjWp9zqk7hjTAQDR07tFhwYPURw3K8jwtbbyOIbuJNNARMJibqcFS4MiKLKYeRztfPxxmJiZpAsbz80AddD7AdbCj2ysH8U/ftdGNz6JefOF7UqnDc86c8uWuTZBAseYqnXx8DS1o9O6j9sWL3pbE6xZOYcJEZO7y6V5UVoQLRi0Wia1NyJsDP65U2Y4mmR01Wamzh/I61fWfoIUKPVEauT4BRjMELzYMDUoJZB7RaQBTCTSsnRlYEvh+EIJd2sE11+8BAezyc66SU/g9z630VnYhRtlzOQY7T++ll3PbOpfENnLb8iMIQcTfNPiqwOUJWuKINC+EADTV/gvsouytwZJBaXuU3UoVrZetKlJ6Ca5b6K/6gtaw+cMZkUg3O8k=","authorEmailMD5":"90420a24f64b7af3ef9dba9b9168bc38","authorUri":"","authorUserId":"disqus:kemalcankara","authorFallbackAvatar":"https://disqus.com/api/users/avatars/kemalcankara.jpg","message":"ty for your answer and the whole post. Little bit off topic but i d like ask this:  \r\nShould we use HostingEnvironment.QueueBackgroundWorkItem(workItem); like background workers for azure event hub sending data? Is it a good idea that in every request go for a new thread and send event? Or can using async version of event hub send methods change anything about scalability and performance?","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"bf298a90-3d49-3321-989c-c620e6e69f6f","date":"2016-11-13T14:28:12Z","timestamp":1479047292},{"_id":"685ff9a6-f26c-3b2a-9df9-746b440bec75","authorName":"Stephen Cleary","authorEmailEncrypted":"UVB9eZzFroSZNFcp1PsrHyPVFkbSa1AAHmVT1SMxXLz5vgRXl/4pjnMny2KqEc2xbDltlnRjOD1GxJQCfqNTfZms7rMwkbDMfE8muaLhmkQLxKbzZsj6uYh44RpP5k2MNurL+tDknBhVcdnYCMTXV3Kq1+0yrK9Sk1qQIH5uU0W6OsIJfXeKFkAk/mxIOsqhgh6Hsjrh7wh0YOT16jvTh9Lfnu5F/p8Q2uIaaAHDrJvS1gZG6QzjiTyuIUzUuTkTz8a+zZHUT10JEuRXtmj5pD6NbZTZaHImm7idAyZ27PhELSe2EEZWpJDUupQQiAf3+rUAQJInviId8P5j7bGR2seQEtUrOyRpqpdi+byavFIygqPfDAkMPadps5DDWBTDO7Lr7LbtoIKWsfGmCohNQqOhzaf0UATsy6Oa6iZgZCtVN1PNjJ4YtUyz8crVdQQw+ZE6o/Z1boqxl/s9mGW4i511RjkpzUCnhiQIMkhUYC89n6wRhx5tTZpRPjHuJF8Th3ivdSFnyr5qRashsOfgJQAjNpgGbBBlsxx9aWCwLyNl0dNM0qXXwJ7Rvs460HfWhKyarL8Ujl6gT9Vwpoaq8HLlIuX9Ggf527kxeqSoClo8ff5KTS4vS0hKwfzi8x/v7p9l4HMF8zpmw+DJA3qv1xxA1mOKFEN055m0xr2M3ps=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"For myself, I would use an Azure Function or WebJob. QBWI is living in your ASP.NET process, which is not ideal for background workers.","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"c49dc5d6-e9e3-354c-85ff-750633c3f5ce","date":"2016-11-14T00:10:36Z","timestamp":1479082236},{"_id":"057e54ac-3717-31d4-84df-9c4c1d59d2a7","authorName":"Vincent Gravel","authorEmailEncrypted":"avfb5LZ0++MXDH9JrLpgzwFp/xieNNSqeYDxc6tfHuceTZIcZ0RzCzmrH4T3iqLQ1aUSiLd0Cu2fzPV/rU6sUviFJZLTsq0j22e4paeBIPAKnSI8BNMoycaF8A0bdJOhp5g+c8BK8p0UMaqFs7D/XuK1YW0k9aUH5T38Nfk4ciUyFrfYbQIHjdCIorA61N2PWkW1rErxiGkrtTVVoKAnSEue/asIrxuVIFS6lkLAhPzHH8fZVrGl0z4VgT6ImTW+666m3XSZ0SS38eNskLPGW/tQ1E8qhuT8QIr8its5D1hB4rXnkpcJJUnGR1L4B/yg1hPOMSsk3VkdbDq0c5FpUY6dvoBQHfXSoAhp5kMT4hkhGd/43jFwVaig64UbPVkulweb8h8V8Qu8sU0OG0WEjekxWMwHq566jCdGjz3yjccC6aase7BxqI9uk8gRXJTl5euWQX4I+Aq2ZXGDd4rg4qG2X/oIV/llnQGVu3qyuKhWqgtf6lJ52Jdg8Wdgolg1ug8JtZMxjyQ3Q3Ijbt+CUf4OaGGxyVV6nKLkzBl/I4GYr7nVnEB2ILyatMETRVK/6a495YMBuSLR6CIrKLGLoCaixHWi6PO519klWlFm2GjwMOEts6/y2h9OTPRLY2h03t92INUVHFTbaPjBVvxBHc7/if5139aZvNX0Wh5mjF8=","authorEmailMD5":"4e9d619f1a01bbb4f1c209dbbcad2498","authorUri":"","authorUserId":"disqus:vincent_gravel","authorFallbackAvatar":"https://disqus.com/api/users/avatars/vincent_gravel.jpg","message":"Is HostingEnvironment.QueueBackgroundWorkItem() behave the same way as BackgroundTaskManager presented in this topic ?","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2016-12-08T15:34:47Z","timestamp":1481211287},{"_id":"99e6db41-9fa9-39bc-be4d-5a759931a363","authorName":"Stephen Cleary","authorEmailEncrypted":"b8N9Unr+YiEXtLiUUzOUyYCUPR7CA2kSuxtcbfD/7ohwVl7vhIh3w+tAzWe2Th+kxotJ0ihdSZYBcKEcQnkgIllRDcja/+VGhm+39Q1sndInpQgXyUQAPM8CInCNcwVMp3AkF4U7rnR6JGhIVvMlJXKbyvS29Vt+mu52Qmirivhca4qoC0wN+h6z+PAu0V8dQqVxKvzxB7Vk7Ukrs6xYRYQIYJHIKNBjhioHU/oRtbMiTzgD50Wquwrl0Gm7v5FSPUXLqvm0UK2N2MnN+/7sPcnMhraQhNntggiQ8PATriMSpkdyDLfvXhrleC7MrHNoSRC8vxtraZdAKl0myD+Py6LVPtOlaCLf2zjmQryQH5+R9hOcn3w79UMuB46bV8dP54VRsIPRQkGP/cmAe7axrtQoqcXUpG/i3RRUU3YemrBfdvOC3pQTWyQCBhyonLukP2WjyMkUvvx9LM3xNqk3CsykKkcCAtsA5yS3CdKKyzjtVi4upXS8Tdc1nNKieQtU7GD/xSnKpGDoSZtZ/n1aDd/BufAne7UciiO5EPN+AkcCFAruFJxDg51RNGwvJgACt0rFSoKzVi5e801FTHVl0yQgjjTJ3htxFst05Pz+5IR6V7xRMI3T/vgmsa6FhKdDiAApaP2Fb8iMpPvFFqxqNoKmGEcS0fKRSAZjOyZ78bM=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"They're very similar. As I mention in the post linked to at the top of this article ( [http://blog.stephencleary.com/2014/06/fire-and-forget-on-asp-net.html](http://blog.stephencleary.com/2014/06/fire-and-forget-on-asp-net.html) ):\r\n\r\nQueueBackgroundWorkItem ignores the second call to Stop and returns immediately, so any background work that takes longer than 30 seconds will be terminated. My AspNetBackgroundTasks library will wait for the background work to complete, and will delay the AppDomain shutdown indefinitely. Also, QBWI will log any exceptions from the background work, while AspNetBackgroundTasks will not.","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"057e54ac-3717-31d4-84df-9c4c1d59d2a7","date":"2016-12-08T18:27:00Z","timestamp":1481221620},{"_id":"b4ba1f65-523e-37e7-b734-42ccd8e68968","authorName":"Stephen Cleary","authorEmailEncrypted":"jR9SxRv/enH9TcUDQBzwxm4UdKKIRMWbU62DZGCTzGaJ5/+QzGrr3OPlOTdqb+hfWaKNaE41KWTu/ioG0YsyKEZEmEyrI2VLrOlTKMK9eObk6Z/7khYAxgynlreE5KGaYpQ5YjDY3KrwioSZrCmMq8W6y4UiOIW3OAPvwoZ78qk8vp4DxeSO/PLDML+hXO9JLdJr5+zGLCEhys0BL1iQNadW7vYOwQ9ARCLryoUrBOXYYUlsm9qOUByKxV7u887/tK18YKbGJHcg/lZyUKD3vMN1rQIPLhH3E/BIF4/J85Dvi/R5uJAPg1CUBGS+mPdMVvIrdz9MeB2TYclozsOxXUDckWhRhAG14GR8OQ3CgrFaihFHZeg+u98sNB9Vycra+oF/BkTJTZ8cLKDGdck4MXBHHQ+ydgLxK22O3Jny/r+2EXDHzY/TnRwqjIwt2d5f+yQPfI84AtF8Vucs5UcekbBWUyfd/OXmiF8k2H7+axnVIYYjstoQ1RGX+G2SfS4IyFlvZ7bJkJqE7qi4RK+Rn0fiImGufdWoilDYp2qr5HdHQrXahPhhTM92VaZRZCdDqqD/AQYY9YzxBXVF6rVtyalx0SebxJ/kMXHyKesgu0yU41BZgXX+2sbKPJffNx1QyITqKDc6wm89W6RtyvAstVUbKQ/EbssKMNOrouNu7H0=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"Yes and no.\r\n\r\nNo, self-hosted WCF doesn't have the same recycling issues as ASP.NET.\r\n\r\nHowever, the problem is still there, in the sense that you cannot know when it is safe to shut down your self-hosted WCF.","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"4d72013c-2462-3d58-a0ab-05eabf9aaaf7","date":"2017-10-04T15:40:38Z","timestamp":1507131638},{"_id":"0e424b77-eb9f-3090-bbd6-7ef079db81b5","authorName":"Stephen Cleary","authorEmailEncrypted":"ff3aJ4FMzHCTqB1yuPQcfoxALt2ZMthLZbvk2n3tgak22aVpTFP0xne7hOjeLc+D8xkAoWE7ZFrh/mriZ9DF4jMJES3xYxGaGyDAaIVniT1LD8KD8vBc0C/PC0/14Kl9eioqsBJMIak5i3c1M/0A8MvLcF1G49FTjnLgUA+OcISQrBgvu3mRAjPJqilP4IYwHB9NAX0hdq7HNohE3AMJ87kxlAMm8ak5PvUvjtuI+7ncoidktFOfMy66h+EF0cjWSRH7IeqXJDabBUxyOgbjyAxgW2w0NJPNfDWsi1fpSTuU3uAVPL3ukre6IcDeWPebzDlTYaeYYGphTdpV88SQoFisa/X7rRiU9PkPQDlYXCioT1l1FWjME5l2V1Lrc5frHPiEQS6laTdBUyejneTrUv9Ae9axL3SW8VN6RrrVpJI3xdre7cRjDYhsI7LXq0E/KIMLbW67wWFzS5hQ6RJ3tB0iecmWeQ1ktzjDQGkUP9JHUotUBm+Z1otTh5HSGOT2iUk8sEiRLOb4BV+ET1XNBg/LQDfKZpgl8kYi47LuHYSF1SMOZnLS0DUtU0HNtik+9CJ5O4n2LUzFQCOVy+nA/cMN0rBjXlcNKaHzorQ0TsFXS1m/iJdNLH1+Wda+bUzxiQe8wycWaHDsYlvZD/xesWEUDGBN6Yv99WrbGfD5ThQ=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"Because it would only encourage incorrect code.\r\n\r\nWhat would you want to do with it?","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"2d770f65-1512-3a85-926e-298155d3a438","date":"2018-01-03T13:29:48Z","timestamp":1514986188},{"_id":"2d770f65-1512-3a85-926e-298155d3a438","authorName":"Járai Csaba","authorEmailEncrypted":"Q+A2TPdyGh48DNlH4KSj70kM2/MdgBqhMimmPl36T/7qhPrwbnRyaDKB6ngIRa3tpdanjNXkvewMm3nvDW+/9wqvk/DuvEiC6J8+1JHV2rMh6L+xRRfjyBThBXdAn3jeu5k9rcBGEHxwH9bUbVT3wh3cTffBadZPKwi4pVTNhkoU/qDjaDDMNxOHn+/Eso8J0qmWcHX9ab/HQW9Weyl8LDZWoPZyhredG3+mXuoU54B2WIpH/sWtB2CVo1xF8sDf/CWAuSNY34BrgHecXXU9Z0BnLb3ep48M3XDpo5vrnoQVFMGKqL1wnK+uYGJHS3WDe/o0foXAR7EDNWXB23X3mgqqgl63CcZ5L4Sr+egviLr6ZmU7HLMgoJlJpW6ZnDyuxkX5eCSKETuTVIaxG6CMw5wqA9C56wNzl9kaJRd7puvBIsqwSfqrkUPLpL/StXEGvKp/U0bpmYbqBMwONALWeMhHWiKDp/DH+z0SPehMmIXNnTZmHMzQyEWnOMRXGU3AS3Yx7gTA+IgvUoJeA+pG+y+7xCp0Xr4JTODwbYLradFrPVD/Nols2ZzJx7Jo0BhII56PIbiHokEeaXlaOi8gXISSvuUsfGPlFmq03hGXLLCZKzs1AdUpDDyApR/YrdHk2qwiMgV/EK1vMvy0rhXExnVJUDLucPuW0L2hV0FlHg0=","authorEmailMD5":"9cd370501166893c636ebe8c3c354825","authorUri":"","authorUserId":"disqus:jaraics","authorFallbackAvatar":"","message":"I'm wondering why isn't there a return from Run, returning the Task?\r\n\r\npublic Task Run(Action operation)  \r\n {  \r\n var task = Task.Run(operation);  \r\n Register(task);  \r\n return task;  \r\n }","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"","date":"2018-01-03T09:10:07Z","timestamp":1514970607},{"_id":"09fc4113-301e-34b0-99cd-18f4df5c95a8","authorName":"Járai Csaba","authorEmailEncrypted":"DbO2yYcjWDrTVHNHVrG4dnu4g6ZFPNiRTGOlKCYFuueRk30yIuby6unU7s8S0NsJ5t4ZnsvVsiOwJba/vxXLDmioJLjBOe2aadf5gjfrzgaUnbpA8dsf++fipoxe5H5+bHywG2u6AgkQ4plgzkTaxgnHwf/iGZEp+bQROy3CFZIULCchy648Jcv8RH7ftIHhByiGy7lO/LMa9fbUEBQqwgo2OCBf7sTXiuAOOnTlj+Zvg8YKcofCEfmf/11Hi/iJd6U1brhAvGo5Tr5rLtyOjosBgpWblRDVINEDqPd1Y4LAYpT+cn7GVEMOg4mS6h6ZN7MvlWSIInRAr3nDekmYlh/p4urHupyDGQj3wKPsRBqS89rTmwAoFUM1zaRYq2zgS+sBizZRjOi8DeBCkQrx7vYCCv3C/9uSBaobPPUqF6OQl/dTzmowyfbZiLkL+IvDE8L5BMfzu2QGzXcz9EcDi3rxwinBFaT+My7fScAJN/NEcfu8t060AkmgPVi/ByckBxQ+CNvhHWxdAgT8u++YvGbseiNjKulTv3XrBR05mQ1IyeLEFLYqgu7QfAB9NbwygW8e1UUOCphCbhB6WkOREcWWXFguNczH0XDPI6VHGi8Cocs0wZw/Fy4W2FnlTQPllzECRc15XX9eQuGnKH2sqkEFICpJ4a1UfQGKnoiu3zU=","authorEmailMD5":"9cd370501166893c636ebe8c3c354825","authorUri":"","authorUserId":"disqus:jaraics","authorFallbackAvatar":"","message":"I guess you are right. I'm new to Tasks, I've been rewriting the app to use BackgroundTaskManager instead of Thread.Start s. I've just realized Parallel is fine, as it holds to the request, and the tasks are not killed by an app pool recycle.  \r\nThanks! (For both the article/BackgroundTaskManager library and the reply!)","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"60c10bde-6434-33a1-90fd-d6d069bb6d85","date":"2018-01-08T20:10:48Z","timestamp":1515442248},{"_id":"60c10bde-6434-33a1-90fd-d6d069bb6d85","authorName":"Stephen Cleary","authorEmailEncrypted":"q8Hx5viwMiGGdsaLOFENtzAIn9wVyfakhkc7+HUmawOj+jVlBYrgLoNsVbHyiB/RspTXft3hsy0mP5vfMAxlx714QS2NIFQB0/n/7yTtO6Gw7D6XpvD+0fkxz7/iIBlEWQVqpPvXBpmS7Q13kK+E55bIAnvUZ0AFo+Ev3Lbl0M8KE0Lzk0NplG1N4+N+ZDFCmi0mfoSK2aTf494MzvW5AT0RSFdrwQVyAvyOU/gizoG0yESJ4RT9qU9HVqlVGFRPybsFvmmLBXSd8WRa4IkHIlAj72PIcUv8yUJb5ymHt9zTkIdG4LGLykIlm+Hcmve9gbW1boqJmm8yeAwPCVfKvicYLiO97WyHWYlQ0IsKKyP6cbzXHwbVAsSJFbSTnV7oc2Jbu0hFkA1Hi5SDvK0uPZXODimM7UeMpxIRZvLmiHvaGI90yLb911yEc/re0Be9P6HaXYR8vxiC0ZLT39LTlEVXlCF9fANnbyA12DHrE5lLqWPl/Nkxqe7eJFo+mNyusGtBPk0WIFDsp+XunD88RFWUIjkHhYslzfkH7hv2sDoSIibxZ428eCYnqf3iBrfp6hNGhGjhW7mR0pXlvMUmK032DUi2PJfiMSMT8wM4qh0GIGCkjT99EYVy1FuSdxeJXYm7uODu/GWYw/kvZn51U7R3uckiPc5mijZI7AfQv5w=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"Are you looking for a way to do parallelization?\r\n\r\nI don't generally recommend that on ASP.NET - it can kill your scalability very quickly!\r\n\r\nBut if you insist on doing parallelism, I'd say to use Parallel or PLINQ, rather than a lot of Task.Runs.","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"b8b25ce0-f86f-3b73-90f5-60fc3393e92f","date":"2018-01-08T19:55:37Z","timestamp":1515441337},{"_id":"b8b25ce0-f86f-3b73-90f5-60fc3393e92f","authorName":"Járai Csaba","authorEmailEncrypted":"hzr0LITsUnHfpoGpX5i5BZzKlqr3GPUlo6OpzVuEgB9F9eTJLSW8WOfqCUZEIhaMTGHftGsHVdl3CmplJqAH2sKQOIEZVYTlygUd6B8QkJilq/LrSv1BaQTsoIwlavvJsgQEy/7IjxmbaD3Uw4bwHL/3k54Rz4RkSdJKlSCerwE0sG48a7a5LaBDG7RXeuJsNoNS7mujvSF7wUmbMWnpqy7EuKeLmhwoqwlm7WHcO8vqODpysYrACxEXfVCvukJClIUhyYF8OXnvXPiFY0w9V8I9RjfxEGTOdSgF1egXp8GGRAitRFY0wQZgTRJyDQxyOZKDV41H+1AVHifx5QYPNdLkhAvKW0PnGAmXzMy6WDuM8qp4RL8Po3w6+kLtKOsT6U0F1OBwuLzdSRwfIx3kQ21RN7jfduiSj/k5qmyi8kMa21aiLwvzY4YvD6O5+g8wVzKEzLDDHStKxf/+gvufOraSmuNDojHMIkVTD6t4VkK2X5MtnFtKCpdJUMB/nxUozVX6FdFaEwmoNv/u/JUYTb78r88s/SgmJrupnS94vfPsmug9jNwMRiV383L6F7ZfrIv60R5rt4+a3g85iExBUJQKmcpyWOVQQTixVa9mUGh3Rz/DOmGk/++YlGVbRKYgn0EN+Wq1cHZLlT3v21iI/EFCHVuJlp2o3791t9zUiMU=","authorEmailMD5":"9cd370501166893c636ebe8c3c354825","authorUri":"","authorUserId":"disqus:jaraics","authorFallbackAvatar":"","message":"I'd WaitAll","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"0e424b77-eb9f-3090-bbd6-7ef079db81b5","date":"2018-01-08T13:17:23Z","timestamp":1515417443},{"_id":"3d49e872-de9d-3754-8516-ed5e5f0d0e05","authorName":"Járai Csaba","authorEmailEncrypted":"ggXa0eyRJ3sr43vpc24M95suiOJAqiVx0jtQ0ypXPfgG/9RIFER6EtvrQ9g0oggXgU3U4IHFMp2pBRnh+RN0Df/jbFwM0tj3YlDerWWIAyZhm5ld+tVOJQtQTwLCzaJTIrz010el+zQvILmWUzWnEVIsyH4z6YuV+7BSzRRtTPn6BM/4xPGk0agLia36/kFvkSGnhLTyAEnlIoyTLJX5r1dTJH+MfLjjbWoOwfRIkf/8ahx3b7pcr6JffnRszJpaBBiZuX5OpzBSNCttH2/eAwrdJkK6ZSUVLw8M4SYYg2ZxO8wYbwmHC4UDkYJSuSC1H8SuvKjMLGJ5ZlFFQkqJxm7u5Cx0ffsSdimcg7dCHUxeCWoiXdpldgkEwd8xkZTfF/jVD2Dk3YDR3J5oD83fOXwbZhixwbUQLHBulF3xpV3Xr3i6zSaIfIkweqk/q0h+QH2uEb4cIFOSkjw51F+g+o9XmJqml7wQZc8rYxRVwompnoxTCUnjMK6i+faH1jeJ0haCxJPHJUOVljb9FVnb9RZVI2W2SOZmtriAEeqfzSxuUuEED3z1JeRRitAdxheM8MEJVFgB7wHt+85eel+/Myzjfr4u3aGdGT8LIiJOhH24c7eBdj6fufScgeJv+IKoWxEENG9KvsoR0Rt0CxD4Jyab4uTz1P1UY2Wm0EwFnCY=","authorEmailMD5":"9cd370501166893c636ebe8c3c354825","authorUri":"","authorUserId":"disqus:jaraics","authorFallbackAvatar":"","message":"And what about TaskCreationOptions? (I need to start a LongRunning task that reads MiniProfiler data from a Concurrent.BlockingCollection, and saves it to the database on a separate thread).   \r\nActually I've made a copy of the code, and added 2 new Methods that accept TaskCreationOptions, CancellactionToken, and Scheduler as optional parameters. Would you like me to create a pull request?","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"0e424b77-eb9f-3090-bbd6-7ef079db81b5","date":"2018-01-09T10:21:55Z","timestamp":1515493315},{"_id":"77aab93f-2f15-340e-ad24-8bea0aa037b6","authorName":"Stephen Cleary","authorEmailEncrypted":"TVWXo6dUkyvk2BTG+aD/MIc8YbLzeIOzNEBDlf/80vDtV3VqFU9oUZ1egnQBPbBhBxHwivkwbIrqYI+ZwyyEuH8ELoaSGexfMZxvVmG+Ee62wrqsnH9qqVLPvW6nVi1DOp7AxCBoySE8D5BfLfhu8Kn1GLt2HONcoxyFQvOJrCDP+UD470bNaK7kOlgWMNJ4pOWjPEMA4IQVKgFKyDJicokdJNBM/5VYYMkosc7R60HJhBGBvkJ/sqMXGbDU215qGHxEQXZsDBqIE2p7vqsBXi2V4TLEdq/Rq0hPEmypoE7J/rwgPsbrzH5N2wbb7U1wM6MkdUTNI6e71PXZTJVd8jVbk1Fq7tsGIC4XWD9VvHSIImfXOTUrzxw+QyVnU68JpQFe3ly1Wp+IEFGPEVoHXmVyZdbcFUTPR4zQKKfMmKrwSx/BMaR8s3uAip2mCM+RpMcWNy+nK2cuNtBKkSjmGJNDYkMTre0/7IgXWuMU5h3qCYBL9vRtQrcxtaTmqgczgwD7H16E2+FPqg2gfcrX9IS9KVr3YRXZJkKs8i1q7st7YRljWfUwcfzXPiuUJWlwBB7gIJt2/qYHIkUtdik4oz2H2R1+vi+ws5QI+zBCdNPejXLGwq69J8iQm96JOPp/jOPirpuQLP4b5Cox97z9VhWq5RkI7233XZLoVQYw8+Y=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"No, thanks. TaskCreationOptions complicate the code way too much for the tiny benefit they bring. LongRunning in particular is commonly misused: [https://blog.stephencleary.com/2013/08/startnew-is-dangerous.html](https://blog.stephencleary.com/2013/08/startnew-is-dangerous.html)","postId":"2012_12_returning-early-from-aspnet-requests-a3ecee00-e6ac-329e-876c-4366c0b78693","replyTo":"3d49e872-de9d-3754-8516-ed5e5f0d0e05","date":"2018-01-09T12:29:16Z","timestamp":1515500956}]