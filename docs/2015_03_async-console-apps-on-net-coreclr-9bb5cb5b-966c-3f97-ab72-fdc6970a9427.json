[{"_id":"3148f625-74e2-37ec-abd0-d04dfdff18ed","authorName":"Riko","authorEmailEncrypted":"HAKDNmU5+AXOHiCv0gVv1ddWPwELT5Tm1jeqq35lJtuCqz2HXWlGrjrcZb3ixb23BGY+HMn8MpRdxssqOi0IVc8Ary+d4PtIe94vNrOc/Hc6b97YNgSYlNe3nmz5/UxmXZlw8YDJngF0gBSHnJS5Qu/s4VeILez1tNIZsnQxS80Sup6IiPOtp8qm9fPElYD3h/A4MUYlICsd/bbbmQ5lNv49Ai2yitrSl82uWmWi8feEMPzl9b8gVunrq9a7LHuMFd5pru1UpCN0PNcluxI95+9yJDxMMvRpPjlvXHu8cIyd8HXs2uPYf04hcYCtI2AGoOMVLTpU62qTiA4vY7ov2QrQ9+VfTqw8ZBfMDPJQoTcgsSCBLj5dEiWBl+BZpQ1KWm06ezwf+J8Z42RfpfBVbE5pd9ZBkd9JW4ENx5LFTzYwHxltn6gy1pe4gXq+lAIgHXdGsJDg3yhUqc/GIiz4FqmQKaGTkv7gLNkgK7vLcN793On4tQonvJWND5C229i7BfozeQA7kSQkh4fb89jurP+Y2zsxy9qOESaT47ufFGR+2e8MWd3IAwm8AXo9KalIJfcmKlIMx1YhC/F8AVIIgakk6jTUc46SVuWpStWdxqyjh+sPKtPtibOFoo/QtzGPY/YWb0ZsPVlibHd5zP1hWpODdlgjDRB+LFrr8n2y8EE=","authorEmailMD5":"c1b99fc51717f507f13d0e2297a64fdc","message":"Hi Stephen\r\n\r\nI am very interested asynchronously. Really want to understand it deeply.  \r\nI have a good understanding of the theory. But the feeling of a huge gap in practice.  \r\nI am very pleased that you, Stephen, deeply versed in this subject, so I have to ask you  \r\nI wrote a test Client / WCF Service, using async/awaits. Here is their code.\r\n\r\n// Client  \r\n class Program  \r\n {  \r\n private static ConcurrentQueue<task> tskList = new ConcurrentQueue<task>();\r\n\r\n private static async Task MyMethod(int i)  \r\n {   \r\n Service1Client client = new Service1Client();  \r\n Console.WriteLine(string.Format(@\"Exec: {0} {1}\", i, DateTime.Now.Second));\r\n\r\n await client.GetDataAsync(i);\r\n\r\n Console.WriteLine(string.Format(@\"Exec Done: {0} {1}\", i, DateTime.Now.Second));  \r\n }\r\n\r\n private static async Task OuterMethod()  \r\n {  \r\n for (int i = 0; i < 100; i++)  \r\n {  \r\n tskList.Enqueue(MyMethod(i));   \r\n }\r\n\r\n for (int i = 0; i < 100; i++)  \r\n {  \r\n Task task;  \r\n tskList.TryDequeue(out task);  \r\n Console.WriteLine(string.Format(@\"TryDeque: {0} {1}\", i, DateTime.Now.Second));  \r\n await task;  \r\n }  \r\n }\r\n\r\n static void Main(string[] args)\r\n\r\n {  \r\n OuterMethod().Wait();  \r\n//Console.WriteLine(\"Done\");   \r\n }  \r\n }\r\n\r\n// Service  \r\npublic class Service1 : IService1  \r\n {  \r\n public async Task<string> GetData(int value)  \r\n {  \r\n await Task.Delay(4500);  \r\n return string.Format(\"You entered: {0}\", value);  \r\n }\r\n\r\n}\r\n\r\nWhen performing, I see that the console displays several tens of messages simultaneously.  \r\nI have an understanding that this code is optimal in terms of async/await (more or less).  \r\nHowever, and this is what I ask, I can not understand how to interpret the data that shows the concurrency visualizer !\r\n\r\nSteven. Can you write an article, video review. How to interpret the data concurrency visualizer on the example of the code (or any other). How to really understand that work is carried out effectively, asynchronously !  \r\nThis example is academic. There is enough theoretical understanding to see that the code actually works asynchronously-effectively.  \r\nAs a practical example, however, need to see that everything is working effectively - not just understand it in theory.\r\n\r\nI think this article would be a wonderful addition to your blog. Explanation of a practical example how to debug multithreaded programs. How to interpret the data supporting tools for deep understanding in practice, multi-threaded programs.\r\n\r\nThanks !\r\n\r\nPS. Google translator works not bad :)","postId":"2015_03_async-console-apps-on-net-coreclr-9bb5cb5b-966c-3f97-ab72-fdc6970a9427","replyTo":"","date":"2015-03-11T18:36:25Z","timestamp":1426098985,"authorUserId":""},{"_id":"5c373473-d0e3-344c-9abc-d34687e10e76","authorName":"Riko","authorEmailEncrypted":"tYKz0FoFV3capBqQoh7h1eM/ML79RsNMEYLMJDe276dQ7fer8+Uo71NgpEXBChXkMD40vmJXwO8TISDLNkf1tUJ3Auikv3KLxFW+3COplOPYPYDPfASKnHjcRKQoFKG0SBv/oVSqYqBOakjl4LZuwFNKs8JvI2ftS+UfvzRWvM7eDZG6IwTjnwHhS9uY0DEunym39sBp9vhtaTTmLfmH5GcyN39bENkikI+2nA9jeOBbITsBQMIASfaAfC0tw0Az//LQqSteVQkEpvVcBtKZHyJoyq259heyQs9niYJj06Z589wIGLYZFUgHHwwBdbF6/smEpuOT9YHvahZmlTv7nr5+qCJcqEtQTlwpr6oXBy+/i3sOCioB/UdoEFTJjn7KtBBvz/aAsTulnXBxfiMhFmvc5E8ZmPQU5ir6Z4uK9TnmtZeaJ4zZl78OGP0vijSWLDHkU3Zmeru41+87FRp/GvDRZasiP5Q8qX7dP74JNkCOzlTgXYId0RFs750bn7TbcbO3SY+U9FvNaNQmiYSTfLOPCFOoXS3R+CGNmlsA90IBYdK7Iclx5TE8qd3E618oMSg3ZcwmpWvcL5lQf0VuwGgnZTs3+x+bx6uSarZwGUzK0+uGqII9RpXxXMSEzHtqgA81SrNzOZhpDMUe7WjmQ153ICkSyCwJhxQOhua/YFg=","authorEmailMD5":"c1b99fc51717f507f13d0e2297a64fdc","message":"ooook )  \r\nEverywhere is only a theory. It is necessary to understand the practice. On real examples.To be a professional.","postId":"2015_03_async-console-apps-on-net-coreclr-9bb5cb5b-966c-3f97-ab72-fdc6970a9427","replyTo":"5c5a20fe-6054-3879-b3d9-a35105491782","date":"2015-03-11T21:22:14Z","timestamp":1426108934,"authorUserId":""},{"_id":"5c5a20fe-6054-3879-b3d9-a35105491782","authorName":"Stephen Cleary","authorEmailEncrypted":"dTqtiiAbGwCTK3N5Hb60GviUio7Aac+IH3sxV2r5qVJ+RaIRC9Ur7Impo6L4j4x90t0d8eBoza35Ojk1szNlK6JubZq4tBtuKYZbMpSwCcsQUl/agdF6FnUKBMWFQBiabmNWsHZdo/vloAxRJPB0zdUKWzTt4r80lXrycOu8OMjsmAGnx5hsmb88Si5uLOgncm/xZe2fZgI3agzYmRumDwuWrjxWRHD/pUZ1IMGUa6eXf6hHG/UyQPY8Hkn0SZB6rMfWKXNBIZ5ZEIOfwWGdKUpvrOe2kU/NOrC9s7Vlpn+iUsZldAB0FmaOcQ74yTcuHA+zV2SDmYYAcIyYiQngH6I92+mFebQ5si+tlSLzbETkIymw3jdJGtfaWJeEeS9N8ncH8DMUwL2F74DVllArCu1+hGyuH7BYe9U1a9PMQTQKtFr38RCOSJ+ckITiMcCjLXmquCAX7ps1oQlPbf647FawJn9EcNdUDNhCdJCeY3KqcGdp4/0O87Hbsx6lg+BoOKSBxvtZGtzD6wdC//7ce7BNzlx5npvBpBYdH9Ta7/cJHtrtfoQTBCLuYkXzv/e2DpQzyaDmVEI9VlOYU5S2z0VU1GmT9feOFi7WuFrrBJLlriFrTgLi538V1ZAmVdUrVbTjPPFxZ99UIRfLsMz/pSI10yNPTIghWR6iyVULqck=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I'll make a note of this, but it may be some time before I get to it.","postId":"2015_03_async-console-apps-on-net-coreclr-9bb5cb5b-966c-3f97-ab72-fdc6970a9427","replyTo":"3148f625-74e2-37ec-abd0-d04dfdff18ed","date":"2015-03-11T21:01:25Z","timestamp":1426107685,"authorUserId":"disqus:stephen_cleary"},{"_id":"3668f282-cb5c-30ef-a949-37399e64611a","authorName":"Bernhard Richter","authorEmailEncrypted":"iOPid/Xg4EyS14cuYfEYSC3NOeeUN6H4Cer9pGcZ8+g1gGheaZQhD4loGlvUdzG1DXRBFd6c9zRPny46S0o53N7gMKp0/24Ql8OIwjizA8kKb/j0rhY/OM1HY5OqjITcVnKdvJ0pRik3Ah0hsAXz9idWAS9i+fgGPujAksg2X9Wy3Ttk4bs2ooiwhG5nq6kzhLIOlSg604bq6leQ//WkmsLzogcDG6P9zVX2e85qFoDElaZiO2AqkXD4cGMXretEcRRv+EzThkRrlLXSDFDNKOpclsBQsCfeeaGNT9E8b+2EiZIxzps8Fs1NThw/IuX89JZc5PgF4uWq+cJZHvNx1h8SzBqwGM7gRmkfSd8EX2LUlyEvlcmjtbucolKiiQ9xCbIGOBqdOQ3DGVHTjrGGwfsYaN7ku0aBrahZ4m3FxeX4kKvvVhqqSKQS25/zAI8+RZSFuUnWrmebgt7HzoRxd/VAKiMd+8WvvM7t5vubNiGgxpmWNpxfro62JgRUpUL8X0/JKhaVnIzoswscV1ntY5Tewe3nbsvSXIEh5PZtx+ExPjoJikr/oTXEDQ9ITAKoRSCLqPyVemwvUVMMMx8Qv+1r6kyCGvSbsUHXuJBnnF1HEPdyjSR+opKoXt702LhqASlVkFarN5Lnbj/OzHiH4ZIk8dpqPwFR0WDJBCmq5Ow=","authorEmailMD5":"954230da44877d90517060b8f2547dbf","message":"From what I can understand this is available in the CoreCLR. I did my own implementation for LightInject. [https://github.com/seesharp...](https://github.com/seesharper/LightInject/blob/fe4af62824707df826452d4c7bdf6f852300b659/LightInject/LightInject.cs#L7826 \"https://github.com/seesharper/LightInject/blob/fe4af62824707df826452d4c7bdf6f852300b659/LightInject/LightInject.cs#L7826\")\r\n\r\nIt has served me quite well in the absence of something from the BCL.\r\n\r\nHere is the code from the CoreCLR\r\n\r\n[https://github.com/dotnet/c...](https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Threading/AsyncLocal.cs \"https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Threading/AsyncLocal.cs\")\r\n\r\nIt relies on the ExecutionContext that seems to be something built from the ground up.\r\n\r\n[https://github.com/dotnet/c...](https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Threading/ExecutionContext.cs \"https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Threading/ExecutionContext.cs\")\r\n\r\nAt least now you have something to do on a Sunday morning :)","postId":"2015_03_async-console-apps-on-net-coreclr-9bb5cb5b-966c-3f97-ab72-fdc6970a9427","replyTo":"b1eab878-cab3-388f-bb0f-de76257ab42f","date":"2015-03-15T12:52:22Z","timestamp":1426423942,"authorUserId":"disqus:bernhardrichter"},{"_id":"b1eab878-cab3-388f-bb0f-de76257ab42f","authorName":"Stephen Cleary","authorEmailEncrypted":"fIlusrOBZ3JBiH1kCz9j/4uDQ2ayqtxVlP5EBHTAstMuvdPOtKnlJlVESD8sL9+h0D0WChJvZ/OSto+wtyHBcPneHxHYiAgVdEyIi7q+y9zOhIN0RahB2yxwhHYbWCzBjNw+Zh8tVp7qELIeTET2VsHBPlEPD6hUeYHhJOkCK57Dgeg40q6qK4WeaFbIrGmjKvTIHtrSabMlp97PvYhrleiR7j6QOXxj1+/SCvCqQ3aeP/OWJluaCJVBmiu+hBoLW1bjqYAoB5u4+UD3Uys72O1IzKQa7Ekf4uFGFIqj8aIzTND9v9RvzH9ZF6ROea/laF4XKoCd4b/xK4utjwlyV+yCnqlryM8DKs1tiboplC1/1JqkQEmVX6ws4GdyvgGHreraSf1SaDJcfU47MLUWY+rPPmAEK408kWFeCp3xNwNz87wxXir/lIe4IT5TX8oeu1njMOP/xSqxDV5PTv9TsyY/JmS486OpqenkVzal9IpHgWjFgRIECB//wmgEzXldudWl67ClWWwee9cSyT80gLTG1+k8Oy1he+EztPrKUB/OrlQHOgCvhFvKY5LuUTL3A+C0P8EdHS7ACzL/2+/Gx+VHEibMgl6D+yD3MkDgT/6Drmja94Ma+2aJ90jo6VBhYcxXwlp56FHvlW8P7s9w4+DSW35lmnowA1/fZvgpAGs=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I have not seen AsyncLocal<t> before! I'm very glad you pointed it out, because I was thinking of writing an AsyncLocal<t> next weekend. :)\r\n\r\nThe docs say it's on .NET 4.6, and I'm not sure if it'll be on the CoreCLR. I will look into it when I'm back on my CTP6 machine, but I'd suspect it is a wrapper around the logical call context, and that you'd have to use immutable data with it.","postId":"2015_03_async-console-apps-on-net-coreclr-9bb5cb5b-966c-3f97-ab72-fdc6970a9427","replyTo":"c8a0fe05-41a1-37c2-a49a-a91fb901fa12","date":"2015-03-15T12:18:22Z","timestamp":1426421902,"authorUserId":"disqus:stephen_cleary"},{"_id":"c8a0fe05-41a1-37c2-a49a-a91fb901fa12","authorName":"Bernhard Richter","authorEmailEncrypted":"jkvGk/Lvwa5pxrzrdNUBcDl0Bp/v2Mm2KBpYHe/YgVFWSN/2S0U8xDV9fKx8IVuktmFJ5+Q+Zlr8rlryu5U+p9I40QggLX61PkoEWB3jjX9dRcXx3GLj27CfCLi1nGCaZvgmTnItmb1sjh14sDmYIj+VqIAPkhcdX8GPcwngwSeCZRFZ7vJg8mzMYWNZTXUECTp37v/qCko4vr93xSQUBMZ7wwUB9k6EV5OzFsWX4TMExlHD51kUVcHt3tBpsVSoaTz0vHuIBkbxmchJtG69CMDCZ7ISiASvEqi1tSIRTj348pmspP/SLi7tIAHNQpX/n6JmhQmi21IFzBSUw1uUEJIzqDZm/hagULACpa0cFPd2neTtaiPYVbm0aWkPVvXwdBo0osb8lTBqPW/DsCMmDRpYqDS1fTU7WblUK30ZRl4LwGZUrZRRPb+0xWeZ2X2Z2ctmwa+2LKeRE+3lnolorW0mPPejN89vJXt42QkP2BMJDZU4dnQvBp+ItBEt/JzI/tNztiJs8ivbne57ge3oBFF6m5Ww33PKVkMHMB63RQB0KjT9d8cuDCnZLFdHuUsuGyXqBhKSC8KgS0qAe/bvw+kAVlyM4V3hYUhPqf7E5fIg1hVAWWx9LHy2nVbu+NXHTHBemdyAHLqsgG+AoN3fhDABenvypoIFJl0EQM2jRHA=","authorEmailMD5":"954230da44877d90517060b8f2547dbf","message":"Hi Stephen  \r\nLike you, I have just started to play with the CTP 6 :)\r\n\r\nI am also the author of the LightInject ([http://www.lightinject.net](http://www.lightinject.net \"http://www.lightinject.net\")) IoC framework and as an   \r\nexperiment I've tried to port it over to the CoreCLR. Besides having to Nuget a lot of packages, it went pretty well apart from one thing. CallContext...Do you know what the story is on this on the new platform(s)?. I figured if someone knew, it would have to be you:) For the sake of LightInject, CallContext is used to keep track of certain things across async points. Since CallContext and LogicalGetData/LogicalSetdata is sort of rooted in the Remoting namespace I would expect something a little more smooth in the CoreCLR.\r\n\r\nUPDATE:\r\n\r\nTurns out there is a AsyncLocal<t> class that serves the purpose of flowing data across async points. This is even available on .Net 4.5.([https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/library/dn906268%28v=vs.110%29.aspx) \"https://msdn.microsoft.com/en-us/library/dn906268%28v=vs.110%29.aspx)\") I would really like of you could shed some light on this. Is the AsyncLocal<t> on .net 4.5 just a wrapper around the CallContext and on the CoreCLR there is something else ? And does it have to represents immutable data like I know you have written about before?   \r\nBest regards   \r\nBernhard Richter","postId":"2015_03_async-console-apps-on-net-coreclr-9bb5cb5b-966c-3f97-ab72-fdc6970a9427","replyTo":"","date":"2015-03-15T08:08:27Z","timestamp":1426406907,"authorUserId":"disqus:bernhardrichter"},{"_id":"4a104a75-c043-3819-b2d8-9fdc677f537e","authorName":"Hemant","authorEmailEncrypted":"ISgI+XddY7BJp3xOxudgIWoGTyGllaHe6xFYjzibC16Lbu1Q+FU+9yzk2yzLVGCG3fwH7qfPdNrEunJiL9UBSMHLD63njaX6GBxjdkfNtL7KGgV6HX66zSuLwMBlzKUmq6sUAa+SnI0bJb9wMmmixkq+5I+I5ovZyLLAr6eBS7s9ePG+vTkuOotW4Qgtp6RDaSMq9k09qYmJesxZUiEF8neoq4Us5OLrFs96riVZHC7UnOk6pDRQOtQeDaLqhNo49YFUvQdlmRbhxpDqahN1JvdgdOfVbN9ks+hygmlrbvOt13h4b3ZAOiNWfJs7Uiv/qQF9zeEx7sy/XdoJNzzsjjJrXntHVl9eR0IF/xWv192fVtiPxE/+wtcM1e0E2WPzPL2LsNJj91s96Rgmse9593kr87yDjerErAeFcSpFMLyBoQ541CbNqmOJiA7aEoUk6/mV1w7IOlnVFovb0GLO21F1AKU59ayiXiHP9EFlvI2hu8CKL/qklzFGw7Rc729XMaQ1Bciu1QVIuxoD8PAB6UZRfXUgWnxJyPGdvkO3WYwD2Au1AkkntYqiKdloqa04bGZrHOZ7Z21Ci5mGJzUvtLPgV0czQQ4mw6EZhZgaTlvFH0CR0DQgUh/RW1wPTrg0FG/QjB2UrUHOUVsiXnoyire1fE3AbKiwDkm4uaBtxBQ=","authorEmailMD5":"bb814d34d24eb2d625bfe9b5efb912ed","message":"Good info Stephen!","postId":"2015_03_async-console-apps-on-net-coreclr-9bb5cb5b-966c-3f97-ab72-fdc6970a9427","replyTo":"","date":"2015-10-23T13:13:02Z","timestamp":1445605982,"authorUserId":"disqus:disqus_B9RtgDXrtp"},{"_id":"5f73eefb-aab1-3726-823e-6ae33997e7c7","authorName":"Alex Lindgren","authorEmailEncrypted":"J8XnEmShAxSzBPo3Erv+qSnRR6jkejtje6AEjgpXDqqJ34oX9d5XMrg08fJ5m3ps9E257g+lJ/VAObTVSdXKS9XtoW8V2PCNI/s9FwOXJC354uHsvccPhdVVl7XopzmkoUuOTXY5OPJKYd11iIcXR1k3ylN6FhLHYOZ73Bgb4KVjOSL4T6ImLBJgwE4mxZXsfQnmD6U65Jrsu8xWW/PikFGe5z3mxenElsDxG3bq8xm7ztG0txqKaXdXyiShU8VFNO8MaG4ivfRioPWyBihLjL9x3q9p1TdbyHzPGEfCdftVfWjTOTIjpK4vQPVf8mdvKiAnky5WVtb+mAaZyZhTg/MKWIwnBhj361epBTOp6H+iHcK5Zitipfm71SgqyPWNWwTWhGhmPg1XiI2GIRuNr3Hvr8V/BJAZ/76N3l0uog2oLXRq2jdVsZNukCnzXC0MwtmY05cHwZS3Goc4wXjK3rxn8s5P/tXvL+2/6BpEeoWDz1zMmJuoti03/qZl7MveNAhUrXzfA6kqNxYYM4BKlgt3Dxh/NcGpZMkXhl2o3Kh7aqNIMf18K52g/tnvDU5yxmwKBdKWljQaTMINwd6SxjFuf9WjLt2x8/G+FSse3pBB/zQ4LG6TAFpQb5obSy/6pBmvB4cwhr+JiGNC1hutdc0Ht20Xs4pU7Su+9+Nc+II=","authorEmailMD5":"b3b396225badf5a164067fe32018ac8d","message":"So it turns out making Main async was removed from .NET Core (see [https://github.com/aspnet/A...](https://github.com/aspnet/Announcements/issues/113) \"https://github.com/aspnet/Announcements/issues/113)\") but there is an easy workaround. See the answer by Nate at [http://stackoverflow.com/qu...](http://stackoverflow.com/questions/38114553/are-async-console-applications-supported-in-net-core \"http://stackoverflow.com/questions/38114553/are-async-console-applications-supported-in-net-core\")","postId":"2015_03_async-console-apps-on-net-coreclr-9bb5cb5b-966c-3f97-ab72-fdc6970a9427","replyTo":"","date":"2016-07-26T18:48:26Z","timestamp":1469558906,"authorUserId":"disqus:alexlindgren"}]