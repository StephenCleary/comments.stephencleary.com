[{"_id":"9323c408-5fcb-3aec-86ab-8d3e91458508","authorName":"CommonSense","authorEmailEncrypted":"Nws9SEIB9TtKEj9/e3/rxeygr7HVFTUrJa7fkm21jGcNvR1zvkDHpt7g5fH+/cvIc0BYuxNvflHDqV32dPoAXb1SuU+NszxCFrZhYivlK37RVzhMvQ96TR3O67yHKl5I62ARMw0xBNXYcryhV7dcnFuODmk6FHGVgHjreeEHVEGRi7zSmwZ9eksqxlOf1tQoasjgqfMjTZzLiNBWV35nRucHdgyjjTK/ogzInfjjmYvIlnMY/5b49VcLCDWZNz3AJNfct+Z5SS+SDYsgTAbXRvGIRYG27qugKTNYEGoBTC7E5AO20eu7dLCzOLDwc3Xzm8g2cJVdRbJilpVDuEjsbnr/YJudN15Sw0nWX7jhK3kMP+8owUYmW78PisNDAGK28etQuavHnLzXkiF6D4MsdWC7lrhDuKVpG58t7c307HeQen6bA23sNHFh8cIJRx8BUJCOMmO/EKK6GrIQQ/JNvX30bmcCBwvH1jRfE7Iqg5pd3OeVe/b7EGGQ3uU3SV+Y1f8z2onjNQF91wE/sY528n3mEtkvITTZHhX280ttmuf0+opuRfpePDoDqmfAMnjsy6z5bCZJQWnoqnhyKw4VC98KJhruLCFT5v+mo9vYguyu6XNvuByzB0L0ryITfDUdngwtA1aJibEEO5dwVSHf7p6Kb8WBymHT9iUORGKF/DA=","authorEmailMD5":"18e162b93d134ed78478bd0c340dd1a5","message":"Hi Stephen,\r\n\r\nSo, let say I have started two running tasks, and use ContinueWhenAll on these two running tasks to aggregate the result. Then, I wish to start new tasks to process these results.\r\n\r\nIn essence, I am wondering if I can attach pending running tasks after ContinueWhenAll is completed. I tried it but it can only work when I wait on ContinueWhenAll. But, this locks up the program. Do you know a better way ?","postId":"2015_01_a-tour-of-task-part-7-continuations-de3f4e98-d7b9-38d9-b8a9-e608dcf2d0c1","replyTo":"","date":"2016-01-05T17:46:20Z","timestamp":1452015980,"authorUserId":"disqus:InspiringCommonSense"},{"_id":"61f6ede6-ef35-3e05-ac1f-58561306966c","authorName":"Stephen Cleary","authorEmailEncrypted":"Hi9PYbL4BaiML0Gik3ABR83vPUZ7tUln0m/rQz6GPHaK7j028QMzvIy4exYrkv+OYp52973kN54kMJX0WVfONemNURVaOXVoAF0TvItKvRXCBSF8KC0eMDfUp4nYsuD8YMcMW0wgewT8tt0kGKnzKeRrdINZsdDtBmUnAxYCBqe9ODkJDTqXjt8UK3y06fIvS8mro/bGHej3zXyETUUZFLltnKdseiH6mcjWWfZYSZLxdWutfr+ePrHkwcN3ekqReAQxJaVUwizVgcATKcLTJNJoT0hgs5FR5dNhWVgs7QDpfs9GYRcmfAHcxT4TS2Qcied8aBoJPxAc9r2fX99IawOSlR3y/KKUevg/X7WT9yhcMAZUME2gYDTwrNWOHVptZMYdNyAKFdMAM2EhYaWka/au690TLjCj+ERd2SfqxIl1VEK3SBLloQiJdcF4qD7TsXdkFx35UlB9/qBxYz1jKmvSS2n46dPbZkvFIqrANfiPyCD2h21P10MY9NmR5FXSMlPchME5SWFtVTb96D76Vwl6Te1qDPoUnVdlLhWufeFUDBBzY9W2VuIbspJP5MXeaiGEil/8m2ehGg2Q+cGYLEOi14uFxa9C1thEIpEKO4LPjuqCiZF7iCv0MxbjFpe5sDp41CskDbYDQeZzTTepX9hf0o5R324YzTSkX1Y3DQA=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"A \"continuation\" is just a task that is started automatically based on some condition. So, it doesn't make sense to \"attach\" an already-running task as a continuation.\r\n\r\nSince continuations are tasks, you can just have the ContinueWhenAll continuation do both things: aggregate the results and process the results.","postId":"2015_01_a-tour-of-task-part-7-continuations-de3f4e98-d7b9-38d9-b8a9-e608dcf2d0c1","replyTo":"9323c408-5fcb-3aec-86ab-8d3e91458508","date":"2016-01-06T12:06:00Z","timestamp":1452081960,"authorUserId":"disqus:stephen_cleary"},{"_id":"9963e709-7ea6-3c18-b09f-3d39b054d8f6","authorName":"CommonSense","authorEmailEncrypted":"LTQ1R6G4rFbCWIlZN9mopWaLkNLNQgoPQbzOzR5odeara0U0MZ3Yq3qVqZQGTmmKQvrEcVQMlqBIdzrZOfP6t5jlVDvPvDOy/xIJAmQvCtF/oyW4Aw/xhZf+952pT9bXK9IPTaDsscgO2ICjgnPd5L5qyFvnF2vQzVFSoduTaIvY/siNwZdX9UCxMbgEozCReYfHvAysLYwoRxvYquamPUd+JiwVaskY0iIdPZvnUpSSrwBjtluYrh18l9baQ+BYRObJX8WogGZUlpI10oXUi0cya5SPL+6vm4AzX5D+BegkQNHNJoBKmyJ8xvH9KQ5tPk5z0NplSpaJM5+OWVP4/wJN0bgUQnsBiwaC3UnAAUZqYSi6Gf+znOljMnGAT9pXsoRmYLj2JW9k3DfojFgzUC83MvkrKXlQwhuCpxWj7T6i9SDdqrCaEjrNicdTnKM7PWdzD7I6njJLbXr/iGrUzQhfA4muX0Qdbk7qL0Gk7AmVqIZ/Lc7TEzjrha1J0+Yn8yW2hxVvjFv3avdBtAtXtP3yN3UJVwzh7HutODcW4qLQWx+ObzU31gdqAo3mf9P/RubTVRu/pp7Bsah0HmD+Niukf+kfVUH/dSO8YWKz8yy+bnAQdbsWx3BnnaIyEaew04kjgK0MAsGHvnqbSmf8Vp47oDqdthWw2TBXpECnHvM=","authorEmailMD5":"18e162b93d134ed78478bd0c340dd1a5","message":"Yes, I agreed. But the twist is that I am hoping to spawn off multiple task to process the results.\r\n\r\nI have posted a question on stackoverflow -\r\n\r\n([http://stackoverflow.com/qu...](http://stackoverflow.com/questions/34619062/chaining-tasks-with-continuation-and-run-parallel-task-afterward) \"http://stackoverflow.com/questions/34619062/chaining-tasks-with-continuation-and-run-parallel-task-afterward)\")\r\n\r\n. But, I have yet come across a viable solution. It's rare to meet an expert on this subject, so I am curious on what you think I should do.\r\n\r\nThank you.","postId":"2015_01_a-tour-of-task-part-7-continuations-de3f4e98-d7b9-38d9-b8a9-e608dcf2d0c1","replyTo":"61f6ede6-ef35-3e05-ac1f-58561306966c","date":"2016-01-06T16:00:28Z","timestamp":1452096028,"authorUserId":"disqus:InspiringCommonSense"},{"_id":"0f5dcb86-f8a2-3fcb-9673-3cef27edd19e","authorName":"Stephen Cleary","authorEmailEncrypted":"LxpuoFKM/lrndWR4vJfl5qP7/v9oCk+pF33EkZ3V0nCbMwGKp8siu9yX9lE4/kwZK1fl5EPm5dxhoFOscnOHaxi2DdJ2j1XiPQ2oXQWdL/MfkacOxI3qPYn3IcPRWZBW7YyqcCIs0DQUSnmmOo4R5qjeZSC+ntlnsSa+zjmpWhp3My7KTEO02QKzPuMfxNJuNfwp9Hk/i/hr92i8Zf5oxjM7CjUyajY2z97rn7UtD/qZNCq99ftBKsvuP1xkWJKWJJvLBol36lshODNERuCT2K1d+q9i02NhvKagBE76e0qUMTRybnK7krPKjCOJJhs966LxHrNEnxj7yJTgBHTSulQdAdXm8AJUD9MwFbqlBc76AVEoBmcVmBWUQAzOqkn4MpCHVLuZcr3u2aM/5lsyzDn78g33cd2AirpsEauLbHGtbpmXnSMUuz8Q2Iga+B82Pt94/hYXj5klFKe7fz7UCSvKX4ooNDAiRaz3gIp7R1+tYKmjbWd00RoIRQosNiVYrALjs6VMlv2tm1m7bSelbs/P00O1YJb6PVSM2Bfcp/JBOAF3DNzdGXLtEl7A8ysPDHxMw1pc73Uvfi+mWbX9RlLzqsmf+i+xv+8FqGXiLYhmwJuHwLyHKd6aPUg12sifnR8b11YVnjwCIYwlQG6a90kOdZzHoXHIJegEZlyO7n8=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"No, I would not use ContinueWith here.\r\n\r\nYour existing code swallows exceptions - which I do not generally do. Also, there's a Task.Run wrapper around an async method, which is quite odd and merits investigation. But if you want to keep both these behaviors, you could do:\r\n\r\npublic override void DoViewReadyCommand()  \r\n{  \r\nbase.DoViewReadyCommand();\r\n\r\nDoViewReadyCommandAsync();  \r\n}\r\n\r\nprivate async Task DoViewReadyCommandAsync()  \r\n{  \r\nvar result = await Task.Run(async () =>  \r\n{  \r\nvar accountManager = ManagerLocator.GetAccountsManager();  \r\nreturn await accountManager.GetEmailAccountsAsync();  \r\n});  \r\nSetRegisteredEmailAccountViewModels(result);  \r\n}\r\n\r\nOn a side note, why not use async void for DoViewReadyCommand?","postId":"2015_01_a-tour-of-task-part-7-continuations-de3f4e98-d7b9-38d9-b8a9-e608dcf2d0c1","replyTo":"e8221b81-1862-3b8a-916e-165b2d478b50","date":"2017-03-17T16:40:45Z","timestamp":1489768845,"authorUserId":"disqus:stephen_cleary"},{"_id":"e8221b81-1862-3b8a-916e-165b2d478b50","authorName":"Stamatis Mavrikis","authorEmailEncrypted":"hAkCIh+zyomrQbE+7JUXLbd3teOjmV99my42mxa22yopaZ7Roq/PYsJCJJZORqYXtfcK0/ZeffTcy225a6GLeU7nNtOXvR1z+cYKR8g0DDzUHzqBsXy8ppV1PCQLGk8KC2K1XD1sD35E5gty5rEpVxRsOsZ9qHs62/Rf5427FBfH27po/B4im9oX2vV/5dXouBOAN+xYGpmS/UWGdGevBfgqsq2dlh3F8gsRXx+YDQStcKep3F87TwARaan7BACypGxUTZLoVk64dcKDO9ow61EeNFqwe6oFKxLrM5SAln+YbfpqUdFT7nTwdQdap6voOESfd2CLvAXFLPH+/7XEgNJpgJ5jnvmd27rtl7NFpkz6h2bUbPoOeJZv5O2roKjAqvFPxpGJvG6gb0gJzYAlOlClgvLCQhFPHb77+t9y3qdbxZpAL4kuHA/aSM4lTfdcbmXClsVSDicF54FTHFBWoCgb4XRcJp0rUHA8QrSBgoS6cJv9RLb0MA83HucVfn+v+iV/6/yQAK0CSxbBJ5dgMjkbolukSNC/4d8x/sXUiNcp1ouuM7go10qvDDFotfntL6IAHqZHTwpxqKEGF2suOoOq1ZvSyDGYk+km5KwQfItCMGZZ2QSyiqLkiJRFxWpRR7I3e+3TXe5asJ6mDdxN0D78s60qajlpB+GGHNj7QGs=","authorEmailMD5":"adff651da65bdcee45b0be31824f43b5","message":"Hi Stephen,   \r\n I am working on a Xamarin application. Inside a viewmodel:  \r\n```  \r\npublic override void DoViewReadyCommand()  \r\n {  \r\n base.DoViewReadyCommand();\r\n\r\n Task.Run(async () =>  \r\n {  \r\n var accountManager = ManagerLocator.GetAccountsManager();  \r\n return await accountManager.GetEmailAccountsAsync();  \r\n }).ContinueWith((t) => SetRegisteredEmailAccountViewModels(t.Result),   \r\n CancellationToken.None,   \r\n TaskContinuationOptions.OnlyOnRanToCompletion,   \r\n TaskScheduler.FromCurrentSynchronizationContext());  \r\n}  \r\n```  \r\nIs here the use of a the continuation task valid?   \r\nYou do not recommend using ContinueWith. Is there any way, without declaring the DoViewReadyCommand to async void nor using ContinueWith, to implement the same logic?","postId":"2015_01_a-tour-of-task-part-7-continuations-de3f4e98-d7b9-38d9-b8a9-e608dcf2d0c1","replyTo":"","date":"2017-03-17T15:51:11Z","timestamp":1489765871,"authorUserId":"disqus:stamatismavrikis"},{"_id":"cf63fca9-156a-3400-844b-853f143392ef","authorName":"Stephen Cleary","authorEmailEncrypted":"cio+pNiavm+Ku/29hSLfScfbSkb5LQlig64hrFE2ccsjb9cR/0vMqo5QBg1yLoaRqqy2McQTordzP7ingYBUekVGq6P5P0utxi5g4wG25NtC+BmvAVgO4C7hcxGDj8PF6Pu4nWvZIh/CgKIaj3kHhoaVmJGE0XNwrABzKDIr/TXx2YExGpcIoJRAIxszC62/0T3WK1Y5pFhn8vMndJTaeYS7/YvkjRx5OaMJT8ZE1/XbiAgPF8zUBJNNs2ZBys+DrE8MW8jRy+OKvUetUkEGlgA6oa0+BhG+z/u6YHp0onF88cz7HTOy5X7qPEvBYs5E4DKn41bY6C2ifcybhSX1Nuaca2AvsdxbvCvtry+0V0E3UA+s5n9/m5N3LhzqxQqyYZcL32F+YsqsWHqJXxAf7UgwO4U2jXjK5EAf+L1w9kZ/dMy3LQzav+x6Gqcjf2V91GagR+oX8j/2tfjg5pkpTfQG7InLHmtIFW/gcODAWFiCLGUyawu9YgGSorcdR+lhX9pj8KycQzJe+atwPxtHG0d3YwbCvhzP4S4oEE4MGt7RcM4fxOPHYmxzWsREhcqFZQXmfTEifrvzvx27jpDYrHeWGQHC5LoEQ8IK9wOemRasdLRuTZLdFu7R+TYfMemWFoIACU75sP0cKBxd7o80giLO6g2ZLrUHstjxoBPkqns=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Yes. Avoid async void, certainly, but there are even worse things - like ContinueWith. :)\r\n\r\nIf you're concerned about testing, you could use a pattern where the async void method just calls (and awaits) an async Task method. The async Task method is, of course, testable.","postId":"2015_01_a-tour-of-task-part-7-continuations-de3f4e98-d7b9-38d9-b8a9-e608dcf2d0c1","replyTo":"fc41b1c0-40be-3c53-98f3-50d140db5f32","date":"2017-03-18T22:32:28Z","timestamp":1489876348,"authorUserId":"disqus:stephen_cleary"},{"_id":"fc41b1c0-40be-3c53-98f3-50d140db5f32","authorName":"Stamatis Mavrikis","authorEmailEncrypted":"cEQ78FF5nsBKdiBKI+0LlIQi5B58YRdfhoAhzuS9WSJgCS7mwdvy7pLQpDYKTjKSm0DEjZzg9JbU8qVmmJL6Dg0DeKxf6+OGEwPGoh0c3Lp51BhISybBhQMhhSWM5Q7o1jeAeFXZikCSMGn9SdeZdlLW9QdFJ7hb4GXoDZIucU5Rk5BkVrW2ebmJWNpJYt69Soa9e/Wb+MnuuIDULJqwLWf3/Ivx9UdwZ+LtHRhIySkuj73G0lgQLmzJun7NYBTFBgOzHD1tWbxIm/Ptui+s89mOGaGk9aM3YwcfjEg2bGoxW72WFTk+IvELgBHYMItNJwmrlNRSRViXbMi99sm9REwGPzoS6SDTXqfmi1M5TBcriX+wahzIVtWnhngTZGnQjrp5FhAN0dO26oxitNItI6SxG8jPdUux1IgG42KLBNj9O+g/uNkt96fpiNyiMVAjsAzRCjnzlTtONo/2C8XE2eiFanzGcniEhgjtBgM73ctLHlpfhCJ4bTzDx+AVDWLr1+uwP1Finl1/BRNuFDj+DJ9rZw/JtLOyDZDpH+N5SBII0lQCWVeboyJYUqHn2UogAAEfkuCuLqueSWf/uD6OUtET+0MU+mgmo3GaYqCcapfXRA29jObyrRuNMOw0H1mIvMW529keXJHDvpg27G2g4f6rNRSoZE5wV+wSNUGMz3s=","authorEmailMD5":"adff651da65bdcee45b0be31824f43b5","message":"I wanted to avoid to use async void because of all the disadvantages that it has. I thought it would be more clear using the ContinueWith creating first a task that brings the data from the db and the continues with another task that runs in the SyncronizationContext to populate the data in the view. But as you said this way also swallows the exceptions. And as I can see it will have the same difficulty to be unit tested as using async void.","postId":"2015_01_a-tour-of-task-part-7-continuations-de3f4e98-d7b9-38d9-b8a9-e608dcf2d0c1","replyTo":"0f5dcb86-f8a2-3fcb-9673-3cef27edd19e","date":"2017-03-18T19:17:28Z","timestamp":1489864648,"authorUserId":"disqus:stamatismavrikis"}]