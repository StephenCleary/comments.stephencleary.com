[{"_id":"06b5c0ff-eb9c-31d4-ba07-ced5bd2498a2","authorName":"Lukasz","authorEmailEncrypted":"l74tbwJLoltxTYVTJuXuBGsehJxV0q67IOIztwXsGhn5K8lBXKleSAAe2oZ2fh9GaWLkySbrNHz/tLxEz8IzX4XBvgVVn82tMpu1GJmfbut47jU0rieMPRL8Rc5AA+WRNr9v4FFNNkaSBUFPAPuvfQc5A9glyxe+4kIR9vylkM68p8121J7ruFq0YvSxhEYwv1FSCxJtPXUPYw2CyGFyPGT+STLZX+ZDTe7MgZAdzc8DAXR3J8OfioDpEMK8u6FqVOmSuGpsKVQRz8xUujE4B3diUSwbKNLviIS71xj3SqUsWkk707OwB9dyI8MXMuhL+aRhxP2SJq0ktWm1gp+/8wpd738AoUsjA1ceVA250QWlwPrRdKBsvocTonOxW4j0i99HNYV7fddHjRlqHCbrC7ysWOIJ1sZh7DoaiDgZkBgdUyXUMfONpW7v1fI/8NuUF3G36CJ3gK2Fca3JkmWv2Yd/nOaTDdfO6vlNmtDhWvmWI8hjxgbaoGe71xMsOEFfY/Xufk3gcZ4c8HLHeSSPUIeu4bYDzAtakG0DD2p57Q6r9bbhDwWIvtL95Cv8fTII269rDRve/hzYmWMUqDEHDdlSKlA90H6KtZzOyQbI5moW0KjbvAMKhjyWUh+sRoKVWhs4vhclHXCuX28UiKDjZsuKV3e7u/l4hkJfp4MOWw0=","authorEmailMD5":"95cf4b9626db3813c3f37b2d141b2513","message":"hi,\r\n\r\nI have following problem. I was testing two diffrent lines of code:\r\n\r\n1. return Task.WhenAll(queryTasks).Result.SelectMany(result => result);  \r\n2. return queryTasks.Select(t => t.Result).SelectMany(r => r);\r\n\r\nSurprisingly it looks like the second one has much better performance then the first one. I know that the first line is not recommended, because WhenAll is for await purposes, but anyway, why it has so much worse performance?\r\n\r\nBest regards!","postId":"2014_12_a-tour-of-task-part-6-results-b6e44095-ed73-3545-8772-598d69dec4ab","replyTo":"","date":"2014-12-17T13:40:34Z","timestamp":1418823634,"authorUserId":""},{"_id":"fa8ab494-dd1a-343d-80f7-07ff024a6704","authorName":"Stephen Cleary","authorEmailEncrypted":"L4rY0AYEUvj5hKhi92MjbL2ZofpitxyLyqwQM7onfKy0a/ClkS+P/SS2XzPwFCgz+vfoDHgv4qpDInWuUm71dOscwuOZ+B7TbFNak4Ol2g5D0r2pduB8dmQOtSkRXkb3NbBsU6EGrt8CfnfuoA9NFzVeTfNLmHcQ62iRrNHAn+kS14kFmWo/vzjJJfy0YZ+x7RIyDlVJblzKhsaGSc9pft8HEut4QFeaRUCe7erXnyuFRmNUBFJRKXx7Ad0s5e8uGQhed0pY0XuuvMId8TYFRp9ihO4Nk+tRvjXAltu5k1KnvxQtUQcgV+WYLXTtiyGf3ZS9xf0C6uKcxBfa/o8KFBfgzFAsKMTfBn/G0Bi11j12tSF9nF5etsfUGOkPcVcdAMR28hSL6ecBjvoAeHB00b2NONmg2g6MYbF5owapqAUATmVT+a2OiPgKQUH9142oTxU2F+Ix0AEQYfWrsFDgWLOUWwuV9OXyiCXS6myArC6AoAHdOy3ltinb017mDGPe9DQS1m1WHPaMQMljUgFC0lNPFxNRLPMgA/V3HzDGhmwYNS60em0h/ftLrhwo0BNIjT9oV+sOEj6bYnrp64o8ncmHTQL7N70/5HbfkW6Br7DQNrla18dbNd2rmVqzjo9ZQIaBMbwDbYev3okuwHb+EiezTQ+qQXt09SCDcPjo+qs=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Hello, I saw your question on Stack Overflow.\r\n\r\nPlease post a minimal but complete example that illustrates the problem. Disqus isn't great for code in comments, so I'd recommend creating a Gist.","postId":"2014_12_a-tour-of-task-part-6-results-b6e44095-ed73-3545-8772-598d69dec4ab","replyTo":"06b5c0ff-eb9c-31d4-ba07-ced5bd2498a2","date":"2014-12-17T15:39:40Z","timestamp":1418830780,"authorUserId":"disqus:stephen_cleary"},{"_id":"6969626b-d5e2-3f30-9758-367ebac3fe1b","authorName":"Lukasz","authorEmailEncrypted":"s6m+lPGmUV2qEQ+nXg0XVlHijTIQH1+GSHE/109Us+0HU8h70NBkHZ78iHkciV6eoA8iLiWsL3foN+5SeC7LG1kVm2hwSDi51XjBuVeNtB/8FEsZWoixAKvb2NocRnWL35OOvXMy+zSyzaCFMpjwkXjEW1lpswOR1jDR8tvEFXzzzM3RUdg68ay5EPLsClF6BRdAj4JMWtO/F+RPd03XFYcQlJBOAb8D0zckL+7dSaGtogFTt16ky2xKNjLKiGAVXtA1017fxkyzqvko3Swd9Gl5/vGCUsLB+C+XQ5qBx/fsM0gb2fGfNZ8+rz+waLNpbT03PSmTbllzeqH1T8xwhJ5YckzD3dLEX78PDSAGWyXaK+a7GiLpcjNCbr+Hcj8Bw5KBmKz8GUb9hfzE4qzKpWRoP1aLCCMGpWOgEcTmfZu8BbIPgZyD3NtZH0crSjzVA9nsCA4x5T6vnNr3kTYmSTMea+YFtY4WXz7CGIkt9CqoD7JIcj7OFpLAhncAX7Bigtiygv3aDdo7BZDKNKMeed4IySN+xg/JOmge4q8tgtp8MQUoMn6y79Qgac13Qh4luS+HPVm0fsyrlIFme6FRG13c7s1aSyL0Ss3nCXIgvTvZkWiT9PykVuOEqnJCFC7cQDXvZAwHpfGZSw0MaGUPkd26dnXhRNS6jTHMa8j4Hmg=","authorEmailMD5":"95cf4b9626db3813c3f37b2d141b2513","message":"As You suggested, I've added simple application that (I think) models the problem on Gist. The link is in my Stack Overflow question: [http://stackoverflow.com/qu...](http://stackoverflow.com/questions/27527253/whenall-result-property \"http://stackoverflow.com/questions/27527253/whenall-result-property\")","postId":"2014_12_a-tour-of-task-part-6-results-b6e44095-ed73-3545-8772-598d69dec4ab","replyTo":"fa8ab494-dd1a-343d-80f7-07ff024a6704","date":"2014-12-18T08:27:06Z","timestamp":1418891226,"authorUserId":""},{"_id":"4686f886-d126-3873-802f-f72e366b2d4f","authorName":"vetiarvi","authorEmailEncrypted":"s7Xc8+6vnV+6cFfWs5IyxS1u9dm4I0DTVuElCA/CENOxCGiHU2wyiJzJxZ3eW0ujIDCEFcRKxN2aiGcdGvUrhtiVxQWRnryhaq2s1RTRA5IScxvsuXC/2oVoRnHG97WjOmyFCenf8CMfUltVe8gbXgbSf1Ar5GIoDqOU6gf7rtv+2ns4+hbLzN7VN2YgmAPk8mERt1IbZl58rgorBjFkfdNL7YVgdRz3frLUC/8o3k9zII0h84J7V1t2ewWLwbCMxxtViboP/ahDHwQ6JgiEFquqb/Mp0jJ9jy/XQoAcYLSCSVBHqh9lFlXHS7wqNIC5MipzVEqTyrXalKh//PVbsSOsEKgoKh+PmmXaGikfCq7nVU9h7gVFeAdLSY3WO3nyb5NDUSqZ8IxX1QpGZioOfjtURYFdq/99WXRNZ+YqTQ+iPu5SWAXH5JZTFruS66oYmiA3/eVHUnSciu2rzaRtQ2trsilChc7bb2YIdBnmf7Y1eFYME0E2XfcnZIHTegINwTE0iPwCCBYDFmcw8XD42fUnWsV8YnXb3r2LQkLorYoZzLCx+lCANuOEwgz16qkly+JSrqXUqxTOEmpCvz33mSKhHs8HDNQYd4YFT3hWxOn+pfMclRfC59ytGc7qzLDIyxDb2jCYAPB2p9fGumZMi4CjAZ/ORA28hUfG+29ck84=","authorEmailMD5":"7b6460d94795ae02211b102b0dfe5355","message":"Isn't GetAwaiter().GetResult() the best way for a synchronous top-level method (for eg. Main in a console app which can't be defined as async) to call an async method?","postId":"2014_12_a-tour-of-task-part-6-results-b6e44095-ed73-3545-8772-598d69dec4ab","replyTo":"","date":"2016-03-01T08:09:52Z","timestamp":1456819792,"authorUserId":"disqus:vetiarvi"},{"_id":"5a110b54-e282-3ac5-af93-e9b2c6d49086","authorName":"Stephen Cleary","authorEmailEncrypted":"tjEiBI/3Rdh+KhlQ+kiIFNT1/CHDNlN+2N0l8WEJ5g3Pe9uQtQKL9ckcV+H/eeNYZPh4lfyeULdFo8yJpNwYPedunfvSzZsYgU/x8gaTYA/46f0kfY6AEwWmmaHnI6243VbC+LRoWUzZOudpC7ehhB0I76j+Le0AEVv3KBNNxzgniJN87cTdXJywfU4hfJLPuZHFmeUGPueX0AxPVU+mjeARO3TePqjhXUPrBRM/8TexgBTcdHRGlT/xZsOchL8rYCxCdQwjytOEyzzsLRYp1kb4k/jSEyMiLKRjeqP0PiFnuRDQb5xbjrKM3DCw9SLpTUnXdjp7KRpNNqUOI+TxCcZlb1BG4j/uFioYW60T6WKX49ZzMLTRObGLOw1V4sJyJjfgbQXaUYRP4H0afSat6yAWYIqyUK3WQQhd//anSUiTOebkNwJiZoZwIFNWtEEK+GtOmPUOwzemN52jDGn4KYHfaHou1intTMPK6ICkjnRjC/yxz663aUIXEQIlawH+mYIXityzwW48M6oPHdlfDhfTnTszZmbYM2QSpjBXQTT9VDgOJrlPfAIUL4M2rc2HJKbgJ6i6SjLDpk+Yd6ug4hOLnxzQEYeiOdac0b/JY9jZmSnn0A6I6QTS0gPMZYKnUlEJAXjt+Udyt5LgLD4FlOcGEPbwGfUxmzmF8OFV0aY=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Yes, that would be one of those \"rare conditions\" I alluded to.\r\n\r\nYou can either block the main thread (having all continuations run on thread pool threads), or you can install a context on the main thread and give it a main loop (having all continuations run on the main thread by default). One such context is the AsyncContext in my AsyncEx library: [http://dotnetapis.com/pkg/N...](http://dotnetapis.com/pkg/Nito.AsyncEx/3.0.1/net45/doc/Nito.AsyncEx.AsyncContext \"http://dotnetapis.com/pkg/Nito.AsyncEx/3.0.1/net45/doc/Nito.AsyncEx.AsyncContext\")","postId":"2014_12_a-tour-of-task-part-6-results-b6e44095-ed73-3545-8772-598d69dec4ab","replyTo":"4686f886-d126-3873-802f-f72e366b2d4f","date":"2016-03-01T13:00:08Z","timestamp":1456837208,"authorUserId":"disqus:stephen_cleary"},{"_id":"70b8e7b9-783e-3c2b-8cef-996ae72eb625","authorName":"Max","authorEmailEncrypted":"SyHKdEPr4yJDxM5Pp4/qx3FPrRiKgv+ob/PEszOQPw/1hykOdLOnQ2jxbL3gYu2vew8neU5xUBYt3F/AF7pTpe2YZ5ZJcP4m+mAmP/JUQ/BnS0U7gjsbRAnlg/50bY5mBU5b2mNDV+zeeJTXBc4fOwL2fOJIElJqKaON6F2pAs/E4fThWdMslZL/uaGCP7z2PS0hO657mP7S4G2Grl4YiqDpOkR0RndfcVhD5uf0km+DuZ3LuPeXo3a5dYZO+KQ2shTNG4xSq12zJDbmZwoyGnPF7u6W9oLuTABPsbDkWx4ud9YVqSyXx9JLGr/Cw7oUDCCAW23ytTSA93UIsRKXoAOMt9GF+HbUCx9jgg/6MjzsiY0CLOrstNE91ilGusSpWtaJb8gvD23unFiSD6R8T+RGdv5sWqH4ss7SWJMVndqMhbDqe8cdUqF10exMSeh3kXmz1ORiVn1aG4K+BDswfP3Tl5wELS50QYqpxoAL3376tkoXqXq5fkWxIhgP27yRABCEL6HOUKQwChk3RryAuq9YQiy4ua0GW/WX1gOOoo2SZBJugQQkF0jFUwEN514H5xBgpp2GxJHTOggfeY/Olk1cHAajXP8FFo4CXm3/skYCY0c/wSj9Oq6Swz5dfLcm1OVLFrr2WzmO1mknLevvVhNpFfngAVccr2gGiLg8ZNo=","authorEmailMD5":"605b046ff2b480851e0607a41ed2215a","message":"Our application is still based on Cloud Services, so our \"background\" processing is worker role, which is just regular thread.\r\n\r\nI take your answer as approval for the first approach, to which I was leaning. Thank you for the quick response.","postId":"2014_12_a-tour-of-task-part-6-results-b6e44095-ed73-3545-8772-598d69dec4ab","replyTo":"d1f6b5b3-75c0-397c-a98c-218262cad02e","date":"2016-12-05T22:07:03Z","timestamp":1480975623,"authorUserId":"disqus:disqus_tBCipkZ9pI"},{"_id":"95e8a37c-81a0-32c4-b89a-c943dcfae0da","authorName":"Max","authorEmailEncrypted":"cCP4ueKNtBzt6c14+U857HSBxZ/9PXXvxp2ZzapUu/4iKGFnjtEK2ACEBY50dHgVSxE+Rd/93W35JkUlQbkuYb2IE5GghrdCUu5LtYTheS1qCqQfBzP28RlkqR6ox3cXyq3eFhykrAIB3szovozrN04Eh+nIxWBsU0NI53h3dZFxnGVykM+7U7NsDckjfJ7k6VLUhHVA8m85dAxPfVcyQHNJC9qGLDq3jaqB1kTHkiFovRhNkPXgR2pPTaIhimhM0Zdj2nNTOF8YDLBjVNLNNOx5KVdzqxgQYFeZyP2hu4ooAf+Hmw3KF3NvxQ+3He3hk5atStwR12OnCQnPID+WvRUdeiYEXR/mnsZ8LxxrZodZa9hDWkrj/pskuQiOcRvY2J30DyBazlRe0Lm4yluuVsWP2F+fG0+bsq5pu+AVthOSycTDB7oo7luZNfWc9auQ0ycYmArdw5eoOSTgKhsaTFqlJyUSGi1oLl61rZj76Iu6UANsLL/y4A2nIkKJ8BnLGYV0WE6ah1E+LNHj2KF1QlpBEHObV2tVIytsIjowK6/Or51+XAnxoxwljkboRKwuBJ2ORw6KvqyjMssGO8ABoF7MrmRCsBong6mFxgejfN2aueUB69cfRWS9QtL18A0nBuLFpfnRt1IAiclySj+I6CpV0UheSnVD2SzOr2EpwAs=","authorEmailMD5":"605b046ff2b480851e0607a41ed2215a","message":"Hi, we have fair amount of quite complex code (business layer, involves accessing data base and other services) that can be used both from ASP.NET and some background processing. I don't want to duplicate this code by implementing sync and async versions of it. So, I see two options:  \r\n1. Implement async versions of everything by default, and then our background thread call them in the way you describe here. I assume the preferred method would be task.GetAwaiter().GetResult().  \r\n2. Implement sync versions.\r\n\r\nMy inclination is to go with first approach. It is more convenient and allows flexibility of making decision that something to be used in background process to be deferred.\r\n\r\nDo you see better solution, or potential problems with this one, like deadlocks, or performance considerations? Since there are no UI threads involved in background processing, I would assume deadlocks are not an issue.\r\n\r\nThank you.","postId":"2014_12_a-tour-of-task-part-6-results-b6e44095-ed73-3545-8772-598d69dec4ab","replyTo":"","date":"2016-12-05T18:44:15Z","timestamp":1480963455,"authorUserId":"disqus:disqus_tBCipkZ9pI"},{"_id":"d1f6b5b3-75c0-397c-a98c-218262cad02e","authorName":"Stephen Cleary","authorEmailEncrypted":"PFPp/eDkG0N0FREQuvQJPmqfHeky9bcgCeLBK7RerkHWw8CfPa7TscGfAnzuTsyfW97UIMoCEX7HqyYQiLPhg+XQjPG0pR86EVu2vqBGXkyHSJpl3SPQfVj8NS1Yunwnt+1fpvKlw4gUCgVtUmgDe1b9DOcxsaQfL7EF9OGU9DxGiLwnN+VEtqCciA9dpdrGZR6dQKlSmnM/V+cw5/WfM5DzPSpTcSNHRyfez+hTJcPlDg9kS41/e6QF/8VAH7133mf568IyE4HXti4LXR2WxNaIEBHeCs8rZlyQKI2JS4JgYjoEoGm9HROKvRxx3nFtei4iCfuSHzKVPVBDTt6YQQCosXRntzO7745ZpET6KC5pA0qjnFg5eUeN2njW9SLvty0OD1u3Ac6r2G2BGcl13d9ibyZBFti2REX/AfLYFaMGxk24FaHnVIGTLAONqhZKv+mEmBo7e7gAU0KyEIpJatZPBgiOpAyV7TtiGc031xgkez5zsITL0MJ4RmswmEunh+HEi7Z7f+sNeYWsKl3HFDKY0Z4XJT6KRgPGvB02/mP2avY2LuMvWOmxNQxFHj6EDxjK/cQbj2jJFuk4YxOWtk9xV+WrBm4uByd2xE6HWuqFNq4VxggR12sRvXLPZEc9vpCkYxIh/dOIQbMpN+hr8wRTQ+HC23m46rDLA/ud1jk=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"I would say the *ideal* system would be to only expose async APIs. If possible, modify the background work system to allow async work - if not, you can just block with GetAwaiter().GetResult() (assuming there's no context). Under the covers, the \"async Main\" support in .NET Core and the async support for Azure WebJobs just do this.\r\n\r\nIf you really do need sync versions (e.g., for backward compatible APIs), then you could use the bool argument hack in my article here: [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/mt238404.aspx \"https://msdn.microsoft.com/en-us/magazine/mt238404.aspx\")","postId":"2014_12_a-tour-of-task-part-6-results-b6e44095-ed73-3545-8772-598d69dec4ab","replyTo":"95e8a37c-81a0-32c4-b89a-c943dcfae0da","date":"2016-12-05T20:44:03Z","timestamp":1480970643,"authorUserId":"disqus:stephen_cleary"}]