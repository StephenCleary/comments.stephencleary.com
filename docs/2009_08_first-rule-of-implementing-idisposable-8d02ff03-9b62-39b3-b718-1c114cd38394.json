[{"_id":"2742ebfb-558b-3fd2-b73f-92c1a48939d4","authorName":"William Wegerson","authorEmailEncrypted":"","authorEmailMD5":"","message":"Excellent article...you should back up your assertion from the same conclusion stated by the MSDN docs: [Implementing a Dispose Method](http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx \"http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx\").","postId":"2009_08_first-rule-of-implementing-idisposable-8d02ff03-9b62-39b3-b718-1c114cd38394","replyTo":"","date":"2010-02-25T20:49:28Z","timestamp":1267130968,"authorUserId":""},{"_id":"4699222a-10eb-3043-8632-39ed136c21e4","authorName":"William Wegerson","authorEmailEncrypted":"","authorEmailMD5":"","message":"Oh...I would add one other rule:  \r\n\r\nImplement IDisposable if you have (managed) events which need to be unsubscribed too. Otherwise the managed object will become pinned in memory due to the subscribed event(s).","postId":"2009_08_first-rule-of-implementing-idisposable-8d02ff03-9b62-39b3-b718-1c114cd38394","replyTo":"","date":"2010-03-01T21:27:31Z","timestamp":1267478851,"authorUserId":""},{"_id":"5fe64ce3-b81e-350b-8d76-70f3da874932","authorName":"Stephen Cleary, Nito Programs","authorEmailEncrypted":"iCXS/Mv41N/0kmdmFooIDaugFeW1XOYe/aQXPseXGZusquBAydrqq9gP9q/lbjhaEGxbODhudkhSAzvPeYTtWlYE65UqdOBVrO1QUqCkcxhkIVidN0b8aI3wNjBeyBbcq2T/slacwb/NfldSCpi8xkne57jeKwRaIYBa35fEjQw+fh4YdWvwRyYC9xkiqZn+xaIda/7zypkCTzPhAQA4Qv9DUDKpM627KAt03RXAft5Z/U2zIcoWiLIBaFjBXackpTVVDxz26r2ha4la7WO1DXDYx7S4d8z+Pzk/8LsTOQp4gIIL9JGcJPG+SIni1lKYFryxXm5hEAlQ+7qsoh8bHWDZeXIQpsLDKLCNMqrPCtNv1jsyu4YrXbfbwK7DX8pa/74U066GBszgxJTMDDw2t2Q3RlEkkXeN92ub8iPORF5dktD1RjfmhMjrFkS+qQFp4ww8+RC+FRMp9l2JvRYPELMqmCokQES/tC+c/vDTIiMz+nZ3Hz3YymqcyM3sqb7kleamkZDAAd5rEZJF676lwFyR1Qd+LZLL/6qeZ6Kbq3Aa4fsQgO2L27ht0mYIcqBuoJKvskQbwQYGH5LFOOX5LT6cy6Ak6nyzYv/NL9qWtuAn5pA7mZmHWNOElTLHFzulIBiw1FqB5nN7Rk1FeFHV66SET/gVLc4U/bra9hERcyo=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"There isn't a clear consensus at this point regarding event subscriptions. There are three different approaches that I've seen:  \r\n1) The class providing the event treats its event subscriptions as managed resources, unsubscribing all of its subscribers when it is disposed. [This is William's recommendation above].  \r\n2) The class receiving the event treats its event subscriptions as managed resources, unsubscribing from its providers when it is disposed. This pattern is commonly found in MVVM projects, and is a little trickier to implement.  \r\n3) The event subscription itself is considered a managed resource, initially owned by whatever component created the event subscription. This more closely follows the pattern used by the Rx framework.","postId":"2009_08_first-rule-of-implementing-idisposable-8d02ff03-9b62-39b3-b718-1c114cd38394","replyTo":"","date":"2010-03-02T21:03:45Z","timestamp":1267563825,"authorUserId":""},{"_id":"4105a5e4-1b67-351e-912b-00034e41b01c","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"What if in your example the list holds thousands of custom types. Say ErrorList class goes out of scope. But because GC may not start reclaiming memory, there are chances of memory leak.   \r\nHow to handle such scenario?   \r\nCan we not write dispose to clear the list when ErrorList scope is over.","postId":"2009_08_first-rule-of-implementing-idisposable-8d02ff03-9b62-39b3-b718-1c114cd38394","replyTo":"","date":"2010-03-30T14:42:36Z","timestamp":1269960156,"authorUserId":""},{"_id":"c241997c-6cf3-38c7-bea6-051f271d9a19","authorName":"Stephen Cleary, Nito Programs","authorEmailEncrypted":"iihOywqHNSL3MKeCJ7YrJ00rzPKW/wuYV+TassuNuOiiDrzl7kmB1SSPLneVrwg2PvQdzq42pEKr9hwS1ROoO6MQDM5GHTkLyXJqTtPOM7IvQhJOryjD4mSE+f0Zho14XdTombtyumrXF68D346afTE4etf/dT6O6OpOvLcnecj3uQ7y090djYvCs8aWEizufQukxK5n+MkTJHPjvQCFak5ZNxvqRzttEzYrRtBvh7pBu3ITPt+y1GfCoewSpdpWFSdy+r2GPrw3egWV4eMXz3oDOIIRE314p7t0v2Vja5SeUNWMj22eag8YgvOwLg1qIfNk+B2HXnlZB/N1mdQ+KALRxVVewYeJO0dxyAx/23v5biTDiEfj+ZR6sscdXdMADM1ATVMyygB3toapPrD+z0kIRPrGqk3q0iVr2XKGjw7SYfw50jWQQWzVqn/PuIs5EzBIhqDjMWWh2Eqe+yksRUH0NPgZTqTYwKgg29wSW6AzOmP2VuOh5jDDEaPYoL8h2+zeI9Rc+UX3fATZ1BmAqF49vrXXHNNHN024/MYDvCF8Py2Bm3/u5+1D0e/wrWkNEs3utOH3hRdTmUDgHEa2NT32iWN+Km6zbbX6lVQNa2mwWRrJeQaGaroUZoobOShA86vHd2sDUy618W5uheycvyrvyHEV6R29ysEKsWEZcxo=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"@Anonymous: as long as the custom types are not disposable, then there is no benefit to implementing IDisposable and clearing the list in Dispose.  \r\n\r\nThere is no chance of a memory leak; the garbage collector will work just fine.","postId":"2009_08_first-rule-of-implementing-idisposable-8d02ff03-9b62-39b3-b718-1c114cd38394","replyTo":"","date":"2010-03-30T18:40:10Z","timestamp":1269974410,"authorUserId":""},{"_id":"823a3c91-e558-3778-aa76-44b9e9973c32","authorName":"Josh Sutterfield","authorEmailEncrypted":"","authorEmailMD5":"","message":"I'm not sure about this language that equates an IDisposable with \"managed\". You came to the conclusion that the class had no managed and no unmanaged resources... what does it have then? I know MSDN refers to IDisposable members as \"managed\" resources in covering the Dispose(bool disposing) pattern, but this is inaccurate. IDisposable members MAY live in managed memory but all we know about them is they have further *unmanaged* resources so they need Dispose() themselves.  \r\n\r\nA string and a List are managed resources, they live in managed memory and are collected by GC. ","postId":"2009_08_first-rule-of-implementing-idisposable-8d02ff03-9b62-39b3-b718-1c114cd38394","replyTo":"","date":"2012-10-10T20:25:23Z","timestamp":1349900723,"authorUserId":""},{"_id":"62f03f0a-29f9-3499-947b-3ffe578c47ba","authorName":"Stephen Cleary","authorEmailEncrypted":"Ai6+Z7SVG1go+LiRoGXQy2YyJvQbiJLDRR8THWJ9Uo/tAHUpNcOVEY6urTvKHvchWqoFtuK/Tnld5qGZoGo+RIeXk90PMn4RBA6fSCJUWKVpQAMtrfZjwtPAJyCje3pYQ5Ix3+k0u1IXjlJ1PA2dG6UYiFIRZ03unrmnoCY70Xzbm+hkE0CEIZ4gH21DWNcKIzzp0K7yYj/rZIimNUHBCwE55W5DdQ1zz6pHnskg9Ss0ZG2i5ET6izqueR84SQBqsMc2Uvrehjk2YhCHogcaBiRjCQl1b1Sr0zUFypGrrN25LbgGmp9j5Aswh1sDtzQBODHonPtVC/7MqjUvW6b5VUfLddcmgiMi8J+UpoWneEMepa6KWMqqxzkjZuqo1XQ8pn6XffILXmX9wdE+xfQC8aOHJ8g9QWceOX1cR3Hk9X2W1OglKgOrnVfi4gP1d4ioHfsj5mt5kUxQ8joRAxDcCtrUiDp1Yl4YKgbIZIztDUKtQxaUhzMIKu7u5bJq41g2kAsSja/AAO9E3syCTuLXe8CiBFG8hwzgigDLMn68ffEynjSda37g7Fk0bR7pclcZ7s78piJe8FUAAmyXZjliE3iSoxpFE+GurM0sQJ17V2GuBN8b+dmfnQM3uHUOh7ZSJ5EHRBfuaJOo+O+IGhVZV2DWG/MGIBiBY24YHm5KNjI=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I agree that the language is not ideal, but one must make a distinction between IDisposables that have unmanaged resources and IDisposables that only have other IDisposables. What would you recommend?","postId":"2009_08_first-rule-of-implementing-idisposable-8d02ff03-9b62-39b3-b718-1c114cd38394","replyTo":"","date":"2012-10-11T00:18:34Z","timestamp":1349914714,"authorUserId":""},{"_id":"0254514f-ce53-3765-840b-8c4fa3f00ce0","authorName":"Unknown","authorEmailEncrypted":"","authorEmailMD5":"","message":"How do you tell when resources are involved in the class you're working with?  \r\n\r\nIs it fair to say they all involve access of a device of some kind (a network socket, file descriptor, ADO connection, etc.)? Or is there a more reliable guide rule?","postId":"2009_08_first-rule-of-implementing-idisposable-8d02ff03-9b62-39b3-b718-1c114cd38394","replyTo":"","date":"2013-06-21T22:55:24Z","timestamp":1371855324,"authorUserId":""},{"_id":"370e088b-6d81-3b0f-a007-b798f6752350","authorName":"Stephen Cleary","authorEmailEncrypted":"ZxI8D37zk5XrthePA24sk9TQkM+sUGY0P5qIBN3/bZF5Ra/lBWZ9Ih7zcqPGUzwCN1oqs/r9/FHApYYsxOCoYGC6UPcPA1n0lLRr7Gtuhi85y2NDoFNOcRGLWeySn89s0S6N/HqiTf86/EAFsBZdM2R6PQqn7Aj1JWYly4PKprzOA62+c3HLsFIBlJ0YfIiqpxj2IDj6fgQwu66Ta5utXNLrxiGG0PfYdFsKJsBmYjp0cQBAg2udmRM+Hwdj8P/sObE0s81VNYU7mAddIuH4tGGhR5Sv9U72bTZsM9BiEA+4B2Jf+j4ZgijkIDjR6Cu4Gbv76yeoUckEZks4eocOzRW7hKwP14Dpsid9p+VjqOqBFpgxYJFPuSlGtILqYtN5HWWizBBbPLMBAXaqrrJEueI+Cz3bEKmLGk5xRxt3rkCWZq3XDCFEaY007m6uUyHoZHofmB40Bp08oFUymH71q55uCmvrkBSM9z7O0x/pjdk1ErrGyGNs5NFLDb9Dsgt5GjKnGvUBZqmlK3bAC1yYabxK67ryvMKDy40tMuZ4cMhJK/N+FAygG3FhZU4YY75OxJzqddv6mIDcCrVwuwuiYxa785p4WmcL2Axm+NF5hBsKnp7l6r7nr41vJbJGiYuXFqVjx5cTySsGsnZC/SD5sozrPzFnvZduPulYk0VJDA4=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"When I use the term \"managed resources\", I mean \"managed types that implement IDisposable\". So String/List/Dictionary are not managed resources. \"Unmanaged resources\" are types that represent resources outside of the .NET runtime; usually, this is just a single IntPtr, but it could be more complex (e.g., a pair of IntPtrs, or an IntPtr with an int).  \r\n\r\nTo support the literal meaning of \"RAII\" (resource acquisition is initialization), you just have to follow the IDisposable rules on this blog. If you want to use the RAII pattern to do something *else* (e.g., take some action during Dispose other than actually freeing resources), then you can use IDisposable. These blog posts only cover using IDisposable for resource disposal; you can use IDisposable for something else if you want, too.","postId":"2009_08_first-rule-of-implementing-idisposable-8d02ff03-9b62-39b3-b718-1c114cd38394","replyTo":"","date":"2013-06-21T18:22:18Z","timestamp":1371838938,"authorUserId":""},{"_id":"435017d3-5032-3d06-81be-25c45c738b16","authorName":"Stephen Cleary","authorEmailEncrypted":"JdusAApChY5pGEVPLGc282cBd4FeX79RIhmAaSF6zLHLDs749mTm8su1O+WkKNWfXdE78PGDlrLbJbCf4lPygfmwK0DP47SuhZTZcHLNidWycGPkGwIY4fNF6spMYe+NxeyVM4F8vs+/Hw9qgwZ2NlQVZPkKfYF4pDv40U9mk/KPvf253oTRVmRQCo1GYYffH0jg8LQF25ab3aK8Fcdn7it5cCFx1tPK5khtQk+toTjuszv5unE/uFFpFTKIovvqkSacUMc2KCZwgivhcVeKZLHUeTwbgazURjZmZkVDGh+2t9Yf25csOayhEvajwuTnxLdJHqv/KbnsUuwbkADASGchEXsU8oDR2M8xur7fTkKreZ1mF/LsfCfkoG5YqQg6OI6WL6/7Ozgk8mNNF8/Ry3y/evVkHieELcvOTnk0Qx/fVfUpBKscqgg7W/oMQEgmXuXIyCLplTGC/bxOK9pOLVecS+4kniGN0DZFn+x3yLjF3qUty+Sk/a8DgIXBbnma9df/McdKAyMtqbPF0hA0UV3E6WrWnpp6jpQu26NgelerxjFCvC39YMFjdOhyVpVmtpHASk3GnETR6SsXMhz9BIert8Bcy2rCrfE1xHRSRJxPleCWo7N0M8zLzcp646Q56uAanUYY/ScLSwhg6DpcYBGx8diXWKcLCKs421Rh9AY=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"If unmanaged resources are properly wrapped in a class with a finalizer ([http://blog.stephencleary.c...](http://blog.stephencleary.com/2009/08/third-rule-of-implementing-idisposable.html) \"http://blog.stephencleary.com/2009/08/third-rule-of-implementing-idisposable.html)\"), then all resources will be eventually released, even if you never use \"using\". (However, I do recommend using \"using\" for every type that implements IDisposable, unless you know that it won't have an effect).  \r\n\r\nIf you don't have any resources (e.g., just String/List/Dictionary), then you don't need to implement IDisposable at all. That's the whole point of this blog post.  \r\n\r\nRegarding DbConnection, it is true that this class (somewhat) violates the IDisposable contract. However, it shouldn't affect you at all. So the best way to \"handle\" that scenario is to ignore it.  \r\n\r\nNote that when a program crashes or is aborted, it does not need to do any cleanup at all. The OS will take care of that.","postId":"2009_08_first-rule-of-implementing-idisposable-8d02ff03-9b62-39b3-b718-1c114cd38394","replyTo":"","date":"2013-06-21T21:36:31Z","timestamp":1371850591,"authorUserId":""},{"_id":"6cf17a36-3698-3af9-9e25-3e64270162e9","authorName":"Unknown","authorEmailEncrypted":"","authorEmailMD5":"","message":"Thanks for clarifying. I still like to use \"using\" wrappers as well wherever possible for objects that claim resources if I have any suspicion at all an uncaught exception might be thrown midway through or that the program might crash, since I can then be sure the resources will be released regardless. Are you saying that's unnecessary as long as I follow these rules?","postId":"2009_08_first-rule-of-implementing-idisposable-8d02ff03-9b62-39b3-b718-1c114cd38394","replyTo":"","date":"2013-06-21T20:39:42Z","timestamp":1371847182,"authorUserId":""},{"_id":"8666a0a7-10c9-35e6-b531-113c39cdca43","authorName":"Unknown","authorEmailEncrypted":"","authorEmailMD5":"","message":"I'm still unclear about how you know when you have unmanaged resources. If a class doesn't implement IDisposable, you might need to implement IDisposable -- or you might have managed resources like String or List that don't implement IDisposable but are managed nonetheless. So if you have one of these you're not sure about, but which has no IDisposable implementation (like, say, Dictionary), how do you tell which situation applies and whether you need an IDisposable implementation (and/or a finalizer)?","postId":"2009_08_first-rule-of-implementing-idisposable-8d02ff03-9b62-39b3-b718-1c114cd38394","replyTo":"","date":"2013-06-21T17:49:16Z","timestamp":1371836956,"authorUserId":""},{"_id":"8e215574-8cff-33b6-9fd4-437e5f81c844","authorName":"Unknown","authorEmailEncrypted":"","authorEmailMD5":"","message":"This comment has been removed by the author.","postId":"2009_08_first-rule-of-implementing-idisposable-8d02ff03-9b62-39b3-b718-1c114cd38394","replyTo":"","date":"2013-06-21T20:38:13Z","timestamp":1371847093,"authorUserId":""},{"_id":"b6957258-05f5-3ed1-a611-d359dd965335","authorName":"Unknown","authorEmailEncrypted":"","authorEmailMD5":"","message":"Also... SqlConnection objects are managed and implement IDisposable, but I can't be sure the connections will close as part of the cleanup, if they happen to be left open when the program is aborted. What's the best way to handle this scenario?","postId":"2009_08_first-rule-of-implementing-idisposable-8d02ff03-9b62-39b3-b718-1c114cd38394","replyTo":"","date":"2013-06-21T20:41:33Z","timestamp":1371847293,"authorUserId":""},{"_id":"d199d5bb-0d7d-3b0f-a3a1-711065084da9","authorName":"Unknown","authorEmailEncrypted":"","authorEmailMD5":"","message":"Also... if you want to do an RAII pattern like  \r\n\r\n using(Foo foo = new Foo() {  \r\n [...]  \r\n }  \r\n\r\nVS2010's compiler tells me your Foo class *must* be implicitly convertible to System.IDisposable and must therefore implement it, not so?","postId":"2009_08_first-rule-of-implementing-idisposable-8d02ff03-9b62-39b3-b718-1c114cd38394","replyTo":"","date":"2013-06-21T17:53:32Z","timestamp":1371837212,"authorUserId":""},{"_id":"f7c8673b-b4b2-33be-91b6-6c7f26d14edd","authorName":"Stephen Cleary","authorEmailEncrypted":"HQ5v5gz/98o0WKrEOtJX4tjayjSqYa2VJg+tFVk3zI2Z1q0n8/EVBgMNgMylv6mPdJqqrFV10VYrsPhFAyn/z2FcAcHv5OGhjCN5vhyHuwvqtrtuYtI1F7DyCyLaT/YBzyDm+G+ZqevTqF5Pg2VIWVU+7SOt3C9fHpP0n6uSrYKN3c5pAW2pIKoEZX7jhCdioMADeo7h8y3i8AebWbPF4L9/3Ya7k+ahi1FYxDnTpq2DzhdM+6eHfD75TUWG6VWQTCKTQ2JmyOgAHr22Q/wRECCIU2YMeazmLleoZK3UdQWHL5HuUtbJbmaYq0RCnUNYHka4Js6Pi7O4h2xMeUEBaCwvtAQAAl0ypL5qvgVMPntiiwzP9WXVft7kb+i8SbitW/2rexUdaYpwFck2xme9tGkNNVSAcrDfv77Hs6MOHEsP+r6WM0zAfTbJ65+kjUvVn+QHMwLuKkHCIzxvw4bdFaurb6Om8/Jil0QAyFU4ufX9+u+j1aGVZVYIzLcfPkxytaXuRnNYpeQbje3RNoIlxJH4K/t8Q4ahmb7dNIDLVj8RZrns+9ok2cZQaZoJvRFOuDDJszbOaodgLIscViEpNy7Mv2O7bkUhE/2FNU1ZHd4fF3eOWiq1r7pxm4fJtmHeVrm2qzoB9QUu5MU4wyLU9R2jWIMWuC0zu2LxksgCRFw=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"If you own unmanaged resources, you'll know it because you'll be doing P/Invoke to manipulate those resources.  \r\n\r\nIf you own managed resources, you'll know it because the type will implement IDisposable.  \r\n\r\nPerhaps you could read this again: [http://blog.stephencleary.c...](http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html \"http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html\") - every question you've asked (except SqlConnection) I've already answered in my posts. If you really want all the details you can also check out [http://blog.stephencleary.c...](http://blog.stephencleary.com/search/label/IDisposable%2FFinalizers \"http://blog.stephencleary.com/search/label/IDisposable%2FFinalizers\")","postId":"2009_08_first-rule-of-implementing-idisposable-8d02ff03-9b62-39b3-b718-1c114cd38394","replyTo":"","date":"2013-06-21T23:50:43Z","timestamp":1371858643,"authorUserId":""},{"_id":"f974e71e-32ff-35e4-af1f-14866399a965","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"Very good article, exactly what I was looking for. Thanks for enlighting me !","postId":"2009_08_first-rule-of-implementing-idisposable-8d02ff03-9b62-39b3-b718-1c114cd38394","replyTo":"","date":"2013-10-25T16:01:41Z","timestamp":1382716901,"authorUserId":""},{"_id":"640e818c-a7c4-39b4-acb1-0281a495f637","authorName":"John","authorEmailEncrypted":"oWbFD1//HpTUXrsLr1vH/F9F184IFw2EYZMRsOi91/qY1sk3WyYUBoWhi3FxgD/UAtIfMBOx+gh58heuonN1rxHmgsQbm16m97FALEmmxdiQaOLUrlNvybKw0u+5O9Ascb0ZYMJQaCZeg97XCmyyyo+usuWV5OHIDvGNascncp8nezCHG3A6Z2kZjFrEjmeswF2bSePuo1Qi7E7RaF4XHfi4Bs1EuwRQF317HHNOeGa/pUCET4h1Pfs3yN7qS53UeYheGNQgmOLcNNhZaYQnq4Ceb0uJehSRl56363GnCWtwwXC8ntiINhZULwcw7slu4oLlL7bFr9eC42Bvoh8ZGzhMGg3QtYp6OH0eQjOLtnIwroKb17A9PBJ66aXdlqf9AwOJvwPNZAf8Cm5o9xQiCc2tsNAdEY0YDAT7saPhh3I3z/6R8Qm3al7/ir5QiZyqdAyBW1C8+NiNBZEGeDHbnxpToWZ7geqIBejhSZv7P1PfFCpRd1EIH7a9w/L98KWr7zo0oi2mC9JNATbYicZxgcnTSnMtTZ0HNWQy14scbfCJA+8Il5eipD3VZ8VkNHfaUSv/wTrTA5jXSXwcBZDNSob34c+z8Hdd6JIcog0DnxcFN87CITkuMgpiZDjYOClDhdr2625Xme5SM66OhciLzp7V9eW+2vOe4/guVu5yQlM=","authorEmailMD5":"a5dd637031391fc33fd237323a8b9f35","message":"The class owns unmanaged resources.  \r\nThe class owns managed (IDisposable) resources.  \r\nI'm confused... Isn't it 100%? I mean.. always? :/","postId":"2009_08_first-rule-of-implementing-idisposable-8d02ff03-9b62-39b3-b718-1c114cd38394","replyTo":"","date":"2015-03-10T13:55:19Z","timestamp":1425995719,"authorUserId":""},{"_id":"93a21339-dd17-3be5-b258-bf0e7782ae6a","authorName":"Stephen Cleary","authorEmailEncrypted":"Kvq1iRe+5DMgyjDRHUCVHCStI7l9hWt8dLzGaQ/vBogYPdCkLsGNkzJfBMiVxFrui197X5sUM85E26rZifNwg958pKkArELu4mFaLI0+AGSFJSGw72nK+etnCzwRrTFd+SVw61RuxlCnLwNJnpy/u3w8OCMxQHajnWry8jSmagjR1DC9ODst8b5cGZKtLWzVWHGZcTXa3qkRPtOdyXAXPjjzyi0TNgiFbAXcojuiS1oj5EczCJZWZRGHRKrRA3I692Cq7GTRcmOXn75xd5w3ehGhFFh7M/eGoWbB5JgwPh3dUdjCjXRNLMKvtoeeKLoT6xXLCNGn5Qv1Jw9+GwE+nLP7g/shkUWh/KGnmo6yaXfKB0M3HyhQcMmkR1rzqSZrGeiWOoEFui7hOYAVcxMefRQiWpmhTEYrWSBSYTnJ0PEY0IdVvtUQTgJhtZuDRN7Ln3FwQ+qTlBtBpQAzTVNN0G7qX688w5ZbRpGsnOqj5cs7NAvdhLG+AImjWArVY/vh+C5yfpFgRkkzyoOChhKe/3OFxDgd5LAPvY3V1fks2Gm3zmtXZd83MrOluHnSgfe+3LSWCMBxmyNSYLtjB1nDesObK/wMsKYJza+eD9qwNeDCF0jPlQwtbjsmzrTE8BqcUxzTbZT2t2Ej6tbbHDPuHVXloGNzj15OTDg+n2zchGI=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I'm not sure what your question is. The central point of these articles is that a class should either have IDisposable resource(s), or it should have a single unmanaged resource.","postId":"2009_08_first-rule-of-implementing-idisposable-8d02ff03-9b62-39b3-b718-1c114cd38394","replyTo":"640e818c-a7c4-39b4-acb1-0281a495f637","date":"2015-03-10T17:33:18Z","timestamp":1426008798,"authorUserId":"disqus:stephen_cleary"},{"_id":"0fb93df3-480a-3ef1-ac02-aeee3fb8d870","authorName":"Mihir Kadam","authorEmailEncrypted":"RV9wQeoaH4yMQseFln/ekXGzoT8UUzzmVE0RRD+ImELDIa3bpcjoeCRCm8Z+Eh+6XK4oIi8AYaC+pZ5amNHupoxtlCs0vGqM8jcVFfLNyEPI8ABhnU3y/FJiwIxb6Hdl08toeKk8V6qdb+Zb1PpBscevFtsFyhr1QAlcc/cQDuzINyPMszvIWcWafJIM3B1AXX1QsGAWjtv1UX9/w6pY9po1lbyCylmzrXYiCMKR5YnpP9Wb2aavyuzaAEnmVi0gPOmBdv03x0cQyOXO09087qvtxJmxA7YSNovY9pyn4HNO/7ZfFe8SWtDYgqGgZbVH+c8EqeB1d/bzFFxgu0V2qzFLdHxGisgdWdOcfnNBHnxXAZAFeKZiniALqZP12N0LDivp6RsEIuNxNcalzSUw3YKaQIokUjV7WqmcmX5SLZxTVaquqeF3j3lBsSqXlzzkSm6r8ZelrfgwSrLDGYtUiB0mJh0yZHWNcU+IsivnGZdkQCWHfoIfVXrRvNAd2flkm4Ij+RuRt+em7Q7qqTzfv526U+Jk9qSB8h7H2Nw3oR13zK2GRwo519imvPeoQUcIj+zirjd8QylPgpEns/hpcbK8opfqURgmKWlEuHh2TaKg8Ibh4o8IprNFt9dh604YvPoG+PouGXfiwaf21ZYZ8gJ4m9HMKfpta23yDJrVCVA=","authorEmailMD5":"539141542396be97a6a4ba00c105381d","message":"Hi @stephen_cleary:disqus ,  \r\nMemory leak problem can be solve by IDisposable Interface ?. My windows service is connected to data base .Some time i m getting error like Unable to allocate memory from OS. This kind of problem can be solved by IDisposable Interface?","postId":"2009_08_first-rule-of-implementing-idisposable-8d02ff03-9b62-39b3-b718-1c114cd38394","replyTo":"","date":"2015-03-15T10:44:57Z","timestamp":1426416297,"authorUserId":"disqus:disqus_wYHp0weeTj"},{"_id":"48216309-f565-37f1-a840-346ea0a764b1","authorName":"Stephen Cleary","authorEmailEncrypted":"gPHZGJi36aR/e8iJyDFI1xKLCMeZ6Hi5BceYW+XOvS1+8v4b6xj9bROa/qWqEh0d7p+c1TXerpiu8DAMZlz+Eq6qLdk+eOO2U9KZi5erM28NDuIgAdXucrpRi49shXVNveMft6RHTyKXtZdbE4H7Kw7RM5pNinye7/yGXFoAI3q5q70HETKnm9DEapziTYuZUolXCCynPuyecq8ELCfwhxGn/aQdlePv38QwQPTiI/tr8IDqcAMVnkXHiysy9vUhM1oSpm0pSbAa6dpH1Bg9D2H1DXA86xsWcIB0XKP+b7ZoWNSYfnsdbac/Cg6/Bdq0GBvkCzi2t9KoANUSmhf0A+VpjYjiOgG/8ufvY+xoldGtlQEqNMDELzM/674h6omKToUyE4Rdv3z5LYOQhk/kiZfyyzdeN8mJIUz4yey3u0v1ZSDJMTOf9lSbg7GdzNHLP4xz0bXbjb2qx20gGr22oSK9i00Ax/rih7cMGYt0YJxcXQ95u/q4rtA2T/3AjXsNoxID0GHQq2Y47ivo94eT6ROawAM31CYrSg7eGwlZ1Bpn7A9BfNBnZMGsfj2qlKseE7DMoaQnfuqmNYlwvHAczSZtlrikd668LHQWcTX7NDVapPki8qaB17LG3/fKBrPvafljyWDtBIQHj7h0ZwsFukdo/RNQKmej4haIpvCoURM=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"No, IDisposable is used to free up other resources (like file handles and database connections). If you're running out of memory, it's likely due to holding references too long. Like a cache that doesn't ever flush.\r\n\r\nYour best option is to get a memory profiler for .NET, and see what it says. I've used a couple different profilers, and I prefer the ANTS memory profiler.","postId":"2009_08_first-rule-of-implementing-idisposable-8d02ff03-9b62-39b3-b718-1c114cd38394","replyTo":"0fb93df3-480a-3ef1-ac02-aeee3fb8d870","date":"2015-03-15T12:21:15Z","timestamp":1426422075,"authorUserId":"disqus:stephen_cleary"},{"_id":"ee485b64-09ea-3fa8-a61a-fbfc4b5f7440","authorName":"Anonymous","authorEmailEncrypted":"h99+ngsFIe2fZxePBNcQByJ0rGpwPuV4rsuP5n+B98jEp7MdizISxwOVOZyv7JESWLJyrmpvNhaSw//MgR3eu7u/B2cUbBUwrQpA6nbvgpsCpKHiO7xJe4z3NnjcHDDJHk5H5bJnW+aEtmG6y4RohtqtodKGT4N1i90iGbRt7oRDsAOuxt9HePz9N2pI7ZG6P1uw9Z6/CuJP3Sheqdh2FBunIPXHQd8HIIV8tPkpyU0ap/7YHyViYk+uzW1zkicC8qlEawwn1UpvcGb6475RxLoIYpQy/0rLpaFazQfF2uGmqslGH8eE3EYm+cXO1+jl6nIT+ZuyuVjPxt8QPL4BTCnyU0A2KNZDjBRdyzxt/HwJ9ntx1In0PlMZ9KoriptYnsGd52APD7FpTOlcYXuaZKEmYFSRjhFYBtC8yVCuhlwKg/6eiPzGxIiNu3zKEZH85Rk2r2TS6IxJb3suOykbqiQhDwDUsHIg/tAYQg5liQk8OjipMOH/kZkRHLuXRdwN+r/skVG4IdM55aoxltbX47KBgNV+qnTSISsR3RUmxk1s/22k+DzllaSpxNCwEYUVuKlkQOdAHsZ9YqXPgFHzQNKpgFeGEkrtpWOIYt1selA/odn2nRdnnrJWSKwH5djzFQz+3G3dbPLK7zLIqz7Op19Sr6jrSGuKrRchJ3+qqCY=","authorEmailMD5":"93942e96f5acd83e2e047ad8fe03114d","message":"That's nice, its the same with this article  \r\n[http://www.codeproject.com/...](http://www.codeproject.com/Articles/413887/Understanding-and-Implementing-IDisposable-Interfa \"http://www.codeproject.com/Articles/413887/Understanding-and-Implementing-IDisposable-Interfa\")","postId":"2009_08_first-rule-of-implementing-idisposable-8d02ff03-9b62-39b3-b718-1c114cd38394","replyTo":"2742ebfb-558b-3fd2-b73f-92c1a48939d4","date":"2016-06-08T13:30:28Z","timestamp":1465392628,"authorUserId":""}]