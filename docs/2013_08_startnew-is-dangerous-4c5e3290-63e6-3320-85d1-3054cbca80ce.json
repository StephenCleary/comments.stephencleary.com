[{"_id":"876030af-232e-30c8-bee7-e106e0fbc11f","authorName":"Alvin","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"http://www.blogger.com/profile/03892201689252059476","authorUserId":"","authorFallbackAvatar":"","message":"I am currently developing on VS 2010/.Net 4, which is not async capable.   \r\n\r\nYour explanation of \"confusing default scheduler\" explained some things for me that I ran into a while back. Thanks for sharing that.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2013-08-29T23:15:24Z","timestamp":1377818124},{"_id":"8e5e07f2-1f7c-3ca7-8e74-f2bfcd966cac","authorName":"Sriram Sakthivel","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"http://www.blogger.com/profile/14791805082342292214","authorUserId":"","authorFallbackAvatar":"","message":"Really StartNew is dangerous. Thank you stephen :)","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2013-10-03T01:47:32Z","timestamp":1380764852},{"_id":"65e7549f-c00f-3bc3-ab0f-226c92e84bea","authorName":"Clutchplate","authorEmailEncrypted":"MmHlMlHUsrYzkC+QXn45zqN3l5Jq1EieWS0ftf+3X/VcwIBI+1+VkKKcprVt/7p+2n4c0Eumv/NDUC3B44yOXulgbiq6t9NeW5WhiGBF/4zvH7qsLNTso4ZwuHB0401qbYBSHGrBONga7MhTvyyLIYWIKom5DI1kB5Q43HwDc2NkNH5Qwkh7vniJQAbXqm8w/IqFraLSF/ZKYLWn7XIsarbzk2Kto4hzIGHrbfi7OrBD5GR76Xam2syphkW5+77E2UPOi2EAUgsMsaI54GQBF356SpMdeUp3t/fNtdnhLeEizMq+cKRweWGl1XWdBcLPI77dR9kZEfY1+wvFlk4WmdvGHK9hamjo0c6F7vjCy+dCtAEt0vSCL8U1C5hjny4z5obHP+3s9nXdRKFMmiIVmY43k8oUCzcETYYvOW8RfJYxghPznQGNVGDH8BoU/8L0lZ+dwJU3eGAMM5motTkA7YDlidLXKw62jw2ho3k6SojfDEKBlShjJUMuURJCfVR0OXOHlyfVjgBtPSKroLskth3t9+h42yePKkDV/uZUtmPuJWTQfKJ7CTcQbO0ry4THZSvPUCxdQk2C3s/OVEfG2xkMZSA/4t6FYfhfarNjmMPVLedav+mS4FeO2Z0halkSLvedIy9UYIuGhdG4OcjlfWfeaZMwptq0cVtr6Vh3A+o=","authorEmailMD5":"0eb1f28f208475fed6a5a7b632847285","authorUri":"","authorUserId":"disqus:clutchplate","authorFallbackAvatar":"https://disqus.com/api/users/avatars/clutchplate.jpg","message":"I am running into an issue that I wonder whether you might be able to shed some light on. I am creating a task with StartNew() and passing in LongRunning. However, the task never runs on a background thread, always on the foreground. Do you have any idea why? What is the best way to make absolutely sure that the task runs on a backrground thread? Do I need to write my own scheduler?","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2014-06-17T17:17:44Z","timestamp":1403025464},{"_id":"a65b0b35-8205-3bfe-825c-1c1b089525a5","authorName":"Stephen Cleary","authorEmailEncrypted":"BmQTA8HJ8o0o2IM5aeFgzbitCAZIRUvfVbg8kOd+84+v9knWBoDygXKrQUmIoWneLIDscUzMEcH92GpJ1m1RALvj+ApLiJIVGgQIShSQL37bBI3Bvn0Z88RFbH8PM49gfjqYxvIm2V3E7QAYciBkRvZ9v0xGdDfXrr2JSOHiQeu6TKCigQMN3SGA9nygG/ahH2REtX/41rAD90wLr4SBqw0t6YYzMfJvxN7ZRkqTXt7chQHeSsqZt0wr24r/caJ9xQgpTVSzr+5T8ww4wy6btRJbJrxzppcx24YIiiLUu1DZR2ABvpf9fuQpy5DdDGv2RJSj/GnVPvdu8qlc8hqlOcPb4ILHJh0e9dMaJeFZdFMT80q76KEJ0Y+QGva8evzIiA1dwTXM0Lq4x+/5KA9LPEnbk7AXrraUEcF73ITYwyFxZ9EWDuL80X8farvws1b/45AqfebjFdWfvx2EoXiMvcOUhNHBua4og6nJazDclX9ovADrSd32HZFmsuwq7muqsyB6F5+8zNPsxsjnqX5OT1Me84AuNaQ1ZJKbfmY28lsGM4JkATUwWWUQrmM7X1WkBy1OiwPPwYyR5CF1Dg7TanCJc4v9X9mL32GAhZ11+rVEmzvYvgwtIHoGvd+RoqMzpTOdXxi1vRh9+AE6jW1Lw3bl/S3s28sV6JCUweVJdIo=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"If there is a current task scheduler, then StartNew will execute its task on that scheduler by default; that's one possible cause for the behavior you're seeing. The easiest way to ensure a task runs on a threadpool thread is to use Task.Run instead of StartNew.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"65e7549f-c00f-3bc3-ab0f-226c92e84bea","date":"2014-06-26T19:25:08Z","timestamp":1403810708},{"_id":"0eee5468-5f80-3677-9c58-7c1a5c44ed9d","authorName":"Santics CS","authorEmailEncrypted":"bIPgZhxPhPqpYtxe9by21CLMBS9c0iIVTFcLuAvN9LtwbHZAAO4yskUMz6w41NZlfXg01M+3ZXTQyxS+OZOD6ZwoPBNGQgL2oyQ7k4+Ps6/B3NYR3zxJy3OlS2QU5y8rziZEWKDlTvbgd5Wq2pZ9E4HTHMq2VVMb3SNRvOBDp8+7cAYfDtIhvhpsmL2AmR4q6z8dr+mexWQ9+KqM7riFBeDVOdOISFBLSFB+6B1uc7Z3gD09XhxtPSm7tz1VYNDbWrBTguoya2yg5T60hdJkH68urkfuG/UiOjHo3/VcmnIcR9Dbvl+tKB7MlqN5KvWKIezpz/cof/7fX2swaawYA4FS0dBMQVCiJiGICpH+pVDwaiEU4h1IpOwNYBlwaXKQm9LGnXtEEWP/J/zKMXqFS0Bm66LHYFeTulx3vA5WLiwfN4q3lhd/WwDCvYunPDzLb7a2MAJLe7hx4JItfue0A2wFEGSt6YKuOIZYJpIrNYExFqzjR63Si/VHSC11CdktbMfJoJY3F87FKH317DBgynhdWN3z4Gep8nv0KlkbLpDKnYs0ZMXBRb/QXNkLllctzv6ZfvG55P5UQztR4Emx6HOVFLnvNp3i+n6JMkLx4VobX7oz4zFHWI2wCtaTVX3KqDk5Y7xNT6WIlEi66wLRJlptWifX5+VIkFEIq7wvsnU=","authorEmailMD5":"4428ec33bbea616384a1eb27d83adbf7","authorUri":"","authorUserId":"disqus:santicscs","authorFallbackAvatar":"https://disqus.com/api/users/avatars/santicscs.jpg","message":"Is it possible to split a task that is already running in two? What is the best way? I'm using StartNew going 'AttachedToParent' as TaskCreationOptions parameter but can not get it to work as it should...\r\n\r\nYou see, each task executes the same procedure (with different parameters) to add objects to a list of 'BodyPaq'. Within each object 'BodyPaq' there is a price list. Each task should create a BodyPaq with certain prices.\r\n\r\nThe fact is that using StartNew as I do, are mixed in the same 'BodyPaq' prices that are generated by one and another task. I don't know if I'm explaining myself well.\r\n\r\nIs there any way to split a task asynchronously?","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2014-11-07T11:41:07Z","timestamp":1415360467},{"_id":"47ef68e4-c324-36a1-baf7-1659c3c5c288","authorName":"Stephen Cleary","authorEmailEncrypted":"BDhrP3Zi2IN31blNDHo0vmEGuU3wpGXSleqNMHZvnPSPNOu2XYELdImg13KTQONmx38suurEWrRLPhYR7YYHcLxT6pfj6R1yonQiWE2UXQ4qX3V9j9yxj0Xn5AUeE5oQO4fRW5ddMbZ96B5/RP58mOfJz6DqY5kTSuWpMZ55V27vTE+abTKpG4gwWRVChdYgJpUcWZw7BveFPBFahJMiqzbR69TPbP3IKF8+t9/YXCWdVKnblKRzeRyJb14TzbShIc7IJ0vugvrbkapAysWcFJIbjDX9T7S82dt+VTj3bAOELRIodcalb5BJfHrdYEmGlzG+m0mbQsyFel03CIGq90c/hiX4X72LiN/pH3B0MFibTRZTqBbInrz2ScwBpbPPGrW4POXU4ULlTksj9lRWg9asb+mxI+Uu497Lua4dpzKdp6MP4ycSAIzyrp3NLHh74ykWM4TkQmsytKmasEqh+fN0AhIFIHs+si1h6c9HvPKa6QdDnZ9DiG5yM6f4iJ5thFB91GizKVegYfFMLVeobxWUyib0ko3zYb8CTEuHHHnFZd5UmqnrInVKiTxb+Hv0n8xHKFrpBHamkHEayA5hUibid6LlIip9ikZnN1nf8K2ortlJmN8N3l9OtcGeSp1boUPrNUunswE/nAnokPoBjGDRwnmk2EbVA0JcZbb0nOs=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"You can't split a running task into two; I'm not entirely sure what you mean by this question.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"0eee5468-5f80-3677-9c58-7c1a5c44ed9d","date":"2014-11-11T19:20:11Z","timestamp":1415733611},{"_id":"e2017b51-c82d-3440-ad3d-c22808973a14","authorName":"Santics CS","authorEmailEncrypted":"AOfnX1AxJdI9UgU1i2wKxmMcy8mLgnkyz9pEO0j+o0awGtsLE8C/UA2tUNHr/IF3U/tjSRp66jWVsh++/Cso/epWwz1NKUvSArFeaOZnEE5dBP9qG9TmGs1xKFNqE7HrL+XW6VcNOACt2HUqNVZugWvCHqRvmORcTFhXZCnGa426zimWVHT8c/JuUQU62XgiWnS7q5xbQvzjz1PTJuuMtzrjAOKicvLiakmy9APVxZC2cP6MXWjvVCxpBPmXzY4bn2i5/galBK7ab9kLLPmvTM/tlR5I1/qr04XoBGS5qo8Y1tKb/jG1Zaqshl0GY9yuwTftXcNg+jaGWkoTXibTX12+7wfDP8q+no94vtPspDFnYGQyzSoSs9esH432EOq3/42wqfOJFgi4RmXWP38sCDiD0YrzyfuQLCvOpK1BtOWinnUC3FuqFsshZGEzIzvJOrjvYnLtNnKbeqFOmypAx5pD6aqbmIN6KTHLU/b2Vd7UGoW67/R0s6Qju0xeQv3Gtf2oHlxRKjCowTdJzN1coKcImra56J6cE72DGkRfMqhVSYG3dWnNopsz3TgDKGyBD8jeTdTav7Sqw4eOnL6VfgzJRykQ962iEfieczgco9CuhW2g6yK4LSSY9kDPGaTkbxYprpuJvzJf85RYtAZsbc40vG8TF/w5mpNhd/Mteeg=","authorEmailMD5":"4428ec33bbea616384a1eb27d83adbf7","authorUri":"","authorUserId":"disqus:santicscs","authorFallbackAvatar":"https://disqus.com/api/users/avatars/santicscs.jpg","message":"I want to launch two tasks from a current task. I know it's convoluted. Surely I will have to throw two tasks from the beginning to make it easier.\r\n\r\nThanks anyway!","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"47ef68e4-c324-36a1-baf7-1659c3c5c288","date":"2014-11-12T08:20:47Z","timestamp":1415780447},{"_id":"14c99371-7bc6-3aa9-96f5-a4edb608d287","authorName":"Santics CS","authorEmailEncrypted":"oXFBOYEC13KTO+Muw/NBZvKdCiQuP94WqibQvc0j/QdArdyknS/mzfq5I4wB8mIaNGd2NFuIjMbESVb9h9PLY4D0ipXYTR2/SNwSPlOsSV71L2CkkhwHKScCzcaVrHGCAywLqFYYZ/zmo/PThbIEBjV8fAH1onjsZA3jsos57utxMET1tD+DjQxXIf4o5DAcytHpdkds4s9JlI6thpGqfJFmQJNkrcghcL/XP5d20CAQZRVvRCyc08DUewwTMEm+Ob2TDXnezd0ELEC3OspBkK1vC4PdEgc8fb88Vs/3hbPUtlchjGHu7SWXPiSwUJofjeHit+2TxOJqsIEtpR8KyvOmuDneZ9c8De7KZyK4Cum6q6KgyCFTx4eX6HMeawZqu2VFiBXaZhfYQRXsrV8PdnqQ+G40WdfBW9pEQvtsMfWBqrWTpFE9Ym8u4R7FPlx6jGuirH17uctDj+MksxwMWyxnEKaZX2ErXinyrbTbbrqEKsrjKmPBpFNBf3m3YradxnLRRx7L5N5FIOVyY5vY4VrKK4RJ56KqBeSk6hFLeizdyNcC61Gs43j07dfBfEfDl6TvG3mFNeT7TXNittr+EdirskHmLA/uBvYikhzqDb9WM6aff0AruuBO1+7Pj3PVFMZhJKjfHvLhFGWzfY8/FzFvLOOHQLNe1kmhlAP4Tkw=","authorEmailMD5":"4428ec33bbea616384a1eb27d83adbf7","authorUri":"","authorUserId":"disqus:santicscs","authorFallbackAvatar":"https://disqus.com/api/users/avatars/santicscs.jpg","message":"Thank you so much, Tomorrow I'll try with 'Parallel.Invoke' in the office :D\r\n\r\nGreetings from Spain","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"8c2a2ddb-211a-3628-aeb7-be0eaf064ef9","date":"2014-11-13T18:54:16Z","timestamp":1415904856},{"_id":"8c2a2ddb-211a-3628-aeb7-be0eaf064ef9","authorName":"Stephen Cleary","authorEmailEncrypted":"gK/3KOE7jqst5A3I9BMpC5KcU2I6rN+uNZtDSdOO3KEJ3XNRXoi4K/mXxcvkLROiCL+BZl43f8Co0mb44emGiCfud0Ifc5po+GzITkmZLDUJWT8V7028bfDSq4d6H9+8ZzqBSKHG4gpm0z7jvYpiOcQ3fiBCMAQQgEZ5e3oLkEeDI+oVCiOBbYIcA4ZGNRCInNJBj34TaNYGqpLcfOyqkcrlpP2Sep7gPYz86ZLoqvl84XqetZLrdbsWwixdhK/1P8sabQw6+3PhGyns5huIN2P18BlLrfWU2qC2Hkjl3q4cs826f7MGZWLWpZrf4tMtEYf+QB7LMltnCbv0hBepO56C74xjAOTtcglgz/v4m/eOUAQe7GJeQxrJ+dgu7sQNSWKPmy3lBJDUDxPgErnAPRhLhZeE8FwqFPggLkB67sHNhbPWysKHdOWufzNtqci7zfTyE58qP7NJ9NadkbHYUGatpriFwMbllXLwHNE6vAtIv6SX57aUPpQhSfsWw1S8e+ndLILwyVThDijxxp/ddLC67HaQDYEqK3VB6g1ykbph1N91jaWIAdblJm3hLl9R2vBT0avfylxUvnodvGXhf9N9QyLRKVSl1eb/bjjt1Aid9VrL7ZlawLBRA6NEgWxFxNWw0oGLDUldDWlEiHm6Lbq45qNHLlWrHJMrA/jZK2Y=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"Sure, you can start two \"child\" tasks from a \"parent\" task. If the operations are asynchronous, this would be best represented as:  \r\n async Task ParentAsync()  \r\n {  \r\n Task child1 = Child1Async();  \r\n Task child2 = Child2Async();  \r\n await Task.WhenAll(child1, child2);  \r\n }\r\n\r\nIf your operations are synchronous, then you should use Parallel.Invoke or the like:  \r\n void Parent()  \r\n {  \r\n Parallel.Invoke(() => Child1(), () => Child2());  \r\n }\r\n\r\nI strongly recommend the use of Parallel for synchronous work. It is possible to use Task.Run or StartNew with AttachedToParent, but that's a whole other level of complexity.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"e2017b51-c82d-3440-ad3d-c22808973a14","date":"2014-11-13T18:38:36Z","timestamp":1415903916},{"_id":"35b829a3-fa7e-314f-988d-aeda3b3d8b1a","authorName":"tiagomargalho","authorEmailEncrypted":"IU+nzv4UU7u/n9J70eCFZ95/i+3OnOgrxmDCZSTsseXpmorGjduIxi3n5ubl5LJwtMOewAQSNDxExVEwh8kSELrnijDcmz+8RhuJa+tuqIYTCDx9V7R+PfF5Up4r/rW8jOjPlz/Rnb87stQo+zZB67Oa5wsnE5XcjS9Le1Cn0l1XmeD76BRzFciFbWjeYMT/bAUv3C4WcIUT6G7UapyR08t9VqHJC3cWJ1Yteot/0wto5VG3xgqVUh+wi7JTxMAJuhwYPcBYz+x34lprhCCM3dP8imVpPm25gB7/DFA7/+7oWY1UsRvbxaY1gX59fq887GT+BE2DfUMGA82LC+7TWjVrap4wMkJYDmc5scpK0f9poKGLxu+sqKxlqI5MXGr65jlwd7ufEBUbI131IkYPZW2ezkz8axQS7o/FmQrG4bKhe7BsgujAe4q5i7xfKDRVUC+8V4OiEM+61YQbAJcOYOaGWOw09YtGlsE8VKH7N38MZ9cBSxhLMqvyHKsMl7npDBFdHeSJDL1035N6vjm/sTpXNpUHwl12K7mvemst/KaYTg0VyD9EhVIkVhr/QiLmesJZKJJ+42H6T4GoQif1ZCjhmczZGzGJhTZZW157DrTRapqTQTu+WTj9FA7pH7J32ARb0w5Eqbno5s1V8iuFh61Uv2s/MMzoq7txmBnYfac=","authorEmailMD5":"59e75e71c30cfc730d146ec630fb89c8","authorUri":"","authorUserId":"disqus:tiagomargalho","authorFallbackAvatar":"https://disqus.com/api/users/avatars/tiagomargalho.jpg","message":"Hi Stephen\r\n\r\nCan you please explain this paragraph a bit better? \"I often see LongRunning misused in particular. In the vast majority of situations, the threadpool will adjust to any long-running task in 0.5 seconds - without the LongRunning flag. Most likely, you don’t really need it.\"\r\n\r\nAre you saying the thread pool thread will be \"promoted\" to long running, meaning it does not count towards the thread pool limit any longer (and it's not used as part of the pool)?\r\n\r\nI don't find any text mentioning this behaviour. The only related information I found was the thread injecting behaviour of the thread pool: \"The .NET thread pool has an opportunity to inject threads every time a work item completes or at 500 millisecond intervals, whichever is shorter. The thread pool uses this opportunity to try adding threads (or taking them away), guided by feedback from previous changes in the thread count. If adding threads seems to be helping throughput, the thread pool adds more; otherwise, it reduces the number of worker threads. This technique is called the hill-climbing heuristic.\" from [http://msdn.microsoft.com/en-gb/library/ff963549.aspx](http://msdn.microsoft.com/en-gb/library/ff963549.aspx)\r\n\r\nSeems like threads are not promoted to long running, but instead, the threadpool will increase the number of threads in the pool only if you get more throughput (probably applies best for I/O bound tasks).\r\n\r\nApologies if I misunderstood what you meant.\r\n\r\nThanks in advance!","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2014-12-02T09:10:12Z","timestamp":1417511412},{"_id":"76d24b9d-2085-3ac6-9bae-2923539d5808","authorName":"tiagomargalho","authorEmailEncrypted":"b2zZAhJBRqPZUEj8iitp42Jupda5HUiq+T8ZfQgXdOD44+bKkvPHCmzbKYXo1pu6uOwsoOvPh1jjtCjAFxPwahZ6Ojc59BgIGTQGJV9f/11EOfzwzajVh6q2xCo4l1yJtkrKN8KBC1Ysd+5PD1nAjr8wfU2kfPR3UvgWvK7KMvsyVGcwwE9R80biW66zJYx3rjYD7gcBmF39thQFOgF9FDXe7aHGbHKJuOqfdEt3Np23Ma66JT0KwMCGXbgPabbPhru7ZPOFv0MZa3MGut/GkabMHD4GzrsoVipjX2Tkwe5XWVXO1XR3D2XKpe5a+Cie/2BgpO2PxUQH+sOUKmFAgyMRACs8MWKTf8nhSzpT/SRTTc0RbqhFpFhAkItqnEsCcSkXxZhMuLF4CfyS3zwuAv73zdf5fd0/530GflpxhCotDmw/SGhhy7WiNnZbwFEdNv1P8Mu0mS2/HL9v3ye30oSREqgwV+9WgcF6/UGnnjlIuPiBFOeSbkHf+iCRksQGLe+FC9PB30PfGzHPes9cVrRjYOyhBibElnBAhma599LZyy4ps3QtFQA/bDjjN+ius5IkxqTxWs5ov5UyVKonv5fok4CnFfLVZUVUmgSGHBUc/qcPSaUOaUjX8LK7SrKvCxN75X1Eiu2rcI/DXJMyVSrR/4YiGdU8BLP8sptbN3g=","authorEmailMD5":"59e75e71c30cfc730d146ec630fb89c8","authorUri":"","authorUserId":"disqus:tiagomargalho","authorFallbackAvatar":"https://disqus.com/api/users/avatars/tiagomargalho.jpg","message":"Thanks for clarifying that Stephen.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"8d315410-98fe-313e-b67a-b61f732df801","date":"2014-12-02T23:01:50Z","timestamp":1417561310},{"_id":"8d315410-98fe-313e-b67a-b61f732df801","authorName":"Stephen Cleary","authorEmailEncrypted":"oj/PNErDgOAJ3n+65Fq3086RBL5Dyh+swSDOSBKOsIPeTPGol2TZDJV46r1MZv7pAnxN5NodT9ouqX13kY7VPDKqCujDPRAhilz7325mmwVRKTgWK5aWMBjqt/svHr/dSPUGz56Ex3DOmVRzhd+wWb88CkBesA3VlZBJF4xWk+2OHTGNzVtdj0FCFQz0twspb1Zlsir3eTf5WYGb2n8SNABCSeqATRndQtEuP3h5RgQrl4ADijufRI0+DjGk9TfQaaNoPRdyMTzmwo7am0eTcKCpP9uqqE/CfVBt/6q+8+VsNQDKq3QRT4rVmofOsFXEqeU8yLq/IdW0kJ6DIv53AEpHaEEX8G0dZZXHKXYSqdG7WaC1qTveHSJJgwUUnQRXnNrV0EsXhREEij7OO4eGsO87wuMVLCb/sckV620qKXjdEspj6L8YoEaOcVwaDhWDWEii7c8FlVqydjn39UvU/U0imCU53nP0CoIvCDu+yrI0kzd9D/CuL9AWoxxP/xP6Qw29OB8OGwyXW3rnp6u4ERwuYvQSlIquQT+2l7WgG/OA1sbWhZyimuM4N2nYlNmZkQ1magMx779ITzm3XamfdkkCUuGCWLLjaqD76SFbXF4ebdjdSPhNLcJo0nE2CGinRlCk9Rfi9ROvLWLZlckAiKTCJ0CfKbBtD44mrgLVKWc=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"Yes, it was the thread injection time that I was referring to. The thread still does count towards the thread pool limit and is used as part of the pool. They are not promoted to LongRunning.\r\n\r\nBut still, every single time I've seen the LongRunning flag used, it has been used incorrectly. First, LongRunning is only a hint - it does not mean that the delegate will execute on a dedicated thread, or that it will not count towards the thread pool limit - it just happens to be that way in the current implementation. To quote Stephen Toub, \"You'd typically only use LongRunning if you found through performance testing that not using it was causing long delays in the processing of other work.\"","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"35b829a3-fa7e-314f-988d-aeda3b3d8b1a","date":"2014-12-02T14:58:59Z","timestamp":1417532339},{"_id":"63b8108d-1ff1-3d1c-94ff-f7002764b530","authorName":"Micky Duncan","authorEmailEncrypted":"IEFnNOHPHJe1OuaLNhT1Y8o2/bFfBHABQ0FAQPSwvxgSVEoVREH6ZipRYo6Rtk1IIbTa/gz4da5pHhAsHsyfEqN1QfLpVSVGq8b9cofvWF7H1+xENHkiLB4UHWe+cqkCwIznoHbdY19MpNSwP8XrG0lAfjoiutKUV6AMs6pMVeeyJEAXNSS8vnKRqXN3CnmXddpW8M9QpI6uL4H/DMR3vIZ/uApK99RZg1ygLaQpTdlZs6MK8u10ltSajHyRCvddX7G4S62MjjYCZ24d8tl9io1xGnXcf4+aT85H0rP5K+YXV+48H+DWqXTarktYPtgAjOWMgwy1bzLRCC+mlxGYS8+/N/OMAhw1ryufL/NKzHkNTsxaMzEcUa8WnE16+ctzayFwa9HTxIwugs/uBE+1/4G/IiQDOUgZ0MROZxb/FBm6ZG7wDG0oQDrn+3W9mFUi6EnVjgJw2xS3yYb2lHbBy3NYqV2Lgz3RpVQKGQUHcKrsUPlDpuzfCBFh1Mefps7JtkA8Xr2MKK5MGucPMiho5O4CR+Q2TzqkFRbtM96c3wJgvT4P4gBmVXFROS5V+qXwqkT43g36hBbP/8wn2lXoMUwjN1a9cRveBAYKZJqfAAZGOnRNJdWaCzoLmz7+1pmECVUSN3/+3GwDkQXM4ivBxcuncXMsj/XtJg97fkYgFGk=","authorEmailMD5":"06a9c1741517b919426d11540c27734b","authorUri":"","authorUserId":"disqus:mickyduncan","authorFallbackAvatar":"https://disqus.com/api/users/avatars/mickyduncan.jpg","message":"Good article Stephen. Apart from async delegates, is Task.Factory.StartNew only a problem with UI applications?","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2015-02-04T07:52:14Z","timestamp":1423036334},{"_id":"a3635275-c84b-36a6-afd4-e8763ccc02aa","authorName":"Stephen Cleary","authorEmailEncrypted":"kJ9HexHyStLFOk1HVRyq+4oQoAvBSra+tDv/s4D9858sMMzcn1RZD2H5/Y8QUKqQ/NSNCe4+PvJsh9yzSRRt72gUsoGOJZdi9F7ATKQTB0nPckkluwhgN4qhdnthIJtk96OH1lcyn/fk69SFPs3fkqC1+BPdCoygpGd3z8uYTeOItPtLI1cRmagP8U84KvW+wnHyHpugrzvZdghoz8QyRnqsUb1eoUw0klZ4OxkFu2Sqmiux+zr7bKXCroG/3Ps44V72LVWfcKAw2MgPpJcbMmmSbquhs487s7dlGkTDOSwc+FaqIQA4AHK6pES+qvZo9nxpODFlT6J6MHe0uJuT0D2Kls1xF8YRxzMAlZvNV8zzsynIBumOO0OiI1xZSFCX/+SbgLnU+ZZ3LPsY3lnSkhcJJ9MMrKztU0FqNyF6on81s48QhwzZM5mnoRaoIZAeQ4mHJQ8+xLEOhV9Qi3K88V95KzTXoaJfOeU5XLEaDL8Z7paIksHfZzNbLTN7jrjiykakeA1qThSzbO/rldSMW7S0ScTk0LczQn7SDw05+jyf0Y9owxCBFh9bS+9pxbw9Wke5TkoDEsTEkN3L51RGU8q9DoX24ofl3XeArYmBJ1Qngz9wO3iQ1tpC1fyD6P7HmXLO33G1F7hrB1IcbWWo1K4gLt3AzvoIDKSb2EhZhx8=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"I first ran into the \"default TaskScheduler\" problem on a Console app using a custom TaskScheduler, but most of the time people see it with UI apps.\r\n\r\nI'm just not sure why anyone would want to use StartNew (unless they're doing dynamic task parallelism). Why type out \"Task.Factory.StartNew(A, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\" (or even \"Task.Factory.StartNew(A);\") when you can do the same thing with \"Task.Run(() => A());\". Task.Run doesn't just have safer defaults; it's also shorter and more readable.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"63b8108d-1ff1-3d1c-94ff-f7002764b530","date":"2015-02-04T13:31:52Z","timestamp":1423056712},{"_id":"e855e547-bda6-3d8c-a163-73e6b4591aed","authorName":"Micky Duncan","authorEmailEncrypted":"H/EUIEb3iFvWEmSMVrAJ8JGre1rXxz/W1vjDywNlWeJ3YPgP+WNymaSv4xt8zU/yvozNAd9kSvcSb22rLoB+L1f+Y5w3aCD9Llt9lmTnuiZqKcoazlW/KDB+zZ+tddcmHNYaRL0RirUWZ3CXPqebyzFVoAwGnaGV0rscIOUbmaP5mPRQbsatBMUK5R0Pl26mBCiW1Na1fIPobw+ToHbEdKYfkusmaoNmTmrjJjrebg9vJVSKRmKIGqE+mSKOeJJypYE6ML2rLBWTurZaWo3roUflp8Im6DVF2ajFabq8j2hL3eck1w7TuTMzHqQJDaSTgrd5s4FJC0kmfTFxR80KrFbHiRtJLHjxFUoDnye6RMvjBa6CpIhWzZ8vN944rK4sq2j7910bzbNl8dr0Rx4mVZJlCuj3TECQC05lHNTMp8JOs0Yvr/A6Cyv1S1ZL44hNF/Qw8xiwJCPKrzzzYmHqZXhhmiS8Z9UgS7JunO8OpbzgzEBoJStDY1VxkCYVDyaaUbmpEw1y/YHtcxnjbeL145MCz/gHpp61HQEpHFZpYRy0bxv8yDn3gSNdZ2iI5+vKL+RSCdkHDPoDmGuvc+336IY9xvb3vhn1VHpLj0XvtBGv25hO3ef/CoSKvT1pfyTc2HGq8IrEz9IflTkKoBL1ScS2x4rfclEELFC4MwQ2DF8=","authorEmailMD5":"06a9c1741517b919426d11540c27734b","authorUri":"","authorUserId":"disqus:mickyduncan","authorFallbackAvatar":"https://disqus.com/api/users/avatars/mickyduncan.jpg","message":"Thanks Stephen. I shall move my code over to the safer form.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"a3635275-c84b-36a6-afd4-e8763ccc02aa","date":"2015-02-04T23:21:18Z","timestamp":1423092078},{"_id":"46499f7e-9471-35e3-b0a9-1f909c304660","authorName":"Stephen Cleary","authorEmailEncrypted":"RtH5EjheKz4k9NtDqI5i1sbIWFuemnnw2ylSYcfDb48JhyaNSYM9p0EUo7TdZcTbdtDTzM8snkguMlC+rvm7gDgVxzI97xNDcpTccoJW1Ur2z7uAm5UxpIwFEQ74fdiokz9Nab2m062/5LgvI34SGHhZEx5DZD3/IJzxDX4k57i/T2lTsq+vm/g3UyzWx018yfogvCOfaFBEa8Qif8l6DDaUF9Z37wKSVCr46gQe7NaJ9PUa/rNja5mFxDJ4eeka6cAtWuP97DKOLWLGqUy24dodukwVzWX8Tby2mweJ10ejqOLaEAjeO2O+lMKUJt4i7KgC2mG/Ck+vKiNXx++inBt0wOK+s9kxcn3yFwwaxlKFuohOBY0bcSAB+6tMp1DAuoAHP8kRcdUCpCwwfP91bhqxWK3sWDrAMFHsled5dVa/GA1w/teLiCHxQXQaER1HcIByQcfCpNyfmaTw3Qx0XEU1kpdFEUb2MLZrxGE1tUKP+Y5YNyy+JtQ2l/vnYiqlpQmXHmqMxItpEz3wsvv3Fd84tknyZI/A99bEvObJzjXNAtFXbI15YemIFvMmriQWbws0asInDpG9Z0vW1boTVn1bpmRIKVtZ0OjftqvfdvJ+C0gxikMzLG4fzEje8JwQaWkbLQ/oiaBSXAcP1lZb1Xj8nfN0sOr+r+sPFaZob6s=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"No, the point of that code example is that the code is *not* explicitly scheduling the computation. Note that the computation in that code is done by A(), which is not explicitly scheduled to the UI thread. The first time the code is called, StartNew schedules A() to a thread pool thread (as the developer expected); the second time, StartNew implicitly schedules A() to the UI thread. This is not a contrived example; I've seen developers from multiple companies make this mistake many times.\r\n\r\nUnder the hood, Task.Run does not actually use Task.Factory.StartNew (you can verify this yourself with the reference source: [http://referencesource.microsoft.com/#mscorlib/system/threading/Tasks/Task.cs,89fc01f3bb88eed9](http://referencesource.microsoft.com/#mscorlib/system/threading/Tasks/Task.cs,89fc01f3bb88eed9) ). The point that Stephen Toub is making is that Task.Run is *similar* to using Task.Factory.StartNew (but with safer default behavior).\r\n\r\nAnd the central point of both his post and this one is the same: Task.Run is better than Task.Factory.StartNew.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"67b267ac-b4fe-395f-8f24-aa0c152954b9","date":"2015-02-10T21:40:43Z","timestamp":1423604443},{"_id":"67b267ac-b4fe-395f-8f24-aa0c152954b9","authorName":"H9uest","authorEmailEncrypted":"npIzoVA4ky8q0tdVg3FQEf4ewaI/4EYvTBfKa0KO6xipW2roA+TBqElPK78xpxjyJH4NUb6qx4SPUD+UyIJY7GSsfeQ+GGmFn8wOkVQZbibubouEUc9kOwknax/twDIM7XAooCwdetFlA5HE8sd+bBKxDECOzMuBtGcd4VS8GuRyPYQUcbVEnqbGja8YyCNEkMLpMGZS0sMvXGsDaREEeS72Ytu6LLRQ0G9tSToODpmM+aMrrmWWXgmD8pdq5A+5XPU15H/9md5dGW0D0UWHvK6F6Vjd0a2G0sHB7BrBHDVZiK4hk27PTEH3eF6iWtkRkkOcuVJ5NgsGArhat8114G9AZP3FOzg0A8CpGKi1wPCRkJXuYSJWrH9EOF2UtH9cQIooHqYN6xXuOBy1opj3HEcHBhB7kZGWFQ0srreDeNl8VGUygHfncs0NHVW1kHy3wuUz3UTtsoOncSNB3vxtmaHjgR5EOqJ6shBh202YbPdrygfTDaFcKuAkdhFG8dH2Z3trPje7iTfSwuLZVLyqWquIvkw4gPBzfWUwDEkO612u3yxKa75ThPdCQPv9kGaixN1wZ7T/XRDpLuPLkqLdZjMr2BircHqedK1CZCzV5sC+kqmQUnaIPT9fvM0zGihJkYRCx26KehsD+iTpZPDjXAWNB/fyAWCcsDhNHNAc07c=","authorEmailMD5":"0e3bcd72dadd8e7244b046a40e7e32e2","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"You second point for not using task isn't fair at all. In your code sample you're explicitly asking the ui thread to do the computation. You can't blame startnew for this. Also, under the hood, task run uses start new in implementation: [http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2015-02-10T19:33:05Z","timestamp":1423596785},{"_id":"48de3933-771a-34b2-95a6-4d6bde496024","authorName":"Stephen Cleary","authorEmailEncrypted":"kjvBRd96p+yN6C8r0ZPe4PDZqJBGJaaugKPRSoW7o0b7oC54PMUYQiujNwie5+fKv0xWOLhjTzsUoQSOIoWGQ5vrpqShhmoVUzCXcYB1Gb3zvWTonmjiq1XI4XmqQMCaMj1tS1litaIu8h8Hq9oFkmYeZFQvozR9q9lJOrDqZVZ24COsB7vODeUtftIX2M0E8fcFxsmkokQa6VWn9cJJe7n3Q/gy5lbCcln/843RxYeWutUmEgV/HrAgGZdldrza3DIEF6UrPVAiaaHrauh/xoLLt2GZ62goDu2e6tH+IWgjqnOPpdHyjf2LWlJqyDRgZZd1VO6fm72TF2ZaGnUn7k8yVViiC+4InYT9pV0bmDw592koQc2v5+HLXsfZDGgNP0GLIelLSC0Qb2KmATh5H4lkiWVFugcNc7SRraJ47HqegZ5HDDyq1T5JosluQEPRP2FVlBFgGVcTn2f/ZFU7SH/2bGZShKZB4fUaeTQ6+kf1PyFLVWeiIfYK1ZVy5fhh2T6ThMPz6144GYVtlBGnLKBSa/Lq47zpe8+pTLW96UM3nQRDqj0oSArJEChozHwJ98qa/88u1vy4C9DbHEJbzv1SnPAxjd7wTDQG6MJ4D0v3jDFZHza9tOzEuVt8+mjPdZAeIvEgIW3JAalFi7w6uGKa1D6145+SKBtSQaZFytc=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"1. Sorry for being literal; I do try on my blog to be literally correct without going into too many details, but I guess it went too far this time. Regarding dangerousness, I still disagree; StartNew is more dangerous because it has dangerous default values. I believe they both eventually simplify down to ThreadPool.QueueUserWorkItem (or UnsafeQueueUserWorkItem), but I'd never recommend that method either.\r\n\r\n2. Compute() is not the method that does CPU work; it's just the \"managing\" method responsible for scheduling the work and handling UI updates. A() is the method that actually does the CPU work. A() is not explicitly scheduled on the UI thread.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"c7a8aa0b-ac89-35ef-adaf-21f8bdf83573","date":"2015-02-11T18:16:31Z","timestamp":1423678591},{"_id":"c7a8aa0b-ac89-35ef-adaf-21f8bdf83573","authorName":"H9uest","authorEmailEncrypted":"bQCGkDpU2uQCH3G6nuoi33wthBcEyiSIfmpAnjlIAjvOTjvEhush2l+jR2iTyr3sPtFBHm+OMyz9cwGkP/QEJJarF+Y6y3O7nIbsMa0kra3GBL7Lj9ozsdxuHhk3hrLZzmmQfyLlEmHKh5woeSrTDmGFBDUmpP//wQUiAwcJFETldxsdhAecDytFF/JQESHhgfRA6xk1ZRtXCEvjJVDJSlULFKqui5XtRbT2dD/rOkzVdOplXT3TyZ6zMZBggcxo+TNDwAQPH9L9WGYs0zuCim5yaUjxcDx1gi0pnZUgtBjjsVIKoBa+2uQAaCJasnaUbbskygx1WqEvZej1YSmTIgHc0UHKwq8210knukFY5K5cf3DYWCzplVMO4av0t23TOJOIm7WH3r9S1Mqoxr3kkTDPFX0h1F3D+zGR4b+3ZLC0urko6xjRv2ta9G1nB5pl6LVlMmM4hcyOGgoS63UeqkODZ/WtdwEFh5WbXOLzHvMTwPeO+2tO8MO8C50kJgweQaupTCy3oVQOhebUEeFwEBboD1aJIup0J+99FFq1sP1IB34TISETLDWFbaSa5oBk6mPG9F5VBAwqlEEDrwPC0eaPGj9t8Dzn3PP3NmLUlKdyeeSrmXExNnCjGPi4yZQttWDf1iBk7PYd6eNBrcDUd0466E+MW00tNx1TUm5ku+U=","authorEmailMD5":"0e3bcd72dadd8e7244b046a40e7e32e2","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"Hey Stephen:\r\n\r\nThanks for the reply.  \r\n1,\"Under the hood, Task.Run does not actually use Task.Factory.StartNew\" --- Literally you're correct. But seriously please don't take sentenses 100% literal as a natural language processor would do. It takes fun out of idea exchange on a forum and makes it more difficult for both of us. Under the hood both of them call the InternalStartNew, which assigns work to a thread. The fundamental mechanisms for both are the same, not similar. Therefore, fundamentally, neither is more dangerous than the other. They're the same.\r\n\r\n2, \"the point of that code example is that the code is *not* explicitly scheduling the computation\". In fact I think the code sample *explicitly* tells the .net virtual machine to execute Compute(2) on the UI thread: ui is the second argument passed to ContinueWith. That being said, everything in the Action(Compute, as well as the trivial tostring) is explicitly requested to be executed on the ui thread. If there's any unintended side effects, I'd say the programmer shot himself in the feet. Not fair to blame startnew.\r\n\r\n3, \"And the central point of both his post and this one is the same: Task.Run is better than Task.Factory.StartNew\". Yes, I agree with you that in most cases where we don't actually need fine grained thread scheduling control, Task.Run is better. I can tell this is indeed the main point. Maybe it just rendered my arguments on the previous two points pointless :p","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"46499f7e-9471-35e3-b0a9-1f909c304660","date":"2015-02-11T16:46:17Z","timestamp":1423673177},{"_id":"09a1b606-718c-3b21-92d9-de04b312b2fe","authorName":"Chris Gomez","authorEmailEncrypted":"FhqZ3xgdTOhmz6kTRDZc96pwXYaAm1+AD77IKvCkFbxPW+m2PloevMqXpD6hUwh3b+IbrcBZ5flZ96c2Zz987sczyaU+ihD3PkNBOd1vea7AXqYCEet6anE+0VZvJFQ2B/fBMdi9mTay9Bz9qAZoUjZcmZGou0sNbvZpMXZav0PBWym5lbQ5IzQICGrUJfBH9qoJctZJaulU/eAdU24vMmMTHA0QV+RdU4XHY1jeASV0gydD0+fFdJsmrQ6cXl3P4ilpr1o5XTtyvjMpHulfrT2QDGmlpi6s8PpqH0kjR38w5Z4DTZsL7biAx8c04UmWOlZl8jfCkid3CWH9TpyjMHIbiH1383q9zgpFulo0A/7LDtqFQbPbVpgNaRZLqFh5ejLvUDpTJW9Y9omwJqk5DzdfeqAa1zkMKh4X+WiA3lyxtvA2r4p1yKYRxBZzjx2zADTtH6Rui/DtV9cZToe6g7V0n0Ji+Sgad+aUOcbGe2N/wDSxuYT2EkKwSdZ9iAAEnAHZnHyzKLf46KErP/1TZutiaG6lwS5HoyvHWEwuDoOu1TPUAMJiLaavuvHzNWe4hpS38SNW5ItrC/H0GdXQrlGAdwT2Tf9R2usZvVpRPcGIlkM5Tjicufit5BQt5bEMfd1GB8bu+1SaS8YKZeF1tepNEjOPDVF9HNMlkfI815E=","authorEmailMD5":"a3e218285eb020632564c99943fa3940","authorUri":"http://www.chrisgomez.com/","authorUserId":"disqus:cg_spaceshot","authorFallbackAvatar":"https://disqus.com/api/users/avatars/cg_spaceshot.jpg","message":"Another thing I am running into is folks looking for guidance on how to use Task.Run or Task.Factory.StartNew to run what is really CPU bound code, but what is really going on is they want or need to comply with a method signature that returns a Task.\r\n\r\nI know this technically doesn't apply to this article, but I think that people often land here when looking for such guidance on how to create a Task (I did).\r\n\r\nBut really I am suspecting the answer is (based on your other series, Stephen), if you are really CPU bound and must return a Task, use Task.FromResult OR look for a version of the method not expecting a task.\r\n\r\nSpecifically I am seeing a lot of code out there dealing with creating a custom MediaTypeFormatter in ASP.NET and using Task.Factory.StartNew (with default arguments) for no discernible reason other than to get a Task to return. But you can derive from BufferedMediaTypeFormatter, which has no such requirement.\r\n\r\nAm I analyzing this right? Thanks for this great technical post.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2015-04-29T12:01:43Z","timestamp":1430308903},{"_id":"df04e5d3-0c7c-3d55-8d59-e7ed11fda0ba","authorName":"Stephen Cleary","authorEmailEncrypted":"HjtbAl8TERSxDDaSnir4jbD32//KUrdA4V2cq/9XfFyDi0BUfUDN6uVz7eFNdQqToqSAGDUDQ60x+DewNaYJo9sNrHTZvwi2m0bwIA4viNiYZJ0/pPLUj5V8bqc5wXvlxWFy+TbswdWu/tebvfwvGGYloUkFuTZ+QtJHR6FE5K+1erYLYUjlBA2MK7I9LHDtssVm2CZHmn762eIqfGomoJd+0LBcfwn3peXMH1zHf9n+1URs87WVgr7ubzK7fOU0Vp8YNnvkA7TzwZLbZk+l/KxOaPLUg3yJgwR7rtD/2X/6d6jssl4Y5rsy6Ds80+nsho32dCVtdcJhQbcxaf5efe7TWHMWFnpe1pfIJ+y+QVYaJThjyDSbAHLn8G+AKPoPFeN4E+vojTppyr/psKSkVV9Mt+B66WsdO6gajmcL7Gk8ZPAOHGJwnjfDGxniNbLLNktPDTnPQuhme1G6+Ae9opCpwQr6As3+pqVtwCM2Rrw/SkTJ2n8j8eArsos6mL2q2PsM1cgiYNeGEnTAw3NqNo8n6P/onCPRGZpQH+wsRDmI159oWqa0gHS2YpcrQn4+B1+eW+0/3A24ZeuLJf3NvpGsjfC+3DjII2rk8d0QG1h0jwJVKCJ5YhxbYUWffafSKQbM1P0D+d2WnF8PqJWx3iPMJFGTMYcrEcNmLUv3dUE=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"Yes, your analysis sounds right. Task.Factory.StartNew is certainly not a good approach if you have synchronous code to run.\r\n\r\nIf you have a synchronous implementation of a method that returns a task, then you should use Task.FromResult.\r\n\r\nThis is particularly true for ASP.NET; there should almost never be a need to call Task.Run (or even worse, StartNew), certainly not in a MediaTypeFormatter class.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"09a1b606-718c-3b21-92d9-de04b312b2fe","date":"2015-04-29T12:40:40Z","timestamp":1430311240},{"_id":"488a2247-8676-3fc5-9a55-03d0906c0e28","authorName":"Stephen Cleary","authorEmailEncrypted":"BFKrQuNsYtvpJutWEajF8BdkjoF30iY7e9Ra787JkNFXRD8+XJZZtAfxu3GmAUcQpQXe6RQBZL3sE29iwV8w4Iutz+HsivEb1X+vUGuPqjUiGnEGxqJLMoKsdzyrLx3MuRmHgqDNVwWdnMresN61e7kTXJBqBg13sp8zaNW7jkk0ewA8BlGDAtOxaGHN437jQJZU0jYZpdkyPE0i2DobohaJKL15JYm1Q2wxPpZCVpYW2lPXDvZNh8Lg8M+jmwixQs+V4ltOA2+8oSO3+c+J6nAB9yoi2wybJQRYo0FA4ew8t+SOmZDtoLfOYJK3TdalW55rtfrs2T6eEYuT5M74cRPzoUymTKImCGz51gppRalPzRC8fEoOnxKfOcaiuwq4GPvg5tJpOxV2+CASY2Y6IkyorZLHy/JA6q9ZYTE3MyKdh3HghvyXlw8OuQH1AwhwGN0ORlCld61udepIozNpN8vcztPy2f1oMdepz6kzrmZOug1jq5IlC+uqL3LEzpF3zvuyUT9C5IkPJXOBAAccVUgiRmxsJmDyHi1KbDOCz9YyXe+6gV8gvB4/D9r4ZnV0zZsI57EXia9J+1aq1DUP8zrSJD1+1eyerP56rrTIsPkX9SKJXvC43I6cBcp4UHTJTZAJ9WiTc/yZRzmjHhtvyIxufc21GLUWDXmXafjytw4=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"Actually, you can use the built-in ConcurrentExclusiveSchedulerPair and specify a limit on the concurrency there, rather than using the one from the blog post. It's just my own preference is to use something that's officially part of the BCL and has thus gone through extra reviews, testing, performance analysis, etc.\r\n\r\nIn this case (using a custom TaskScheduler), I'd recommend constructing your own TaskFactory and using its StartNew. There's nothing wrong with using TaskFactory.StartNew; this blog post is only about the dangers inherent in Task.Factory.StartNew. And yes, that's a tricky distinction! :)","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"d1599327-48cf-346f-912c-bcce8716342d","date":"2015-09-28T16:39:43Z","timestamp":1443458383},{"_id":"d1599327-48cf-346f-912c-bcce8716342d","authorName":"Pelife","authorEmailEncrypted":"IlCE/AMAFjFEK7GwIlmN/0Qh5fOaweVeecoubXXJMGg5grt5kqtsneUiFFvkI/ppZBzQQpULYpvSVdRpIQiPLmBJU92Yr3lkxUclVPd61M4aTPi3zAVqCbcG1WDHXrFjSP4urYa3xyhLE2v2CRG3C6y8t9hJggCi3it2PQbmDK+flMn+EP/EgFIqEiO4jk2zQBbPQaxKjc7BT+Zhjt6TxnAvsa3/qX0yeAAOIX+9woTFOTez6+jlYRdzcjqdNUEqXbMKO6vk+U5UpReWrrKSfqEyjSOD26OJoO9I9aArwTGQIw03b6QAhnUaIn8aniYGvoMHuZQtzXz4Jr4CEDL2QdoUpxmpuM/ii2JJ6VYIBne2drwd2m6lqtOfP7O3kSIaWaD3xYfg0O5cXH8McUhEBLu3Y0/HCcc5tNPnLShXxZG3KvuATY3NwWHL/mubwDx4sLd5AlAokqxeEQjffPXZEma9IMwVuAqU40Vz3RwR8kDm5YSaMjPqZkPh9Ffl+Gndk0DcAjofVMnDzHN++PAhuQTx7PUozii/f8fXMway+cLB1auBm422/pCckg+t1fPb+bmdcR3N5KUrT9hh3A8vA9m25Zh/IhJbBB3WpxpauT47kG8tshLj2KgL2EAGHGaJFEax0clMCChn7Sk2nSQL/GZ+jrUnpjMeDLGxp1jw3uw=","authorEmailMD5":"195874aec0753f1d16a72748a887656b","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"I have an application that allows the users to create custom groupings on a grid (by dragging columns into a grouping area) and one of the columns is calculated dynamically according to items in each of the created groups.\r\n\r\nIt is a complex calculation and depending on the dataset and grouping configurations, the datagrid may need to perfom this calculation more than a thousand times.\r\n\r\nThe user may abandon the session before all of those threads finish working, and in this case I need to cancel all of then.\r\n\r\nAt first I tried to use BeginInvoke passing a callback but this created as many threads as groups created and the context switching gave me bad performance.\r\n\r\nThen I moved into StartNew with the Default Task Scheduler, but it does not allow you to control the maximum desired degree of Concurrency.\r\n\r\nThen I found one library by Microsoft that implemented a class named LimitedConcurrencyLevelTaskScheduler which allows you to specify in the constructor the maximum level of parallelism.\r\n\r\n[http://blogs.msdn.com/b/pfxteam/archive/2010/04/04/9990342.aspx](http://blogs.msdn.com/b/pfxteam/archive/2010/04/04/9990342.aspx)\r\n\r\nMaybe this is a good case to use StartNew but in case you have a better suggestion I will be glad to know.\r\n\r\nI have your book on concurrency and I really enjoy it.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2015-09-28T14:57:55Z","timestamp":1443452275},{"_id":"0efbe75a-b2fd-3aaa-a63f-698c40c45e35","authorName":"Stephen Cleary","authorEmailEncrypted":"Il8+tszAPO7bVJvsTXk/GDVnVoZWPi7+1+PZLWBftVMbAnxycWxNfOimkUuPTfBVG0pPtQcBa8PPgzkoo2VYwrFWGd0dA85iuXGpSkjCZY6318UwTZJWgJ5ptFpyGceCi2EI9cxcgKzNypB6BPQG4/57c5JDU7zHtE099brTm/vO0kkiIVgfW3u+AZfCfJfjsDyBNCKDfdtAj0QY0GwF16C0nsSpyPly0dVH3uD8mcVKcMvAQ8jnkNqzvhPXPX9YDbUAT0JrUgejTp6LsqnRJRnjD+11Y+lJWrq1kKLdQe3nTJ6oFM64cOr5oL+5e6zFDDla6lFzFx01/TAwSxSUOD4hwqAi749YUM5BL741okMDpTSr37/DBZcTwVGOMvYv8/Z+iRQYt0of4Xec5X3zD9PL8a/wji+0ie4hNOoIXvwW/mV6T+dwRjS1QBsgKAR+BcEMZZn/GXMEKb1wGSyHRYUdEOysJMbrTz2peofCnv0n3Bovod1WfZMskW1qwROYc7t/2/aR7PUKsEyAwBVlM5SgVcOUTGMU+wa44OaGtd9ryWNoHBvTasiS7HAZrm7bWge10+hOG/MrlVldCpBYUlH6FZvye5u7gdfs14IjDgZEsIzRq6xi34b/b5CEiSDt0NCuk0oBhxzO4axbVjm3Moorv/rtRC2ptOO0KkYin/k=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"In that case, I recommend using a TaskFactory instance, rather than Task.Factory.StartNew explicitly. That way, all the tricky options (like DenyChildAttach) are in just one place and you don't have to worry about them in the rest of your application.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"19384973-8045-3004-846b-69ca6a53261e","date":"2016-02-16T13:33:35Z","timestamp":1455629615},{"_id":"19384973-8045-3004-846b-69ca6a53261e","authorName":"David","authorEmailEncrypted":"ge+jAqgaHp3BrUpSq+kxjrZYMZAlYLFT/Fd4MoUCh3iXKakmIB4MIxOsuif5ZbdkkiqoTfRVsQKiojD/yEOjE67im2vJG6l+mMNfsCn5Awvr6arfb46Z84lgHf705cNHFsK/xJ9kzZkSsTZODnr84qSnQvN7vOdbKb8K0Rm16oKD9BbPKkpriXQ20uxbXhnVTGBqyf9Tb2DdQXkYredFF9tFE6mq8hVoqzbnRN3KMNLlq6y85cm6dheLif4b4BvYG+3jsgep1xvBvKyLDr8qRRN0+AQHjhwOuhnxuVD2Qre7TsmNVRQlCkSCv3kxHFTgApkhqBCVJhvrnvnMSpS7H6Vn9Ucl7LeziHT5NPXC1ADIy3Im+P7WwHV/h2w2mbh4YFe84zmkSOINZjJtEJg4zNhKNxDLIDvkGZoxcaq2JaeFB7pC2v1wX15+MT4Q9RCgSSYsoVGXhB44Z9dzGgubVQkPmD8gsIouj2bx0JdV0Ej++T377iirnolIqhXbB+IRT4X9y13JqrjFyOqjxOd1Zrb94nsHHt1BOgGb1zHGX6V8tOBJ5FjZXjXM6ul0GDRdpBjMeGHaXJZejrALDLSsPgQ9/itV04Ta7Dy52OtxXzzk7EFWHCb7yynEuzfz7vucdcVDjVy5ug7JH22eEcAQjtW/n7QdKMzRUf8ZeZWrEQo=","authorEmailMD5":"c89737d078faaf58ba7e90a29ca0c12c","authorUri":"","authorUserId":"disqus:disqus_adZ54t8EJt","authorFallbackAvatar":"","message":"I have written a report writer based on the Xps document library. The library requires that the process be run on an STA thread. The STA scheduler open sourced on Github provides this functionality leaving the UI thread responsive so I need to specify the specific task scheduler.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2016-02-16T03:09:05Z","timestamp":1455592145},{"_id":"ca6d4b22-d3b8-3edf-8169-33ad67e0bc10","authorName":"David","authorEmailEncrypted":"UwPjg8e6jVzN/boOt2b9LOef/lELWUIpMqRk+X+kWpd6cCvsuynYem9MiUi/j5mc1TVbSsXeZ9AfshXJzDGg0iaDfMhPwJZIhFnY57o2Pe5AulNmKVSDUalVv8iO24wgNX8oLB5uVFg0dzanJ71pOPRGs2lociWZ2rE+Le+h0vroXj7z/zqOC8wUpPNgpXErBpfNKJoDYGTWbjVksTc58ntmeHeBBXtew13DQnS/m7dhS+GiFAsTucDw2Nxt8lEV8MR3eShf8Hkd/AeLndyVeR1+poXav/ERbwtcsqJ8XmTEwRFjVWbcK83JliA+zL3TCI4tZZzAqv37e+U2p0jEApOX7Aq8nDnXgqoXyG2j3sawvrJySqopMlV60PkxAunckXI4AHszcKwJpfMQpfGBd+k72fxV5kI1/TxSHxb0VsWW1wMU7uWGELAFMvc8tYSspSS/sCgj98dEO+z5LSxFOUhl322aFx73UER6bRPaebfUOsffvvdun4EpUpmWCCLnlDSGMTMVB16GBJXMpEOTVXnu23ZO0X2cfQuQQbmR03Ac58wAfaDJEBVHHIpnRsPo5e88wbFZQKUdipi6SZBpVQkUfRDE3oAf9LOELEtUV2H0oEMSHrlnEFoqMWu6fO+Oc3M2kStC6XinmTyIQuJJVASBvAG91mhu5mgbrWYwbcc=","authorEmailMD5":"c89737d078faaf58ba7e90a29ca0c12c","authorUri":"","authorUserId":"disqus:disqus_adZ54t8EJt","authorFallbackAvatar":"","message":"Thanks. Have changes to TaskFactory so the additional options have now been eliminated.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"0efbe75a-b2fd-3aaa-a63f-698c40c45e35","date":"2016-02-17T02:06:48Z","timestamp":1455674808},{"_id":"4e2f02d9-3ea6-3ebb-962a-51afc8d75b71","authorName":"leftler","authorEmailEncrypted":"p+v/KC3qdaYCvioShBWHNsIsHff7rInsc3TcuUPcCN7OL/GV0R9hQ4TRTaj3i3yQcRY8ZypX76d3h8PfTTbCfbKWA2mwZrUPcMo81vJlZfXY+u0IO1pli/+RoWdMKkBIRahQF9EUqWoT7SHbYMQMz93fO9XiXyPREIRuUTsEtRu89YhiGdADss/oVv7KOhqXVfW7+YfZNmYGLqqq8Evb4oI3E/lkDsRF0P99KutaqBI+PUz+5I67XGVLlsg/9hwIv32k+HLMJAkLuEreYj4NLag0KEAvCLQAc002d4W2x2tT4j3K4tJouO+LuqeM9JVG78IHqJApNWai08NkkbQG3C9Jriag4qVZWQsaAVmfusb9KdU1WUcx74zVwtKHQLZ8JSp78KfW8eZRgJjJdwn40Bzjv9C/8VlvBAWKnQHCPX9voB9ZoYW/64upuHmy/54V+/EEFKAmdRlv1rxvnNnYVcdFW7754buPMXX5hXHRF9ISKB8kTFAEADhFbeX0iRpWSUf0EA9kX6C0VHTdRhLcBSPs0UqtNLTEUcqtB53E5PvUAjnSiJ/Hluk9zps9gxlpK8Nw3ltBDJeCF4O1HIqcxznhrBuB2AEebDUKr/aQ2LE+/FuYf66vwaMYT+pp/CJMXEsKXb6Iti7wPMFd8Qnty20JN+JvkBUOezD9LP8nc1o=","authorEmailMD5":"cdf128a0ee0cf38f0a673dbc82a74449","authorUri":"","authorUserId":"disqus:leftler","authorFallbackAvatar":"https://disqus.com/api/users/avatars/leftler.jpg","message":"Do you think you could update point 3. under the \"Why Use Task.Factory.StartNew?\" to mention TaskCreationOptions.RunContinuationsAsynchronously, I frequently point people to this article and that creation option was brought up by a person I was showing this to.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2016-03-14T21:07:06Z","timestamp":1457989626},{"_id":"622a1f39-5a14-3d2c-aa48-285f5b812bd4","authorName":"Stephen Cleary","authorEmailEncrypted":"pXaHYR4pbZ57VEOSRpcK3jKPRUXEtlJRlweunX4bPSgBH3SlM7x48dl4k7EliOgw9PKD+ZIks3TN43CEOpEqRx2oBaJGYgzfATKjKHyinnvne4g0Q13TGcvCsLMT2HrI5zjEh18F/VzUzVNU2gFgSncHPbVPnGCwUdkZZMROa67ASR4OYsCpdpnfboYYxWzgIlof0nIQKO0sgRuOHcRwWiQjTfNstqs5lnNv0Pqeof33LORY4RfNI/hiBxfwKHlyVN4aWSOE6zWKjEP6tH3+cznGBK0QFhj5hnacPxv8Zv2hh9SiHaJGARljDQ22cFBZ3eXf+Krr62wk5KXwi06CJSN+qJe/Coiv4IA9GapJq4E2PyAMP0vh0sXnaBTzRyI0QawPoRnBRoaLeCsB0D07+Z6PMQca+tvRAqTFXf9TxYJgTr1ndLHCFZCCkIpj8Xp6xfphyXKYmjj5hmSvIi+Qt9IKvGqFpsQlwb0hhPem0sNZTZa50ilOy5gWmkya0qYSu/RcAJIx40K0Xa1Apf3v6P+WAaaUFnVBWe3C++d43pTPIPQYC7np3CLcbzjvII73Np5aewuNaC9pDTEaMiENTgcCnyqaO078taKV63EoZwqmRon3I39JFZ7XPmjcnFcXx1NI8uNIzaJjdVHv7p/GksuB6OYpBFGTsn9HgPZu+t4=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"That's an interesting one. I'll update the article properly when I get a chance, but in the meantime, \"await Task.Yield();\" would have the same effect.\r\n\r\nNote that it's *very* rare to have to do this. The only time I've needed asynchronous continuations is when I was writing asynchronous coordination primitives (AsyncLock, etc), and even then I used the flag on TaskCompletionSource, never StartNew.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"4e2f02d9-3ea6-3ebb-962a-51afc8d75b71","date":"2016-03-15T13:01:09Z","timestamp":1458046869},{"_id":"313807a1-2a39-3f09-8f06-9ca0d53311ba","authorName":"usman","authorEmailEncrypted":"peA6NsQInaETzCYMeVRbbWLwMFo0t6qkezPF+mSjBc8Djin2fbDm1ixScT8/nh4po4fiJU4QamKiF3YNfu4sZLV/k7y9/dAhYrFGmYZkECRanV3DeWB/Uj6tmq7QCvQ9AXltBVUXSjszqHiAP0PWJRA4dJAOEI4iMB5Ofy0iTrhAEpHMgZmXhmAf/ZcsGhso2oYNDNUy+5AQ5Un3ObHb6YvCbZYtSosrUWMHLrk3GoqwwIYaKuTP2LQ4dkmDmDSlgwsIoQ6hZHoRdd0LKfnL0IPMKAjy/NyQKvfbtsHAQoqRYWaWuH3uVK2/uMvJ9aK6LHEM88TFZv9AIk+GUpwfDgq7ot8q6jSZNYYyy+VLeBAw1DxhkDaTBOWFhgQkne8fxOQo9pVP/2rm0P58t1qx5XaR7Z/ZRr1OPjMiCjzG+aEV+wS2sdQpsqdOUSImJ5ZPuAcRLyyU0Evze8gBOhj3YkBa72t6IdnmN8U1WpACJmvB+r7zflhiLSVTQLcfj1F6eJfAAxdGZj1qd1B30zCg4QvhmfEcZ2ENJBOwBmgonpF09FvJ77knyI2ytq7mQthurKDpjaCKygK2JLJ4L8OjBtoac1gWtXoua6mN3I7NtMyNKgqvHeUsUDz3e82Si8qDnliskeNoW4Z6LdkpHD7u39ZWLm/mRmwGPurxflZ5EAY=","authorEmailMD5":"a30f2bbefa16b5a7bfe27b74b0235bc9","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"Dear Sir,  \r\ni have a function in which a for loop is implemented with too much complex computation and for loop work for million times .i want to not run a function single time but make chunks and divide million count into lacks. and solve it with multi tasking to decrease processing time ..how can i do use sync task or async and what septs can i take to do this","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2016-05-24T06:43:08Z","timestamp":1464072188},{"_id":"9d996676-e1b2-3963-be28-449bd0052e35","authorName":"Stephen Cleary","authorEmailEncrypted":"fUoPifNRFPpVSWPLtdcoQZun9f7JTBbSOW+Tb0tkOmgILkh/EKbT8Cv3yoTaX5hMH5F3jvhtSkglbkNgRvcevy4yJYqtzc+RlZLxSWGQq4rLTQZjpHTgbC7Jzyx87kC4+dPV9wDrDO+G6bZ2iVASg927wOFMTc5nl0mm/M9StQuKGpqxVqYubtWK7E5ArF+j+SCLscgwuvOMhVN4SEmQ5d/AFyMiq52TVY3fn+l1ZxKj7MPji5zFlYbqFWFAk3joPR5AzNXevYG3U4bdEKG3G2XiaHVKX7ESluCc6a340g8sOhb0aKECDvvwDvzViyoICNOilGO4VxjBGQizztTMTrPZ7fRnKuY7wQFFsn87YJ9Fj0lYrW0FU0jcyNfnUskV9f/hQpif+pr8cEcOJJvuixm8UtP3SdpLwSxjJclVlurUZVq1jTxJy89+O6eHPM/eBKsXimdGcfYQ0nk0dMt5fWWGJX4hxoH3Uy55jxb2b/kNkPmYU6J6gaCDKGXQb4npxqb80jkrcc4K+Q/nXsR/IaBa1TEMRFGldtDNNZY62By0a5g5jCZD3Jeh8PEsnu8DedntyrsL0kLy/dogeQ9tJxmT0eLX8wLSq8oPQuS0BbwCpfwRmtQ6Ik6ZwPkmowWhgS4WrIp89eSAQ61ssewaWUPdMH6hznm6RRLBCO0/F34=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"That is not an asynchronous problem; it's a parallel problem. I recommend you look into the Parallel class or Parallel LINQ. Since you have a for loop, Parallel.For would be a good place to start.\r\n\r\nI don't cover parallelism on my blog, but it is covered in my book.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"313807a1-2a39-3f09-8f06-9ca0d53311ba","date":"2016-05-24T12:15:50Z","timestamp":1464092150},{"_id":"09fe86f7-7830-3c41-b10f-3dcee7f262d0","authorName":"Marc L","authorEmailEncrypted":"CwQzScG25N9EN4goJiE6B5GhVE2HcKyDzNeDMtyP+6kW/Qdgd7RTa0zWvKm/omHja25yy/FZ5f/oFQscwETO+M9VjdPiwM7r/8hGjGev0hFOyK/ZTRqnk7HxqSpxgP1r2Vmrsrrk8J29ejUfG2oWIAiepkG50uQsYoNtoQq+Qh3+jwzaj+PvvR7yYsNFoKAWub6fHNRXQvK2iJtB7MibZ7EMaTunq/QuzfJ61zXp5L0EJpFCwm5S2uy5BwyKNvcLwJxSTzgArinTF7nS3PaDkeKp8gyL0yLWMWhYQcy0haokME19zFLh6/Wmpf1x3xxM3KWJcFIxXvYbL3/sRB8ZHBFNef/QPdUEczdK3wMLjmnOpv/10yhyS3+fMA1ELzqsDh86E+zk680hcpWehBRwMhmSCqGdln5UfkXom2QrdFpG8O9+rOyoT9HVovzxy8HwvX+ncuK20IV1jf/mXoIKVtCfW7Yd2c7Ulf0AxXYNcKzYYNz9sx1pOJZCG2GdGBzLNE58gsQWsL4BL/WU5HwtXobdmL6UA90TYcbCYPJvwTXmgQuWonJY6/4+3Q5fgIl4rVzP5K+haYGIvB+dAPsohXepGU45siSFCfKwEEbVjEYfBac15euH0KJNrSbYT8ABiPuJy97V+7SDlHcpx+CpBJg6Kyp3eR8T1i1lzprQA18=","authorEmailMD5":"52c1ee2fa281a382362618009ecbc6d7","authorUri":"","authorUserId":"disqus:Mlewando","authorFallbackAvatar":"https://disqus.com/api/users/avatars/Mlewando.jpg","message":"Would it have been better to title this article \"StartNew Considered Harmful,\" or is that bad form at this point? Really glad to have found your work (coming through StackOverflow). This is treasure trove for software craftsmen.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2016-05-25T15:10:00Z","timestamp":1464189000},{"_id":"355e590c-01ae-3992-bad0-ea251eab2c84","authorName":"Stephen Cleary","authorEmailEncrypted":"FVnvDl9qH8aMJKYUrRtRWhABQMddYS8dXKlWilQC0pFE/98hJ5tCXefeedaBQv0r/18LiA4mzHA/1+gSoE2pat+rbDhqUX298ue7VEDOF7uo58D3hTEn9i2mh492DyPVm2FEn9X5ZXkymU6ePrDpN/8v/QH7vNOxv13m3wrqZCDILSYbkRVZXNtfgULnnAEz9mrz/vDeine5OhNLnBWiJU3zmgvEGFiFSqsTrRacl3D0Xx2YJOw+g7SPqK4EHpi6SBGfoFi06zKTKajDKhj8fqnRRAZK1vzOvag97VdC7LOmZrV3vtOXv/DtkXBT0oofaY00xBVmbH1a1++Vz0nRq2GmtwYBTLBn+w0d03TnZqv/HvvtZKRB/co/Ix3rc1gpSJfOY+fepTKHj33Mg5lJWWZCdrMt9G+RW3OG0Z7C9nZrILWEXCJe4yNryjblwJLU6sOqUExUEhmJz0wTd4zQYrf2InS46fY2jRjoRLwUZLjuhUBOTvvSKdQIP8mpf35JEYvidCg3XSeUAIDT/vaAG5SD5uWtt5E1/Kcueaf1vsXfXDT9fI4iDIB304FNIbUFnK7PUBGhYmlDOv9KuPHEMzhCo8+uCa+fWRlHK9DKuJbLCM/8C1OkncHF1/Mj0aMjsZwbNdXVpKOAdTmalv8AjZ3DUnw8XXTXlbHjcIqyhqU=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"I do seem to recall reading a blog post \"x Considered Harmful Considered Harmful\", which was rather amusing. :)\r\n\r\nPerhaps in this particular case, Harmful would be a bit strong, because StartNew *does* have a use case. Unfortunately, easily 99% of uses do not fall into that use case...","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"09fe86f7-7830-3c41-b10f-3dcee7f262d0","date":"2016-05-25T18:04:57Z","timestamp":1464199497},{"_id":"9c99d7ce-0469-3e3e-ace3-72356d9036a1","authorName":"Stephen Cleary","authorEmailEncrypted":"SzA9OzuTLp0RfONowlMuyKuk9+oBLvnL2SHFd5fOYMRT/73uuVs+2tA1FSpuKwcUaCtWFruAAjmZLKkIZQjiMlbpkcwyWvrTs72AwjWekTdAtOpMxPIMnCzP2VPtAaTBp2Upp1KJB/EsbtoaYPMRJHzpd7g38aQEytA0XP28OJ7K99dBuBfUBdthSsZhH5SUwRS0OJx3y2qalo1RM16SfMHIsiLF8TUW8lwYWMYu7K9ghS1/Djl8W9whScNiEoCSdEtzRCeH8UvYH0oxdDh2griX0kC1l0c3b1X+Z1KAVuQ9ip62/HZlY+B2rbN/m4jkn5bAH0C2YoBWZE6SVkvdeYDdCPiZBMZM1ODZiZqsDmvss//iMFn5NMlWIcAhpA9GPzWOmCOaFJqWu8S6C4YrixENXKZsxYHiLOsDvf0ZIYb+teqjPqUh7EBUwR69yu7+vtRRm1XryBnr2Jsub25Pde5+Z+x5fAe/G38L52ph5IcGmY8BT4yZYxMzJ6ALxUxrScI3k9oU+DSnPf683MuxTUHaJ3DadUtRpV7MjS08sLdnibXMXaDG5RGhyiUEDGSZ8JUbMC/LdYvBe55cqIPNNEVUY/hu1rlNclxk3EsFn0ws9O6JsSgRjHKK7+zLNDba+UPp53qZgOAfELyP9BImmsdqhFIx6/GVwrG3XM7DSYY=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"The use case for StartNew is tiny, and I do address it in this article. In a callout, in fact: \"the context of this discussion is async code. If you’re writing parallel code (e.g., dynamic task-based parallelism), then StartNew is the tool you want to use.\"\r\n\r\nHowever, this use case is incredibly diluted:  \r\n- The vast majority of concurrency is async, not parallel (and thus should use async).  \r\n- The vast, vast majority of parallel work is data parallelism (and thus should use Parallel / Parallel LINQ).  \r\n- Some of the remaining parallel work is static task-based parallelism (and thus should use Parallel.Invoke).  \r\n- The remaining use cases are dynamic task-based parallelism (and thus should use StartNew).\r\n\r\nSo, if you have a situation where it's amenable to parallelism (i.e., CPU-bound work that is capable of being broken into multiple CPU-bound pieces), and the number of those pieces is not known at the time the work starts, and each piece of work can start any number of other pieces of work, *then* you have dynamic task-based parallelism, and StartNew is an acceptable API. For *all* other situations better approaches exist.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"efd5d3ad-a9f8-3ea1-ac0d-d5bf54af2eaf","date":"2016-06-09T12:08:02Z","timestamp":1465474082},{"_id":"efd5d3ad-a9f8-3ea1-ac0d-d5bf54af2eaf","authorName":"Lawrence Thurman","authorEmailEncrypted":"LliStuYbNFUSDLudhohJPEjA4wDpQCP0WB1OI7MY61cPx9q7bvTIuFD3quX2KE9h5tzJ8Xcp/GYoK9yAhfDZftzw3s2daQdSnvF47BhDOD3aQhWfVwHvchlIIF/5QegT39cC950a+NtrkheI+JNRKQ8iTNUkOYOsDOWywcHZa5NbekowWR2N8Y5exQlJ1irHKHc+3J3z11P7TA55EHOFga+JK9FYjYDwEEjgBq5X7MxKjfbmm4kcG77K5ancelxFt6fXLr6b1HUp+aGnfbuzw43341LAn4c1h7fajUJND+qZLDJoh/6xMuXP2Au7UVdqRzsmW6xF6mO287dSsE2vSvCkIbLFllWT3p8vq/qq5cTg8gvgZ9vMpasaY6q07yUWUVe2UwBZgwYNe/3IodA3WtpIrICpw8+7E/tGbV1hopJKWcj8ASkzGD6YEWnIWIzExhYbzF0FtrXdw92khW2+4l6WPjjGU2Z7PJwIYLyK0vNb8RKb1dbQU/0hEVFTt4MR3f8vAGGvTRlhHqfeEFTJDY23AYrunM095mdCs+Iy65IhPKaIYY5xiolMCKwCx6ha6saTXviZD7x/EMtPufjk+AJ39zHUAKpjGpcpvYhYkWe2ow2AsP5XYjAXVfj7zCFQfI1Vxo7Jgx/gUQOHQNNmfRtyvcnymMbJyLCyW/IydAY=","authorEmailMD5":"20673212ddd02bfbc7be2f0ac6ca776d","authorUri":"","authorUserId":"disqus:lawrencethurman","authorFallbackAvatar":"https://disqus.com/api/users/avatars/lawrencethurman.jpg","message":"I have just found your blog and do like it. I just wish you would go deeper into a real life situation. For instance, not putting everything into a single method. I understand that you do this for simplicity, but at times it make things more confusing. Anyway the reason for this comment. StartNew I agree is not good for async/await, however for parallelism I have found it to be wonderful, especially for data calls. For StartNew is dangerous???? maybe StartNew is dangerous for async/await would be better","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2016-06-09T11:05:58Z","timestamp":1465470358},{"_id":"2acd6063-f7fb-3482-89c5-63b0a87628bd","authorName":"Craig Brunetti","authorEmailEncrypted":"Gee3mdvoBlK/Ez2W94nytGRlPWZkd5VFZpNini55YVPTnvtH7qSxC7BquDVWaa135W+Y4q5HyRplde1y/bQE/ublgp6p/GspDVw+QnKxYSWiYiLrg0XgjnjQLHNcI8mjDmKfxOMmYlJgJiRi3XvhgsUP1/XeNQOAx2FG/WOKXReSF9Td+49q13hPJU36R1YVmgB+0S6mws/KgSMFGTlIA3CFIojHiQo+edk+VIOxCkKqqeYckKuRw3gX7qCHxmyp3xgQ/NQqmo87ch6rNTosvhZ6epi33ICRxnHcee4AuxEcU1sahpPBvneuUI6yVBFMZTFF6Vo2my0w0nYHbFGGV7xT1ZpXTILsG48sYTBvNyM9AEtWDEttWTj9PVWm55lCYXAsjFttqPOavNJGuLZSu42G1EabB1ByV87qCqk7BS/oBDzalBAWgz5cq0CuZ89kr7/OLHlGjulVAqzxTosXiI0dtbPbGIGcHMDX7hqPWfYZSlcoCLyJOAMkJCYI0WwBZp7FJ+rOJzASomkY+x9nAYhU+FKGtdPcEVdSi3PZ1WmRxQHqZ6X00S2plYT3Wo+nNcHxypUZ6aFGXrgwd40YpK7dOnSKRyqtDMwHLunOJvZkqDHW3bLHc+axiSV4cVlwJhIlFf7zDueESNzicRgdPiL9CuWfJ9loG0AnIsO3few=","authorEmailMD5":"a0c658c500db456bbd691d6ed64b6d4f","authorUri":"","authorUserId":"disqus:craigbrunetti","authorFallbackAvatar":"","message":"I've just run across this blog, and I couldn't believe it with my own eyes, so I tried it out... and, well, wow. But, it still smelled funny... H9uest's objections may not have gotten specific enough to defend his position, but perhaps I can add to the mix...\r\n\r\nStartNew respects TaskSchedulers, one of the reasons it's more complex than a simple Run(). So, fine Run is more simple, but it's not \"better\", because StartNew isn't dangerous. What's dangerous is a code example that pretends that a Forms UI thread should be considered participant in TaskScheduler (which is the assumption leading people to use .FromCurrentSynchronizationContext as a Continuation's scheduler).\r\n\r\nWhen that method is called, it makes a brand new TaskScheduler, from scratch, that represents little but a synchronization back to the current Thread:\r\n\r\n[http://referencesource.microsoft.com/#mscorlib/system/threading/synchronizationcontext.cs,826929a6f7e9421f,references](http://referencesource.microsoft.com/#mscorlib/system/threading/synchronizationcontext.cs,826929a6f7e9421f,references)\r\n\r\nSo, in essence, in order to appease a desire to hand something TaskScheduler-like to a continuation in order to get back to the UI thread, we find one and pass it. But you're tricking out the Task system, by simply asking/passing that new TaskScheduler (called a SynchronizationContextTaskScheduler), you're now setting up StartNew to fail, telling it to use favor your scheduler over its own simply because you want code to go back to *a particular thread*.\r\n\r\nThis is what smells funny to me. StartNew is being considered dangerous on the grounds of code that tries to return to the UI thread is an off way. That seems entirely unfair... because the call to update .Text should have been specifically dispatched back to the UI thread directly, not done through the Task system (and then the next call to Compute should not have... though that's another problem entirely, a .Run should have been invoked from the Click event handler for something supposedly so expensive).\r\n\r\nI believe this will happen with any thread that's not being managed by the default TaskScheduler (of which the UI thread is one). So sure, be careful, but it's better to understand that the UI thread is a different beast entirely.\r\n\r\nSo, all in all, though I agree that Task.Run is easier, its simplicity removes possibilities and depends on instantiating these SynchronizationContextTaskScheduler objects for no good reason... it's waste in comparison to a Dispatch. When every tool has its purpose, one should realize that bad information can cause bad results.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"c7a8aa0b-ac89-35ef-adaf-21f8bdf83573","date":"2016-07-08T19:35:08Z","timestamp":1468006508},{"_id":"d588b275-2448-3402-b9a7-ba0234100d6f","authorName":"Stephen Cleary","authorEmailEncrypted":"P3ooUByrXkRNge4rgKtdy7yh3sZ5WeKMAKRIzmeflcVJLLxiW7u86Z7CvlpwcFdSym6VwXO0wt2XtRfZBzda+nGZGc3KhBFI3fInjEl+0G3WUOMDlaz0iZn7WN5ziqF92eKL7+7V20VK7de0Et1VMBQ9dhoBPwadcER5WCJmlQPgQCwyGXsIXNIf9uSB1St3op1V+YSqF0uorW+niMB7HFvXP75YZPGg4eoZoZYVOrtT0WtjSuu3PvVV1dt7XzOTbaRuLgyDqmwWPkRv0uZdfIXffKYZadV1RRi19rFYkc+AGqF/hfbkxukdzKrAJCWVTLh/6l4l0Q55ne7tqcKohuWV/en3QdTktlY3MEXLvCDTaaommnbwceFeX6BwD8bVN0MQUXNs9MkIfcmVlKys4fDTOweln4AsfQOmUNS7Jy9snCSAu4KqFwNJ/8b2OSev+zyXBjpv08BOgNOfCazckK9+1y64NlZrwjAKXD3xWzLMmuJL9QTEzlqob18PElXred2XthxfTc7CoQyNJwee8jUX48nePgmOWW8pnQm0ZXznYLTOibDqfZgTALHOtTKcbTZBZqE/CZcflSKCIAll0EvFf4F2hQ6CYw/MtWlyqgl0qSkt9P1uVjKfz4Sey0TwyubMjzcxoiQoNjC5jfphs25T1ldBVfD/lD7XqNHfGH4=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"It's not just UI schedulers that cause this; it's any usage of StartNew/ContinueWith when there could be an unexpected ambient scheduler. I did run into this with a UI scheduler many years ago, and I've answered a few SO questions where others did the exact same thing with a UI scheduler (so it's not just me :)\r\n\r\nBut even without UI schedulers, I've seen smart programmers run into problems with the ambient scheduler. I've seen it happen in code using the ConcurrentExclusiveSchedulerPair, as well as the old StaScheduler from TPL Extras. The ambient-scheduler semantics are so tricky that I'm aware of multiple code shops that wrote their own code analysis rules so developers *have* to pass an explicit scheduler. Which I think is a great idea.\r\n\r\nSorry, but I've seen enough people bit by this that my opinion is still that the StartNew/ContinueWith overloads without a TaskScheduler cause developers to fall into the pit of failure, rather than the pit of success.\r\n\r\nNow, if you're using StartNew/ContinueWith for dynamic task-based parallelism, then sure, go right ahead. I haven't written anything against that usage (I still always recommend an explicit TaskScheduler, though). I guess you could say that StartNew is dangerous like a chainsaw is dangerous. But if you need a chainsaw, then you just have to learn how to use one safely.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"2acd6063-f7fb-3482-89c5-63b0a87628bd","date":"2016-07-09T01:58:35Z","timestamp":1468029515},{"_id":"61894417-ded4-3cc6-ba87-f188536c6d43","authorName":"Stephen Cleary","authorEmailEncrypted":"meRia1kU4DX/1ygEtGjm0LTSvzy7uxOLC2+y8t/2amJnX8rSfKmeZ7I6AP5/ywJOTWHmKFOOS0YzieFkkTueYbuZMUxI99XS1a3zj49oX7f4IdiBSVElz8429wduNem6zVlnMkMt43vFCvpkMz/pWYMvjOMzeBg7s4JjuXitn1mk0m3dk7xtjGwDiTqvoLAc5uKhGWsxu1mGgKXM5yHhXW80TWYcUXSVcEv2XKoaLNFb2d0mjSSiOGRIZwbdeuhAUnSopst8tFOWDoqRDzx1L7I0Hyb9Xrt+/3MPiFXGatsuvcVIFRN9FeQ7WMBva402enzjnWaMl9LyNV8LhJQ/0cD2MvwfaSJn00vN/tv+7wULzsShEadsMU1PYPPtCIMF7UWfYDmI3RB6NOJmU93sRR2JGKvWqLKBlBR83Rd2IUZurHSItQY/FaAvM8T8J9fy3Ai5RCMlZl14kspYgx0MsWs7uCfrVadhKlexDtMGkt7O/0lH2uP+3fXsiimvhm3jzmho7cxqf1pzT24ZvAYbZWt37gHc4gMZ5HD8oiMNXcwq68Qg9wUSUB0hfQxrph8vsLWOfnPCFnMhKygyNv1idrp/HSPtTDZ7rBEQsoQW0tTITdR7Igr0JkOT5r+JyGjd3cUlWKFVYuDpGxdK+z0P1HSOSV32btT/CTj1oXEpfUQ=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"That would be possible if DoSomething returns a Task that is eventually cancelled. In that case, it's not a \"problem\" with Task.Run; it's working properly. StartNew would just be ignoring the cancellation.\r\n\r\nOn a side note, you should use await instead of ContinueWith. If you use Task.Run with await, then the code would be clearer.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"d38954ec-2c27-3f54-9071-7f316db7b74f","date":"2016-11-15T14:06:51Z","timestamp":1479218811},{"_id":"d38954ec-2c27-3f54-9071-7f316db7b74f","authorName":"Milad Amirzadeh","authorEmailEncrypted":"eDdnBdN5KjW9VQAabEB4R5hfIINbzGr+9CyfeHt5LsYo+kJHUr/W3ckuL8U7UiBJ0a/MXeOJjj7kzEf3I6Jza3BNICl62hIgxQFRXf+Ao340MPKYNn7DYdMmdedTzQSu2GrlbGTQuIeSG71YcOg+cEEvy6vNp6Crvgk2g0bu59GzkMTfO4YXjCNnRRwirA7VOLuYVrvUGlxAtiNdhgRAXtqdwzKDLMssDilu/Vk57S2WdYPzqbqj6BvH62nh8aJrAn11T7HEjfgTLgdpV4NcE/C23FHFnYUTH1x2XiVXgMTemFBjeLfsMVzMC8IduSPInB10f2uBsow5xqhrWYobZlFTlYkV5G1yfrbSFZzrGOUS5fpAWBBtwrMttHoAP8P3xiaxnP+kmIBxcDbwV8t14mDbuZxt9epvQL8xc0Iek8PB/5MF8ez0TuCUtWyaRqo7W53vI9qs1QEfei442ARyFLu+Tr9UcF+Myn5tSYzybduQCKsqlBpcdqY66oOI+83ZAKrNo+cvrUyB0rwswLfM8K6NVO294mVD4vov6Rn/lU3tjgvKuUOFwg+D8j/Wefk+96WFSnuwDViqoLa+JkESCej7uq3PmNVeVeF02sQRWU8XVbFvYY6syfDC3sHPM073E6ItsFOj819KUfZJMneJfaHG0UN8Vzsu2r+qtX3Rcg4=","authorEmailMD5":"587fdbd7e35e921ce6304fe60640623a","authorUri":"","authorUserId":"disqus:milad_amirzadeh","authorFallbackAvatar":"","message":"Thanks for the article. I might be late but I appreciate if you look at a problem I have with Task.Run. I have these lines of codes:\r\n\r\nTask.Run(()=>DoSomething()).ContinueWith(t=>Log.Error(t,\"Error\"),TaskContinuationOptions.OnlyOnFaulted);  \r\nTask.Factory.StartNew(()=>DoSomething()).ContinueWith(t=>Log.Error(t,\"Error\"),TaskContinuationOptions.OnlyOnFaulted);\r\n\r\nAfter a successful run of DoSomething() the first line(Task.Run) throws a TaskCanceledException while Task.Factory.StartNew works fine.\r\n\r\nThanks for your time.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2016-11-15T11:18:05Z","timestamp":1479208685},{"_id":"8e318159-0917-38c0-a8fa-62de2c770d7a","authorName":"Milad Amirzadeh","authorEmailEncrypted":"k7gSkwt/dxCMTK4RlVJxLKAShyxQ47omca8LdgHCtj4fnLFUCqla6UalPcPl6H0ZLzwHty6t9M5Fy1CePXX0QZu76LEtVt678XJQ+HJuClGhzQUyknblra19hSFewipkp+sd6Cjh42PbUqVJBbLoSWZW8R3H077voFD9iz2aN1l9QMj49e9NKeYnHQrrw+L92LKKLLAxskvqJMvtXUTqvjxxDZOAMGun2ycyc9rJavdsQ/tFvC2FysSRMs1HeAMZfdpk5mSvfuWjDiMZGlhe57uNyKwvplvo+derFZsdN0+NOlJCml0SXkYBCJ6qqX54WTgMhkh8RH5wrznOcPTQ49u8b7JEks8etIAiQzA/xRB+FJ6+uNBe0am4xc6bjDF7k1nsSgJkQ4KG/S5lL4ZwRyFKsEbnMjjgbR+13YJdddWs6WPSVjvcTrIwET8989qkbyJtvESEZtuR2uTF+tJLPwKtKRdLSYiYguRsBwZh03JvUYYDcuwhp0C76oE5AzVliA8/i7AXSAT0X9cnQQaq6BfFVqHVgQWtnKXZOK+GorycgtvodEkwWtZXtwyQRmd9WZFRbbYMSCer5CuKP8g2cy5Q7eWL6ryX2bK3+bn3jBw7+eN7YRBb9A58ugrecmt2bgHH5rYV6dmQvwxREaMldl06w5uX67Srt9S4gWtRlkw=","authorEmailMD5":"587fdbd7e35e921ce6304fe60640623a","authorUri":"","authorUserId":"disqus:milad_amirzadeh","authorFallbackAvatar":"","message":"Thank you so much.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"61894417-ded4-3cc6-ba87-f188536c6d43","date":"2017-01-02T12:51:20Z","timestamp":1483361480},{"_id":"05c6b04d-c681-3b38-82b7-7c2a70eb4dc4","authorName":"Andrew Francis","authorEmailEncrypted":"ivIXGsZzdmUw4JiuUO+EJr3XmZ18z/rmUAik5O6w/tGUQuDQtTxRl+jrlETSUI6SeBXD67B9+JR/OFynjA/rFybv7aWtHAXiVNlwpZo19xjHgT3L9BFVBQGZX8BlADSOA82jppKNdHqfQI7xa+LbkOtd9eavlngdClArSan7nNUuTkbzpUUyFtjzXuknlW3vVvR9Ajlmf+QzTJ1y3uNnbD/Tb8CKa7EuGrEfZl6E+5U47SuIWIu/DjyXJea/DTSe9DZgphTqkOKSh/+IMqimGZhVD8DEfxh7yoKaZzAn1Hf5+h3xwP0RX4qQA5UwBW4G1QrTuCxGL7trVGYVt+rRN8eZfbIXqjOFuK3xORzgF+7tB31coUcq+DPSTLsZ9IhKOoG3znNKt4q12soSSdNyKJShD8me/RKZfomXdvFvl6CNXzbdWKvX1X7jWT1u6hMQlG8X/Xg9ZndYVAYEw96P5ALnwHmvyWicrBuH+cT+XXNS+2J3aF6OIQHNhi3JDOzrrMyDNmK6fI+bD+324/0JOmzmPXEh5x5/MZ83LugXThryzAKDyudO65zvcWSE8QG9tbnUSJdbHmKZYV2r/T+riqSU9z/7uYb91HFEcVkZV2ZpAC9/lMUp0gcQbUqChaH5JN9D8Gd46uQS0l9ju0P+gu1D1PcNMP3kApVmXcU2FB0=","authorEmailMD5":"cd5672ed264d2747b735327eb78567e4","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"Aww yeah, it makes sense now. Thanks for always being there!","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"c01365a5-e3b0-3a35-a88e-f220572c02d0","date":"2017-01-10T15:45:07Z","timestamp":1484063107},{"_id":"5b8e4a90-26e5-34d0-a936-28e7f8cf481d","authorName":"Andrew Francis","authorEmailEncrypted":"aNG/DbA8vft7VVMXVQoLppebZQY0ZHBDqXGKA3621eW8Di5QdNMR+UGtuSISCRuMIzb0+1TQVAzBcRUiwJ0afDiY8FYl7I9dHnA6EdfmCCbGnD6hgaDGZvj9Z/1/aWR1d1Yz+7f+dM+9snBOsjC6TE4Wjkzo9RBN+3R0if3tjvfLwvrHxaDOrEgQiN1SKgGYM3u+tSaAZi6A1CN55ou4i+xEcRQ60Z//EMCRS+8kGs+jH3ve0uSswnPm7R8a0LC4n+HIRenRkEdxRcIUt28EckghELYmlw5RDHsgxT6TQiMfl5oo7cZla5GNfHWJs8RoF0kosdX2J94Nv8Z606IjRFShnUJn2DrM/tV9HvE9ZZbmWBMyozoJIhubXVrBevWT76p3nGBWwGhaUAjo7gprie+pZXovXJrw1pmxZAx2YifH+CSmBdiuEMw03+0WEHjnHrXwvYhi9qUvodXMDZqMwjIwqmx5Y0rrv7CixjNqYksuR/jbC2+7xUGRbNmqLTbfo5pYS8P9dSDaf0SdxE+gcobvZ9GL4PetOBOU5QjDw1G4cTgni1CkwQIv1SvhBiT6NUXT9zSVgH3obmQht1f3802kviTvWaqeJ2BWhlEIuZLsXAGRzql7/NBQ7qTMT3xe9Vacq822JiJREFfWm84E/UbqG2S4bCcFnDf2lUU+bAg=","authorEmailMD5":"cd5672ed264d2747b735327eb78567e4","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"Hi Stephen, how come when I try this on WebApi I get a new thread from the thread pool every time? Am I missing something?\r\n\r\n[https://gist.github.com/anonymous/128df0ebbf01e1ffa8bccf2c0843b9d5](https://gist.github.com/anonymous/128df0ebbf01e1ffa8bccf2c0843b9d5)","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2017-01-10T00:06:52Z","timestamp":1484006812},{"_id":"c01365a5-e3b0-3a35-a88e-f220572c02d0","authorName":"Stephen Cleary","authorEmailEncrypted":"KZQeThyj7DkWhIzOayDjt2KkblS0p5NPTIJ1eQSsFINGRRYO7EOpK8bmreoGPNTqOgQvY3zaD6OTbgKzTGkKReZs7K/xB5pOJFJz8UsoEbZmu5PMm7fbUAZojapx2Zqbxc7RgBADhKg3aTHZFpi5HH24bDR4TeQC48OdS+Ac6ZwaVfTCpAREwPX7ZrKMPj8XmmEozJfvyc0OznmMR3e9V+0J/o7dQDTGpMg2zUMVQsJVgSxwh3ziqOsy8aVMxEEWZNWsCUOGTxt9BTbPXF9kECHNqSdBNhmgi5S7HTXcFRtUpQvXgpM4K86XEPB/I05xuAJ9up5HZ2VAqtwvzQwmnauWkFDwdNjtuVqA/sbeeyFXIQxV4esWDzM8bUGMhkvyTz0zmDif0Nl0n7QIaE5jU8kQ2xZNMx9Yonzw24Vr7J+HtT1xOja+m9LyApSLcewE4XHXkpCPuttZLKEn9+PUCN4H/RPAReWrN5ToUjeb/gND7rc1p1yUPLWHQeRhaJH0ZxwNh5al2kNYtSLA9WgehjjhE6twcNfmgOO9KQWB88iqjeYGZH49jIX1l+xnC3vmrrgCzyjHIl+peA1iFZwvtvy/LjlvhzY5xiHycCHXyDpxzBA4KXjNaTCtKlCxIXKzyu3rPFX0rz/BihNPuq04cpzPkZSHtZrs/vKLLs39T8Q=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"You're getting thread pool threads there because there's no current `TaskScheduler`. There's no benefit to using StartNew even in that case, though - Task.Run is shorter and has better defaults for the other arguments.\r\n\r\nIn production code, you would not want to use parallelism on a public-facing server; it could easily kill your scalability. This is true whether it's StartNew or Task.Run.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"5b8e4a90-26e5-34d0-a936-28e7f8cf481d","date":"2017-01-10T14:13:12Z","timestamp":1484057592},{"_id":"7584cd69-a03e-3a9b-91e7-898cbbcc2323","authorName":"gökhan","authorEmailEncrypted":"frW8rYIiWPCT2dFt1Y6PiXD4oET1q7M59juwrfmp/iNWCHQzXy7yGPVY2rnJIERVQw6DetVhxsxwox/BQlfXidZapOwBWnUam7CPfMzD8ikLHBhWuJj0MWvXC91o7qQ9fITnh7L4fHIZFDHIGx/mz67DsiVOBYTPFSj+njgHmt9rbbZqaLvkj6WtXhBaykHcmkRIc+OExzTLqFi98UNM+rlYgTji4bdBDI0h/dbX++W/DNH0ucbfO3GiJmTu3CL9YwKqqtaC9+q2aIJVU/aaXBLS0drqN9CE/TFiFi3qggYydAoE/cgq7xYK4ptlBj+nQrc5YPFptVNsI6c9fcnr3C4NWoxbyuSO2JTXKwPntiB+RYR5P9zbg3GO/1qUbpv75PpHUJqNUYXyzoKTX7L1c5uh/g+KtrkENu7dXsLagjg8yFqb4D6ohpkounHn/OyqjlP4kVGYpOWHI+sX820kx4nKpyoawM/eaefjtplTwffWVMoMpQql/aQ6+x9u9P1Ktzu2rW0407I1zCstfQk4WxkX+qecf8V7tM9Y6EES22BCel60UQL//Z3VjbLwc2pXuEQlGvdzNQzmwW20/H78rXGnmmEv+hPHb1V1+O2rmPo171nWL6ozCtYtIslE6NGgtMzULjtokIdmjmQfXxQueRXEpzX8TUxhZGM3mNzRc8o=","authorEmailMD5":"35cc850e3c96577ab31cdbef44c322da","authorUri":"","authorUserId":"disqus:disqus_1jnwzdtCHq","authorFallbackAvatar":"https://disqus.com/api/users/avatars/disqus_1jnwzdtCHq.jpg","message":"Thank you for important information. Let's say we have a loop that we   \r\nuse try catch. When it catches an error in the catch part, we register   \r\nit to the database using a method named LogWrite(). We do not want to   \r\nreturn. Do this, but continue looping. Fire LogWrite() and forget. Which  \r\n one should we use for this? Task.Factory.StartNew or Task.Run ?","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2017-02-09T08:39:48Z","timestamp":1486629588},{"_id":"cc7fc363-ced8-3bf1-8713-de57ff42712a","authorName":"Stephen Cleary","authorEmailEncrypted":"ogcHFQynq8zbGQIQiPZ6QnEmlMTdeY/nWYVY9qYmInVVZ+Cj697yLh2JMEXu5TvKGfmyFRQUQaYDtRFNJhyIRdXoVcuAjnrk2a5BiQgF/2O11r1mZ0CfCkARFP2GYdKERRvKBHohxRpjPpQiHCQwb+ZA04q6qTb4rEmy9fZT/NkvXeaZM2PatcEuAReNu8iD14QABuI3+zm+OZsCQhmKJ6xT2WPO9CHD6Lu3tl3iqw7Zh+5vjuX8Fp6vWg7wCTP+URaBQ1i9FBN8968ekBhyrP1yVkCbuwaAzDPw9DwRGAJ8LabNlYiwBjQB0I4a3hmaJQ0TrERzKm4e3colb9CW7vUHOe+qpON1mi03GkFlzhZY4pP7SJbVbqhrS7YHvAiZ0GiZYZ1LlJRN69upC4cZvZ0yCo+87nE+5gZ3rVLIykWrGeQ3AYVAUdiiAZQDSd9Mwl8T+UL793YaMyfkLzOv011eUB4DYL8bj11U5cyvM8zMnHKf/C1F63muWlYC9qOYhDDBcG1+JgOrQXUW3sJbmEUmk6/nHVCpJ/eA2xauA1hqwohDTSWj3DHh+7HMYp3z55KFsl0NZ21wY1a3WDFBH0ZHigCo64fP8/oKZUq2jOy5KjP7FKL4utRv6yA6s4Kd46hAr9iAbJZstpKdnqPKTEWlBXxk2OwHRarcxp1WUDQ=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"I recommend not using fire-and-forget.\r\n\r\nBut if you must, then Task.Run would be preferable to Task.Factory.StartNew.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"7584cd69-a03e-3a9b-91e7-898cbbcc2323","date":"2017-02-09T11:43:32Z","timestamp":1486640612},{"_id":"9b4c9fd5-4479-39e5-bda0-1ce26e7a03f0","authorName":"gökhan","authorEmailEncrypted":"Z4ct1FgsAO27ScLbcssWf3zuejEBl7XR+fKiE7sOAVZxC/xuUg9NAi7tIG5XRvuYsK8rwTf681kSV8ZhY8ri7KdVd62do7iWMLdyeGU6BV1kKOc9mY7JlJkF0eFLKN7PMmcEYoX6RRvBuGLDHq+q5FOCA8pVFeyJx+C1Pqt8+r64l8w0VFRJOe7W+v5KAcIPvxnjr5SSlZ7QnGPeZ0T4INuh4KN+noN9xQiK8uLP3B70YuXc+kVlcD0AiIX3codTt2ZrGo2OEg46hPeHYrfrYPFocEJqkXOASBJ1Z/TS9qJrs99B2nZcYD/zpM1EHjENBeqnRB8u/4W/ev0EEQTC4Sgik1yQyF80U1PW46UdBONAtJYzKjpSu8PVU25x3uM9lPzqAs7B/B7JpGQwKHpF0kIdCcSwiIPN/lxz5qWQMb0Ya3J86dKTLw2qKDKV/pa/kAwVNur/XVQKssUuUfBPg8ky+h/e2jEXUIbj7vHqFmw3mrKEZBwmltXR5LpBrbEL5RWhDg0OX9kUTHcstxgz8X5eKBaWGvyHNwdkYjmq4sc0XN6ra9YuGs4MqSv77/0V86wWKTe2jHi933SyvxZkYVmcUu850TF7MCqtcYl8nNvcZuvtiZxMa+hJENajPd0a4cct9srRsoshlPxcjv8yjcW9G1vNaEhZw8XkxU6WLbI=","authorEmailMD5":"35cc850e3c96577ab31cdbef44c322da","authorUri":"","authorUserId":"disqus:disqus_1jnwzdtCHq","authorFallbackAvatar":"https://disqus.com/api/users/avatars/disqus_1jnwzdtCHq.jpg","message":"Thank you, i using live api. I need to save time on every occasion. I using Task.Run.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"cc7fc363-ced8-3bf1-8713-de57ff42712a","date":"2017-02-10T08:05:13Z","timestamp":1486713913},{"_id":"57978e81-d2b6-310c-826d-1af71d17f69e","authorName":"David Wright","authorEmailEncrypted":"DyEksCNyG6gAu0PUGRCCf7QDBNDm2k7ATAdTW/URaTnQMAH5cSuHoULuQqiogoFqrMbpqt0RjR4JZg13+R1Mse+DaqpzvzIF1AFxGS9I73w8J7KKFGvQ0lF8nWSMKz1elNdWdrvDRJAjnH4YHL9YoeeE4wgG564UYpyIZcckjK4cIFAPbJf6Ohzsf58TJJAoyyUSpVudtmuLe8+D9Lp2xT+vD3a7sKSHoTI6ZKjTBf7b6VbT6tGbU6hc1RVlHVg4qgLvrZJbsIem4MHWo2bdyI5AClssfBMkNkDDaFGxkcB7ztDwkuT07euxusmtkdnTKpBiMXU8GexB0JKNfN8RID5CrqZlVOFdT6B56BcXz4YTpVI+QzMrymi030okvfQXPmAzdM3OtoncQ4gg9pHSt9FO+TVW1gLF3roLatJNQf0ibsDq3jca8aNDImFXzk0N6wyETsqn7umfzM4q0GIU+JG/5gzM5LynFzg5xJngzPyQd1Knt+vYRRE+E0WALZLyI7rMGqpbiKKkHzdLgx81mTKN6+r4/VZHtfMDUQO+HupQ3RSVQJMZaP9Ix8E2n9mvqD4DDhPXAtgRZFFF4z5qsIfoRxI/JLSYXkmRM3JF8/94zhueFc0+G4RzLXTzXPWSKw4XQNEh/VaHTGr5h3tkWriSA/bxKHn1FMOPpCP1gtA=","authorEmailMD5":"493e9873244c4ee952e775e7f5dd072b","authorUri":"","authorUserId":"disqus:disqus_gFHel0qnPC","authorFallbackAvatar":"","message":"Does the use of TaskScheduler.Default below constitute adequately specifying a TaskScheduler? Also, in this scenario, I really really want to guarantee that the thing being started is on a separate thread, hence the LongRunning. I'm under the impression that this is the only way to satisfy that guarantee, i.e. I can't rely on the ThreadPool for my use case? Is that correct?\r\n\r\n this.cts = new CancellationTokenSource();  \r\n Task<bool> commandRunnerTask = Task.Factory.StartNew<bool>(  \r\n () => commandRunner.InitiateRunOnNewThread(),  \r\n cts.Token, TaskCreationOptions.LongRunning, TaskScheduler.Default  \r\n );","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2017-05-20T19:33:54Z","timestamp":1495308834},{"_id":"948970b5-9e6a-3d7f-add6-29d33352bba8","authorName":"Stephen Cleary","authorEmailEncrypted":"tIED3TQdSR18B+14kMPtpj+Jd2xA8D0jA3hlbI8zRbPYd715llibkLZ7a8MQRupMY/1Yggk2f9OV86SOOE17D04R6299UNSY5vGMsWU/bPOBnAKpwQM7nSyQDTYQG26TYRCTjARqHc74xnQtCZOtVZblyI6o1jHECPOf728Ggx/A2B9JnsRnPsWMzbrhuGA1Z1d2a0talCIbJsxjblo/DuDQGndtunxH6Dkb3ryNLggKB4vd6kChZsy7R47Y6CJBQFaHOz4xKL/wJYLWWZI1DoYAMyYOXDTE5u5p2HsFrC1/N7hOCjeVCF6uUQQoeuHcao5mcc7q1Bg3xFvHu9w+rA8b2rCJd4L27/4bDyuZL+jK5wNpx/1TvGoUnzKk5AQb4tAOP1msLq1ydb9Sa5vB387LUhlVNnAFf1R2+9xZ6IqjHTlRgQ+YPAa4GVYWxzOoJuZ/1elb5wSbCoN5T7Mb9vNcSiNNtXDliznyyCCJBRK784Y+T82pMc7x2k/MXBTUEskdxQGb7+oaWVNbakb/nN/kzrGGCfLj/Oa+vlK9PBMmbAuzALuvWSnA7Q30VQ5qdyPwaBAHiuaz/ZFS+HVzzhFDZTE6irw0LGCrKiarpWa+cEfdP9V5abf0aiq74AayGR9rhUerINOAI800g2wu9ryk3E6RLDwpU7jJoGlxSM0=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"Yes, if you explicitly specify TaskScheduler.Default, then it will run on the threadpool.\r\n\r\nHowever, LongRunning does *not* guarantee that it is started on a separate thread - that's a common misconception. LongRunning is merely a suggestion that the task is long-running. The *current implementation* will start it on a separate thread, but there is no guarantee of this behavior - i.e., a future version of .NET may decide to have a separate \"long-running thread pool\" and just pull a thread from that pool instead. Or a future implementation of NetStandard (e.g., one designed for embedded systems) may decide to just ignore the LongRunning flag completely.\r\n\r\nIf you absolutely need a separate thread, then use Thread. However, based on my experience, the probability that you actually *need* a separate thread is extremely low. There's a ~95% chance that you should just use Task.Run.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"57978e81-d2b6-310c-826d-1af71d17f69e","date":"2017-05-21T12:19:52Z","timestamp":1495369192},{"_id":"c11fc2f2-725e-396f-bbf9-0c597cd22e3b","authorName":"Brian Keating","authorEmailEncrypted":"eQIRslBQwk2tLJil+AEehryks/xuugcyJlWp2BtsARxb+lYI51oyFS/dnc9bJWIm9ZmFkkDNKCeFiOtHSi7tRGA2FX0J9YOGTw59ADQ7ZbqOOj7fLt+EB5smyv+DBdox3mmWFV5aKxUF0ST+eo+YWuQI40mnZP3J7euQuVsUAX97swv8SP1yFW8Ga03w/1+qCU+h5pyeDGMaL7BBO+HVFyTWgzDWqRVfiOeyNrj/DPfQwrxWirYFAFMTjMGkrkWKBC3M8HiIQclgKILFR2gv24+xA56jnnxLf+0AsqzomXeEGbHZUFOiN9JVpenSTcXJ2req1LyHr7f1KXBFvFFafCnrK1rH/btcKho8cDshNB6Ex8eFjDAa1zwlrILiAOZGICoA7gDkADl0OECMmZxjVpnxwsmJZ8FII/LMKszjOjei4d0Px43kXQ+ZbCTjDe87G6wcauy4+0yj1F67YFrI8f3pgoZj+WtZ2qF3Pi4DDdenrh+fnbjlgY7kwiCsfXvWBCsKj3DD8oZYiCE1LWflBexzz9+ZsKjcrqmE4A8/93tu+lHW7i4kndcSzBEmIulXAyZwipMiLfAnGg+CBJO7V0F5Ulz0NEtJci8pJzM2n9KBc8Q53sC2Hmc0pNORMNNf4IgsPNWG09ytr7LPc9Brp/FAkQU0wH/mXgvqme5Zjyo=","authorEmailMD5":"a99911453d5e23ffaaf762168e14f40c","authorUri":"","authorUserId":"disqus:disqus_5juJQnAlIv","authorFallbackAvatar":"https://disqus.com/api/users/avatars/disqus_5juJQnAlIv.jpg","message":"Task.Factory.New can understand async delegates I believe. However you end up with [Task<task>>] so you need to Unwrap the outer one","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2017-07-27T14:39:49Z","timestamp":1501166389},{"_id":"70b2ab7b-0014-3853-aef8-67991e17a293","authorName":"Santosh Jha","authorEmailEncrypted":"m8CuP3RIt7/wtG4S9+9n98+c55Rwx3TToA2j5xhZe7bIhp3IPwrRMXLeXAPDPXbpxzE+6X2LSBBRZcmvKJeIlSpjjWCi1t9WIH0nhfqOabS88UEHLDr4luqYohFHeipK6X9ONaui+irKCmb55UWb2q3lWlL++eVhX84uvl3qRLAe/QKkhnsKSOPu3d0lKdyrs2UMLkne/+QiGYeboIfSa9O+8SB6h8p5wAvMCoVrT277kuA4PiBujeNQMxKylyngeuukTrTaqfDFhJ+9v97mwFoutLfoyWOXW88EcSw9IQTRsztvCZJY8uOurXbTK5xONpHYDqYrjcjNuaPj0CyTH/F2/0ih2vEMcv1riawvr/TFGAX5HvYzIHzySggK2E0YIelXQ+ljv702P5I3srPFL4Dttl7bld1mcaYlQZp32wWjIGg85U6PB0wYfK4i5gHOFVLepMma/+Ij/KjLAmBv/aJcXDUogkzVuGoHhK+O6m4wshB0bAgAes762BuA0+10Wxza7nvB6bvTSVpraJyLtFGbA6KN+kSAxmj/eDIabVpyWyM0W9darTAkNeEh3ZVu+zPt3AQNaDgZaMC/RehGUhjYavyY94EqMcnAYyCnNB2/SMhT3i5E0aZK2WAqKvjIkLmlsIZ7uzFdKkmqN2Z7SjB1i4QloWIVATqej9wwDsU=","authorEmailMD5":"9f34f2494befcf3bad0aad393063e923","authorUri":"","authorUserId":"disqus:disqus_sISt9TbOob","authorFallbackAvatar":"","message":"HI, after reading the blog, I got confused. as currently have used Task.Factory.StartNew () to call a function which is responsible for calling Web API, and like that I have 7 to 8 methods (sync method) which called in one ACTION. So have implemented the Task for calling all the API in parallel. and To harvest the result - as the Task got started at the time of calling I have used TaskGroupPreferenceList.GetAwaiter().GetResult(); . Now i got confused that whether i did right or wrong.\r\n\r\nAs per you blog I should use Task.Run () with all the Sync methods and club all the task with WHENALL() and then get the result by using T1.Result,   \r\nCan you please have a look. and I do not want to use async because the i have to modify lots of code as its already in production. I am using this to make faster call to the webAPI.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"9c99d7ce-0469-3e3e-ace3-72356d9036a1","date":"2017-08-23T09:51:36Z","timestamp":1503481896},{"_id":"d8598b65-72d9-3245-ae4a-ae1adbbd7044","authorName":"Stephen Cleary","authorEmailEncrypted":"n8r3YHCKGU+gQ5LkMd+DeC+HVLYLZORL4zxJ3hgms5W9Tlrm7weB3lM42MATQpykuuVa1mP9p/r+6qy4f9H4sRTmqzIiPfhs3NRtfycgx919951pyuHBC77MJ3WfnA35S5g1YZ7k6VN1Np8i+bGMRc6cDrlYEqwsrxPysoLQfAAXNrZ9furr3x9Sb8ssaCNc3Z/arReFEDFuMK4wZVRTzWdlCc+k5TnFcOThfAUE36JiGSJPBjQaf+ZpnItcUTUSY/lHicErMd3VgP0o9rwE1EcmEMSA0QvxtGR8+ZjRHxd1w2Va3yEhPuOrTMbc1tLYtceTdA6UnTjboDj4SDPsrTXHeDs9oEkXgEhqHk0TVN9qEd9mdDH4+er6RugriN9nYtWT0lOYKZwjWFDQnVyG6mbPQLXvxoy6m4/+syS8uItN6t7FHRwZ4bXaVof6bq3RwgbRxozP+wFajRxB9ld4vSQ2dMCC44S4Bd1Gikk+7mbSTXaT5heni96ATh05i2nexCadpcqZcTtbAk0rEA1sI/sfH501NIQ/djYckcZTQeHqCH4wU7jZirc1t70r+FKwsyrN9sRhjbGimdAvQNu+2NyHbo3mZq8gEFYzqODyNNvjQCPVXhrgxwYukPC7CAihrfLeaOmqPR80UDiYmnG1mYlR0J8O5gB8xkPJvf4wEbU=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"Asynchronous code is the ideal way to solve your problem. StartNew (or Run) will consume one extra thread per request.\r\n\r\nAt the very least, I'd use asynchronous code for the WebAPI calls, and wrap them in a Task.WhenAll and then block on that. That way you're only consuming one extra thread for all of the requests combined.\r\n\r\nThat said, if you're fine consuming extra threads, then there isn't a need to change the current code.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"70b2ab7b-0014-3853-aef8-67991e17a293","date":"2017-08-25T21:16:18Z","timestamp":1503695778},{"_id":"69f0d490-db90-3525-85c7-9c0715efe877","authorName":"Brian Keating","authorEmailEncrypted":"GUPT6KULuTra71zH0YwjixlMvks04tnaojIwYeN8Zqq6b7zd8HiCjshoAHGQGbAsWUDbm+5CQ2lz4ExrAzQYfOc3oMluTmvHtGIj9i5Ey7rmlKZAIgTeibKEa11N/lTY84jnaZbKGlXBqpa+q6EJH2DRvZAabU8f5z8RgWXxYhvfic3NJze0r4POV0oQXj4IJ2aMZM+fdXskkLmEklQUbi5/Dm7GSo3+9lqnjHt0++asMkbjG1HeyY5HmwgIOJvZLIOOVpsEzkhCT7yODwplman78ikUyymlF4LW5edtuEwlHvwgM5TGEbrsKQyQUnpJwwri1t1txw6cOTPaG+UgsC+Rq3asMYt7luxtz3C0jakVqWc0+8g0dCH63Oit70l9lW4g3u+30B2sJW/UZM70UEgmOc0t+PgAq/YanAdet7UGCPHu8ynSh8Pj68IVDnK9N/PmWRVtBlXFNwTO4l67v4XOfdK2JeJdldjZ8VOYZjOFSDp6UhuZoFolXiYwCGZZum+rBjcnNeic71fTUQkxeqWaJD7WwWSbhs+UBbCabu5kMqX250oR1riiTeiG81GKB7zJ7O5ZMB8KctKB0vNYRK7kW6TsKrtUKysqyvV/CGz8Ri8ZubzpbfpJqUJFxJLKatVYxu6UWSV+WNO444CROih2IueIYkCAUMa3kqNp8F4=","authorEmailMD5":"a99911453d5e23ffaaf762168e14f40c","authorUri":"","authorUserId":"disqus:disqus_5juJQnAlIv","authorFallbackAvatar":"https://disqus.com/api/users/avatars/disqus_5juJQnAlIv.jpg","message":"Ok agree entirely   \r\nI must have though you were saying Task.Factory.StartNew didn't allow async delegates full stop, but reading it now it's clear! I retract my comment.  \r\nNice article.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"cc6c14b3-694c-3a67-ad4d-c6262d4ab497","date":"2017-10-04T20:32:52Z","timestamp":1507149172},{"_id":"cc6c14b3-694c-3a67-ad4d-c6262d4ab497","authorName":"Stephen Cleary","authorEmailEncrypted":"RAxU0xt61k1lly9MfAkc9TDTHVQwnPE+N2Z3D/jfgn22EIOWUabU5PNBn0fwgkT5fbV7Ta8M4gwDDGUxHSAHTppxlJoM4ibAqRBoqsM+cQ6o8u0El5BtavxCwta70za5ojYNp6L8qk2PTVdPgw2RSqJaz/2tidknUXZzN0xs2EzKiJdaakJ5nNI+djb8w9QVRQao70R3JliqG0R4oFAY/8wDh0tZKavwpmXrvj+XWgdMHWyPtO+amf0HjkscEypYQoOgAyHzMQMKv6xW4jLME97vuZ5s04WwLDjqCkP1K5bEwx3GGK/2FLR6MzQUuGBZNMOQPket4rvhTWhJmU+Moo4uHSdokHTC67I+8Z+47/It/EKPMvelyxYUOYaF6ttr61vaRLk7aGkWMLKdtljQTX8duQPdyxak4nUti54WZFxm2o0HFoK2sKmmFfWanwYuUGG6J9vaWEZRyN5x2c2id2vigSsSOjPSqQDXDbnhgX+8MOpoK3UMvLCVPyFYuuf03grj9/sSAgnwRx3TtXfCFnCjWr3QFRMgU4AbaasvosM6zsS8qkKxWoyDLGhxwtBJgqailUF1DF3bKF0XfBvy3iAweWBsNKtvAymRbRJXcqivTyI/FJBAvIPpvhiYi3AaqdZg6aeYvwRCQgcAgu6qevuvEVgI86kcDGfVScNvD7E=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"I disagree that StartNew \"understands\" async delegates. The wrapping is the default behavior - it's how the types flow without consideration for asynchronous code; if StartNew understood async, it would unwrap the tasks automatically (like Task.Run does).\r\n\r\n(Sorry about the delayed reply; Disqus has been sending a lot of comments to spam and I just noticed today)","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"c11fc2f2-725e-396f-bbf9-0c597cd22e3b","date":"2017-10-04T16:24:47Z","timestamp":1507134287},{"_id":"5403a2d0-9545-3c81-83cc-ce2bfb2688ed","authorName":"Stanley Toles","authorEmailEncrypted":"btH2nSP+hwtBozRWtmxI4qrPXmdUTLKMfW2nt+bFbQCXzCtpHQC9GovK2jD6J6WxSBINV9Dx7kQGIiF+iXqUqtEu2bO6RDKEyYhMszvYhtHyEIPldC3nvgv6FzMlOF/RIK4o+cJ6LR11kAsXj81Tyt3cXJatOqKr722yZXqbNjesDf0kA2Jdi4haZrnG6FawsR8NnR42er+rC/xCcsyF7/lCj7sZW51tIlHw1SR4wqkJDJ69CoPfjuTzLbrG6nnjadRsG4vWQMWaEWBFFpYbycnno7+9jObIN63YS+OmIlGpD/wSf1eDbl/wUFCQTvFcpB5V9xwsz6epu2WLR8jHhx4cOnx6DSjUpYPs7GHP0Oarwl0grC/wL2G25Ci80ZjWZKu9F2FjvTVYKMm4KbAzeanOjGfeBs5bm2wZSTl2HDV6pMUSX2Yvi2PEK9ukRnSruunhm7G7UwvHnE91UbTNGtCtmRBMg3oPktDpuJFpxVQ7WODv8jI9mJF3jkQLXVWys48zi57NIR1X9P42oqOBzohQSeD7Nzu5XjhYnf0oq6GGPGU4Au0lfh/ULmxs8khANOz4lMW2gysJu2VEzkobe4NvSfsBbvzj1fE9Yf1FrJk+QmiZ5OyYKipcge0NH8K+06C1w5Op1JW7qkhWl5WTzhjaNVVMN5MvrREIFSgyVc4=","authorEmailMD5":"4ab8d3a959128bb3050007f2d8d949b7","authorUri":"","authorUserId":"disqus:stanleytoles","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stanleytoles.jpg","message":"In the second example you said \"In this case, “A” will run on a thread pool thread! But it’s important to understand why: Task.Factory.StartNew will first examine the current TaskScheduler. There is none, so it uses the thread pool TaskScheduler.\" ... Why is there no Thread in the second example but there is one in the first?","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2018-02-01T16:33:36Z","timestamp":1517502816},{"_id":"9353ce33-8941-376e-b4fc-f7382eb1a627","authorName":"Stephen Cleary","authorEmailEncrypted":"GL1oRrb4P1ULml95T0XMPejq3Ko7b0SgzDWSO9fwT+RF2oqqTUZiMalX3iSO2Ms2+w/jS5bNvJ8UHR8CAPXSSvYjtHCxobiEYWcSPTyhq0f4HIYOG1slwWJFjzrY6YHZ1CRcVF06z9bE8yixR1vVQIHg6DIWOo+2ezcPy4PZrFcb1lhTbaKeu9YMVrRdZHEi0JHI9+jptZwg+17fZ4LWuhyvuBxeW5nyVasn5ctUlkxnI+GxXnRjDaV7YKe+CPy5oD9/zFus7f5Ya8cW+Oh5fSAfL+xM+inisQzlrGjcBbfVxnYh6XZDDG/YmydK2hb7NiRHjru91UFQPBbkPvdoxcLkwAlzQjaiI5tOfbiJczX5cqvLQXvlgIV3GoiREALnIe7GGEcPLmOeadrlXd2PF4veAWqPMqFKlQqv9ZmIEQequHHq1pajzeIue2DMaiWyEWZz9FoLyiTWGIdzlugUSR8XS8sYXO+b6z4UHiCHRcJe4DbtediC6Xivj1fxo7RDBDV+iexJT7RwVeIHE2aJTPGneFwMsd6nwSYwqSke+3WT9Bvnfb6D8xfh+AQvFkYD8ejgFKsztwR173GOwUiNZHIpk28Vznhi5jRqUuirk7yfshCXsu5NYY02v9Uz8Ns2B6e3crHMzeRjhWQKXl0EoP4XiDeLdTFcCJ5IQjfksyg=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"There is a thread in the second example; the first time A runs, it will run on a thread pool thread, just like the first example. But the next time A runs in the second example, it will run on the UI thread, and that's the behavior that's surprising.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"5403a2d0-9545-3c81-83cc-ce2bfb2688ed","date":"2018-02-01T22:34:13Z","timestamp":1517524453},{"_id":"965edeaa-2432-31a3-9a3d-715ecd8d6791","authorName":"Patrick Kursawe","authorEmailEncrypted":"GPmKShmBezQPHUe2Krw/W4Vu72H6OLUl9eACTOc5kARmgS9e35nJpB1xMm8tIHc5/KQf3cYYG2TLQNRJRFT8GvYQHBuAj/rcwMjMOabuaQAbZwbrDL3AVMhu/WeQxCwg3+Kzu7ZzZsxS4sJJj1P0U162CX+gMCoDldk2xNdEg8gFqH4uthpDBE9EpbIh6Kcvn2FnIlBASqvC3pgkMMzqACoNZOCtgabIkD7JAw00Qi0CsI7CgR1sx0MyUiErVEZeyXPv7l+Rhw8SIv0DIx+/+ESQSFLpUxYm2xIz6VlvH4s5fAuuJQm9sje0BSif4qgaAgQlSNF1fHl8O7oA8nq4I2CxHn537+THPVLaglbt2gHU+FEkl6fGxKebUyM8Ra9RUsE3I1isuq9bWnF3P9Z5h8wAK7xJSCezVpulGG6zKUSeGhctesDzmLEEfaAxQ3LYHbulfRHFTuNQhgP08WHaZfboF5ZaSVXGUoNX2vf3R7oh1HmqDh4ZykRkHXkd+pX0cwEgX1OAOPMXOfxyqKp7oMaS21sbXwiTFWkpuNXZQGA0rUa1ylqMQ3tskU5Vl4hl8625UmnrSzxHq3LS14dIlyNfMCXXRjISXmtefv2npznBAKly+pNz7/2fhfU4ubnorISRxww+VOYefVUWXGYBQXrbODdBehFUlhISfrUzu6U=","authorEmailMD5":"b20148f6b8a869f4b4264f299bed2c05","authorUri":"","authorUserId":"disqus:patrickkursawe","authorFallbackAvatar":"","message":"Just ran into this problem again. I am using a SingleThreadScheduler to run things for a third party component on a dedicated STA thread, and I had a deadlock when trying to Dispose an object. Checked with ILSpy and saw a series of Task.Factory.StartNew without an explicit scheduler specification. So the single thread scheduler was used, and voila! we had the very classic deadlock. Thank you very much for this article!","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2018-03-12T13:50:45Z","timestamp":1520862645},{"_id":"e9f31d47-0474-3b74-95aa-404571c9021e","authorName":"Guest DD","authorEmailEncrypted":"hYDUUEBCzS1qlAZABPNTGptMFTH7BdEE0SIn/+v57GzvkwWCuBwiqA47ToVkK5MDEbGJotyG2gaRVA6bZfwlRIUGZkQ6tN1YvsQel7QfuRo+MMmOM6f4ovqVo0OEslmKjWwTcjMgjGZtFm9M2tUkxuNIarF333AUhijGDnBOSk6aj0Iaotccbp370NUAYZX4IBvJdVOQnyP8JrTWLLMEtDRW6FtUasppDHJ7sA6JlcjalBYdP8fV0114MQSPEjDBhRaXJYupF4QAC8+YMuSGeTgHGsZ7j8/wTjQLieUNcmkgf+0SznqEEsFtSKut00R1PkhjzSMaRS//2ZGcEbbbtlePthwY3A6G30dN3bQcwhiYX4/7e6gZ00hkHIbAlzK7SP1ogHDrjdq6C/OuCp4jGcqH9V8IdSK62Bz2O7xeuSmXEr54IIKLueXx4WcPRf4XaiLA7Gu1LF4PJTYbp5afvy1y4DpCgSMWfsTyH4yWtpv7npG3sqrh2+jD3sI4/9GXe5wHloCXqtIWZ1phANrt2+A+7fb4BZmCOc39zfPOlxperu9HqPryFprMpCMx4tOfJxKBnO+RL5bAgNbsj7rdZPpv8CFKNkpJd3bWQEQSgNKBXtHX8Ayo/tkUN+b49NVAm0wH6eFNLHXXMn3fql4VHqdNkYAouiec5TUHi6MV5aw=","authorEmailMD5":"ca791bad362f96f061ecaa8b64d2d1b7","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"Hi Stephen,   \r\nI use the below code to start a never ending worker process in a \"windows service\".   \r\nIs it advisable to use Default scheduler for running these kind of long running tasks?\r\n\r\nTask.Factory.StartNew(longRunningWorkerAction, aCancellationToken, TaskCreationOptions.LongRunning, TaskScheduler.Default)","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2018-05-02T14:56:10Z","timestamp":1525272970},{"_id":"c8357fec-fa6b-3a58-a41f-5db083f96d7e","authorName":"Stephen Cleary","authorEmailEncrypted":"cYDklOtowNMqHViWmKESXK9jC5itkpj3TiD4YmFxx6SgcN34LKDktARfzKMKXXV3e8q0OqTWfIXS1+8CiTw1vNvurQW89Hi7sqdjnevS7MrhEzxZdSf5UJXpbtT0b+M3X9by0gvVOCcz1tyh9xLnSp22jVVnqlqX0/b5ZOnoYBcLcijPUVuez/nM6hXN7LprgAgmqdrjzjTmHpqy46zHD7gi7ACinyzO4HCrcm1UHOxZQYFsylnGboh/xmNIwVJYMvz6Z46YN1SiBZm4k+3ni7kBPJJ7hxsbJjvbvTITfIth6Us1eWhuq0xDAfcrBx1F2XRnDrguVc1J5R6wM0C6FVY0XBZg9ghCgIR+27ClkoqMP1gN23o30Brzf4KRBDtgA4wLWNxOqOpbKzVmBjYNC9GKL1Ux5BqZDrkZq2JU/eFAOr0DOUFOF+nVs7Dj5bevl+2gspVHLf6axjzxYLVdiB+ETISGyTBmKInkocLrLs4Qmlbfs8cKuVZ+VhSOQ5HMMhM+y7f33rSQ6irVhjU4QJc8kIt3WsM0zyRbCYJjjnsd5l0+nQYnXA6sTiOLpau0GlXKXnI5Tt/YJbVPkCC7CM6/QzQrfnt+59bGnmGdix9z4P+1bQX2HRyN92c0sFm8qHZOWy6Amb/CZeEZgaNiK4LHiD6BBJcGZzP/19z5Dk0=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"I would use Task.Run, myself. But if you do use StartNew, then yes, TaskScheduler.Default is a proper choice.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"e9f31d47-0474-3b74-95aa-404571c9021e","date":"2018-05-03T12:09:33Z","timestamp":1525349373},{"_id":"1ab6ff5e-db79-31e4-a2e8-39fd81324165","authorName":"Saravana Sankar Ganapathy","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"Hi, i'm using code like below. will it cause any issue? Does it run in synchronous or asynchronous ?  \r\nPrivate void DbCall() {  \r\nTask.Factory.StartNew( () =>  \r\n {  \r\n lock ( _synRootObj )  \r\n {  \r\n// performing db calls  \r\n }  \r\n } );  \r\n}","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2018-05-24T21:59:47Z","timestamp":1527199187},{"_id":"1d4cc85a-54f8-3591-a70c-61dd06b1d434","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"Hello,\r\n\r\nThis code can cause several problems. It has all the problems I've outlined in this post. The code runs synchronously, possibly on a background thread.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"1ab6ff5e-db79-31e4-a2e8-39fd81324165","date":"2018-05-29T23:34:24Z","timestamp":1527636864},{"_id":"10cb80e2-a572-3268-87cc-c445c50f3b3e","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"If you're sure that there's no current TaskScheduler, and if you use the appropriate options, then you could get away with that.\r\n\r\nPersonally, I prefer Task.Run even in those scenarios because the code is cleaner and shorter. I would only use StartNew to avoid closures if performance testing indicated that was a problem.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"3a18d52b-aa5c-3ac1-9859-e35fd101681c","date":"2018-06-06T21:12:13Z","timestamp":1528319533},{"_id":"3a18d52b-aa5c-3ac1-9859-e35fd101681c","authorName":"Piyush Parashar","authorEmailEncrypted":"","authorEmailMD5":"1f4a1dfa8e2f8ee38c5608d964d6abe1","authorUri":"","authorUserId":"disqus:piyush_parashar","authorFallbackAvatar":"","message":"Hi Stephen!   \r\nWhat if I want to do Task.Factory.StartNew inside a threadpool thread already and not a UI application. E.g. a WCF operation. I want to process my incoming requests in separate threads so I start a new task using Task.Factory.Startnew. The advantage I see here is that I pass the state object to my worker methods using StartNew to avoid closures and allocations.\r\n\r\nWhat is your opinion here?","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2018-06-06T04:06:15Z","timestamp":1528257975}]