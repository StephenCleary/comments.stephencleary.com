[{"_id":"389a91f1-bed8-3046-9c47-c1382dbefd23","authorName":"Jasonium","authorEmailEncrypted":"eMSddB12ewAPqPkQKAfFduwqTOZpQfYwRfVRNMqRTSIdxoBE0uzpXRojIpIK0rZtKrasA04n7dGD1VDQ54umZd/Vkbvdre16YeM9iEbqSNanFVw3cX9VNrsoEWiGzjdOw7OVXM1LkwxQQvYGgLZqXcjkkdt1s8g+VgrJIZqDA9M03diCj07yXqPJTYJ+lW2jjOqFwUZB6ViA0TzNnoCxj5ODvli7SNHOtFZ1psoFP6lRdmKG7x0SrqixrHfnlWBGejm4Jc/1cZt2TyQLVQxuJlm2S3Zh4b6tYIZx1jp/BS6fIlWVzyBIgpX9EnMd2feok4wBHhfaC2XHwYRfv6bHXYJOioelRq+fD5IDeC8RJReNXJJAV8iJgsD2L8E5IasKJweVKhM4+hjw9w8fppVaxVVc+E4uKCXhFdkDHdzNh5zWioQ5A97cInhCe8+/23IDkwIvuX0RaNMXFHN7xOWWLVO22PBkOiALHX1TYGDDnKsMNBFb238DLE/OSNlrHXIR9k3+R4zRBhKoW8dPjKNYA1A2DVRrjbgnpK2vbSCj/iAUegUj4Fqy1R2T7u3z5MkSb5uP1bpax4GedDsY3SYPas1ES+IHBG7k81Blzvpt50rFsOnA5XhlOiAqGmMf4y+U9Bfe0T4IzxfGnzYkygJ+cF/Z8a2bIKE2zCkXxTfypAI=","authorEmailMD5":"168450fc1f0089b80766f32bb856d13c","message":"What about classes that inherit from an abstract class that has managed resources, and the the inheritor also has managed resources?","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2010-03-26T02:49:58Z","timestamp":1269571798,"authorUserId":""},{"_id":"43c68fae-7361-3190-931f-641e0c83086d","authorName":"Stephen Cleary, Nito Programs","authorEmailEncrypted":"Dzeo1I9Jw2qRZCx2LyDxu4bwTwLfYSSEOD9LNPd5Ibcjg4iaxBoDdAMex/u2cCiX3Wn6FhdrG/Wg7MDbhjUsbJShwwtIfanZM+0h8emzb5rrS3PqIiMuDwVkqhY5EqLbaYtBvLVkRn3fZ8k3jcFQGfB0SwHEKTwCDOjNl0VFyPLpBfveIip8x2BdbTCzwY/+IX7K0QrrFwOWaLlhvQQXHSyJoWaQI9bO7ofIDlzoXUgiUG1vZlvBD3aNYBjE6rC5NExcukoYoSnOToJoiTLcvq75RWKpN65ayJajY/oW91Mf8uXLjUm1/kS1P/XRK3G35EdS57f6UPsy75ZQsNmhrPx2UNViMu+uaYE0ABf/Op2wsi1YHEndYe2HGZmDh1MDOCzw4nMTLrIDzkNHlpsR4U2HBQvLd0zeQ6s4BjxSQgnTYY8P/UtuDJVwDD2Sv6lg4b5MTtXzc7epBOIZY3tyvK8Lni57xsZOValkDLg96j1gJ4Bs4c1R7vU1XZdPJJgFtxQBbNelJi+EAGp4zYjh7s1ceYBRx0WK3e7Mi55GAdjxHi37QJpyAzSUP75FeFUM9fqsju5CDf10WFiAeqreSHZrwQ0OJXjrf2ikXDJLqfqnbHsioZOnSCFbRTL5HoPN9fzT1ntfnEepFrg8AowYkWPWvYRKCuBlLCi1gztM9qQ=","authorEmailMD5":"6d10b20722189b4c5928e1e9fb2363ac","message":"I would then implement Dispose as virtual, and call base.Dispose from the derived class' Dispose override.","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2010-03-26T11:34:38Z","timestamp":1269603278,"authorUserId":""},{"_id":"3a81f0a5-3562-3549-b9e8-d5d7aeef1211","authorName":"REing","authorEmailEncrypted":"Lg8Ibsd0Yvhm5SXeWvU4O+IBFjtz4qXvkgdkBDHx07CCpcgi6QkO9BB2vNi9ZP3CqSEyunqTIoDtq2igsDzcjpVg/qO8fh1lGhbtx8CBhB0Ww5MDpcx+IRr0dxsKU8zSeOlmfxOxHJKjuYNMNT1uU1FVZGvWihXlUAl3K/7lgdQ2FxjtKwljvuE+DLxsgGRdaM6fJZAyAMrXtkn7QRL3YyQV8ya3e4dGTfS7GSKK0t74oIBim7a0C4wvG95OrJCmQ68Q/ktrSJkw7zMpao4KCnAfP28mmIszytHcXN2tX+81VVS8S8KfmcTwZF7d5ND4DmBgA1R8R0k+Ua5xJdqbi3h1dabjZlrsYop6rP1K2AngUUIXvf+TnNb94mK/1Er6wIcVYQg5yfvUE0SAC06y2Kf69+SQmeFui8gEKQUYb7eCynNPl7rXKytc8Ze4wlR7gKv8ezNrsvRJSLmFVEeAjl6HGRDwOi0F4jr03kCa45K5z4gdy3Nmku7dWmdtMaGhsj64uCVdlJEXlTjmFwWkC4sJE9QqAQuEMubbKfu6QbX6SLnQk0f7dxrShOJ4AmnnAdpHh6TvaeNIQdGosVzFHW03YPv3nfuXMiV+SbneUAQWHD8eBxRtLd4xvhspH+z9lZlHzt233MgKegEZ5qbgvsGaoo8pchZ3Dbxm7nq3I98=","authorEmailMD5":"02f2b55a28b36b97d62ac3ac730c57f7","message":"Great writeups.","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2010-05-21T09:05:38Z","timestamp":1274432738,"authorUserId":""},{"_id":"b2e24950-f8bb-350c-bc85-19bbde94b136","authorName":"Stephen Cleary, Nito Programs","authorEmailEncrypted":"I/KXWTUMJTqcHgJ/0D6ABn2kDee0eTMDee6R92136e7zlMiBDM5NqgNz7V7gnKSH6UysvzfQfFJs1BWj2AaURE2jwvKnGHdSAm0qikKY8DkOdw4s4asAu59XeEl6HPacdJy8VK15Sw/vMRoQyb2rtP4QWDXGV6Ktu/GU7K5pelN0zH1S3OrPJs+dUdQU+0wHFIVirYIXQw1wjGOeZ20Lb0Ki7JjSqFxueDTCtN/3CLkKL/FcNyky3Bxx33sJjJA2dI+MWaqdteblT220A4Nwt0Jdydgkj+nhbFkdIDN+ZPYwrNTwcXmpQ0Ocx6KfvL43GR9jgfuxvPVEPj0DvAHdyaTge0PWmahGoB4csqgc1xIhLOs6u/sge3olQ0v8jFmLjlCRsk3jRj/wswox+FDikAdwDkbTakPAMehoQ1wIKPGbXSaBEIskFq45wW/6JFb/Fr5mrwwo6xpLKs7bBMU5GBchp0zcblJ1MHnYqqs32PiiMPIink39Abnr7KDnV3AfuSqYbLsvTSdZmRYGIpT6PUVq/hyIIiWeFgb+C8giPI8Meai7WqVBS87vTd4IOPq5dTfqpqepj+8sPtNDlNW/639q2OqgGVNY0ApqUS0BJjv3XZ7FiGQ0/Rq2jaMlgYVpDCdkAUUNIYFmFtOxDxkH7AxIzHibsAMlODsO3h/AfU8=","authorEmailMD5":"6d10b20722189b4c5928e1e9fb2363ac","message":"@Rodi: The design here is that SingleApplicationInstance owns the Mutex resource. Since it owns that resource, it is responsible for freeing it.  \r\n\r\nFor this reason, the Dispose method does not have a bug. It is possible that someone may introduce a bug during refactoring, but the Dispose method as it stands does not have a bug.  \r\n\r\nIn particular, I would say it's wrong to have Dispose check namedMutex for null. This implies that the design is that SingleApplicationInstance may or may not own a Mutex resource.","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2010-05-26T20:41:48Z","timestamp":1274906508,"authorUserId":""},{"_id":"e93d1bbb-3154-31b6-b014-79169bbcf8ff","authorName":"Rodi","authorEmailEncrypted":"v5vfoqmAw64FJBwWrG58kjn/LrJOjOMdBzxk2meA7F4CX+9coyZzpOlhnVxvNA9gGV8dYXCm4voYZjiGW7KQkgq9YRo5Hl6rYgYa5gZmUa15G1fcBWSxJNqf2Cqkv9qh4o271Z3y/Oyi/GVQ94VKfZIUopkS0Fg+Zr8zAgFtq+iOPnKaZCuO+RRKNPOJIvw6qg7YpGioDFKRPCDsSr3pHhbdebTyZ7sqo6RgWykVyUQccyHVw9XYywd0snHWhMnYGYvYMR3BjtqpTxP8FyYeMPlEnX87smOWVNE0LPf3CFoJOS8vrQaq+dvzbCwPHxX6XvmbB2qwlLxRjK9HWJauS8I50RosbfjeGEVG7766Idw2KK4EUwSUyQsbM9rFf/gcD6zPzjb61v1d8yWyalBN7Y6yuoMTBoInboBjT9jRerPZxVW0SbMTFsoEC9Gc5T5zcu8OJaBWqDwvbozPMvgZtpAd+3pWxCkD5CnPWnKD4lDTQK0iFvNQj2+ro6MPzHo11mxSnhJazejR+o2wsT1lOlVD2mjgBpvaX3Um8V2ydbi/3MmORDBJQuFc0AaAUfXErB+dPSi9wMgBKhOt0Lx2GaFcodUP65n8w4MagudUkbdDxfHVjQmX/k+2eJf4hLoRdO+12PbkcT8dcJmsp8fSDT5ogiY01POdUuEJGwo9Dlw=","authorEmailMD5":"004c86a6ec9a6378196eddda3c72fb99","message":"What if the managed resource instance somehow got to be null? In your final example if namedMutex == null then you get an exception inside your Dispose.  \r\nThat should not happen and you should be sure to set up an instance in the constructor, but I can see some day someone screws up and you got a nasty bug in your Dispose.  \r\n\r\nCould be that I miss something. Please correct me.","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2010-05-26T18:21:14Z","timestamp":1274898074,"authorUserId":""},{"_id":"16a7e6c6-918e-350d-ad2c-a41adacf9cf3","authorName":"Rodi","authorEmailEncrypted":"FRNZCQW3Zd9zsQs9nLRmLiroz68pwEV+f5vPgse63wuqN74ZR8Ej87jCxopyO9xeNev1hRqNcLDEkP1SfvmqA7+9zPZbdgfcZkCRreMk5py22xSgDMpa/dQvk6AwT5rHshLu+Xknz3hU75+VDwxSoqBBS2pH8KMqukelpRpgTVSlsPT9QlVHvGScysHkBygF8XR7j0s53+vwdYjhHphKwA9yP/46nBmqN9zQGLCDsUsU8ETAvHcFnmymGslFw63s2bkl9DcJoQWJ4AG2aomZ5SnKJvLTiCTPNOK0wnrCD1Ivzk6Nz+P4cK3O2gCu7vNxJOJlFT15KHl8B075M8UdpcWSPRuOZcrEgrX/h5TghsvsCgrcT22q8XRrgClGYfl25SHsRdTCTM9iDWH2lE+BlI83opmrqiVTsH7TxafaTSlIygZBU0Yq7oUqLdaYgKKePhpfH/ZcpBuQvvsluT/j56cRCWgz7Q37+q/XkbSjH/CVL7KOcRD1edRVUw0xucDBmSnLrFExeU4i8G7MiASw5TMTrEPBdE4p6l+y2aDqHKYI4t4RuT1g/myZ09cbBPVMrctg0ycsry+Hqh8lsKgYjh65LH0vRuO/glnNTa2IXKr2X+ze8N2WdLm3Rjhep7ryiz3mhruJwGUf9GIQq1tLChwe1clcZ/yuRT0S0WWiIhk=","authorEmailMD5":"004c86a6ec9a6378196eddda3c72fb99","message":"@Stephen: Thanks for answering. I guess it is mainly a design thing. It's not related just to the Dispose method. If you need to test for null in the Dispose you should have to test for null in every method where you'll be using the instance. It should indeed just be so that it will always be instanced and your unit tests should be able to pick it up if some other developer screws up and deletes the reference or disposes it too early.","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2010-05-27T12:38:05Z","timestamp":1274963885,"authorUserId":""},{"_id":"48a1968a-44b5-3a93-9b15-776e10c5dce5","authorName":"Anonymous","authorEmailEncrypted":"akzF8tyoXb4DMoy6NYXCUigHEGTZZvTnZiNkrSpC7op8BsEA4X6Vb8RA+1wc7woPVpJNPi3v0VpozS8yQyRy5Zw6ekHIjhTPGhIcQzgonIWtRRe4bENr+8NnMI2EClgs+ztK/kvBqOVXLWwhx7x0bSWJgGPr1EMkO23FrO0xp4KnaDIahETCqNP/h2QduP8lIanEJXQsjtS2PrW7wav0oKKZkzXZcCogXmvBbSPxwcaKlQauGdZZUgHHJpcMVkD2ZVj6THItyfm+bwwtNFLrG3yYfiTat40xxASj4Vt4xYNCMUOAh9aG6dVpti9asS9QZQMmJKNKB05p5Cl6r1H1rNsAbOqRuLldRT7nD1DuX534VM7SNAS/jDYSpFO+zfySEvF7KKwStiwOA9soLSnolu58S7tY3L3gCL1Vn26Ke5FDL+XF9obLJlSmfi/iYA/SX8k5IDqgJ6GhrxD6aPB04QTYUSmi55CND3GvjWj5yBy4Zi6elRcCEw9xtGznu5AApQSGaLLepqF+aTFPpPYAS45Ui5Wfk9gM26v1fyo7m85k3Y+aRfzQAeJ+S8NoXVoLe3yVWamKVnSwFdgLGYa4h/8fmkveut1dbwGKMOOdMiNei2WSyK88HX7yCex5rBoVkCVIX2RCeoHfQGqoSAFLzzWkpQBdvALEpEaF+NYvdEU=","authorEmailMD5":"3cb42db01b5edab948a576e1bf94a281","message":"....instead of implementing IDisposable interface if we write a public method like  \r\n\r\n public void ReleaseResource()   \r\n{ namedMutex.Close();   \r\n}   \r\n\r\nwill result be same???","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2010-08-05T17:41:31Z","timestamp":1281030091,"authorUserId":""},{"_id":"ff61bc39-9cbb-37a4-a8e8-12fa9d7679d7","authorName":"Stephen Cleary, Nito Programs","authorEmailEncrypted":"W34MD7p/hudoHSoFulHfOYfp3z0BRL9jGDwxaWAcIH5NksLx9phYdPgqWFFMqWOsfVhSCbsFcZ4gD57CjuW2FYr8ZF0xhciL7LgXh7lp0zjOPChZqOkx5QB9Tqt/jVYIA1gWMMjhaSL6akumjQ+4wkomsuAfpNO+4zbXImt1GhQ1ne9DNutUT+U8b3I5o6iOpNjnWmjJHRLggNxnEtiOesab/f+GU4nNhXqZyGbRtBj8EzdXTnmMexjC0u/XsljA9fIFWB7++TGhg8+H9ELfgX5UAJojxXt0+xOmFrA7IyNKJpkZ7PDR2bahvoJsp3jLgRitmW1suqG2F7hu0WVkeYEngk4aIJ7CELQYpKFjsTRVI56e9M+KG8uHluPuMnPJNxI1QhapwvHIruCIeHP7AhpX6n+1Rb2id1HFsPajggCmhvc1VV3Sc/5YVzoBpskq3L/ldfik5L5NGYGZSU1yIpzGPcclAhaoo4zKe5RO27iVveO3V+qfUNXS8VAY51F1cwbEU37+pi5692H89z7dNTedwf70dktHcYNdn/3wnn7MhoO3q9l7Ai3+y9OHvoiberuA1BdU9NaCARdUHEIYKfhdJtXK79pNtpLwyT2UTgB/TQq3SEZQ7nm47KDur//64w2WeQV8HGyU8P44wTWZ2w5pCG8ISezNosOlV5xdMdU=","authorEmailMD5":"6d10b20722189b4c5928e1e9fb2363ac","message":"@Anonymous: not really. The advantage of using IDispose is that it has special language support (clients can use the \"using\" keyword instead of try/finally with a null check).  \r\n\r\nIDisposable is the standard way that every other .NET programmer will expect you to release resources.","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2010-08-05T19:21:12Z","timestamp":1281036072,"authorUserId":""},{"_id":"36bf1a1f-57c0-3a88-896d-2c9aa42bc346","authorName":"Anonymous","authorEmailEncrypted":"fCvj9XA8Eaw3VG/zxsqcp/YrAHOAIzfvHha7jQyLgfoD+phMn+S2/i9JeZHNTyWR51vniTV0ZynYToPejHrhqRzQMds95igYVlohjS6FvPEf56paq9GQQk5k3cYeufwWOQky5Hx4A5XFt+G8dMlIHxE18jUIxINkApOCTaqSCnqjT7kbmE7zXWLtaXYw43+SKhZv8Hjc+l3LQtwpC6MUXIpObqpvfkF1tGNdonPZ3YzYK+RmHiX8nRDgeDrax0XXl2LX2gJIjKkWtPsla5X8PivkeXUMpTQrGYd16YdcwuacI5VH+lYkmMvG/vSMekwCNvwelPiGjPnAWJ+2aqf58vixBE2E035LHqO/pTKQtm9IhttnzDNcHenIT7QJ4/4LMERIClW+JKA8ybyn8F2OV9bU3BWEgPMTQxSeA59CtFr4tWlxN7E/bLd/PsBHY4lEJTt5hFGDN2nClaYpqi2Hli6BaEJbyfQtYvgW1XPL4s1rUbU8VaP1KAVU5IkCpJYRwjFqvrkGyeVT81n/y/SfjLxQRNlHaUFGNdehP9lN1ZR/6RR0w0AWw53NLPWs9cMpPrgXS5qHCTghYrKYrBmRG6ezTy6f/x4N5Y5/TmtwX/68jFrCv13vwb66dGuT7ebJGi+8iEi0HCVUebzKfVwsT3PMjyfmSwIh4NUskXBwwSI=","authorEmailMD5":"3cb42db01b5edab948a576e1bf94a281","message":"What exactly is the benefit of not coding a test to see if mutex is null? You speak of whether the object owns or maybe-owns the mutex as to whether that is the test for good code. I call BS on that and charge you with misdirecting a lot of inexperienced programmers. The fact is that the 1xCPU cycle it typically takes to execute a BranchNonZero (BNE) instruction which your IF statement represents means NOTHING in the course of your applications execution, but it does mean that the developer understand the following:  \r\n1. Software Processes are complex  \r\n2. Software is maintained by groups of people  \r\n3. Software is maintained over time  \r\n4. It is more important to be explicit about your intent than it is to have the next developer divine your intent by thinking that your coding values are somehow universal  \r\n\r\nWhen I read your code I see risky vanity. When I see code with the IF statement I see code written to be bullet proof, designed to live long in a complex environment and owned by a team not an individual.  \r\n\r\nAnd dont come and tell me that that contributes to bloat either. You will lose the balance of any respect I have.","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2011-04-08T02:43:16Z","timestamp":1302230596,"authorUserId":""},{"_id":"79f06200-bf98-3df5-b44d-6bebb7a545da","authorName":"Stephen Cleary, Nito Programs","authorEmailEncrypted":"Pfb82i2Ef5jx1z8P3qR6dc5xGIm0U04gB3zs/68AX8WSvprK+m41XmSoPghFIs6lzdeEy/AUmngZv2no68XXkTQkHrxxsLEBT8u2djb8LTTrVMGA3YIw7y/u0ZVUoC5ST+GTclZzLIPLuX/Hdd8GD6NRmhgDwtPNczSbDPyUVXwKTtzoUpX5N3tOLXLy/Yp/UyYeMAwNNPkq3UVeBbDwUQfEwT8namJZPH7VETssetPs6HNpWDnpBTzFHisv9oOkIOJSJrlj2lxNjCOkvy49AzP6p/xy9mn1+y15wF/S4251tRAQrvael0m1d4S8P6MmTnPI3g04SJGDEHvlrCDHhOpA29OwostiDKte345pVdKzXhPGtNCZg3TPxkBk9SGJx4wuL3loYE33P8w48JiVJ+ye/WJZhTQdwhyNU8FmnNaQnrRe+Ea72v4sjmozcysEtdo72Mwz8s199uwg/LR2oCg0/iVXtYqdTi/Qzp47/XMhZstBXWsuOrN7hc58U4D1jtCyx9BYjTsrtzyFdG2guiXrWQS5mRVrE7F/jwLmxUzutv5oWR0MdLlPGdLDJNExiSZd5Qd3k2uld3lsAGNa2RkS6jqBG/a4DfTaXMTXsn5s0Ll/1YHrDYhlyMg8SrlAv1EaefrQ5fomNNj6cWMxwRW4eBbmSkGn0gnaxVCv0Fc=","authorEmailMD5":"6d10b20722189b4c5928e1e9fb2363ac","message":"@Anonymous:  \r\n\r\nI don't include the \"if\" check precisely because the Dispose method should only dispose resources the object owns.  \r\n\r\nIf an object is refactored so that it no longer owns a resource, then Dispose needs to be refactored too (this would be true even if you had an if check).  \r\n\r\n(BTW, I did not say to use an \"if\" statement if the object maybe-owns its resource. I never encourage \"if\" statements in Dispose; an object either owns a resource or it does not. It may share an owned resource by owning a reference-counted Disposable, but this is rarely needed).  \r\n\r\nOn the other hand, *not* calling Dispose when you *should* can cause some very difficult-to-find bugs. Many classes *require* Dispose to be called, no \"if's\" about it (pardon the pun!).  \r\n\r\nSo I claim the \"if\" check makes the code *less* robust in the face of complex software processes and team maintenance over time.  \r\n\r\nWhat the benefits are of having an \"if\" check?  \r\n1. It does not help when refactoring. Changing resource ownership requires changes to Dispose regardless of whether there's an \"if\" check.  \r\n2. It does not help with robustness. If it actually avoids a null dereference, then you've only introduced a much harder-to-find error by skipping the owned resource's Dispose.   \r\n\r\nOn the other hand, I think *not* having an \"if\" check more clearly communicates the designed intent of the code. That is the reason for my recommendation (not for performance or avoiding code bloat ;).  \r\n\r\nThat said, you are free to take my advice and toss it in the trash. I am, after all, just a random blogger. :)","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2011-04-08T18:24:34Z","timestamp":1302287074,"authorUserId":""},{"_id":"0fc55458-a4c2-376f-83b5-d806b1794ff5","authorName":"Anonymous","authorEmailEncrypted":"KHKUnpSxhD0+SjDgBoJ4T1KAiUIPjG1Qrbwc55nGBmKSsVArWBYOTMHLTvHVl1w+mN/bt42KAb5SJmizlw6VNf6RikSaHCH8aQElXhY/3ffpRGg4ZD6w98cJpl2cxVfWHWP003Ag8J8uN4e6CUo1d0JhsAeHuk7eRm+ZSMbYuE6dqLHoSZPiWqHCym1ywlxU9KD6QU8Kqljdtv4H9RG+nSone5bUDhPN7g64gFK+58tO7LYv6zxC6g85RqT1gP03JgZKt4UiBoVEn5DErw7dJLIWM+0C00cwon+bXXq2w5m3psqeOG66WV3i3zYKIO6jomM5vhsh9/OWNSfG+tHrsmZcnlWdzOvTaDSt4w8un+Ifu4HhUl8byP0DUxJ/KITkM6iuQSX1ATXWvVU3/73225MP/M+VymmbueFQzqIrEeS5ZNHncl2nMg3eMOTOfTZ4NI9HfT34Hn7sN/zMpBuoShafeRSQD9FBUSkuy9G9uTyxA86lTxEh2XKg7gRaGRUNJTbFprvBdNy21eXyD2aI3Ug+T8wfeM78lWy/C2t/PuL7bvynqRbCrzz/2vzt8bi/H2rmtvSOCV8h2yjuR/+B9Z/Uj0goWQF4Q/xgbDW+hmJ6T7Je07qKnapNKRkRUXxrwlwzVt+SI/49HgFzoeD1lA/6r85lzUK3WPHA0gm9dYs=","authorEmailMD5":"3cb42db01b5edab948a576e1bf94a281","message":"So as I understand it, the class never sets namedMutex to null, nor does it allow anything external to set it to null. Therefor, it knows never to check for null. You are doing away with unnecesary flags and checks. That does, however, delay GC until the instance of the class itself is set to null, no?","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2011-10-17T22:50:25Z","timestamp":1318891825,"authorUserId":""},{"_id":"141f1f6e-15f1-3f71-b655-02256be6b115","authorName":"Stephen Cleary","authorEmailEncrypted":"lTTnZj9KiGtdEg5fAmmqp8jVL8tTubALDkRWwj/p+D6LR16EuGBp51IAG3sXMeoxmpeVnfwL89MtWav9fruU35XyGSPHfqr+oRkvjcgX3cNWFgzqjMbjXnuvKUpGpGghYDcqfuhVnfIxFGOlhO6pwJOX7IypORgA9HoR0elhUV34r4CymMViHmWrOv/i3oB0Rf0TaMxXKB6nDq0TOU1kRPPwbjvHHBkKgEtivzdg5aBnqQuOQs035el2blNoV3/CPezwFhvVNeXUb/ICsJWWDfoIFUh2JGANM45ALx7+ZoNLtS7GP1TVGheJe4muMMg3/pgPQgHmXWsqWUxDtq9ZPFtm5ClqR/s7nYD4PV6LWUh9Avh4oVClzA3hVZLAqXPoh/P7m7RDQE0JDJwQMOmUEvOlKST8tD5jO0RfcN6VoZLuTI9j5r1A29V2kW3UO4VzSs74ZA9PvZo85yv2IBcqgHxdgSPBvwVIasKO5JFjEM8vke5jXDbFLur7Mce8ju6Df7luINcC5Jz9BKwCgvQAEa2edSfIb5kfmP/q/8pl7YR/fYssL4MDK0dO/3Wgai6r9B0bv3WwbzREWUb2zhKuGidkYyzhXVTopJfkV03ySqACooltDmH7YZk0Pd9bUKaKjG9QL6FpjXCWgM5zxoMFBW1OhHcHPdcLPJhlVxv7am0=","authorEmailMD5":"36e44ea0274d8207eb632c566e60ecc7","message":"Not in the common use case. Normally, when Dispose is called, the object is about to become eligible for GC. In this case, the object (and its namedMutex) are both eligible for GC by the time Dispose returns.  \r\n\r\nYou may be interested in this blog post I did a while back: [http://nitoprograms.blogspo...](http://nitoprograms.blogspot.com/2010/02/q-should-i-set-variables-to-null-to.html \"http://nitoprograms.blogspot.com/2010/02/q-should-i-set-variables-to-null-to.html\")","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2011-10-18T00:00:03Z","timestamp":1318896003,"authorUserId":""},{"_id":"1617c929-afba-3435-a1ba-cf72ef98478a","authorName":"Anonymous","authorEmailEncrypted":"QLNnSFtH+ofqzUvSTCoRFccet/hDU8KSc/EO9xTnzyCQKvxyp4BIy1YA38acTDEJlHwZ8EDC73fZe0o2FyVmnkHtWOPS97TChK4Pq94VPXo6sN3uHTaazS4JzaAqCTs4fl6mAsUFvH5Mm0Z2teg3HsXs1/s9UQNh/Uv5/R927d/AcSIB7TFaTPigXnhPu7SWzE/j4XW0tp3tl8LX/WCv7PxI/7UfxK1iBk8Ah45bdY0gbk9Yu386/yXOXaEgkMKPw977OSKVL7cqRE4O1hHcZUn9AsH1CZHCOfKGy+elgy6oysirCbMuAkB3ShhZ22cjOgFgmygNYvW4IgKcQq9tHMUf4lq1bnC8VGy/1cYpQzq2WHJYTp04L4SABjvRbNMuRmZi2/l2uUQZy7+I0/Rv53wRIeS6YxmDeYfTp2AambV/VwsVztBsXBqX3yXeYRln2108lRsc620xJ8j2lzEpsS0/cpze1g+bm86T9LqVnymWErSkMKMmhS7F2z8ySdGSEIHdSgTLuuKluRDZsqEt5aiNNoJs8oJCpP+QZvSRuZYz0Du5AQ4GZvAfW1v36UEQoB9pD0mJ9MTqMXMLkuPh0aFxT0tM97FVNg02xP8Qh5hSc9+sFX3PiyJj5zkMVP8GINGV9CZT40Ze3VJ65tssH9fHWumBBPGWtp7zPbd+2tw=","authorEmailMD5":"3cb42db01b5edab948a576e1bf94a281","message":"Thanks. I don't really care what happens during exit. I can't crash in a kiosk sort of situation. So it's what might otherwise leak in a long-running app for lack of Dispose calls that I try to catch from looking at plain text logs written within the Finalize. One logging call is all the extra work I do in a Finalize. I have found a few missing Disposes this way. My intention is to eventually remove the finalizers and conform to the rules you lay out, but for now the finalizers are a handy tool for debugging unattended systems.","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2012-03-23T06:37:28Z","timestamp":1332484648,"authorUserId":""},{"_id":"23447563-274a-3ee1-b01f-a306755c941c","authorName":"Anonymous","authorEmailEncrypted":"RqwfjH10U5TTQgfiKZ4/FcxcEpDOAi8EFibB5pCKUJ0YAljt8HeqO9nZZrpc661RZmM1TJkYhmIhhQtNChfrUxdfEtfBoQ7KUVIlE4yIffCay7hGT4Rdl52+P5gJmJW8wzmAHGGbQA1BoID0YzfFBnHSVa+OuvJl6e0fmIHCucwf5JZUYtPl+pcVatLibH4aPY8yRKmK4LmRUdtJMzif1AL5m16mBWkXyNNnsSzjBk1FebvpVwWrfTu0YqhHS75t284Rrxd58dSuMYyTPQxHEt9elwOYrbCDo4lApOdmGYOd7GPSh7mZtWfAJEWALiOS8oUS5exUwyAYKh4qjIQkqh20wp5WEB2sBG/104duGjg/8kKRN1SrzI94Xhu4H5A9hW2YfMrUPEnaB931CsnNgje2S71d+UduFg4kiDJa5xc/q/BN/cdZFPQrRbxeiY0kZnIokthl65AlsSpVYPSqr5/EVZj07y4ziiRkQXeYQZJq8Dgfgf+1z8i8+/EApA1XCIhq2Xqsp5MepgRQ6lik5uaGY9Ps8URyFRTJluah0kihZQxjbsr2PcKcuSO99hMOvWlDTXnsVv8NgNyBho6ZTgqmZ+dg3CLVQGdyrWEMaab5NUE4uOXH0wrD69tbg4fc1XoZRhQgaUYB5wyV3E+knOz9jLepbgOSR9CIlXJUnYg=","authorEmailMD5":"3cb42db01b5edab948a576e1bf94a281","message":"I've read a lot about the dispose pattern and these rules. It all makes good sense and it does make my job easier, but only if I am perfect enough to always call Dispose in my disposable classes. I find, however, that I want to add a finalizer and GC.SuppressFinalize in Dispose anyway because I can put logging into the finalizer to detect when I fail to properly call dispose. Is there a simpler, more elegant way to detect failure to dispose for an application in the field?","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2012-03-23T02:34:32Z","timestamp":1332470072,"authorUserId":""},{"_id":"f780dbd3-cc22-3342-9b28-c6e36ed7aaf1","authorName":"Stephen Cleary","authorEmailEncrypted":"vCGB1iH1KFSq9jwgdQF3LagxSuVaWQf2u5JK82uH/ckp8AxoSbMLAVOD6ny8jgYxWD35cxlkHmOlOT411RkGWOdyz0S0HcmF2/m2Nl1A6LhX+RI54CZguEbC/EBnotejl5mL9WCOQkLNm+67Hj7zvlOSUiY6B78+Xn+pzox7P6ceaAhpHmFNu+GHyaFdP95ec54xNkcs4dUMNSAOJ4X/90GtKavpKx8Km8Z5RNzqflY1LvMrv06po4zlkUeK+lv4AeUE14zmlzFx0OtP/Zs0doDg1BwZtVOECV9ZVXt/OknrVmMfDyqOrOjFZouHMJv1ZpN1TAGHs5cKRvjdI1BPXbktDVHhpdo/Y3Rw5idzZiskgQXBNMdyy4W1RQQ0JlToEtMVSy0NWRujj8oDzpASoUy0cFA/qzL/8J0/DfIwuZLASYKGAsPtkrR5K+yutVFezA7FvoWyvhhEGpfak1jbnxZfjKE4SLAWNw/QSOe4OvdkZ3tGinae/lZHMQUpxRbXmdrz2buvGyS6bzMLxZEo0ds1HSC+72/nDeHMMjKzxRZeqyDH3oJx11JK//+qkC+BKrQEY1aoZ9RgI2aP/VRQ993EuwoaQZbecqhkdakQmh+Sb0FxuGTyKevCK0y2daDEpbfcZtcT9vCagqhBHR7JE6NEJ4FTGA8CKehoCEPD6C4=","authorEmailMD5":"36e44ea0274d8207eb632c566e60ecc7","message":"There is no easier method that I'm aware of.  \r\n\r\nMost logging methods may fail from within a finalizer, especially during process exit. Console.WriteLine is guaranteed to succeed, but pretty much anything else may fail.  \r\n\r\nI have (in the distant past) thrown an exception in this situation, crashing the process intentionally. However, all of my more recent code just ignores this situation. AFAIK, there just isn't a good way to detect it other than in a finalizer, and your code is so restricted in a finalizer that there isn't much you can do even when you do detect it...","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2012-03-23T05:16:46Z","timestamp":1332479806,"authorUserId":""},{"_id":"b1c413aa-dcba-3106-ab4f-a93bc1bc4c8e","authorName":"JCDrumKing","authorEmailEncrypted":"DyzBpX+F4c6WV5fc63cxlTbn74S5L4QdPAAs8pbgbwK935Ro0iSdM6lxr3w7ytZugHF8+iKbFB1o7ZzLdch5gPGdh4Ro4k3onFIJ5q3KH/FVKAXHHji7K5oZZSA7TFVOlmtgiZWgqKrmpElnOFoTtjqkgvOc+GCGHIqdPY8Dk0uVVVsuloYfM7QkNFfqLe7VzFy7fHzlvo3BNAcvZT8rr/jU4l8SjJXACNHeSTSVlZaeC+wjB0U+o1tyfOfmfS+YlOF3/NwLWowo0MMlskjxz3/rg5cQ1WmvIVcNVOnr1yZsxPN5KBzt1KogcMRckPUE1eUtv3bGZBs6tbssKwHzbni5wZZ+jKUhBiKJ8EJHkn8KA7lmsVbH9+0pki6SGRYfVS5NcuSL/shzw+mh64WQGTENGEeifShapMT7PfZr9ybtTx4C/TQ20tQ7sHC3w15P/KhIVQJsQhrcIXVeymZdvCtLwbXWjEbSawS0ID6b2Cef/K9GqxCqMl2LW2SusQ444VZ95T8YAR5nn5Sr++IlxnMXUwQN0Jls6DS02NDpmFWVytvqVfmdDCaZQQDna2OwNO9RKanZEJnOEprsK0xKyUAs032Z0iQhbbltU88z5nWm/O+Au3LnPykBmF1QvwbUducJgU2C9RDcVnjU7AOwRG+z/ebmKYDAxYy1T/XCUBA=","authorEmailMD5":"f011ecf439b738c61f5f2fc697434e0e","message":"My class owns a managed resource (an API connection to an external system), therefore I am implementing IDisposable. Due to slow performance when making the connection, the connection is made once in the constructor and I expose a Disconnect() method that delegates to the api.Disconnect() method.  \r\n\r\nHowever, I cannot be certain that users of my class will always call my Disconnect() method, and I want to make absolutely sure that the connection is closed when my object is disposed/finalized. Even though I do not have unmanaged resources, is this a case where a finalizer (and the full Dispose pattern) is needed? Otherwise how can I ensure the connection is closed and I do not have a leak?  \r\n\r\nMany thanks","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2012-04-10T20:53:08Z","timestamp":1334091188,"authorUserId":""},{"_id":"7d481fdf-aebb-345c-a3af-fb46185f9132","authorName":"Stephen Cleary","authorEmailEncrypted":"C9H2cH53oIORWXE6sXhItAObAXkoVKtRf74qDZci1DwcqQYAFf2OwaZpFplTXKIUFiqHlR0M9iW2Ccz801k2Srb+qpTNoGQEJ18d0NqypwDzLqQ7GvJwjlQlCmIkOwPPi2jw9rYL8+HLFOw67/l/LlLqe8VLUiA7QWIVhmeYiHm4LNQCwVSy4gHRYmPjT/gBYaQEM4DvAR6B8BgmC1oA8Thkb6W5sZ2cubJDhh2mIqXzPwmv0a3AkpMqGghUo5fXJVn+fQ69Hj8iyVzArNlomOXJZ6YH7xKGhO+4O8yOg0t0m6zWTZLeQR05rjElvegeHDbKgOcqi2pctZILWwlJC/6N7P8MkC15BV1kjWleuMyPEG8keHCeMuwy7geldwLTxYZ3P8wUIolUvAgV3MnGingJnRpURESB4WnOhB3T6BRN5eyf9ZmmCT6h2N7tDEgo7mKjitHld/gUj6J3SIMAlmfna4ZaB7g5nThV7zz6/eiu94/AlnRYBxN3h1IN9S5JowsYV3AZD03PaUqy2shPwK/6NgEweqMaF/urPI0tkHK0N03awmBrQZFB1U2AP2oyYdv2KtiA8dH2kxpBt4ivOvQZZ/UAMpBUXPiz4+CkLyL5ilushwCes6FeaBj4RdHMuFD4mYaV8DFCHeHibGbripyFdJxt0eHybWV7kKHvKQE=","authorEmailMD5":"36e44ea0274d8207eb632c566e60ecc7","message":"I would say it depends on whether there is an actual \"leak\" or not. What happens if Disconnect is never called? If the system as a whole recovers from that situation (e.g., the external system will eventually detect the connection is no longer there or just times it out, and if the external system allows other connections from the same source) then it can be treated as a \"managed\" resource - it's inefficient but there's no leak.  \r\n\r\nThat's probably the best way to go, because the system as a whole must be able to recover from connection problems. The only other situation I can think of is if the (client-side) API layer itself has some restriction, like only allowing one connection per process. In that case, I would lean towards putting in a finalizer which actually (intentionally) crashes.","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2012-04-14T02:12:19Z","timestamp":1334369539,"authorUserId":""},{"_id":"5be6b65b-6611-3f6d-b839-906d881b4df2","authorName":"Anonymous","authorEmailEncrypted":"oqislVkWUvCjlttXgDtp3NrGJalgShOW/X04vB19zceBafGkXDheBjoyhd1B0LfgSiTM783mBV4H454WBRLXRj5VwvmXhcpW9zx/iTb2ypl+nxhjkGKm1PKaHtCihWIgOFsyKEq+BMg/agmIdly6EMNQo/6X8URJAEKCJljfbXJLWLSq8Dgg1pCjFO12bpJGvSLZTJejSBACjRBw8sxrfY6LG8pSTba+Ry6kbcv1fn9gG12pFDoAfRBEn+Gys/ugusQPcrZufSV/Vh+nBYu2iLFvW9yHqipyb9wtjIanHvgfldbqpksZAme1hJYr8YNZo201Qah+Qpbp8VLf85J57V2qtS4Ff9LFH/qUEAxCbr4xm2J/so1MmXp4dGtAnA8PnHe9UPDTzs3zbtbkpi8Vuf2VfjUylGDJTv5yO1PmXcGthE8shoqyvmrsUWrlMLSoJcY4f3jEyp+IIiQBbnOb3XTnUQsosqY2RrVWID+wUkX6pOT8NNk9tWKlP1wKF+xOjrMkGRN+3IKlE9QZHd5wPcM5klXYwQ1kbTR5+UE77ViVwT+UAuxvusdiiSct90tUUzW22WQOvbyJApF9Ssh5tPNd6wmQdUPaPVKFfQftZu3POP4yaOnUJGjLzuXbZYojTEInmIIo22SfH44sJvP3N1tfZwNfAwpjHK18h+SQnEE=","authorEmailMD5":"3cb42db01b5edab948a576e1bf94a281","message":"You're overlooking a possible scenario with your advice to avoid null checks in Dispose().  \r\n\r\nYes, *if* the IDisposable resource is created in the constructor of the class and is never released until the class is ready to be disposed, your approach is fine, because the IDisposable resource is guaranteed to exist when Dispose() is called.  \r\n\r\nHowever, there are cases when that is *not* true, even though the class is still responsible for owning the resource.  \r\n\r\nFor example, if I have a class that can be configured to do something at regular intervals, it may create and own an IDisposable System.Threading.Timer. However, if that functionality is not called into service, the Timer may never be created. Or, maybe it was used at some point in the life of my class but turned off later. In either case, the Timer object is not guaranteed to exist when Dispose() is called; therefore a null check is required in Dispose().  \r\n\r\nAnother scenario might be when an exception is thrown while attempting to instantiate an IDisposable resource. The resource was not created successfully, so it will be null when Dispose() is called on the owning class. There may be other IDisposable resources besides that one that need to be cleaned up, though.  \r\n\r\nIn short, it is possible (and in my experience, somewhat common) that even though a class may own an IDisposable resource if it exists, it is not guaranteed to exist when Dispose() is called. Therefore, a null check is required in Dispose() to avoid an exception in Dispose().","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2012-05-26T02:27:26Z","timestamp":1337999246,"authorUserId":""},{"_id":"ab8c914f-77e0-364c-9ac2-f51a862ab217","authorName":"Stephen Cleary","authorEmailEncrypted":"j48ijfIEOG2I4pawl0bhjYaddOXqL+/Eip4dosNaqRRufS8YkuKBW343pqGa3YWsqwCP8Hf+zKk5cy7zmtT1zplLTMFSm0mZ97GCDu/OgmuXz3Wg8YqjVkjWeNDk8yeLJyHIuu491Qfkn97UJ7r2lpc8EJ3E93xj6di3lTe1Q7JbtzGjrgIccuK14MIs78OxwTvJFjHplwqOnPck6WMZ+8zab1mcGzWL0xO5vDAQzIygOIiwR+2fPCxUnMlj78UtQiYL3XOpTt7EmxAhDlYSf91SJmUIUDAKLe1SmRx4ro/+ET6CdIMSpKteAoONua6P+MwvkA0h/59mwlM3y+WrVyNtgwfChKjodiWLL+Hkhop/lnayKjG6gLEp0vKW54up8E2j8sZO/5ZH0k3w8GEpV4bmsMUEoWyRfyoYSwKW5T/Um0HV8OHs0Pan5G8E3ei+oJGN39HNWtQg87xV8yISo2KtFFA21v6W50Z5u2Cn1aR+W1XDc9fz85+OvsBRN9z/PdsogzK0K5vio1G0Pf32X83jQgTYr3SpJdIbSlXthwB2eve/H9+X38sjcx/NomX6vCyd6/XuffXDROz1ineS76UkFCxL4MKiwh725RfiFSV152S45mq143akOmFpl5H3FUN+FYRavknEwLzhj4VV++KI4qBJ5zbgWqjnz2r9dos=","authorEmailMD5":"36e44ea0274d8207eb632c566e60ecc7","message":"No, you should NOT call Dispose in your destructor/finalizer.  \r\n\r\nIn the context of this blog post, the objects in question only have managed resources, not unmanaged resources. In this situation, the Microsoft pattern would have a finalizer that essentially does nothing (it would call Dispose in a way that Dispose had no work to do). It is completely wrong to dispose managed resources from a finalizer, and there are no unmanaged resources to dispose.","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2013-11-15T18:21:14Z","timestamp":1384539674,"authorUserId":""},{"_id":"e4fc2d74-3edc-3185-bf0a-effce6d1a0de","authorName":"Anonymous","authorEmailEncrypted":"kb0i/paRKrGIgR0puxoCrAZeJTlvNTYpTBB8L4x5hPRAd0ZSEqDHQSzEWc79D7b8S+h7TAxP9igHKS9Cll6/5SpovFKju1fAw3UXYJMiKXSNKVgxhJMEfBURiPyde8h8FpJSH1LQ7YDb5V1h5J2cal0mGuJ999cgZOUvJ2FD2ekdjDmeB34TkmPWPkdLOD3kfY+mawrLxyzzUM0YdQjdzCNUmMm7/XnF4G/kBZb3H6mp2n4ng8yf9Cbb5+i9I8+ZvYpldhTjvuwUi9wiuWSk2M0tfgguU4OEGxCzzKPoWNaUltGtdMbw1IjyiKVxafrYgfnqSN5qQA1BlHXTX8ZZzjriJ9fE4ZBaICLl5YbHk1TNMxk/YHi3b3uQD8EPMg2BV9Zr+Wuz98Zj8gpt2ARXb0APQ4t4KOkRyE/ICqNDEnomUpig12f21aYChhdjsJUZ0VF7aW/T6SEgU/f98m6DqaS+tP+THR73GVS6xwqfiGPsKU1TlYp3FAfpcBpAjT2ghSS1E48XvjCWrpOERthu/jVoLP5KDxQ7PJuy15DyU/kTjafCJVysst2cQG6/m4eSwI4twTS9wHfTysLUGd0PeIT4DdzdLTDj9S5Rvw/omLi0lr0F4nJHsMbFfosZHyMJ4EXNj24psJwlGQKyFxZOJo/2jKSS/d4CiuBtF/ATKLQ=","authorEmailMD5":"3cb42db01b5edab948a576e1bf94a281","message":"In fact, you SHOULD call Dispose in your destructor, just in case the person who instantiated you fails to call your Dispose method properly. But as Stephen said, you must take care not to throw any exceptions in your destructor, as they will not be catchable by your application, and therefore will kill your application. Please see here: [http://msdn.microsoft.com/e...](http://msdn.microsoft.com/en-us/library/vstudio/b1yfkh5e(v=vs.100).aspx \"http://msdn.microsoft.com/en-us/library/vstudio/b1yfkh5e(v=vs.100).aspx\")","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2013-11-15T07:46:52Z","timestamp":1384501612,"authorUserId":""},{"_id":"0906beab-2068-3b80-a7bd-2af903725285","authorName":"Anonymous","authorEmailEncrypted":"CV6zaMKxd2GfPNNpd1JpSeDWayQs5xTmR0ihBwP00rGvFVo1ywZaPlDduwn3OLeHIfalB0o8sqwIB33IVzpnog6bxarGrxlzcKcDZAZLipo7jHi6w4iCvLf3Fh4cUFo9+TFM+2b9Ya/NU1J0X8Vm//SDAdGmiqDSQsypMaYF6vIEPC45vBYo0VCkbP+tLpqdb+6z4bk4vcCvJxODWo6or1j2tKydYDyqvm0PWW0mH1OIYr2xGyJtAOSGH90pVMYLTr3lF3skua0hSMa+fJERB848ZrjyRzrxvvd2jmfoX1SLlddhqcFX/HL6hxajKG7J/KCaeV3zl8LObN5A9MXO9icP91NU0y5HXKEbxGLWsr2o+Q2QzSVyEgoq6THjdUYU5ea41ij1fhelosoAzhgmdWzR725+OCmimK+TTr/PL5Nf1R+v16lYTqYpAaAWFqIu/OE99ck2zNUpGDTL2md8/l+rxHB8oxtuyItB1Wjbkl2zdTF9qr09kBZWzml3U2WfO3Keom3reTK+4gGD+kxVUMuYSwMSeOCaf+rjLYA+8nS2fe1d8eRmH170LVlk+6kEKpKmG4ZkZ3GnD7mTe1je8+K7UZazB0z75qEWH+Gh/AMATUNrGn+Z3CMPYTA0LZ2wCrfVee3FytVHs8NHgozohz1jSMtsLHNuzI2uqyNdxNc=","authorEmailMD5":"3cb42db01b5edab948a576e1bf94a281","message":"OK I must be missing something here: who will call Dispose if the client doesn't? The GC certainly isn't...","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2014-02-06T16:40:12Z","timestamp":1391704812,"authorUserId":""},{"_id":"74b24748-ef41-3b65-8afc-1fac6447e0af","authorName":"Stephen Cleary","authorEmailEncrypted":"wenHZOR0VfBwO+k/In9O6cVVF5eXyWroDlqg/+ijLTo4RmUhyE1BYCn8EnP+0SCMbzeo+V6HYqWQlwrubBGO79FKfEXn+5XutT+Ob9PazT7NsInEzUeTPL7TgUZ90CMNULf1SKI9nfQY48bSOKTZeULRU+iDS3lSAGuBXVL81Oiqem3Of37CLaF6mLrX1mJTDP8tgvTrD+a93JpBWrzxjwTD2JWeE2UQjaz3aGiUaKWl4Sl2IdfkJJlfHvaapMUP5dpK7gAUh2ZiHkZRXHRDiiMVLpDjodXPOFKv5hCIUAK1vc2if2LxvYyOIsx/CgDI+76C8albZ5l6WD7dAx0U3yHPHyg3IsEkCCfgv+kNw+leRnGeeM6FmmrtHIr7i1pfBsib8DZQWkhAfUzPhENdhCvSfPS4xsz3vkkaqY5A+Dgs9Q3h1vDrRfmSkPiXNyPHM4a7RCI0LwyjQLSldJzF8e+XzNk2/bpZkdX99C1rnnl2ywBK5vI0Pe/Sdtb944yVeFHdovuuylPA8VYHRCQ7pyzIVy/8PwlAu3GI/zBXmcgjC1m+vBOJ/u2dtFdCUk9fLfTWp8J8sHWNHCG9DOF+f1le51G1lpMzY9LLZSoGI+Rrw+sit5a4zU5nYzitnysuTxfek95xAsatciGC75KCjZll5mBoPpQlG3Bx3ryxaT4=","authorEmailMD5":"36e44ea0274d8207eb632c566e60ecc7","message":"It's the client's responsibility to call Dispose. If they don't, then no one does. The GC will invoke finalizers, which will clean up resources so there's no resource leaks.  \r\n\r\nHowever, some types require a Dispose call for correctness (e.g., to flush a buffer to a stream); those Dispose methods *must* be called by the client. If you try to call Dispose from a finalizer, it runs too late, and you'll end up with a race condition that could potentially crash your application.","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2014-02-06T17:39:08Z","timestamp":1391708348,"authorUserId":""},{"_id":"585b5a43-d51a-3296-8dc4-206d08fa60cf","authorName":"Stephen Cleary","authorEmailEncrypted":"feeJ3fUk8u6S+qRkHIVW63GlGag7gOSLwh4s+npwEOnL8pjBBdTQeivZKiH6WdXb7UEFfommoqGeMbsK76yLccvi2+pNHTjdLhf50S3HmKKtx90Xm9KScU03KBvN0nLEKVbMe5VJJDNY1sCaHhs2Q4g0EyJXPyJh5eiljSlk2W6j7s8mqujHW/tYQd0XDFfpAOHsJsU8Jff69YAhfagvocnIDE7Fj75y+JH4jtgiPCMZkzYtxvpyPaNJG5bsYNNmeTZWb+Fd9B6uYG7olJ4+QtczI5ZEa7JS1rjNzhcu/9mbX/XQSHCqlWJOs2xt04hJycffb11ZwMdCsq22txv/7Mq7O4S0txfDxJhZKkL6zo9EDgytbjHrVkW8hnRl4S4D53i0rGp6cR19bKHhzfbp5/dkJyaquSJqcmPVCJx7NdMu9s8c11nEQ09kTpp2yjs+g2HQ6VaN1dZVW+ountFQxsuMj+gbgGDvadFqouZHcqxmchXmfQaLJkawHd67BJADMJV5s4pkON3SN+a6HvdtVbwGD6BYLH2g9DfKvQJ/uruX9boxHHRibIZmwtgYLUxF2Uj0UUHqZr1vxJG8y2H1bkJhM2vjh5csb+uxhC54BH4DNgnRYhqZQ3uDWdrhLIfv0rxd3QmDgAXGO43Tp2zw/dFfmp/Z7GtUjrSZgox/4iI=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"My pattern is simpler. The example you posted has a `Dispose` method that is only called with `disposing` being `true`. The MS pattern allows for derived classes to have unmanaged resources, but as long as you follow my Rule 3, you wouldn't ever need that.","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"dfab0a7a-c648-38b5-b124-9513ef941e6e","date":"2016-11-17T16:09:37Z","timestamp":1479398977,"authorUserId":"disqus:stephen_cleary"},{"_id":"dfab0a7a-c648-38b5-b124-9513ef941e6e","authorName":"aggieben","authorEmailEncrypted":"b32F8zGcj+z3sgmj7LPeuQyTIWIiskt5lGZwWu3h/wxW+ONyr/WHSGzQJS/HSSqvR2PA2cQulsLKXL7lksz5g/dFBQooEqyb9vOZK3rpLey3z3EnZJmeF2++4wl15XcDSJVO2Wtllrucg6hBWXs9L1Yerp3pOoTSAJvaTWKkeQF1AuybpVXIhZ0EjSSWRRNlYM6Jc9XkDfqXBDxXF9HOd47m3VToThE0t4EguAb2ONWszloQzccFe4U6dQ3oKj6a7Br6uQb4y4N/bnthGFRecF8tdIFJpqB5Zely3BIqxbkH1iWj7MCahNjtv2S51v3nvtvfmN/h0kG8EEQB95Uh75wD7TwUn8eTIg3lsYFGJS7s3pzvU/DmTuSAgyaWtw3mLi9UvofkduVh0dRXkkvnNjb/OTKhEDbQi3ULPdDSU8Y9yNwPkEIyFWRxCn56VeAgQBPx3QAWSJgwkRwOsa5JB6js79m3nl7vOEmYkw73v9fc3OXF0pKSDBAQuEt+wTbMr1sxy28JBFawHZn5NjP8esKFO6ZhaVR9B97vh4eEkWX36I6rwRt6LG2S4459FXked6VrNMIYSumuepAV/3Ol9/40i3Z0JlnVQL0ZIjSyo70ozhBPHA1kEI3tdQ3GS7s3/E/6IbFH3/ic8KpZpJBMjyBJ7AJKnS7xaWuSE7U7JuI=","authorEmailMD5":"3fbc237a51acf024e65ae4da233f58e2","message":"Stephen, how would you compare your sample implementation above to the basic dispose pattern described here?\r\n\r\n[https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/library/b1yfkh5e(v=vs.110).aspx#Anchor_0: \"https://msdn.microsoft.com/en-us/library/b1yfkh5e(v=vs.110).aspx#Anchor_0:\")\r\n\r\n``\r\n\r\nIf `IDisposable` is transitive, then why what benefit does this pattern provide in the case of exclusively managed resources?","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2016-11-17T03:16:03Z","timestamp":1479352563,"authorUserId":"disqus:aggieben"}]