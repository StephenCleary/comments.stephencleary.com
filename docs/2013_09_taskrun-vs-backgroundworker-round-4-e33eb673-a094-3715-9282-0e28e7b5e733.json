[{"_id":"e883381a-ea6f-3383-ab34-1f65887a680e","authorName":"svick","authorEmailEncrypted":"","authorEmailMD5":"","message":"Any particular reason why you chose not to pass the cancellation token also as a parameter to Task.Run()?","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","replyTo":"","date":"2013-09-12T21:10:44Z","timestamp":1379020244,"authorUserId":""},{"_id":"70a07b2c-89e4-3759-832e-1de84d202b3f","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"I'm not sure cancellation as an exception is a good thing. There are valid reasons why you may want to cancel a task, and therefore wouldn't want an exception thrown. In fact the more I think about it the worse that sounds.","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","replyTo":"","date":"2013-09-13T12:57:03Z","timestamp":1379077023,"authorUserId":""},{"_id":"c58f9259-b4d7-38a1-9b44-3e47ad24cb72","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"I'm pretty sure he is not saying that cancelling the Task causes an exception. What it means is that using cancellation in a Task, compared to a BackgroundWorker, is all in the same place.. if that makes sense.. you have to write your Task with the cancellation logic, instead of checking for cancellation in the RunWorkerComplete handler.","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","replyTo":"","date":"2014-02-20T22:08:42Z","timestamp":1392934122,"authorUserId":""}]