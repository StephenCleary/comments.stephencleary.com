[{"_id":"e883381a-ea6f-3383-ab34-1f65887a680e","authorName":"svick","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"http://www.blogger.com/profile/17579249405158039163","authorUserId":"","authorFallbackAvatar":"","message":"Any particular reason why you chose not to pass the cancellation token also as a parameter to Task.Run()?","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","replyTo":"","date":"2013-09-12T21:10:44Z","timestamp":1379020244},{"_id":"70a07b2c-89e4-3759-832e-1de84d202b3f","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"I'm not sure cancellation as an exception is a good thing. There are valid reasons why you may want to cancel a task, and therefore wouldn't want an exception thrown. In fact the more I think about it the worse that sounds.","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","replyTo":"","date":"2013-09-13T12:57:03Z","timestamp":1379077023},{"_id":"c58f9259-b4d7-38a1-9b44-3e47ad24cb72","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"I'm pretty sure he is not saying that cancelling the Task causes an exception. What it means is that using cancellation in a Task, compared to a BackgroundWorker, is all in the same place.. if that makes sense.. you have to write your Task with the cancellation logic, instead of checking for cancellation in the RunWorkerComplete handler.","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","replyTo":"","date":"2014-02-20T22:08:42Z","timestamp":1392934122},{"_id":"0b0abb20-7974-11e8-9b58-1bb68f7113a8","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","postUri":"https://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html","replyTo":"312fbbb0-7970-11e8-9b58-1bb68f7113a8","authorEmailEncrypted":"YaMpVrTb7Wa90L05SXomCrINY1xjNlOrEyGD4p5zmCaVEIsElRCvc0MHj8SB4SNU9CYePjcXFHISyhSKhT8sj+dcnxAeFfTNgEuftPq2i27JrDM5IH6BauzV5HLaRgu5pNueZriI3PQXnCB3Asl0ycnAWhDN/XI6URHqhiCqcO/hi9+3r714WbjUz1j/AanFopSukF964n2qZqpeiphOOL8BN2VnXARQ3bBcgYx9S7dpHCsPyl1UQbbqnbaRmSpJKxEa4byZ9cM302t9rMz8hviPCik5CEBAs0mA3yAExtzlCbfXbd679MrNqt1efH98dgsKuhtT7q7TgTsyQ2Jvtoj9iJoZIjfVdvrYasovdw4i1S03T/ijD9DlICuBY4ittMljFWoVuDYLMQ4Q7zr0KSrQAmn5r/UnnaTbX9lOEhmdkEG/Tj4AW00dx3riEdmSTKhBBNqISUexXtQegWH1hr++GyAOJJpd5RYlpcW9ELdi6gbjmBf2WS6jF3TkS5rh3dS6C4hUjdwDDWTtuZKrPTDO75G7WwX0ArxL9dS+fVG93xHDK+s6D9Yzdn9G+FjX5XhIMuMW8cyffSJgeG50HJrr+bmXF2U3aEU3kVtJw3I/hYc7JewwppteCksEGbkcRZ5Ho5IooP46a/V0/bcXreopkKHIRLqLJRjyINcDQf4=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"I'm not sure what you mean by \"didn't work.\" Could you clarify? What did you expect the code to do and how is that different than what it actually did?","date":"2018-06-26T19:06:34.702Z"},{"_id":"312fbbb0-7970-11e8-9b58-1bb68f7113a8","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","postUri":"https://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Detlef","authorUri":"","message":"try\r\n        {\r\n            await Task.Run(() =>\r\n            {\r\n                for (int i = 0; i != 100; ++i)\r\n            {\r\n                token.ThrowIfCancellationRequested();\r\n                Thread.Sleep(100);\r\n            }\r\n        });\r\n        MessageBox.Show(\"Completed.\");\r\n    }\r\n    catch (OperationCanceledException)\r\n    {\r\n        MessageBox.Show(\"Cancelled.\");\r\n    }\r\n\r\n\r\nthis pattern didn't work for me. I had to change it to:\r\n\r\n        await Task.Run(() =>\r\n        { \r\n             try\r\n            {\r\n                  for (int i = 0; i != 100; ++i)\r\n                  {\r\n                        token.ThrowIfCancellationRequested();\r\n                        Thread.Sleep(100);\r\n                   }    \r\n              }\r\n              catch (OperationCanceledException)\r\n                    {   }           \r\n        });\r\n        MessageBox.Show(\"Completed.\");\r\n\r\nThanks a lot for this  very helpful comparison. I","date":"2018-06-26T18:39:00.830Z"},{"_id":"508c5a20-bb85-11e8-89fb-bde33cd2d3fe","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","postUri":"https://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html","replyTo":"0b0abb20-7974-11e8-9b58-1bb68f7113a8","authorEmailEncrypted":"oL2a00EAPgj0T3znc4Mwn+U2l5rDY96U1WqFBMqJdqT6DDFxgY0W6hR9rVULsHQOsFFm1fkgZ173hXLR+n5/r5zuRxs4LdvS8kJj+tI/N7psWwQkivliWpd58ufeO/EZLfa7fksUYc19kSf7NfzxgLp1Kc/8LQQlHYyR/cPMljSwmVoqufh4EWBQS7AaqpsNro/V/jxDi8Keg5Z2jrX79ickmsuXa4JiTqJ2v19aevPg//+6XaCOIilATUMTXsp9Sewracwy9wkjfu+F0/gKItldemH8AqhxMiSPoRGkwF+foNTLbBpHdOtU3XFwYZ863XRu4uO51oIGMuiIdVGiANnU5wzuVBnyG8E1hfrFp6IH4qVRAej8HwhfYChTrc76jHLuce5fllsQr/HK6gTF3ELeU6iDerTgOnauK69oN9VK9UbQilIWSjsoKmcHUu0JPVyKkU/0TNMJ1wU0scFxf0EEKhIsqtsxNIMV5l1IR4wjepH0dovFAJk9OnOVHfv47xyD1/sOxvdFz1hdXA0N3v9bm5V0s4/yG084TZqDlhvLvCcKGWofXFhyGB2sbUlO7V6WliTTm8YszP7BJwlNOTviYmClm65yh7f1xjxnf8xMlbwaLjoPCPs3Da3kWX7C6Y9yuqo+UI7t4YIRJkSNdE+Mwq2I8xH9NSljVRscETY=","authorEmailMD5":"83179169bc4ee81741eefc050ca328e8","authorName":"Jonathan McNeil","authorUri":"","message":"When I run your code I get a \"UserUnhandledException\" error when throwing the cancellation using the token from within the async method.   If you press continue from there in VS the exception is then handled by your try-catch block\r\n\r\nWith his code I never see the unhandled exception error.  Not 100% sure why.  Hopefully this helps.","date":"2018-09-18T20:56:29.821Z"}]