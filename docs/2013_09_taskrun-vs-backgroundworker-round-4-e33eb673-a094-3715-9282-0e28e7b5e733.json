[{"_id":"e883381a-ea6f-3383-ab34-1f65887a680e","authorName":"svick","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"http://www.blogger.com/profile/17579249405158039163","authorUserId":"","authorFallbackAvatar":"","message":"Any particular reason why you chose not to pass the cancellation token also as a parameter to Task.Run()?","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","replyTo":"","date":"2013-09-12T21:10:44Z","timestamp":1379020244},{"_id":"70a07b2c-89e4-3759-832e-1de84d202b3f","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"I'm not sure cancellation as an exception is a good thing. There are valid reasons why you may want to cancel a task, and therefore wouldn't want an exception thrown. In fact the more I think about it the worse that sounds.","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","replyTo":"","date":"2013-09-13T12:57:03Z","timestamp":1379077023},{"_id":"c58f9259-b4d7-38a1-9b44-3e47ad24cb72","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"I'm pretty sure he is not saying that cancelling the Task causes an exception. What it means is that using cancellation in a Task, compared to a BackgroundWorker, is all in the same place.. if that makes sense.. you have to write your Task with the cancellation logic, instead of checking for cancellation in the RunWorkerComplete handler.","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","replyTo":"","date":"2014-02-20T22:08:42Z","timestamp":1392934122},{"_id":"312fbbb0-7970-11e8-9b58-1bb68f7113a8","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","postUri":"https://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Detlef","authorUri":"","message":"try\r\n        {\r\n            await Task.Run(() =>\r\n            {\r\n                for (int i = 0; i != 100; ++i)\r\n            {\r\n                token.ThrowIfCancellationRequested();\r\n                Thread.Sleep(100);\r\n            }\r\n        });\r\n        MessageBox.Show(\"Completed.\");\r\n    }\r\n    catch (OperationCanceledException)\r\n    {\r\n        MessageBox.Show(\"Cancelled.\");\r\n    }\r\n\r\n\r\nthis pattern didn't work for me. I had to change it to:\r\n\r\n        await Task.Run(() =>\r\n        { \r\n             try\r\n            {\r\n                  for (int i = 0; i != 100; ++i)\r\n                  {\r\n                        token.ThrowIfCancellationRequested();\r\n                        Thread.Sleep(100);\r\n                   }    \r\n              }\r\n              catch (OperationCanceledException)\r\n                    {   }           \r\n        });\r\n        MessageBox.Show(\"Completed.\");\r\n\r\nThanks a lot for this  very helpful comparison. I","date":"2018-06-26T18:39:00.830Z"}]