[{"_id":"7f65f0d6-b539-3045-959c-7d3c00bedeca","authorName":"Stephen Cleary","authorEmailEncrypted":"R0USCFPV2IZry+31qL+PVCmco5QQSH359BOqc13VO3JyX2jaJeNHQiBFFOI0Cc7k6EFa5Q4Znh1Ec5InqFAh+i8ykam1fInaEAeSw0UFyO8aQ5KWKS/RfK+5TxkJUj8E/++FWVo8PrJW6UK2gl0KO5SVQLDTSRyJXv43v5bnWhb69VDoo3RG+BM/J0x0hd6520i6aabF9VieG/i54xwbGdR//BhtEqX0maZ173PCA+vIL4r/oEccMp+yDWTCUBn8nq/9WlDkvaE5h5cp0BnJsplLyRSjmeUIlYTVL8YlHJ2XxF4xJhPdGOs9gtHY/ntn9nduVzoSZxF6Q1xijGeqtWnwFmkZwrF9pMUQ5+BD4jP63P9vnMEbfRW09bwjkmg8KLWWWxg0e/0ppAMrQcAEGVfUwoDrtg7bkmrDgxbrKZKmJ/13b6IPSjFBG7ll3mYn3vTLu81c1ZwliuVBDgk03VGrm7Cy2/MDeKTDr/hfV+gXDIqh4Ok+gbzckjFA+mXDcTkUnhLkfKQhh3QE5HGqQfePKngA2xqlCM5vtViGvDVRuYs/Zky5sxnNSeX4PlgrALE3PHk5jkRZ/4mElGe9wZRTNE6r0//roPG/A7mEJMYBZt4ewTTbkq9xg1Lk8x3iM6VPBSbygSwCMB7nBjadSx+ZW4shHKYGUu1fSEUogFY=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Different teams within Microsoft have been adopting async/await at different rates. They are all moving in the right direction, though! :)\r\n\r\nThe current version of ASP.NET (4.5) has embraced async/await as much as possible given their severe backwards-compatibility constraints. They did a pretty good job but there are some rough corners (like no support for async filters or child actions in MVC). ASP.NET vNext (5) is going async all the way.","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"fff5b1be-731e-3cff-8cec-193525862719","date":"2015-03-05T13:23:44Z","timestamp":1425561824,"authorUserId":"disqus:stephen_cleary"},{"_id":"9af56d80-d3e1-39ec-9d8c-1d595b273adb","authorName":"Riko","authorEmailEncrypted":"Lrmgu98vrCw4AxNfvvH8A6YOBXvU0AKO7mhYv0MstiUTjXV/Kqww3lET6USU40aTihKZELmgLSEyjNPgPKShgYGog1KEC+Ap/wpSYwkWEzidmDbFL23afvus4pVgyggHbuyBJFkwOPfC3t0fmKJD3ovDuehQtzVmTrdROK7xft8MG2Oh8zmPVNSKXKLU+RAHO47SJGRgoBfTLG55oifZC4S7tDXPquuhfFOVR+kx/C9ImuCgeXOJNGKlqBTGH455ZD+iYojQZxD3cZrEKgCghCktjSxxSVn7jcnLO+0PT8C1MJBSCa0WzdcY53cHR4VItxYPBK+Xy/hW211HSCVXiKOvtExN7yAesk4vt62FnpOLo35UJYuHsE2OKqja6E2/TSvA5v2yR40fTeMNcZd2n7zmUN1iYIZA2bE/P8RzcjABQAe9exKnqR/sNMFMLgRGItF/kQ9ji1xpYDmf7mC4EJPIOl6Bqsvt2cVSGFpCM/xrLRT6XJyCVt26MABwfdGLfnqPOIsZQPjGfL6h0Qf0k51H1EReilN76if52xnpaXv5jPfr+T/TlraSaH/TB8PYcyI2oKgaI9bgLQlUfHKLjaCBhyKlA6ULVW2FhLfclqxatV1+GoBMhXjfhXsPU0Arr7horzb7wy80XvjXRIjpcY9Bg3+Iv3wB0mJskDJ4ZTg=","authorEmailMD5":"c1b99fc51717f507f13d0e2297a64fdc","message":"Yes, backward compatibility imposes strict requirements. I am glad that new development is free from this problem.I believe in the professionalism of the Windows system designers. I believe that in the end they will succeed :)","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"7f65f0d6-b539-3045-959c-7d3c00bedeca","date":"2015-03-05T14:15:51Z","timestamp":1425564951,"authorUserId":""},{"_id":"c2aad020-2656-33c6-9903-e20b18916c31","authorName":"Riko","authorEmailEncrypted":"AgQdG+uA64WtyNf8PnWQhfkfMv1zvA3WzR0+oirS/8gmeDXhtDdfnDpkiqoTefG7FAxCqHKlUC2t4QHJeMXfxJ6Oldok9sFfXF1+NcMPQ9pVUMT53akfXWpwHyq1ubk+5+FLAphV2B0h6Jom8eszufNVl1xjGvGGKGwt4u2CVkkr8DEgP8H9uu1nNpaupGKKBVn3mK7gUyRaiBAN4Xm9rR/HlYxyBwMK+xnrhimNFa8rRKujxz12YHwJQEub4Mgiy2V/gieSaGVOs8gmcXZBiWZSsUg4W++tgoLe9RI4i7b8OSWALAejHTBs4sDr2CKbtk7N9JOEBdw67sHHjWNRHWR3Z3yw9JrkdFUfLgeXFYZkDf8wOJTmX7BW18OCvJZElL7WHj0ozSLxVTy2T6mltjIJ883m2x0qKmcAx2k4yd5xO36LPe81UDmjHgx9bgys0NEHA6TYiGr2EYaPzsOK4O0fC+boM2VyC7oJAwWhTA2F3F4mhKqJegcYrmd8kRy1ao4IpBfCDiiRV7C1KVbOC6ebLVYpWa+xz7Yq3TtdhwWp+FrjaQByKZ40cfpQgG6k8ikdnNSFBQI6yAql8H+d396iwq8gNc5WG468Fw1NIi/rbN6tfzZ2pwxHFHiuH89h4IL+VbMrVLRXkfz0dx9Z/CAN9gI4QFX4MAzRX+2yK4s=","authorEmailMD5":"c1b99fc51717f507f13d0e2297a64fdc","message":"Is this correct method (found in stackoverflow)?\r\n\r\ninternal static Task<t> Error<t>(Exception e)  \r\n {  \r\n var tcs = new TaskCompletionSource<t>();  \r\n tcs.SetException(e);  \r\n return tcs.Task;  \r\n }","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"c5fb371a-897d-3fb4-87ac-5b2f6d95602a","date":"2015-03-05T14:34:14Z","timestamp":1425566054,"authorUserId":""},{"_id":"c5fb371a-897d-3fb4-87ac-5b2f6d95602a","authorName":"Stephen Cleary","authorEmailEncrypted":"eHbBusANXvtAdx+K0l2MWnFEAF7gLc36ht0PWA8J3Y2ckwIqfE1caEpS4U+lC3czXnzljQewIExNy+Psy3GPIJSLuVcdN4TOjd2OnR/mj0JNTQTyVD76i6GtfIR39lYyKBEE0xCkq93YvSTORGqFPmAQLZFUNQH4R2P3/3ml/l9JFvbgX2lH2exF4Vi7MFdl1x8dQR5wQH0iVQOD4Dyx19mMK2DQIYVyRAyA23z58vWIAk37aRx7+cY4nGBSI8hXEue+m0IDItp/CIHY2EyzjJ4/vHywfK8x+qObD3yeY3ygI3MvfKyEkSsFDe7KcfrxTgGP5DaNyizajk29WAQgp4kZYzPWfI3oJSiKK5hqp+CUN1Aw5cPyPODyr854SWZBxXq1QJbSkbcwXgtmcnUTJTKdOrlktQczLBzILqmK3dhXP5GED9CczTqX+GMdBNlUOyXsK6AUF9NLtHXl7DtlfAoNaL/M/rkXlxRl17dIfIWm6Oax+Cqebjx4oJVHf1jxXdZBD1ZhLocadM0HkUsjSwZ5enatQ4XK5vF+YozWuI5vwns4RdvNZ1cdBlBUNxBj7NSm3LmzEQbjp+XrJAyZwgBXQsWFUwL99v9RoWog5cSuAtQlJIH1t0/0vZeCVDDlan0X+g3z7zHhf5blGIvuKfutPlk0HN+n7Ho5BhK8xiQ=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":".NET 4.6 is planning to add a Task.FromException method. In the meantime, you can use TaskCompletionSource<t> and call SetException.\r\n\r\nOf course, if MyFunc is marked async, you can just throw the exception directly rather than returning a completed task.","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"eed07573-b7ad-3fe4-ad55-05f096f8fae8","date":"2015-03-05T13:19:46Z","timestamp":1425561586,"authorUserId":"disqus:stephen_cleary"},{"_id":"da9284bf-4fa5-3421-965b-abec073894df","authorName":"Riko","authorEmailEncrypted":"wkPngTijK5ncYZb5N3B7stAB7DKh25Ac0Z4Cn1MnSWD0DSrCHRiQVSdMX47nn3lUSfhKRG/g8DnjwZ+LTl9Y01yZ0hxpCi2WJpQdSv8xwT1MvYt4Mjciy82syh6SCzS7GEwksljD90l4cXvBIy+kWv8ud2dnhkd64jYMUFsTzVwgBaFzqyFzYAsz2GUxthtn9PiDb8xwOdR8djIbIDv2gnBefg/UDYTQmc4jhOEh6tKZ2/BZCRnPt9OHRspeofUOykMAwwnA3hsGlJi1rgIBeO2Rdq3dSKLaScCAf9NiOv9WWZPjx2E5UFQwZo1i/RKg6NfslJTV2v7Mi7OOTJVLG+RcNpwbShd5fN3ghaGW9L+ShhJTL2HfLfWzCGlPGBRQFgW4MFCBAclkdd077NAuJpXuCZgVG/DS5LGjqTNJaC7ceuy0S+Zoa9NAfTcf4rS1idUpRXnRS3f2Dj4yDqUdRW1ii1mvpZP8ZSnGYiNmbqw5ruToLpAWMmB3tcsI35pRyqagXrwhodgyVL1Fy1AQh2ximWcmS3epI7o0ltdy9JxmzO9py2qG8bO387u5OZGcVO2gcQa+l36Z1evfmP60qJLj993G8FbXl2AslSXIt4EwXERGh2cjbS9x3cjex/dvSaAE+4k5BuYX4Fuzv8T0WcPHE39yBvFAreth4MfwgZQ=","authorEmailMD5":"c1b99fc51717f507f13d0e2297a64fdc","message":"Thanks!","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"c5fb371a-897d-3fb4-87ac-5b2f6d95602a","date":"2015-03-05T14:05:38Z","timestamp":1425564338,"authorUserId":""},{"_id":"eed07573-b7ad-3fe4-ad55-05f096f8fae8","authorName":"Riko","authorEmailEncrypted":"CujXz+XILQOXDl7Bzkpn5yEPpApTrgNHKqaD6XFW/0Zv4C35kmsvskhsAf/V84dErtLYwfpY5f7FogkUUTQtLUxJ5fgNZJXzVP9Bc43/oNJUFA0wiwTJ0n5czR/naCUkacyFvUPdDEtBDZ0m93NFAfOW6Tl5K+CBJt9RztiP5mr3V/ksXjbsMEy+KTpG0R5fXFBTIXYlw9K0cHu+Unx1txgPdU2JELMhl2SWrDobQwf4NqNhAPQBxDRNGbHPJUSYDmL2k1H9PBi4kYmlkgBthVAOKwB6L/TSPPOj2IPrTajqw/zYJdh0IywaeFP2kaTG/q5WckTAxbS2njy7baX6Yoszk5Lom6peQU2ygOnjzPG9GxbU/UwnaP1RQKGKIfdf4QdeukkBlJq+6zozCYJepXLSMwPkflXo5mY8/FAh7mSKBp+jvpV1IU3PrMq8MI0mpPYu8vlvY81zbOyh2W/8PhTeuZtwpmRlUYNXjWIVNgZBLD+Bps/anCygZWMCt3BD6r8ilimZXEna2w58HLd/4T59bGxocoV+2RvjT18QXGaC+516e00VpBc8dnOH1MIgq9MgGE99mMZiVz9OoQqPfgHLBnKtomju/B/3pWCPoBD+iGEUdnzRWz8/cOuI8Imbjxgw4QsWe6KE/JKk7b7BTJZ9Y3QTSDAu2JH+Ihb/FMs=","authorEmailMD5":"c1b99fc51717f507f13d0e2297a64fdc","message":"I have a question.\r\n\r\nHere is a function Task.FromResult. What is the analogue, if you want to throw an exception?\r\n\r\nExample: there is an asynchronous function Task <string> MyFunc (...)  \r\nHow to throw an exception if the input parameters is not valid?\r\n\r\nThank U!","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"","date":"2015-03-05T12:46:35Z","timestamp":1425559595,"authorUserId":""},{"_id":"f0b1d94a-eaeb-3066-a733-9c599c44c8d7","authorName":"Stephen Cleary","authorEmailEncrypted":"ko0U12mcJmjDb4M52n+ZzlkgXcnUfwHZ9TkwIlxVTGiBp2DHYZy7Y3bX/meRLQxOPToIbDLR3cxC9AsRheN/HgsNBLHCYLZhfEsQoDFdX8HEmZwhZWD8ZDORL9H5xG1fs2u0zhKos3MTQWmug0lu5U0iS/fx3k555b/mENnUMk+DSiHRs9yusYzKru8kMCr6GEDYtc250m/rUmgoZ0xJHJGVjrPEA0JxK8hC7BxFLLcG7EmzBxBLzjWzsnyq8LDe6AAbNwph87U9GKkmWAFAdUP1KSchkMctD1CKiAx0f+VJ2BQmfgAZK5WeV6/hIbCxafa+WnqvKNubd0rCLBB97u8zILSG4i+w5T436hN+YekJgKrIIOrY2HpUIhTwsvsgB1+aShIMUjDfQPx+9KsWU3pzAlbLWAQriKmIy1vzEs+z0Ld57sBu3STC28VMjCF8HKb8seXV9Ckgo+fjaWg+zrHHVl9xAohfCKRD0hfAm1fpb4kRG62XRq+lTYxSHJRifNr6HfvQJmFEp0neYJgqqB1EMTzJ2i1gCgQKJkdbcCmZJbrAraiiv3Mtt8YwLVbcsiKJGEQaKmXgg/zQ6sWniAY+Rogimho/O0Nb0KddHdHclshu0xfNhSWZOrgxNHRmBRtaXOlphabgkBVJ3+gOXgGsiZfLvn+tp4lEdk6qDdk=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Yes, that's fine.","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"c2aad020-2656-33c6-9903-e20b18916c31","date":"2015-03-05T15:41:37Z","timestamp":1425570097,"authorUserId":"disqus:stephen_cleary"},{"_id":"fff5b1be-731e-3cff-8cec-193525862719","authorName":"Riko","authorEmailEncrypted":"ATOxdbLckkpyfVaJLkvM4AHdZOfWyReL5bTQmxYxdDQa3+KWDLlXK2wF9JR23+1lgQVYjhfnCkoH7sTDwaGz2yVXJEDIGxwb/FgEokCB++0kTAL5glexjZfdSTspfBtMdp8omgCiy5ckJZPKvJObX3c+hpfXv2XJ1NnwriJdeBKFrbUkgavTaJmT4w1swcHD/6g4LcWwTNwAdOgR1QD8EOYYWYZN679cBQo3S//651olmfmiKzZlBoJ9+4TwqYMRJgWl7dcgIogDFXfUyKOS+vusWPEwyKa8TqGcuxul95qXqvoXzFshIJuPKwEljV+s1maBUA/FvR/X4oVGLb7A4ZVQTnNQrk8HBtdNnmOAf4i6C2FZkcI+5XZay9n/kE3INPqM9bxjIU21VHkFIREvaCUlD42oRDd1crgLCegOvST9b2GdnASvde0BG+qD22PWILeBC2BScn0fjy6yhgKs35AwbZGEW0B0ncQVZtK1RpzIJ3Br2kstWT5BdgKPV5GZKAxMaCJ6XCSGsiw6KYt8pX9OvyK5apvwBLxH8lojoC1726fE/7niEa3/h7eu/gLKDWWjSgUqJN3nBBLHPZC3j2zauF1hLD+yuU6+ts8AHiSNWU+lwJsNcRI8qqs2pue+wu8OZd6fNXzZoOAtcc57dl48/7a3XJe8XaXEOOxdRwo=","authorEmailMD5":"046315652711b1678d922c21cf073dfd","message":"Hi Stephen. Very interesting to read a series of articles. Thanks, and health to family and friends!\r\n\r\nAfter the Windows system designers to simplify the work with asynchronous completion port, do not use the methods for asynchronous programming - a crime!  \r\nThe using of asynchronous IO methods in server-side code can accelerate the performance of dozens of times!","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"","date":"2015-03-05T09:58:21Z","timestamp":1425549501,"authorUserId":""},{"_id":"8e7062ce-355c-3d85-9b77-d37e9182623d","authorName":"Riko","authorEmailEncrypted":"L2m4lS+VjnYECIixTe5qmYUB99XZM8hgMDLxc0PJ0uQKQOWYgfsvYJdgIqo6ZCXnW4BV9gXiDg9sm+m8y+Jnn2QEq+Vg4eX7wbWd1se4yWQAJSfjwmUc9dgNqAdozHcwC3EbaSyHrLi9kSapDZ3JH0ea2FrY9hC/t0HS2q6zthMaJWoKLbCp2JBZ5tob4qzd9S4h7X4aXE50bPXGZDSbf2Cylt198I5G1oYWrKq8VJ9Syljd5eeUghsSiXhhQvWOgaixNm/+yhdhc9zPg6nIhoDyG6dpS8O8Oc2nXaujfC5v7cHkqsbUKqRbPgqTNn7vqFMIdUnt7YoRNyfIEEa+gfmjeseHRZo2zJZuMiqEtrRKLskzEZOaNlRt2hOuIIcApm8Q3sEY7ONVK80SY38ZhTMZS2z6OR+kYsEuhypg4+6wpy0BGIQMjMEYEDmnZfigSaSor0jO6/AcEBL/Muz/5Oa7kDVVvEYkNGc2si1O97yEQoB6xGjbp+ISb8B2BaNO+C0KrNTLHNsKX3bCASlPZyRCUb+pG74+uQdAbEO8RlA5p/2kGwdLYiL3LZun8aR0AwPSSNMiVVbAkmX2R4O1HnygdEEGGB1tRnLG7SRIiqg2aGgLBD6hs6amLtesVLtFM6+zpgG94zLuc2HUvHd7j+HhmNzweJcAdsFKpjemuiM=","authorEmailMD5":"c1b99fc51717f507f13d0e2297a64fdc","message":"do not quite understand\r\n\r\n1. \"I'd await them one at a time.\" - But this is a synchronous approach?\r\n\r\n2. \"may start flushing the stream before all the bytes have been written.\" - did not quite understand. What could be the problem here?","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"f627e56c-4db4-3eb3-9b2a-fb7a9092197f","date":"2015-03-06T09:54:49Z","timestamp":1425635689,"authorUserId":""},{"_id":"cf2248bf-b9f7-33e6-8c68-d5ac5598591c","authorName":"Riko","authorEmailEncrypted":"fhDLvYkRUuOUNAvdOZ5r1gueRhndBIHBBPIlQ5ZvzuzwP0NZPRrLLeqQBpSk58PzW+oDcF5M0yrwYFwcx5wN4ocOhyPFaruzQ4aL7PaiTLSjnzSY9e3T7pZs6UT1J72ZBXBCnD9Pn3Gis9KKtWTF0ELkOGxkdWs+T4PY1u+qr0u9EBY4z+rbm0myAd+9OWDaX3An3x+UXCjyzmvtdyxPyBX4pXLAgqp7zf3onlDjnKl43zU0LnB0vjDdIfn8fNRVxP8PRIEJca7lpMdg/FWu+xsPOkp4X4a7RAmBP8YhLCwpIHEAHb4PYzsJcRmpXO7wNvG0h5M/+NcGKkiGMS/yxWOnk+M66XZfpMwH6NFUWWqpu3rrgo830Gr061wkDBeeoQuLl8k1ovYEsnAItz8+5nxxcs6M7tGEpv/JgGaUxe2vCAaFRrn9WU/5GOxwhTOUTxB5Fkm6QxPTkfG9Uu1M/O/QhlgiQ9s+ANK+q6XN8LDskAvkdmP8N0pnxCjOOd241pSujhXKlJGJQcbJeCDIYpGH+xKrAmfeEYwuiGZTtVchUl56UcD7lQd+tKPSwxwBsZOoAupwX7/xu1xsSnIk85g3YTsE4QO/RNJT0C/+agkLopIqXxZd+j8S23Mpw6F5OuSEehOptMFGAUB5jXpasxI/WmahjWkQq8aVecQJyQU=","authorEmailMD5":"c1b99fc51717f507f13d0e2297a64fdc","message":"Oh. you are right !  \r\nI have not looked at what methods are called :))  \r\nOfc FlushAsync must be called after WriteAllBytesAsync\r\n\r\nI thought that there is a call of two independent methods (eg remote service call and query the database).","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"8e7062ce-355c-3d85-9b77-d37e9182623d","date":"2015-03-06T10:15:15Z","timestamp":1425636915,"authorUserId":""},{"_id":"e22f65d5-85d9-3af2-80a9-9cef7961c58d","authorName":"Riko","authorEmailEncrypted":"OTU9CmTU0R05BzDyM6jfLLeao+ogVXLVW/9T71ODZeVYWC2cWZcYUbVXIFiH3ZsXL8p8jVVOb/CmbzW1S9ZtvQjPbiKZfAjRkoSpkulKO1J01nnZ7mj9DLQYCKsYZtl2KM35p52Npd8W2u7tjk4nnAw7+aJ9lVSYsyVKox6hjPVPmQH7bktXJ8FVteanr0UuCmA5RHWLj+4APgJbli/NpZ9JSbH4/4jkRiTwjT5AANVdZ/lqRbE8w3vSlO1mTCXMdl2jogeccDVxrtx4zJulcPqMjPhd1iyMHrduNo3X3GXpMejdED94a2emZtpF+sQAapJtRKZh05on39rlqX+X5YUArv3LVQGnSEc+WhrBiOVEq46CWM4AG24WiveQYq32yLZYBPo/mP/3AqlFxZCfokK6v1KKYZAwOzR9oIk29Hd9xIy6ddJhT3DyNs4eKJ7PzLV1CBYUu6E/z6SXhLENXQk5zg73mRkAaoKwK2w9ZlmkTAbH86l9NxmFmwcQOKV/tNiLKDH4l6cyU8z4aAzz6LjRxlNb/jS0wvrRWde0iwJy6jFniMd5HNzVkAj1Sh06uf3aj3FfjwDKjEQbwiymAFxvLWSWoiS14spli3x4kVyLSguf9cragZch77X7Qg7DTViXg2HI0vLUHNx+GUNGAJL734LT4zBD9EmUEu9C6nY=","authorEmailMD5":"c1b99fc51717f507f13d0e2297a64fdc","message":"Hi Stephen.  \r\nAnother question about ur presentation:  \r\n[https://github.com/StephenC...](https://github.com/StephenCleary/Presentations/blob/master/Async%20Servers/Intro%20to%20Async%20ASP.NET%20-%2016.9.pptx \"https://github.com/StephenCleary/Presentations/blob/master/Async%20Servers/Intro%20to%20Async%20ASP.NET%20-%2016.9.pptx\")\r\n\r\nasync Task SaveAsync()  \r\n{  \r\n await myStream.WriteAllBytesAsync();  \r\n await myStream.FlushAsync();  \r\n}\r\n\r\nhow to do correct ?\r\n\r\nasync Task SaveAsync()  \r\n{  \r\nvar task1 = myStream.WriteAllBytesAsync();  \r\nvar task2 = myStream.FlushAsync();  \r\nawait task1; await task2;   \r\n}  \r\nmaybe ?  \r\nbut what about the exceptions?\r\n\r\nThanks !","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"","date":"2015-03-06T08:53:54Z","timestamp":1425632034,"authorUserId":""},{"_id":"f627e56c-4db4-3eb3-9b2a-fb7a9092197f","authorName":"Stephen Cleary","authorEmailEncrypted":"v25t7NkA8DTBeSLt5ats+JLOVJF5bwSTIW/oEKY5wnUnrKn2CCrns/Qy/dF19iUeXAKd7Viy40d3l92QBkw3JlSOkiO8AfHnmqPOC7Y7ZlQl9Hf8XKf8mIb9z0c1FJZCcgosElSR4qM9piD8XWIm+elG2JzlakeF7/XqpX4anb3qjZtcjLC9J0o6iYXPLKkMJLjy1DOvzKmwAnnxThoIqBTg5EPF8TrJ2PFI910cbQpzaXSp9KBw8kcrZey7iZLZtOZnTHqN7rtXBxTkf5x4r/Umy7PtTGDRNTgpUW8fdDkmc/uQCrAY33c65tFlx+DiFISegOWkh6s7wtyXbA1t6ZlqV/B9366P+7xzvtOFAYPGaRuwox9d8TrJQF/D1DiVzAh0D1XrjmYr2c07okD7BuxdKUdFfMzxj5RHmbdOUXu1iNQRhzLIlhUBq4AEWSR01uIqYTpb3SHBgpB7dMf2rhmpSsn1IXzGWjvPpKmIdblD5IFPv6kDNEyiE8lcl8ysBUKL85/ck2DjQ6fU6skz+yFhroyq0awUuov+Rd3noRNVjapZOIR68eBB64PvPdr3ImjKkT+nMZ6z3C4Kj8q6yO5UQ/PEfbGU9cxCwpoZsJI3XKJXT714dB7XUROU2BRczZKUIGvgwgLtB2aRxw8TuFHdM6qK9nlbazqWLDKAZFo=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"I'd await them one at a time. Your second example may start flushing the stream before all the bytes have been written.\r\n\r\nExceptions work perfectly naturally with async/await. You can just use try/catch like you would with any other code.","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"e22f65d5-85d9-3af2-80a9-9cef7961c58d","date":"2015-03-06T09:28:53Z","timestamp":1425634133,"authorUserId":"disqus:stephen_cleary"},{"_id":"30c1eea7-75af-3c1e-b47a-234108a4d5de","authorName":"Varun","authorEmailEncrypted":"H2Q2Ya/ldz2RCrUZsDTnPXfFC2DW1B6tuHvcN39Owi3/293tjFntKuXrJtmMWCiZzFiRH2dVY5werC8ipDpfBvhonZiR+mEU5NtjzuqhAKg/hp0UTZZxzth3p7IZnGFBPnAqWQBZGKK/bXd2fjav19NLnSEN/LTroZ+PSHEaz1y/qUSPKJKEpUesrITX4EeVja+HSfWUUjb7IwOw7KPodhvfrJ9VVQkvp+toSbF3Zr/zVzf4nghmm5SI9aj5CeUm/zZJd5YCAznRzOhhXZPh0b82PqSsJgWJSQTVSJQLHoGIojcaiX4m2gwDf/tjageOBIGqVTzo13Bp0/cKobq4EVpR+BQ8qH4OdsaoC+eM/47hOZnMoHLurcc7EXd+1Tu4oQLiTvoWiCqI/bSqLuXgbXA5+v99la7yYx5zmijBVBJQMncu0cy0kGBOM5K4RhujFMx5AUULejGH8o4YXN8zNzC+JMxCD4D+2SLveG+84NFJaRuGyOU0RfDRi/jN3CajqDBz1EqLyyf/FOCO2TR3+O4XgqBLno48Yq/4kwE7cNYUJZp7fR1OZk0+kMjjkx9oMXKPM45w9dqMuS32j7ZIytpIA5DHNeAZC4clBLuCLEozdDkyRNguZO0qruCe8I5x9dRZ5gwdoZgCE9ND9neiF6IeibzYS2uPTVxsFreEixE=","authorEmailMD5":"72bc0f61aa977594b000207e747601cc","message":"Hi Steve\r\n\r\nI'm talking in the lines of WP8/WinRT based applications  \r\nIn I/O bound await mechanism, If I have a case like  \r\nthere are 4 operations and 4 are independent of the execution and so i want it to run in parallel in realtime.  \r\nConsider this as 2 upload operations and 2 Fetch operations. All are async from the bottom.   \r\nSo the real point how to execute in parallel. The await mode of execution always waits for the first to complete.  \r\nSo this causes the second await to be queued. How can we run both of them same time?  \r\nDoes this means that the scheduling of these task on the Task scheduler and based on the availablity of thread it may or maynot run in parallel?   \r\nIf this is the case then there is very less change of parallelism in I/o bound operations?\r\n\r\nSecondly When we run the Task.Run code if we are unable to cancel the task in the realtime then it really creates a over head of executing unwanted code?  \r\nRegards","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"","date":"2015-03-23T09:02:00Z","timestamp":1427101320,"authorUserId":"disqus:disqus_weoHk4DDGw"},{"_id":"892d2a07-a231-3d12-8a2c-192e8463239f","authorName":"Stephen Cleary","authorEmailEncrypted":"meccxlx6mal6r5tWgcuNacvmZQY/ie+NnF3eBeYkDyPgJevWvVpcQMcszvAYSWiUYSXElDUUAC88lVr6dPMh1WZs8D0wG8AFZa88MZuW8Blp/C61X1C7QbmWSH9M4Hb74wYQxEonVfl+tEcDUrxtvrhqLNsJMTjQOsMMuimRCA2yBEKVKr5ipQWH3Gwm0dabmoIzHc+telqUTkdtPHYpPUehJXr2ExSR6Uxdy7b4an2+rNjhMn9ogMKE/Ds5zMVGIDJjUUCAGri0b2zqt8Z7QXlhjdxQI2PH45YfyagznpopwXTEAhF6KZrdHsc5IwTP8xupbYU4VUDmXsnPteGJla+8uCFItN7L90P6P4IXpg8WwGMW0lKOIF5Vo39dRwGLFUT8405ylUYpKok4Tu7qds1p1wqMcubUSN4DjWrgXT83i1Cyz9yNvTG82CMIiRCE8+WjNF1i1SqjhIz65VojsVEzZ0AYxywPjA4zbKxBX4uP/N5IEoPWyS3MB1z/z+9AMwYsYQU/LOjojVcD8gwYEejZQz3pCD+jyn9D2QIXuvWQaUOBJtRS+5YRMkH5Bss4eA5gjZfrx6/ZqTXEfM0cvPtgFV6HpYwSEM8rEoImIk54cgile8wXoUrzuhbCZshyMR0Z/SwlkXehUmulfwlsw/DzwERlt+kO7Jcn2pCeWWM=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"You can do asynchronous concurrency with Task.WhenAll:\r\n\r\nTask upload1 = UploadAsync(1);  \r\nTask upload2 = UploadAsync(2);  \r\nTask fetch1 = FetchAsync(1);  \r\nTask fetch2 = FetchAsync(2);  \r\nawait Task.WhenAll(upload1, upload2, fetch1, fetch2);\r\n\r\nThere's nothing about task scheduling or parallelism here; since these are I/O-bound operations, I assume you can just use naturally-asynchronous methods.\r\n\r\nFor your other question: if you start code executing in Task.Run, and that code is not cancelable, then yes, it must run to completion.","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"30c1eea7-75af-3c1e-b47a-234108a4d5de","date":"2015-03-23T12:18:41Z","timestamp":1427113121,"authorUserId":"disqus:stephen_cleary"},{"_id":"1e951bcb-d4c7-340b-a1ff-089876d181dc","authorName":"Ben","authorEmailEncrypted":"mVSr1pBzYOnqKtD2BnWII5wSjSwGiAEkJ1XGaSOppeM1woPTJC+mm1sgBvwTEpOFWZDu1OQH5UBajc0MEyqOSDAnwkdUho3+BduxgmY1KYYrxMblGAGxrBB7H7v5h8hChXJ1hG+RuylXv0KQToAryXiVQ8gwIBaKoZkxA5FOV/Yywk3tgy1wpgYZ2EsJg17Mg999Owtyr5IovpMog1Du5MqFdYCV/jwQPzkN/Ae+cowGizKe+R+zXB4BZMuzU9LqIt/WktkCOxLskUvC8QlVd5eiIS+KstQb2fCilqtHvP8Qald9bzHhZscDsMHz4F9weuQmo/v3eKF8jH0Myv9aJ9BS0Fbm6AnDx9kvUGT7HFB5OZjaRxYM3v301WnnCrrHufHO5/GGpoTOInGE+iLUgrhYZR6DBrbYrSCEaX9Bkfi/u8SVoi3kGd/PDh0HQYSomKoEql+Qar1ALwLn+QKZJx4PEPs9RMrVQPhYOWajERVcMkdDuurbPxi2J09oizqzYtMLNMcFXj6vR8/nDFe5YFzLkmZUfPZYO8jVCz83WoQeC5GmcuwAcq9/5Y0/2k2MHthV9dTcld2XaORitVPe/Z0UerANcBA2wpjw0L95r6/Ngcr1O+k0rIqDZeuSazFv+8dbCXFMvw8wqEwhRJcBOswgBR6JDqNwErMwwxY1My4=","authorEmailMD5":"2051a729796ae8623178d9b7f2320511","message":"Could you give an example of why anyone would ever use the \"async-aware\" signatures of Task.Run? It seems like I could do this:\r\n\r\nasync Task DoStuff() {  \r\n ...  \r\n}\r\n\r\nasync Task Main() {  \r\n await Task.Run(DoStuff);  \r\n}\r\n\r\n...but why wouldn't I just do this?\r\n\r\nasync Task Main() {  \r\n await DoStuff();  \r\n}\r\n\r\nThe latter option seems both more clear and more succinct.\r\n\r\nBasically, if one already has a function that returns a Task, why not simply invoke that function to get the Task instead of passing its delegate to Task.Run?","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"","date":"2015-06-10T18:09:54Z","timestamp":1433959794,"authorUserId":"disqus:disqus_pBuJ18B9FA"},{"_id":"5f62ea40-d5b2-3119-9175-623ccec60559","authorName":"Stephen Cleary","authorEmailEncrypted":"ePyDk/Wz0tcHmrOKL6q3w5oPZQw8jtmoOT1cEfC1KTwPuGH6m/hvUAaZpBLbwhSC+iF9ZEtQ79QFzWr+NgHE1BTzIkgF2bogBYGlc70HkWgdWjJFJwk0WVL49eSr/e0j9YRZJ1nhkoEih29tCmXlaGAzbgT5nYmcj+wx1SVth3+yetwsIBZH2vidKTCfDUxCUyTUSLBweerx9EhSmGsL1sfCzMD4LCyqcxYUOunIHFQiIv9Tyf+Wf2bIVdhwTeJKawipogfAFIXa7ycwa6x60qTE/C693hPOlMo12JR5r/DQg2mK8Ud7eA5Tji6HKRGPFXufp0xdGUFfK2pyRiiJKFzj7UFwnojuMaUtMHrlHC34gXL5h2Hvv/x4ugoXtPReOIKY1ScXLpsehTA/6BlWgUWlAtJ123KJifuH5UDrrnEvPeEk8iarby17FYOmftU6S06TF/a6LFHg8QK1xCQiOZexVlMCEOZY0nDYgWkHlHHCrASskk22aukf6iEX9Al0sRMBXZrLt28iFRZ7bYaFijhoGDtfkIPfAa5k7Aaqc3iDuT7tL1Ouoa/whHU23zCDLOnFOWDN8wVcmedp6QRaa2wzfWfjr5dLdTqCtsgDzY7SIRuhxUsQ6GcaSLCXeFQWjQ+EdMER8OaVRNu4VdPJexrFyIg/NRZuOadHPhulXfA=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"The asynchronous version of Task.Run is occasionally useful. For example, if you have a library method that has *both* asynchronous and CPU-bound portions, a UI-based consumer may elect to use Task.Run. Another example is to completely remove context, e.g., if you're doing an early return on ASP.NET (which is dangerous, but sadly common).\r\n\r\nNormally, yes, you would just invoke the async method directly. Wrapping it in a Task.Run is rare.","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"1e951bcb-d4c7-340b-a1ff-089876d181dc","date":"2015-06-10T20:24:30Z","timestamp":1433967870,"authorUserId":"disqus:stephen_cleary"},{"_id":"10c4d77d-04c9-3f32-b6e7-bf1e2bebdd47","authorName":"Ryan","authorEmailEncrypted":"YuPpbWSdT80z5pxLF7kSgz2qGDzSp3qFvN6syKVEY5N94IHWACOr9ocFh+d91ZUHS5z5FcH2KBr0bACNWFYLl4VoMUUR689kt39eWyLU6l68n8FzT+H28MT+Leh3SjQ9F1BM0qG8ta2u5fQgw8w1f2Gt41p9AV9xoB6N1LpDFAC/So3Jj1ZoVfreOq1s1yrvb9o533d8SeEm4cImhvDmWgklhC//rJcHPD9R74EWf0iNxM4743FsOZ9r05i1ddiLGwzsJ3cNTvLjrti6bwqE5LGCwBo8dJ+oIO/chZtmXNivulX/+sd9d5ZOgijaHUr3SgRUJMK629MNCeO1OVgTtSHUKc4J2fVvUi06SVYcjPA5v9uqn5yy0cWsq8ZP6Z4OlqVLIfjvNy4CBeSnLiWusBBu+Scx9bl3tBK8wuk3qhspM0g6evWcwYi3VacEmPD6PvySmg6/s6yF3HfaXGB+cgFUanRxMk5+LNvu6S6aEsQYZ+fh6OKF4xYZJbGgypMorUP+U8wYR1yV9+MCzOEBy8jLd0SSb4NQ6gZKqckldCjK6Z1z+VVEff9YHmqGf2IgcPWnp/nIL9YNJBvO/3ibT+I8rGiEUGj60jbL+NgACAAtsJWLiK/xYtfFpKhKp5aEKA+aQBds2L5+1XYZl7zwjVFeaundIe/9QNz+ADj9lcU=","authorEmailMD5":"81a4cd92a3a74962f5775f58dc73bd86","message":"Hi Stephen\r\n\r\nStill trying to fully wrap my head around async programming (getting there bit by bit). I am in a situation where I am overriding a method that is being passed to Task.Factory.StartNew. I want to use the normal async/await functionality, but I think it won't work out of the box:\r\n\r\nclass BaseClass // can't change this class  \r\n{  \r\n....void DoWork()  \r\n....{  \r\n........Task.Factory.StartNew(this.Execute(), CancellationToken, ........TaskCreationOptions.AttachedToParent, TaskScheduler.Current).Wait();  \r\n....}\r\n\r\n....abstract Task Execute();  \r\n}\r\n\r\nclass MyClass : BaseClass  \r\n{  \r\n....async override Task Execute() ... // What I want to do  \r\n....override Task Execute() ... // What I think I have to do  \r\n}\r\n\r\nSo the question then is: how can I implement MyClass such that it properly uses async/await? My thought is to:\r\n\r\noverride Task Execute()  \r\n{  \r\n....var t = ExecuteAsync();  \r\n....t.Run();  \r\n....// or...return Task.Factory.StartNew(ExecuteAsync, CancellationToken, ....TaskCreationOptions.AttachedToParent, TaskScheduler.Current).Unwrap().Wait();  \r\n}\r\n\r\nasync Task ExecuteAsync() ...","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"","date":"2015-08-24T16:33:21Z","timestamp":1440434001,"authorUserId":"disqus:ryanrolnicki"},{"_id":"ca557d58-946c-3922-8764-06535435669b","authorName":"Stephen Cleary","authorEmailEncrypted":"WOEzrDA+wBIzLLjC3rDHuLiAgo5asS0eJZE3pzRtlftjWjjcMTH7nfvRala+EaxNVcWJIhUv58PPcrNAvhHosSAR2LFEQMkN7L6/R6X0S3CaW5OVQADjihTfKKq3r+euGbiMLfgX5ikOJCkFWzapV7UsDdpC5/kJMUTpk8AedMo2qzoDALswBcxYWocQlpUkAwq7WXlLiXAFELJ3CKRUpJNnRUIT9bo4mnl5SjgBCnb/+yLznGXAvWz2bESaHB81xzuoQkVftKG/2lTxRXDcAqXCyf4IwT15MAt2QJXVBy82xo5GdgVgs0Q173Gy6x1cmR0FVnkdM4QineetUcWK79iIP5J1+eHYfjvN1NjHOn5J8mwZMev3KF6suJFdoHM1aUytgNrmcEyqAP5i8Y8wm+whJNQur1r/Csagh0C9vYO8l18ZSz+Uc8w9aV1OSpbIw9P618tUE8lCJ5nUTTETIL7wpmhzBxhxjyfn9vxinT3/C2YTeeWlz0GwUgShn8/ikDco9SqIisIAOcIB7q8GGdMFSArJDF2VPXW5KgW9gZitMGFl6NUbPjp8wFBsOPUOnm6hxWHD4JPz2xh6p/pZqS65W/AjBHrP6/07N7oZ34EVBWTImUn+g6h5jJozBwKeAht81P132PC7NMg2M2PB+BcjJcNpA0H7Rp+lMZePbQQ=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"You can implement any Task-returning method with an async method. This should work:\r\n\r\n override async Task Execute() { ... }\r\n\r\nHowever, I should also point out that the implementation of DoWork in BaseClass is highly suspect. I would certainly change it if at all possible.","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"10c4d77d-04c9-3f32-b6e7-bf1e2bebdd47","date":"2015-08-24T19:07:37Z","timestamp":1440443257,"authorUserId":"disqus:stephen_cleary"},{"_id":"0fa206f3-b09d-34fe-88c2-18cfa4b7e706","authorName":"Stephen Cleary","authorEmailEncrypted":"RaDJEysGwVM6+W0WnWsurHWtDJ7ZeFxuqpR6EGwkYHDwBB+Kq70uQWk26Ls18r6isw5UheYMvkalCWSJaI7Ooo7kLcm0mFG15+sgOP40pt0OCO0Gc5UwB13loC78tfwzfw6J1zO5YWrNNaHoyPXwvB58boZKkXbco7HUJgqIPvLQzeQuRnuo1yBBW4OW0IssUUbVJYR9WedgduxU/Dz7PD+s7B7B8OQi8uuGQOfeuxEWATRnSmDuz4/UpQpIUXNDhMAbh1fN/a4MlpYTEt3/O12Wy0u+fCASEahnXKWkgjJsVqKiNn+ayKog9xDuocq8zFiNt4S3OPXtsrtu+T04l/U44pOFFOnqL9VBNm3f1SPn9IPpL07ClzZLEtTXmlqNdhSYA/HiUja2BPBgMIRA9Gq+15OapWQplqvGMiYrLlDgQAF94V5gf4+QritdUvS2TMl6CcKC+3mlPnTlYF0VC4Z0QzqfK3X8UFQ57ni/wrMyz6dOA6papBgsGAEqEykCIYNyhL0wwbuGZvFSPjsYZJvY3xRJPov5bCaML0CqV4GzzlDF1+Zmt0RJdj8NpI+svJqrAdvgi9Sij3QPpd+QSEXhKH98SZ2VNeJCm7x9FKwZZkZn6c7ezFCunG23OHm6iS2VYj/SAbOq0kqknCHID/4CFIH1MOfZr6LP67H3HHA=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Exceptions in async void methods cannot be caught; this is by design, and one of the major reasons async void should be avoided.\r\n\r\nI assume you mean you're using StartNew().Unwrap().Wait() in your (non-async) void method. This is a hack, just like any way of executing \"sync over async\". I'd recommend at least changing it to Task.Run().Wait() for cleanliness. It is, of course, still a hack, but as long as BaseClass forces a poor design, you don't have a choice.","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"72ada546-72b4-36df-bc7f-3b4e0586f976","date":"2015-08-25T11:17:36Z","timestamp":1440501456,"authorUserId":"disqus:stephen_cleary"},{"_id":"72ada546-72b4-36df-bc7f-3b4e0586f976","authorName":"Ryan","authorEmailEncrypted":"HrO5CYm6/6KNCOB0h4HFiqn+05NhGi1nV9JvyaQhrWt6EedDmE2mORjhQbLHb+0FjEfdf+ZfrULRPjvzSwi2YD6np6WMLBs2y0jlI7/SOxKY1akECu50d3Q2prDgsfQmk+KzHQW7+VZHwVNozNJjWWRiFdXSqCMUeM5RI5CPdHczpBDqC6qV1d0IOHaylPzNhcMOC2yuTwenJ3ZSEipADNYyhqir6kUj4GZWW5l/Q6QG5XPUHEoMvzuqEFdXBmdoecQo7xJcsCTdMPRS7fxGc8Uft/pUFF0uVMfd0+ZMNYnyhl6EdDUGdG68IclZ8PUtA55cRWwKf9/W/2NZInBB4ex8eWnOQKMRVPMko2beFGWo/D2dd7vvgqVlY5d6FNrTV2WgTkpEB/jcRJOdNLQJe6rZ+jgceje06xalZE1LCBIx1s/Lc5tnQkI73kDyeZh9kkYMbNryXgR/Ccc9fQ0DIaPjJS5MS7E9bO5AjbI188l12HjH2DlqSTkLarkBZwTmoJLN3xERJceLXDi45ZbqN+dbY54lbgjlqttyB3/5yObFibVk1NabV5PPbguHjyo00Z0w5j+GJqsqjh3B7gekbx0REaZkc6lcHgFGm1eOUq9fz75VAaZb+c+fe2rb4WkcrNzXXFPL9Mwlbcge1h6u2kZ1icdZjYaCSzbEelSjA6Y=","authorEmailMD5":"81a4cd92a3a74962f5775f58dc73bd86","message":"I actually was wrong about Execute above - it returns void rather than Task. And I was able to simply declare it as async, which worked fine, but the exception wasn't being caught & handled in the base class code (assuming this is context related). I believe the logic is working now using the Task.Factory.StartNew(...).Unwrap().Wait() solution.\r\n\r\nSadly the code in BaseClass is outside my purview - gotta pick my battles :)","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"ca557d58-946c-3922-8764-06535435669b","date":"2015-08-25T05:14:16Z","timestamp":1440479656,"authorUserId":"disqus:ryanrolnicki"}]