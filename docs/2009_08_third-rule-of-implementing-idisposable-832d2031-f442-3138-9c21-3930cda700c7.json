[{"_id":"b9026e8a-3504-383d-9766-da15badb13ed","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"Umm.. WindowStationHandle does not own the handle but does close it by calling NativeMethods.CloseWindowStation. This goes against the recommendation in the 2nd rule. The member this.Handle is just a reference to the handle.","postId":"2009_08_third-rule-of-implementing-idisposable-832d2031-f442-3138-9c21-3930cda700c7","replyTo":"","date":"2011-04-09T19:18:03Z","timestamp":1302376683,"authorUserId":""},{"_id":"e863d6d4-0e7e-3479-b1be-bad04d39439d","authorName":"Stephen Cleary, Nito Programs","authorEmailEncrypted":"VkfslC6JbOtPz9vqFXVL1Sp+j0VeV9fi1hdXVqy8tDFyPXzXezOdevmMRIkAQrhGZEhGbWpKScdNNXEnVZK5E1lnTG7ou+HICXbgX/EXV2/BMW9jgkPyYhxcAilry45BDg99WvY+UbQTgUcLHp5A+TBihK3EeOtzEM5TBeS0zjxUepWOGAfJlxhw0nntITxpzPeK6YdQ9BcdzQKoQ+9T45PN+O3ruvhTO+aVaz7j++Z2stNm+eHWdqG7PXXX4d7xcafsHA7qVCbjR8VT+SeeTD9zTwkgEzPyVR6tc4MpSPD8Iyhk8jMEKotkLtKiw3qe7uTKyzo9Me5/z3mSMaaiLbtVnKFZt8sdJGrr4kBTDu2vevDM6HG1BGBVlWHcx9nLC9959YI7qfY9MTYZS9i2ba0eMp/o/gCXMURWJAJ/n0l7uIF44YP84fIb/OZY80YxrZPMtPl2Y6es5xM1loaTbhPON85gL8qTiTlFfam9CZpuaPUZFpAVgsXi5faJCp7CqrOIlGROYaTKQSnKX4jcmE2l3/zQO1GgFK7ZKDgzvmWRyotOgHpjGTIKnLzIaMBeFnq4QEmX5U/i/iX+zDmSOu1BVKDljPARtnc9fvA6Rh+1hcVFucUX2s30wGUQqggE6jXhYwKExaaiC9LKmZ1EXQNhfhCdfSTNTVCsX3fiYRU=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I'm not sure what you mean.  \r\n\r\nWindowStationHandle does own the unmanaged handle resource. The Handle member (normally provided by the SafeHandle base class) is the handle itself, not \"a reference to the handle.\"  \r\n\r\nWhen I wrap unmanaged resources, I usually have a lower-level wrapper such as WindowStationHandle which owns the unmanaged handle; and a higher-level wrapper (which I would call WindowStation in this example), which owns the managed WindowStationHandle.","postId":"2009_08_third-rule-of-implementing-idisposable-832d2031-f442-3138-9c21-3930cda700c7","replyTo":"","date":"2011-04-10T01:58:06Z","timestamp":1302400686,"authorUserId":""},{"_id":"faebec67-9fb9-3d37-b43f-8acdf3371ac5","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","message":"Most discussions like yours of rule one mention database access as an unmanaged or external (to the CLR) resource. But the MySQL .NET connector has a Dispose method which, according to the rules, makes it a managed wrapper. In fact, the MySQL .NET connector is listed on the MySQL site as fully managed. This makes all my database work fall under the simpler rule two.  \r\n\r\nWhat I'm really saying here is that the statement in your decision matrix that a managed resource is \"an instance of any class implementing IDisposable\" is much more valuable to understanding managed versus unmanaged than indiscriminately saying that a database connection is an example of an unmanaged resource. This was only made clear to me when I searched and found your decision matrix, which you intentionally split into a separate post. I really think you should throw in a link to that article in every \"Three simple rules\" page. I don't see it otherwise. Very valuable.  \r\n\r\nI've read a lot of very long, technical articles about the disposal pattern, most of which I didn't understand because they all seem to be written for someone who works in the MS OS development group or work through the API exclusively. That includes your own \"What Your Mother Never Told You...\" article. LOL. I work almost exclusively at the managed level, and it took me a while to really understand that. Your articles here have taken all the low-level obscurity and made it accessible and concise for application programmers like me. Thanks for the great work. It's really appreciated.","postId":"2009_08_third-rule-of-implementing-idisposable-832d2031-f442-3138-9c21-3930cda700c7","replyTo":"","date":"2012-03-23T07:07:44Z","timestamp":1332486464,"authorUserId":""},{"_id":"d0207921-4c1f-31c0-ab92-0c9f78f3fa6e","authorName":"Stephen Cleary","authorEmailEncrypted":"vaa9yDz3ZRJuwWV3e7ooC+C5X4xjL6JWOW9NEnJBzs2ostBo0ajQ8f1+O5ulfcF/qUG/UhlRJEjjcseoprMksEbN8gh0Wjfz+BK/9P6LbVSyPcu2oKoPpRSpoAxJt2OqzMmnTgcNzNPKTwNG+Rw42MfqiiiZ+R34qNxzFS9oLXmeQuN0pmLiTNe3SFqTUPsKQ17a/Z8XvtbrmBFMLjixL6Llrxg4Ae9a/r7a85r2Pe2dfh/G/OIqdMWw9gCALX2VkoWSoplY1h1RwfgOWmR8ICL0BFZCyMKnNBdt8LVfL2/hWS6IIFHmd0nr4CjkW1LBKDxLYQRFUn1jr6RTS0WP3EIf1fmfDE9uv7jxDyi2B0iktIqAZflwGhwqeGmNEme9uZTaP6TPDWc1GbijSpg16DernfXZoGG1/r51k1oDxWYEZlJqLdP9wcppZqxfr2pW+WNv+mq16itunSXOO1hbFqVVv5tgPJll6UiwxXJMj7AbhMSFOEZOlxho+QzIaVTzfxpkr4f9Z+nqyuhELEgfvHfQW5UicES41h7jmj9uSBYQgD6qqHch/3tlOUnN0DuYfFl4llbTg1SmD56GYOGlGBUTZ1zY8G/2VW+tSBjE/X9XpsuEru7LUBfJwPLZpWfZW+oRoW2YuYVRawhdBjOSkp/NSyahK8Y4EFEYew9u7qI=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Thanks for the kind words.  \r\n\r\nThe Official Authorized Recommended IDisposable Pattern was designed to handle every possible situation - including base classes with a mix of unmanaged and managed resources being extended by a derived class with a mix of unmanaged and managed resources. This dates back to .NET 1.0.  \r\n\r\nWith .NET 2.0, Microsoft went through and changed all that. They still implement the IDisposable pattern just in case anyone was depending on it, but internally they split everything into \"unmanaged resource owners\" and \"managed resource owners\".  \r\n\r\nWhen I started writing about IDisposable, I was actually just documenting what Microsoft's actual practice was rather than their official recommendation (except for unsealed disposables).","postId":"2009_08_third-rule-of-implementing-idisposable-832d2031-f442-3138-9c21-3930cda700c7","replyTo":"","date":"2012-04-14T02:28:23Z","timestamp":1334370503,"authorUserId":""},{"_id":"b4edf360-cb7f-3912-b85c-7474fb081ff0","authorName":"Bombadil","authorEmailEncrypted":"","authorEmailMD5":"","message":"If the intention of this example is to be as fail safe as possible I would avoid calling a method with unknown performance and (b)locking characteristics like Trace.WriteLine and new Win32Exception from the finalizer. Whatever is intended, we should always make sure that the finalizer thread just does the bare minimum of activity for stability and scalability reasons.   \r\nI would also avoid the string concatenation which would cause a new memory allocation from the finalizer thread.","postId":"2009_08_third-rule-of-implementing-idisposable-832d2031-f442-3138-9c21-3930cda700c7","replyTo":"","date":"2014-03-21T12:33:10Z","timestamp":1395405190,"authorUserId":""}]