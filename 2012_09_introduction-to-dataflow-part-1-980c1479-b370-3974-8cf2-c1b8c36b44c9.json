[{"_id":"51ca3f3a-c2b6-3abc-93f9-29b2b93e6f37","authorName":"Mark Zvilius","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"http://www.blogger.com/profile/06499768056784882414","authorUserId":"","authorFallbackAvatar":"","message":"You describe Post(item) as synchronously posting to the the target block. The \"Introduction to TPL Dataflow\" document by Stephen Toub describes Post(item) as asynchronously posting to the the target block.  \r\n\r\nCould you discuss in what sense Post() is synchronous and in what sense it is asynchronous?  \r\n\r\nCan Post() block?","postId":"2012_09_introduction-to-dataflow-part-1-980c1479-b370-3974-8cf2-c1b8c36b44c9","replyTo":"","date":"2013-03-21T03:50:06Z","timestamp":1363837806},{"_id":"d2d0dc2e-c970-382a-9680-9d052ca47ec4","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"No, Post will not block. If the block doesn't want the data right then, Post will (immediately) return false. So I consider it \"synchronous\" from the point of view of the caller. It's \"asynchronous\" from the point of view of the mesh, because Post will just queue the item in the block's input buffer if possible.  \r\n\r\nSendAsync is asynchronous from both points of view: if necessary, it will (asynchronously) wait until the block is ready.  \r\n\r\nIn most situations, blocks don't restrict their input, so there's no difference between Post and SendAsync most of the time. A notable exception is when you set BoundedCapacity on the block options. A bounded block will attempt to postpone any incoming data if it's already full; this is where Post and SendAsync differ (Post returns false; SendAsync asynchronously waits for the block to have space available).","postId":"2012_09_introduction-to-dataflow-part-1-980c1479-b370-3974-8cf2-c1b8c36b44c9","replyTo":"","date":"2013-03-23T01:04:57Z","timestamp":1364000697},{"_id":"c5fdd2ff-e7ca-31a2-935d-89ceebd91f1c","authorName":"Mark Zvilius","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"http://www.blogger.com/profile/06499768056784882414","authorUserId":"","authorFallbackAvatar":"","message":"Thanks.","postId":"2012_09_introduction-to-dataflow-part-1-980c1479-b370-3974-8cf2-c1b8c36b44c9","replyTo":"","date":"2013-03-24T02:31:20Z","timestamp":1364092280},{"_id":"b6414c54-ad6f-39e7-8c63-ee84e298ee1c","authorName":"Abdul Jeelani","authorEmailEncrypted":"voyEEX/5pDjQWqHCRuKKUJF5mvYzEV9tNaOv4Snme6i2/J4xIStR21E0tkUdBedLX0G0jDu72XFmLxAkuM6EvSQz4R8W9FXhTuXIUdaORxjg+kxZ2lknbG9PJ/DCGhTbv+JfVpAzOUBOt7uTo2PZ8iUS5rciCL9NNfm6d8/lLp3hEKu268COl2d7UEmsg+d0meZ2AfMqwedeecsghRW7mZguqK33FqTtWsaMS2JbJf3BbNHM99WIXaM2wdyOviz2KTCOMZl5qTiktVDcoFQXUn6UkmkhzKNlKYSKtFwLB1i6wvK8NOzEPAJ8n8qJP+K1H247wF2JKOIvIRx7dJDAMRvuowwzKtBkzJIitVRe4OfATFqOxlqq/Q5rsCMEM0LhbIi1JpYhFSglvh6Qo/O/F/PPYRNq52/nYKib+s2jxCZ3xTbejIyX/xMTAqmlXPuAD/UWFiMLJHt72sUXwRcNw9I25em6yI7s7RR4h4bBu1WrciX9YKOFvQJXdCuU/wfNrDKvRLBY+7w9USzYj/LDWQJx7I9LJiiE5VgkcyDk1RbjbtcQEKHUzKyfk7HK5EcF0CUoYurSAo1bamJ3/yo4rVDvStxbtNxbYmM2T8LrR5kM1XNlxGxTNJchHfbbiFlzaGZ87PI00OOeuxjh7zogAg17P3InVrtOcBmRw6i9JwE=","authorEmailMD5":"b3eef3823290b09dd3e2aded4192339e","authorUri":"","authorUserId":"disqus:abduljeelani","authorFallbackAvatar":"","message":"Hi Stephen, I ve read your post as well as your cookbook. I am still not clear on Rx + TPL vs Dataflow.   \r\nIn Rx, If I intend to do concurrent operation,   \r\nI shall do \"obs.Subscribe(item=> Parallel.Invoke(Do1(item1),Do2(item1)));\"  \r\nHow does the above differ from attaching a TPL block as an observer to obs.\r\n\r\nCould you light up the difference between using ObserveOn / a Transformation Block to achieve concurrency","postId":"2012_09_introduction-to-dataflow-part-1-980c1479-b370-3974-8cf2-c1b8c36b44c9","replyTo":"","date":"2017-12-05T05:30:17Z","timestamp":1512451817},{"_id":"dc7fccfc-797e-38a3-91cd-76a991ae821e","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"You can wrap Parallel in Rx to get synchronous concurrency (parallelism). TPL Dataflow permits the same kind of parallelism, and also supports asynchronous concurrency. If your Do1/Do2 are synchronous, then doing it with Parallel or doing it with TPL Dataflow is pretty much the same thing.\r\n\r\nRegarding ObserveOn, this is a way for Rx data to \"jump\" thread contexts, usually used in the middle of a query so that the first part of it is executed on a thread pool thread (e.g., throttling), and then after the ObserveOn the rest of the query is executed on a UI thread (e.g., updating UI elements). TPL Dataflow also permits \"jumping\" contexts in that each block has its own scheduler. In the TPL Dataflow world, while the scheduler *can* be used on an ActionBlock for UI updates, it is more commonly used with a ConcurrentExclusiveSchedulerPair to coordinate one or more TransformBlocks/ActionBlocks with each other.","postId":"2012_09_introduction-to-dataflow-part-1-980c1479-b370-3974-8cf2-c1b8c36b44c9","replyTo":"b6414c54-ad6f-39e7-8c63-ee84e298ee1c","date":"2017-12-05T20:10:48Z","timestamp":1512504648},{"_id":"d53cbe33-da4f-3a64-b2cb-096926d24a7f","authorName":"Abdul Jeelani","authorEmailEncrypted":"CPRSxHT8tnh9jQdEN0nnSilTLdxtf9fDpSo05jSL3vMHHivjE+vxKoNRgj2BE065u06waT3tVNw6ybD31W3f7ET6UVYJvUEVndBDYNcFZqpmqneUnpBdzmzzDeWWV5N2ab42yFSq04vhlmt0Ufdo85+bcQuuxfg4A3t94VEnWti0/tSlybalm9rOgOa/ABSnDOv3ufi3LonL8rp0PHjGE2prhHzDL2+Yn9WQZT6+wSKfkaDjPO5Q5MD1FS9EBPAGR5mDZSKxvif36wfWnzRa16CDJ0aldhW2HR+rjWV7oFpld8Goy72pXzxTF3uxfMmU5JfPJSoaj2XftAcbchknLQ0PizsprC4LzJxi9QSU6NIZxaF7MnOfWZRSyBCSqlvNUpxY+UZrHbMakP9VIbK0s/RWPIgawjPQMMHs1N/4SvZ1l/nWAToc++pt2z13AJEJLeGHqLUo7gOGoua7ON9bIBil7dd0OAe5OzfNdrIkQVOgoCJUIdhKg5uGyZTzzGLRM5GjCV5c7fiX120OcugjO/8XcjouPh4rYUpytoPSesSzwKo2IrOOLVXKc3650WZ24ZpxP+fo5pOjMFqcr62ORrkzktgHNdHt4VsqDLZF4v8SFO6By0vKfwJp5Nv6+22VJBL8JbwsLfuv5O4KqvmgUyCemDAuXe6su/QhWpElYuk=","authorEmailMD5":"b3eef3823290b09dd3e2aded4192339e","authorUri":"","authorUserId":"disqus:abduljeelani","authorFallbackAvatar":"","message":"Thanks, but how exactly you differentiate synchronous concurrency v asynchronous concurrency,   \r\nIn my case Do1 and Do2 are independent, that work on a received item from a stream. E.g. Do1 uploads the price to a webservice via rest, where as Do2 does an internal domain operation.\r\n\r\nI understand that if my Rx Subscribe needs an async operation then I need to use a TPL block as a observer, (Note: I tried to pass in a async delegate to subscribe method, but Rx raised the on complete event before executing my delegates, means rx is not waiting for the action delegate to be signalled before raising complete event)  \r\npseudo:  \r\n\" obs.Subscribe (async result => Console.WriteLine($\"Got {await result} through Rx ASync on {getThreadId()}\"),  \r\n () => { sw.Stop(); Console.WriteLine($\"Rx Async took {sw.ElapsedMilliseconds}\"); });\"\r\n\r\nEdit: In this I case use a selectMnay before subscribe to await to get the expected behavior","postId":"2012_09_introduction-to-dataflow-part-1-980c1479-b370-3974-8cf2-c1b8c36b44c9","replyTo":"dc7fccfc-797e-38a3-91cd-76a991ae821e","date":"2017-12-06T10:36:21Z","timestamp":1512556581},{"_id":"703802b8-3072-3c63-b024-1d8bdea8eb5a","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"The question is whether the DoX functions are asynchronous or not. I/O-based operations are naturally asynchronous. This is not to say that the Parallel approach won't work - it will; it will just work by blocking extra threads. Inefficient but functional.\r\n\r\nRx doesn't support asynchronous subscriptions. Or more properly, it supports them as async void methods, so multiple data items can be processed concurrently. Rx is behaving as \"LINQ over events\" in this way, and the subscription is acting as an async void event handler. TPL Dataflow by default will provide a buffer so that asynchronous items are processed one at a time.","postId":"2012_09_introduction-to-dataflow-part-1-980c1479-b370-3974-8cf2-c1b8c36b44c9","replyTo":"d53cbe33-da4f-3a64-b2cb-096926d24a7f","date":"2017-12-07T21:38:39Z","timestamp":1512682719}]