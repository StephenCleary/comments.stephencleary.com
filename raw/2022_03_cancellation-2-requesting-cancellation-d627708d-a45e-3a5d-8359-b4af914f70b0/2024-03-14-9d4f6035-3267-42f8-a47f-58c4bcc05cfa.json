{"_id":"9d4f6035-3267-42f8-a47f-58c4bcc05cfa","postId":"2022_03_cancellation-2-requesting-cancellation-d627708d-a45e-3a5d-8359-b4af914f70b0","postUri":"https://blog.stephencleary.com/2022/03/cancellation-2-requesting-cancellation.html","replyTo":"7d85a466-0ea2-4aa5-a0c0-3824371ac5e9","authorEmailEncrypted":"BMz\u002Bz4UdZRUAkd3Z5Ix2/39tdupOobuebad/HhTU5aMRqFgaAmJ382XrG9\u002BNm21zYA6W1ANgy40n1aeIXGYPmD/nHFcMJd\u002BYGepMFWlYAHrZMazqXIAdVT3Wo48p5pxJegQjMypm5ZHa6f07FnNa2yAX9\u002BjG1QYUWodOPm1WNGh6QYpiFS5Ez5xQ2NVIwu7nTLU32b9h\u002Bpv/JBTTqSi\u002ByJcD4gVm8NY4vPXA3TPAZZSPcR2lOZhS\u002Bv4ek2SnN9BuSePtVA0WkWhiYjuyXQHbqTDYbSbsVq6UcRpVZ0gZdxYwnyDTdtIXikeUxTUz0/VOlfpbJn3X3hW/dTWf\u002BuRiQ54YW5Ku/cw76MB4IDxImET2lAXiACkmX9YmVixJm9a5E7Zqpe8TlATRJwo7ORY6IMKKo23h34GUzWBpG9CyLpYGL4UKBN18FeW6/khsgSDEGg8UjA37g5ez9n6Elz49TqDvFucMGghCbJUMY\u002B\u002BKMe7\u002B56/bd6gVD4Tp/V4ldT31A4zMZ1KqtarcjKkR8tdaLbNrgym/x6PaxskOm68XnYZB/8trdZQtxbeaeA4cGlVhJAlpiFU1R1ejPe82LF0augI1dKQSvPvM2vziFGRCCfVaaRjxn9GZRwgsufkNNDVT\u002BYbvUjRXbeQemXmZDz/7Dd7cwWXJtH8mp0Mijctwn6w=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"I do have plans to finish this series (someday!). The last entry will be \u0022how to cancel uncancelable code\u0022. But first, try as hard as you can to avoid that situation completely: can you add any kind of periodic check for a cancellation token? I\u0027ve seen code that has to do blocking waits add short timeouts (e.g., 100ms or 1s) just to check for cancellation. If possible, that\u0027s the easiest solution.\n\nBut some code is just uncancelable. The only safe solution in that case is to isolate the code into a separate process (separate threads do not provide sufficient isolation). Then you enter a whole world of kicking off the process, two-way messaging via inter-process communication, etc. It\u0027s a real pain but it\u0027s the only safe way to cancel uncancelable code.","date":"2024-03-14T18:00:49.1267863Z"}