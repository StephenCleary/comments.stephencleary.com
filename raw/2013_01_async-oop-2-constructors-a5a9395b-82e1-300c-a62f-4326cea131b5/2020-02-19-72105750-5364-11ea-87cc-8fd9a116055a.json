{"_id":"72105750-5364-11ea-87cc-8fd9a116055a","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","postUri":"https://blog.stephencleary.com/2013/01/async-oop-2-constructors.html","replyTo":"ae023440-535f-11ea-87cc-8fd9a116055a","authorEmailEncrypted":"cxVgyijTeDTwAMb16xQVxE45hPMCaK4ueoVtl6Jtp7p4/OBDhrpEUUN1P+Mdq5AOoyFEdGS/EPAZM/m7lSGONNhKUEh0YXLTnSGdT/sguB0FOPeJc4cgeP2BR5ArUoXSEAD1FGy6grRDdpb6j7spXiGjmPBN5jszwBChehxZN0JjXkLOycTSHisNfhpe6T/FU6234Br1W8vru2+ioFh873FDR8EkUfpkVmfD5QUU5EXGxOsT01H0vDSVpC4jHeKdlSdJ+1MQJzEbyMX2k4NIBPRo8PEGX7dGhrd+fYFr/g0EZ4RyB5NcyTG81z2CFBSxjpjH+AGuzzTFqbAE1q5syKDtUITOuGBo3dy87fvmI+iiUnOLx1EtHYSh7pkdNCE0IVzCKedLEdys1ccnm+PGvw302qzf0tXu2LyS5TBevASZrcnPgNiEkGeiJ/SUZTi1V7XO2wwDar6TEBBJCFFI793PnECeLgDoVZJ6BZykQ9kEASxN5aFgZVZJyIJz9mr0HGFyepipWV4YaBxFHpCG1hOppk7NAa4TsLLx5kD+mdp+3VRawQ3nae97D6VPUyEpjyKzYeoyrO8BP/LRbLseHmdQh6NRU879T/UzmGD1VcMnp4g3EdyDXwSfr1eyUC+Ca8kMbydrXtdeRkA4OW/VOmz+RAzWgZDKV27WAUbkjIM=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Ah, unfortunately no. `Task<T>` is a type that ideally should be a variant type, but C# doesn't allow classes to be variant, only interfaces. There was some talk in the .NET team about adding a variant awaitable interface for exactly this kind of scenario, but I don't believe they ever did. A quick Google search turned up [this](https://github.com/jam40jeff/ITask), which looks like what you'd need.\r\n\r\nI haven't run into this problem myself since my designs use composition rather than inheritance.","date":"2020-02-19T22:09:06.851Z"}