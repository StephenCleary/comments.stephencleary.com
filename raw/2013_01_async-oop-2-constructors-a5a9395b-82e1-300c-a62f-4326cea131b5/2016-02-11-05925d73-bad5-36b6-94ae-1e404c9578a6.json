{"_id":"05925d73-bad5-36b6-94ae-1e404c9578a6","authorName":"Stephen Cleary","authorEmailEncrypted":"ChA+wFvHW6sqqSLwFGpD4paYZ+/9oaP2ugnGUTgoK5ZZlwUHoUq3QhUhvkZTwcY4GSXfUN7YFlW0fsaGNqVG56hhITpGR98AnqG3rwrXshzlCmNB4ZK3Qh9qsNPrBDoeyZIG6/NnE2lV1KTROxkrnHcMRmYmYmGJb6CORADCF7s0oDCVv+WxSI4yBH9BxKcsSwAP+RiFtAzMD9HUuMd29JJbzKE4dZNFHbZOXHRCcVOo6N2OhnxKpoX8NKLqFBFx7N+Pq1UrOxNqVMNjgglopKr1oNSx0JHr9VG1seDJNsAGK32T1YeOwpC9uzfQrDxf6+1GObVOIL0u6OdyPZA0iFsj91fEMTk6Inoe2tHRhiYpUFCwJB2Y4rQAGE4ZrzFaNLaS9zxqx72zZ9OakcGvU4zcDU4gnsb96JVo4ZkKcEgDFWfI4Vd6hMBt/5dM/gcHpPG00VQlrncRDy+cE+LH0bXuiGS86B7JDlLvdBwB/wp8Mv/Txni5L0iYxWRRWI3Ft24EojhL+TcPZeauqt7munvfszJH+R3FaL2EvJv04vNVoyTA1J7dY6NXGZr8yCK3rqT/KpXCh9dDVeLeEROL/UBEOEV5xKk+HTqWj/OeHrBKkM5rArvZ4oLln/hK6ysXHq5Z8/ckAD0ZUuI9BWmR+ABwVdPTIgPNQco082k8tus=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"For singletons, I recommend the async factory pattern. So, instead of `public static MyClass Instance()` you could have `public static Task<myclass> InstanceAsync()`. Since your `Initialization` is private, you can just make it `Task<myclass>` instead of `Task`, and return `this` at the end of `InitializeAsync`. Your implementation of `InstanceAsync` then is just `return _instance.Initialization;` (or you can just expose it as an `InstanceTask` property).\r\n\r\nAsyncLazy is a good possibility if you want *lazy*-initialized singletons, but it looks like yours is eagerly initialized.\r\n\r\nRegarding these questions:  \r\n> I would still need an 'await', right? Which would imply another AsyncInitialization?  \r\n> Would it be possible to avoid the 'await' when retrieving the instance? Perhaps by implementing a 'Result' inside AsyncLazy?\r\n\r\nNot easily. The best approach is to go \"async all the way\": [https://msdn.microsoft.com/en-us/magazine/jj991977.aspx](https://msdn.microsoft.com/en-us/magazine/jj991977.aspx)","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"00a64f59-50df-3e2e-aadf-f5d0ad69848c","date":"2016-02-11T18:49:43Z","timestamp":1455216583,"authorUserId":"disqus:stephen_cleary"}