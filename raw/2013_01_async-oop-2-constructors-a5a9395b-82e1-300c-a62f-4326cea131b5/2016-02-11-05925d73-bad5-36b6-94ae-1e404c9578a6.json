{"_id":"05925d73-bad5-36b6-94ae-1e404c9578a6","authorName":"Stephen Cleary","authorEmailEncrypted":"a3RaUUHSfobW2e/1xhphPl2xnWRXQkmvBsMTil6c6j8CwasLyLsBVh6XNIigLGW9KPyX7RN+pscinySGIafThJrHTL59dL5XDYCr9w0EG0UPWz45WVjhjOQNkiVzaW2JNBG+nAlpwm2ZJDGj0GvurH1XHIDNckSgJd9e02B/PS+3tS5SF+3BTDX8L9VsJ23wnMqx8pWX+bc0X4RedktAYBt5OXrE1Sg1YbXLiKLFUcdL4ztGXHnDJXJ+oQXzSlThFZtFyEdR0+Vypioa8Awt68sOHvFhosUCpzLVmdruInYALGBXogKsRRQcdMTtMqBSB0Dlv23KnHnc+qZu0IU6Nl6nksRWPJg0syR06c4yLqKzEZayzR1qRfW4OXmYGSp6IBMxA812QjB++hweEJ1eZkqQreSw24NEm+uOO58+N7fqRJ1zC60MGkF51XBbuWsKMIUE4ZWmhj+jUjY0Ai1q20IxSxdeNMphN7UFXFvJzSDkVNfLxnq073RidDzgVsRSgDDX8b9urXq/P5f48dCB4ron8c6MoppkoTyWRe0vE8FtX7MbvOC8h48Bj3z7VDjxUSCJz73ICzYYGEE1ZIdsLXyQ6CMbI5SZsJFTHNFOupAXpY0WO0PE1zD3D9x/QS6YYrEb7YX8m/25/h1w4iL8LmP/zDHK/RugbSDzyIh+0Ok=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"For singletons, I recommend the async factory pattern. So, instead of `public static MyClass Instance()` you could have `public static Task<myclass> InstanceAsync()`. Since your `Initialization` is private, you can just make it `Task<myclass>` instead of `Task`, and return `this` at the end of `InitializeAsync`. Your implementation of `InstanceAsync` then is just `return _instance.Initialization;` (or you can just expose it as an `InstanceTask` property).\r\n\r\nAsyncLazy is a good possibility if you want *lazy*-initialized singletons, but it looks like yours is eagerly initialized.\r\n\r\nRegarding these questions:  \r\n> I would still need an 'await', right? Which would imply another AsyncInitialization?  \r\n> Would it be possible to avoid the 'await' when retrieving the instance? Perhaps by implementing a 'Result' inside AsyncLazy?\r\n\r\nNot easily. The best approach is to go \"async all the way\": [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/jj991977.aspx \"https://msdn.microsoft.com/en-us/magazine/jj991977.aspx\")","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"00a64f59-50df-3e2e-aadf-f5d0ad69848c","date":"2016-02-11T18:49:43Z","timestamp":1455216583,"authorUserId":"disqus:stephen_cleary"}