{"_id":"05925d73-bad5-36b6-94ae-1e404c9578a6","authorName":"Stephen Cleary","authorEmailEncrypted":"QAbzdoIebVfrUlOjSItxU4NSO+p2C3bmcTVltr5uAD1XL4vpichznsDw/Ars+4SWjeDPhECDDQts7LfrBwkLDyNoH3C74OMUXe/8lm9KEc+y76W089rwmHx5g1aYyiPzH0x/iAmDPJUq6TwMFxE//BEvZ4fxT/hbpU1uukHtNoLo56wQrawxiWadwfIt3HBZXmOXebCMY1K0yjnyvDqpGOODEnGR9ZQ5rrI/jx/fQ3uwEOX3qGPSkj50fzxExMoih8R4oQO/FKsaCITy8MJJ94rCajEizTBne+G5sAFFlNytF+zFx/G6U+ryggcHIYvIfKXLFz95aeObMC/VxIUXA0y6tFYOHorvORcTxGxrz3c9XnmH52ABk8qmacH8NCF2W/c5R6LCqr7ggC94wRK2abzzWzdgTmVqyuU1NS+OMQac9zubVUbhlcVluPgCmimIVMvRQgLt/kHpG/uDNC88ZV62txMG/cX0L/ZV9lp2mem0oJ4xUgvSAFR50p8LFR9uP3cPnfa9D6Ylam5rRtOZYdJXttvT/rRWLGP3TneTnNtxorGFoeREBJjE8M8PvR8JHXa+MhveTBfL8ncaYlgvVchJY5fKQtzOGwsfj+IMIEMOM03cuev2iSQViRy0+DfoWo6Q6yTi2YGwetHFLW7aFabWhE+w3A10wKYuYnu29N0=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"","authorUserId":"disqus:stephen_cleary","message":"For singletons, I recommend the async factory pattern. So, instead of `public static MyClass Instance()` you could have `public static Task<myclass> InstanceAsync()`. Since your `Initialization` is private, you can just make it `Task<myclass>` instead of `Task`, and return `this` at the end of `InitializeAsync`. Your implementation of `InstanceAsync` then is just `return _instance.Initialization;` (or you can just expose it as an `InstanceTask` property).\r\n\r\nAsyncLazy is a good possibility if you want *lazy*-initialized singletons, but it looks like yours is eagerly initialized.\r\n\r\nRegarding these questions:  \r\n> I would still need an 'await', right? Which would imply another AsyncInitialization?  \r\n> Would it be possible to avoid the 'await' when retrieving the instance? Perhaps by implementing a 'Result' inside AsyncLazy?\r\n\r\nNot easily. The best approach is to go \"async all the way\": [https://msdn.microsoft.com/en-us/magazine/jj991977.aspx](https://msdn.microsoft.com/en-us/magazine/jj991977.aspx)","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"00a64f59-50df-3e2e-aadf-f5d0ad69848c","date":"2016-02-11T18:49:43Z","timestamp":1455216583}