{"_id":"05925d73-bad5-36b6-94ae-1e404c9578a6","authorName":"Stephen Cleary","authorEmailEncrypted":"r+0KkvWA1u8MWj4Od+5m+asWuKYFAEM62/hNOVSuq98XoUPND5Ge3/Zj+r4U/UZtS+omfXIXpgrohYulfHxq/HhKuQqprO6N3bKsMuBfNIhfiuGdjbPYN6S47eLg14AqjveH+PLeMl1fvhRfaoPqssmhwwJ0hlHcGSrTM0rIb/7vOCJ7ingr6fgDUPC+puuV6cZEWsB2o335RQbjRxvrtAUiNoJePITXPAzbQD92oDfOM5MChvyiG1p/YDqvBY2NWF2DkV6l8/oK8jYZMviQMOdc6d/ywd/1+tHgQkHMWeMReKVfu4WOCgiFDvkE1AsDcr2kMugg6v1BraPKIarQpYAqDPDNpx9M9UwLA1M1t55U4bYWDDlVJ4XlSjLIdbjuzMfPhUleE1bYl9wM3nmjDwfZA17ND40ixnjWA7SFSgZaWh5TUnfxJi3dZ6y5jVm4J/EHaHVac2JY6qt2MGRDfJnZ2Eub79E0KeCj2GjA+U0NqLScxvndseK3nM6BoeP7lRKRFyxkSM6uiqnjTEviY2doPT4ei0OJQSjJZjW2PS6wOMw0n5FqShrUNkhKuGgNWTB6JuURkk818ZsomIh9JzHvx/fiTWjR+VkIaqKTA8tjio4DT+JucDo21T/kPmh3v+nvULjkBG1XieQLm0MKdR4Wyzj7mZOiuP+ND7Z66ZQ=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"For singletons, I recommend the async factory pattern. So, instead of `public static MyClass Instance()` you could have `public static Task<myclass> InstanceAsync()`. Since your `Initialization` is private, you can just make it `Task<myclass>` instead of `Task`, and return `this` at the end of `InitializeAsync`. Your implementation of `InstanceAsync` then is just `return _instance.Initialization;` (or you can just expose it as an `InstanceTask` property).\r\n\r\nAsyncLazy is a good possibility if you want *lazy*-initialized singletons, but it looks like yours is eagerly initialized.\r\n\r\nRegarding these questions:  \r\n> I would still need an 'await', right? Which would imply another AsyncInitialization?  \r\n> Would it be possible to avoid the 'await' when retrieving the instance? Perhaps by implementing a 'Result' inside AsyncLazy?\r\n\r\nNot easily. The best approach is to go \"async all the way\": [https://msdn.microsoft.com/...](https://msdn.microsoft.com/en-us/magazine/jj991977.aspx \"https://msdn.microsoft.com/en-us/magazine/jj991977.aspx\")","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"00a64f59-50df-3e2e-aadf-f5d0ad69848c","date":"2016-02-11T18:49:43Z","timestamp":1455216583,"authorUserId":"disqus:stephen_cleary"}