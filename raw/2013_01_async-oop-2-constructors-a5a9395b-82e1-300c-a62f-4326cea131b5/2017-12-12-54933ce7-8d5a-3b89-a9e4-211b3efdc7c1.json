{"_id":"54933ce7-8d5a-3b89-a9e4-211b3efdc7c1","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"Ah. I have some ideas for asynchronous computed properties, but no concrete library support yet, so you'll just need to do it \"by hand\":\r\n\r\nprivate NotifyTask<compositeobject> configData;  \r\npublic T1 ConfigItem1 { get; set; } // raise NotifyPropertyChanged on set  \r\npublic T2 ConfigItem2 { get; set; } // raise NotifyPropertyChanged on set\r\n\r\nconstructor()  \r\n{  \r\n configData = NotifyTask.Create(async () => {  \r\n var result = await GetConfigDataAsync();  \r\n ConfigItem1 = result.ConfigItem1;  \r\n ConfigItem2 = result.ConfigItem2;  \r\n return result;  \r\n });  \r\n}","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"58ab87ee-7136-30fe-a7c9-0df3113bf25e","date":"2017-12-12T19:21:32Z","timestamp":1513106492}