{"_id":"84307935-c21f-370c-b700-e0fdc289d4e1","authorName":"Juan Loustau","authorEmailEncrypted":"UWOkBl2fSxk6Y96VS9jAQoRyEP8f9RWTFkVdbQ6Eu5sZJP6s84xeREsbv8skl5hQffktWo4FJh/A3Sfqdg1R0jG/RqgkuAc+iCftRfzOHCKV1ZIIuxeSG9YitBL9pr6tk+OiS5/2HRma7965BYAHmq0v/MT7nqkHyCR8oNaqoJUP8LhvJdIFxHLidw01LhyIU3gLu/2SFTGBoq56bG1yyu0KAK5Gkb8ghc+a0e8m+r+ri26d1NQ1zwB00dSw7xmJVaqCjdZ0wsF5U26PeWkMEOBkU+hmQKIP1YGVGeQmekPbJLh3HTKibSaSM02Vap+DrdF2mn25EImWeroD/E7tqD8x5/ksksAGQCwjCRglNantqv9lV8Bb/mN0qKRkdu+PcxdyhMJ3K93Wqen96A7H0J4AUbomUupsg5eLnOg/L4XJM++5usMfCmgNFvvWtS0LF9YGpWh/mnbGaqwoVrWnm0F39wCMfpNe4F4YTIVJW/VR/lR9sr8PTw5/kXR3nIRHitm2zOQSQReyDIEahlVLUym9hhy1smDslfk9G1LgD2BFsnK15oJvUViWfwbW0JwJNHLgnfna2ALvoOiMTBEKARg9oQ1MbozifGNHCau5N0TI4CkZekp4BdJsMHTkCmuqTv0IS9B9KYaZM+5yJoKvbSIDjwDwoOt6qSpoFbmfpJk=","authorEmailMD5":"1cff41e7d88698ee36c729d7dcde52e3","message":"I think the best solution is the Factory Method, because you make sure that the instance is never available while it is not fully initialized. To solve de IoC problem, instead of using a factory method pattern, we could use the abstract factory pattern: Instead of injecting the instance, we inject simply a factory, which in turn takes care of creating the instance and initializing it asynchronously.\r\n\r\nSomething like this:\r\n\r\npublic sealed class MyClass  \r\n{  \r\n private MyData asyncData;  \r\n private MyClass() { ... }\r\n\r\n private async Task<myclass> InitializeAsync()  \r\n {  \r\n asyncData = await GetDataAsync();  \r\n return this;  \r\n }\r\n\r\n public class MyClassFactory : IMyClassFactory  \r\n {  \r\n public Task<myclass> CreateAsync()  \r\n {  \r\n var ret = new MyClass();  \r\n return ret.InitializeAsync();  \r\n }  \r\n }  \r\n}\r\n\r\npublic class MyClient  \r\n{  \r\n IMyClassFactory _factory;  \r\n public MyClient(IMyClassFactory factory) // IoC  \r\n {  \r\n _factory = factory;  \r\n }\r\n\r\n public async Task UseMyClassAsync()  \r\n {  \r\n MyClass instance = await _factory.CreateAsync();  \r\n ...  \r\n }  \r\n}","postId":"2013_01_async-oop-2-constructors-a5a9395b-82e1-300c-a62f-4326cea131b5","replyTo":"","date":"2015-03-28T23:37:21Z","timestamp":1427585841,"authorUserId":"disqus:juanloustau"}