{"_id":"c31f4263-b636-44e4-8163-f9d5e23de829","postId":"2022_02_cancellation-1-overview-f578fde1-7dc4-3df5-88ec-107dca6b348e","postUri":"https://blog.stephencleary.com/2022/02/cancellation-1-overview.html","replyTo":"5d39295a-5913-43a0-b2ab-3d47544b2827","authorEmailEncrypted":"QbXtUZOuB9Nv0Gyff\u002BYWsSdXeK/D8/L5DoxXKRaQdYXvw3Q60m9xR2y72WsZs2qhoeALN6lGOe1LxCwWy28ilkmFiGFZxhckPJZ5XKvQoydvlMVc96ZZO2nQyF1uUVJTNSfKvDMWS\u002B\u002BwX9Fg8XpsmERCOEF33QDK/GBpTEiR1qJ\u002BELmFWUNpzFfO9kQdC\u002B\u002Bvon5qR963q07\u002BVp0IeMJ6f85axBOh0j5jAX2d43066E/aMnEmKEyykH3Qd0g4qOGtKnkfAb/N0DLBOR3qwHBQB/LqBSfV9YXAcd2CobpcOHcQ1U9O6FBDM1h9/RceuGfu5PHsUq2Br3Co0v/haCP5t4Rf2bA2da5S0VnqeVg825lGGahNSFQHhAxFVHgZvJfTC76ANGuHRwKGlVz0g77kZg8/QgeG6oskG1i62cOxQLmIZ\u002BUOHUqj6\u002BJ8Wl4JZe8nC/NWHSUqqW/WRD3\u002BQwVAfPY7ii3w\u002BXp8RkGRISun74GRx9VLJ/YgCW/lD4ke\u002BO9IG3yYo0emGHQg9ZQUNtbliLsCmlHI4CtyYZvMLzMoY/T3GGpVQ8rJKRG9AsydY7EQiBMCTAFi66Krd\u002BfkzRdmMHK6jwhHDQ03O2X0xDPCcsLDJvnKn2HK81m0JZbH5Ku787iljq3ToewZ25F/hQqz\u002Bf34KZO\u002BE2aw3c\u002B2e3406/o=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Personally, I would still follow the pattern (throwing an exception), and then catch and ignore \u0060OperationCanceledException\u0060. With this approach:\n\n1) All of your cancelable code is identical. It doesn\u0027t have to behave differently based on whether it\u0027s in a background task. It just responds to cancellation the same way as all other code. This means it\u0027s easier to move to other parts of the app, or wrap it into retries, etc.\n\n2) The difference in behavior (ignoring cancellation notifications when exiting) is in the layer that cares about that behavior: the top-level background task code.\n\n3) It works naturally with \u0060BackgroundService\u0060 and friends in .NET core, which ignore exceptions by default in their top-level code.","date":"2024-08-15T00:37:22.1805760Z"}