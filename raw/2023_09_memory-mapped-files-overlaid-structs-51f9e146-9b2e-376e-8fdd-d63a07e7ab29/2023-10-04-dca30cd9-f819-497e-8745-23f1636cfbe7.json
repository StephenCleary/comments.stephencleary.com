{"_id":"dca30cd9-f819-497e-8745-23f1636cfbe7","postId":"2023_09_memory-mapped-files-overlaid-structs-51f9e146-9b2e-376e-8fdd-d63a07e7ab29","postUri":"https://blog.stephencleary.com/2023/09/memory-mapped-files-overlaid-structs.html","replyTo":"","authorEmailEncrypted":"YOE1afuS7gFD\u002B2OyTYD2LTYqLWV/cVjj5ZBVF0lBoJXNn3G6GFWkRx0cbDifE3mbWwyBsyv29cnT6OS2s0ELlCiY8SOPYNtesRJlAJqp6nREZJDlNyfXvLROBSZTlXC4nFi3GIN0sSRHw3EieYEyqd4gkDHRoAvJ\u002BKKDLGC8SroinX3BcyuFvMkD/\u002B9oGJ23JahElnG9x448Wsz9HwGAxk302v22nLarrqAQNVp9hjyRJwEkpXPk6d\u002BOfq2RgF9LzByD1rqRujL/\u002BTgE4fy57X4ImnbUTvr4cPMXXwK8/ctz609L\u002BWfA5e/mbzQEbSPhx4y8PnNGorkOWCNwddTC1\u002BCCW528sekMLIlXxXN5/0NFCrsuNEBzcoNG5Ka\u002BsvFIm6oGfm0bo1\u002BPbALg\u002BOplcKcafyc/A8Wer0kXRjvGfMyPMHdOv15uVBAxvcpSSJlPmIUqseZguIb\u002BSGYllyccDiCqn\u002Bcp4I2E\u002Bw5I/55nq\u002BJF9G2Dhmls/Cczlw90ic1rCvmG//GBw7\u002BhuvkJAKCw2hf59kowtPjAWVSY10YyzL1VHC8X3wD737p5Kf7MZ7zyVssmgKOLfE9\u002BptJXxLxb9\u002BdU9V8LwcQLDKdwTdVq7jgk4RxUuf16MgSQR1IzC9aLOuHUJd/eiVA0GlJyWjaPwke0od7KJ5WbGeRcg7lafa4=","authorEmailMD5":"235f36c03bb6b8f3c92fbe0439258883","authorName":"Diogo Trindade","authorUri":"https://github.com/diogotr7","message":"One extra detail that is useful for this usecase is .NET 8\u0027s \u0060InlineArray \u0060. This way you can make structs with arrays in them that still fit the  \u0060unmanaged\u0060 constraint. I wrote a source generator that achieves the same on net 7 and below: https://github.com/diogotr7/UnmanagedArray.Generators\n\nYou can see where i ported an app that uses my generator to .NET 8\u0027s way of doing it: https://github.com/diogotr7/RazerSdkReader/compare/feature/net8-rc1\n\nCool article!","date":"2023-10-04T12:48:34.5236226Z"}