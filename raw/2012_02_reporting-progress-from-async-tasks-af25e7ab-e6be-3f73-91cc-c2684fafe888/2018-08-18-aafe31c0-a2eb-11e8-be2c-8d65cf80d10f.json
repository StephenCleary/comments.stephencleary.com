{"_id":"aafe31c0-a2eb-11e8-be2c-8d65cf80d10f","postId":"2012_02_reporting-progress-from-async-tasks-af25e7ab-e6be-3f73-91cc-c2684fafe888","postUri":"https://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html","replyTo":"5420e010-a2ae-11e8-be2c-8d65cf80d10f","authorEmailEncrypted":"G5Srv6IzpCpGBp/BxN1xlIOazjWokZufTb47PA+pbbJ8tMuhZCSsE/QnPB5WibjCJsFymKQC0GkXn+BIQJw2fg5xp207hwvnmzPGwsrk5rbA/HwlIsFoZHGepz99g23BOg7OK4lsiX1mpXlKoz8Ir5+kCIJ9HR9/Oc6L1FiFZA731NqhdnUhtt3n763p4DCCPBxgrwni+YxRn3GUfzM7l96RHYlB2dkZoqrYUXjrEiJWtbWkpTOo5S6/kguxLUVp6D6gj+XuCW7RlXemB6HABaP1S3Pm1g0Pq/AdrBtUEYgV2dd4rH0Exr+Q/wBBhPwK9/IllFXMgOVnhX8CjSF15NpRZfJBxiJd1YGj2ZZIs1sy3c2zcJCRTKyPntv2KkH46Z9XGT1O7yxi/YLjwRXbS15zDVOltL8LuP4LU23GC6Ct1gEcn8kp04Nz4bNy59s2hNwMVvR5EKeuBV6smQafhhAmMjoKCXW4nkVWDzTtOp93HqgPPuIg8Tra/khLNJw4xHK4EjZFLwoTaIYgckDI/J7mSIkjVXz7mXJHvMeW4pfOa6he8LNKFrX2r8y+TkgkfsCU+UNRmimClb9hATRGvb8YJRdQGRUAJNzyrUy9sA8LQsfuI5JfBcm15koyUhAgGjilgKN3ifg/s8jCGrre/RyWLSVMDvgVXmxuzIOR8EU=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Those posts all deal with adding a `SynchronizationContext` to a Console application. I have an `AsyncContext` that is part of my [AsyncEx library](https://github.com/StephenCleary/AsyncEx) that does essentially the same thing.\r\n\r\nThis *does* help you if you want to direct all `IProgress<T>` updates to a specific thread, because `Progress<T>` captures its current `SynchronizationContext` on construction. However, it does *not* prevent progress reports from coming in after the operation has completed, as this test code demonstrates:\r\n\r\n```csharp\r\n// Output is \"before\" \"Hello.\" \"after\" \"Yup.\"\r\nAsyncContext.Run(async () =>\r\n{\r\n  Console.WriteLine(\"before\");\r\n  await FuncAsync(new Progress<string>(Console.WriteLine));\r\n  Console.WriteLine(\"after\");\r\n\r\n  async Task FuncAsync(IProgress<string> progress)\r\n  {\r\n    progress?.Report(\"Hello.\");\r\n    await Task.Yield();\r\n    progress?.Report(\"Yup.\");\r\n  }\r\n});\r\nConsole.ReadKey();\r\n```\r\n\r\nThis is because `Progress<T>.Report` *always* queues the report, while `await` executes synchronously if possible.","date":"2018-08-18T13:36:10.980Z"}