{"_id":"36ae78dc-33c7-3d22-83c4-4cd48c5a3de1","authorName":"Stephen Cleary","authorEmailEncrypted":"dkD9c+yjr6QGYkRzPwNzYqbxtnPYwCQr1qEciVzESvDaqqXHGEVjZnVV8SDLbvQVg8kvy8nDXvXaMLyZjv2i+eQM4k1c6W2nRm8TfcTKzMrjW6ey85Bgnet2AECt9qHS54gAz4nlcnwzTkUJgmAGVWL9tNStiScVgATcOGSAIn5LA4gN/0tgCn2ZELzFCnwCHZRJqPM2Pm2wFrnk89lCzmhki5gNc3PJmjf+xXSpgD+YiM24hOKr124Ii5DgIoZvV9ZaEuDZEswaz9+sS1clxcfxL+OpK1pNelo/ONRTIBvocc06aCuYDHhGVlk4r80UzamVeOQ/5R/w8KKSlheRHo0NwRwwU3x7+VjjN+LVQOspJ9QGRmfn2oGtS5JqzvMOsIrWNNlSc88vF1moRc/nfgOmfhsLyK5F4EItlR+1+jCrrfVB2Vofbt/EN4D8CE6XPjrOd3zabk/C8HEPDXvk8TsJWNfPsHOrZHTyNk+hZuzjxdzTshoP6mGCdEPTHdZV4PWJuyTj96lolnPZbheZa8cHke8xyjLzfa0rhevw4yoIhLJ9am2yzRg5hQnD9ZbUzXna7EbINbP+stsHGaaeKTLnki4WWvzouCVo7ogE8HR5Kn/4xidcW3SZo7ODiKwkiEl506JqLGizOXM4Ga2fXANUCFgYHnUu4r42zWj5zrw=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"OK, so you're talking about parallel processing (not asynchronous) on ASP.NET. This is possible but I don't recommend it.\r\n\r\nThe reason is that instead of having one thread processing this request, you end up with two. If the second thread is a thread pool thread, then you risk throwing off the thread pool heuristics; if the second thread is a manual thread, then you have the added cost of creating and destroying a thread per request. In *both* cases, your request ends up using twice as many resources, and this can cause scalability problems.\r\n\r\nIn theory, parallel work on ASP.NET should be fine as long as you *know* your number of requests will always be low. In reality, I've tried it twice and had to take it out both times because it was too easy to bring my server to its knees.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"7016fa64-ba62-38d3-90bf-88c772b2ac07","date":"2016-05-25T11:14:10Z","timestamp":1464174850}