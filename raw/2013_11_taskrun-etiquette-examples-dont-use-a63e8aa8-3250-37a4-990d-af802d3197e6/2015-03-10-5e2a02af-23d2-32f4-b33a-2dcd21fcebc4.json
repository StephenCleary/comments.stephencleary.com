{"_id":"5e2a02af-23d2-32f4-b33a-2dcd21fcebc4","authorName":"Stephen Cleary","authorEmailEncrypted":"tfBEWNtTJgvk1+c+KPNWbntCfjWD9MFolt0toD4wLefb0TorV8gsSz/EKH9IoY6Mub2vPl2937tLqkdTl5X+Or1B/cajDS/T2QqgBlnNd5scwivQjoH/E8xGiiFhOFRMuuYYirvleKQKcKLgrAgk90tnL34B2u7GoJUx6skpT32Gp7YqcbAU5mDoaisdx3OyuRAmArbCqLHLepcSYkV9TU9C7Lwpp9R9OSpAazXpR+tn1quLYvdvA+rwat/UX4oVywkf7vzJ7qJBOHOn2zla46beTHSRiUzs6u7C4p6rRiZ4DK13Wy7xGS6QLvGfla5bOurD6K14Qs1GRT7+Zl0yW1fvPGO4fC9wt3a56KlYzTAroPd+qGyPpBh1FvCyTwVflI4wMwXks01RDljzXL0ghksvLq9fJA40aBfspZs10q/RJ4eftF6sQIUDgOYwpWKQp0hMAr8Dp+6JXIylVgsc0fl495VV3kMWMZjWa717vbsB9lYYhwlL20f8530o2zz6PQpe3RQ/GUO875oe2x6mUxZXaJwzbYG1VaX7sbRsDiCYr/wgkMhZ1f4uEMrQYWvHb/sBudr/N8C/V4y6tsUH/C5n9Uh3LaXlqReeqJic8xHKh1S1RS+Fa6tsmMvPHKnSqQhTm6Z7d10OYI49lsCw1Tf/muLQweUdEaDaqhagspw=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Hello, Tom -\r\n\r\nI always hesitate to recommend parallel code on ASP.NET. Asynchrony enhances scalability by reducing the number of threads per request, and likewise parallelism kills scalability by increasing the number of threads per request.\r\n\r\nMy first instinct in your case would be to quickly load a shell page and have it dynamically fill in the pieces it needs. That way your request handling is all simple (asynchronously do a single request, synchronously do the processing), and the parallel requests are done by the browser (which is designed for it). But this may be too much redesign in your case.\r\n\r\nMy second instinct is to try to look for other solutions. A single page load requiring dozens of queries and several seconds of processing power? That seems highly unusual. Does the page really need all this data - maybe split into multiple pages? Can the processing results be cached? Etc.\r\n\r\nHowever, at the end of the day, you can choose to use parallelism; there's nothing that will stop you from doing so. I'd recommend against plain Task.Run - as you discovered, there's no easy way to throttle the parallelism. Similarly, Parallel LINQ really likes to assume it's the only parallel process on the system. I'd say you should either use TPL Dataflow or the Parallel class. Parallel works best when you have a (complete) set of data to process over, whereas TPL Dataflow works best with a \"stream\" of data. Since you're doing multiple db calls as input to the processing, I'd say TPL Dataflow would probably be the best fit - that way, you can start processing as soon as the first db call completes, and add processing as the other calls complete. Dataflow has capabilities for throttling, but by default it's \"wide open\" like Task.Run. You'll have to play around with the code a bit to determine the best throttling value to strike a balance between request time and scalability. And document it well, since that value should be changed as your server hardware and/or site usage changes.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"4bc9cf90-b3ba-34ad-8ccb-d2dc1c15ee2f","date":"2015-03-10T20:06:36Z","timestamp":1426017996,"authorUserId":"disqus:stephen_cleary"}