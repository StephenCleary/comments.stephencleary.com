{"_id":"7016fa64-ba62-38d3-90bf-88c772b2ac07","authorName":"Avi","authorEmailEncrypted":"ao8OWDSFl0eLqI9BKM2TqvkM2dVWvvNaZgw6G1UvY8hh/fD8H2GhHohJQEcr7cIvMaIvyEXXlUj9Natnlw9bIGXEw85+kyjod1B2ZGsvlHi3/FMRgKhfpPPigIZ0Y8zT/BoBmTt/fJ8vRQBNhrfKJo0KhX2uLBXjsVEMTn6KSlV7JPtl5sIQgBOaxmNc+wXPOxy1oiSntGe11sgHUTJjmKGsQZdSBfoW0BEzwCh3OKPoX08QoJ74iA9bOz3Ew+f91QY932uNTnIPGncIZ/BOxs9nyrDoHSiUSzrECk+YdaUbo0GQrBzRBDYi3e/4m+7RXio9oaENDpaVx6Xu8nXgnwHRaVsTQ17BNXwPSqP2blj5UBoUzKfndM3D2paaj/CmKPpC/l1TePxenJL7ydlmm+7PnyDODbXU7YBjPFX2/dnnhyHxCTXGJ+hwYqHuTsNHQAVuBprMVO/RoDmS4qy6kvysemnytLqgCZ3PmFsg2V3IncDc+E0zONFCqTwBeRuhpS5OOzkHuwRZOjcdTdPgmGEcj0874+KAXKYa9yxyJcLd4865YhUWUt+FE6jRPQh6+S9Kt+3MW1iEmEGVQmLBqIX1P78wzgEurNeodu84zXsx0npFchnhZQkcWVFxKURNoZh58+CrjbiCpOEKRitDlgjHPcVACtHcFxq/zTL2b5k=","authorEmailMD5":"98f19d70948a72ca4a5a99b7afb49494","message":"So, let's say we have one thread initially that is the request thread and it is executing the following pseudo code\r\n\r\nController function()  \r\n{  \r\nDoComputeBoundwork();  \r\nOtherthings();  \r\n}\r\n\r\nIf there is only one thread which is the request thread, the processing is synchronous, it will execute the DoComputeBoundwork();and execute there for a while and then go on to execute Otherthings();\r\n\r\nNow, let's say we were able to push off the DoComputeBoundWork to a non [asp.net](http://asp.net) threadpool thread. The main request thread is free to execute Otherthings() while DoComputerBoundwork() is being executed simultaneously in another thread.\r\n\r\nWe are able to do work in a parallel fashion instead of sequential. Please correct me if I am wrong or I am missing something(which I think I am).\r\n\r\nThank you for your patience Stephen.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"b1e393be-2011-3fc2-95dc-a0a7178cdc4e","date":"2016-05-24T20:50:50Z","timestamp":1464123050,"authorUserId":""}