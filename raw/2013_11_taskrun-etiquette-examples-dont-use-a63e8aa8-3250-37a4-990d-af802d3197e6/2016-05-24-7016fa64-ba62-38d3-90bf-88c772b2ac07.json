{"_id":"7016fa64-ba62-38d3-90bf-88c772b2ac07","authorName":"Avi","authorEmailEncrypted":"eUQUzVimTz5iL+QZaEOEVE4tp9171SZ/6HYowa3NrRQgpYSV8o2H2fj39djz6Il/N5kZUgGtd4PnWZlnfaIumzYm+jt2trdQ9DHHPJazAczPdnEHLVEVWlb1e+HGcMPePSx3LifMLUdaoEiDp4Wz/tkMAK6PwQZA3FskVLa3hK2JKjJuldqk3jufRdrxP8tmDD4e2vf2eA6rMx21rdHtEU01qSWwprolLB/FCAXIrqv63cPWSaxlyqWwzBAkXDtQEMzXRTzNJZ/zNeu1BgcHTb/7ZO3zmXP8qTl4dPlimKghYZcIHKdzuchQAHJ7IGw+yoXbhpyz9EgkX6cf/Cdg0cBBoVRF4hOi4x7tgp+C0q5/b7Mp+fAGv+TzQyseDErTw40kAtblddeHoOwmoHqIpG3D9qhisJ+zeOyvM4fQXlRWAg2ohJBW+fKz656JJrK45gm4p1boSYQXjk6cVbLCuZy8nfiyrbXStvCaP8mx/2+KRzmk7VuC4UjgVn1xvpTL4yRF1ZLtf65onTbZoOgz554yQMwmxgHRKEGVRFClGKDatexDuvudduZZZspW9g3CkeT8W1HFgFroVGfsOywr7JCK8Qx1Qd8aXtHeJM+cWX8dCmGYUYU6o6VZ7O75cdooEgqJRvN5DrqagP+LXZgwVR9ntyzAp1o0/t5HvzZaaiY=","authorEmailMD5":"98f19d70948a72ca4a5a99b7afb49494","message":"So, let's say we have one thread initially that is the request thread and it is executing the following pseudo code\r\n\r\nController function()  \r\n{  \r\nDoComputeBoundwork();  \r\nOtherthings();  \r\n}\r\n\r\nIf there is only one thread which is the request thread, the processing is synchronous, it will execute the DoComputeBoundwork();and execute there for a while and then go on to execute Otherthings();\r\n\r\nNow, let's say we were able to push off the DoComputeBoundWork to a non [asp.net](http://asp.net \"asp.net\") threadpool thread. The main request thread is free to execute Otherthings() while DoComputerBoundwork() is being executed simultaneously in another thread.\r\n\r\nWe are able to do work in a parallel fashion instead of sequential. Please correct me if I am wrong or I am missing something(which I think I am).\r\n\r\nThank you for your patience Stephen.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"b1e393be-2011-3fc2-95dc-a0a7178cdc4e","date":"2016-05-24T20:50:50Z","timestamp":1464123050,"authorUserId":""}