{"_id":"7016fa64-ba62-38d3-90bf-88c772b2ac07","authorName":"Avi","authorEmailEncrypted":"HRZtbHZfOr12r12bFgOkv7YARACINczbTz3LlMtsJNz/GkyaFkdlklr/eLAxb6rwugBZCxvnUI/9BbAFdfum3ohNtqZmdefHrJrHe2EUnK91oNoIlAvYvnS7tVDAoCB6FEdFA4bWkIhTtj6vYvKDAzDFpH/gfiOqUykKIJq+osnoa4qDPzapCtwP2BCSz50TSrWelFdEbBRMdarKxotYEIaVjnPuIcMhWFQI5zYSB4E/TNZHsP7hQ+uSJPl5U6N7fjCjWbwyaVyqoQG/EpEdI89RKUrTOqcO/78gT8lOoBsluoF/kazlJtsJkmDVx8XyZsDqj6Lycug3G2kCwfkHLRCSwKMHrzzgANWxsORzTp3xspJTEJ4WBGog6Dpz/hqamai6PeU1jsNikvnJQS1ebyvyQwTaJ3ibOAxHGEbOkbFxQAkKkAyKLtlujpKQqeVLdnyfje2mCUdu+ezKF08A389GECXKc0d0HcR8UF7WKGF03BhulgdYbmt+FPZvglU1dVzmKouGflQr+kDiipctgtDE6iZL6j/6HWY5PhREh3syf4GuaVS2H2atpnpOiDSDon9ijBWg3G752N3+Yh4vizs+5ib9DAeJ/NGou8bKSlOuTGNaunACbrBCQ6WllndtkKuXIRpS05uDg8eI1DaNBKQPCHleiwHTnkJLqT4H4GA=","authorEmailMD5":"98f19d70948a72ca4a5a99b7afb49494","message":"So, let's say we have one thread initially that is the request thread and it is executing the following pseudo code\r\n\r\nController function()  \r\n{  \r\nDoComputeBoundwork();  \r\nOtherthings();  \r\n}\r\n\r\nIf there is only one thread which is the request thread, the processing is synchronous, it will execute the DoComputeBoundwork();and execute there for a while and then go on to execute Otherthings();\r\n\r\nNow, let's say we were able to push off the DoComputeBoundWork to a non [asp.net](http://asp.net \"asp.net\") threadpool thread. The main request thread is free to execute Otherthings() while DoComputerBoundwork() is being executed simultaneously in another thread.\r\n\r\nWe are able to do work in a parallel fashion instead of sequential. Please correct me if I am wrong or I am missing something(which I think I am).\r\n\r\nThank you for your patience Stephen.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"b1e393be-2011-3fc2-95dc-a0a7178cdc4e","date":"2016-05-24T20:50:50Z","timestamp":1464123050,"authorUserId":""}