{"_id":"7016fa64-ba62-38d3-90bf-88c772b2ac07","authorName":"Avi","authorEmailEncrypted":"ZRcl28He8zix3piQdeDb42SqGxosRqBiLjGMdddTl+XZWFoRKC6cxH2MJwtUBgQVQNoNRH+aMTp2eI31jQBBWFoteGrxuSrXrUc9BiMSP0y2kLRvJzjiGgV7jlrHcLTLxLqYx7cmixb4uich3zzDr67zIB0bItsvYg5VQC/gj9c0QO1r8IzqgsJfllQSVSmVY5MNYwxNKvfTjlgNB2oQRIXMk4GpwXXAfbQy4PX1n5VXjNgPOqAUgwlUk+Zcv4iqVbQe1oiF8XJTCA5+AySnhPXLLl+Ch9AzxP0vQyxjrjVoiYPVAYx9fsBu+2l5e8gakpxjctr7x2dUcH7zH5qe3SB1iQq5KxPJm1AEQEmtPC4bt9Jh0phsE34L0FgDdSL/vfz5kvff4J7ehwjZXit3agxB2U0B/5ZtnE2w8MPWEmHYyKeFMGCUKBr2o4pqamdVJcGAgpraGc0t0HSBtjQz45uy8pMUuJT4IfPHUdK8gJX6uCEYE/OITYstzMKGO5Aoe6rjsYtJ3CRSm7WyODhSoMTmxzSlbRi5MLNmppOuwL2lqTOJ3qDCKhkuZCpSE2Pp6HRXZfS3el2piHIO7b94+QI8MEGL7WxngamIyVzqLEiqV54nNLC4Y/YoD0jh9fc9nujCQcpaWEsFviGP1yatCeLAVdQxp9xRAcQvDnhMX/Q=","authorEmailMD5":"98f19d70948a72ca4a5a99b7afb49494","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"So, let's say we have one thread initially that is the request thread and it is executing the following pseudo code\r\n\r\nController function()  \r\n{  \r\nDoComputeBoundwork();  \r\nOtherthings();  \r\n}\r\n\r\nIf there is only one thread which is the request thread, the processing is synchronous, it will execute the DoComputeBoundwork();and execute there for a while and then go on to execute Otherthings();\r\n\r\nNow, let's say we were able to push off the DoComputeBoundWork to a non [asp.net](http://asp.net) threadpool thread. The main request thread is free to execute Otherthings() while DoComputerBoundwork() is being executed simultaneously in another thread.\r\n\r\nWe are able to do work in a parallel fashion instead of sequential. Please correct me if I am wrong or I am missing something(which I think I am).\r\n\r\nThank you for your patience Stephen.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"b1e393be-2011-3fc2-95dc-a0a7178cdc4e","date":"2016-05-24T20:50:50Z","timestamp":1464123050}