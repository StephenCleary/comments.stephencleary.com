{"_id":"9f7d35a0-0161-11ea-8c8f-05bffcf1e1f6","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","postUri":"https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html","replyTo":"","authorEmailEncrypted":"LKi0cMU0pzL0+I5Pt9//T1PKuOO8WqGvCowGdj1++cHgM6LFH5I2c/pPq2TpnMpgmk2NrCdKlofwSR4TmXgvYoWyXbSJxj5ux1gcdbYc1CgKhoiXQUtqLpkPP2Pph9jTTa6IguGVZpv1jdFLtoZw0O9RRfiwAiDJ9sOc+Txp5N7vLqRPWNulf9itAEhXcxNIM14lLGvvNM1mCksDy9I/goZiSNXKgKbULqspCNJ39a3CjLfZLHhv6aiIL/Ww88KX5R68j+V8HLlZnTdQ5vRQ13zk5+G3S6x5fWsOLjUGG3XNh1Ef63EsiQkQI+H1nADT+zZRmLb5Uc4V1sBlbxujZkLtizlr22HEXKub/qXNwXxbdLldHG4X24Rnt3OLiNEO/dtEOYnJy2CNEFC5Wsh+PxwbAGUqz6B3rbcU9i+gBzHTiBIdTsJ5d+o/UIO+aO+gLRuZXdFIKo6lEzfjbICJe6/TPhAyTVmopPho44OO7e/G0Q2YSi/37eBVQTMhrX+uwWmRZ9HPo3ROhFjkwh/qK81Sv4NMcHHBOLJzi0XlxM13S4AQzVxv7aDqFrHBT7MTAIOcjDYQGbQgwqiiORcly8n8gp0eX2jnHrzw/wwpE9lRZJcGhjIpCnY3v2Y9gSb/SZbybj8COccMl6SksuG8j40a91Z28L/WPMdbVhZFosM=","authorEmailMD5":"ce3a9a768fda4d51860150cd1b0b1c17","authorName":"Stan Wijckmans","authorUri":"","message":"Hi Stephen!\r\n\r\nI have 2 questions regarding this topic.\r\n\r\n**1**\r\n\r\nLet's say I have a method that does both IO-bound and CPU-bound work.\r\n```\r\npublic async Task<int> GetDataAsync()\r\n{\r\n    var fetched = await FetchAsync();\r\n    var result = DoHeavyCpuWork(fetched);\r\n    return result;\r\n}\r\n```\r\nIf I understand it right then this is ok, but do you have any suggestions or best practice how to make this behavior clear to the caller?\r\nGetDataAsync has the Async suffix so whoever calls it from the UI thread (without looking at the implementation) will probably assume that simply awaiting it is enough to not block the UI thread. I'd like to have a way to make it clear that \"this method does IO-bound work asynchronously, but still does some long running calculations on current thread\".\r\n\r\n**2**\r\n\r\nI understand that, if an IO-bound async method is well implemented, it does NOT block ANY thread (or at least not one from the pool). I this true?\r\nDoes that then mean that running this like\r\n```\r\nvar resultOnUIThread = await Task.Run(() => GetDataAsync().Result);\r\n```\r\nis LESS efficient than doing\r\n```\r\nvar resultOnUIThread = await Task.Run(async () => await GetDataAsync());\r\n```\r\nbecause the first example blocks the thread from Task.Run, whereas the second example does not?","date":"2019-11-07T13:22:19.065Z"}