{"_id":"cb39059e-653f-3739-b7e6-12e7f145d530","authorName":"Stephen Cleary","authorEmailEncrypted":"XFySvv7Nmv91Pea04n4UhcPyBKSPRAz7RVZYRP/Nkf2io80PzFcLbmXk29vOQ3jO84KQtzJ+7N7eQZrk7yGG95dF9WFs5RBUtqJ6Wp6lFkIuVtV39avbsDrSbYh6G4eLKvCCjUFDw0+1kr2ycOlnKW1emS/9l3XF74qLCWMsAqEeHxwmHKv7MQeY6ubwLTKUSdsPSfZztAwddQYppXfdrnY3KMnpW1fzNuZRGruBL6EA2NpgubACKDGw4h0TLGJeHgwq525mWUNwymB253tb7kOWLoZzFBTPzAqYsMkh5S/DITQxp0aNwr8Q02SO1H5h8N5jNS1udrNx2OPJJZ3M8Iy+BTGfgLu5BehQPCDgU4K+ikM+QzZQ5aBhRyAc/irv8M75Z7TXbVdKL07ARMUN+59nCAQr9e7VagfGHko2Bu6ZwsJ92Bapu2KvIx4cDbp2vcKrv+4iK4qlciaqdeiEalGfIGTXLaGNEWXxN12p0BAoNQEUvlgsMHMBLi2rpraJVeKyztFP2B5v8rsGgLTIdUkCwWTF8AoTIeltfa6zqlUDI3WASejHd2v+NLSgk9zQtDGcowiv7BTGymvIWH93a4lEb5GbR76rqbf2+dDn1tKapDqc7CpJ3cSYDZREuwfXZf84kOWAlBMbEWI2zEi9F2Ob4/estHy/8HOmbSlGciU=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Yes, I agree that it's OK for UI apps. And it may or may not be acceptable for ASP.NET apps.\r\n\r\nIn particular, Task.Run is OK (though I would argue not ideal) for abstracting platform implementations of operations that should be asynchronous. But that's not at all what this post is about; this post is about operations that are synchronous.\r\n\r\nThis post is dealing with the common problem where devs assume *everything* must be asynchronous. I'm searching a list for a string? Wrap it in Task.Run, and now it's an asynchronous search! I'm summing the values of an array? Wrap it in Task.Run, and now it's an asynchronous calculation!\r\n\r\nIn cases like these - where the operation is synchronous - wrapping the implementation in Task.Run and pretending it's asynchronous doesn't provide any benefit over the recommended solution of *calling* it via Task.Run.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"c360807d-30c4-3ddc-b986-bc9d48282819","date":"2017-09-28T13:42:32Z","timestamp":1506606152,"authorUserId":"disqus:stephen_cleary"}