{"_id":"cb39059e-653f-3739-b7e6-12e7f145d530","authorName":"Stephen Cleary","authorEmailEncrypted":"SQVpfEaAXwc2r0Z82vSCQhi+W6retNuNNDU/9a1PVmPGKDthUy4+2A4eo/CJ0fdrawCJYcMSuhMrk+WWtM6xStbVUXDD/8Jo6smiMVqcZ2DrZ2OhCIN6SYYtP5eWuRSFKqwW6/pvhzLOc4YnsAMN6qhIsIrpu+SZ+foviGpuQ2FFBTzuX2P2ItdimudsgGiGHaadYtTgFWEvLFQKu+adZZFUS6zncyXQF+f1Jv19R3qVUQqZDuUHaB9La1YzkOrxcEogTNnKczUw1f0/y7V+xB9ehGK9OhejKPJ6txBSZ/IpH3VEDnjd9M+4Ivdol0T+Pu/F1SAlirlp/6IvnhFhaKpC073zC+w5AlUIEhXy74XFbm07PFdYKkyim9d80ViL0DWBQEnAWgg0lcIZF/k7CDDL96tmHQVULe0F6ZD6QCE98GA5D8et+wCkT/g3n9z0I/rgM1+B+j0ofFK8m5TePxb1xxDXVpPiAwo8hA80YscSckiy9fzMdXqj12XKi8rMwAqBNja/L3waS8ICaKRMXwAXhJYnzcdmDPpcZf+gvysIOtw+OrM7blPmxec24/KgTbIpDl/CPsUbY2xJfnjVsQ3Gk5cbvpqyBgaVkxG85TiFAzB4LuzxtHs/xVptc+08+7nxAnoShhCcs+/c6UK5kiZL24wfGVZSjoy0rzcXJEA=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Yes, I agree that it's OK for UI apps. And it may or may not be acceptable for ASP.NET apps.\r\n\r\nIn particular, Task.Run is OK (though I would argue not ideal) for abstracting platform implementations of operations that should be asynchronous. But that's not at all what this post is about; this post is about operations that are synchronous.\r\n\r\nThis post is dealing with the common problem where devs assume *everything* must be asynchronous. I'm searching a list for a string? Wrap it in Task.Run, and now it's an asynchronous search! I'm summing the values of an array? Wrap it in Task.Run, and now it's an asynchronous calculation!\r\n\r\nIn cases like these - where the operation is synchronous - wrapping the implementation in Task.Run and pretending it's asynchronous doesn't provide any benefit over the recommended solution of *calling* it via Task.Run.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"c360807d-30c4-3ddc-b986-bc9d48282819","date":"2017-09-28T13:42:32Z","timestamp":1506606152,"authorUserId":"disqus:stephen_cleary"}