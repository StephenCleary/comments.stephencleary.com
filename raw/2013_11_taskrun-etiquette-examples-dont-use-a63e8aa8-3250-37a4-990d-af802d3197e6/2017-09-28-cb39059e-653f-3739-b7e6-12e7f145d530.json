{"_id":"cb39059e-653f-3739-b7e6-12e7f145d530","authorName":"Stephen Cleary","authorEmailEncrypted":"NARDSbMYwKfPIL6fd9zsboFXaHwXq5hUa+I8dTfxvYBclW3+qTflqqX11dVOkSpiiGSyJK6XyezjwZZP9slUGiGtuMxvmZhi1Qqelssg81vJD6JTMlnbtjHPBpXEBeDO2heoQ1B/o+ySpfHxaCfiiyF3nOPbI9RrZWOFrAXP72tHFPeHgmYL1fJSCnNKBJ7DwPQ6ZULnISz7popEU+Zx2OyXZIaXPMyD140dW3QorVekpVpqPilqxj2NoOhQoPampIG0F36EV7Wz4h8aOdZVQV41rAeYtXF9GQoeK5HVF+NxQUTDj3Knrc6lohZx1qUDFx7d6izY2Ymuaxs7hi4x8rDlmbG5aAPQfbrzro1FtI10puDNNAflQtx+PXVS5qQVmBiKEGcm3HxSEeMviuLAsrmb4a6tJh8wLZ1pKSLM31f/hZeqilmoWg1L47CS3m4zZk0DIJLrS+X3YqiHbBPdYtMkjEvXogfG7HNixbpeNW+6pvzjGQ4u1ubFMe8Rs1QREKS10cbVAno9mgjezJ5FR4zy9sdofjNAK8doq8VDBNOTQWIEfHYXn2z2UFddEr+S4PEbCbqo512i787phbztiohCpvjMGLGU28D7/hngZpOk9MAuYXnvIBeYfPK3nJM2RWCZupW/dctJeC0Jlqz3I5p/YEsZKONRjeQUAcgKklg=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Yes, I agree that it's OK for UI apps. And it may or may not be acceptable for ASP.NET apps.\r\n\r\nIn particular, Task.Run is OK (though I would argue not ideal) for abstracting platform implementations of operations that should be asynchronous. But that's not at all what this post is about; this post is about operations that are synchronous.\r\n\r\nThis post is dealing with the common problem where devs assume *everything* must be asynchronous. I'm searching a list for a string? Wrap it in Task.Run, and now it's an asynchronous search! I'm summing the values of an array? Wrap it in Task.Run, and now it's an asynchronous calculation!\r\n\r\nIn cases like these - where the operation is synchronous - wrapping the implementation in Task.Run and pretending it's asynchronous doesn't provide any benefit over the recommended solution of *calling* it via Task.Run.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"c360807d-30c4-3ddc-b986-bc9d48282819","date":"2017-09-28T13:42:32Z","timestamp":1506606152,"authorUserId":"disqus:stephen_cleary"}