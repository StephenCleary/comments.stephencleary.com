{"_id":"cb39059e-653f-3739-b7e6-12e7f145d530","authorName":"Stephen Cleary","authorEmailEncrypted":"EnVcL7ktJodxOu1pPNnjP4N8cRTL8BWGzRSiXuweT3vKbS2gTKwW6Lx+HXu8dmuXdhRD0cCEu/OHcKZMxmNA+KMZGtdtOXDBOQZ1ITlnJIzclZDyPrXo7Mf54RGP4/fiLcqUcVRcoJ6tFqu9HY9f6c7Yfb6l3Gq/xrKsSqaKczLkj3ia7ldrHGWXq2SeolQOa/XORJMwJVp+/M/1F36FDT8IcXK1usQFd99gXq3RDD3tUV8rDoHX9zFQaM90P4lqTGV3xNrFkepZyyZCL0bDNLt205mhs/EZr1hZRlYWcSwlYWlnE46KPDpOiWZi2HWicxhYLZ5NWjTFkXWqu68TMEeAHZNZhmC+9vvV+L+d9QXBTFdKWAt+Gc1J9RlcC7Hd7BzR86Bvn0Vv0U5MzevrBbjFzqJ4+i56UTYc6DXb2SIbY+CsViYGHHbzCL23VsKFW5ArJcPY3qVgrX+SD8Oz2BQBzy6Ehw72kGThcF4XTMw/Ctk5CaSDNMEoBFu7aikWHWTzvf8ZqS7Zrpu6xlwyhCvp0ksAxJ8wh+kPMJClm0uCPKcprWITxerX1nxVzfRr6v2NokWKIOizfpg3LE2ROG+XNmIzszX2jawr3cdhGtSPbQow0DRb1nsprx+iafpiKMiwy8L7KKtYFqMpdkxktaZKHUWtQxM3Omztx1oNYIg=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Yes, I agree that it's OK for UI apps. And it may or may not be acceptable for ASP.NET apps.\r\n\r\nIn particular, Task.Run is OK (though I would argue not ideal) for abstracting platform implementations of operations that should be asynchronous. But that's not at all what this post is about; this post is about operations that are synchronous.\r\n\r\nThis post is dealing with the common problem where devs assume *everything* must be asynchronous. I'm searching a list for a string? Wrap it in Task.Run, and now it's an asynchronous search! I'm summing the values of an array? Wrap it in Task.Run, and now it's an asynchronous calculation!\r\n\r\nIn cases like these - where the operation is synchronous - wrapping the implementation in Task.Run and pretending it's asynchronous doesn't provide any benefit over the recommended solution of *calling* it via Task.Run.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"c360807d-30c4-3ddc-b986-bc9d48282819","date":"2017-09-28T13:42:32Z","timestamp":1506606152,"authorUserId":"disqus:stephen_cleary"}