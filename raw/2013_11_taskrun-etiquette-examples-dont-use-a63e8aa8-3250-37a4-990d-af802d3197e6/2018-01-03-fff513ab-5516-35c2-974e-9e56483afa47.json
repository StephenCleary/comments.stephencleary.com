{"_id":"fff513ab-5516-35c2-974e-9e56483afa47","authorName":"Stephen Cleary","authorEmailEncrypted":"Yrrjaf+gGVZDFZUqd3/xc4PsKJcP828XWD4UqHm3dpGw1yTxVEQbRt1BUVq+ChbkYL9CmQWQXgYc1fuRSQou0n19YQ762WCfBHEXB1uejaNNM7l+uOxYU9/WstF5xkeccatnoY8f0yV+wGXPTAlHmwa5QV9VIcCFGIGAkEoL+C+QJgf32TKVeNlG/I+5UGELoOn4m174FwWWB+MELq7O+DNb8+34+yBzAjWbyxhafGgZURiaqZjZU6OJ8oA9i5UaCLgX/xSJbyM5GDLFx62MjfSMDvZrxjSkFK5XuRIFswwDcjPTvpGzFb121ZKSjYPci9qNTVdIExbIVsjFnwbvVZ03Hcl4+zTLPwUHZ7d3PLSev7uaqI/zNH7CRdYIQpBZCgiaNMuDCWAksjz/xdIS0qEyNE+vi6BABBk+yxEpLaR57jdf1penw9j4qfZnElojJ1eD9LiqIpIMZY62aSg1kfsLlEofsqkChVEhUpNCDgR6KEyQ5PAtwazcDinmQ49QWQAGcyglIpWfZNDa+39DFeQjCC45OY2UhWW3fKIQdcVhvE0kM4UFAT8br9UDPR0vUcVtrxBLbkcP2PNP4+DU8dIFDgWSnMVt+vtq0JlQqdBjj6kiIpctmoDJ8AlzAEmy4Vwc5jFdMwJGJQQgqbwZtQUQsX4F22k7P1nEWv6VXow=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"","authorUserId":"disqus:stephen_cleary","message":"The problem with using multiple threads - even for a few seconds - is that those threads aren't available to serve other requests. Since your operation is I/O bound (reading Azure blobs), it should be straightforward to start each download (getting a task instance for each download from the Azure client API), and then await Task.WhenAll on those tasks. This will give you a fully asynchronous approach.\r\n\r\nThe asynchronous approach will reduce your latency for that request, while also not reducing the responsiveness and scalability of your server as a whole.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"0893ef3b-1f51-38ca-9213-11e9c3dc4f9e","date":"2018-01-03T18:47:00Z","timestamp":1515005220}