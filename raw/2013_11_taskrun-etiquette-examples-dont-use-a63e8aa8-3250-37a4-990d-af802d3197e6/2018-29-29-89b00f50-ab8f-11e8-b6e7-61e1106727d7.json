{"_id":"89b00f50-ab8f-11e8-b6e7-61e1106727d7","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","postUri":"https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"","authorUri":"","message":"Hi Stephen,\r\n\r\nI am running a task using Task.Run. This task is kind of a background task that just waits asynchronously for items to be added to the queue(Calls ReceiveAsync on BufferBlock class), and then processes the item. Since this task is an ongoing task it has to keep running and I do not await it.\r\n\r\nAll of this is part of class library which can be used by any client (console app, win forms etc)\r\n\r\nI want any exception raised within the task to be rethrown to the client. However, since the task is not awaited, exceptions are swallowed.\r\n\r\nIs there any way around this problem? \r\n\r\nThanks","date":"2018-08-29T13:29:21.873Z"}