{"_id":"0893ef3b-1f51-38ca-9213-11e9c3dc4f9e","authorName":"Mark Wood","authorEmailEncrypted":"N9DJQx5iDWLbXbK1jZ0qXuw4N8fBD+aC0X2Xev9yxmCfZA2p/jarF0x7Ny8mn2vdweHloqVwSwuGbRmeIv1l9tF7WuejTh9weISAIMGb9q+wkeevb6vidZ0ru2mxC6sco9EM15YjibuHLBdJldeUDGdaxZx0hpsnhsL7f3HdDFElee1hDq/2DcYgnq7hvKB7OiOfqkbRu02Zo+aWdIZ5gv5nQWFmQbbIa7PtAaEoKYirtzLVfefQYzZYzofZ5msQkOC3cElWDdZV8BlLQCW+mVRD1kkyUJKWOisd4CKa9p12X1jDAVST/+i2uurdHczwGFl00z1wEsxkhGUJPeEUIQXxLN+aaKfDKdxtxsb0iW7wQfXw6BmdHrqOrRz1cxT0VtN5Zxs1zXtGDOOjwxqKry4sBfpLGcElAZ9Lc9qU8hQLpT/pWBCYSfXht7n/2HYnTmG7gBa0ENpHJKGKcz01dogir0YEkF5jXchoz/ZE0NLZPks6rrLkB/9P/RT4po3amVeHQzYp4zVkEK5mo9cVHb5cqaf8MdSRHD0eBIlxTHlqitNTo0Kqc4YmnZctWa0Gwu1trDPvzJObMdcKNPXrhxiRvoBHVRiPxzxQwB/oXcxYRUdKyyWB7UpMrpAZ5yBJXn41e1mSP5J742TrZvmGL/RyQo8IKN+5TkD9BKx0AGo=","authorEmailMD5":"35c619f3abd4883d7c123fb584feea98","message":"I have a web service that, in order to respond to a request, needs to retrieve the contents of multiple files (Azure blobs, to be precise). Since I'd like to reduce request latency, retrieving the objects in parallel would be desirable. Having the entry point make a bounded number of multiple Task.Run calls to retrieve each object seems like the most straightforward approach, but based on your comments about avoiding Task.Run in server methods and for non CPU-bound activities, I am wondering if there is a downside to this approach I'm not aware of.\r\n\r\nThe retrieval of each object should be relatively short, well less than the couple of seconds you speak of, so perhaps it should have minimal impact on the threadpool heuristics?\r\n\r\nIn my limited testing, the parallelism works as expected, improving performance with no observable ill-effects, but I have not put this into a production environment.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"","date":"2018-01-03T17:58:33Z","timestamp":1515002313,"authorUserId":"disqus:disqus_djXku1fbK8"}