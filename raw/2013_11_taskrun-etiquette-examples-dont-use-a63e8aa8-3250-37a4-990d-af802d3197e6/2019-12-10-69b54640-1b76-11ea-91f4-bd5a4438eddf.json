{"_id":"69b54640-1b76-11ea-91f4-bd5a4438eddf","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","postUri":"https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html","replyTo":"9f7d35a0-0161-11ea-8c8f-05bffcf1e1f6","authorEmailEncrypted":"gbq/jQJdmboT/L6X9O5fKE/L+PG5yiWKLGaqsIvndKBXnNkjJqMUlGCWHLkOhSa+AgcHmOxy3+UQhmgTMHHXQlXObuxqgy+Yf9UDQSSzvHCFqICHXJx9Hvep+bJ5nDfD70Z9QKYr/z5ntLaAMVzwrQSI0MsJcawYymmMkwxFXcDoJ4OLUuovYUwBT8R1F/DL2WsceWIpj0rhk2aTnO8ftEv69XR8qZGDWAPob9B+rAWGxhlJy25wtn66vjfE+DUEZb1uegGaUu2URG0yObqnjxciF29poE3i88fAV53pGHGRvfH37/7wiNQGNj6y0oE2yfDVOvzh7/0Bqf+rOEi3GAH4VlHyuDviPR86aXDWZBRJQtWFw2UL884tEZKB2cSbfL7o31WThWJ0ThvQklJx3Tg2RevI6Dy8YjlJ+fyJr/IkEiIyoti8FWeh+0Ju5jO8a/YgdtFrHbqdmn/zvtRMsLRXsEOl8ykUIs/7kneMSMPlqb7T+N9U+TaegVkpLgkMhFbZVgywlkv516EUCpH9N+ofAATgnHEA4guYgWBXZTDsj2bpO7zRff5dY49LAc6MRs7kK/rqvGsbmnnQtQ/NPASQJ+DvVdFSUsPopm9CWbr1gyX+jxS0HkjqPmoQIJKtvjqbfUAUza0cGyC6jiR46l4o59rY7V+4HxZirnkoHJI=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"> Let's say I have a method that does both IO-bound and CPU-bound work.\r\n\r\nThat's the subject of [the next blog post in this series](https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html).\r\n\r\n> do you have any suggestions or best practice how to make this behavior clear to the caller?\r\n\r\nI definitely recommend clear XML comments for methods like this. You might also want to consider a naming convention; there isn't one in common use but you can establish one for your own codebase.\r\n\r\nAs a side note, this is a very rare scenario. \"CPU-bound work\" in this context isn't just parsing HTML or anything simple like that; it refers to a substantial amount of work to the point where it would be noticeable and undesirable when running on a UI thread. [50ms is a good rule of thumb](https://blog.stephencleary.com/2013/04/ui-guidelines-for-async.html), though in my experience you could double that and still be good.\r\n\r\n> I understand that, if an IO-bound async method is well implemented, it does NOT block ANY thread (or at least not one from the pool).\r\n\r\nCorrect; it doesn't block a thread for the duration of the operation.\r\n\r\n> because the first example blocks the thread from Task.Run, whereas the second example does not?\r\n\r\nYes; the first example blocks a thread on the thread pool. That thread is blocked on the call to `Result`. The second example uses a thread pool thread to start the asynchronous operation, but does not block a thread pool thread until it completes.","date":"2019-12-10T17:56:38.462Z"}