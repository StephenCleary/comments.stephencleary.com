{"_id":"84156983-5241-3b16-a985-6b16c6d9d40f","authorName":"Stephen Cleary","authorEmailEncrypted":"Bgs5vgGfxCiN8GvF6CHH94LNoYekpj+ciWDa56iQZqd4z6X1a7jEmA9eNlepTKtBSZGvgahJZBaqz3w3W6LcyL6KF0E91TgdGrdSu7EOgqDTcXpDSgDNSadv2Y+fn4SRwJkKw+0Wq/JBcno/sJoLrEPyvr9OZ6Wzw1opgGLjkx0QeaowF8P/iJ1kqsBdSEvAbWfNmT5pWm6gCt0+KqKp2AmDeVRTz1viGCRzKIhtPWTCYeHrjkZk6kSgzBDkJtWwNsdwnndgnYSmavVG3pg9Yo95mHkAY4Ym8bKOxQuNO2gMlAoJDAyCaGtivgXOwOFv1btMw3PJW/kPprlrDTqpLVKnrQZdd01r6Ol86bxsRLNoonW8u6ytvYXVpBRzLdA08/rEKobKulRB6KV3/emEb08xCyFvPB8ABAs4r0VqAlePRa/ryrwBgxW2N3zpXo8Io019UcsV0Frd4VUA+pzkrjgG8KFg2BX4IMog4y+mApTL8egwwBx/SvpuF8ltOP2zZykoQxtDZtGLxUrdf5HvRH0d6S4y02mcpKeMqVhj6ByV7lWUq7J3fzeZbODYyGIhzbxMH7HC+uyXt0Z/9iJZbzZ+vv7iuc32/D5eGr0xhvzep+k3RIjESkEhhNb0VecZ2UVLJRDB6wSwBDwVjw3WY/uhYLJN4y8mW6IpDmLNzRQ=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"I always view parallel code on ASP.NET with a healthy dose of skepticism. Parallelizing a request (that is, using multiple threads to service a single request) will help the response time of that one request, but at the expense of other requests. The entire point of asynchrony on ASP.NET is to enable maximum scalability by using fewer threads per request. Parallelism would have a serious negative impact on that scalability. You especially have to be careful because some types of parallelism (i.e., Parallel LINQ) by default assume they are the *only* parallel process on that machine, and will try to scale out over every processor core.\r\n\r\nThat said, using parallel code on ASP.NET *can* be done. For example, if you have an internal application with a constrained number of simultaneous users, and there's nothing else running on your web server (e.g., the parallel code won't interfere with a DB server on the same machine), then yes, you could parallelize a request. I would be sure to make note of your environmental assumptions within a comment, though.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"c4987c90-02f8-3a49-8dfa-2badf9d2caed","date":"2015-03-10T19:49:05Z","timestamp":1426016945}