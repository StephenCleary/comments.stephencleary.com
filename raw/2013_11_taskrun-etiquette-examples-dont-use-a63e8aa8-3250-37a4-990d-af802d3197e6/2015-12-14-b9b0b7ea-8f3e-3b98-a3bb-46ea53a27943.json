{"_id":"b9b0b7ea-8f3e-3b98-a3bb-46ea53a27943","authorName":"Piotr Sobiegraj","authorEmailEncrypted":"lJEzCXZ82akzRKWmyB3zTsxJaE2K/Kc81VrjH8IAnTkp9hZ5f8ZNODoN1YDXo/3YovPTsnI/AuvTug942lGs9qhBYVL6vG5kshl4HOBkdYcifgoDN8h+Pw4mlTk8HxaGXcKQd1xjWpU+B+M4UpctOMXEsaJHJ5hVJOvo1Bw6PDuYZqSDraOeYf/APinrVb0rbeOnw1Nry64NGm3Qe5CoP2ofFJtaglopIPyB+Yong84l1cwwkmm2R3TDOWlV2h8PdEpe5UQeABQGybdKqPZyl2m53UvK2sUQbQ/NcnGjCu07AOeu6C9FZnafQ386YSexIuuqtlneGE9K4RCin5gIe9ZLPqaW+i15Fi/LExS2fqW6pxFCTVT+AikxCZ/z6mFVlNE+Cc847Oeqt3pkA/c59WZbFt9QCUdeTv2f6XJ48MKoKUsBPPZmD3+xMdRkluT2XcpTI5cW8kWaAoXNFGb3JVJgqq0nId9GfGqMwJndSPc+vQhyVAyNM5coSwaXdwR9sbeatM92DrvQF167k1cyRaf3ofoI44TlC+OkdrqU6m6jwAM8qsLKIUsTKkcg4DI6g7sPN+fY/x0mXKIK3OmkvKBGdbxi8wG1vZEg0lHfm21dz2fQCF+EDOYmo5HYxx6OXPeUJ6xCZNw8pGk+MyB+JRGVF9sY0UFvdn18sA7iD3s=","authorEmailMD5":"f4836065c2b1079021dd542a674a0ec3","message":"Hi, some info you can find here: [http://blogs.msdn.com/b/tmarq/archive/2007/07/21/asp-net-thread-usage-on-iis-7-0-and-6-0.aspx](http://blogs.msdn.com/b/tmarq/archive/2007/07/21/asp-net-thread-usage-on-iis-7-0-and-6-0.aspx)\r\n\r\nInteresting parts:\r\n\r\n\"So how do things work, exactly, in integrated mode? Similar to IIS 6.0 (classic mode, a.k.a. ISAPI mode), the request is still handed over to ASP.NET on an IIS I/O thread. And ASP.NET immediately posts the request to the CLR Threadpool and returns pending. We found this thread switch was still necessary to maintain optimal performance for static file requests.So although you will take a performance hit if you’re only executing ASP.NET requests, if you have a mix of dynamic and static files, as we see with many large corporate workloads, this thread switch will actually free up threads for retrieving the static files\"\r\n\r\nand\r\n\r\n\"If you’re curious to see how much faster ASP.NET requests execute without the thread switch, you can set the value to 0. This will cause the request to execute on the IIS I/O thread, without switching to a CLR Threadpool thread. I don’t recommend this primarily because dynamic requests take a long time to execute relative to static requests, and I believe the overall performance of the system is better with the thread switch.\" It's about a MaxConcurrentRequestsPerCPU setting.\r\n\r\nSo, there are more precious threads (IIS I/O threads), but they are released by default, and code is executed on CLR Threadpool.\r\n\r\nAlso here: [http://blogs.msdn.com/b/tmarq/archive/2010/04/14/performing-asynchronous-work-or-tasks-in-asp-net-applications.aspx](http://blogs.msdn.com/b/tmarq/archive/2010/04/14/performing-asynchronous-work-or-tasks-in-asp-net-applications.aspx)\r\n\r\n\"Q1) How many thread pools are there?  \r\n A1) There is only one managed thread pool: the CLR ThreadPool. This is the thread pool that is used by the .NET Framework. However, using Win32 APIs you are free to implement as many thread pools as you like. Almost nobody does this because it is very difficult to get it right.\"\r\n\r\nWhole article is worth reading.","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"5a18295a-1907-312f-b16e-d7266852e939","date":"2015-12-14T20:08:54Z","timestamp":1450123734,"authorUserId":"disqus:piotrsobiegraj"}