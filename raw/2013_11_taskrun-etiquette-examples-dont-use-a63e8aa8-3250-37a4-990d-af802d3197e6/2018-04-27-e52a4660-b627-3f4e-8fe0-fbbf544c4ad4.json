{"_id":"e52a4660-b627-3f4e-8fe0-fbbf544c4ad4","authorName":"Stephen Cleary","authorEmailEncrypted":"RwcHOBBNy4/8CS6+8S+Buhdyw8IkhLQ3Pmpf8ZDMTJ4lBsLL3U6IrVPeGT8vnNhQSMBmHG5+l0zbvQDb1tQO3T0pOw9+mlGVApN70XRRdp9yy04yiIMnxYJAhEwoQGV1Yl4tvSk6vdj447FsBXxGAMZxxUQXxzEyeWZV7bpPFAbw4MNXkxNwVPWC5hhJ2NujJBWFG1BogBEpkTU80lpK2o5yR85GpIoTyFpsofs/ko03nakPQqLI8zUUYnpxFDvL8oJQScA2N7EG67zFOBjd5aaW1YEKBOBt1F8h8xzJhuQAwNrkYMWHQi1rkxawpuBKaivmAO53AnqG+5fh03fv7opvdYVkhNXFCyu0l3l5aMRCM/wIIqlzkffFVyvtBhbwyJbsZ+k4Rysd0m+aPa0CFDfymsjFdECcQjEtmsIkUaVx8OzMWuOBW5o9K45CT+rqK7i2WskJjwXPgjD+1Z5YSb83tGc3xB4yr86d1RiXrztEB/A68CGRvbb+AK1mo3Rd6ZMwWeKQ7w7nntz6Yxy1P0zsBuRT06ZwGO1u3IyiTLhWxSroOM8PDqiQu6lmtvj9MJz/1ybuJ3/lhPuXaIcNu/zam3Vxdc6hG54yGpzzET3u4ZmbyNqAbP4ah9LGzE33MKpr+OUYyMxSFPIvOFMKVXciCzAlVZUs042kyl3ALnY=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"Yes, in the general case, your I/O operations should be asynchronous, and your CPU-bound operations should be synchronous. Then, if you UI layer needs to do a CPU-bound operation, it can use Task.Run (or Parallel, or however it wants to call them).\r\n\r\n> one case I have been running into doing development with Xamarin is that I often need to call async methods on a method that doesnt really allow for it.\r\n\r\nThis is an unfortunate reality of working with APIs that were written before async. Due to the limitations of those APIs, you do sometimes need to resort to hacks: [https://msdn.microsoft.com/en-us/magazine/mt238404.aspx](https://msdn.microsoft.com/en-us/magazine/mt238404.aspx)\r\n\r\nOne of the principles of Task-based programming (including async as well as Parallel tasks) is that you should always observe the results of your Tasks (unless you're really, absolutely sure you don't need to). As an example, the code you posted would silently swallow exceptions from DoDatabaseOperationAsync, since the task returned from Task.Run is never observed. So if your database operation starts failing, your app wouldn't even be aware of it.\r\n\r\nSo in this case (Device.StartTimer), one option is to block on the task. This is a hack, forced upon you by an outdated API:\r\n\r\nprivate bool MyMethod() {  \r\nDoDatabaseOperationAsync().GetAwaiter().GetResult();  \r\nreturn true;  \r\n}\r\n\r\n(this only would work if Device.StartTimer executes its callbacks on a thread pool thread, not on the UI thread)\r\n\r\nAnother option is to use async void. Async void is for \"top-level\" operations such as UI-thread events, and should be avoided in all other scenarios. In this case, you could say that the timer is a top-level operation, and use async void as such:\r\n\r\nprivate bool MyMethod() {  \r\nasync void MyMethodLogic() {  \r\nawait DoDatabaseOperationAsync();  \r\nDevice.StartTimer(new TimeSpan(0,0,5), MyMethod);  \r\n}  \r\nMyMethodLogic();  \r\nreturn false;  \r\n}","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","replyTo":"cc37b857-b392-3a86-b1be-684d3d87202b","date":"2018-04-27T14:28:05Z","timestamp":1524839285}