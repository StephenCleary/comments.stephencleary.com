{"_id":"8d0d28f0-abcf-11e8-b6e7-61e1106727d7","postId":"2013_11_taskrun-etiquette-examples-dont-use-a63e8aa8-3250-37a4-990d-af802d3197e6","postUri":"https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html","replyTo":"89b00f50-ab8f-11e8-b6e7-61e1106727d7","authorEmailEncrypted":"vQOe+C7fCbgOJCJHHov846C7dzwtH9M7jnSa7eRY4I8ZHxj46/wv1VfrLG7+pdGhMQmaG2KMeA9tdhorllZ8vws0MB/4MRo1LoSVrMpj+z/934GPXbUctBCqeO6C1rW2xZgdJ7zNrKZj1wdmrc3rX8XW9gIequh+aQYASanoxIuohVShliT53Qv8mphdbJloro1SOId2YX1wPoLVODxnYQq3aT8IgOH3oO9qF2XCRvDjVVOWG+wc4D4zTnPooJXdA+GpzaRgkLhNoM/q/5T90f5lO7AJDkkFUtQhJvJIdg7CI5yXow8rXuEa8JLtZhZ2T+LXsds5PjhRdeVTLgXsEUbXL1+MecHWLdjqBlaJOZJfZtXr3Z61LRaM+dTWRqru8jPlO8WqztfNcuET08doksWqzSsLzOiiP6NRXsT/SmcoXYm4dvUAi5F2TV9iqP35U3TkrX/xbnvmzFYMIOHq9vfMvnYwtJcwmHQkc4TKmXQ235IRcfax9CZ2RyOX9KgkoOryDX4YOvtp3HFAi8xMDY08MwHMT2ugUbS9g5rPPoI8XAiraOIgQWCirhZvN7AxZAunVSL22sIRP7KaBYTrL6hpMSzw0TbwhLTY5iPvlOoYf0piAVbNvM/YHbUtoccwGZduyfxl9TNjDcQxZyGD3W2OsIVU8fYlsFJJnMwuGvk=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Right now, the client code does not get a signal that the processing has completed. It just shoves it in a queue and the processing task takes care of it. In order to notify the client of exceptions, you'll need to pass a signal back to the client.\r\n\r\nOne way to do this is to modify your queueing method so that it creates a `TaskCompletionSource<object>` and returns its `Task` to the client. This gives the client a \"handle\" to know when that item has completed processing. You would queue this `TaskCompletionSource<object>` along with the item to the queue, and the processing task should attempt processing and then complete the `TaskCompletionSource<object>` either successfully (`TrySetResult`) or with a processing exception (`TrySetException`).\r\n\r\nAlternatively, if you want *one* task for your client to observe exceptions on for all items, you can just expose the `Task` that is returned from `Task.Run`.","date":"2018-08-29T21:07:35.250Z"}