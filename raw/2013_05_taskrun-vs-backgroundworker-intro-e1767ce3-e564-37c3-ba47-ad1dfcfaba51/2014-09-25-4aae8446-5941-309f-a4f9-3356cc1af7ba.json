{"_id":"4aae8446-5941-309f-a4f9-3356cc1af7ba","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"Pretty close. The tasks are actually already in progress by the time you call WhenAll.\r\n\r\n var images = await DownloadImagesAsync();  \r\n var firstThumbnail = await DownloadThumbnailAsync(images[0]);\r\n\r\n // Start (3) and (4)  \r\n var hqImageTask = DownloadHighQualityAsync(images[0]); // no \"await\"  \r\n var thumbnailTasks = images.Skip(1).Select(image => DownloadHighQualityAsync(image)).ToList();\r\n\r\n // The tasks for (3) and (4) are already in progress\r\n\r\n // Wait for all tasks in (3) and (4) to complete  \r\n var tasks = new List<task>(thumbnailTasks);  \r\n tasks.Add(hqImageTask);  \r\n await Task.WhenAll(tasks);\r\n\r\n // Retrieve results from (3) and (4)  \r\n // Note that the tasks are already complete, so this code will not act asynchronously;  \r\n // we're just using await to retrieve the results cleanly.  \r\n var hqImage = await hqImageTask;  \r\n var thumbnails = await Task.WhenAll(thumbnailTasks);\r\n\r\nJust as a final note, I do try to use the term \"in progress\" for these kinds of asynchronous tasks, rather than \"running\". This is because these tasks (like most async tasks) are Promise Tasks, not Delegate Tasks; more info here: [http://blog.stephencleary.com/2014/06/a-tour-of-task-part-3-status.html](http://blog.stephencleary.com/2014/06/a-tour-of-task-part-3-status.html)","postId":"2013_05_taskrun-vs-backgroundworker-intro-e1767ce3-e564-37c3-ba47-ad1dfcfaba51","replyTo":"e02655d2-a327-3802-b13c-735ab86773ab","date":"2014-09-25T00:27:03Z","timestamp":1411604823}