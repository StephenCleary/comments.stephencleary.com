{"_id":"33d56380-d8f2-11eb-b968-d76a3395ed13","postId":"2012_12_dont-block-in-asynchronous-code-a0a59620-1e0c-32fa-84cc-c17451ad4837","postUri":"https://blog.stephencleary.com/2012/12/dont-block-in-asynchronous-code.html","replyTo":"58d4f250-8a8b-11eb-9156-0ffeabd374c2","authorEmailEncrypted":"i2MzQg9okC949y1W1+8CLNnqokxInt5y4+ifpa/o/ordv3/VddaLwuhOQnrC4HtHiroZW1lNxlpTSGQAqbg1INJdBhnNfcH7R8LliW3VxStesm8+xBCRTh/oKcSwSEfQ3kNkliv3SmtYIXCb/8zy3DwQARU5YVgRqNeluf5FSJ+Qg9UXeDGq+8Kgoi6DGAugNFXEXZV2xYV7M0YHw6WoIHNx11NuWvSPxfhjWnxfk6MZdTJroP40hfn7kpHkWLpPuzMU7n9UELOWBrL1srkq2AiQd5Srwz/s6xTDFWshA/0vxYE+o8aE6IiXaKu3pZ88BgI08D5+sy2VjblrCJTx4Y/+JTpLfn/9vLElcA4glzxQ6B4GJ2b2DelZfwkvWQNixJYuX7NBWdZtPusGY37HwSdbBUShgnrlYqSolZYzgD52+GlljkqIRjbmI2EHq8Lj781dng5/VDKFSzS3kUo+vrvuwMkL+4o83xh5ytTeNmKWfyp5oS3Zbu3+v7jTmER0sdgUlQmrk26WISIi5eH997LNpXMhRuRNW0XNTYXMxLa4OsXvpxggW0KUZmR6Q+7RwIqM3sy9tdonuquoeZifkMJI2HNIea+/p6nd/bsjPAxytIWUYWT19zsrXEVx8vNalTG69XBxvckdHfFRIqppOTmUahYdzG4Qz1VDP3FBAB4=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"The history is a bit off: `TaskCompletionSource` did predate `async`/`await`, but it could be used with either synchronous waits or continuations (which is how `await` works). In fact, this blog post was written after `async`/`await` was officially released but before `RunContinuationsAsynchronously` was added.\r\n\r\nI believe that `RunContinuationsAsynchronously` does avoid this deadlock; it essentially moves the `TrySetResult` onto a thread pool thread. But using `TaskCompletionSource` *without* that flag and `await`ing the resulting task is both common and correct.","date":"2021-06-29T15:53:53.030Z"}