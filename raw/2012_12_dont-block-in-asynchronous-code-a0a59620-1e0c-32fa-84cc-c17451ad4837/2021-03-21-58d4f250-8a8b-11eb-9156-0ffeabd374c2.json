{"_id":"58d4f250-8a8b-11eb-9156-0ffeabd374c2","postId":"2012_12_dont-block-in-asynchronous-code-a0a59620-1e0c-32fa-84cc-c17451ad4837","postUri":"https://blog.stephencleary.com/2012/12/dont-block-in-asynchronous-code.html","replyTo":"","authorEmailEncrypted":"G9bkCcJ0Hp1syAT8KXmdLomlbF0Nt0dIKV9QCfk7SJG2pA0kuP+N41/blv6WlkYmfTgCQw6Lci97bCGDKZ2lmzS7TheKvUhsJt/43fbs/I4VQplWG4GuonNVVl9bXWy5AWSSXqhOCUVLfkhJBTsf5F8KMq9WvcVDpkBy8lcapAHDxF7RnVEoMzX1uLrzZXllaUZq8h7oCDNeQaCG08uZam2tTsANgWj4wX5TmJQQWEptuFXt7bcd2jPoYyB/y2zzyyaRMDi8kOQkwfkRfUh3d9m/MbY9omKKHhmXilf3O3QLoTkkoaGGEVvV41+oYVfbcQ3eryWUtvFclOPFlJb9/pxUD3ea0YlnDpXy1bJ8WbxTWLyuBbiZtul3XFTYcfm5PTvjLnFo81dcD28hwvLWST7eIb5soHVd5oIzaSqKiJ4cys27KfKP0qc5vPBmYL+egfRrAuDlOuHon1XUh6qRWLY85va8KUlAeBVck7gpD1nhev975PIxoaoimi4ZTMm/cv8HOC+/HfJxiggk2Cd98yUUdBFLzXqvsot9rVj3ZFSkJikQhy+MZiKJSx9s6V42r3CECI/Z+oLRwex7uwKbtf4mbmB5yBEozEzSRSY5tK7l2HDTRvdqM2j5XtCSJ2jqtkMR+Ac6vF+AbUo5cXn0g5baQ/HllMvfqHYlFMl/UHE=","authorEmailMD5":"b6f9b0b13c310b4001cc387f1ab670ee","authorName":"David Deley","authorUri":"http://daviddeley.com","message":"After close study I believe the problem isn't the <b>task.Wait();</b> but instead is the <b>await taskReady.Task;</b>\r\n\r\n<b>taskReady</b> is a synchronous <b>TaskCompletionSource</b>. We can wait for it using <b>taskReady.Task.Wait();</b>\r\n\r\n(Of course this makes <b>Test()</b> a synchronous method unless we throw in an await somewhere else.)\r\n\r\nOr, we can make <b>taskReady</b> an asynchronous <b>TaskCompletionSource</b> by declaring it as:\r\n<b>var taskReady = new TaskCompletionSource<object>(TaskCreationOptions.RunContinuationsAsynchronously);</b>\r\n\r\nI think historically TaskCompletionSource was released in .NET Framework 4, before async/await, so it was originally meant for synchronous waiting using <b>.Wait()</b>. \r\n\r\nasync/await was introduced in .NET Framework 5, which necessitated the addition of the <b>TaskCompletionSource(TaskCreationOptions.RunContinuationsAsynchronously)</b> constructor option to make a TaskCompletionSource that could be awaited.\r\n\r\nSo the problem might not be waiting in asynchronous code, but instead awaiting on a synchronous method that returns a Task. \r\n\r\nI'm not yet sure if this means awaiting on a synchronous method that returns a Task is always bad. I'll need to contemplate that one further.\r\n\r\nLove your excellent articles! I've studied them extensively! This stuff is really hard!","date":"2021-03-21T21:21:06.612Z"}