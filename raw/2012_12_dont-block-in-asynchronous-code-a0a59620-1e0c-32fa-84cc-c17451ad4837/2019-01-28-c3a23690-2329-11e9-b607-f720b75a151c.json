{"_id":"c3a23690-2329-11e9-b607-f720b75a151c","postId":"2012_12_dont-block-in-asynchronous-code-a0a59620-1e0c-32fa-84cc-c17451ad4837","postUri":"https://blog.stephencleary.com/2012/12/dont-block-in-asynchronous-code.html","replyTo":"c3677b50-22d8-11e9-897b-9f0ee46a84c2","authorEmailEncrypted":"fP5GGmDUdZBcGcNlHlucYX18RRBixrBARW7uJe717nHwrrKYz4i1ogoyb9GDuVashpNODD8B6BYgNONlPDs77zBmd8Ab2mxFX53BRq2GHOMTKzBahBRF2WmZNVm5jsPvKdjSwr+04LrjK7xS4KbLw4n8+ad4bW8VLT3QJNe7bfq8SSvv6WinlgotafQM2q+6O4ZAlCxFeaoJDVWyEuYGv5yJG1skRRPZo9jmzZG8pqjpBQGsSZHerpqgSj6a1gSpTaed6D3xtBw6xn/1/bmuutedZNIEQsLKXiBJ0j2guUNDxgI5AqNg+GRsDn/tnUzTmaDmFCUR3oPYb/ow97RJ8unQ3MF7ax4NtWyNtxD+uq5Tpgs9uvsgBl25vl2PEzM+/5vX3iZvkGBeGyEgLUki3KKMTgNqFor4Kn+dCedwXUyMT/DezDZfaNeG8CZnSI1CoROZVtMAq9Yg3fNgs71EY5qaWu+y4ONDg4301bVvQqVARW0GDqA8Z4jbyYpmjya/9v9/4ufJkxXWJAy6O53zkysYNPCVqHFk++riC8D/atWbhCrnUqrwGmWTs8HwDOaBKJCeGfR2pZwEbNe5cCJxa3Cx1Bd4mEeoSvP1yBdZ4J0PrVoA3rydlCpLygHnozP2U2m8zNtxaPEEBoF5NG1Hv7WP35fhkrCHiutn4i/m0sY=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"I stand by my statement that blocking on asynchronous code is unnatural.\r\n\r\nIn server-side applications like ASP.NET Core, the entire stack is asynchronous. There is never any blocking, even within the ASP.NET runtime or IIS.\r\n\r\nClient-side GUI applications are also a natural fit for asynchrony; the UI thread runs a main loop, and async/await interacts with that loop natively. Again, there is no blocking necessary.\r\n\r\nConsole applications are the *one* place where blocking is normal, and it's only normal to block in one line of code in the entire application, in order to prevent the main thread from exiting. What's more, modern platforms allow `async Main`, which hides that blocking in the runtime.","date":"2019-01-28T18:23:09.852Z"}