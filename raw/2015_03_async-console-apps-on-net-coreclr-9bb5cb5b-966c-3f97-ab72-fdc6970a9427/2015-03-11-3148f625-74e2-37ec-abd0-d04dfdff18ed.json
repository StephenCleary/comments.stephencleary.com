{"_id":"3148f625-74e2-37ec-abd0-d04dfdff18ed","authorName":"Riko","authorEmailEncrypted":"ap8tBTfkvWghkonnKAQ+bFmuMTx2SUv6sOyR2VHaYD3fPcdHpX+4mrcfitKtgnmqpPwouX0rZmtMG/aGGGI9DkS0AiFWgqM+k1AFpEwb3gb5tTsEXj7Zr9J7VZKdIzs7cOga7PuzsotlXNbYTeNbSQR3tLrVHhmZmBciiuM3tF2b3a/QxoZEydoqjyS4BwiNfWJ8DOFWQ1ZxUV/QDtHPzS/LkKrtRhPhOJ81kHXR1m6BfU/QAnFKtdy/zQNZSyatQML18QK0gmMM9UOJO8ssAh82hN/peA6UdbblB+s5t3cEwpP1zYjFTAu8uXQZ46WDjxLah8jOtfovl7CoM6NpbdVcZo2Tg6J2ByXFhTsW8AFStGq0Mlj9dXx0HecaYAqHMFgDrqNRdrlXcSJoMY4f085lFM+GuSPenVvvZCeaiR+Yd5GkTD9o5q+bI5mcOfwwtsDRqsC8KTsb6zBTNeJ82aHHXkcE72qxMIaFasG7yCH3BJ5ijS0WiPobyU7jvmYkqToSVSZVD2x3e6Tfr3bdrkkvoI08VMgMqJFPZg9B1xKKhll8Gq0Tkbo+bUi0Cjgsvurol9c04KLEPgXo0GTp8A7Hnl3bMiR96QFscP2n8jPVNPvE6ktruMZKQUc58CDcrQsBKqls5pV/+sRpDn//KMB/XUfbmAXY3vE5i4BdzVg=","authorEmailMD5":"c1b99fc51717f507f13d0e2297a64fdc","message":"Hi Stephen\r\n\r\nI am very interested asynchronously. Really want to understand it deeply.  \r\nI have a good understanding of the theory. But the feeling of a huge gap in practice.  \r\nI am very pleased that you, Stephen, deeply versed in this subject, so I have to ask you  \r\nI wrote a test Client / WCF Service, using async/awaits. Here is their code.\r\n\r\n// Client  \r\n class Program  \r\n {  \r\n private static ConcurrentQueue<task> tskList = new ConcurrentQueue<task>();\r\n\r\n private static async Task MyMethod(int i)  \r\n {   \r\n Service1Client client = new Service1Client();  \r\n Console.WriteLine(string.Format(@\"Exec: {0} {1}\", i, DateTime.Now.Second));\r\n\r\n await client.GetDataAsync(i);\r\n\r\n Console.WriteLine(string.Format(@\"Exec Done: {0} {1}\", i, DateTime.Now.Second));  \r\n }\r\n\r\n private static async Task OuterMethod()  \r\n {  \r\n for (int i = 0; i < 100; i++)  \r\n {  \r\n tskList.Enqueue(MyMethod(i));   \r\n }\r\n\r\n for (int i = 0; i < 100; i++)  \r\n {  \r\n Task task;  \r\n tskList.TryDequeue(out task);  \r\n Console.WriteLine(string.Format(@\"TryDeque: {0} {1}\", i, DateTime.Now.Second));  \r\n await task;  \r\n }  \r\n }\r\n\r\n static void Main(string[] args)\r\n\r\n {  \r\n OuterMethod().Wait();  \r\n//Console.WriteLine(\"Done\");   \r\n }  \r\n }\r\n\r\n// Service  \r\npublic class Service1 : IService1  \r\n {  \r\n public async Task<string> GetData(int value)  \r\n {  \r\n await Task.Delay(4500);  \r\n return string.Format(\"You entered: {0}\", value);  \r\n }\r\n\r\n}\r\n\r\nWhen performing, I see that the console displays several tens of messages simultaneously.  \r\nI have an understanding that this code is optimal in terms of async/await (more or less).  \r\nHowever, and this is what I ask, I can not understand how to interpret the data that shows the concurrency visualizer !\r\n\r\nSteven. Can you write an article, video review. How to interpret the data concurrency visualizer on the example of the code (or any other). How to really understand that work is carried out effectively, asynchronously !  \r\nThis example is academic. There is enough theoretical understanding to see that the code actually works asynchronously-effectively.  \r\nAs a practical example, however, need to see that everything is working effectively - not just understand it in theory.\r\n\r\nI think this article would be a wonderful addition to your blog. Explanation of a practical example how to debug multithreaded programs. How to interpret the data supporting tools for deep understanding in practice, multi-threaded programs.\r\n\r\nThanks !\r\n\r\nPS. Google translator works not bad :)","postId":"2015_03_async-console-apps-on-net-coreclr-9bb5cb5b-966c-3f97-ab72-fdc6970a9427","replyTo":"","date":"2015-03-11T18:36:25Z","timestamp":1426098985,"authorUserId":""}