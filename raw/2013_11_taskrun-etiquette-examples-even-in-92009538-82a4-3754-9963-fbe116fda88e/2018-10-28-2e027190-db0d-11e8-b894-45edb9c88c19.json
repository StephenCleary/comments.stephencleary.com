{"_id":"2e027190-db0d-11e8-b894-45edb9c88c19","postId":"2013_11_taskrun-etiquette-examples-even-in-92009538-82a4-3754-9963-fbe116fda88e","postUri":"http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Robert","authorUri":"","message":"Hi Stephen, So it's more like  depends on two things: 1) From where async method is called and 2) what's inside the method. I understand it like ok if it is UI like: Forms/WPF let's take button_click then it should be used await Task.Run(myasyncmethod) but if it's called from library project/controller/console application then it could be just await myasyncmethod (without additional Task.Run). Now if it also depends what's inside the async method - let's take your example of: PredictStockMarketAsync() you called it from button click using await Task.Run(() => myService.PredictStockMarketAsync()); because it is UI therefore you've used with await Task.Run but let's say in your PredictStockMarketAsync method you would just have call to http request would you will still in your button click use await Task.Run(PredictStockMarketAsync) or because there is still no long compute loop you will just forget about Task.Run and just used  await PredictStockMarketAsync without additional Task.Run. I want just to understand if it's just from where it is called or also what's inside to decide await Task.Run should be used or could just await. Appreciate your answer.","date":"2018-10-28T23:57:09.185Z"}