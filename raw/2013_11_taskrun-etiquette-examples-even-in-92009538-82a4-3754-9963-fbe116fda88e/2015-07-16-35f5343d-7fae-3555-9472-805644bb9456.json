{"_id":"35f5343d-7fae-3555-9472-805644bb9456","authorName":"cessna048","authorEmailEncrypted":"DYs1sbxzXwlEURzVkYmFbJTFF9x5b68YA+OM06DG/xKEgpV0bS4bfp5nCKiWCHuiSIAVSWBHErPoF+Sjw9tHYJCqTPh/PxAimXfP/S6PMbCAN1ec78GydqcwUbluDIWdII2tMBuBtDmj/7dea/3lFRLVvDk1xHHo2+Rn+tf9McL+6hPkQWUN93z419TNch+6gfgOXE6PCyqscrMwsmOhsrhFwsIRCOD/6qJIOQLZrSzcxNQ4JntHfFGOfLYjom0z7R8K/NH6jwGvdqT5V7bxEUkNjWmybjyq+wzRpAmHnUhzuuwJu2MA36pBPjfqAmDTZD64ljGFOutLWlpTcd5dQ8MkqcT/4ZJL2bldDBDAZfoOMMMRMsEFFEtHPqvDUJrbmT6JnwtQ+Q79qYi+8I3FCwm/WI9NsmX0uIS7Bq8zDuNSFjAAenZED9TWpL9RMHVqg7KSkSz0/xtlXVFoZw9PkJPlp5Lo9rvV3ZiWyCp90cLUBoN2XFJTw24Ka4mRBhO7eB6Xgu9dJ9wNu514stv6uXXdRYkeAMA9A+ddIGUHrM7Y4DFRYI0Dv2tpa0otn6p21OqbRq6XwkBmURt11dtU6+p6Jn1Adn4pKsR+zH839YxFxxZNvXxvZoLRfPE1kwgN5eH76PeT/hWQRlfKCkl90hF857yfYg3G66iarYgX7Vo=","authorEmailMD5":"99a3bcc695ffdcd91a1d946e0a409f85","message":"Thank you for this great article series. Sorry I am such a late-comer.\r\n\r\nI am adding DVD burning to a WPF app using IMAPI2. At IMAPI2's heart is a blocking Write call so I am wondering what approach I should take. Here is what I currently have but I wonder if you would consider it correct implementaion of async. My feeling is that it is, because it is I/O bound, but I am not so sure because IMAPI2 is not \"naturally asynchronous\" and I have an asynchronous wrapper (fake async?).\r\n\r\nThanks,  \r\nBill\r\n\r\npublic class MainViewModel  \r\n{  \r\n//Command execute handler  \r\nprivate void async BurnDataDiscExecute  \r\n{  \r\nCancellationTokenSource burnCanceller = new CancellationTokenSource();  \r\nProgress<datadisccreatorprogressargs> progress = new Progress<datadisccreatorprogressargs>();\r\n\r\nDataDiscCreator discCreator = new DataDiscCreator(...);\r\n\r\n// Add files to image  \r\nfor (...)  \r\ndiscCreator.AddFile(...);\r\n\r\n// Create the disc  \r\nawait discCreator.CreateDiscAsync(progress, burnCanceller.Token);  \r\ndiscCreator.EjectDisc();\r\n\r\n}\r\n\r\n}\r\n\r\n// Wrapper around IMAPI2  \r\npublic class DataDiscCreator  \r\n{  \r\n...  \r\npublic CreateDiscAsync(Progress<datadisccreatorprogressargs> progress, CancellationToken cancel)  \r\n{  \r\nTask<bool> t = Task.Factory.StartNew<bool>(() =>   \r\n{  \r\nCreateDisc(burnProgress, cancel);  \r\nreturn true;   \r\n}, TaskCreationOptions.LongRunning);  \r\nreturn t;  \r\n}\r\n\r\n public void CreateDisc(IProgress<datadisccreatorprogressargs> burnProgress, CancellationToken cancel)  \r\n{  \r\nMsftDiscRecorder2 discRecorder = new MsftDiscRecorder2(); // Interop class for IMAPI2  \r\ndiscRecorder.InitializeDiscRecorder(...);\r\n\r\n MsftDiscFormat2Data discFormatter = new MsftDiscFormat2Data(); // Interop class for IMAPI2  \r\n...\r\n\r\n // Blocking write   \r\ndiscFormatter.Write(result.ImageStream);  \r\n}\r\n\r\n}","postId":"2013_11_taskrun-etiquette-examples-even-in-92009538-82a4-3754-9963-fbe116fda88e","replyTo":"","date":"2015-07-16T14:41:24Z","timestamp":1437057684,"authorUserId":"disqus:cessna048"}