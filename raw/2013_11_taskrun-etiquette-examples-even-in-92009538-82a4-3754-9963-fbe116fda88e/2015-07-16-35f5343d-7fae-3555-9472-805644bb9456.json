{"_id":"35f5343d-7fae-3555-9472-805644bb9456","authorName":"cessna048","authorEmailEncrypted":"pesn085+G6VSwJV0+Ux5v5rKXbcqGZH87IfCb/dCiloge/AhHeAUDHkQlTEFspkISjz+CtPI9VHb8yv6yHUvCLAlB9NYnHug3gwourw9D+JhZewUivcE6go+UAwovX9+Cpd31znlA25/RIg2kW7r1TolV01uDwuU1iFyfucKC7ls75rwr1KEbBOHD+kSNQKzVvacXCF6lyjwLF6rG1EuSrPid4atvR7VSiHL6qMfk5zL7VWt/mJQ+4xq4Ki1S3Oas1vOmF/NqHCB4+1T+p5FHNqqytAsj4STOWBchVl2a0OUQhCMJop59wc8F/G7UGtCKDh8AEFFyDDLi71a5OP550vubUEei5XuUFIeEUn/Ltl2uobT4yu7e+SZD5ovalWlJszprbv1hDyNldGvR/1eI1UHXtZzbthMyBXgNB3Fx4CLJI0cpoizEu9oAFDjnuLeoxztpuRMbYdvtmAdhzZodqRQJ4ZDZGT4KmHcURB2aTAc6tc50x73OcDeg690BZfPQ5+nHWAZvovCKfoBIUNRipV1PpBZu6MZVWuJAWBfaxSkhOI++nhK3YYDmszhV3TVBkoBKBp/+JEEre9JrJYno+N1AbVZAQxVUwSVDUZw5DDlS9L5pt92OA/HWbrgOraHHRuqttKGJG2EXVMSSxJXRn7VqW19LqUvwJlDzuKay+0=","authorEmailMD5":"99a3bcc695ffdcd91a1d946e0a409f85","message":"Thank you for this great article series. Sorry I am such a late-comer.\r\n\r\nI am adding DVD burning to a WPF app using IMAPI2. At IMAPI2's heart is a blocking Write call so I am wondering what approach I should take. Here is what I currently have but I wonder if you would consider it correct implementaion of async. My feeling is that it is, because it is I/O bound, but I am not so sure because IMAPI2 is not \"naturally asynchronous\" and I have an asynchronous wrapper (fake async?).\r\n\r\nThanks,  \r\nBill\r\n\r\npublic class MainViewModel  \r\n{  \r\n//Command execute handler  \r\nprivate void async BurnDataDiscExecute  \r\n{  \r\nCancellationTokenSource burnCanceller = new CancellationTokenSource();  \r\nProgress<datadisccreatorprogressargs> progress = new Progress<datadisccreatorprogressargs>();\r\n\r\nDataDiscCreator discCreator = new DataDiscCreator(...);\r\n\r\n// Add files to image  \r\nfor (...)  \r\ndiscCreator.AddFile(...);\r\n\r\n// Create the disc  \r\nawait discCreator.CreateDiscAsync(progress, burnCanceller.Token);  \r\ndiscCreator.EjectDisc();\r\n\r\n}\r\n\r\n}\r\n\r\n// Wrapper around IMAPI2  \r\npublic class DataDiscCreator  \r\n{  \r\n...  \r\npublic CreateDiscAsync(Progress<datadisccreatorprogressargs> progress, CancellationToken cancel)  \r\n{  \r\nTask<bool> t = Task.Factory.StartNew<bool>(() =>   \r\n{  \r\nCreateDisc(burnProgress, cancel);  \r\nreturn true;   \r\n}, TaskCreationOptions.LongRunning);  \r\nreturn t;  \r\n}\r\n\r\n public void CreateDisc(IProgress<datadisccreatorprogressargs> burnProgress, CancellationToken cancel)  \r\n{  \r\nMsftDiscRecorder2 discRecorder = new MsftDiscRecorder2(); // Interop class for IMAPI2  \r\ndiscRecorder.InitializeDiscRecorder(...);\r\n\r\n MsftDiscFormat2Data discFormatter = new MsftDiscFormat2Data(); // Interop class for IMAPI2  \r\n...\r\n\r\n // Blocking write   \r\ndiscFormatter.Write(result.ImageStream);  \r\n}\r\n\r\n}","postId":"2013_11_taskrun-etiquette-examples-even-in-92009538-82a4-3754-9963-fbe116fda88e","replyTo":"","date":"2015-07-16T14:41:24Z","timestamp":1437057684,"authorUserId":"disqus:cessna048"}