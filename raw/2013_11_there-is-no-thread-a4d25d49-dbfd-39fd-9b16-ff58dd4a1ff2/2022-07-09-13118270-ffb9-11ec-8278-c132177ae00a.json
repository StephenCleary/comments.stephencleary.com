{"_id":"13118270-ffb9-11ec-8278-c132177ae00a","postId":"2013_11_there-is-no-thread-a4d25d49-dbfd-39fd-9b16-ff58dd4a1ff2","postUri":"https://blog.stephencleary.com/2013/11/there-is-no-thread.html","replyTo":"635138c0-f532-11ec-a9a7-b1f18237358b","authorEmailEncrypted":"V9Wvp3pyXJqgzvhnq81bWMH1zKIDrzRAvkurYqy2a/f+6CZmWv2ZHImYvmkgKZDkPU8sGNeEFEIDPdTfoab+Hb7+e3Llg4aKZUuIsTwFMbcYbg19TcDbSsp+roYap+zFa6RIijtYR1xEM7FyaCE7HULLkQ2x5YScghmmQe/d6eirdKqXDNz+yrV2TWaPZt/zuZzMRiDrYorya0Hwujb0OTjG/Pd9dcaEFXKt2pwge7HPv5PaawsyCdFhssf5tpC+IyWwlTrSldZbqYzUNEaSbVLrOdh1hjCobV2vtwC+BW9sq9DTI29nmHU9Qnesjv3qmSJqEVgISV6UNC7A+CLYrzZIuJhwLMrMsgVy7J+9m//XZbEPpZzYcLkfauYJQFCvFDMyJMDvKSIiZz1AZzjhTFyRbPjl068xoSxUMGtI11fGSFnnVZVzW0fcQZGzCChRSgN5HYdiacNyIspi+q+dZmu0FsOYNSzo65ZfNILczSwdjFqcbJqOSMSDbEwvAYgmjNntpIEz+6HAE3n/1Ej0LlS1s73JP4/CX6tic9izNWmHoaMMakY5Dqc9eJmO3dxKhmZXY3tGfBrLZaXtLQ/ApvbZvLuDN5X+rARyIIC66R2NC4ONOHltko/dEVtIPeJerEjuhEmzZbhuM+PsGM6WI4JCcmpuQ/RRHKong3gExkg=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"When `await` suspends a method, it does not suspend (or block) the thread. That's the whole point. So, the event handler is paused (but not the thread) and returns to the UI main loop. The event handler is being executed within the UI thread, but the UI thread does not have to wait for it to complete; when the event handler is paused, the UI main loop regains control of the UI thread, and may execute other event handlers. Later, when the event handler is ready to continue executing (i.e., its `await`ed task has completed), it queues a message to the UI main loop that causes it to resume executing the event handler at the point it was previously paused.\r\n\r\nOr, you can think of it this way: each `async` method is split into multiple smaller methods; these \"break\" points are wherever there is an `await`. Only these smaller methods are executed atomically.\r\n\r\n> isn't it true that regardless if the event handler await the task or try to access Task.Result (which block) , the event handle wont return a result back to the browser until the entire handler call run, and in that regards, what exactly is the value of async await?\r\n\r\nSo, this is a completely different scenario. There's no UI thread or main loop in ASP.NET. It is true that ASP.NET will not return the result back to the browser until the HTTP handler completes. In that case, the value of `async`/`await` is increased scalability: the web server can handle far more requests with far fewer threads.\r\n\r\nI recommend reading this for more detail on `async`: https://blog.stephencleary.com/2012/02/async-and-await.html","date":"2022-07-09T18:58:09.691Z"}