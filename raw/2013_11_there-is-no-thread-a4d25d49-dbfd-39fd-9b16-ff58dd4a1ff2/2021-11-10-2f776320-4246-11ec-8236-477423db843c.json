{"_id":"2f776320-4246-11ec-8236-477423db843c","postId":"2013_11_there-is-no-thread-a4d25d49-dbfd-39fd-9b16-ff58dd4a1ff2","postUri":"https://blog.stephencleary.com/2013/11/there-is-no-thread.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Rob","authorUri":"","message":"Hey Stephen, thanks for this now very famous blog post. I am still a bit confused though. Based on my understanding, something eventually calls the GetQueuedCompletionStatus function, which, according to the documentation, is a blocking call. So what thread is being blocked when this method is being called? I am still confused about how execution goes from the OS and OS-level threads back to managed threads in the CLR. I understand that an IOCP thread is used to mark the task as complete and then the continuation runs on a thread pool thread (or the UI or ASP.NET synchronization context in .NET Framework)... but how does that thread get triggered and where/when does GetQueuedCompletionStatus come in to play?","date":"2021-11-10T16:49:35.538Z"}