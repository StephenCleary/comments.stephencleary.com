{"_id":"1a588009-cc96-3fdb-a2eb-b9449c0a9df7","authorName":"Dave Parsons","authorEmailEncrypted":"BD8T6n54FwrRBKQwcvdq3qPFTYj3r9o+mSMYCQhXRPh1ZsI785USN+eUsuDoAdvzDUSNCTxkra3hOk/v4TAAusJ4guX8ryF88T1mcaQn5C4QwCstDSVEOJDtKjwMOs14ujuFvgL4UL6lpd+UNDohojkYfCfaleEjb+9znGCf4qhsIEUFXDTtcL+t37rIqcOK4Rv7qJ2n6Q0n8ohmEy4ejrKZtTtNh8wtI0xQpFSn+KOCA4pDc273cTB3N9GSI8tsAJqg+urOZ9sCrEhEm30+ufaRnu/V983dhalKoT+d995W553qftCKeEk4965cKNQod4iddQ8ami5AnLltkt4i4C/WVhiGMfJf+w2hp7bvAhrYA8EiTxID/5uzQXckZkqWL7b9udRoj/zFa7mLoKMtDPa+5uoaYpcIRZrCvCUwuTp5s/1pQxXy5ilfSKr6KkIG5hc0h3z0k7bHu7KOlEDGR/uhUOv2XheYkcAacOAtd1LSIVqQABn4CY4yhkG/8Jy3QXPgzEEXL7/DII2xfmtcpAhKOPdz3Nuc91KR51q87T70gnp/VbDwlAq4WjlF/3nkAuzgGHX0lD7mMxFfIZxJa/pMD9DMP8qrQSD0sKk+mqfyg3UZX3u+NwXru04DkJk/QMJGPqD+CjJIXHYHgbGehw/u9eL9oCnC0+ZQPelQ9BA=","authorEmailMD5":"82df17885fa751600eac9fa114cae9e8","message":"The I/O completion port is said to have a \"dedicated thread\" that tracks the thread at hand that initiates an I/O. This port also provides overlapped I/O. Assume a thread that is doing some work then asynchronously kicks of an I/O-bound workload ( a disk I/O meant to read a file from a file system). The asynchronous call permitted that thread to return to the user-interface, and thus avoid blocking, unresponsiveness, and overall window freeze up. Having returned, this thread then resumes to update, resize, handle events, process message in the message pump. If such is the case, then how would it process the data from the I/O request Packet?   \r\nThe thread pool uses I/O Completion Port resource, but how would it obtain this data to either queue or process it?","postId":"2013_11_there-is-no-thread-a4d25d49-dbfd-39fd-9b16-ff58dd4a1ff2","replyTo":"","date":"2017-06-05T17:00:01Z","timestamp":1496682001,"authorUserId":""}