{"_id":"51d36361-6345-32cf-a840-ac49d5368b8e","authorName":"Stephen Cleary","authorEmailEncrypted":"rZqiGl03SYPt3YlIFaHWzzY4TzTuBQlJbAjU8pExVbuY737VY/z5yoxLFQ7zq06l1UvFWrzZYBsPEEH2QsryDHHpfQQbiTNIRCBi6P2Mlrb1pQUdAzrrFNJdWFBsl4Q467QFD44lzO7/diLgeHP1j1t+lJh2SPvbIfw4qMpmRwzND/nB7eOUT6evSALS4OFf/v2s0ImVbmWGXGTyXd6tGKZylbwXsNUHYag0yDvCIFUKrMGHShrJ+MiDkWC2JBtL+9/qmlc4FGo/kob4UgnKagxpXevcfMViJ5zb+sH8+3WIi+7VezmlLe16YfvxrmdDDvPMQZI0Jkj8WlkG/tm1zsPeXwS6TAd1NyRkCbcTeG6H3FFlfv9tulTgCX/U9YXS+qteI2F1EQLJ8ite35HBd3nXD2nzaTTcvGSCkLScEQeELSjeyOXKNmqU6WhV7tYfgRtuoZc4J5j9NbMqIF/gYxw1FwnSHoO/xlzh3JMPxhODVA413vOdqV6KbfUTYrs5FNXBmRLpRQBuIbGH0wPh+HenaDMU1O0iGjw+LWYT+akKno9k7uAt73Bimu5mofTDDm23f+n9sWjzqkvX2SGz+7dKRmexOVXlFzxzktS4AcOujIfL+KPJotkX0+ltNJllSaVw+M37BgFZ5+sd6T/IIllZmh6dvTSeCuH3jizzTpo=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Yes; a method marked as \"async\" may only become asynchronous when it performs an \"await\". I assume at the end of your call chain, you'd have an async method without an await - and the compiler will warn you that it will execute synchronously.\r\n\r\nThe core idea to keep in mind is that a method should only be marked \"async\" if it has asynchronous work to do. If the method only has synchronous work to do, then it should have a synchronous API, not an asynchronous (Task-returning) one. So, in your example, the entire call chain should be synchronous, not asynchronous.\r\n\r\nNow, if you're in a UI context and you want to avoid blocking your UI thread, then you can *call* synchronous code asynchronously by using Task.Run. Task.Run will synchronously block a thread pool thread, allowing the UI thread to treat the work asynchronously. Note that I recommend using Task.Run from the UI layer rather than in the method implementations; this approach has two advantages:\r\n\r\n1) The method APIs don't lie. They have only synchronous work to do, so they expose a synchronous API.\r\n\r\n2) The methods are more reusable. They won't force work onto background threads unnecessarily, i.e., they can be called directly (synchronously) by code that is already on a background thread or from an ASP.NET context.\r\n\r\nI have more info in my \"Task.Run Etiquette\" series: [http://blog.stephencleary.c...](http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html \"http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html\")","postId":"2013_11_there-is-no-thread-a4d25d49-dbfd-39fd-9b16-ff58dd4a1ff2","replyTo":"f6883af5-6da0-3dd0-9cba-ac5148b6758c","date":"2015-03-12T13:36:05Z","timestamp":1426167365,"authorUserId":"disqus:stephen_cleary"}