{"_id":"ff385fbe-41d3-4ded-8119-7ec9ec2e02ba","postId":"2013_11_there-is-no-thread-a4d25d49-dbfd-39fd-9b16-ff58dd4a1ff2","postUri":"https://blog.stephencleary.com/2013/11/there-is-no-thread.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Florian Vo\u00DF","authorUri":"","message":"This is probably due to me missunderstanding something but I see a huge contradiction here in this article, hopefully someone can clear it out.\nIt starts with the premisse that there is no Thread blocked and waiting for the Task to finish executing, no Threadpool Thread, no OS thread, no nothing. First of all I don\u0027t see a difference between a threadpool thread and an OS thread, maybe there is and I don\u0027t know, but to me a Threadpool is just a collection of OS threads. However lets ignore that for now.\nLater you say that \u0022An I/O thread pool thread is borrowed briefly to execute the APC, which notifies the Task that its complete\u0022, from my understanding this means there IS A blocked thread, some threadpool thread / OS thread is blocked and waiting to execute the APC and to set the Task to complete, and to pass the Continuations of the Task to the UI context.\nSo there is actually a thread or possibly multiple threads (depends on TaskScheduler) being blocked, just the calling thread doesn\u0027t get blocked.\nIt could be one Threadpool thread / OS thread that gets blocked by 1000 tasks due to the optimizations of TaskScheduler but even then we still have a blocked thread waiting for the task to finish executing","date":"2023-08-10T12:39:58.8350310Z"}