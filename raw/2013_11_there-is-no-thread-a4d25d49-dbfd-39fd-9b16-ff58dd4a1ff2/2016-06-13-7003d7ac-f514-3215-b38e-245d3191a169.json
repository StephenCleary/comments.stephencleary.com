{"_id":"7003d7ac-f514-3215-b38e-245d3191a169","authorName":"Stephen Cleary","authorEmailEncrypted":"FI+A3EMQUEd+4xVM8m0Izdq/m6MN0yI8JvXuu09YUAn84TvUfKrnl5D7pTwVeIU6F0tpXRRMCdKblJsW2pTkisOkBCpsqTalgAleAUuMdBZAJk7egR1HhnOhqKYUJQiWnoKjtMAKEtiZpcfOOh+lq7vPQJNWkSaqZeHeNfrmaTaQHmBfqJaumtpoydOg5rG/iWAr3xsTRoy8A3Az+ydt+EAMurLTPhjGKP1zZ/Cp0X3kiQJLQci99cz/8ANgK5DGa0ifMz4FJC1ObitcwJlQ5Z8+w6EOa01Od6fopMo7Fcu9qCBw8zCJK1K6ekP582aidoZVYiCaVWvjgJU1qEKDWinG47e/r3aHJaRitsi8C4KkTJ0bABKiJwI5Q0t2p86+NvP4SJdED9Bk4TqDa/fXxMB4u/P1iVOyidame4mAL/o38tvlnxuSMgM5YEcTXhbJha0NzyUiXMT708zct61ka4xmVrEts11dPlqjQDfl7rc0Bhf3J+efpTjd/LHKndjzcHAklSkH+zSX9zg9lETJ/Xg9e+ZskVrakoHxvVuQ+DYxzuvdK9weZkV7Eh56qPTC8TYZq4p8f3z5+lyCY4eMjj6zChG8050d20WkIyrQdZJL6Pz8HLm257SXiFgzdwm/PqhzlOm5L21x5nVmoW7tpo5UPIA78xkUtLQt8MXQ+Z8=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Oh, yes, this article is quite incomplete. Among other things, I completely skipped over how caches influence this flow.\r\n\r\nBut I think we can agree that the idea [that there is a thread blocked \"doing\" the I/O] is incorrect. In my experience, this is an *incredibly* common assumption. When I talk about async to .NET developers at conferences (so these are not even the dark matter developers), it's always >50%; I'd estimate around 80% (or more) just believe that programmed I/O is still how it's done. :)\r\n\r\nI was not even aware of IoIsOperationSynchronous! I knew that Linux drivers know the asynchrony of their ops, but I wasn't aware that was true on Windows, too. I'm having a hard time thinking of a real-world use case, though; any driver would *have* to support async (the hard part), and it *can* support async-only (and most do AFAIK), so why have a second path? Seems like it would severely complicate the code for no real benefit.\r\n\r\nI also didn't remember the details around APCs and threads. Since .NET-based I/O generally uses a single process-wide IOCP, that's the only case I covered in this article. In particular, I did not remember that it had to return to the *same* thread outside of an IOCP; I had actually assumed that *any* thread in the process (sharing the same address space) would work.\r\n\r\nAnd finally, yes, as you (and others below) have pointed out, the IOCP itself does have (a) dedicated thread(s). But this would be true even if the end-user code never called any I/O methods. In other words, asynchronous I/O doesn't take up *additional* threads that are dedicated to a specific operation.","postId":"2013_11_there-is-no-thread-a4d25d49-dbfd-39fd-9b16-ff58dd4a1ff2","replyTo":"9572473e-4ff7-3551-92be-614b308d6ca3","date":"2016-06-13T18:42:13Z","timestamp":1465843333,"authorUserId":"disqus:stephen_cleary"}