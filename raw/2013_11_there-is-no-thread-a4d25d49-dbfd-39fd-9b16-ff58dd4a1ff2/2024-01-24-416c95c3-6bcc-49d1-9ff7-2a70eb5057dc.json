{"_id":"416c95c3-6bcc-49d1-9ff7-2a70eb5057dc","postId":"2013_11_there-is-no-thread-a4d25d49-dbfd-39fd-9b16-ff58dd4a1ff2","postUri":"https://blog.stephencleary.com/2013/11/there-is-no-thread.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"","authorUri":"","message":"Hi Stephen,\n\nThanks for the great post. It really helped me a lot, understanding the true nature of asynchronous programming. \n\nI did some tests myself and there is one thing that confuses me. Consider following win forms code:\n      \n        private async void AsyncIOButton_Click(object sender, EventArgs e)\n        {\n            await Task.WhenAll(Enumerable.Range(0, 100).Select(AsyncIO));\n        }\n\n        public async Task AsyncIO(int index)\n        {\n            await Task.Delay(20000);\n        }\n\nAt the same time, I\u0027m monitoring the total number of threads by calling:\n\n        Process.GetCurrentProcess().Threads.Count\n\n\nAs expected, while the AsyncIO\u0027s are \u0022in-flight\u0022, there are no additional threads started.\n\nAt the end of the click method though, when all the AsyncIOs are \u0022resuming\u0022, i see a signifikant increase of thread count. From ~10 to ~30.  After doing nothing for a while, the thread count drops back to ~10 and there never seems to be more than 30 threads, even if I hit the click button multiple times or do some other async I/O stuff at the same time.  I\u0027m also monitoring the Thread Pool Threads (worker and I/O) and they are 0/0 the whole time, so I\u0027m pretty sure these are no TP threads. Any idea where these threads are coming from and what they are used for?\n\nThanks MJ","date":"2024-01-24T11:51:44.9811474Z"}