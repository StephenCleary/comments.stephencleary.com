{"_id":"a8dd8eac-88e2-3dde-b645-4a475a8dfb1f","authorName":"Stephen Cleary","authorEmailEncrypted":"gIcJPqmggBDNVyTwW8PuIL3UjmJXDSs02CB+gqZQU0h5emRvRuqE1VeIGivZT8JI8erhYpS0h7geZG/db27R8sZO6n1kBYWmcomfjjrhozL/ba2fUpLk8W/ESFOlLYVqBalMZ6tVF1phi3rTyEq2YI5inczcoap6j2XOarCbGVmjBmdb8G1uU9liKDIQWjrsGcAN8OewEshDVy+ucGYFXKNegAGaC69lPRzxdoEvmMR35beE8Bp6A0vWK+AhS3yll2jGNVdKZ753PLUCN9+KKP0DjQIna2YnXqRtymwKlOPvz47L69voPWu7SyZjNoF4Iwv3G2+ez3KGmeZfENkK7rTaLO3OuSIoFATNv6qYtQqFMKPNZJFuo9WWz12txaXNq3VFiV9sIzfWDiD+n9DFRLQQTdAGImlHDXKOjvNbLIQmuI8FK48OdzKcIotTMEL3bBLGUWarWWKp/eol5iM7v9UE/D+3WE6M2r6dTXOTEIaUIWQKnU9TbGOUMcCTY2kPNTfaRfQLn6Cx5sj6xsG5s9542REt0vkZ6WHW/hTBO3doBeXGaXbVg4eWEyD94rjAN09y2HUsjHKlJz3YAIdisVGpEYduKIEU8zPOVJYSQGjgcn6r6+jcs1vdWUindBIZDU7AGSyboeR4QeJpBPRY+32tynOc507BdMTDIf6Kafc=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"(Copying from my answer two years ago; the blog migration messed up the comment threads, sorry!)\r\n\r\nThanks for your comment; I love the \"message\" description!\r\n\r\nBut I'm not sure I agree with you re DPCs (not that it really matters; the details of semantics aren't that important in this case). My reasoning is:  \r\n- A thread does not have a DPC queue, but CPUs do. A DPC can be scheduled to a specific CPU, but not a specific thread.  \r\n- DPCs are executed (at IRQL DISPATCH_LEVEL) when the CPU IRQL is transitioning from a higher level to DISPATCH_LEVEL or lower (e.g., PASSIVE_LEVEL). So they execute before normal thread code can resume.  \r\n- While a DPC does execute with a thread context in the narrowest sense (CONTEXT), it does not execute with a valid thread context in the broader sense (able to use the security context of the current thread). So, they may execute in a thread context, they must be written to run in an arbitrary thread context.  \r\n- A DPC is still very constrained in the code it can run as compared to code running as a part of a thread. In particular, no page faults are allowed.  \r\n- Interrupts are masked while a DPC is running.\r\n\r\nAlso, these quotes from MS:  \r\n- \"The system schedules all threads to run at IRQLs below DISPATCH_LEVEL.\" (\"Scheduling, Thread Context, and IRQL\", [http://msdn.microsoft.com/e...](http://msdn.microsoft.com/en-us/windows/hardware/gg487402.aspx \"http://msdn.microsoft.com/en-us/windows/hardware/gg487402.aspx\") )  \r\n- \"IRQLs at or above DISPATCH_LEVEL are processor specific... IRQLs below DISPATCH_LEVEL are thread specific.\" (ibid)  \r\n- \"Code that is running at PASSIVE_LEVEL is considered to be working on behalf of the current thread.\" (ibid)  \r\n- \"DPCs ... are always called ... in an arbitrary thread context.\" (ibid)  \r\n- \"Before a processor returns to processing threads, it executes all of the DPCs in its queue.\" (\"CPU Analysis\", [http://msdn.microsoft.com/e...](http://msdn.microsoft.com/en-us/library/windows/hardware/jj679884.aspx \"http://msdn.microsoft.com/en-us/library/windows/hardware/jj679884.aspx\") )\r\n\r\nI came across these quotes while trying to find out whether a DPC actually counts against the current thread's quantum. I was unable to find a definitive answer. :(","postId":"2013_11_there-is-no-thread-a4d25d49-dbfd-39fd-9b16-ff58dd4a1ff2","replyTo":"d059f9c3-04f8-3224-8b49-5289000e88ac","date":"2015-07-27T16:36:25Z","timestamp":1438014985,"authorUserId":"disqus:stephen_cleary"}