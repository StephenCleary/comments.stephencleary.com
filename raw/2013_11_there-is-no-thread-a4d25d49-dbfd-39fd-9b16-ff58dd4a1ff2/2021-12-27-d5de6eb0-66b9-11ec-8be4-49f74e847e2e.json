{"_id":"d5de6eb0-66b9-11ec-8be4-49f74e847e2e","postId":"2013_11_there-is-no-thread-a4d25d49-dbfd-39fd-9b16-ff58dd4a1ff2","postUri":"https://blog.stephencleary.com/2013/11/there-is-no-thread.html","replyTo":"2f776320-4246-11ec-8236-477423db843c","authorEmailEncrypted":"OilpYhmPWMg/Bf2/b0RR9iKDkW13C/ITlfejBW8vhMGSiueQpLiJP5qUW0Oh7IO5A7TklMklCXKgNXyjeD4hRl0DZbzFbYmJrds63mnhyVZ05s3O8JHQTGtEeeGb/xmIIAyb5NY7/89Z6vdcGiBQlUTW6fqVrJulkOZU1l2UVzatNNfaMUp26cp+VEReYlaJxOstl8ekyweguzf2c7IS0bB7hL/Z80UeNgxwSvnQfw3chF8SK2hSobe2nhBE//at41QhcZRyZorETmCYrpt7/6+rYZRXtabx57vSRuLihQCa66tvsJknJ9Nkwm9wTk7sBSTMUBPpFIOrVSbfvbghUbId/onbt0wI2snOMrJocReut562N/Nmy8CRIKJfAHZW6FawMmqK9cOZL0r2requ0vHsQw11rUdGXWtvUUt35mA0s+fHeb4xMGF781kZ3Phn/RN0l6a/4tKmRUI8yZu3EiFD07Ym//MG+6bOSLO/sRy1iMftX6H5MkhvnZDsK6xNhlnlunN1oRJDfW3JhHqzb1S8B67EHI2bkIEswCasqpcIyFwg0HDSQgAhPPHl/PL0ylvhV0sx5Ovj4jIw7ouqWmBDQOneOtguBRtIm2hXRrMMD5FYOZZtvAHGS06kjU8MN41aUeIvISu/JQVVJK3LTMqUa3NRLAUWJ7OlKCupgY4=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Right, so the .NET thread pool actually has a few parts. There's a single IOCP and then there's *two* groups of threads (\"I/O threads\" and \"worker threads\"). The worker threads are what people usually think of when they think of the thread pool.\r\n\r\nThe I/O threads just listen for I/O completion packets and handle their callbacks. *Usually* (but not always), at some point in the completion callback, the .NET BCL code will queue further work to the worker threads. That way end-user code after an `await` runs on a worker thread (almost always). The idea is to keep the I/O threads pretty much just handling results and doing minimal work before they loop back around to call `GetQueuedCompletionStatus` again.\r\n\r\nThe .NET thread pool dynamically adds and removes threads from both thread pools (I/O and worker), but as a general rule of thumb you can bet there's always at least one I/O thread in the thread pool calling `GetQueuedCompletionStatus`.","date":"2021-12-27T02:08:08.612Z"}