{"_id":"616ae5d0-1e08-11ec-a9a9-d5ca1d3edabb","postId":"2013_11_there-is-no-thread-a4d25d49-dbfd-39fd-9b16-ff58dd4a1ff2","postUri":"https://blog.stephencleary.com/2013/11/there-is-no-thread.html","replyTo":"ffd87530-1dfd-11ec-bdf0-17da55d99b68","authorEmailEncrypted":"CdlXetY0hT5QJktcNxsHUXNKU4gFlmwB1OJxs2xGdbqyCg0DbTz3Rx0z3800M0JXteJ1+HLMT6AHoyZ3Nbytpje3XeFwAk6FwX2uZfRDSLN8lY/j7z06jDmu5y5OdSc2Jd1xEVO/1sCd3xgLQ9wLWTc5iH0NSHRzGBTZBMFKR8cZ9w5K23/DG7qkBbTsVXFw15mmdxZFY1twC47gW+VMEatEbrOAgXclRc8eYFCq+SYPGUKK6RECVejs+2/waa4rw24vRmOqlCmyf5PS3EKYkOCvevaM7NSlAQ1KXBSdgbz5TYf5TNRcANUrqMAfuwk1LqHpBji46w69u9KOBwOrQisNTSzuceJOFwqzenmr1s+aMB1rVMcwivxHCjO5UzJB0wL4FRkpsOoGFiz5tSagVFMfuOTWKC69EpU2vYLJtMkeRFQrwCeAKRoTy2JMZcGsiRsse7+RuojarT5jMOZiYMU+WzJNteUEK3ZYtsyHPK2Q9K1/7OrwMa/HRJVS4bDeMnrCDYlOuhKf68bLXMEev7YtAMmgvTUOT1X9g90OGwyAOoy20LULyPOl8ErUzNh+ipVsXGqDpMfCKBrJfIHLZvSZUpktuTpgWM4s18J8Z8f8ctrufValo87K+l9vq3lTGE0bK+HI4V2cUbkPdMhkKvWWSgAn8jQqeV4jQe0uASM=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"That video is a very good description of the state machine and how it works. He gets a few minor details wrong around the driver / thread pool / app interaction, but his understanding of the state machine is very good.\r\n\r\nThe main difference between the example in that video and my example is that my example has a UI thread with a UI `SynchronizationContext`. The video is using LINQPad, which is more like a console application: there is a main thread but there is no `SynchronizationContext`. `await` (by default) will capture the current context and resume the method on that context. In the case of the UI context (my example), the continuation is scheduled to the UI thread's message processing queue. In the case where there is no context (as in the video), the continuation is scheduled to the thread pool.","date":"2021-09-25T13:56:28.630Z"}