{"_id":"ac3dee50-6b23-11ec-812c-b3e7f56339f9","postId":"2013_11_there-is-no-thread-a4d25d49-dbfd-39fd-9b16-ff58dd4a1ff2","postUri":"https://blog.stephencleary.com/2013/11/there-is-no-thread.html","replyTo":"098cd130-6ad3-11ec-aa34-d993d35f2e36","authorEmailEncrypted":"U1gtqTqjolCM+m3ByA+VsTQghRu/apw0cMFdtN4LmlJhbOdt/YzMsTlvdECo6Z2dgMMji4VEiao9d1SFv9uTQwH6GEkNKGdxmsdk23yVhMx+ji1Rj/jjCEIG/O9O9lNkLx7hzce1+QisGgwV+feaxgEFquXLqgowfAkv+3Sk7rz/FNTRaCcii4PckBFUggHlCeR+IEZsL8SvK88NO+KI1jHEChAUyZ7IGAWiAznK/4ncNu3Q3yn45deO0AAN7F+mh7YduBBladcOINQqYQUhcka5iWy8hZeuVS3ohAK2JOKvP7mHhEGQGP0gbUvwjlLJB9lnEN7biIsF30QMTpuareVFwo3qZyjqns0s3coj7eTqlzfQLZJIXxcudn4htg29/okQTI/rubazfWafmQ3nJBbjaHvhvRmgCNLkPLtyF9Ijxoqba6aQNDavu+An4G5qhznytTJDWiF+zMKP2Qn4WFa50HCsQf80ljJJI+IilAoOlVJ2v0EjLRuvHUmWMqwSGF/GkgfPlcFbV62CiLVdcEHgP0CzuZEidUDIl5JpFm/VO5bySVcSEXiLa/ZbKoxqG8Wf1jSnZ3eNIa35Cw7QMJItY/ObNWQ6CmndX8xhfOgUfK2G9MZx+JFYGBt79/vteukm8auxjKfCqRwfXSOmCdCuSj7i6Y1jrF9a/e+6Ji8=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Yes. This blog post is just about `async` and `await`. There are APIs which schedule work to the thread pool, such as `Task.Run`. In that case, as soon as the `Task.Run` is called, the work is scheduled to the thread pool and can start running on another thread. `Task.Run` returns a task that represents that work. `await` is then used to \"asynchronously wait\" for that work to complete. (where \"asynchronously wait\" means \"pause the current method but don't block the thread\").\r\n\r\n`Task.Run` is commonly used in some scenarios and should be avoided in others. It's only useful when pushing CPU-bound or blocking code to a thread pool thread instead of the current thread. Probably 99% of the time this is in GUI apps, where you don't want CPU-bound code to freeze your UI, or you have a blocking API that you can't/won't convert to async. On the other hand, `Task.Run` should be avoided in ASP.NET apps, since the code is already running on a thread pool thread, and pushing the code to *another* thread pool thread is just going to cause a thread context switch without providing any benefit.","date":"2022-01-01T16:55:50.124Z"}