{"_id":"62b1b4e0-4952-3372-a59c-feaad71d6b97","authorName":"Stephen Cleary","authorEmailEncrypted":"di2/yj7apCwfKAM5DVO7pjh9if+TDvB1snbks7o5mv0QS4EGk/Rmg6qjncp8fWRzOHSQtGFcUvG4wGpcTGK51Fg3VqO58BbccNSMF+QdvqrZTBpbtjjg9ieOemwx0IXf9G1lfUrTg8G4xGIvklpTcuhv8QdBLTKHdAVMsVtRM5dN2HoZxa32orn1DYOYyYt02lEejtV6VmdRs1l8k5FOrfvdVxiA6sZ9gS7UKiR5pL8oAg4ywLh4aXPY5HcZlS5o0rlb5Ts58p6YxGzM6Fwf/E6gnrZzIwLR1wizaEuAC3gOc1c1PNC1J1KhquISTxjNHs5i089kG/TsX0JCBfUo21kgEdI1R6yrWq8KcDhvu7B2D7b9mirQtBPbRCqraVYVF3BLM75sACUToPBpojc8r1zgmUdn3ge2og7hJUt3JZUjYmYmJwAiX/cjbl1Oe+sfBwzNCqDcT5UKh/W+V/yMqHkoIKIyspyjWWDgI1rhecRrNzBQZJ371cuAzYJWiIGq6g4w5djajSPrH0IvySR0S7ib59MIDOeytsfmZI8f7sXcZ+GfXvEM6A/bEN2NWB0ItZFyJu+dOwEYz0KiujPEcGFbkxUuXgnx4UuDL3nNFqXOxpd9W8cDaxxousmkhm4nIaNY3Y8dF2UALidIz/p5/IKKB+fV5JaeePqxwOCuLiU=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Thanks for your comment; I love the \"message\" description!  \r\n\r\nBut I'm not sure I agree with you re DPCs (not that it really matters; the details of semantics aren't that important in this case). My reasoning is:  \r\n- A thread does not have a DPC queue, but CPUs do. A DPC can be scheduled to a specific CPU, but not a specific thread.  \r\n- DPCs are executed (at IRQL DISPATCH_LEVEL) when the CPU IRQL is transitioning from a higher level to DISPATCH_LEVEL or lower (e.g., PASSIVE_LEVEL). So they execute before normal thread code can resume.  \r\n- While a DPC does execute with a thread context in the narrowest sense (CONTEXT), it does not execute with a valid thread context in the broader sense (able to use the security context of the current thread). So, they may execute in a thread context, they must be written to run in an arbitrary thread context.  \r\n- A DPC is still very constrained in the code it can run as compared to code running as a part of a thread. In particular, no page faults are allowed.  \r\n- Interrupts are masked while a DPC is running.  \r\n\r\nAlso, these quotes from MS:  \r\n- \"The system schedules all threads to run at IRQLs below DISPATCH_LEVEL.\" (\"Scheduling, Thread Context, and IRQL\", [http://msdn.microsoft.com/en-us/windows/hardware/gg487402.aspx)](http://msdn.microsoft.com/en-us/windows/hardware/gg487402.aspx))  \r\n- \"IRQLs at or above DISPATCH_LEVEL are processor specific... IRQLs below DISPATCH_LEVEL are thread specific.\" (ibid)  \r\n- \"Code that is running at PASSIVE_LEVEL is considered to be working on behalf of the current thread.\" (ibid)  \r\n- \"DPCs ... are always called ... in an arbitrary thread context.\" (ibid)  \r\n- \"Before a processor returns to processing threads, it executes all of the DPCs in its queue.\" (\"CPU Analysis\", [http://msdn.microsoft.com/en-us/library/windows/hardware/jj679884.aspx)](http://msdn.microsoft.com/en-us/library/windows/hardware/jj679884.aspx))  \r\n\r\nI came across these quotes while trying to find out whether a DPC actually counts against the current thread's quantum. I was unable to find a definitive answer. :(","postId":"2013_11_there-is-no-thread-a4d25d49-dbfd-39fd-9b16-ff58dd4a1ff2","replyTo":"","date":"2014-01-26T22:18:32Z","timestamp":1390774712,"authorUserId":""}