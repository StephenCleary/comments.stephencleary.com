{"_id":"62b1b4e0-4952-3372-a59c-feaad71d6b97","authorName":"Stephen Cleary","authorEmailEncrypted":"FuauyWTgqkdSlvVcSa2gnL4AorYoi0oMWaKdc8XeRDRgw2j8OWcTVMhsMbovdXosJIYMXTerPnW1yOzjXc9WuRovvH91sH54CQWFaU0LQECzwNgEQ4jzvW53GBPypjEhPQodAGU/0wnhjIEZQG8clKJkQK2/v4r7JcxKlOqPzkY14Wyhqqi3zCEhp4iZ7EuL7V+Cd7P0hOUHuksyIEZzLqh/KTcJVfHZ9Nr9QeTAF45vAVoaxVsgdLuTRJu1KvOTZ6+9WOv7itB58/gPn/bsxHAJma9VkoTwynj3r6AF93mPWAr3/rdP3UtFFtenhUZuX4Lcg6VWcJSrwz0zDBLUyCIjr3DjoI4Hg1Lb6Tv/b9imPs74fBJUVFenGW/8euJmrDFTupVkKWao5UIf8B7OKhZSmeXMGpAaZgS9OoUp+3NUywr9qT3myNMAJ7x5Oobnf2FC4XqQ+O0JOX3Z0dyDXflxteplA732x7P399BWBQruha3PwffIIvimYWPsBPz3BkqtD5Oja3Whgp3S0VbMxqrTDHGdWNPinvqkuW/gWzM/addlSSxEwisb1FPR4oJrIRGMqPvUepStDLOERtJB7zJjY0vGv4QQ11j7fPDB8N7IGxIaFXNey67dTknLwECNaqWssQyOu9S/NZx23dm2K9Gi2D2WuewiCJ1Vt6BoCNI=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Thanks for your comment; I love the \"message\" description!  \r\n\r\nBut I'm not sure I agree with you re DPCs (not that it really matters; the details of semantics aren't that important in this case). My reasoning is:  \r\n- A thread does not have a DPC queue, but CPUs do. A DPC can be scheduled to a specific CPU, but not a specific thread.  \r\n- DPCs are executed (at IRQL DISPATCH_LEVEL) when the CPU IRQL is transitioning from a higher level to DISPATCH_LEVEL or lower (e.g., PASSIVE_LEVEL). So they execute before normal thread code can resume.  \r\n- While a DPC does execute with a thread context in the narrowest sense (CONTEXT), it does not execute with a valid thread context in the broader sense (able to use the security context of the current thread). So, they may execute in a thread context, they must be written to run in an arbitrary thread context.  \r\n- A DPC is still very constrained in the code it can run as compared to code running as a part of a thread. In particular, no page faults are allowed.  \r\n- Interrupts are masked while a DPC is running.  \r\n\r\nAlso, these quotes from MS:  \r\n- \"The system schedules all threads to run at IRQLs below DISPATCH_LEVEL.\" (\"Scheduling, Thread Context, and IRQL\", [http://msdn.microsoft.com/e...](http://msdn.microsoft.com/en-us/windows/hardware/gg487402.aspx) \"http://msdn.microsoft.com/en-us/windows/hardware/gg487402.aspx)\")  \r\n- \"IRQLs at or above DISPATCH_LEVEL are processor specific... IRQLs below DISPATCH_LEVEL are thread specific.\" (ibid)  \r\n- \"Code that is running at PASSIVE_LEVEL is considered to be working on behalf of the current thread.\" (ibid)  \r\n- \"DPCs ... are always called ... in an arbitrary thread context.\" (ibid)  \r\n- \"Before a processor returns to processing threads, it executes all of the DPCs in its queue.\" (\"CPU Analysis\", [http://msdn.microsoft.com/e...](http://msdn.microsoft.com/en-us/library/windows/hardware/jj679884.aspx) \"http://msdn.microsoft.com/en-us/library/windows/hardware/jj679884.aspx)\")  \r\n\r\nI came across these quotes while trying to find out whether a DPC actually counts against the current thread's quantum. I was unable to find a definitive answer. :(","postId":"2013_11_there-is-no-thread-a4d25d49-dbfd-39fd-9b16-ff58dd4a1ff2","replyTo":"","date":"2014-01-26T22:18:32Z","timestamp":1390774712,"authorUserId":""}