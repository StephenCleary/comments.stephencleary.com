{"_id":"c3a25ea0-8bc0-3da9-b1e1-795f2e0e6134","authorName":"Stephen Cleary","authorEmailEncrypted":"oo3Wyjj+FJ7slnCoxLenwmLSLozifJBWTpFnmH4hCtKFeGzziz0mEQneJpj6dlUrVVcRG0q2O8bmDXUQtg8OsV1orNWMcIsYn6b9ZsYYw3OuOPQYHPd+2Ja4ObLBe4U8pH7Rnbxxj3mpzIgoMIMmzXm2K0Pqbc3cngnpun/OACc41flrtjMzKLUqqgylBTsCWceDv5aw2evl/pBnTqHu7cOX1cgPRaPg/tBYNfRiIvM73h4UoxhA9BOtiqGOM2/qSazTGF+kDxbuEFZW9gNLZn/T+lKw36bbdBfgMHJgtK0RxXLUzt5ojSlEduiKglY98dPJcCpNHJ3a3SQitfItimk7ZMBHGYgGjaIGyzvAErUdE9iBATZj8SfL5sU1hpl/5S5nyr2Xl79DfxuZ4L63mLeh90qmuSGfPd1Ud2EaDYhXteRtk+mlKe5EMd2nDU5pw9dsJJP+dNgJYQQuUqQzcGitDSQ3JOGYAiRrBu3gkJmjJqBTFeTIRsI1Ecb99QOVCXLLgny2CN8LCdzd30w+AQozdYtTrTf6RiUGS2jS9ZBPM8V75dPJO+6jD0NofISt0hV90ZgWYA04IR/iiDAvvc1RegIDpzTih2JAz/FOBzpgc5Rd5X2YoVDwzwbVpMT424NSvq0CwFQgbhFVQBvbzcD4pWoKkRQcse6f7ibvAPA=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"It is possible (though rare) to write an inherently asynchronous operation in C# alone (using TaskCompletionSource<t>). I use this to write things like asynchronous locks in my Nito.AsyncEx library.\r\n\r\nHowever, when you're consuming an API, the situation is a bit different. An API method is either asynchronous or synchronous, and there's nothing you can do as a consumer to change the nature of the API. So if you have a blocking API, you can't consume it asynchronously - that doesn't make sense. If you're writing a UI app, you have the option of pushing the blocking to a background thread, but since it's the actual API implementation that does the blocking, you can't entirely avoid the blocking.\r\n\r\nIf you would like an asynchronous API, the best thing to do is let the library author know.","postId":"2013_11_there-is-no-thread-a4d25d49-dbfd-39fd-9b16-ff58dd4a1ff2","replyTo":"923aafa7-8632-33b7-8034-5667f92234b8","date":"2016-02-02T15:04:30Z","timestamp":1454425470,"authorUserId":"disqus:stephen_cleary"}