{"_id":"ff3b0684-14df-301b-8d37-462f44674dc0","authorName":"Stephen Cleary","authorEmailEncrypted":"CBy5J9Sm6qoptMw+RifUOxyWyQa7GWpBXnopb7d8yqjryUinv0uVeexMZWzFNYEFf5DJY4MIpuBN8SpsEAHBf92Jno2Qb7fcCkm5jSDnHU+xJJ+3JV/0RkMwbVPJRjiekNCrTWk04jn2P2wd6IqCkJsIyY2jjy3NArFYLWeGlYS43hOUENKB+MD1qJwQWzsuvFWiVhN9tlk+LdTqPVNfrypAEpTvsfvEq+QmO/EwNecMNSlmVUgvJlz5tcZrTxkeSQsP7OQ/l0b7mDYUvicRDsh1+rLzxACdH1H8c4Xqio6/7XW8xw3XH/AOzUiDbPmkjI1iAdy8tlRI3OZKrNtpLPYSRHhDkz30JjsyjfaUstqf0W4/iQPhJyE4eREfE7vqg9T7FJmpDqXL4NpUdw/7AeJf3y97hyMHtCZSsN69ZJzoE8DsilQIbHR16eGX6vRND+8FU+oNYnIEcl1JH3DQ7vNrkvxwe01UQ61/ZljUX17k0mTkqt7yd0jrSaRBa9evzyp71264KobduJbV6FMd+D5nrGYswLy7rlwo3P0QuxKFEixc6T7Y5hlA6YCTjcQow9W5oNQ9kpuNt/rWs1fLYFeE2iHP+woXe4OjMl/b3qvNObpPfOv8FJqGtxV8VjiaIpN+91YVa5J/PrGL7kCV/Idf4VBz4st1rPccXm+43Wc=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"He's speaking from a language perspective. At the language level, async/await has nothing to do with OVERLAPPED or anything like that. It's just a code transformation. So, sure, you can use async/await to consume a lot of things: asynchronous I/O, CPU-bound thread pool work (Task.Run), timers (Task.Delay), combinations (Task.WhenAll), button clicks ([https://blogs.msdn.microsof...](https://blogs.msdn.microsoft.com/lucian/2012/11/28/how-to-await-a-button-click/) \"https://blogs.msdn.microsoft.com/lucian/2012/11/28/how-to-await-a-button-click/)\"), ...\r\n\r\nSimilarly, you can achieve the \"there is no thread\" scenario with any kind of fully-asynchronous I/O. Whether it's async/await or OVERLAPPED or IAsyncResult or event-based asynchrony doesn't matter. I've written a fully asynchronous I/O model in C on an embedded system without an OS.\r\n\r\nIt's the combination of async/await with the truly-asynchronous I/O implementations that make the modern paradign so powerfully performant. All the other asynchronous code patterns are much more difficult to maintain than async/await.","postId":"2013_11_there-is-no-thread-a4d25d49-dbfd-39fd-9b16-ff58dd4a1ff2","replyTo":"66589d6e-3555-37d0-8097-af3823ded819","date":"2017-08-28T14:16:50Z","timestamp":1503929810,"authorUserId":"disqus:stephen_cleary"}