{"_id":"ff3b0684-14df-301b-8d37-462f44674dc0","authorName":"Stephen Cleary","authorEmailEncrypted":"bJk01sIEXqDVQoBvIJzZ+FuF0ebaRRu3xPaDTpnsY9TzWLO/z/yRzxy5W9ZNgZSYoqvFvGc39jyzaApDDY0s6YRuRrsfsE5d8OsWU4g4/Dq6tgR9R4IHEq0hFXylI415sgIv9q7UA4n/vCW1TqdAlCWEtXzO/ckIV5//AOO1hCYFZmeq2iiOTBnEDrcK4C2xVkGbHdiK/PypDJjQo4W9xoqu0MPmJl1rjb0A0gNfmoTsWy27Ld75Dt428O6EvuHhzthna7nGVvQjgEh9j7L7WIArGqTlhqz0nWK44Edg2P/Ao7LWz/AC8NNDGKFTs0SDwtL+/wvvk0cOFCsJgWV/0vZ66yh6DAj2VpslvngBjjeqRy5pU1zmTxPNf2xQhZOpf8dUA4Z1MpX47VCWHHG10OtL/VWbQSAnm/V73dKMgzt/V1RyOCaZrPnV+vHb1WQCZKaqohSu5Uuq9MKJV3XUsrvEZ2WGTzLycX2oqVcYzc7F92k/zeVJ+iA/OuerYM2JnoVVvNiZPUcV9lyWk+ecVNrjBWy0NHUFDpmV0d/gh4VyT6gOcJ6EBi2peHhIqinpOT1/pa1q7AECREAPdUfVKqJpx0ciWSvC0cfwYmbqY2oN0LLiwY9R/W1I5U0O3DK4FbX2cvdnmGGs6HNw7NXAXIjuOD7mT79XLxPq8o8Y04c=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"He's speaking from a language perspective. At the language level, async/await has nothing to do with OVERLAPPED or anything like that. It's just a code transformation. So, sure, you can use async/await to consume a lot of things: asynchronous I/O, CPU-bound thread pool work (Task.Run), timers (Task.Delay), combinations (Task.WhenAll), button clicks ([https://blogs.msdn.microsoft.com/lucian/2012/11/28/how-to-await-a-button-click/)](https://blogs.msdn.microsoft.com/lucian/2012/11/28/how-to-await-a-button-click/)), ...\r\n\r\nSimilarly, you can achieve the \"there is no thread\" scenario with any kind of fully-asynchronous I/O. Whether it's async/await or OVERLAPPED or IAsyncResult or event-based asynchrony doesn't matter. I've written a fully asynchronous I/O model in C on an embedded system without an OS.\r\n\r\nIt's the combination of async/await with the truly-asynchronous I/O implementations that make the modern paradign so powerfully performant. All the other asynchronous code patterns are much more difficult to maintain than async/await.","postId":"2013_11_there-is-no-thread-a4d25d49-dbfd-39fd-9b16-ff58dd4a1ff2","replyTo":"66589d6e-3555-37d0-8097-af3823ded819","date":"2017-08-28T14:16:50Z","timestamp":1503929810,"authorUserId":"disqus:stephen_cleary"}