{"_id":"cb9ab4c6-e21d-3af5-a7de-2335c0f6e4c2","authorName":"Bengie25","authorEmailEncrypted":"CGVlRGqMOhl3NFQOVvTyOIf/HItcNouhJ0Kjd8/vozHKKoO2vIpI69gxz/tRsGKZFOdkhvzZQeZGju3uBw+0PaCtF6Nh9QtiLlG+S14HFN9KImhNOoj0OiAb3EwVVTmjQjckWR17pQG/Pf6VWKrHg7zz0SKs3v+Y+e/jNOOHJRFOHU6r6w36Km9O2sJC7pusUMFQczPg01Ew/9QNIVpX3xUNEZq9xydS+Ds1SWy4io/mKz32lsAO3RSdDOZXeWnwyx1NjAK3w7/tqiOezXkM2lVUwtUxv9A7eNOxxlQPZOxCbW/qHAsUROWFtTT7cVi+tRXg8fJ///QTv+/LEM/lP37gWSAaU+zfwLzgo1aOPA8THmyKRCgPZR2p1a4o+0FD0a+iXFt/z+w0tkRBigFyCM5MI+NtvQ/cHgrJ76E5UxjwCgZtlv0mytP4nBPIMmD+CPpz3hL8oYy/yi/3jjJqPfcJRsXcmrv5BF9jWR3UTv55uYDqvY4rVfO+aznHjDCh5sSCn3hBBm6YACw+Z1UX10tf73XNhqHbzynwlip8WumRnVixWsejBNQAeYlleDPflpBCILCTkCfKxgjVhVK3FA9kgTUB5Gi2S8TCRgDEqwtiwHokKgKsq8SEgICd4M+0LRLVMLI6edPUCrLBv7HGBrRxzIN1hjha6SYsKxW9niA=","authorEmailMD5":"dadde6abc68d13f78c8170d42540967f","message":"Now if only System.Collections.Concurrent has a high performance lock free queue that wasn't plagued by massive memory allocations. There doesn't seem to be a single-reader-single-writer lock-free queue. I had to write one myself. Went from gigabytes of allocations per second to nothing. I will admit that the worse case of a single-writer-single-reader lock free is the queue falsely thinks there is nothing to work on or it is full, but it is an example of lock-free that doesn't fall under \"don't\". Unless you're using non-x86, then don't use my implementation :-)\r\n\r\nGC pressure can negatively affect thread scaling since it causes a stop-world.\r\n\r\nMy single greatest example was some high performance C# program where a code-path that occurred about 10% of the time had a \".foreach\" coupled with a very simple lambda. This single line, which 95% of the time operated on a list count of 1, accounted for over 98% of my memory allocations. My program couldn't consume more than about 50% CPU on a 32 core server, constantly stalling on GC. I changed that one line into a FOR statement, and my CPU usage jumped up to 99.5%+ and a text label that updated once per second to indicate estimated time remaining now accounted for 60% of my memory allocations.\r\n\r\nDo not underestimate the cost of allocating objects.","postId":"2014_02_guidelines-for-lock-free-programming-4e71f98b-6b23-3645-b772-cb9ff9cb7e77","replyTo":"","date":"2015-03-16T17:51:18Z","timestamp":1426528278,"authorUserId":"disqus:Bengie25"}