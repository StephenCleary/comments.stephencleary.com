{"_id":"cb9ab4c6-e21d-3af5-a7de-2335c0f6e4c2","authorName":"Bengie25","authorEmailEncrypted":"nVdDIZDJGRwqNDn2h87RFzIPg7Rp16wGEMhTktZ7dMtBEoL02Gcyv/9o3hHduCkaGpKmfRrSG5T2DtgSRoffDZswcNY5LaJQ/XImREkVUcuevd57QxC+e8DTUkxMycTs37n6dHG161+8rYiI7zTLJUdif0uvrGV+b0TP5u8GTADOTkKscFfOmL09tPCYw4HCYUaBGoyuqBWrpqLPao79oxqJ1QXbe+2e1/2ZRiJG0oAcVc+rwaszN3aMKcNvYp11boQUlVjzbtAtV9RVpCEr7mpM0K2pwhqXEpOCnxulUtF7QjESfTxKpPeB/dz9Tgi1UZSf5Oh6sPtM4qVzSZXE/PHT0ZBDOvAhBIZMRVaAo3VFecMnImyuVj4PmrM9QcJfT0VBO27eW2QwUB1VID77adShxXV3nEWwmai9FVjDeX5w6XWowuxqLsG0pHSpg2pVDaUhNCKoX13r6Uf/YX1BRVy35+y9fYLpQEmXD05lvxkQZNA2i9qOJi75Ga67jxBnLCAhaqoxONAD2eJJV+leESelJiiZNXS9c5Yy259IAxkr59mNHkwVIX0P4hyhXKzl/YawXCj4nLh6NbZ/P6oFZloGgu7as+D3tBlFeMfynuuJWD3djNgZ2rxY5T5lPwjyL6l8XVotOeiETzinkEamcm6rgF98Lov90oNX5TpM4+U=","authorEmailMD5":"dadde6abc68d13f78c8170d42540967f","message":"Now if only System.Collections.Concurrent has a high performance lock free queue that wasn't plagued by massive memory allocations. There doesn't seem to be a single-reader-single-writer lock-free queue. I had to write one myself. Went from gigabytes of allocations per second to nothing. I will admit that the worse case of a single-writer-single-reader lock free is the queue falsely thinks there is nothing to work on or it is full, but it is an example of lock-free that doesn't fall under \"don't\". Unless you're using non-x86, then don't use my implementation :-)\r\n\r\nGC pressure can negatively affect thread scaling since it causes a stop-world.\r\n\r\nMy single greatest example was some high performance C# program where a code-path that occurred about 10% of the time had a \".foreach\" coupled with a very simple lambda. This single line, which 95% of the time operated on a list count of 1, accounted for over 98% of my memory allocations. My program couldn't consume more than about 50% CPU on a 32 core server, constantly stalling on GC. I changed that one line into a FOR statement, and my CPU usage jumped up to 99.5%+ and a text label that updated once per second to indicate estimated time remaining now accounted for 60% of my memory allocations.\r\n\r\nDo not underestimate the cost of allocating objects.","postId":"2014_02_guidelines-for-lock-free-programming-4e71f98b-6b23-3645-b772-cb9ff9cb7e77","replyTo":"","date":"2015-03-16T17:51:18Z","timestamp":1426528278,"authorUserId":"disqus:Bengie25"}