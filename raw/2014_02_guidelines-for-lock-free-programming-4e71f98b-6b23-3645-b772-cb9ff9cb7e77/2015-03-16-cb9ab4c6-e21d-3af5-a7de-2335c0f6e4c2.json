{"_id":"cb9ab4c6-e21d-3af5-a7de-2335c0f6e4c2","authorName":"Bengie25","authorEmailEncrypted":"PHzF3cMcqEtnehqc6JvRdKE5UCC08iNc9QVRDrpczq7IjUm0Upo2eurB/Qs/vJbuWfn+wnRN5EDoMBfUE5iKIbRa/d+/6SdUnNgGrqXqT0SunpWMYMqzqsKJSpcSlDwL6wKWv/1eoh40PQ5kgULr1jw0SOkKneDYm9cvFt8fYkVIZ2bsfEu6zORJib6QHe5+HkiHVT6/2VJRhw+hzliixl4NkpcLB5kXNPVUas7nG2uaLSwpGw6hnj8mj+mJGhrFTOSskotNhSjkLZKd6FdkDEVT3LJ3b48T9BGoA0xCt+ZP95vXWdmsLiI6NM7M+R0qsmeMAPYhy7FP2xq+pBsCGvXuuBWCCjLcP+USJU4+5pRfs0JvmZOA64pGJQ6PTJoR11LyqW25GWpBIO9b5JA5uCfji1XBssdh2D0+NhFGlMTs5ve5PV0t/smUmZsYLRmDSnnNbyPmjFv9VGTYeD/GuIa1n8K6EQJJpMOwrrvH9vyyc8a/8T9Sys5gex8mx+zxSN+05LGAAXJdbhYCmGSdinFRbO6U2iDXwsrTfCDHpRZv/bEbF3LLiE58XsFmSGzTfkNR9sA3BywY6eKIBjX7E7/Eg5EivCN881iOiR2c69zZnBJzi0ArLPJCaWjN76OcBfG1195l6RS2JdFo1sO2zwX/w8uO6maxkYzv4L64/YU=","authorEmailMD5":"dadde6abc68d13f78c8170d42540967f","message":"Now if only System.Collections.Concurrent has a high performance lock free queue that wasn't plagued by massive memory allocations. There doesn't seem to be a single-reader-single-writer lock-free queue. I had to write one myself. Went from gigabytes of allocations per second to nothing. I will admit that the worse case of a single-writer-single-reader lock free is the queue falsely thinks there is nothing to work on or it is full, but it is an example of lock-free that doesn't fall under \"don't\". Unless you're using non-x86, then don't use my implementation :-)\r\n\r\nGC pressure can negatively affect thread scaling since it causes a stop-world.\r\n\r\nMy single greatest example was some high performance C# program where a code-path that occurred about 10% of the time had a \".foreach\" coupled with a very simple lambda. This single line, which 95% of the time operated on a list count of 1, accounted for over 98% of my memory allocations. My program couldn't consume more than about 50% CPU on a 32 core server, constantly stalling on GC. I changed that one line into a FOR statement, and my CPU usage jumped up to 99.5%+ and a text label that updated once per second to indicate estimated time remaining now accounted for 60% of my memory allocations.\r\n\r\nDo not underestimate the cost of allocating objects.","postId":"2014_02_guidelines-for-lock-free-programming-4e71f98b-6b23-3645-b772-cb9ff9cb7e77","replyTo":"","date":"2015-03-16T17:51:18Z","timestamp":1426528278,"authorUserId":"disqus:Bengie25"}