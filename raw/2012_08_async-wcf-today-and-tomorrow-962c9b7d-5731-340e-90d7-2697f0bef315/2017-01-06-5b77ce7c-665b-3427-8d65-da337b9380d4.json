{"_id":"5b77ce7c-665b-3427-8d65-da337b9380d4","authorName":"Drew Moss","authorEmailEncrypted":"ZSmI2FdDdLcE0Lmn/8nwhse3LHHICxIqxUM/Wokx4UaNbcIgf34DWQ7u4fdn36phV8ze62TDlu1cNoA6IN0oITBJF1tObzfO/Xn4m2NA/ewdYKXXQ21UMW+ba9elNjFWhhhrVzPDuAq2lRVdHn39InSu0N3LG3sIvNuc/DWITybQ6Uko0UGQifGq8T1Ll8l5+FGt3+5DRI+vHWy59HTAJke+evJUypnfEZWn/AZ0ydbHxrrx5mpz4QZQWZl9pMBzgrU2r7iC8YkPL2GY8cRMjmJtl3Y+/VXoKlnfDM6k6eD6nhDiLWBW0oNPheYaXydxfOSTjQYy4vHqNJ/Ed7YFEiTIVdBGatnQidyXObVJttZkoebWzGvcDzkW/gpmVJkYGZnDjGQJzNU/YFc/UnIc/+Wf6703Mm+0A9jg6zp5wSFwvDbTEBAKkLDMXJ6GhyU5c6fPv8Oc14k3p5lIZ09IjPgRYqi2gKjHG2xuw4Lj57BuEF3tsoTtMPExBPODklyp/Nprgumf9k54vfHPIBvF2HYlXMcf171fuMR/CE/oZxEeIX9pykpapQFvT+iG7qgnauvlgJAGiVSzvMwQLFNZFLyoP2r/dbVyTppDmC+Uu/bTzep5+FucjD5iQDD5ejk6oaLpeAhDxlVwpoZ8OtC3XF3nrK68NIme5zAe4sSfpi8=","authorEmailMD5":"0beba79365b67b98ee3039d7d969f578","authorUri":"","authorUserId":"disqus:drewmoss","authorFallbackAvatar":"","message":"Stephen: I read your article ([http://blog.stephencleary.com/2012/08/async-wcf-today-and-tomorrow.html](http://blog.stephencleary.com/2012/08/async-wcf-today-and-tomorrow.html)) and this sample and have a fundamental question. Like in this example, if I want to do a task asynchronously using either Begin/End pattern or Task based pattern, don't I still need to use Task.Run which would create a background thread. So, I'm curious on how do we save the resource (i.e. thread) by using async programming. Agreed that the request thread is freed up, but we still need a background thread which would do things like (parse the request, make expensive remote calls, parse results, log,etc).\r\n\r\n\"What About the Thread Doing the Asynchronous Work? I get asked this question all the time. The implication is that there must be some thread somewhere thatâ€™s blocking on the I/O call to the external resource. So, asynchronous code frees up the request thread, but only at the expense of another thread elsewhere in the system, right? No, not at all.\"","postId":"2012_08_async-wcf-today-and-tomorrow-962c9b7d-5731-340e-90d7-2697f0bef315","replyTo":"","date":"2017-01-06T03:05:34Z","timestamp":1483671934}