{"_id":"209f7521-cf13-3a06-a30d-187acecd19e3","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"Hi,  \r\nAt client side Instead of CallCalculator().Wait(), how can we delagate result to another function( like old callback functions)...  \r\nI try the following,  \r\nasync Task CallCalculator()  \r\n {  \r\n try  \r\n {  \r\n\r\n var task = channel.DivideAsync(10, 0);  \r\n\r\n task.ContinueWith(OnWorkCompleted); //You should see result at OnWorkCompleted  \r\n\r\n }  \r\n catch (FaultException ex)  \r\n {  \r\n Console.Error.WriteLine(\"Error: \" + ex.Detail.Message);  \r\n }  \r\n\r\n }  \r\n\r\n void OnWorkCompleted(Task task)  \r\n {  \r\n\r\n var result = task.Result;  \r\n\r\n Console.WriteLine(\"Result From Async: \" + result);  \r\n}  \r\n\r\nIt works but if we try to divide by zero, I do not catch any exception at client side.   ","postId":"2012_08_async-wcf-today-and-tomorrow-962c9b7d-5731-340e-90d7-2697f0bef315","replyTo":"","date":"2013-10-10T14:57:24Z","timestamp":1381417044}