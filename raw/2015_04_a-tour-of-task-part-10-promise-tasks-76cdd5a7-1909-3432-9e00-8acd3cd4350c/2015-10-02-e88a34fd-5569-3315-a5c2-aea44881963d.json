{"_id":"e88a34fd-5569-3315-a5c2-aea44881963d","authorName":"modernsl4ve","authorEmailEncrypted":"soFy7G48I2aXFFKr8fjaIAw0bPrgTQJc26ytmbsUfrPy3N/q/ObytFhzPuqWqYcEgior7DY/NbdRk9nmncwVnM7Q0MgSOm7vzO9JiREoZNlFIK8WcvwdY6iDF6zOhjINGeqBCnk7Ougo5WZml/f3sSdfCXkwKPOXN64at9qv0GSOP+wbkWqECmT3nIysFg0KAftF3U686FPm+S18EnPTV2EdQDBs6LAeqORnLV6oYy0+nIHOzPbPcJ1RTusms9mSToUPEdRTHx42jRFQAIvmn6nRYYA6ZWprba/XfmRUIzkI7p8W+ygdo69VYMOk9drMgY+MMmdzTDdZaOI6s7eQKi92ENpsGNp53u0dVnQyFEAj2n4/E4uKq7f+qT7IfBSBvZrpt1F/2lFaMsdjx734mphnkaWnpKPFjWRQfWqWWK8sG/46oyY9kGRlw7HT5Ak80EO+C32IHKy+g34AW7mxz60uFPtSP8omMEAR7mS9bUE/OaJWRfrt+tTrDmEIoFhwwYQtpUYB87tVusZHPh6Qf0bPs3FiHzNIU4DpQh1c4bQrTAAFW+5kDuSGDCz0cQNVo0qvsbs7heMKKdxYwKUXU7uyMLwq61zzHkTAaMBV/Vg0/7MoJGXfG15RLUHuOI+d67cPVZymEdMBsx7gbT7COspDST+NJrucU79AKKtSTZY=","authorEmailMD5":"10f9bd50e442b17ae72c098e7d3a1486","message":"Super interesting, as always!\r\n\r\nDoing a quick test today to show a coworker how await does NOT spawn a new thread, I run into a small detail that seems intriguing: Task.Delay DOES spawn a new thread, as shown by this snippet:\r\n\r\n public static async void AsyncTest()  \r\n{  \r\nConsole.WriteLine( \"BEFORE AWAIT: \" + Thread.CurrentThread.ManagedThreadId );\r\n\r\n await Task.Delay( 100 );\r\n\r\n Console.WriteLine( \"AFTER AWAIT: \" + Thread.CurrentThread.ManagedThreadId );  \r\n}\r\n\r\nThe thread ID after the delay will always be different, so clearly there's something that forces a new thread to be spawned..  \r\nIsn't the calling thread just sitting there waiting for the Task to finish? Why can't the delay be waited there then?\r\n\r\nThanks a lot, and keep up the amazing work!","postId":"2015_04_a-tour-of-task-part-10-promise-tasks-76cdd5a7-1909-3432-9e00-8acd3cd4350c","replyTo":"","date":"2015-10-02T15:20:28Z","timestamp":1443799228,"authorUserId":"disqus:modernsl4ve"}