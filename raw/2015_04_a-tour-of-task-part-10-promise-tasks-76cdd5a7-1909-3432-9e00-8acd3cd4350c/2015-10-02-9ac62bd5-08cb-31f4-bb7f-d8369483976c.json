{"_id":"9ac62bd5-08cb-31f4-bb7f-d8369483976c","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"If you run that code in a UI application, you'll see it resume on the same thread.\r\n\r\nThe point of this original blog post is that there is not a thread executing the asynchronous operation. In other words, for Task.Delay, what the BCL is *not* doing is kicking off a thread that does a Thread.Sleep. Instead, Task.Delay is implemented using a timer, and the task is marked complete when that timer goes off.\r\n\r\nThis is different than how asynchronous methods *resume*. I describe how this works in my async intro post ([http://blog.stephencleary.com/2012/02/async-and-await.html](http://blog.stephencleary.com/2012/02/async-and-await.html)). If the code you posted was in a console app or background thread, then the asynchronous method will resume on a thread pool thread.","postId":"2015_04_a-tour-of-task-part-10-promise-tasks-76cdd5a7-1909-3432-9e00-8acd3cd4350c","replyTo":"e88a34fd-5569-3315-a5c2-aea44881963d","date":"2015-10-02T18:28:42Z","timestamp":1443810522}