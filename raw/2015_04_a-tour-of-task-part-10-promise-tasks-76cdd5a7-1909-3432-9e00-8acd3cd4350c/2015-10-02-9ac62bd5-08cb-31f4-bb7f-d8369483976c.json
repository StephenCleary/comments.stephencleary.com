{"_id":"9ac62bd5-08cb-31f4-bb7f-d8369483976c","authorName":"Stephen Cleary","authorEmailEncrypted":"mhaOb1GjgLkEOa8lCHERdZoF/6VHKwwfJlB8wIGU60S1201k9UM6ZpyTIyd4wKYn9oS7HbZVG5AuTGLO05pagsURY0Zq0/bT1wV0P9Be4mJYNS0Mv58Iu+br8ogYD7QUNAxK0r+GEP2EVxRHGrIbZk+qjZ2C+wA7U4h0KMDAErOdEX/CyKMk0TU60Fwl9dcIF4BPRTYbpUk96z3THqTh+zJFo9PymLf8xIHbkStPYj8GqHbihe54+SnVdu1hIeYh3AWN65DByjaseKrS951yiYqWr+iQu31JBkAp6PI8UikCja3JkkRfUCIsmNRTTsxYCJYDfMBjJK9InXuV35Txzbeukhaauh7+VXvPkIXBBMMWr0Ux8hSlLNuM9X7Kpjpb5ytM2aFOIWYkHBC04E3Lt4WKh5IgrkhwKZ0rmcJ55lAAWRW73+xFn0/EsZF8297sxLgm49cCaatyPTedSnhkObRkqj7enMRIN4fUWiSwoNPzWXUkeozhmleH9A9dxdNCbjoirZxed2+4RexzkIsGJMFTRrJ1BNBZ9Qlz1HNsGD727d94Fq6DdKrysP0iIggSJDT1XnsYDIiejwWR+7sypP0Qqb274aTqe9ObEvoa2nap9isL74UTJYxqAX/19tA9xfqegTr8iUXBUHpm7B6ZIwzWb5jU8aWUeOEpvoacOfI=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"If you run that code in a UI application, you'll see it resume on the same thread.\r\n\r\nThe point of this original blog post is that there is not a thread executing the asynchronous operation. In other words, for Task.Delay, what the BCL is *not* doing is kicking off a thread that does a Thread.Sleep. Instead, Task.Delay is implemented using a timer, and the task is marked complete when that timer goes off.\r\n\r\nThis is different than how asynchronous methods *resume*. I describe how this works in my async intro post ([http://blog.stephencleary.c...](http://blog.stephencleary.com/2012/02/async-and-await.html) \"http://blog.stephencleary.com/2012/02/async-and-await.html)\"). If the code you posted was in a console app or background thread, then the asynchronous method will resume on a thread pool thread.","postId":"2015_04_a-tour-of-task-part-10-promise-tasks-76cdd5a7-1909-3432-9e00-8acd3cd4350c","replyTo":"e88a34fd-5569-3315-a5c2-aea44881963d","date":"2015-10-02T18:28:42Z","timestamp":1443810522,"authorUserId":"disqus:stephen_cleary"}