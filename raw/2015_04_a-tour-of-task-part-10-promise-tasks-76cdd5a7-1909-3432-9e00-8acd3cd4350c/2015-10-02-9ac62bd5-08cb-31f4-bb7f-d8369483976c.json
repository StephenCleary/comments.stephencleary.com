{"_id":"9ac62bd5-08cb-31f4-bb7f-d8369483976c","authorName":"Stephen Cleary","authorEmailEncrypted":"VkdAm7X0JuqF1XJ3I46zwzDgPBTFnm3OmDUQw9XuC7H34Ompl3a9iM4plQpfUpavCBS3Ji9a7KComS9sdc/ePg0n74vWtXMUXttpsEZzmm7CfCoFmim4n+hifCh+tDgPqoJYcrdiZVku5/CjQxmgFfUeIPw/bsWWHO+rG1/TS6dhx9AzV024F57jC15gBAWeH/WQ5QSLT9VkN8Mb7FZcNvrYmXSsUvMG4ARwHpMXDdNOBiv7CVq9Bhz440S0VZpCeDQmTNBRLFSiGCROM4DcLVXfnp0Ou0rMon9x873Ly5pMGUQ/s3q4vH8/VLibTpH2bLdCGn9doeQmgQluxPIBDZ0PKj9vZxYLhmZe20NzGPmbCreHFN4Zp5sRibRxgi3OhJ4mWYbP7ABGb+QulArgYpPj6R31vWflUiHQSj5VEn8+uLtXgakyV8cHeHutozCWGeiQjUTduveROVGwCVZB/8pYF1ScLUynYiBydWDTHWSxJsxgP95hoWh+hqZzoYCMV/1o78XlHjhCJmB5/ibiQCnM5Uu5WY5aiWC3yoVIeD6dJnj3pihMKdfHRcE9pJHs+la4ZNGsnUksvCEn+IqoKJxBr6j7rV0HJs0HrQikoB3Asi3kt3ulEBNEPnGh1AsHHUhuZbABu8bOZwcg5Zt72LJ2JbQS679p71VjZ86utF0=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"If you run that code in a UI application, you'll see it resume on the same thread.\r\n\r\nThe point of this original blog post is that there is not a thread executing the asynchronous operation. In other words, for Task.Delay, what the BCL is *not* doing is kicking off a thread that does a Thread.Sleep. Instead, Task.Delay is implemented using a timer, and the task is marked complete when that timer goes off.\r\n\r\nThis is different than how asynchronous methods *resume*. I describe how this works in my async intro post ([http://blog.stephencleary.com/2012/02/async-and-await.html](http://blog.stephencleary.com/2012/02/async-and-await.html)). If the code you posted was in a console app or background thread, then the asynchronous method will resume on a thread pool thread.","postId":"2015_04_a-tour-of-task-part-10-promise-tasks-76cdd5a7-1909-3432-9e00-8acd3cd4350c","replyTo":"e88a34fd-5569-3315-a5c2-aea44881963d","date":"2015-10-02T18:28:42Z","timestamp":1443810522}