{"_id":"9ac62bd5-08cb-31f4-bb7f-d8369483976c","authorName":"Stephen Cleary","authorEmailEncrypted":"XKvMx7W3xUI2yQSraDZjR0pXJPcFtcLkgFwIoMlUfSo6kyyfNAMLpc5kX5TUk8CXuJem+TCAxmU0bLKaXQecAsPxNle0dhXz04fW6+BikREokuod+InWXnYJcLER20lKmOB9TvwQQ3W8I1b7NM91Tef3vO+0qc43zOTgc7LFfFZTrvZHSdSKvBZQakwsWxqx9PwAri6bTQHiyI8Kae+WVXrxSCoRZEcmO7g7+qNgEiJYovsiJk1yUBXkt5LVZ57H1z9ZA5QBnzlcOJ5opelJIA7kPX4AGxGVo8QjNWLD8zJgwrmOaFOMjPR/8r6Kuigdv1PSbGq3ljXg9G+0FiyXjMj2ltObfnG0paFA/RkgI/euvr61EDxQpvKNOQ7QReGMKqEYv0eQkBcIS1lB5wVR1LdT6Mg/TkZ5zW8Pmbu6H34f99OHHXk9nc6X40FCLtvpn1HdNqlsy7u6BqnqIpG2b51ffPIz98RXxpyfhNeICWSqqBlTj9br7fHzpc8swgmT8iD259rVVBZVpv+X2QYU0g6VmSHlrTV+zQznoVrmtCX1TzZ23IrWCEmyvXR5jJxJTdhe6GEzriV/0mJ6LaxVaT/6l7gL1J0dFGRY1i/eGy/8LJhrknGoxWxGpM9P9/GnfagVtWAsU41dsvATMLYNwm0Q0X9ct65td9zyhiyMZr0=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"If you run that code in a UI application, you'll see it resume on the same thread.\r\n\r\nThe point of this original blog post is that there is not a thread executing the asynchronous operation. In other words, for Task.Delay, what the BCL is *not* doing is kicking off a thread that does a Thread.Sleep. Instead, Task.Delay is implemented using a timer, and the task is marked complete when that timer goes off.\r\n\r\nThis is different than how asynchronous methods *resume*. I describe how this works in my async intro post ([http://blog.stephencleary.com/2012/02/async-and-await.html)](http://blog.stephencleary.com/2012/02/async-and-await.html)). If the code you posted was in a console app or background thread, then the asynchronous method will resume on a thread pool thread.","postId":"2015_04_a-tour-of-task-part-10-promise-tasks-76cdd5a7-1909-3432-9e00-8acd3cd4350c","replyTo":"e88a34fd-5569-3315-a5c2-aea44881963d","date":"2015-10-02T18:28:42Z","timestamp":1443810522,"authorUserId":"disqus:stephen_cleary"}