{"_id":"9ac62bd5-08cb-31f4-bb7f-d8369483976c","authorName":"Stephen Cleary","authorEmailEncrypted":"QFNZhHyQqXP64eTZU1EE87PsE9t51KASWVru/cgGkQq4VvC4lAC7bZPfXkiP8DSAQ8hCWTe75edNyOm7wi+DeASo3+57EaxvD1j63tnDKAs1Al/hED27VGHT/YPvXBNCzBnLHvmf7au+C4LSTtOM+vUjKCByZtzepLMAhYcd17cwK/qxgFg0Z9dknlyQGbzXXuie8QzK8R5CkS80eIBZKMn5KHboNXWrzge60nuuRh48yb4oEIyqeHVCuJubVniuFNHTR5s+vW+Unn2BGlBf1tYEDPYRpp17/FfHQJaY4wfQM/o5z02ZUrlmyO5euVwxtGwmUkwX6f8NCUETQyKNgYavCvIiS5pEcewsettaccXA8f8VU70G2s8VyTPkafLsxiyWbLdGQcfWoTb0Hy2Hociu/eqCIYynKITbtCIDZsWkU8ZMQwbvWGtwyy/2Lir24VKTktFDf+jXuYIZCXzur99ntdQ8zHQOQI7s2MiExcTlTeqfUwRNPuWwH1dHrmvAxNuOGMtm9tN0IH/gDR3pbiP4EoQJwMObpeVn4vpDDLiknGW/hu3dOEw09PIbw2d1l3GopzkjIhodniKVdDIo9sU04S0xp5qzNjLRDp8cTjAzTt/gH2xIPkcC6wrhLycmM1nXEmHku2yI3chu/E9dkYA98Ep4Wib4y9WtGJiVaW0=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"If you run that code in a UI application, you'll see it resume on the same thread.\r\n\r\nThe point of this original blog post is that there is not a thread executing the asynchronous operation. In other words, for Task.Delay, what the BCL is *not* doing is kicking off a thread that does a Thread.Sleep. Instead, Task.Delay is implemented using a timer, and the task is marked complete when that timer goes off.\r\n\r\nThis is different than how asynchronous methods *resume*. I describe how this works in my async intro post ([http://blog.stephencleary.c...](http://blog.stephencleary.com/2012/02/async-and-await.html) \"http://blog.stephencleary.com/2012/02/async-and-await.html)\"). If the code you posted was in a console app or background thread, then the asynchronous method will resume on a thread pool thread.","postId":"2015_04_a-tour-of-task-part-10-promise-tasks-76cdd5a7-1909-3432-9e00-8acd3cd4350c","replyTo":"e88a34fd-5569-3315-a5c2-aea44881963d","date":"2015-10-02T18:28:42Z","timestamp":1443810522,"authorUserId":"disqus:stephen_cleary"}