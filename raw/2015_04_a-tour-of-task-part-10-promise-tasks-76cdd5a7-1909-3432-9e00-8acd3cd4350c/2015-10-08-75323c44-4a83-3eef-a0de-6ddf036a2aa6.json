{"_id":"75323c44-4a83-3eef-a0de-6ddf036a2aa6","authorName":"Stephen Cleary","authorEmailEncrypted":"nY292UnbiKmUOCq+fXRBaCMtL4dJFcmYg88bCDQwA8KcbkXZQE+5rODr267quPQdcwwaVy4r+wIzr/kgTTXV6Dm6LuTcepbnwpnocABgiXknSNJN+56Q/JIFYR15At+dIb4dEKn1TJw1w+ME8ctcTcp4heIoO2Bn+GHxM3+v9qwmZ88BW6ot9dGzg1/BJap3WbD6uimLZRIMZh0q35pS1Wxk/FfLm8OjVA9ScntiIlp1gBRkErhlYfWo/en7/Jomrh98CMVM/pPYgLnPfApuIYmEFhFOKrdgQ4uSvxvDr5vPHDdBLIL8Oiz7vECHoK+OUsAEg4nmwSHJhz6voiJT8y3ZiJZEoDvXWyVXbpIo75GvUVnmGp1D8J8b1cYHeaeuoraiw+pb1RrLARLkzWDBc5sgFDEI/4NPdzTqqEax4YR0Td+Irbr6K3vJglUSkLVmk/FaiBaSRaXG35f4X43eTiBEhUpWR0x1kDv9oY+2oN52KjpHqepYRVWhpyp3lhJUgu6WW+nTik97YfB28fw+G1SrT+0LpBvfrm08jyxzA8Rxu3f6S0LgRRZ9B92/v0Dkv05T/UOWyhexB7t4oMXA/3/KxfcAbpBIGwW9CbJdk2Y2E6O/WFIsR3rI/OXRHkpY1FA5rJvElqeUM6p4bU1oonXrbRjE2bwhULEm/zil9cA=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"It's not actually inconsistent: await always captures the current \"context\" (SynchronizationContext) and resumes on that context. UI threads have a UI SyncCtx, ASP.NET threads have a request SyncCtx, and Console threads have a thread pool SyncCtx. So it is consistent, but with (deliberately) different behavior in different environments.\r\n\r\nReturning to the same *thread* is not always desirable nor even possible. If you're running on a UI thread, then it is both desirable and possible, and await will in fact resume on the same thread. If you're running on an ASP.NET thread, then it's not desirable, and await will in fact resume on any ASP.NET thread pool thread that is available. If you're running on a Console main app, then it's not possible (there's no way to \"send work\" to the main Console thread), and so await will resume on a generic thread pool thread.","postId":"2015_04_a-tour-of-task-part-10-promise-tasks-76cdd5a7-1909-3432-9e00-8acd3cd4350c","replyTo":"1be8eaf6-d6cd-30b8-b917-a141cd69bc07","date":"2015-10-08T10:16:04Z","timestamp":1444299364,"authorUserId":"disqus:stephen_cleary"}