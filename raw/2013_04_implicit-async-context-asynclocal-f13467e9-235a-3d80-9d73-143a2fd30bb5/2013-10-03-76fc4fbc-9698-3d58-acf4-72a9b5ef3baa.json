{"_id":"76fc4fbc-9698-3d58-acf4-72a9b5ef3baa","authorName":"Stephen Cleary","authorEmailEncrypted":"X8RKCuWVqR60MqjTADsGWhGrJAJTVzHeEDBnYSTxWy65VvXXkpTwlnASovsW2yZ/aJfx8ilp6mqVWAZvcVrrXBSLTeaHnsPvvqsULXdTx1IyJsjZMwOgGoREWkxBPSEZB4zkMzzEnRymY2KW7aNCcczLj/g1P3yAA9xa2mjL9wzr5WGLj7TYI0i51a3wVkcTqZcsG5NK0wypjXkAKL/KW5P0vA3UnVa/Z1cdv/YfRj4Rr4fbgQEOVU+tpey8aXOP9wRzgc9Q9B5rN+eao5K8E6uwnr4Y4Ukdb4DjZ9Je0YhzwU86RJrMdLjAzYNBvsacMnxYjM5jekzXH9urQlNYKfR0/SzjylvfNxfQRQO7yAnE1i4rjqCXwFsJXSA8AAxivhtQxRjJjgddiUe/byg+n0JaJF3Sz42tuEYKLYtbxMKgL84y+ttQO/cW8u+x7B5Xs9jVbCZ9A57Sho0uZlGh2spOUyzFeWQWEJhsu0SQhYjFzWUBoD1UTMYgcetM9eQnBIAJtshTn9RKmtKKjyuszOgAv7/alsjUyrSRFdq26BVXDc5sDbLCNdex3SaQJaCXiLrtSdIsJlglsIqR5iWESMOAjJ/xdSz700Ddgcvc5g7qMeh4lf2yzTGTycVVEtEuQWvg3iTS+w1rdfH6KL+oBuo4fKEEpWChMKyPokRNbP4=","authorEmailMD5":"36e44ea0274d8207eb632c566e60ecc7","message":"No; this actually happens even in single-threaded situations. Async allows you to do a fork/join (e.g., Task.WhenAll) on a single thread - what I call \"single-threaded concurrency.\" In this case the mutable objects will not behave properly because they're shared between the logical call stacks of the various concurrent methods.","postId":"2013_04_implicit-async-context-asynclocal-f13467e9-235a-3d80-9d73-143a2fd30bb5","replyTo":"","date":"2013-10-03T07:52:39Z","timestamp":1380786759,"authorUserId":""}