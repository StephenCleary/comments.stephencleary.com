{"_id":"76fc4fbc-9698-3d58-acf4-72a9b5ef3baa","authorName":"Stephen Cleary","authorEmailEncrypted":"KANP/1YKUOITTv7G5tC3SLg+7G4F15xXVRvC2dUEogqXgKe7G83IKDyZ5gaAEplRGxCMXSbFWbHBDakrtnywwc/C8x2RRw2BJiFqPKb26kAk+kbqbhSksMOU/0Yd3RPe4kqA5Vni3Qk6Rw9kwFJfH8eupqUwh1Sz1sFjFf9vzqOpPOCCNKLPfXJpgiPglbRm3vMF1Ciw5+JGckjEZT7ZMDve1w2E0+K33OF14H2Q/FDlxwMgWZQQsQuGtKBV/aGFIwCJn6F22KkiFwta0AvlmZfsSCxe5TUrjXedscJGaW0zDg+a0t9Z6qk+QQrHx7uak5O5xFap79VT2bdGF9FvfdM4IGV8uNLj5MkiHOFDw/pYOQMvhJYqjVPCMni1qG6qYTkkmJqtRjPmBM408cKAYDETUq72VqiLLGg1y9pC81Cv9BQbREjtR8NQM8Aog0Ll7M3AOtE9POnlUy3Z+PAHsy8n0SJGGk2uQH2Hjt5OKONkheYkJjg16BzQhdxhwja6HFrb5CnMaoY8d7nJg+qwG5vEaZ+Lm9D8m2MiNnIEouSPZ5WZaPPQPGuriO7oFaKL3Kw6WfL8tULkCaXZjqedRSYW+DMxnA2VMTDHBUnR/+68p2rCfP+n9SPadNR4Zqu0ymBWKBJ1pC/9LdmOA/2tLvNebZEk65utw4kqoxpwFKM=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"No; this actually happens even in single-threaded situations. Async allows you to do a fork/join (e.g., Task.WhenAll) on a single thread - what I call \"single-threaded concurrency.\" In this case the mutable objects will not behave properly because they're shared between the logical call stacks of the various concurrent methods.","postId":"2013_04_implicit-async-context-asynclocal-f13467e9-235a-3d80-9d73-143a2fd30bb5","replyTo":"","date":"2013-10-03T07:52:39Z","timestamp":1380786759,"authorUserId":""}