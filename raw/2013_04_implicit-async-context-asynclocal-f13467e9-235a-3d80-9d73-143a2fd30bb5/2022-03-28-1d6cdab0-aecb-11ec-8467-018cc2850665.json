{"_id":"1d6cdab0-aecb-11ec-8467-018cc2850665","postId":"2013_04_implicit-async-context-asynclocal-f13467e9-235a-3d80-9d73-143a2fd30bb5","postUri":"https://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html","replyTo":"8f4afff0-ae70-11ec-bc16-2dbe46c5cd1a","authorEmailEncrypted":"EWqIBnFDrwxycqsy3KbAC1Y50Kg4SrNENZdgA01m4a9UKfvi+thTGBAJl+vfPtDa4VvlhXoV+iwzUslZOFOzoFRMSbc6g2Jq/JZ8DHvwflcDF/9z++mPaldGYDm2026FfjagCckhdmSvmbYiNRg9k2ej2tKN8cfGDZN9Yc8xvS1o4Q8NvfRfZlwiNybVI3hl6slw1zRUlUnCY9uxH5691sQfIINv63G8Iyddlk21Zyxkbog3cDlY6StOANdlLIu6NucbM0NEiKLGlMjozUQt2Rw4ZN+hXIh7wIj8F4wsT3//jHE8Ei567MGdDmeuj20BvY5Ro0edg6JMnv2eukLesYR/gqGtaUPDO/1DaZEfsTvVL1PKuTDshsfoEn7H0HSX2f3afJb6EhRiWU3WZLO9dzliuGImptXM7oXmTVeYfBmYsMiqMBU/9p0v+ikrsIfe36eYmA7mkKoLARbdM/1KTltQsm2qkfBD076M1jr4jSd+SaN9bT2JEYy41HyxRBeTUnaRu86y9zGkVCHtYk2KnevXxnqCO9aW5ohIbUNPGHAPs1AMxmqriqZTe4JZOVuewqg8amSMeRERBih2svGZKzB1OkjWSFtJBhC6O6oKmmMm+NTTHSQ/Iex0D6l/Q6kV9eCbHdtddkGPAozkJ0kHOXObsnFoYMkqW4Ppq6Jctnc=","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Each `AsyncLocal<T>` is logically a separate variable. If you're familiar with thread-local storage, each `AsyncLocal<T>` is essentially a TLS \"slot\" (except it's async-compatible and not bound to a thread, of course). Or like a single `ThreadStatic` property (which is also `static`).\r\n\r\nSo, taking the `HttpContext` example, it makes sense for there to be one \"current `HttpContext`\" variable - which can have different values based on what code accesses it.\r\n\r\nUsing singletons is generally preferred over `static` for unit testing reasons. During runtime, there's no real difference.","date":"2022-03-28T19:13:13.892Z"}