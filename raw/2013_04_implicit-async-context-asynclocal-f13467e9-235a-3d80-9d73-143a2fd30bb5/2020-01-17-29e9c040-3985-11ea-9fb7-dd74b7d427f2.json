{"_id":"29e9c040-3985-11ea-9fb7-dd74b7d427f2","postId":"2013_04_implicit-async-context-asynclocal-f13467e9-235a-3d80-9d73-143a2fd30bb5","postUri":"https://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html","replyTo":"ecccbe80-3941-11ea-a228-db01b2ef7800","authorEmailEncrypted":"ZorrKGXd+5FgeWdXivKi+onrzD8jrMUL13i0y8NKAViaQiXqzoBSA996I5F2/7r680jSEqk/UvSUdOLqVw1+QVl5YRRQCr7/ymwD24iVyOOqfrt6bY+Y4MBwhO0P28JuE7vBpSyPCLX3ZmJYC3daNU6OBTf1Pwq2iz+fXlp9EI/lBKsMSjLFngXdU6m60SX2bEHEat/xboSYm2hXjSwbYOjFiDDr+VdMkKn1wrUCG3qmnCEEF4mCK7LJEKnuzZ7ZAjLh+XRZ1ugtQTJoyLg/v3E6eMxZGFhwZLOTXr1kV5d5cIKP5XExC+4zr8UH5yswR96r7VPyFT3B0F1OUENeH8NKV0EzVkIlx/1DrtsoLXKrVKbTM4CMoYmQwAv/nkFZz30mY76414vPSydFDPHRQo+1FIxJ5upoBJSvSEUr3wTfZhbD917T/ZuVLiUxKiWMyDMXMT9IVdtln1yUm2+nWhDDT1J7cw3UKcbEUoUCKu9SDZlZObC4w9fhzHF760fblUfT4zvYcBfVziu3V3wVVYzaYxOyvvkFAhbUVlash2VGCxn2Je9+epTyR7zRj7ZuO/ialQIL7PXz0FBWelwuJZ3BfMosFf0EygLv0Z3xOWRFI/NJNEFg4RvaYGbfch8BwqLj/gqyOajy6OFvFbx26fCzZqw46jqCgMHscQEpAZg=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"`OperationContext.Current` should not become `null` after `await`; if it is, then there's something much more seriously wrong. I recommend figuring out why that property is not behaving properly, bringing in Microsoft support if necessary.\r\n\r\nRegarding call context data sharing, this can happen if there isn't an `async` method further up the call stack. An easy way to avoid this situation is to always *set* the logical call context within an `async` method.\r\n\r\nIf that doesn't fix your problem, then it's possible that whatever is messing up `OperationContext.Current` is also messing up the logical call context.","date":"2020-01-17T23:57:48.954Z"}