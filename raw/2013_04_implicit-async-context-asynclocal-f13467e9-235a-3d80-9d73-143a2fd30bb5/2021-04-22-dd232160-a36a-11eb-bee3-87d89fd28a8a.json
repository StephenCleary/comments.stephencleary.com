{"_id":"dd232160-a36a-11eb-bee3-87d89fd28a8a","postId":"2013_04_implicit-async-context-asynclocal-f13467e9-235a-3d80-9d73-143a2fd30bb5","postUri":"https://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html","replyTo":"01cbc9b0-a33c-11eb-b666-538398651513","authorEmailEncrypted":"scoeQNwI6iHC7OocH9C8RePDKuDjAXC9u/oX73ZLk+3xHdd0UYzo/TxJtsuRos3VvFx49oJSZ9o+4Q1+iOmFPjav2JIdF3ttEFHLSSAUvXMoDIE85rbPNk4eibg+EmgNkZcenAd3YOHMMaXfOoTe4DLMfEZhfxvIz5bnHMd9fLSytnRTVAoXOKHuIWrGnkT5Mo4IxG9+KSmLKy4NNPYueeV5N5HdyIBR4rUofTK8bhLUND7hHR2OQzCj1WQ4Q0qJasUbrSXAlJsCqJhAkrLivPBMe+3gM5G++JQw9GQ/WBUXaIc05jPsvtDCSa0P5cJoa64g6GQDZzUs6yNb9ANybmiiewGVTMjHz+Y+/Fj4hs1lREUic8ZjqpiV68AWIkRTmvNvEbOcDscjGXwMatA06D3AWl8CKQ2svtOO8/NYJ5n3TOMnPBzEtTczieC1CoDdK3pljeRVcTUYOBXf1NWaKO1N79A/r+nFkaaA17q14zg2IYP6TwyLs8kjvENcVWhK1RCkYA91bxRYCmq1w/a/hPmHCxYQT+kJCTjWPc5smh9ksRN9cR9T/yH78G9lm9tIpk1oixxrz6hn/qq5hrOZSYuQlZqU8m3ptJGUPPcp+kHPFdgiwKEqhstJkKrRd3H9Ve3arMHAsMmYwm5rEgSRwbef8PRxfCzy5duPQw9/VQo=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"`HttpContext.Current` works fine with `async`/`await`, *as long as* you've [turned off quirks mode](https://docs.microsoft.com/en-us/archive/msdn-magazine/2014/october/async-programming-introduction-to-async-await-on-asp-net#before-getting-started). The first thing I'd check is what the type is of `SynchronizationContext.Current`. If it's `AspNetSynchronizationContext`, then you're OK; if it's `LegacyAspNetSynchronizationContext`, then you have the quirks mode enabled and need to disable it before `async`/`await` will work correctly.\r\n\r\n`HttpContext.Current` ends up here: https://referencesource.microsoft.com/#mscorlib/system/runtime/remoting/callcontext.cs,94 - which does read from the async-aware call context (it's called \"illogical\" in the source, which I assume is a joke).","date":"2021-04-22T13:01:33.967Z"}