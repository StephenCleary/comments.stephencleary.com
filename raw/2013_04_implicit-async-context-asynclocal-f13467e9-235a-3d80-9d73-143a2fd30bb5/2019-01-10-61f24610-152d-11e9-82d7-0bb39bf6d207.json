{"_id":"61f24610-152d-11e9-82d7-0bb39bf6d207","postId":"2013_04_implicit-async-context-asynclocal-f13467e9-235a-3d80-9d73-143a2fd30bb5","postUri":"https://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html","replyTo":"b7d71cb0-1517-11e9-82d7-0bb39bf6d207","authorEmailEncrypted":"WDL0nvV+x/IzumpeuDTerfS8sVrcXiPyA+LPoTk26jX9WPETzymd6aUROzu2VTOByMctwOqKOxEQrhZkOyaN+POlLTUcMTF2b5D6hGNuJX/AVokCkjXLLr9KEdvAZAyVg79dazB63bcIL8Tjgy3hT5tfYI4shebQq4S6IGTkUhtEnpAMNHiFEPztrW73R/fbHCgkJIYpMarBWjG3Jt5xmgOxeT+2SGY5/gTfoo4Y5qjns/x6ZB4MCq35rEE94qBET8a/UKPpL0hEbc1i5IcL7gdXOPjF9OhX3qUhs0yryjLTO5xTw8HO69BsJZP44R89dsWC9EJwD/01QSwpx5benW5rf9+glRi2t9cpPmWvjSFzn93hqSlUBJGGcATW+iOxQcdg6PuGTLronbwQNIay9Nhyx+IhEMW/4c1M9EyTaSQG4vnmfJn+aLAdh3sq1brUKYed7uer6XdrEc5IZJalzxlVVG+etpM/PyfvCceYYCgI7cZRSYbHpXDMhBlGYGbSamj9ATDR/kdnlYDLVZuP/5N30TF0AGhU4NAtdGujxpNKX+xizzI8Fsta94GDW0aQmILDdX7Z0UAT8XKrUOHfCQVRuXZaUbQy1jqt15FSpfQQ4Tyh6frsGk/mHhfRHoYsc6iGCrWmrFLinzRC+FL9aZSDSwbTsTWT/R0bQm/gYYA=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"I suspect that this is due to this:\r\n\r\n> The code uses tasks, but no async/await.\r\n\r\nFor the implicit async context to actually work, at some point you have to establish a copy-on-write scope. In the `async` world, this is handled by the `async` keyword itself; the compiler-generated state machine establishes a copy-on-write scope at the beginning of every `async` method. I *expect* that xUnit's test runner does not call your code from an `async` method, and since all your tests are synchronous, they would all be sharing the same scope. That is, assuming your `AsyncLocal<ConcurrentDictionary<..>>` is a static instance, which seems likely.\r\n\r\nOne way to test this is to make your unit tests `async` (you don't have to use `await`), and see if that clears up the problem.\r\n\r\nIf that doesn't clear it up, try to create a minimal repro and open an issue with the xUnit team (or post on Stack Overflow) and send me a link to it.","date":"2019-01-10T23:13:47.747Z"}