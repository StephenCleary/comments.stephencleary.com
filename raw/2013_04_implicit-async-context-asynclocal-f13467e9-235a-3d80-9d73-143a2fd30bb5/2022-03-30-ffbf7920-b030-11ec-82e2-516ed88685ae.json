{"_id":"ffbf7920-b030-11ec-82e2-516ed88685ae","postId":"2013_04_implicit-async-context-asynclocal-f13467e9-235a-3d80-9d73-143a2fd30bb5","postUri":"https://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html","replyTo":"43f0e380-b02d-11ec-82e2-516ed88685ae","authorEmailEncrypted":"RXtjigRTDzT4y5hCA0LSO6uGmKgkTA6ImkW6agpaJnQn03eb9JFQ3qzEC/mB2ZRsfRSuY8irRGSCfOmspr/RuXkA/RsEkAaStsFn2Nu2KmGzZxINr0AcqjpN8QAkCXZEL2Qyjb+A199AndACqc0Mg0pYW/SWVuLIMSAOHqR9mhkHVG6uvfkb2Js/EA8bv/ybrzFv/XC+l15WwQIfBy0fbAF+ZQsE5IyuvSRuqUVn8O1ek0Os4zeBWNJIj6udThd+34op+XYh6bh6SAZvXuvUAK2bwKgZrTzEN9PI7Tdea+JtiDjM6nZT+jkZpivhiic7KXnijBs0n4aOgJ2Uf/HaDoxK/fdpaUrkMwsAYFKYiJwkR7QLjMVHnrXTYwaBSJGbaAclO20GavLeaY2CodxYb6RKqFnX+j78VEAQy6FxYgS2CtMeKi7lhnNBJvLV9ergozrzII1WauTQ2ZQk37N13VBWyIhN8gQD0W7MRGFXCG0bI7RH36BsR11z8tdnjFxLz3NW9NKtkVOmbWJ6fYEiPRD4ZbeGDk7ZJ/ipgIua3eVYX5ymNsZJmamdGUxqNUaZvRurefn5Vy5gM1JvLldj5aGWeBlZJs6ZYv8vgf8LoRBNy6xdW+SVMddJp9kvZK1Z6eTPwm0hViFwcUfRFEyfDtyLpS0Lb2d3Dan8YZQE87E=","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"If `HttpContextAccessor` is *always* registered as a singleton, then that change wouldn't have an affect. Previously there was one `AsyncLocal<HttpContextHolder>` instance declared `static`, and now there's one `AsyncLocal<HttpContextHolder>` instance per `HttpContextAccessor` instance, but there's only one `HttpContextAccessor` instance. In both cases, there's only one `AsyncLocal<HttpContextHolder>` instance.\r\n\r\nWhile looking into `HttpContextAccessor` more specifically, I came across [this comment](https://github.com/aspnet/Hosting/issues/793#issuecomment-224924030) which claims that `HttpContextAccessor` won't work correctly if registered transiently (or scoped) - it *has* to be singleton. Which is odd, because it's using a `static` `AsyncLocal<T>`, so it should work regardless. So I looked into the source code history and found [this commit](https://github.com/dotnet/aspnetcore/commit/622d112372ed11075af160b1fb5a11a7637ff516) where it was made `static`. Indeed, before 2017-01-09, the member *wasn't* static and so it *had* to be registered as a singleton (the comment claiming this is from 2016-06-09, so it was correct when written). There isn't much in the commit explaining why the change was made (it links to an unrelated PR, possibly due to a repository merge/migration); but if I had to guess, I'd say it was changed to be `static` to *allow* non-singleton registrations to work just the same as singleton registrations.","date":"2022-03-30T13:55:03.889Z"}