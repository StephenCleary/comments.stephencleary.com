{"_id":"1e6ec1e7-bf06-3e7f-a405-a6c6878d10e8","authorName":"Brent Arias","authorEmailEncrypted":"sF17uYMvdeXLavlXhBffJYiz8YfuL/wfYnqiLhHtAhSzW3KvVHWiPV6M5bpv3x6L8lANg9yxoF2gqq6M15ufwMABR9G7Koyadny1FtmkJlyc7/CQz1oGLPiLS5/7lZE1UJdldzWd7F8/70FsfOCZHGwCwokn84bgSvCVKl5GIIyVpICcQrM2U7OllHiUziiPkTiqKS5GvTnKHVjOiCXCzzReNPYUE+H7kwjC/3fFatMdZyLS2YMeHlRCjKKcFgThFwJ6ylPBA+VAojewesEWCFbLIJq5ZGaZM3hTMuo5J8LLH+hSXb4BdBTxo3HWufHGrcF0vVCfQqg2gQNi/Ep8QSepX5c+expYcjcwwsemH7Ig0ZdRhSPXkGp1HPdCZj1Cz9bHmINoI+PKpwec5v8YX1C1DgRsIF9gm52MESiEhbUy7ku+hqWvBKbvId7jm8WbW3ZgmD1BysjyFb4D5BNvv7kjTLZQZ37NIw4k4PiEuX3ttIsGfgNyTtg2OWJZMYMlrKM6SxaDnY2CfNCmBV/HXIW8F3wIDKGo41XrNkl9fXc2I6fmtf6XbDGLKnpviQgs91CwmsR3Z5Pfy9yA5+ULgnC2a4ZBi2Whm73qHcRVpCPcCR5YyGKrRsrKlKhEYhlwq451WTNs880Sga4lCxvkp2bM+UEvYN4g42xKLS2V25A=","authorEmailMD5":"0c0a1f54ab0a0911fd931ae5e19a5903","authorUri":"","authorUserId":"disqus:Mystagogue","message":"Three problems. First you said \"you can end up sharing data two different ways: .NET before 4.5 did not have the copy-on-write behavior, and the copies are shallow.\" There is something missing or contradictory in that sentence. I think what you meant to say was \"you can end up sharing data two different ways: without copy-on-write before .NET 4.5 and with a shallow copy-on-write after .NET 4.0.\" Am I correct?  \r\nAnother problem is that your article seems to insist that .NET 4.5 copy-on-write is only active when using async/await keywords. In fact it appears to work with any form of multi-threading. For example, I built a .NET 4.0 test app (run on .NET 4.5) that merely uses Thread.QueueUserWorkItem in combination with CallContext and it achieves the same copy-on-write behavior.  \r\nA final problem is that your sample code makes no attempt to call CallContext.FreeNamedDataSlot(). As a consequence you obviously ran into the \"...not marked serializeable...\" exception when a thread was returned to the thread pool - which is presumably why you created the MarshalByRefObject \"Wrapper\". Unfortunately this means there are threads subsequently being dispatched from the ThreadPool with a dirty CallContext. I suspect it would be better to revise the design of the sample code so that (1) explicitly freeing the CallContext is an option and (2) the final Pop() which produces an empty stack will in fact free the CallContext slot entirely.  \r\nI'm interested in your feedback on all three of these suggestions.","postId":"2013_04_implicit-async-context-asynclocal-f13467e9-235a-3d80-9d73-143a2fd30bb5","replyTo":"","date":"2015-08-24T20:56:15Z","timestamp":1440449775}