{"_id":"27b97780-3e76-11e9-9b2a-91601e299ccf","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","postUri":"http://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html","replyTo":"74902e10-3e07-11e9-9b2a-91601e299ccf","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Steve","authorUri":"","message":"Yeah. The problem of the model changing while the user is updating it â€¦ that could happen regardless of whether the view model is attached to the view or to the model, and regardless of whether the model notifies the view model of the change. \r\n\r\nLet me think what would happen for, say, a drag & drop where the thing being dragged is deleted in the model during the drag and drop. Starting the drag, the UI obtains a reference to an object in the model. Dropping the UI element, the object referred-to may have been modified (removed from the model). So the question is whether the drop will work if it drops something that has been removed from the model. \r\n\r\nLogically what should happen is the model should reject requests that are ill-formed, such as the request to move an element that has been deleted. To enable this, UI actions should not manipulate the pieces of the model directly, but should put in a single request to the model to carry out the intended overall action. That way, responsibility for either accepting and executing the action, or else rejecting the action, can be located in the model layer. \r\n\r\nHaven't used Redux -- should take a look at it.","date":"2019-03-04T12:08:01.138Z"}