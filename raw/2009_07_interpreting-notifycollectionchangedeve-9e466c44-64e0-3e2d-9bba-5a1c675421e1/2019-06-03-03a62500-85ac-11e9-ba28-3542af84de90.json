{"_id":"03a62500-85ac-11e9-ba28-3542af84de90","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","postUri":"https://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html","replyTo":"34cb51e0-8562-11e9-ba28-3542af84de90","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"sjb","authorUri":"","message":"Here are example extension functions to help deal with it:\r\n\r\n        public static NotifyCollectionChangedEventArgs RemovedEventArgs<T>( this IList<T> @this, IList<T> items, int startingIndex)\r\n        {\r\n            if (items == null || !(items is IList)) { throw new InvalidOperationException(\"Items does not implement IList\"); }\r\n            if (!(startingIndex >= 0 && startingIndex <= @this.Count - items.Count)) { throw new InvalidOperationException(\"Index out of range.\"); }\r\n            return new NotifyCollectionChangedEventArgs( NotifyCollectionChangedAction.Remove, items as IList, startingIndex);\r\n        }\r\n        public static NotifyCollectionChangedEventArgs RemovedEventArgs<T>(this IList<T> @this, T item, int startingIndex)\r\n        {\r\n            if (!(startingIndex >= 0 && startingIndex <= @this.Count - 1)) { throw new InvalidOperationException(\"Index out of range.\"); }\r\n            if (typeof(T) == typeof(IList)) { throw new InvalidOperationException(\"Type confusion - do you want IList or object constructor?\"); }\r\n            return new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove, item as object, startingIndex);\r\n        }","date":"2019-06-03T03:02:25.998Z"}