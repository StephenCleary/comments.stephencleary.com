{"_id":"86cf99a0-d1b8-11e8-94ce-b56b73f5fd7f","postId":"2009_07_interpreting-notifycollectionchangedeve-9e466c44-64e0-3e2d-9bba-5a1c675421e1","postUri":"http://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Steve","authorUri":"","message":"Thanks for this really useful post!\r\n\r\nThings start to get tricky if you try to make a thread-safe version of this class. Since the arguments to CollectionChanged are only meaningful relative to the state of the collection at the time the collection was changed, we cannot allow any intervening operations between the actual change to the collection and the CollectionChanged event callbacks.  This means that the CollectionChanged event has to be fired from within a lock -- clearly a recipie for deadlock if one of the event listeners happens to invoke a method in the collection. \r\n\r\nWhat I ended up doing was allowing re-entrancy for the purposes of reading the collection, but for a write operation I timeout the lock and throw an exception saying that deadlock (likely) occurred. This is somewhat analogous to the exception thrown by, for example, List if you try to modify the List while iterating over it. \r\n\r\nTo do it, one requires two locks and a private List. In pseudo-code (actually real code but I'm skipping the details) it looks a bit like the following. Here \"ExcludeOtherWriters\" and \"ExcludeOtherReaders\" are SemaphorSlim-based locks.  \r\n\r\n        public void Insert(int i, T item)\r\n        {\r\n            using (this.ExcludeOtherWriters.WaitOrThrow(this.DeadLockDetectionMilliseconds)) {\r\n                NotifyCollectionChangedEventArgs added;\r\n                using (this.ExcludeOtherReaders.Wait()) {\r\n                    this.List.Insert(i, item);\r\n                    added = new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, item, i);\r\n                }\r\n                this.CollectionChanged?.Invoke(this, added); // synchronous\r\n            }\r\n            base.NotifyPropertyChanged(nameof(this.Count));\r\n            base.NotifyAllIndexedPropertiesChanged();\r\n        }\r\n\r\nsjb-sjb","date":"2018-10-17T02:58:30.596Z"}