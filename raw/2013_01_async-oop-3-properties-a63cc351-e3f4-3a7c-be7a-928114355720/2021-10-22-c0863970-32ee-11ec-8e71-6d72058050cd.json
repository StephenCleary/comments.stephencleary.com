{"_id":"c0863970-32ee-11ec-8e71-6d72058050cd","postId":"2013_01_async-oop-3-properties-a63cc351-e3f4-3a7c-be7a-928114355720","postUri":"https://blog.stephencleary.com/2013/01/async-oop-3-properties.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"steve","authorUri":"","message":"Now it works like a champ\r\nJust needed an Action<Task<TResult>> for the NotifyTaskCompletion class to call back when it was finish\r\nThanks Stephen \r\nI shall never doubt the Master Guru of WPF again\r\n    public sealed class NotifyTaskCompletion<TResult> : INotifyPropertyChanged\r\n    {\r\n        Action<Task<TResult>> _taskFund;\r\n        public NotifyTaskCompletion(Task<TResult> task, Action<Task<TResult>> taskFund)\r\n        {\r\n            Task = task;\r\n            _taskFund = taskFund;\r\n            if (!task.IsCompleted)\r\n            {\r\n                var _ = WatchTaskAsync(task);\r\n            }\r\n            _taskFund(Task);\r\n        }\r\n        private async Task WatchTaskAsync(Task task)\r\n        {\r\n            try\r\n            {\r\n                await task;\r\n            }\r\n            catch\r\n            {\r\n            }\r\n           \r\n            var propertyChanged = PropertyChanged;\r\n            _taskFund(Task);\r\n            if (propertyChanged == null)\r\n                return;\r\n            propertyChanged(this, new PropertyChangedEventArgs(\"Status\"));\r\n            propertyChanged(this, new PropertyChangedEventArgs(\"IsCompleted\"));\r\n            propertyChanged(this, new PropertyChangedEventArgs(\"IsNotCompleted\"));\r\n            if (task.IsCanceled)\r\n            {\r\n                propertyChanged(this, new PropertyChangedEventArgs(\"IsCanceled\"));\r\n            }\r\n            else if (task.IsFaulted)\r\n            {\r\n                propertyChanged(this, new PropertyChangedEventArgs(\"IsFaulted\"));\r\n                propertyChanged(this, new PropertyChangedEventArgs(\"Exception\"));\r\n                propertyChanged(this,\r\n                  new PropertyChangedEventArgs(\"InnerException\"));\r\n                propertyChanged(this, new PropertyChangedEventArgs(\"ErrorMessage\"));\r\n            }\r\n            else\r\n            {\r\n                propertyChanged(this,\r\n                  new PropertyChangedEventArgs(\"IsSuccessfullyCompleted\"));\r\n                propertyChanged(this, new PropertyChangedEventArgs(\"Result\"));\r\n            }\r\n        }\r\n        public Task<TResult> Task { get; private set; }\r\n        public TResult Result\r\n        {\r\n            get\r\n            {\r\n                return (Task.Status == TaskStatus.RanToCompletion) ?\r\nTask.Result : default(TResult);\r\n            }\r\n        }\r\n        public TaskStatus Status { get { return Task.Status; } }\r\n        public bool IsCompleted { get { return Task.IsCompleted; } }\r\n        public bool IsNotCompleted { get { return !Task.IsCompleted; } }\r\n        public bool IsSuccessfullyCompleted\r\n        {\r\n            get\r\n            {\r\n                return Task.Status ==\r\nTaskStatus.RanToCompletion;\r\n            }\r\n        }\r\n        public bool IsCanceled { get { return Task.IsCanceled; } }\r\n        public bool IsFaulted { get { return Task.IsFaulted; } }\r\n        public AggregateException Exception { get { return Task.Exception; } }\r\n        public Exception InnerException\r\n        {\r\n            get\r\n            {\r\n                return (Exception == null) ?\r\nnull : Exception.InnerException;\r\n            }\r\n        }\r\n        public string ErrorMessage\r\n        {\r\n            get\r\n            {\r\n                return (InnerException == null) ?\r\nnull : InnerException.Message;\r\n            }\r\n        }\r\n        public event PropertyChangedEventHandler PropertyChanged;\r\n    }","date":"2021-10-22T04:15:55.688Z"}