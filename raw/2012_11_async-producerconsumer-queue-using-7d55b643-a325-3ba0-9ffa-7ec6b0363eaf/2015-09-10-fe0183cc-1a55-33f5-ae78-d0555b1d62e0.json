{"_id":"fe0183cc-1a55-33f5-ae78-d0555b1d62e0","authorName":"xenonforlife","authorEmailEncrypted":"ei/1pyvHl/sw50V730F0VuKZeEKPovRRnM8XTIi1FX5RRmhwQGEKzgwGzOlO/4Uv7LuWVStXx60EikW2yn9Ss9BBNFlI6vq5wZ4zp6VEkVXlF32XUgCGjeDljmTfnyqH7gdlgjF2qg4LFdEqI94WJ4fUaaSm74CcsbQnEipWSy+UAwc2Ox0JtEeiyGY7uw5Bj1ff2LCg5LavG3KNXHGnRlzzBW7Pu09GKAY1RLVNbSKO15Z9z8ggta27Lb12hG1URbIXXMWKbCJ9zmJuDfl4c0/vffPUBx+Z2qx7fAukY0iYoMciJtilWcO7dKrK4eyaU9yIcPheLvHiLiXeuMfEekoxlwwA1hw22HF0cEpJBPeMuuKFZnO1o07lz4QLS4DnkpLX40dte7ekuynGeP6KGGFGhuF6/mgbb/ND0JnbyiVOPSC2aVPbh6fcVK+8u/iGE3yLnFl+BkWsmFjcwj6iGmGA9d9/63zYPIavGSZpV8SFVTdpJR85dpHsVxJRCqJHYKqwLKludwEn4sG7wKy4e5XPOuKxaEFzw1RiMK16ZNf36YwPUc+D+uZTgsH3epY73UJ8K81HFDl/OwohjM9aEMBxT3slkVWwcrRJFqVwoynlcJg6jrXL7rZDkZm1NZAJ+LAHboava1UvNFT9EOIPlq3FaZdesBRBxYZIBjrKik8=","authorEmailMD5":"678244a0ad782aa2a25518ca6168b046","message":"Thank you so much for the speedy reply Stephen, I did think of this solution infact but then this approach poses another problem (which maybe disadvantageous in my case of contacting the external hardware) that as soon as any ActionBlock is about to be over it would trigger a batch, therefore I would somehow run into fragmentation of an otherwise (preferably) larger batch. The next thing I was considering is triggering it from the TransformBlock (as the first thing in the transform block, here too in order to start the pipeline I would have to start it once externally but after that it would be self-regulating). This way each successful propagation of a batch through the transform block to the buffer block (after transformation) would trigger a new batch (wouldn't it?). But in this case then for a smooth operation should I then set the BindingCapacity of my BufferBlock to 1 (or equal to the number of actionblocks)? so that when there are no actionblocks to accept an element from the bufferblock, the bufferblock inturn stops accepting inputs from the TransformBlock (and this is the point where I am getting stuck, since at this point the pipeline is self-regulating wouldn't the transform block keep buffering its output if the Bufferblock is not ready to accept it, since from the documentation I could understand that this un-accepted output would be postponed/declined, but I am not sure how that works, but this is the point where unfortunately I am getting completely stumped)","postId":"2012_11_async-producerconsumer-queue-using-7d55b643-a325-3ba0-9ffa-7ec6b0363eaf","replyTo":"0c68d212-a193-390e-a2d4-016074e0b03b","date":"2015-09-10T21:58:44Z","timestamp":1441922324,"authorUserId":"disqus:xenonforlife"}