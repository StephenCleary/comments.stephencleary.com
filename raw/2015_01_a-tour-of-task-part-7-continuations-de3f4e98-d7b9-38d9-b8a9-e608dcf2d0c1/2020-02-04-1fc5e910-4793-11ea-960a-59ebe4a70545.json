{"_id":"1fc5e910-4793-11ea-960a-59ebe4a70545","postId":"2015_01_a-tour-of-task-part-7-continuations-de3f4e98-d7b9-38d9-b8a9-e608dcf2d0c1","postUri":"https://blog.stephencleary.com/2015/01/a-tour-of-task-part-7-continuations.html","replyTo":"c4dbd1d0-478e-11ea-960a-59ebe4a70545","authorEmailEncrypted":"VpQmCelMDwVfX4ous2oSdJeyMWKiT1zsOaVYO9ZtpE1MQ6usQ3lTjRM0cn2WxylJ7HBLwqU1nEZYmgJubk6rGFxkYAUCl3zBpIsDyI4nvEz9ruWiHyZHPut/EVXSLAtz6i7pyx3sUtOWD1EHrFlewNThLr/UBaos0GSmTVv7HMXR2O2BIrhwDoUhV7/Psslfi5UqkGhS4QbRP5TuobolU7nOCPmCRpgU+HIn6spOrvk5DdeUmSmKi9AiGk6TVPWHcDQ2FCMpAM2t2aSbdwFWyDuSrRlV/YonEvoltk0bjSA00fmlCyofd91Z2IEUIxTWz1uIOs5u8Svdb8GrqHyoFSrE7P9NY6ohBjB9ujLcdZw3akquHmaX7iKbsfPgALlSSYKOpwJN2NCxxlTEqXz/x6O9eZhqLpN/J+oWFZpVT64LQEdXGdKRZzj4Ce8UpK3goDd+0INvpinBSMXVV7jPNVrKROs0ZDnrP0DF6/cxFdXUOlyX1HjrQjJ5sDEiRn+J1PIbSoSmrZwoQ4E+WKvQ2p9zJQMLIWwOVCRpt9G3OU3jy6M3yNwC8c0NXF9QpcFarbCMLTZwwO8xmgvUW8K7rbdgkTpGlrPkhMCN8uJupPj2CzjApziN8pz+lAMloeNaN41E0NuYEjIBfb5Ixj5XMCtwGJEoqIgrinXxir/RoWM=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"The simple way to get the results is to `await` each task after the `Task.WhenAll`, as in your last example.\r\n\r\nAlternatively, there are a few people who have written [overloads that use tuples](https://github.com/StephenCleary/AsyncEx/issues/197), which can be used like this:\r\n\r\n```C#\r\nvar (firstResult, secondResult) = await MyTaskEx.WhenAll(firstTask, secondTask);\r\n```\r\n\r\nSide note: [Use `Task.Run` instead of `Task.Factory.StartNew`](https://blog.stephencleary.com/2013/08/startnew-is-dangerous.html).","date":"2020-02-04T21:13:01.209Z"}