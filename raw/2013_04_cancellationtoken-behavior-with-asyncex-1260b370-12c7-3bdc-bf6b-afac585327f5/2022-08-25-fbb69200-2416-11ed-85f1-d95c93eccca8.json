{"_id":"fbb69200-2416-11ed-85f1-d95c93eccca8","postId":"2013_04_cancellationtoken-behavior-with-asyncex-1260b370-12c7-3bdc-bf6b-afac585327f5","postUri":"https://blog.stephencleary.com/2013/04/cancellationtoken-behavior-with-asyncex.html","replyTo":"","authorEmailEncrypted":"gootPA8DzgmKGGgNzX3KgUVP0PvObJ3lX7Fj7ualAK6QskMjXsV5kr6IjgW14oEyYZDPp0lWrTaMy4PhPskqDVvY7NBAahjwhpfThMZAYjXPQ0cLaIiYRU5wrXF19w4+dbbUXWK8c5PHjaXx87ojLb/eEILg9qSlMcbIQ9rVMzIZOAlwkQ/B3jxs3l/iRpBR4cXnJoWIHn2yz41yR/gYKjV+LRXL91lB0ItwFed2kPmG/8bCKL0SUXDBu93N2Z3QiyAw0TOR48V5E8Re+KractO8U/4MMW4O7wOosmoCASYsf9VS6iENPHDE8sE8hU8GX40YEBzMLtpyyl1MeBt9pebX6D7CT+z1x0NUik487zPFCyzXYnckf6jE3Ty1n6IhO6ecjaT3FstfTN+dVEozwuN7+5t/GFAPlDAhoY99CSQV2VuUieAhL+9F+SW4qtykuoEMRV+iNCcwMD0AAXOyrFxv2ImxlmvDZkT9drwr76QMJr13DvKpd6NEMJ4JVXaJPeMzsGn7tKtP0BjrsClgzh6WQwMqTcmWskMZdzDjqwkyW/Ipp5ktjq3n8zEcKzJr5Ermnct6E5V/YuxKcxZXyJc4ByvowRtDfE93cQO6xZ5Ssh3XCm+XiiNm8kSXTcyFe1PnIUlbjpcLCDeh/j2G6YWWlBU0Ak9Mkbnd8VAD7EE=","authorEmailMD5":"b2afb7e356d278742f347baacf6489a5","authorName":"James Kidd Smyth","authorUri":"","message":"(with apologies for asking this on a somewhat random thread)\r\n\r\nHow come this spins up the semaphore max count threads..\r\n\r\n            SemaphoreSlim semaphore = new SemaphoreSlim(10, 10);\r\n\r\n            List<Task> tasks = new List<Task>();\r\n            for(whatever)\r\n            {\r\n                await semaphore.WaitAsync();\r\n\r\n                tasks.Add(Task.Run(async () =>\r\n                {\r\n                    try\r\n                    {\r\n                       await WhatEverAsync()\r\n                    }\r\n                    catch (Exception ex)\r\n                    {\r\n                        Console.WriteLine(ex.Message);\r\n                    }\r\n                    finally\r\n                    {\r\n                        semaphore.Release();\r\n                    }\r\n\r\n                }));\r\n    }\r\n\r\nBut this doesn't \r\n\r\n            SemaphoreSlim semaphore = new SemaphoreSlim(10, 10);\r\n\r\n            for(whatever)\r\n            {\r\n                await semaphore.WaitAsync();\r\n\r\n                await Task.Run(async () => -- DIFFERENCE\r\n                {\r\n                    try\r\n                    {\r\n                        await WhatEverAsync();\r\n                    }\r\n                    catch (Exception ex)\r\n                    {\r\n                        Console.WriteLine(ex.Message);\r\n                    }\r\n                    finally\r\n                    {\r\n                        semaphore.Release();\r\n                    }\r\n\r\n                });\r\n\r\n                //System.Threading.Thread.Sleep(100);\r\n            }\r\n\r\n???\r\n\r\nThanks in advance","date":"2022-08-25T01:41:05.104Z"}