{"_id":"ac261a71-e24a-3102-af3a-1a6102249239","authorName":"Joseph Louis Lagrange","authorEmailEncrypted":"Kh9QwkV6Xu+/jyYZrqYP1PhfqZUjCIIKJ82BXaE98SHH1Il5g+t1iVqZ9h1tXrCnxp7BpuKF+3pMfb4HdMVEuTBKQeEoDbcJy1A7f6W+0uL/xMphzwm/175qH4y4jwyT6zB3JOf9/jJHrpg4IoI/KUhvJQ+A9cWvAFF9nkPmnWvXFWg8/9sHyOXoP3JZI1ps3zJg8o0xDQ+OJMytumxXjAqS+EDS89/pi6SImMiGmMZRYfrzRRf/A9DorAisStNoO/39MKy6s8KENNsIYU0OyWsJKlZ/3As36UJkQ8wwQAILqb2sBLleBnxnVOOrS9famN0ZULaJrlmUwH0CBIZsq4QbLr20kZVnM1ZhK4VZD7I9X8HoLGypGzBAs1eJLVZw5Xo2T9S7Z6//T9nB8Ceil6q+5QBCeL8LrJzkkch0h/8vPZbyYGry4Wn1fhV2WXDaj+Sun5kY5R6qUmW/3bqIH4jBQi6DFb5uHQiTqeA0ehLIhIgVDMWLMVAyzp/b4Vrmy6AX8Fbip9WRqCAdU1NmHe/JNlTzi0pG2BRCRAW61Th1jRS9p0V1vOM40Fv6J1gLbYyAxMYhFEe2nUrKbKB0UuDSn8Ddw/60tPig524ppbOY9bigsYraCUkZcWBJfxnhmU369k6PYKBW6eY/3jQ35XnHkLZRqBQgKQfed/BZlNI=","authorEmailMD5":"7e6002f0e0c986706f0d834f7db3c134","message":"Assume there is a class library MyService with a static hybrid asynchronous method HybridWorkAsync. The \"hybrid\" means that the HybridWorkAsync contains both CpuBoundWork(); and await IoBoundWorkAsync(); statements.  \r\nNote that the etiquette you explained in another post, the CpuBoundWork() must be not wrapped with Task.Run as await Task.Run(()=>CpuBoundWork()) in the class library (implementation). Later, UI-based consumers have to invoke MyService.HybridWorkAsync with Task.Run as\r\n\r\nawait Task.Run(()=>MyService.HybridWorkAsync());\r\n\r\nto maintain their UI responsiveness.\r\n\r\nHowever in this post, you \"suggest\" us not to elide async.   \r\nIt is confusing to me because I have two choices when invoking MyService.HybridWorkAsync in a UI-based consumer.\r\n\r\nawait Task.Run(()=>MyService.HybridWorkAsync());\r\n\r\nor\r\n\r\nawait Task.Run(async ()=>await MyService.HybridWorkAsync());\r\n\r\nPlease kindly let me know which one I have to use. Thank you.","postId":"2016_12_eliding-async-await-98a72933-845d-3c59-9bd5-b4160554a9f7","replyTo":"","date":"2017-11-21T09:39:07Z","timestamp":1511257147,"authorUserId":"disqus:joseph_louis_lagrange"}