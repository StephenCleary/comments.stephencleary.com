{"_id":"7cd1c7ee-237f-3364-8434-1bc64a2f0b8c","authorName":"Stephen Cleary","authorEmailEncrypted":"haBqlwU3E6twvvryUldIVjmumr8nTw/irmvZfbwnhwZqvmf6WYEl3fzWyWIzByU1N9SPcE1owxs856WdxN0BpdOtb8NoLZFQTXqw3u5KMUNwCokrvo7S/UHahQimEctr5qdsOtQjaA+F2Fvtc7nefivtIJLQkE8cSIw5RIWkbk1UI0fTGfDfXHgLh6l+faGEY6s4h5Hst5nHWpg44abZgm5K5uSh5/3CGC5YoFm5Nj+4UHKbo+1yr7FZ5yj2QOw48szEBfnnK+Mengg3wC6MJAxzu3JKp7/o8HbqfaUQGEA5K1D0CliiwuQpWKPJGOHAixmY4XKOTkoKi98Z/fkyJPKCAOjTJI2gJK4OqIVVNhr4p/YJcBR2+8+XmPqxoamAr1pUz5rSYLJ5R6/au6tUhUdlO9Xyj+8reeiDTCTInpl3lD29i1aIAFU/kYhYi/D3qwQIz1JJZV5rllI28j1PNJJXJFzn1irsOPTw4YzjdcvCAFu0atGZ/k7K3fm0nRnV3lHX7rGbCLowyNyvjjKyKU6ZMdiWPOMQR7C3+vNFdKYDNvsMrTbxhACdC2bMuRmLi37UuM/ZAy2LDhM/pXtWWB1ckZDiakQxP80O9IcKP7GyVrR0Yf66ZyDYPNEgt3giCXSkrM+kwnmYoBXavI4QhoNsRFxo+P5XgPY/u1UQZ1Y=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Yes, both views of Task are completely valid and useful.\r\n\r\nOn the one hand, Task certainly is a modern OVERLAPPED abstraction. It represents some work, often I/O-bound, which can be done by something off-CPU, and the Task will be notified when that work completes. That's a completely valid interpretation of Task, and one that is directly applicable when looking at tasks sourced from TaskFactory.FromAsync.\r\n\r\nHowever, there's another interpretation of Task that is equally valid, particularly for tasks returned from methods. When you have an async method, the async state machine creates your Task and controls it for you. As long as the method awaits an (incomplete) awaitable, the task is not completed. When the method finishes, the task is completed. If the method returns a value, then that becomes the tasks's result. If the method throws an exception, then the task is faulted with that exception. In this way, a Task represents the execution of the method.\r\n\r\nBoth interpretations of Task are correct, and both valuable in different contexts. It is the latter version, however, that most end-users are more familiar with. The vast majority of async users have that view, and really have no idea how tasks \"really work\" at the lowest level - they only compose existing tasks into higher-level operations using async/await. All their experience with creating tasks is done via the async state machine. And the expectation from that mindset is that if an API method returns a task, then that task represents the execution of that method (and thus, they expect exceptions to be placed on the task).","postId":"2016_12_eliding-async-await-98a72933-845d-3c59-9bd5-b4160554a9f7","replyTo":"78a86ac4-941f-35f6-b361-f4620166e04e","date":"2016-12-17T14:10:58Z","timestamp":1481983858,"authorUserId":"disqus:stephen_cleary"}