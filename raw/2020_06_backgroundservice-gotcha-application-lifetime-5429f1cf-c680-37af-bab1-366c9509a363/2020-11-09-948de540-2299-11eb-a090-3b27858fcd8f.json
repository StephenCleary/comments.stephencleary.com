{"_id":"948de540-2299-11eb-a090-3b27858fcd8f","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"abb1dc90-19d9-11eb-ab83-5111b5bec834","authorEmailEncrypted":"JYgkYVFDRoVrgIKOKtAdp13nlrfyTa4R9OXcPKktfd59RWsVR099pAt3uA23oPprwjHrTR2ylo5G0FfIgMvy4J7Quig1Fqj4wrCU2TRqZDZR2BKN4bQxBiNhzIRFX033u049mTttpIxwjuDxihXpMUXsJSTIhLpXlXGcLXZsAgbmmcy6ZXyt2K7uTOVp9IsinJVZkruelB1Axo4oW5ZWhE+16gr5Sa+Iuh2r3LD26nVtwKkzcF60FZD3bmukrunSlSrCQe48DlyViamSIEfZ6grHyaTE7YhEwhb6XLph4iy9gfM/nyVtKxU8vwnhqrqv/2+2OvW4khullme+MJiVy+xgIchhHCZX/o7Fk66JdUbe5I110Vb6koe4RYIGisTiY7AGzS8tDHky/10pKH2EC4F8KfKJ33FkRFxwYIE4STRiHEWHnlsP1+QWaQzPYYJWY1/76Vurx2+g0Uu5YcyXE37bQtOH0pXFgVoaRkLSDD/PcOfWPUxYVEZjuragV11InfD3q+JgsVwjQ0OORDBA3n0BICOBnEjdJQef8W14QUPyAs7E+h3h1kphY+9Lf+i3rQpUCRpGOtRxDvA4DK843uaMdR6L7T5EN5WLpej7hit/L9uz/9OnuC4fmeBuzY1Mi286Njws9bsn5zPROEiIXEKM+kfOW4Z84Lrh+0kN40Q=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"The primary purpose of this post is to exit the application when the background service faults or is requested to exit. Normally, background workers have a loop that keeps executing \"forever\" - which is in quotes because it really means \"until I've been requested to exit *or* have an unexpected exception\". The out-of-the-box behavior in those cases are for the background worker to exit but then the host just continues running (usually doing nothing at all). By hooking into `IHostApplicationLifetime`, the host is also exited in these cases.\r\n\r\n> if my goal is to just Log the exception thrown by DoWork and continue looping in While and calling DoWork?\r\n\r\nThis is a more nuanced question. The problem is that in the general case of unexpected exceptions, it's not possible for an application to know whether it is safe to process more work. So most systems will retry the message and place it in a dead letter queue if it continues faulting. Fully resilient systems will exit the entire application and have it restarted by an external system.\r\n\r\n`ExecuteAsync` is called exactly once, when the worker is started. The API would allow a host to call it multiple times, but the default host does not do this.","date":"2020-11-09T14:40:58.517Z"}