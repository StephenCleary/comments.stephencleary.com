{"_id":"d75d1f20-4324-11eb-a7e4-816f9e6b3705","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"cd4f6160-4323-11eb-a7e4-816f9e6b3705","authorEmailEncrypted":"FREifW7UNqOGCAowWDnQ1F+m2LnFt6weMm5A06jb4Dg4LjqcGtQ/IuVyKfURFiWMSXlOXuPhs1qDdJrHMqGbG6zcnc115ub9GiSThHYo/Aq924lAl3t6Rv1pWUg0QUJbvcfOigRUce61sxKjWmnRwr/NM7plCltB3DDzJEFYZ6/SlPHq0BAKhqW8IFCybAgoWHBc2N7DNQwjfl5uKJDQDjfL/yqyi0z2ZGynsK5RpSAVLbPUJbojUbo4OyA7fZhz6rtYDgnOAfXkx616nuda+GGKzKS4n++yI2TM+uM+cO8lNbIDYogYf79U8PIlXOAIIbGICeFkm3fdVaByY4JgeAVp2ZXjhhycBmA/Ge3kORCjMQ0Df0XCfeTBtmY4gdQV8epY/9AapNCa0c7/XN56XCRYRTb4/xN1x4s9dhPiwpf26R4RmeSEZIyN7WAS9fKD0aF2At4zH5+bqJf7SFkx4+/V6itReZpzcxh4FAc5/LAjDyicI8jcJs+d5Rff5rMz8e6Z9DSeav7q9aGVXKSGtYt9aPwcD2aWROTAGM58IFGlBezdNGAdPrMZnGleeGGpxgFYJYctkFZzYO6bVpyRWM+5Fv2zBKuPEJyvTBxZteimmNCp6GZ4359PicxEpUB2fo3atShahlztiYkGxltEhoDm6yGCx39mnKZvi9E3ITo=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"There's two phases to the .NET Core host shutdown: a \"gentle stop\" which is when `StopAsync` is called, and an \"immediate stop\" which is when the `CancellationToken` is triggered. The intent is to have the application shut down gracefully if possible but also get a second \"I'm serious now\" signal. `BackgroundWorker` passes along the graceful shutdown request (by cancelling the `ExecuteAsync` cancellation token), and when the host says \"I'm serious now\" (by cancelling the `StopAsync` cancellation token), the `BackgroundWorker` just stops waiting.\r\n\r\nAFAIK, the time in-between the graceful and immediate shutdown signals is ten minutes by default, which is a considerable time. If you want your shutdown to wait indefinitely, you'll need to override `StopAsync`.","date":"2020-12-21T00:38:27.931Z"}