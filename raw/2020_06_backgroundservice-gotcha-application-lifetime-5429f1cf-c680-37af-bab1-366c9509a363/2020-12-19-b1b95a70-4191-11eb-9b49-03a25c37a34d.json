{"_id":"b1b95a70-4191-11eb-9b49-03a25c37a34d","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"","authorUri":"","message":"What do i do if want to do the opposite? Basically, here's my scenario. I have a quite a few long running processes running on my BackGroundService.  My BackgroundService uses the host's IServiceProvider to get some RequiredServices in its scope. My AsP.Net Core host application exits and it disposes the IServiceProvider. This causes my BackgroundService to throw exception on the IServiceProvider dependency that it's trying to use. How do I stall my HostServer so that all the BackgroundService processes are completed? I don't want to put in a random `.UseShutdownTimeout(TimeSpan.FromMinutes())` in my HostServer HostBuilder","date":"2020-12-19T00:32:37.619Z"}