{"_id":"23aa1e00-c12a-11ea-a7b2-374ac32bdc6f","postId":"2020_05_backgroundservice-gotcha-silent-failure-2c4bcdc5-c4ef-341b-90f5-0330b729fdcd","postUri":"https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-silent-failure.html","replyTo":"c5fb1300-c128-11ea-a7b2-374ac32bdc6f","authorEmailEncrypted":"Fqf6QvLocHj0PrVYzi+3Kz/Dh+CH+4cY1KgrZ4rLM4C5pfARF5GkfYWXddKgoTiHhwof/WbLTcpLtrFDnLX3W7Q76qSvO6byp7jQgl8nXD1QpQrXUrhF26X8wu4GblXgd1HUmCkU7BDnSCIKLeuvVD3ZZSTUlLfaN5gqJE/bHAATqqOftlqnUaz5fjhiArWOO2ikFiSniZSfjQoH0O3iswfXT9ii+GtOnV089rVHuXiq87WFESKCB57CXkchhTJPy8CwyuSmidPfpBpKCLqvd5P8oKBrXtleyLSRIxj5jxkaFP/e4vvzvHTAg2TZuRrlPEMBhsuvh8VttHDNfQCb774svp/QuGCeptzaD3eSQ3Zjj9FiIrgHx0uxpNMe2p2Auv7T1xqE6X8NNxbxDUn3N7ksx4ffE/uuiglPR7RYd5oFmetJJ1+GypAh+N19Ou8ydoV8/L8FJ1u8ZI4VG5lCGHSZtsCqo3IySW7lyuM08Zc6PgnZ49EUlZIeRL3qDP64s2i3c12rzIb7GLsSqOkjlcF2F2NbLHKusY7XNrvhWL/tIJ6GNCFCpz+uDa6vxybYX0roNTL2Jq5E5oebWeozcEpEhdLkwNw54Ta+vX8NFROa/G63hSukHZpJMRmNZdGJlwdHr4pgx1POzYnvVDgOIwRa5J6zufCXsD60vRbMnXE=","authorEmailMD5":"67cca6565ce823a15b01bf82b213b967","authorName":"Enrico Massone","authorUri":"","message":"Thanks for the quick reply :)\r\n\r\nWe are working extensively on .NET core 3.1 worker services and we are going to use your implementation as our default base class for background services. \r\n\r\nJust another point about cancellation and background services. If you look at the Microsoft template for worker service, there is something like the following: \r\n\r\n```\r\nwhile(!cancellationToken.IsCancellationRequested) \r\n{\r\n  // do stuff with the sample weather API\r\n}\r\n```\r\n\r\nBased on your concurrency cookbook using the cancellation token this way is an anti pattern. \r\n\r\nWouldn't be better doing that like this: \r\n\r\n```\r\nwhile(true) \r\n{\r\n  cancellationToken.ThrowIfCancellationRequested();\r\n  // do stuff with the sample weather API\r\n}\r\n```","date":"2020-07-08T14:48:52.114Z"}