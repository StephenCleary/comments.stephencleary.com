{"_id":"27fcdd10-a1bf-11ea-9269-a38d9d7ed17b","postId":"2020_05_backgroundservice-gotcha-silent-failure-2c4bcdc5-c4ef-341b-90f5-0330b729fdcd","postUri":"https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-silent-failure.html","replyTo":"e95d3120-a1b6-11ea-a362-318b8ed51204","authorEmailEncrypted":"tfarGrPXcqGF0feKklGgYS1iz+IWGtrVOqghdFMMYmzNgvg+/hOhfL3SgrHzhq8RsobtaSwXznMCZsMyLrWqRGVimPZOdcfvuwrhuC3HkJ0DwaE9zWRrmAS5FNpMvFH9fg0vmekT22W2viWt/QHPHkCrWLDO8tEiNImDQUMsO3kD2OcV5V7PZWvcVKO0QKmODyKh60dyV3uP4CWn05CdOyNyPd+Ruherw9o+TnRfKDors0bQ3KZ8I9Z3BVKd2sD3UIpmIn4cknJ6cN9qNgkEsL4a1avFQx8NJk5cy0USKuSRiYJNi3z5PBYVFHvaWtVGwgt7/nLT689Vo4E60l8/yttbZroXAQPe8+cP+IT4UkOvVFAefBWMgRKmIz7KvEowdOFxZdRlgIp+65mt615Lw5qWKM0s7EUPdZKMK/WCCPsjawROJARlB1l4zT9xU44BO/ZQXUTMuHqLe8mi3TJ1mTLs0CSQNTWqPI6JIqoaD5xDX2PC0Q7cV7Ns8UwuHRs0L/tOiY/9YvMprpkyz+i+CcKTfy4VgCwZBWtPdfPVRzun6X2E4OErIJm6rPH5x+mUAnvmaIx40CK95qzQPpdctckdtxKvSLYygDOeURA5VEGBObLcrlaL7HF4a4x7eX15ROzxuSFvt6+Wp4UEPjHmIp1m946shIotEmUKaEhrzCQ=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"That is the desired behavior, yes. And yes, it is odd.\r\n\r\nSo, what happens is that the exception is thrown, and then our filter is run (logging the exception). Since the filter returns false, the exception is not caught. This means that any code further up the call stack will see the exception as though it was originally thrown, not caught-and-rethrown.\r\n\r\nIn this particular example, there isn't any code further up the call stack, so it doesn't matter if it's caught, ignored, or rethrown. But in the more general case, you would want code using this pattern to not catch-and-rethrow.\r\n\r\nI'll have to get writing that blog post. :)","date":"2020-05-29T15:14:57.178Z"}