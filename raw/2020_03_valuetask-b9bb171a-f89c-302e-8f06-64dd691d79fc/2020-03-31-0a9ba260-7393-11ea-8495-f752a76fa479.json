{"_id":"0a9ba260-7393-11ea-8495-f752a76fa479","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"d3203640-7282-11ea-9719-774f52685bc8","authorEmailEncrypted":"rJRx4cYAGIfni0LPH9ql2ZxXk77M+HgE/vgOqzHakLmSlLMvPDtw6oqcMoi6/z/c6VtG5nLx1mJiZ3oIETLFEC89Dmz8Dir+1SXXOrDF+6s33MGXa8c6LuBH4U4qfjkSSRWgDUrM2ch9xKZJ/1VEI3jVJZONfmMOxQ0OGux2EmY6+jQfYJuxxkZb4jtOvT1hAGs7Os4v8dnX1J9KYVJRoNS8v07tgZh+jiffR6+rsC/XUnvUdz1t/JEUkiwCQ+8blinZxiD90H9iPNyhHqGXq1U6bqcXZAmz499OL9ZPgpxuHHUF6blliOAKxSV7Ch1urFbioIkXf1z1rnUZIt/sXs3a1fLAsJg0mpsmObT9XI0IeqXgZb098V6AiNweTjg8lxc+1McyLs/Vie6cFo8iHLGYeBnwq13S7QVrTiZccddA3teKzGswqveM28alNIreysYkDYxyuTFaJOJk9WaIzpYZO+OReIU5l1O0daYlfM1ZOmXV/Doh8O1tW6rxFHmW+C6iGMP4B4ngM7Nu42hWl2RtJ+wj4BaTZ/55R3E2gwsQ780jUlfLfjqqNIQiJ1NADkvmVPLFof4HKe9XSDswew1UUpID9rxbZFacGYS9nQdin9RwNFTnK+HkpLX61/uSCdeMk1dHgmK9kJvTfUfmUGtweq8tAtP8YQ0+0dWiv0o=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"`ValueTask<T>` was specifically designed for performance, and performant programming generally correlates with more pitfalls.\r\n\r\nSpecifically, `ValueTask<T>` had to be a mutable struct, and no matter what you do, those are hard to make without pitfalls.\r\n\r\n`GetAwaiter().GetResult()` was unavoidable since that's how the compiler works. Having a different name for the `Result` property would probably have been a good idea, although \"Result\" *is* the most natural name.\r\n\r\nThere's another whole question about whether `Task<T>` should have been the future type at all; an alternative design was discussed where a different \"Future\" type would have taken the place of `Task<T>` (which was borrowed from the existing TPL). At the least, that would have given us a chance to make blocking more difficult.","date":"2020-03-31T21:03:16.554Z"}