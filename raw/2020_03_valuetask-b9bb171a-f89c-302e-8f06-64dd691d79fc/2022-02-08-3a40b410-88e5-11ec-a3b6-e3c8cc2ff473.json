{"_id":"3a40b410-88e5-11ec-a3b6-e3c8cc2ff473","postId":"2020_03_valuetask-b9bb171a-f89c-302e-8f06-64dd691d79fc","postUri":"https://blog.stephencleary.com/2020/03/valuetask.html","replyTo":"","authorEmailEncrypted":"nTYh7oUMsOMCmPZ/xGTn28TwCq0gk5oOB7bOVxaKwDNriT/rl4QT97vZLZlvqJkQKN75xeofQNtI1W/V1T9XbEeeQTvDN3tAbP7w5BWSvi2ZoujScqU2oTf3ycpwjKJNxsw6a/aKIrnoabugpKx/wKIIgn9pIXaqWIWIueKSdZizffcB90eePU2zqOt9zo86humXgwj6shbVFJVyhti0OFD7mN58OXObB3+nky9R6jIoJcOAo42Mln/xlKU337HEXmQYsPUy/mxxlOJUSEqq34AjwNaOoef+078qdK7O6J52j6EVuORrRbY53sT/DfX5xetQ9J56/V2CxrV9sCLLWOgfRsKtZBzQ2gbfc6yb+X7ywzUTwOMA9idZdXOgaXCmcH/GUjft7a/JaKBkqLfilHQLtLOXrRvc7oEMNAaQzs1WN+ZTL6rTIiO06BebGW88IBBaSo7anzTm18gjlf5BxKHC3RZOkEDcaQbRhBqX6bHMJR85nqpVfmBW58Kannm9Kk+jYXbPGOvoTt2hvHXM65O62sONpxXUQ3pwtFry9DIUlqfwf2ajpk36tBZb5FBafcBdUIt7sa3lkURlUq91+81fftEntVwQ70Lp6AYm3/mbI6kfBfKxg7P+k6p7c+0zN1a1z/lOUmU2aOWzQZh/lcEun3kD5dzXfpO9gmoS1XU=","authorEmailMD5":"f7abea1038a8022e39d84f6c6642cde3","authorName":"Brandon B.","authorUri":"","message":"I didn't know where to put this question, but I'm going to go with here because it is ValueTask related.  I think I am understanding why you would use ValueTask when needed (i.e. an existing interface contract as stated in your book), but based on your older blog posts on Task.Run etiquette (Hi, my name is Brandon and I have wrapped synchronous tasks in Task.Run) I'm less confident it would be a good idea to introduce ValueTask in trivial/semi-trivial use cases.  I get why it could be more beneficial in some use cases than the corresponding Task counterpart, but not so much at what point it becomes beneficial to introduce over a synchronous method call.     \r\n\r\n    async Task DoStuffAsync()\r\n    {\r\n        var x = 4 * 2; // simple operation\r\n\r\n        var y = TheDoubler(4); // same operation via method call\r\n\r\n        var z = await TheDoublerAsync(4); // same operation but awaited using value task\r\n\r\n        await ActualAsyncStuff(); // I solemnly swear this method is doing real asynchronous work and not just synchronous work wrapped in Task.Run\r\n    }\r\n\r\n    int TheDoubler(int n)\r\n    {\r\n        return n * 2;\r\n    }\r\n\r\n    ValueTask<int> TheDoublerAsync(int n)\r\n    {\r\n        return new ValueTask<int>(n * 2);\r\n    }","date":"2022-02-08T13:44:24.954Z"}