{"_id":"797e77d9-423c-3582-917e-6fbf3a4a4177","authorName":"sjb","authorEmailEncrypted":"U9fUcIrWJYMrKqm0dCnGlMgGmxADDLUw6+wgIu08nLAAcczKFQswCm3txkyFyoOdqXisZModITdGgURa9xeddftT/mx/tbNgUzC4e67ytAVUt4CEw71s2ef5CxOP6DjU0V7h0x9FGMxh2NZUBb9rnwCBbOD0YJRZZsHeEAUQDOaCPWLqZ2M8dU1SFsapuZ/y/mpsZ2u8ZBU2Qqs0lSwt+lB04Y1dzLWsJasloIStOK1GZ74IaiaLaTmZbZx7sBY2f4raRI+6uVmr/Dd0jijF5Ti+59bKc9nSs1vJZP8y6NxLecRb4FsgO1w8IjYIYfeWX49wizLk1AagzgZNJFyRth+NXEvSDPrtK0fXHgRcLjM7pHsWOh4EA8hYrXzxNItCBIh0zaM4oiYaS/sgAKZAuQxL9EA3ROpFldtcrAbfLEcR6xq69c6oltHbYd/oFt8F8CfoX8Uc4hzv13LDELE0SgokL3Qi02FoCRwZVCV0AmI/3DshSCQS/2k57+ajeZqwKg8B8W6f8mQTu0dsLHKZv9jQduv3Ot5xJItIxVUpPjkYldIwNMUU2xJnZOVsldz7MBrrpwPc59D2Bo8seatF+kgB7y50cBhwhyT7qJUOeOB9zBPyBbOlS+TDWjSB1b/Ac75ePSYR+CdbFgm/rXQL31QYWlXrGnYZ5deApN51oiY=","authorEmailMD5":"961ac36915b8a21e7cba9d2c54b5d1d9","message":"Thanks for a great blog posting, and just as interesting today as in 2009.\r\n\r\nI think the first group of failures (A raising, B simultaneously unsubscribing and releasing resources, but the delegate in B is called anyway) represents more a race condition within B than an event-specific problem. One piece of code in B is releasing a resource, while a different piece of B is using that resource and the two parts of B are not communicating with each other on that. I'm not sure that it is A's responsibility to coordinate this for B. Eric Lippert commented on this in his posting, [https://blogs.msdn.microsof...](https://blogs.msdn.microsoft.com/ericlippert/2009/04/29/events-and-races \"https://blogs.msdn.microsoft.com/ericlippert/2009/04/29/events-and-races\")\r\n\r\nSee also [https://codeblog.jonskeet.u...](https://codeblog.jonskeet.uk/2015/01/30/clean-event-handlers-invocation-with-c-6/ \"https://codeblog.jonskeet.uk/2015/01/30/clean-event-handlers-invocation-with-c-6/\")","postId":"2009_06_threadsafe-events-adea283f-9468-3dfc-9ce5-4aa316624958","replyTo":"","date":"2017-10-09T16:11:23Z","timestamp":1507565483,"authorUserId":"disqus:disqus_yaGF2uMnNq"}