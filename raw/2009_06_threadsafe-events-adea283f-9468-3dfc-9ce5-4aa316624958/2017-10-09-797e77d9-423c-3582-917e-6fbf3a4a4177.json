{"_id":"797e77d9-423c-3582-917e-6fbf3a4a4177","authorName":"sjb","authorEmailEncrypted":"ktZGrVdDCB678gg41auT2U6AWGV7kqVpmc6wBWLKvee7vXZMQnycQpnqIwUtaFUiisLMbM3+dt4woU9FjnQ62Jrd+8DhUXXAYf7n5eAj4Qboy4+QPTv9sWaDNC4IM2ZUZMLp6qbFVUCX+CWUIpfHjp0vF1DnThdOuqlvzStFMjqvvHrJQ3XfdGEWnoCRsdlDKuCjHUE6mXDN6VoCFU9jE6YtWSrNtdre2GS/6X4StOAsKLcdlL0YPq8f45tDbot9YiAYo3pz+b2qA5uInf3l9Hd1CZWICzMgKgUfNs6Y7FopAfbwadwZe9r0i7JpkzL1h9mClj72B7MR3QHNw0Ml3dRD8U1DZO9FmISNeAidpx6C3kfb8DsBNOU3ruMpJTJ9DDyTheLYo+HMYSsUmNUI1dByhz+eitrVYMjs6GEVDT49KoKVONC8WOzWS+eZ3R0ZM7kKlBBayBphJaaGhgaXi0t2d/OxSr7B5dwrO3+JoDox8f2/7aXnzEBz6DmGZih1yY6x3egdPR8ySJa73bmrAY8ZBTkQQvPDjSM8kNn/P0Vfxk/3/HHv0ZmTfP07PoZQ8EPvkguzkhBouM3O9nVtqtqfVIeL7J+MpOFdFQ4eXCAb6T5wWT3TJpJdDSGya8QBpd8YfeA3F/oYRnf7ETq2N1HWrGH5OTBBFuTB5zvU2i8=","authorEmailMD5":"961ac36915b8a21e7cba9d2c54b5d1d9","authorUri":"","authorUserId":"disqus:disqus_yaGF2uMnNq","message":"Thanks for a great blog posting, and just as interesting today as in 2009.\r\n\r\nI think the first group of failures (A raising, B simultaneously unsubscribing and releasing resources, but the delegate in B is called anyway) represents more a race condition within B than an event-specific problem. One piece of code in B is releasing a resource, while a different piece of B is using that resource and the two parts of B are not communicating with each other on that. I'm not sure that it is A's responsibility to coordinate this for B. Eric Lippert commented on this in his posting, [https://blogs.msdn.microsoft.com/ericlippert/2009/04/29/events-and-races](https://blogs.msdn.microsoft.com/ericlippert/2009/04/29/events-and-races)\r\n\r\nSee also [https://codeblog.jonskeet.uk/2015/01/30/clean-event-handlers-invocation-with-c-6/](https://codeblog.jonskeet.uk/2015/01/30/clean-event-handlers-invocation-with-c-6/)","postId":"2009_06_threadsafe-events-adea283f-9468-3dfc-9ce5-4aa316624958","replyTo":"","date":"2017-10-09T16:11:23Z","timestamp":1507565483}