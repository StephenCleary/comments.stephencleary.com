{"_id":"797e77d9-423c-3582-917e-6fbf3a4a4177","authorName":"sjb","authorEmailEncrypted":"DhwSxD6ajd0idsM3FpkiL3Y8qtmAL2gKT3+QRUgYDcmio6g1H5XNL65O+V9Yc40qynM0546dgW1MpxU/cpnRZuv5wzhxqpwIlnC/PC75JuWE0eXl3DaPOC8jsUYECAriN2ccw+1OF4mtKruOQNHF1fRijwB0qv6ChgkF6abMpVyjwji3NVTtOWJPA6wIqJ3j3OJIGXUgE3h7UPhZSTmQmn9uZlmsBYqx4/qRn+3hxho/OQxv1zfdiaTOO0UI6vvDT4pWAxVoNI5T66nNCQsUJB54RNZTgDKuHpXMgHdhc2+xsSA8TpS+iIm5i58/weYJvmSEe0GZimhc8lWYBMjOr79DlqAcyC3edkiq+6LqGG2YG/KEFJqNVPR692q0AYvUoVhPefbves80j/yxHIPhoYSXEGruTfCb/WDd/QHCvg/r74G01tc2Sb/opXT1gB8EjDzlIK4HYHJGPJLvhelFuPH3zdPl0qnV4GYXJ/8vkH2sZB/YTq+0dzilZBkHGHvjU1nbwNo3auyo9YSSUgIIIUIyzOANTzynfRErShbbS+1IYGtGOJqnBVVg5ItQfpF3XVeaslYvGjdS8+bYQeNsUOeUTdQmI0As68nYLpp6C53wLwHyJtmzikTp+EgjQjC6+EjP/x+LeSIMG1UHKq6UiyJnjHXND6XRx7oZSMTpZGA=","authorEmailMD5":"961ac36915b8a21e7cba9d2c54b5d1d9","message":"Thanks for a great blog posting, and just as interesting today as in 2009.\r\n\r\nI think the first group of failures (A raising, B simultaneously unsubscribing and releasing resources, but the delegate in B is called anyway) represents more a race condition within B than an event-specific problem. One piece of code in B is releasing a resource, while a different piece of B is using that resource and the two parts of B are not communicating with each other on that. I'm not sure that it is A's responsibility to coordinate this for B. Eric Lippert commented on this in his posting, [https://blogs.msdn.microsof...](https://blogs.msdn.microsoft.com/ericlippert/2009/04/29/events-and-races \"https://blogs.msdn.microsoft.com/ericlippert/2009/04/29/events-and-races\")\r\n\r\nSee also [https://codeblog.jonskeet.u...](https://codeblog.jonskeet.uk/2015/01/30/clean-event-handlers-invocation-with-c-6/ \"https://codeblog.jonskeet.uk/2015/01/30/clean-event-handlers-invocation-with-c-6/\")","postId":"2009_06_threadsafe-events-adea283f-9468-3dfc-9ce5-4aa316624958","replyTo":"","date":"2017-10-09T16:11:23Z","timestamp":1507565483,"authorUserId":"disqus:disqus_yaGF2uMnNq"}