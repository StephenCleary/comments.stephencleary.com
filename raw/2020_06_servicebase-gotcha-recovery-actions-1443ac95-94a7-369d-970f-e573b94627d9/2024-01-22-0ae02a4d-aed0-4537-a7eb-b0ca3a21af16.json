{"_id":"0ae02a4d-aed0-4537-a7eb-b0ca3a21af16","postId":"2020_06_servicebase-gotcha-recovery-actions-1443ac95-94a7-369d-970f-e573b94627d9","postUri":"https://blog.stephencleary.com/2020/06/servicebase-gotcha-recovery-actions.html","replyTo":"9d555700-283b-11ec-b469-69080dc81c3f","authorEmailEncrypted":"VrVYLiwXefb0qH0uNEv\u002BfAbta6UQiSlkQd5xBdfNi4plsjFmgFVy6ogFubTanhQu6UePhVG\u002BCukRZbjdHp55AdGVvpEGLR\u002BdEMDQYlhnusBp2W2isJRMVRrzux4zZU7o90n1m5HBNxMnBNZO2q02mAoQcR7MsInjFUNniVpZiSmwiq\u002BrBI/GEljkhPyMyHcQfCvLYaGhm9CVUKugu\u002B7z1fF57mwrnWYhvXBiKNeCpVVCVrj81f4fSbE3YLcPM35UP98VGqP7Of/RVpmpuy2WP2pp2cN4AqdFwK3yKPRWBDUWjLycCvWAHy/5T6zIOFe/B1bkw/wih/cqh8n06eHyO92GlspxYaiqlnIZB1XVVBXAp28QfGia0xTnlWeCgUR2a8xOr6giaj1ZwtA/UXFhqtIhbBXWQUrzLNzXz0DGWQp2FwEuzRDTHHW/hlLnOsmqg8dp\u002BwzIFRYNnKf9hvKb8SyfKYEDgcZMMqX9g6yDrO/zjAJj5Gp6h1VfiGD5B8OoBL2pa9TvSRO35q5lwHWNtPjBuEYN7n3L6XGxdoG80O2kYNBScHk8WxQtJmsyEZ2wCugQaz82ZzyMUTYnR7fa2jSC\u002Bth2SDHi2xPP1Vv3lq3zLIw0BeFNZqqayZOuOx5Vg41kFwD3f8hlM6/OHzTPSksXc49a3H2H\u002B1b9ye7KQrQ=","authorEmailMD5":"45f1254ec5e81d5a52d6a0485e01ad8a","authorName":"David Hopkins","authorUri":"","message":"I\u0027m seeing the same symptoms in 2023 with .NET 8, \u0060Microsoft.Extensions.Hosting 8.0.0\u0060 and \u0060Microsoft.Extensions.Hosting.WindowsServices 8.0.0\u0060.\n\nLooking at the implementation of \u0060IHostBuilder.AddWindowsService()\u0060 in a little more detail, I see that it *conditionally* changes the \u0060IHostLifetime\u0060 from \u0060ConsoleLifetime\u0060 to \u0060WindowsServiceLifetime\u0060 if and only if the application is actually running on Windows and its parent process name is \u0060services\u0060. This is what allows the service to run as a conventional console app under the debugger, but with SCM-compatible lifetime management when installed as a Windows service.\n\nCalling \u0060services.AddSingleton\u003CIHostLifetime, MyWindowsServiceLifetime\u003E()\u0060 overrides that conditional check and makes the application try to run using Windows service lifetime rather than console lifetime, even when launched by the debugger. That\u0027s what triggers the exceptions described by Corey and Nick.\n\nI think you can get the desired results by calling \u0060.AddWindowsService()\u0060 as previously described, and then running this code:\n\n\u0060\u0060\u0060\nif (WindowsServiceHelpers.IsWindowsService())\n{\n\tservices.AddSingleton\u003CIHostLifetime, MyWindowsServiceLifetime\u003E();\n}\n\u0060\u0060\u0060","date":"2024-01-22T08:55:24.1308788Z"}