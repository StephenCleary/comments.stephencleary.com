{"_id":"4c63d10a-0f03-3c26-ae0e-f1198f3650a5","authorName":"Nathan Phillip Brink","authorEmailEncrypted":"iTgTHPIEMcXYgfpwCsNxw4F8OCxauqpKeS9kt7KNbxzWwl89jIWT6DKlrXCAN7YKz8WoTkuBbeXF5gIy9RE40+AkncfOOU31TvYPmamu5vNbY+RZFbyOe6Yr+bln+/mLtUptZNoNILCIn0m6HOBA+ggMq0o1ptaGTM1Bz7P036qgevbH6kXcPRYKBoczDwQvT5w1ZRNxRFy/7CJK9KXNP4/El435dHHB5XBXB51S7YRcUvDTDYsygp+v2ufL5Pkvmo+mDwDtFHCdJ+NMcS5aA3yGT8NIrirgGiqS9pvbUQw42KgKXC9/VVzGpdxDGwVoxO9/1ndMXSuMVR26zS+8W+um1emBtL0bQUiYbfwGbz560q9LQlz7LGxnVLGea/P4VV/kPbN69s8bzcvsiwyfnBnAbHZiDn9RDUfYagZHqzAEu7z/jH1lN1kL5dty9ZE1hRm+N/EJVHVnOWytDSGYXAnI81U/bKw1i5foRFHCmmpFlt+0ZQM0WVq3T8P1i69M3Bo+1W4Byo9FTbFGEjnh9U78t9Z2R92aiTuN48u3K+dHmRWqPniZI979b2v+2iLvfcHMst5RLUvZK0GLhOzVRay8nqftFf+Ix8mwaHIfSQKj/vrzNhnxJoQKPGFym7p647RiaclHxPDsPe+wNUCHqmF4p5PPxjTrlCL9Uchyc7I=","authorEmailMD5":"a8defe14b1c80bc2bd59a1fab3848cfb","message":"I agree. Scope-safety is one of the nicest things that `using` and even `async`/`await` gives you. You can `await` something inside of a `using` block and not trigger the scope cleanup—something I’d consider very ugly to do if directly calling `ContinueWith`.\r\n\r\nI think your pattern should be added to the Stephen Cleary’s cookbook. It is even useful outside of just the problem of asynchronous cleanup because it is, uh, easier to fall into the pit of success when the developer doesn’t even have to write `using` where scoping is critical. Also, lambdas enable this pattern to be fairly easy to use:\r\n\r\n await CleanupCriticalFactory.UseAsync(  \r\n async thing =>  \r\n {  \r\n await thing.DoSomething();  \r\n });","postId":"2013_03_async-oop-6-disposal-bff8d970-98c1-3b7c-ab0a-504ab2504786","replyTo":"ee3e0914-d37f-39fb-9ac3-abc6eea495cc","date":"2016-06-29T19:11:13Z","timestamp":1467227473,"authorUserId":"disqus:ohnobinki"}