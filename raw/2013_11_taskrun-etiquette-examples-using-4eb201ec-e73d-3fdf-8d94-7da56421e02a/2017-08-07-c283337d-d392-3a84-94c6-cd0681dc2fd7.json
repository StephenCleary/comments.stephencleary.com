{"_id":"c283337d-d392-3a84-94c6-cd0681dc2fd7","authorName":"Stephen Cleary","authorEmailEncrypted":"X5XyClBXlzxWhEaOrOZyDWeVB+aFiPDRBT6wMX5fuT3d6wGfriZ7hueh9YjmXEVf0w4zRe/JLqmyTR2tL2BThmehmCBsCXljcKM5wHnTn9cXq/cXLVWlZ2jC94TEyFwniMmFSMQo3GO421R+9ctU3O4n6M3QAuz+9DNRV3dWdkq0xIz6h+qC9Wu2cgEb0Dn2VebUSmUbBLmicBd2uq4JCeX90CLQEpD44+OGio5/zvo6LaY8raxFsk8u1p2fMDXyGGUC7cDRDvSe6irAY1w/Yd0REpru54lg0qHdzqevj13hjEosfMOyiYU4HxDF+bqrdXZOOCLWmbK0ZG+x5hxMIhI05Qq/t/unf265gPD+LaJ6hnzCX+TibBDwJKgDA0d9+EjXEtQ43XbzBqeRBYCegks+13KHutdlvGoShD2PkPUMsFdglM051wFSRqsjc+GhY9lDLc/9j+oW111oiidBrv9Nrp9+FhzTlhVAwueIjZWl+iE/WQ+pHhaDJF/lZFb4yQRl4WKww7p6J0nlRR5bHRyeP8cqRsv2It8Eb6yLwbdvJyeQpK5R3VJiQv0ZW1COEDOx7XDRk8dHM44Wrbvy+IzTqwSkgZC7yQTC8FVZ32CHYEbRZd6lFGBzI0vWo/NRLYoYN/QO2BHIY7D5P4ed4zDcgm8AbbGEgzGq7iirZ2M=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://stephencleary.com/","authorUserId":"disqus:stephen_cleary","authorFallbackAvatar":"https://disqus.com/api/users/avatars/stephen_cleary.jpg","message":"Hi Aria,\r\n\r\nTask.Run executes code on a thread pool thread but *outside* the request context. This is why it's not deadlocking when Result is called. This is essentially the Thread Pool Hack that I describe here: [https://msdn.microsoft.com/en-us/magazine/mt238404.aspx](https://msdn.microsoft.com/en-us/magazine/mt238404.aspx)\r\n\r\nHowever, you shouldn't use Task.Run on ASP.NET. If this is just temporary while making your service asynchronous, then that would be fine, but this shouldn't be a permanent solution.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"1a82fd02-06bc-3e30-9bd3-828d06325f82","date":"2017-08-07T19:36:35Z","timestamp":1502134595}