{"_id":"8149f6d0-1207-11e9-a15f-f5dc9e0c5ef2","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","postUri":"https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-using.html","replyTo":"","authorEmailEncrypted":"c1CkLgDu/hYoORwS/42UYLFQmG9bRsuVguKInolEjkR0FK3r6XNXG6vbJLk/rWr1dnnMGMS6DKEJYPwyfnXTP3wa/4CdSO7hwp/QtnPDXJF5I05ol2ly5GuEZMIsndH2ZS7NsdRkpRf72t9dAVG3D92qfWibiLKPc7bd1hcY4jll0JyHiIoqpp7Bt9BZNZGG9fjPFpHDtsaFGj+mtQOg5eOTle5ybwYxnu0VRjx3fHGPdpZVJ+eIXn03UtKPaHGv5tpxj6DenOxn0hkcN7mlU2NfvZUGWzJEUB9q+2GwSScVLgmQ43g4QxrEf5lBtDou97UlF2KhJGuqV/c49a1izcQjnWh+hK3ysu0X/MZNXQT67Cg8RySx01gmPyDkCBQfxkwabM+SBY+QaN3352GZKcqkSwKZbichd5Re7ljWA6qHyOWrhIqe4cfC8PQw/0Wg3rX74ZVAMznJZUrcS3Uznz6sywXg+Jjm1r2sRaPDDaDwdPOy7gy3jUgTtxUSI54BTPIlbtk5WYBTxnNpJ6d1AekWYXqpgo1BOt190NLRbTMeals9Xkv9Go9AewcyCQLADy1Mp3kukGm6MWWYoz60OISniLw8ZcsLgOgvi+Q8hieBfp30EfgPEow/v4ugx9kxgDLlL9gjf4+qN95Hlr9Rev6s2/i2gDWWfXoIrGwheUw=","authorEmailMD5":"dc10fac0c663c22ac53fb29bcf9bee72","authorName":"Joe O'Leary","authorUri":"","message":"I realize this is years old.  But I'm encountering a situation somewhat like the ones for which you've advised others here but mine has a twice I'm not sure about the best course of action: \r\n\r\nMy managed WPF C# app makes uses of a managed C++/CLI layer that in turn wraps an unmanaged C++ layer.   That's nothing different from the others.  But in my case, I control all the code, right down to the unmanaged C++  I can rewrite it to my heart's content.   \r\n\r\nSo think of me as that 3rd party vendor you mention.  The one who has a synchronous 3rd party library but who is willing to do the work to make it asynchronous.     What should be my strategy to accomplish that.  I'm plenty familiar with unmanaged multithreading and somewhat familiar with Task and async/await.\r\n\r\nIt seems I need to make the C++/CLI layer have functions that return Task<T>, yes?\r\n\r\nBecause I've been trying to figure out how to create and return tasks from C++/CLI and it is not easy.  I can't seem to call any version of Task::Run or TaskFactory::StartNew that gives me what I need.  I've done tons of C++/CLI and I've used plenty of generics there but I can't make the Task<> stuff even compile\r\n\r\nI guess I don't strictly *have* to do this.  Right now I've got all my async code/task creation in C# view models.    I could leave it there.  But it would be nicer if my C# code could just use await.  And it might be nice to expose my C++/CLI functions to others with the asynchronous overloads.\r\n\r\nHave you ever done this?  Do you know anyone who has or how they did it?\r\n\r\nAny advice would be appreciated.","date":"2019-01-06T23:05:05.973Z"}