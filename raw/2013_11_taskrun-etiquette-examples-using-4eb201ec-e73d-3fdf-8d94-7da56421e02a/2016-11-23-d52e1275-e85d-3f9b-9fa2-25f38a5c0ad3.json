{"_id":"d52e1275-e85d-3f9b-9fa2-25f38a5c0ad3","authorName":"Mike Waldron","authorEmailEncrypted":"q5LW2GruHyGFOFsJHC/yR/jhvfUbseTyQ4AT5MPY7x0GEDgmUp9ptnNq/vj+OUrQHS5nFwnOw+j6ppjbHO51yLwiEYzxIhYCTtwW6fyoR0VSqkbeeu8bMsR04E16qjF6eQ6X7PRUqEj8fUufaOL3D1e0WuPRjJcgLpMy5uznIerSOR4vkY0ZK3Ml/woY1/dscX1nJ1Wbfn2au3ToF00H1JU9v09QTFD/05nerxZtZS8oXnMUKnBLbqssSYbTJh108Jotxt3e+wic4iTo7bR3vq9W03nyU4IyoHVN5y/numH1NWW3QSg3e7TBdpA/gzB6Ls1YJjqp3l594ucJcqEF+5QHmVa0XbhIkxykEBD5at8W0L5FB+GnQHBqSW/zBeInu4amLSrnUxqFjpkjnuKLeHDld+QA3BY3JTwzFD5e509aRwGXYNsht2amNb5Z88wmycjEPHXAz+XKkr68+MWhm5MuRe/MQfOcUd1xTc6uzpADNyoB0XIjRJp8wKhANbf0cdd9eQmRYlokkduyCXaiFhWgqiTFrRPxtqIUB61vwYy/DWzABvaIU8FON/a4K6GjsDay2fhpUPI6CKFhngXcASMxQIPTltvPifUol/K/XRvd3yQnTd8kq44uMfoPl4x1zfXokSnAcqzNkRQoshfp/evmGcIrPJCOmxXboeE2FF0=","authorEmailMD5":"568ebec42b1b05a894243580ba4fa18d","message":"I'm a very literal fellow, so when I read \"CPU-bound methods\" I assume that means something like \"We're going to multiply these gigantic matrixes the CPU happens to have entirely cached.\" I never need concurrency for that sort of thing - I'm always waiting on a web request to complete. Where you write \"Itâ€™s still executing blocking work, blocking a thread pool thread...\" that doesn't sound too bad to me, as long as the UI thread isn't blocked. But what I think I hear you saying is that the blocked thread is sitting idle on a core, rendering that core unusable to other threads in the meantime. Do I have that right?\r\n\r\nIf Task.Run is not suitable for freeing the UI thread from waiting on synchronous web requests, is BackgroundWorker a better tool, or does it amount to the same thing with less syntactic sugar? It seems 85% of the web server calls I need to make are synchronous-only (no async calls available). One way or another I need to make these synchronous calls without blocking the UI thread.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"","date":"2016-11-23T06:15:54Z","timestamp":1479881754,"authorUserId":"disqus:mike_waldron"}