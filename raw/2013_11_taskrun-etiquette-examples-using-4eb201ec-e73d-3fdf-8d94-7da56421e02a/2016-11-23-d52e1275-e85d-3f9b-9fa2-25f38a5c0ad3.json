{"_id":"d52e1275-e85d-3f9b-9fa2-25f38a5c0ad3","authorName":"Mike Waldron","authorEmailEncrypted":"ukBXWLpEJILtJ4QFQZb9vM/bLUFb8dMJOvfXCfgelXfkeO9+LX34GTCt9ie5zoKojh6RXxMFHvsE2YZsSLvTef140cB5xa0mi4VtpLmtHKnHCuxxME/DLXbYDf23ncvbmekvypMKln4CjHlA2h2Wgwgl/H8W41Ib2VD59PNQVg8f5SksT+z2BrC2ozkCWUfVkT+00+o75+AzgymtRPUTIQ8+m+e/w+iA/tlbhVorF88+B+Oku6RqlIoo6O8PYzgRYZPJrSRGeFL0zZxZ3ym4jydq9t6xsxHRYYWYwipzqN7WN5piTaaZ//d38fvUg/wV+GpCXwRcSL4W6nf+6Bns7NaQUnY3I4kZjh/JBFtcseodB4evjNR6HtcspjlWVJ8NBwvXC6psMqH5VTPpVEcl/7y+uhqVfvBLHVvPBVNh4q5fkuGzGwY4/K2q4L1hzxA9TDn5iami6kx+w27+L1WRKi6SSVyxQK8oZXNcoWdM46SXfya/gw2u14N5MRtyV1TyjbL46tyc7IpUy2v2X19GKCU3xtyYyeJAs+OCTIf7RJCm6uSPTURYX879O1/lNLnChHIpHfZL1A9J4eXFlvg8gqq9u4CIjKmC7CzPHaAI7gs7g+QoWSzCK2iVhI+RX3mRwBcGiNR014ceDhp7ckEwS+EcJIvW3pKCqzIpvMeqNYU=","authorEmailMD5":"568ebec42b1b05a894243580ba4fa18d","message":"I'm a very literal fellow, so when I read \"CPU-bound methods\" I assume that means something like \"We're going to multiply these gigantic matrixes the CPU happens to have entirely cached.\" I never need concurrency for that sort of thing - I'm always waiting on a web request to complete. Where you write \"Itâ€™s still executing blocking work, blocking a thread pool thread...\" that doesn't sound too bad to me, as long as the UI thread isn't blocked. But what I think I hear you saying is that the blocked thread is sitting idle on a core, rendering that core unusable to other threads in the meantime. Do I have that right?\r\n\r\nIf Task.Run is not suitable for freeing the UI thread from waiting on synchronous web requests, is BackgroundWorker a better tool, or does it amount to the same thing with less syntactic sugar? It seems 85% of the web server calls I need to make are synchronous-only (no async calls available). One way or another I need to make these synchronous calls without blocking the UI thread.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"","date":"2016-11-23T06:15:54Z","timestamp":1479881754,"authorUserId":"disqus:mike_waldron"}