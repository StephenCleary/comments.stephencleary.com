{"_id":"d52e1275-e85d-3f9b-9fa2-25f38a5c0ad3","authorName":"Mike Waldron","authorEmailEncrypted":"wpQbZkvtsseLwes7P+t8FBL1vTOx5F4j6PfYfnZGYE/TxmNruzJ8L3WUrJIBARthjUiJyMgjoVeW4IxcSoQOJhCzHy75ctrRgxUMLNrswKwSQQvHKoiitlM9xDFQiGSiFHzOyAt+BLNU+8UMMpck5V8dq4B3Z7dkrdU3qciW5UYQzhYb1uDrJRcmc9zbCFoSPXr46/LwTpZtjKSd4AxbiDNnUEp/GSXlZEsUkZSCBCs7GH50NgO0/wvkJBQoJ3BsO5TWemnmOASoMpzAlk0yMHsrigBb6BuKeFwsdfeZVFwwQnglyZou7gQzdLv0+MKOE9xvkSFopkHhvtaQG6S9OZQrt+HnI0ZOmxdAJXrRut4VYPTmDv1AEMYv8gLt4RaEucja49tv9nShfm53dntOiWaT1uRJ5k3tsfdnIE7vuetoaxBUjW5Zn052Zo9iKd0XMGKSA72EFpbPnj61Rh23M2hT4Zh9M9lsbQRrlAPntneFT9AIRGh7ds3b2iXuDHMtKbVyCaqhHjju/TfBdYU1kOzX6r+urY7AINk2dGn+JxhVxbEikNxwO4RRcw/1ANOK+TdY2neVWfx3OT4TCKTDgPX9wu4cP6YxmvWAmzziyPljInQwu5OxePh6UG9RvjnfYEvY1qyN6Cpy+UqiyP1aBg97uznxtGC+TvQN1XRoAQ0=","authorEmailMD5":"568ebec42b1b05a894243580ba4fa18d","message":"I'm a very literal fellow, so when I read \"CPU-bound methods\" I assume that means something like \"We're going to multiply these gigantic matrixes the CPU happens to have entirely cached.\" I never need concurrency for that sort of thing - I'm always waiting on a web request to complete. Where you write \"Itâ€™s still executing blocking work, blocking a thread pool thread...\" that doesn't sound too bad to me, as long as the UI thread isn't blocked. But what I think I hear you saying is that the blocked thread is sitting idle on a core, rendering that core unusable to other threads in the meantime. Do I have that right?\r\n\r\nIf Task.Run is not suitable for freeing the UI thread from waiting on synchronous web requests, is BackgroundWorker a better tool, or does it amount to the same thing with less syntactic sugar? It seems 85% of the web server calls I need to make are synchronous-only (no async calls available). One way or another I need to make these synchronous calls without blocking the UI thread.","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"","date":"2016-11-23T06:15:54Z","timestamp":1479881754,"authorUserId":"disqus:mike_waldron"}