{"_id":"d30b69d9-ffd6-37e5-9a57-df12742717a3","authorName":"John Baker","authorEmailEncrypted":"HXn4PQTwWXuQPLA6o70MHTyoNhStEieaT+8+oEcpJs41CBXkOYNMr8u5B56tHXJugHk+fRIDy7U/7s6gq4D4BFjXQZyuehQH/iVC9bzZ5GANj7vMXgggDfcMlewJovXNrjUf8d0WAnWzymL/OQcVCleJB7EC514TZL9C+DAf1OL50oVxYmV5A9c3REwfS3JezEKzHBojN99bgg9vfqm/6jJKQlJG7iMAZmBcYQCKxrX0eBgD9qsKb/1DR9h4mMrvDzhZNgZMJI5xi7/Glek2wNA8bsVzNarrEsfpC6uSrFGPE8PgNVsNy+KmbKAOQ9B1cmF8QFf4c8AR5UQs8gM9uy8g70dlk1hOyrnGw9Cvk6tzrzanvwa/OaNQBdN1ssc9GFgZTiVNaLBWcZH4fKljE5QFQ3pLQMmQgkLBSLphDQzFWIRixVN4Rb/FKGUtnhuFNy0IDyPt2DG86sfs/3NJc9jV0qZwu2XACidtfSGvS+9lgM7iM+NuIhMj4h9E74eZyXP8GefLW3uRRgWuYbKWU5Ks8VnBiGOMQw2InELOZFAPVP9IYlZcvyBtksQ1f5LYA6u8dfHJx82Zmieloo67bRuvfloSJU5LE7ovJBYkOz8Ev7vbLpxOnT58kfMQ3zESbJ8LDYJnc0ml0MbQEghNbpSD/CZcZ0Yppxcvny07nAw=","authorEmailMD5":"275e0507a59612361def8c693c4eac9d","message":"Thanks for the distinctions Stephen, and I wondered if you could reflect on how to implement some local long-running services (both CPU and IO bound) - implemented in a WPF MVVM Light Ioc service. Since the Ioc service signature must return void, I was thinking that having the service synchronously returning a Task that the client VM could run to suit its own needs using await, this would be a good way of getting progress updates and intermediate results, and being able to do cancellation (because the task object is available in the VM) - while having UI responsiveness.\r\n\r\nNow the service implementation can be done via a Task.Run, but unless that's done properly in the service, it's not always possible to do the non-blocking implementation all the way down (sometimes 3rd party dlls get in the way, or simple laziness!). Any suggestions on how this could be achieved with MVVM Light Ioc, while respecting the thread pool?","postId":"2013_11_taskrun-etiquette-examples-using-4eb201ec-e73d-3fdf-8d94-7da56421e02a","replyTo":"","date":"2016-02-14T19:58:27Z","timestamp":1455479907,"authorUserId":""}