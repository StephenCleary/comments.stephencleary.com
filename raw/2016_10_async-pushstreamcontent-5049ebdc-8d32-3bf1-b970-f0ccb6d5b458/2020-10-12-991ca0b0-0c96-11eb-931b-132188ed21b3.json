{"_id":"991ca0b0-0c96-11eb-931b-132188ed21b3","postId":"2016_10_async-pushstreamcontent-5049ebdc-8d32-3bf1-b970-f0ccb6d5b458","postUri":"https://blog.stephencleary.com/2016/10/async-pushstreamcontent.html","replyTo":"","authorEmailEncrypted":"akmurKcKDZJuUBnr4QMl80V9rWC7iNo4U9IDAR5+QJDPZqhLbPHGq8VTdndyYqpLBo1bph9nADHh9i+eoNktVNhoefLp72XtNOP30Ig8FocXDx2zYL5acBwhgvySjc2UEcCyKgvyxwjU8dCWzOyMYIZpw4ORqsw06zbx5t4cd9hhi9PWsOjgDEXnuKotwpM2XLHlJ7i6v4Tk4srLyeSqnyd4w6exYqzrNN+001ue+y34mE07rgSew0Mh4RWW7/fQ/LWBCEXOt3ywvdKoOU1kFYxTIFQEq7R6+JSTJaSY7DyfYPoEvZB0tr9ZYw3O3gIoBaTo9ZALtltBw98B41zfqLumDPhu3m3ItPIOkYtKJHYevqNlw4bx9/oM8TqWONOveDEkoPevwSRF5SyYdqVHvUnZx0LSKidKI7OTSEslU8Uet+c9pniyPz1mXFYa7+Te61S6+aHNhH8namhvj6aMDu+iVoFI7gEpPbRaRVMOrxqvKwxg7Lduf6oMbWbG5PxrSNil/grErBXNgWv8n97mm83CfQR6YHEN3k/jjjlKaqssNlrCfNRT52vnUJR3QsE7m08jx1wHWrW8MYaoMwRYUwuU/WUuLjKLHK1cTvkmdfxQe9TikxH1VwsMa8iXU/ickvRbFFBk4olClHv2JcDhn0mJ/gL3RFkimOHwKypewwk=","authorEmailMD5":"959334c98d5cb411f3363bb71aa83d99","authorName":"Alex","authorUri":"","message":"So what about the chunking in play with the Pushstreamcontent - for example, when I write some data to the Pushstreamcontent - from what I can tell it doesn't necessarily all get sent at once, instead it get's chunked - presumably according to some policy (that I can/cannot control?)\r\n\r\nserver side (let's say that I want to send a frame of raw video in a live stream):\r\n    \r\n    await outputStream.WriteAsync(currentFrame, 0, currentFrame.Length);\r\n\r\na consumer/client:\r\n\r\n    byte[] buffer = new byte[stream.CanSeek ? stream.Length : 14336];\r\n    int bytesRead;\r\n    while ((bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length).ConfigureAwait(false)) > 0)\r\n    {\r\n       //do stuff\r\n    }\r\n\r\nyou might expect that after the first \"ReadAsync\" that we would read the full frame data (as long as it's smaller than the buffer size of 14336) but that's not what happens - instead we read in what seems to be an arbitrary amount of bytes - and it takes about 3 or 4 iterations before we've got the whole frame (this scenario would matter if we were streaming frames constantly - we need delimiters between them - delimiters that you would think you get by calling WriteAsync each time ).\r\n\r\nSo what if we used flush in this case to try and override any PushStream flush behavior- well same thing - it still doesn't appear to send the whole lot in one go (and we're not talking about mountains of data - it's about 10KB for a key frame of video or less for a transition frame). \r\n\r\n    await outputStream.WriteAsync(currentFrame, 0, currentFrame.Length);\r\n    await outputStream.FlushAsync();\r\n\r\nIt occurred to me that the media content header may have a role to play in the chunking - but I tried a couple of MIME types without much luck - application/octet-stream or application/stream+json did not convince it to behave differently. \r\n\r\nany thoughts?","date":"2020-10-12T14:24:12.210Z"}