{"_id":"676958df-1f31-3c5c-90d4-01b52ef21619","authorName":"Dimitar Ginev","authorEmailEncrypted":"hmLPPPDjWR1g9JZGHg12hMLPAT0ZsAsRD/xtST09FEruLDq1vSN6yGeCIAy2nnuY9TfHLyFURqTqfpPdHxDOOfL8Ka8gSa1NqxtYpi64JXhZ4ZqPOJh7lKjyUNIJzazZFd2gzKaYneRtc4rr1WFeYoCuPJGnu+e7gvuvdbqvToYVcF13j496vAbQ/i3Qvg+EYVbDZsIqHE7bswhelF/WruGkb6nB2DW5+h0Vl/oEBGFitfKUI3/qfM3Gdl5HZebN/OubKv9naTtMaETlxSUvt8zU+WATGe0hrAmSFYxQy897M1PJTtBXbYY/EuP+yi3/eqa31scTZDVGQb+92PqZDVOVpC4ArzQb+i6AYnxtbRq0FtAKmxpg6ngViHC/YyDBAqzB4H+tZvR9V0fGGOl58ktRXhJNPF8fPki79SHcRUCphHWO9M734TtXdf4DF1rXnjtSNOkWdJpY0eSjYsK/XsLgcK+1oubHyPbu1U9+Tm1ygNGYBzqoCwPoasDaj+N7OM1dOyvXibbHstx5bPGgxdE2JV38YcIQx02N/AwSTJGVPYuix3C9mo5scxOalIKuSZLj7G85JQ8xS4ZdbpbRP5enePyG3vXZSpzfJnDJeiWj0oePhVB4xdphDuwl3R3Msh72TRH4xuNjgk0qz9BDuzh+X7MGURp98QJdQ19ibV8=","authorEmailMD5":"886756f0c06f96fa34273ab469fbb99d","message":"Thanks Stephen. I was not expecting such a fast response :). I will use the opportunity to fire another question: So my flow goes something like this :  \r\npublic class SomeController{  \r\n__public IHttpAction SomeAction{  \r\n_____business_service.DoWork()   \r\n__}  \r\n}  \r\nclass Busness_Service{  \r\n__public DoWork(){  \r\n____var result = third_Party_Library_Wrapper.CallTheThirdParty()  \r\n____useTheResult.........  \r\n__}  \r\n}\r\n\r\nclass Third_Party_Library_Wrapper(){  \r\n__public string CallTheThirdParty(){  \r\n____var result = third_party_library.SomeSynchronousMethod()  \r\n____return result  \r\n__}  \r\n}\r\n\r\nSo the question is which method gets to become the async method. From what I read in this series of blogs we should use Task.Run to CALL the synchronous methods, which means that busnessSrevice.DoWork() in the controller should become Task.Run(()=>busnessService.DoWork()). Am I getting it right? ","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"c06ce764-5223-39af-945b-4043aa302ce9","date":"2016-02-03T21:42:29Z","timestamp":1454535749,"authorUserId":"disqus:dimitarginev"}