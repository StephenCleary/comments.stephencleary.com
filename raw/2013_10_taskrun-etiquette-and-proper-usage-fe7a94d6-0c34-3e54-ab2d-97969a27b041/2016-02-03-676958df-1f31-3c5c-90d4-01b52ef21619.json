{"_id":"676958df-1f31-3c5c-90d4-01b52ef21619","authorName":"Dimitar Ginev","authorEmailEncrypted":"ngUhqyioJY8DqYxsD1koux5fzDBj/hg3QdJTTWPG25GvR3rwKdo7EhXrQkIXOkLaDMtGP749G3wQuyoIE1cc/wmD+EQwBkA2RYIJg0zCeKycKU4C/aGX/5J3Xt2QtzOGFBmqHkQE852XM5oDzUKWDeskr2xquLyS0dWh2wtwkV4Ma1ddv05rzlYiprxThQU2xztwq+U5QNxNHFdk5xdmqcDKfm9wLlr3x1bK+FBrrunuONEs+Nkj7hZkrTQiAKmn8l57YILGHRP18T9kg6Rf3OIKxgVB9tKuZZJYxJUsnm5KDb+xSH7wlsOoVuBSigWlf6q9bLzxkWkbKn/F3gY++Iop9+yPjMHCJciu2KZC4nP3vmmuyDt21If78tzM6AcjePlDJG9o3CEps7IJirhpfv+Eez6YcIeRedneazFxVaZA83GCb1XuRCAnug6fn9CBWykerzY2Fq78e6HvmAYgYl7K2/WWTi4RhU9Rk2ZmsTikUZEMoyolSJ5aFBONfJ629Tv3BwCehtJroPZ5ueQZ1DY/bGE0PHTEG4h/CabYCR3cwHCsQMcOK0Q+V+nxnH5+qJlS1jWTyVXStRR+9Ez92dX1EHtvMKF/z4mvA7NmYAcTeqpccCh/ArA2V8Sm0hC0AqXRby2Vy55DYTL78wlxLncJ9jeuctzJD4PJyqYLa3A=","authorEmailMD5":"886756f0c06f96fa34273ab469fbb99d","message":"Thanks Stephen. I was not expecting such a fast response :). I will use the opportunity to fire another question: So my flow goes something like this :  \r\npublic class SomeController{  \r\n__public IHttpAction SomeAction{  \r\n_____business_service.DoWork()   \r\n__}  \r\n}  \r\nclass Busness_Service{  \r\n__public DoWork(){  \r\n____var result = third_Party_Library_Wrapper.CallTheThirdParty()  \r\n____useTheResult.........  \r\n__}  \r\n}\r\n\r\nclass Third_Party_Library_Wrapper(){  \r\n__public string CallTheThirdParty(){  \r\n____var result = third_party_library.SomeSynchronousMethod()  \r\n____return result  \r\n__}  \r\n}\r\n\r\nSo the question is which method gets to become the async method. From what I read in this series of blogs we should use Task.Run to CALL the synchronous methods, which means that busnessSrevice.DoWork() in the controller should become Task.Run(()=>busnessService.DoWork()). Am I getting it right? ","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"c06ce764-5223-39af-945b-4043aa302ce9","date":"2016-02-03T21:42:29Z","timestamp":1454535749,"authorUserId":"disqus:dimitarginev"}