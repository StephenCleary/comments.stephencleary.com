{"_id":"ed6d9227-a8bc-3a49-878a-7729bafab159","authorName":"Jerry","authorEmailEncrypted":"d8TFEl7L0Kv+1WpJMpZm++DP42eI2z5PBNDNw4EEHZno0DyuIlFbvPWMx60ncX42HongahBdZbq2a/2CEEaeVQ9VUug9X5aNTskLVHX+njvZpigvfSMoMzDu/SmhspwXCMT7VNUTUOVPBOshaxnmMQS/lmSM2qu3Y6PltGAaK6DhH4FdP7g5Il/7n5Vi9o+s0xFaiuWx+O26n12kfjw7j1H6sYls47pDHkzm+d0C12sBczH2EbqLT6gyFsCtz/ZIKA6s8XBEZDic8ULCWHUHtCpaC8ZBIWdq++J8Q1GDoDwCYHnTYFPwtBDtFmDOPxS92AxajeCTUjAncImzT75D6nwTdsfCSbcyr1cYpLGda1wQS7zrP+j8v3iU1JEs7WX7BlegVTINYOJjg0RNZxj0S+j631W+G8sdbn68n2nQhEtPjiR9RN3Z0ViDCZXhnLZhf0DK5300nfOhoRIo5lpU0BdY8Vyda3HrXF1DhYcxW/DUXoHrlBYbrouRdce1bbRthmfjNLpAaCwcYl0bB6nvmjRpbLvXy+bE7lpttc8C49MAml0nLuC/2yU26q1sk9ZM68NyDxFZNmzjxMuf9BDxbgTom9Y4rp8YwrNtRodTW5Y6/u3nm6gzitpzrQi8YwnB5uITFTMNDq55iVnUAM3U+vJe/o315r/SiLnBFmStYlo=","authorEmailMD5":"b21557fd0b177abb61796ab0a849739f","authorUri":"","authorUserId":"disqus:disqus_HrSDtjYd3b","authorFallbackAvatar":"","message":"Thanks, Stephen. Initially, I didn't call the third party services with Javascript but in [vb.net](http://vb.net) as they were actually WCF services. It caused a \"freeze-up\" page.\r\n\r\nTo solve this issue, I ended up with creating a page method to wrap up the web service calls and using javascript ajax call to invoke my page method.\r\n\r\nFor some reason,WCF proxy doesn't have asynchronous versions.Even if the asynchronous methods were available, I still couldn't use async keyword because the web server only support .net framework 4.0.\r\n\r\nThe code inside the page method looks like this:\r\n\r\nvar data1 = GetData1(); //WCF synchronous call  \r\nvar data2 =GetData2(); //WCF synchronous call  \r\nvar data3 = GetData3(); //WCF synchronous call\r\n\r\nvar aggregation = Aggregate(data1,data2,data3);\r\n\r\nEach WCF synchronous call takes around 10 seconds so the total time adds up to 30 seconds. In order to speed it up, I tried wrapping each call into a Task.Run so that they can run in parallel, thus reducing the total time to around 10 seconds.\r\n\r\nI understand it's far from a perfect solution as each Task.Run takes a thread pool thread that may impact other web applications. But how can I achieve the parallelism?","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"c6639ea9-ef6d-3eee-81a7-b3e1c2818813","date":"2016-04-17T15:41:23Z","timestamp":1460907683}