{"_id":"cf4f0a5b-b5ea-36da-982e-331daa501af2","authorName":"Stephen Cleary","authorEmailEncrypted":"QUb8GC24qq+cFpA2fGqTJBLCBE1Jd4/XccU2ie6PzeMhMrJ2zGyAenR197fjYfPgZpCp+e20sBEtvH+lAjo42yYi7mm1Yps2O9nFrVyGSbQJ7TQotJTGzlIf4x1LUVgQWQVdF4bt5pWmtaYfQkUYuVPn/S3Ox3XM/SCwor7TAy8g4tUfjSsYoH0WpivRN8EwtuEVUQgy2v78xk2zy4zQAlqGLS2lM4x3AcLwhXeyJDKc4hDtA2qt36+nm9OJhuHTmhY3aQbMpJetqKleqCmc+OlFmwvTH9PI4AzH1LHuvqIDqPtYrtDf6FfKnpjlDokk4Jn9bZV7YZ/+JG3kpIn5OSLoIf+PKnBCGk4d6fMymEvKQ7aEoc6IFvwJVcM3T3M2aBUhtkwiAiF2t/QwULcukN7uZbmVf2qGvek7u+GlSEfxlcZhhhoqS/Ey/363PYRFtjyLUXbjtnaAqmRLohibHZ+/i0QDOFTHrPSxWr/FAdSi6hM/qeEOPGoUaAkmkwXtf0QIGu9Vsw78cbrrR5iXaTAFbnB0dSYaFYfDIdCUr1qhTw49w50UGV6qwv+EQh1/3RDswnVQmX4sv8PtQyGirQTlRdv017HZmEcb+zrHEaSC6xBr5h6zSKgNapw7w4oa2tLRCawIHB/1ggZqlHNZxy1L+80FexLQfH/t9APn+U8=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"SLaks has a good answer here: [http://stackoverflow.com/questions/19912343/async-json-net-deserialization](http://stackoverflow.com/questions/19912343/async-json-net-deserialization)  \r\n\r\nMost of the time, you're not going to be needing JSON deserialization on a background thread. Unless you're processing a *lot* of JSON.  \r\n\r\nIf you apply the guidelines in this blog post to your reusable method, you'd get:  \r\n\r\n///   \r\n/// Note: this method is partially CPU-bound.  \r\n///   \r\nasync public Task RequestServerAsync()  \r\n{  \r\n var resultString = await new NetworkManager().GetAsync(Constants.SERVER_REQUEST);  \r\n var answer = ParseCategoriesFromString(resultString); // JsonConvert.DeserializeObject(resultString);  \r\n return answer;  \r\n}  \r\n\r\nAlso see my blog post here:  \r\n [http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html](http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html)","postId":"2013_10_taskrun-etiquette-and-proper-usage-fe7a94d6-0c34-3e54-ab2d-97969a27b041","replyTo":"","date":"2013-11-11T23:29:09Z","timestamp":1384212549,"authorUserId":""}