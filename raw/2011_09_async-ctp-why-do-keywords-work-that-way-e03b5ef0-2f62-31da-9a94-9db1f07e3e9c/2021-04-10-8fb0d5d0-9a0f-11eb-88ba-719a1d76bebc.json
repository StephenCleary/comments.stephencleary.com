{"_id":"8fb0d5d0-9a0f-11eb-88ba-719a1d76bebc","postId":"2011_09_async-ctp-why-do-keywords-work-that-way-e03b5ef0-2f62-31da-9a94-9db1f07e3e9c","postUri":"https://blog.stephencleary.com/2011/09/async-ctp-why-do-keywords-work-that-way.html","replyTo":"0cd70690-9a03-11eb-8c8b-fb93bbac8fcb","authorEmailEncrypted":"KZJcOnabfREtd8//u+bPalM1MxUCaouqq9sfJSR4KBXeh1PNz7ShudBUKUqIUQAjbxBQFe80pHR1N6WVl44wS/wvTu3z3vwuJMjQCaDSGD1nGEZctWMRzEyQDLGD0RVEewS4zdY7YkzAVqE/rReV5tbJwPGrN+2I6nYTo8f3V0o51a+H6Zbx0nw9t2Gf7C+MRBlApFSf66cNxcbFUc+BhCNt7mkS7C5bM1qH0hrC4jAdIb/bDHnMyvoIeK0BIu71+EhiNs7vCf401KJjbHzO68EFNmIiKsLxJAA44ywfMtc/SicgFazwgOGpmid60/JDQ3VNjmlcCiDzJarOjeF5xdqcY5aWpgBrmA8bQqMP1BCukemOXBNrpR58dcdLAnJ7n2kx6WltAAd7w+zW91hsJh9YiSMleEbimJ4tX5E3KIG9dGuiUlEZpKc/Gd6bsRBq3N40SuBZIeD1qwuInH6kydI5ZIxm/X5mbHyzbt7lnP6djExBBgGBwnxfI6JF12NIPY/NdBLjOG8wuDXWlJQafbSAE7vfrrnqvlmAYExULT9HI2QOibm4OlGjwx5KnB+TJx7F+VbY4F4k51YtiqEZjDTcc4nkPTCGlkDV/U6AoWhAmmsuR/E61dJIwJreP1WLfjqN37xtHdRPP6kUNpBrSN+z0WRdHWMUhZ5s7Pz86XA=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Consider the case where there's a class named `await`. E.g., in this code:\r\n\r\n```\r\nclass await { }\r\nprivate Task x;\r\nTask<object> Test()\r\n{\r\n  await x;\r\n  return null;\r\n}\r\n```\r\n\r\nIs this code declaring a variable named `x` of type `await` and then returning a `null` task; or is it an asynchronous method that awaits the instance `x` and then returns a task with a `null` result?\r\n\r\nHandling the easy cases is easy. The hard part is handling the edge cases like this. With millions of .NET developers and hundreds of millions of .NET projects, there is a class named `await` somewhere out there.","date":"2021-04-10T15:15:19.305Z"}