{"_id":"0a9ce180-bb88-11e8-89fb-bde33cd2d3fe","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","postUri":"https://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html","replyTo":"508c5a20-bb85-11e8-89fb-bde33cd2d3fe","authorEmailEncrypted":"AfsoWgJYr6lWaIcMdyB6b21yY0iOt0txRp+6p7Ls3Ax/bqjXshMrGndFKjwdKF4PQe3zkaquj0UhGg+MPaYD131214fq5qg8PZ0B/3eW8QF9wDSXqdw8bIve2Jf10iDjx3QppIGuPMacAhhWF8IGDVIjTOQEGeyAQ2x6yXW1Sq7kbyQR1HsXIQhWOZSvllI+ujq4iBFMKgKfWPa0JcReB1JMCtwUmh4LgSVJ2mg7GvWgHKfKDPz9ECvsriETF/5AhWvOOIq8lnt1Ih2c7JfyAx4Qxd74o1P7Qn5dRaTnC05UH2etOKa03YQ6JOI20jQJFg7jsMf9nb7ahHXvy6WXI2KtXhBA115AVK8xStGvByRYoPi/5EYBDd6tfLPnYj/fqSLPi6X5o0iWfqcGYA+fvhmr/6Ctyh4bqNtM45CYBz9DvjGwPHi73bODzHS8EHGff41qFMDXcthYmNggo1Q3P09ScSCXg/YJczlqDC+cNmvUxaRtUjA9Hpehqy5rvuXkTXEAXp+3xzixupuUn0QJSeDv8fL5rnlkM4tN6HHR2lnRqlz05uMuNoBHLVj0yz1bwJaWjNAHlQVaUC1MBVEUS/7Ew+n8FFFJA7FwCQqBpazWATirMUpzZUHxsRpY3X8oC2+ABLBHod1AkZ/DoD/0p7HAzDyLIUQYu2W2gk+0/F4=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"That is an artifact of how VS handles exceptions. Because the `async` method is rewritten as a state machine, and because the state machine is compiler-generated code, when VS sees the exception being thrown, it assumes it's a problem. There is no *user* code catching it - it's caught by the compiler-generated code instead. VS thus breaks early as a first-chance exception.\r\n\r\nIt would be possible to fix this behavior, but that would require VS to have special knowledge of the C# compiler internals, which just isn't sustainable in the long term.","date":"2018-09-18T21:16:00.958Z"}