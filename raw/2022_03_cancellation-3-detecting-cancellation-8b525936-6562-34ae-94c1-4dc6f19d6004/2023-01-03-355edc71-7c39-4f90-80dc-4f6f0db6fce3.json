{"_id":"355edc71-7c39-4f90-80dc-4f6f0db6fce3","postId":"2022_03_cancellation-3-detecting-cancellation-8b525936-6562-34ae-94c1-4dc6f19d6004","postUri":"https://blog.stephencleary.com/2022/03/cancellation-3-detecting-cancellation.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"","authorUri":"","message":"What would be the best practice for ASP.NET Core?\n\nI want to monitor request cancellation, but the cancellation exception can be thrown for some other reason from some other place.\nComparing HttpContext.RequestAborted to the CancellationToken on the exception doesn\u0027t work - they\u0027re different, even when MY code calls ThrowIfCancellationRequested on the cancellation token injected by ASP.NET Core.\n\n\nHow can I tell the difference between an exception thrown due to request cancellation, and something else (like a call to some http client with timeout etc.)?\nCan request cancellation happen simultaneously with some other reason for cancellation, like some async call to HTTP/DB etc.?\n\n\nWhat is the best practice there?\n\nThank you so much for your blog, it is incredibly helpful.","date":"2023-01-03T11:31:08.7197318Z"}