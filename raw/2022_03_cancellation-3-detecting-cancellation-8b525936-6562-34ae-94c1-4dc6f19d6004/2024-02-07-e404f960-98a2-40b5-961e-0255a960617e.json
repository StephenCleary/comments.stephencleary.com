{"_id":"e404f960-98a2-40b5-961e-0255a960617e","postId":"2022_03_cancellation-3-detecting-cancellation-8b525936-6562-34ae-94c1-4dc6f19d6004","postUri":"https://blog.stephencleary.com/2022/03/cancellation-3-detecting-cancellation.html","replyTo":"efa918ed-efd4-4580-a7ef-ae07d4b41656","authorEmailEncrypted":"eW4Za7PpNWz9Iu2\u002BGtyiCC1QqY32qpBl6NuUeifSjoJqO5BgbtJ8dSjiYjF14FQXRfpEpV4KtSgsX1WiqNb093EgxeV5VJZ/oby4LWJLRFFJBLJnAyWhq2w/c3\u002BxfWRzzeb072cNrnOIQrqGsQg2hRd2\u002BFcRiGDh9tKXMrv2C6BaEaSeS0wzGfyPYZPfEhCYSi44496/Wdg1WoTaxKYVWpCAdc1oyL2VqD8VfDu2aj7L9GTq0KXJyzOMwc\u002BzT6b0xDOwNbx4TF4dcokh\u002BOF4UwxO499VbXRpb0ThZU9FbiCwBRjCI0ffRjzsUaDwd/xOiT2h0L2z\u002BS88GeKR/3cNdfFad//0FfoVXYj7P4W9B\u002BAZvY\u002BiYKqsQK3dtFCcOBxMl1hmOEopv\u002BdvJ3gPcpwPTZ\u002BsmySojpjXhX1ZFAOs5LnOts1yCT0QfA0sih/tO/Dvi\u002BJcw2\u002BGUQDCXBBpnKr/zPvUjzjizc96aakT1mnjYbXFxg9S5eHECkuTl3ft26Bh1aVOrMPF578ZsfDRFt8q0u4ymKG67zRt5V3\u002BUCeVKJtxkzJ2zXNWdAHxlgInJ6BYnDEoiVwPnUb75oxXw0P7a90zxecePVJaAgyGRbE/3udvZnA59jNVrRxU2U60yVT487USbUiJQnSSn5mWw8vi7JBsW9mbfJWzgL13bF95s5E=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"I can\u0027t say off the top of my head. If you\u0027re on ASP.NET *pre-Core*, then \u0060HttpClient\u0060 is built on top of some extremely old networking code. If you\u0027re on ASP.NET Core 2.1 or newer, \u0060HttpClient\u0060 uses the newer \u0060SocketsHttpHandler\u0060 which is modern networking code. The older networking code is more prone to weird edge conditions and things like parts of the stack being unavoidably synchronous.\n\nEither way, your first step is to catch the exception (I assume you\u0027re already catching \u0060OperationCanceledException\u0060) and logging the entire exception if it\u0027s not expected (i.e., your own cancellation token isn\u0027t canceled). Once you have the exception stack, then you can take a guess as to what\u0027s going on.","date":"2024-02-07T16:34:59.5912525Z"}