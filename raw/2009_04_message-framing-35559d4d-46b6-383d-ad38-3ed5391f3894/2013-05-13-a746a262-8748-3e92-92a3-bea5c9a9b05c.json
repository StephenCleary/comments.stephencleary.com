{"_id":"a746a262-8748-3e92-92a3-bea5c9a9b05c","authorName":"Stephen Cleary","authorEmailEncrypted":"bbXnSTNWVUZFumQPqSEwOsyxOsj39adk7WZ8prcmcgDuBQPWb1XtxKedi8/7qer2rYsdlPUXB74kIJv/yy5Wm2vI7vpLVXfxnbYSXqnDA645QKiIzwjgCMbw1mTAJRxStGxNC0WjVv4RBYjJjzaYQKyoV64iFyN7KhioOkbP627myA4IDG5gs0omYbRLodj4w0BXWk2jMrYzvoK2dH0Q/71jvKYBFLu5JqAMYsBVLUUGqsvVX8uCG9L1ChsxLj0loC3ccRM3fI7Sqto0K+GYYMQeBetZA8gU+A8g4QW9VPcpCoeO0HCEcS/GubXMlajUmohbE9VwryOQaGDaDL/b9b/ll4qfnjENvhMa8fq0kqlffj+PBuwEAfGkhw6d90RV4G/S+dYFa5chFEKUYJy9xebGx59BLgO9rtOBtb9d16NcahGTq+f8eflOnxuHl5onk2H7YPQQOOrqp0I4UdIm2vsH3zdFO2AnCicdl9Kt3PCRKKsVQviYexap1YkNjttbAu0SyKig1sEuDG0gQdUytEwE5+guKjmC1TBZ3ky+uy3TKFpIb03hjRVGegqZ15BwSbLn+BTDmfTjNbl6ricRfLVbBgi63M6nhj2Q/HYLNUi6/sh42iPOWzjPB1jp/x8SzN4BTJ0aQAl2d8L+Ns6WnR7OL1nIwYz6jVLk27lolEE=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"http://www.blogger.com/profile/13192873941258824056","authorUserId":"","authorFallbackAvatar":"","message":"I do not have a message delimiter example.  \r\n\r\nI'd start off by partial-reading a large amount off the socket (the maximum message size, if there's a maximum), splitting by the delimiter, and saving any leftovers for next time. If you don't have a maximum message size, then you'll also need to handle growing your buffer if necessary.  \r\n\r\nIn .NET, I find the string methods (Split, Substring) more useful than the binary methods (Array.Copy, etc), so if your protocol is something simple like ASCII (many delimiter-based protocols are), I'd start with a conversion to string and then do the message framing. But don't do this if your protocol is any kind of Unicode (e.g., UTF-8 or UTF-16) or binary.  \r\n\r\nIf you do have tight timing constraints (e.g., you're reading a continuous stream of messages), then you may find my ArraySegments library useful (it's on NuGet). This makes it easier to minimize the amount of copying done (and memory garbage created).","postId":"2009_04_message-framing-35559d4d-46b6-383d-ad38-3ed5391f3894","replyTo":"8b52750a-a1d6-3e32-8fe0-582584aaf804","date":"2013-05-13T22:12:30Z","timestamp":1368483150}