{"_id":"a9f55f90-53ad-11eb-bd85-2196157b5b4f","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html?utm_source=csharpdigest&utm_medium=email&utm_campaign=345","replyTo":"","authorEmailEncrypted":"XGIPQyuqgFCZFClJgJl9hTx0uwEmIFogvmBzG0mCY9v5urYKP/yUrRJUcFfoYRi2/QAbNNe0QX5VMaV1+g+rco+iATKrNZ3tVrcTGlq5x9D19GeLzrI0EvHcMIKGjI3WWDnCgYurFmOrA+0aIGaSHLlaDo83gpJG5ug4LS0JZbLt4PaVI3o5bnKNUgZkkVxsrgKDlXJU5BXZZatZz3cplkL5IvTWzbwrr6SqefB8D0tjsso/uURc5lag/4+vFdhHGFOQD9G7S+R49F0VwtHfMVbcD590alpaVZQKtMesgomibNKFvN7zM+OXMzNn1en4s8Z8+LTcu0PWHwDOLhEVuATqQkEzjzByvRhb3nHEiVN8obVrZtLNhMxe8Yn18FUEKK4h6KjVHD8HQyU8tJ+KJ1qB/8HsIFJER/ajtTuIIMHxxAXKl4RLmfu9dnTsTYlmH9+BMVdJm6Q0xJxKxde3hAAa1+ZZBK8XH+v3uJ/gzj+IA+5YaA6nhu6MRjrFWj2bMAPiO8rSBcAmeC449zDxE7SpG38N4Kuv7hdXon2cFnpNVsKcsmqjJjm0xy9TKDJiI5MpsBaySZlTe/uUroAp14gKO56q0/2/bZA+vX2nsfzDbsrnHBCup6ocBY/CO68/Z7zlpR0GO2gx8K9RDI0f3AsUV0eVShxle/E8R/KJyn4=","authorEmailMD5":"082eadf33c0dff56f01a18db3a64967d","authorName":"Ray Spaeth","authorUri":"","message":"Have been using this concept with great success for around 4 years. My implementation puts an Akka.NET Actor in a Mediator role behind the API controllers to interact with the durable queue (I use Service Bus Queues both on-prem and in Azure). The queue listeners/responders in the backend service are also Akka.NET actors. The controllers use Akka.NET's \"Tell\" mechanism for fire & forget; the awaitable \"Ask\" mechanism when a reply is needed. Result is a highly asynchronous, very loosely coupled, messaging based, and extremely performant distributed system that readily scales. That being said, I'm most interested in your further posts on this topic.","date":"2021-01-11T01:38:11.379Z"}