{"_id":"be989870-daec-11ea-b333-954dcdd8b608","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"","authorEmailEncrypted":"fSVfe6ScCD3tmhUoGeKW61uqkddS14PqJED/b6cIca5shXBvOrDYNKR9uX3B1BgtrZeT2KYO1GPxDfN+UlCnRk5iF/V2b1/bhYPd8zGPBSa7uEkpEnrIT8RPIZzdMXoHE8+nXFyJ1mNA7u1FNuw3eMZxQbLBd0muJD0ztu5xyr2FFZpC5XErWWI3rYaxSv+Iz++0NGTN/ry/XG+dGb2qZuGplgoxLcMuKEiAlqlfiDh1e7E39dsfHZjUGebd5Ab9fF5AxoeHNaDbMd23wg6wXURKIMG4nG9+rZFot/dJcM24mGdy0Myd3yxzJ9WVmB97H1O0ks8aikK1Bl5So9cfyGPGAutQDRKOHXKRjpG6mjWbbw3pSa/ZqOAz+/e8yq5QBVgBdDKCiYVqMd/0gjJTZkDIeinYQ3XNHmdwXyBT44SEfQCcEXvHFOfAgUgzdOm4GwyMQDunEETpEkH1MlAgq6cDGn1B452tYf1kV4WHWW/62gzaGZtUr1HXq6E2aR3MrjIBfCTyptCwWrW9BlPYIDGV04csDtOdudM8NYvFnS9irtPm+muOZSus3N346dxsIPkvQUdGCXE1TQj14yY+yiHMdMPrLg0WeAcGLHfusZZlp0x7R2XVvl1R4lrZCwROBfqnUjkfS3cOxcmTYM2gTwZca4JB4VXrFbyknnJ12XE=","authorEmailMD5":"8a40c08ad2eab80a46ebd5715d913865","authorName":"Shaun Curtis","authorUri":"","message":"Hi Stephen,\r\nI'm writing Blazor Server Apps at the moment. You articles are proving good background material for honing my async skills. When I put a breakpoint in on a \"UI\" operation - say a component load or a UI event handler, I can see a SynchronizationContext on the main application thread.  If I switch some code through Task.Run to the threadpool, there's no SynchronizationContext.  So, is there or isn't there a SynchronizationContext in DotNet Core?  If not, then what am I seeing?\r\nA second, somewhat unrelated question.  How many threads are there in the threadpool of a DotNet Core application?  Is there any way to find out?","date":"2020-08-10T09:34:53.570Z"}