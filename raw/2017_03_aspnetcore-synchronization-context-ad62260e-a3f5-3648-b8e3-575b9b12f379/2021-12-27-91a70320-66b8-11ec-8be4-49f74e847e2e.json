{"_id":"91a70320-66b8-11ec-8be4-49f74e847e2e","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"d6709eb0-3b9a-11ec-b93f-6565165a1f16","authorEmailEncrypted":"CZ6iT/Yfs14kOry4DHSHllquSEETFzGsS8yHKrIBip52qKQCGF2A3Mq4RDDdtHBIpsKpz/aR1FvI6QCdPTlSrVOnEtOEWhcnDtW+plVUoXvbmPG7w2HZTWn999qyZpV96GgWxUBj46FZXS/+w6s+ICvXwnv/bbROd+pfk9zGpQgWInao23iPwIHJh+SwabJaNDMzdTfoqgEAC9ihDDw0vn8sx1ZKuZEkzGbAWFXz8PQz7GKt5OlKydT4Bd60B7qwGxOc8Y0ECL22kdraddqzSE2yJV2yUhtLrnu30F5jlgfhEj5T8XZqwrgVa9NEf1SfmsK9eX8G8XbSKEM3+Q+6XlqGqiyfz6E9xy8s/OBDEaj2gBS3byIfp/9HISLP+um0cvjU6/qHtWgC6vU4gVEBfkwebJ4pLD5hjZpZ34nOllfHCNCaQUNSo7sTBUE+h2L6cri24t5yLOqRpO4gPSMvIgA1JUJ/certo4i4oLkiNEAIdJrkACbsEJ2Ld1RbvRB8APXMrqWP2hzT1dunGMT0tG4iOVEbdScViqMDqkjjGInIupD0ziX5jOQdFyY/rEMEOMxvL9XXseoHJs8j6imJnP17tnVpZkTQjB31X1StecLIGQVTsF1HhVdvuR4l1LI43MFDWr5gt1Qk66qEj9pI4xsWnGXIhg7AZSh2A2NoF5o=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"ASP.NET pre-Core had a context that handled things like setting `HttpContext.Current`. ASP.NET Core does not have a context, so `HttpContext.Current` won't get set. That's not a problem, though, because in ASP.NET Core `HttpContext.Current` *doesn't exist*.\r\n\r\nIn ASP.NET Core, the common way of accessing the current `HttpContext` is from a member property of a controller - either a base controller type or a custom one that uses `IHttpContextAccessor` to retrieve it. In other words, the current `HttpContext` is now accessed just like any other variable captured by a lambda, instead of accessing a magic static property.","date":"2021-12-27T01:59:04.708Z"}