{"_id":"3a9ecd10-8b6b-11ec-acf1-c908b2ed19dc","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"38255000-8a57-11ec-a7ed-0d1dd89fafa1","authorEmailEncrypted":"IESsqtu0KdOeq0ci8qEEAXPEI0R5oTMxQQ3AJLz1+mxjZHHYYVTtLAUBTmDwpM70Z9W2EDEyAUp7LkOFYlqLOnC4VX37HPwbJMTRTlowxQtSVJbbPxGaZJQoKXsSoKhlM5uCJsl4RYKZhW7/kNNMflFFW5ngky1NS/xIdk9rULJYUnBKy8ubeOUUssMwOSZKoMR//Aq9Kgm47tBGetEu/fAkzAsEgbSPfqBQmC8MY5wJoBVuzq+EcVEEztrcKbghk6I0rFLji1YW9gzQaJ+VSiyfS6col2RHTcpTNWW80G+qkR0VUgD66UTzSYPbINYF/mMiUNiKUj9et7HOSsFW41Kw6NxOHHNIV4aK7LxQFQnPRR7h351TT5Jy3Rzklxcs2UCyMW1q7SX7xrukPtry/mw0RcyKtK7C6G4EDik4vw3CmoTYBR9YvfyH7PzPntIQ4vrzpbunGhfaE1Rx0dgKn/nRkWiOxj1+bN4SC/vlxfaxzvV6EqY9naOh/2eVDcdmoNWX2xh9PWoHIGkLGdFgrXBzEJiJos/2diI0BIqb1duxVoiqsv9kg4W6crKLnTy5aVvYeLLG0sKzY1q3rKGl7FIKOA1V888F6teVVpbb3aR/nMECI83wslHoSaXU1qMZ0oLqNprWc3zQurFkZ4cqdOt/6phzN8JCWLry3nM5QvA=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"This post just makes the point that there is no `SynchronizationContext` used for requests in ASP.NET Core. Code running on a thread pool doesn't have a context (unless you install one), so code inside a `Task.Run` doesn't have a context on *any* platform.\r\n\r\n> couldn't an async task in Task.Run use ConfigureAwait calls to determine whether continuations need to run on the same thread or not?\r\n\r\n`ConfigureAwait` has no effect on code inside a `Task.Run`, because there's no context to capture.\r\n\r\n> Or is the point that, high up in the call stack, there's nothing to synchronise that - it's not possible to pin continuations to use the same thread without the sync context?\r\n\r\nIt seems like you're confusing two things: a context and a thread. Contexts and threads don't have a direct relationship.\r\n\r\nIf you are writing a GUI application, then there is one special UI thread, and it does provide a context (or multiple contexts) that queue work to that thread. But in ASP.NET Core, there's no context, and continuations can run on any thread pool thread. Even in the older ASP.NET (full framework) that did have a context, that context had no relation to any specific thread. The old context would handle things like setting `HttpContext.Current` and the current culture, but it would then schedule the actual work to any available thread pool thread.\r\n\r\nhttps://docs.microsoft.com/en-us/archive/msdn-magazine/2011/february/msdn-magazine-parallel-computing-it-s-all-about-the-synchronizationcontext","date":"2022-02-11T18:48:40.494Z"}