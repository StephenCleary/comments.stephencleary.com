{"_id":"d85ab930-df30-11ea-b06b-f39deb301518","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"e026deb0-de5d-11ea-bc89-5f54fcacdcce","authorEmailEncrypted":"uhQObht2cjw6ikVNo2lyWorozh1Yt6+LKlQKfwWnJ4DyseyudKTHMJuNtMw7lvJlpVyeg741wh2lYKE75eUaY5VZg/KTL9AfVcQW1U1e9uKNLyo1GcqtTHFZsCmx6va7uA5Q0ahCNsRZKBP+ys0OXGpJBL9vRsk0EZKkYoN5J1RbhBw/JKq3RdhSzXrnn1I8RK5BTIMPQa5ac5NSmoWTaI8quCwqYK9CZlWgCpKaTNs4Ufhckr4gsZ6Oji3+sAc9qI7XTIcAhbyATz8QtT6y72XB8lrkAg5Yj94mHqnEIyGOOATK8QkSsDCB/H1WAn2OD2dIklvfmFcQkvOyJqfLJuID7nAmO8GiBRxgzkhjdjEr0+e5Oq7zwn03ni1mDuIdYfCWEFViDsnFa0zjbraD5F+sKl9o36Eq4DNteaoJ1MxtEvYUINWx/yv/IL//9zoHMLnottbd65D8z1EEuY7h5YntIQ1RRtRBeTyQvV901R76mhs7dvm2LisE/rAweja8nVBtZH26yz1MciOEGw6YNRvGJHE5MEQnccNOGb9KS2UfG7dCBS5E/0Ojnns8lCqDSbhdm+MM9BKjctEIZ8hsCFQg7uXCTRIDq1P5PFzok7RMLy04usWQgWWQYmv3iF9oPKK4Wzxok8jmRNo9KiyX5CVOkVLIhI9lavL/RgFtfG8=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Each method should make its own decision on whether or not it needs its context, and if it does not need its context, then it can decide whether to use `ConfigureAwait(false)`.\r\n\r\nWhen I talk about \"library\" methods, I don't mean any method called by another method. I mean methods that are part of a general-purpose library. E.g., I have some libraries that can be used by any kind of application - ASP.NET Core web servers, Android phone UI apps, headless Win32 services, etc. That's a general-purpose library, and that's usually the kinds of projects that use `ConfigureAwait(false)`. Then there are other libraries, e.g., I have one that only works on ASP.NET pre-Core web servers. That one is not a general-purpose library, and may or may not use `ConfigureAwait(false)`.","date":"2020-08-15T19:52:27.174Z"}