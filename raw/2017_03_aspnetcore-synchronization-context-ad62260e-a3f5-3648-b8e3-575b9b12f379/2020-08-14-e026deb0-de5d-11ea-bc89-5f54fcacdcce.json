{"_id":"e026deb0-de5d-11ea-bc89-5f54fcacdcce","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"","authorEmailEncrypted":"GOGVK+UikXTR+gbcfMwixmtvUZRg7dRJOPNUYFG6+T9KC2kw0dmG0BV6FniarGAKv3na8vExMGRyj4GRuvn6S2EnvFjlUXHhcu2cDlK5UCUI0/m8P79HkQr7WAecFG8Q+5kztH4GcmHHnLlAEtsXwV0bN3UA2CM1G665eviE1jS3URfKoP8hKZGU1WnWPAWD60IQllO/oZoYoz5TNF8A9Gr76ULLxcAf0NZSVnpFhSuMChrIBAqJHWmXKZhSb/gftlrOpYXcH8PzurX9kVzHqo7z95cf5LKQVGnDucWOtd6BvryRdNFoXxpvGFaAhgirCGXmVRHdl0pIdfZeOa4TzRJaDGUfnXEpU8vnThpOC1Sxmz9LfL89914K6e2sZOaDvTBINq36Ef2chbIUiBW6rSRuVy0ExQQkbP8lMwF40+n+Dms6gteF8rBnFSGFNgRc6LKKOX4lnqRouvXAA52EgI36OO3Yy3vh0Q7kb48POGqSXmro70lJaZu+yWzLwNfA6aYGS10sef+zt0O46CZsONKizvTsK7YuMpn9kazbfzIOIlxIiXNpU8juBvMSgLuTYxpLbJrnfTpJpXTY8XUjr0MSF7hGfP8fpdBcFEU80JxFARuAancRbvM5jP8EZDC6RP4qBpPUzL6y15dyiq8E3Iqxpr6BP05XnWP0a163ARg=","authorEmailMD5":"57c5e39898431bebba081d815531093a","authorName":"Toby","authorUri":"","message":"Hello Stephen, my brother from another mother, but same father ;), I have followed much of your async comments online and here. I have a short, quick question for you.\r\n\r\ni was reading  Stephen Toub's article, https://devblogs.microsoft.com/dotnet/configureawait-faq/#when-should-i-use-configureawaitfalse, and it says \r\n\r\n```\r\nSo if youâ€™re writing an event handler in a Windows Forms app, writing a unit test in xunit, writing code in an ASP.NET MVC controller, whether or not the app model did in fact publish a SynchronizationContext, you want to use that SynchronizationContext if it exists. And that means the default / ConfigureAwait(true). \r\n```\r\nI read that xUnit has its own sync context and so I figured that any code \"being tested\" using xUnit should use ConfigureAwait(false). Is that not true?\r\n\r\nTo me, if it has a sync context, then to keep the code under test (say .net core web api controller action) functioning with performance and without deadlocks it should use ConfigureAwait(false). It seems like the general guidelines for doing so for a library would apply since the **client** of this .net core controller action, xunit, has a sync context.\r\n\r\nPlease enlighten me.\r\n\r\nThank you and keep up the race","date":"2020-08-14T18:42:16.562Z"}