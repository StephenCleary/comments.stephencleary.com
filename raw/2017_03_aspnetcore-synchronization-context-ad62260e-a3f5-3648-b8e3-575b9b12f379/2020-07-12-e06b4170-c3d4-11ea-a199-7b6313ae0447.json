{"_id":"e06b4170-c3d4-11ea-a199-7b6313ae0447","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"25d2b340-c3af-11ea-b770-65c0c48f276e","authorEmailEncrypted":"bnhORqYykJI0iMawZhWQI6J4D0he3peo3fxJj5gytOE3YYOov9oF6cd4sR01LVRHL+QCh/zhXPNsWc1Fn/KsGac+bsOp3JZGhHvzSfDjjvSd5bcrOPHafasof/hXlE00293cWuHPPQJXfacPngop/R/RwRExb3OXr8SiBAXQh1ere+57kKaVB05gV4ZNts6nfoGcCgcxVkuo4dV+waMDcn04gBd9G+B/MZsXkYihj6dg5KXUbwb1mgkqgVfhHTe24k1SvUfHcuPh79nxiT1ZT5WtpsVvJuTcBc2/uV2sG2l93L7Obq0JELoiJBRYi3zDS36DNHATfYRUQB0fiYcC9FDJeOxAXQLhwdEy37Kq+u4gcUHtfrkKQ6cepDqVGwtEVz0KSvMqfP5rftpa7cPoXfHMgb7cemJVHVviY644JTEhh1O2pYoCQuOolU8qUGVmj62dgOi2BYEOknae7yWktRL9S5R4K2qVu7q2UeJlOMdcIk/NANV9llw8qoyf5g7fy9TSuQ73wiqe8kduN6H5EnYB4VQEp+WU+EF6kMDYE8Q8HV4dN/hzpnDgCLmptKVktgChymV67DZSDIBf0YyoirvB19bQb7kv96g6/hlH2cPmBQT7QGcu62WDfmitvqAD4ZTjP1u5r1Y2JCPOCDXU9KHHYxQ8ewpVlFIR4RsIE5o=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Yes, the ASP.NET Core project can assume it doesn't have a `SynchronizationContext`. General-purpose libraries tend to use `ConfigureAwait(false)`, including a lot of libraries started by the ASP.NET Core team (e.g., `Microsoft.Extensions.*`). One notable exception is the Entity Framework Core library, which has decided not to use `ConfigureAwait(false)`.\r\n\r\nThere is a bit of a movement away from `ConfigureAwait(false)`, since it does clutter up the code quite a bit. So right now it's a bit of a mixed bag; I still recommend using `ConfigureAwait(false)` for general-purpose libraries, but not every library chooses to adopt it.\r\n\r\nI don't cover `ConfigureAwait(false)` any more in my book than I do on my blog and articles (e.g., [async best practices](https://docs.microsoft.com/en-us/archive/msdn-magazine/2013/march/async-await-best-practices-in-asynchronous-programming)).","date":"2020-07-12T00:16:05.657Z"}