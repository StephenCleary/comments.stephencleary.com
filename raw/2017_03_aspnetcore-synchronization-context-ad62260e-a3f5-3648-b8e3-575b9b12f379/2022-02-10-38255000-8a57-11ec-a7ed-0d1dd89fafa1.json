{"_id":"38255000-8a57-11ec-a7ed-0d1dd89fafa1","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"","authorEmailEncrypted":"aVnZV89I1txtvwuw8epkgzGnsMV/ipX4BsJRBo9qqmgLNdDtk7D6fI1RnODugwHMlTes9jAO8q3lg4iagqYoAwHTYXKh0S44m87vDpPnMLOAg/XTmHIUTrOLzDouah8iBBMCt8uC4ag55a1zHvPvPbKf6YDhjqA6l+uAkmckkIixPKXxrOZySnEDnbGscMLhnG1WA0wmeptAqDTV6YUNYO/cAL2ZxKQSIMPN4M0nveSgouiLXNOq34Sj8aQ4TZokvqQXzWr/814PrNMkbPayKoKamcQU4tedez/nIzag2zGIj39geSg+HBwky5Xw2qkn/qNp75udmHPb21JUADX8ndc+WlWnvlSwZqSiFCOUADFFjlmGcQDxYJIq8aH4MGqdTrw+vdD78c8tTF1wXlfqjxJxuLQTUfZAx2KMyzuJM8nuKNST+5m918YL7gx3ZDr4QphRGFe+fxKvqBz3cJpWfxGCqpCznMBLJrfYV+9HMxUzUt5RsH0+NM6VTka63XsHp6dSK4iKMGfpREftwBStub4bUI3Aa8zUjeyCaOFN3ljsWssLZE/VKKeMJfmZLt2sptI61L+CbtEaAobOcxV4VwC/xQZUs7MtZzE6FzOmoEu2UiORcv0LQ5JDMbOKRS/ls+8gkbsgwEJ/gRO5TU/8nEAF3rJEL1Iswh6Gq5FoZJk=","authorEmailMD5":"e560af70c1e280d80a5c7d3540ed6bed","authorName":"Kieren Johnstone","authorUri":"","message":"Hi Stephen - clearly this has been a long-time highly valuable resource for many developers. Thanks for putting it together :) I have a question. When we talk about \"ASP.NET Core\" here, does that apply to tasks started with Task.Run too (under an ASP.NET Core context)? I figured ConfigureAwait would still apply then: couldn't an async task in Task.Run use ConfigureAwait calls to determine whether continuations need to run on the same thread or not? Or is the point that, high up in the call stack, there's nothing to synchronise that - it's *not possible* to pin continuations to use the same thread without the sync context? Thanks!","date":"2022-02-10T09:52:55.267Z"}