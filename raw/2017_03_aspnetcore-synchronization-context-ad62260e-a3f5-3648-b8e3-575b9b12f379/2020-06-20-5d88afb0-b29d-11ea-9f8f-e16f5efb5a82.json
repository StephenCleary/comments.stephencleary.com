{"_id":"5d88afb0-b29d-11ea-9f8f-e16f5efb5a82","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"c3bf2ef0-b291-11ea-97e4-e942a28dffdd","authorEmailEncrypted":"Z5sM+1JMZX/+DxFmmyuHDjiPjt2DThAcPDTrKR0SNE0ILPFb42Oyva2BzKqW0DF9iM8r7nxSx+MFDivCNa3qoMAlHZIKJJ3ZzqSlHsK4ISr61124cts7aTRGIz6LektcKm2iaFBhoDTQdJBvoqfgbQ/d4cV3K/8vDuh2ho4CmWsVazsXTeakirRY/nOqCJZO0p++ODVI5fDNMR595ahscntXLjfnFfziyyP5hecqT2J02FD6jWbJL8S1WB9WsZdiEz0F7qaS8tUxlQavc/0xX+VOWMg4xI28cd0l3R14WqAcV8JxXvQACZ6Rfi292gxcmDrzqUAeFR4t4WwVjSoADYp3eJ0p3cfD7RcaZyjxqfRbyKWSW6s9IWr0Tu7bbAj0Uw2LqqJHM16M/duhzlnFKE6nJEiOUVkUIROn7XVDLlO9OnSIzDPIxztzTbpVp3y9C4xIDkIKifDFc++/8KY7oIp5TcotDVXB/Gft4uR6PCFc0PnDEpQHZxmxNqTAeF+YeMBLbaawZSe9il5D6qQMLZSuti/L0THvU+OgopNg+meY1miILaq99jgtJDuE/Xb4hxSWEUsxkRL24MXqHngUtMo4Yd1mrfl6jtcxWebUC6leSdfyx//BzL2aOsQdG/mLDlS1aBkTbN9JWJJ0lcLthHXF3IlGdqpt7icz3HBrTJs=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"The \"request context\" exists on pre-Core ASP.NET apps, and manages a few things like `HttpContext.Current` and the current culture. So, `await` will resume in a way so that `HttpContext.Current` is still valid after the `await`.","date":"2020-06-20T02:25:53.870Z"}