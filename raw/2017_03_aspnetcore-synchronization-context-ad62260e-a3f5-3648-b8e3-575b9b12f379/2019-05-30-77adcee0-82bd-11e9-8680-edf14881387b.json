{"_id":"77adcee0-82bd-11e9-8680-edf14881387b","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"http://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"fd5338f0-8213-11e9-9106-19ed2574ea23","authorEmailEncrypted":"C5FuqN3LMlrf2G55sEeQYGq8jamaUdDXmtsY1CTT16wVNRuySgxa886zKPP26FDN2q57eLgiX5uLDy/W5ND5jsFomN49PD6BoJWU+ljLeboPemV7nrv67M/iNFgldSo4JZl9bSE1EVHYRJzPU4NGDiQBSzj+pBKsB965t9tkh/+H6rU2Vmrl5Me67K2gqHyAqILaRs+HAGKFRT8LVXYicIsFqFPD1Xqwlp7sn7jfR1iLU4kP36HKp/LcUWHvq4k975J6SLMvVKsqOXR3iQFE2SGwks92vF5/lgFmqA3XF9zLoJCdiKMZDrsDPi90tX42VSFguSu6LokvO1qSEbJSG3VSeADVZBVOL6W7P+PrN8UIdLNur36nH/c8E6A6cMbNHqhVMvSLwNnpqfEeaoBLPebFIr3YhPUrd7PbnGrvuKCVC6/BDg9iHBWFe/qVYIPVn8Y9ls5E2XF2BXzAcN0qqWDILp5bkSMy2O2fMwqkMSMa66qqg+FOVokczCXLuLi05jG6YHl+vQiUVB1Eh06Qlt2XM//dvFbk1WUpMmJ8zbMraDecWvBg929wOCvOqw3N73Uoa7+R7ba7kExsp4ZSn80BU9+qbUsMh+pV7Nmi0SEZ6prxEjHiwoLB2gwu9dQ7pjiu/clsr1pxBZD+YYzx/TRQTSTgSYL15cyYhJnoFKc=","authorEmailMD5":"2927a2e304e3714b26552d37f960323c","authorName":"Dominik","authorUri":"","message":"First of all thank you for your time :)\r\n\r\n1.\tIn case of detecting the context I’m not sure about TaskScheduler. SynchronizationContext.Current on console is always null but TaskScheduler.Current == TaskScheduler.Default on .NET Core and full .NET so we have a context?\r\n\r\n2.\tI’m asking those questions not because my code need context (I agree that this should be avoided). I only want to be sure that I can omit ConfigureAwait(false) and be sure that framework will not try to sync after await with previous thread. As I understand right default behavior is ConfigureAwait(true). In my current project I have full .net on service fabric for example with many ConfigureAwait(false) with looks bad and I wonder in light of our conversation if I can delete this code and behavior will be the same?","date":"2019-05-30T09:29:48.586Z"}