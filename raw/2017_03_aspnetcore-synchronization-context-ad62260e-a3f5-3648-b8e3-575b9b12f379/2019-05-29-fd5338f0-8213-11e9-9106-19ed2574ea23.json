{"_id":"fd5338f0-8213-11e9-9106-19ed2574ea23","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"d54645b0-81ef-11e9-9106-19ed2574ea23","authorEmailEncrypted":"F0A+uT2dOUBGJMsIludZeLrLe6KHuVwEpsWH9BdQ1cHFRrVzTrMZoYCkLRgXzsGORtYG3Tn7iLy0O+Lzk+IPA2+7KgE9M6+AcBo8mNBg57CsmUzYybfSpQs8kGFRhszFxBeG9zhklc6Hx7NyPfOdlgrdiXoSiuYsBqYbpXUMhMwOtS9h55n14tOlaJMr4ekLQQeWFcWetVQx1p3M5r5wStWJrIncY7no/C10dDXa0GR6v7Ce8azR0Fjot4dVKEts7tx55QKB1BX8QeO5HWGmZdXnHZNkHmbvG6cvz4RYntnWUjLACktYuBJi0OyH7GsZBMCqge91/Ov6w0j0MJHR0AfoYuurG8BarNjTnxrudPMeInfubuS1T12eMYRIeX9P2ZANzL6rA15yEet/uvHig0UpMcfSJ6/3J0bIF1sqFCnKwdv+Ec/vYuR+KthJVO+Rv1pL0bXpX5OnELZTQtVe2lGlY9BJvkRPQOHDsk+V2uSD/t8luKfpPsAtLr8sqXskAi4g7VeyFCeb3EP5fJxeas27odPy4WRvOV1cJx+RAgjLwtm+IXJwWmWAm0xmaL7QO1NA7Ubd+iLg4QDLYkYbdgf2gl68fnecB/4r/hhQE/JIblyxZquXRMHNiucYdzE5FX0k1DzODaxqofb53tdmnDhtjUqnzB6bPth4h3zpT7Y=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"> Is there any way to check from code that there is no context?\r\n\r\nYes, but it's awkward. There is no context when there is no `SynchronizationContext` and no `TaskScheduler`. There is no `SynchronizationContext` when `SynchronizationContext.Current` is `null` *or* it is an instance of the `SynchronizationContext` class and not a derived type. There is no `TaskScheduler` when `TaskScheduler.Current` is not the same as `TaskScheduler.Default`.\r\n\r\nA better question to ask is: why would my code care whether there is a context or not? Can I change it so that it doesn't care?\r\n\r\n> on WPF it is set, on .NET Core console it is null but on Full framework console it is also null\r\n\r\nEvery UI app will have a context for its UI thread. This is true across WPF/WinForms/Xamarin/etc. Console apps do not start with a context on their main thread, regardless of framework.\r\n\r\n> when I run some awaited method with ConfigureAwait(true) when context is null I’m returning to the same thread\r\n\r\nThis is possible, but not guaranteed. If your code is running on a thread pool thread, then resuming without a context will schedule the continuation to a thread pool thread, which may or may not be the same thread pool thread that started the method.\r\n\r\n> can I execute some code to check if I have context and if I really don’t have context like on ASP.NET can I return somehow to original thread?\r\n\r\nContexts don't guarantee returning to the same thread. ASP.NET pre-Core is an example of that: it provides a custom `SynchronizationContext` that can use *any* thread pool thread. Custom task schedulers are another example; e.g., `ConcurrentExclusiveSchedulerPair` is a context that can use any thread pool thread.\r\n\r\nThe vast majority of code doesn't *need* to return to the same thread. If your code does, then it should manage its own context. I have an [`AsyncContext` type](https://github.com/StephenCleary/AsyncEx) that enables this, but before you use it, make *absolutely sure* that you *need* it.","date":"2019-05-29T13:16:38.410Z"}