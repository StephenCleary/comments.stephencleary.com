{"_id":"c4170cd0-d8a1-11e9-ad4c-b516289148dc","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"4bbd3000-d894-11e9-ad4c-b516289148dc","authorEmailEncrypted":"tc+lSQS8BRw3W7TzdYXrtql3Osti/CRIssAGVLOVGumVybDkuuT1i1WCd+bRf2Uv5/lGCST4afrjL7g5u2movrkIkhwO/OZvJ0bNXaoHHYzYZ264JtqnN0BvJRePT0Y1T9lEEjM7wgUXkIXg/VXfPA5g2zVbUS2ByQPRvq5kpZrms5cXC5bz88V9uaxDEgSbXfdP+0yjmq6w4yNFUeUjcTmKC8nhVJk/FeHKnYTaweUlKywMH7RS2LoCA8YqsKiQ4gLyvOdsX+HpXyjEhnBJEA8GmMimLnvOxg06ZjQ+NqNX6bGTeOYLzognTdGdzBMY4j47psTosdqlF7QmDJN6JGZnqOJgZ0XY2odHzWb1+STPtzXpx8WATAXcQig4Xxi3GGn+QMWW2m0fEhWm0FG9ttuUgrY1f2Wo1zpujhTm9PfaZfiIQlrRo/Yi/ZObP5Nqddzlxsu3sm2XGcyamSF8uKj9L1zznteaQJ86Vcj/VjAh81jGJ8T051RvJ5haj05GT4VL2mBbiRbgjyqFaDr8qtgQwV1cqLIgw/UMYWnmgJsZ9DqaIRIr8K5YR/lvxIJRmkiUSIGzWNQW6cgEcUdTx+A1ehbgPQGV2Mhbl/o2ORtgNjLNFsnoL/pDuqlszphbBjXm/XcsEo1SRyb4Qg1ET/UOrO6rLq9z95EVfeKZlK0=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"In that example, the `result.Add(data)` lines may run in parallel.\r\n\r\nTAP methods return \"hot\" (in progress) tasks. So consider `GetBothAsync`. It calls `GetOneAsync`, which starts that method and returns a task. `GetOneAsync` is in progress at this point. Then it calls `GetAnotherAsync`, which starts that method and returns a task. `GetAnotherAsync` is in progress at this point. So both methods are running concurrently.","date":"2019-09-16T16:48:10.600Z"}