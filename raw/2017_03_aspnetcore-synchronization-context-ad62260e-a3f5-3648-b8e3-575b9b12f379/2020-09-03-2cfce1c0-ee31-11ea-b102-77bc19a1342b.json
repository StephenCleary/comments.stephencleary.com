{"_id":"2cfce1c0-ee31-11ea-b102-77bc19a1342b","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Eric","authorUri":"","message":"I'm not certain, but I _think_ this means that using AsyncLocal in the following way\r\n\r\n    private readonly AsyncLocal<Dictionary<string, string>> data\r\n        = new AsyncLocal<Dictionary<string, string>>();\r\n\r\nis potentially unsafe because multiple awaited tasks can run in parallel (eg, using `Task.WhenAll()` as in your example), but they'd get the same `Dictionary` instance. \r\n\r\nSo to be safe I'd need to use `ConcurrentDictionary` instead of `Dictionary`.\r\n\r\nCan you confirm, or elaborate why not?","date":"2020-09-03T22:02:36.690Z"}