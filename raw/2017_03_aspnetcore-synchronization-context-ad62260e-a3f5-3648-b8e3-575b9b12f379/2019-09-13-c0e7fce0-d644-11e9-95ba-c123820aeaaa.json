{"_id":"c0e7fce0-d644-11e9-95ba-c123820aeaaa","postId":"2017_03_aspnetcore-synchronization-context-ad62260e-a3f5-3648-b8e3-575b9b12f379","postUri":"https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html","replyTo":"ee8105e0-d633-11e9-95ba-c123820aeaaa","authorEmailEncrypted":"oaN5K5xv09aTmO4ySDCd/BFh3drdOizVuC7PDZPpZn8gH+Cpsy/tefLDa4CahMCMnE0ObUnFqHX/IAEy6G+yUk2yAjIASh1owkZfkwpZxbElrPNACO/jbu5/qGE0ay2w92FL5L2jNQI7OTZgCOtd0w2VK+w4p++6cdlOnWXmPSzbqwgTxWaMv3fz2ksolc+XqNVL38INblIhA/olhxCTBAgIuaXl3NGw2QnPbd2eaqzmRL9Isddd/50ePrrcIpcOmICbYl+AQDzQ2/9rCik8fkPuZdSTecXeQiY0O1BDoC4BWuyici1J/4h8myIUep9I5szygGPJvufS49TVAIKu4nFAYAcpHOqRMZbsgkdhsYOZf/3C6GAPEuf24XPFCDVnU0OsY/eA/S95TpIC6tJbooK1+Z1KtQxBHxT7rTmsZh1QTv5ykf1lsJe7WJEixMjZkVFG5vJIMCjJTw5LcAuzPHj0sbcqk4YceSPL22ymbyb+9NixyWwwoO/LP411doL5/2kDFmOFRGNx33V0+r78YXQ82p8b5/PUOh4ISnB8Zz+zR/bGMYd7OX09Rfk+WWlb6WgCyDwmHPKxI43v9CK3IpZoyUnwxkX6Ut54qigZrnRlsLbuXNiaQWNo54rhgDCWMVTkbv5andztuN1FGo4JvIuc5zry7srekdrAw1AaVo8=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"The code sample there is unusual; it was specifically written to demonstrate the issue. It's very rare to have code on ASP.NET that modifies shared data like that.\r\n\r\nSo the best way to avoid it is just not to write code like this in the first place. Asynchronous code in particular flows much better in a functional style: *returning* results rather than updating some shared data location.\r\n\r\nThat said, if you do find yourself in a situation where it's not easy to change code like this, an async-compatible synchronization primitive could be used to coordinate access, e.g., `SemaphoreSlim` with its `WaitAsync` and `Release` methods.","date":"2019-09-13T16:37:19.799Z"}