{"_id":"d53cbe33-da4f-3a64-b2cb-096926d24a7f","authorName":"Abdul Jeelani","authorEmailEncrypted":"QsT8aDQjhjUPM0PIJpZP9GlKFVkBQgEDts4bdZAZHErlleervKjO7NRpq69v/GX0NllT1GfPr98zbUGca33jkKLvF89APwC1+z4q5x3E+pmKqFDAuzCgO8+6XB0tZhFTvBQIhVjojsBFg5lgwyU2y+/mfQ16rolyhcor1JJSasskAiAJy4T1MfPJHCQwv7MxG8wBSddJ3pWvJAKabR7QAIfsgHTX0ybhFEpiYXrykxtctbaPzuk1VfB4e9epsKvBIs5PwqWUDOVXejiXl6Txi1L/8aq6z3hRuxZ05/VlLLiHASeSoTE3DDyDRYNqSDomsXDsFha2Zt/hM2phOOQxpzgny8eSI0+0YZxGVHpScmYzGq3T+SCZyPWv4Fz4ht2QCRF8edQ6qiXdlt2hhp9jTAx1iCwKwhaZq+6hoe5iwIRIkXMr+4ZhCE4XfB5THFMor3IFQAEH3nUddIiJrg+qa3h6qloogjkoKxx9NYsGPb0Pk+3l4sFadoQpYLB617nflGB5y1c3T6mgK6e0oUBpepN8QgMZ80TU+coUmSvRt1twRTx0OImbpYJd2aiUuS+jYO5yfoModgOkEbQTnFahVqHWffHHndyJSSI0J0GNaJe9R9+YHfhWpeHlKmkE59moGy/+Q7ob9JjLkJ/z22waY5tS1wHdU3suMO+Tsy2nou8=","authorEmailMD5":"b3eef3823290b09dd3e2aded4192339e","message":"Thanks, but how exactly you differentiate synchronous concurrency v asynchronous concurrency,   \r\nIn my case Do1 and Do2 are independent, that work on a received item from a stream. E.g. Do1 uploads the price to a webservice via rest, where as Do2 does an internal domain operation.\r\n\r\nI understand that if my Rx Subscribe needs an async operation then I need to use a TPL block as a observer, (Note: I tried to pass in a async delegate to subscribe method, but Rx raised the on complete event before executing my delegates, means rx is not waiting for the action delegate to be signalled before raising complete event)  \r\npseudo:  \r\n\" obs.Subscribe (async result => Console.WriteLine($\"Got {await result} through Rx ASync on {getThreadId()}\"),  \r\n () => { sw.Stop(); Console.WriteLine($\"Rx Async took {sw.ElapsedMilliseconds}\"); });\"\r\n\r\nEdit: In this I case use a selectMnay before subscribe to await to get the expected behavior","postId":"2012_09_introduction-to-dataflow-part-1-980c1479-b370-3974-8cf2-c1b8c36b44c9","replyTo":"dc7fccfc-797e-38a3-91cd-76a991ae821e","date":"2017-12-06T10:36:21Z","timestamp":1512556581,"authorUserId":"disqus:abduljeelani"}