{"_id":"dc7fccfc-797e-38a3-91cd-76a991ae821e","authorName":"Stephen Cleary","authorEmailEncrypted":"m8P6rmujVvI6wYwI4ATl54yQAeDcajgrYl9a0hdSehFxK6jiKD0H92e1YLLCC7xe4tyM7fJlA462+8SgW63hrj/iZo98VDSdC+GnJj9CAQVZISH1+E8IpElT6uoDwlGC4mQrttQi2XvdZEf1HKXYNVQXi5j/vjyBG7o5zcQM7Kb+g+yBYcZfv+2arrbuMFlt8m3BG/4merBpQhskQlVAeG9VGOaDQoaKdaP6EXCf9lTz/qh6GbuqUn9uqZ42CL0M3HAid5o3iOMAcDgF0yfTBpnYZzXCEB1f7WIQ8Ijes/OJmMS03am503PTcocjJ9nz8GjMhLhmZGaqByVvAc5yOnq1u9Z+YZcn0akV5bmgEc6N9atHFqeRgzH4m1Hr+UFoCzt98fSMV5T+ewxJeqH4ZuZmq9UTy7I1DiXd2N4Nfa/ruMeyF8y2WKBpaPA9Rkj6i7x1c3SNPnPBV2VN5Sasr0iLVL0145lZHdJbBjWY8KNOsDle8+YAM6j9ZIC3YJ2jHF3sbePwKK46vUoayVlqCCaHHXc2RmUyBY7O1+Xnly4fXlmpZyfqLTrJifMsjHjD8CWFdWZNvwErLPFcYLlPu2G0cQlG7Q+8mUMLmd26wUkTLc6p762pqM/Lp6Ya3C97VmtHblCPLxUovxVSu9dgT8zU2awmmFzR3KZ2EQzmils=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"You can wrap Parallel in Rx to get synchronous concurrency (parallelism). TPL Dataflow permits the same kind of parallelism, and also supports asynchronous concurrency. If your Do1/Do2 are synchronous, then doing it with Parallel or doing it with TPL Dataflow is pretty much the same thing.\r\n\r\nRegarding ObserveOn, this is a way for Rx data to \"jump\" thread contexts, usually used in the middle of a query so that the first part of it is executed on a thread pool thread (e.g., throttling), and then after the ObserveOn the rest of the query is executed on a UI thread (e.g., updating UI elements). TPL Dataflow also permits \"jumping\" contexts in that each block has its own scheduler. In the TPL Dataflow world, while the scheduler *can* be used on an ActionBlock for UI updates, it is more commonly used with a ConcurrentExclusiveSchedulerPair to coordinate one or more TransformBlocks/ActionBlocks with each other.","postId":"2012_09_introduction-to-dataflow-part-1-980c1479-b370-3974-8cf2-c1b8c36b44c9","replyTo":"b6414c54-ad6f-39e7-8c63-ee84e298ee1c","date":"2017-12-05T20:10:48Z","timestamp":1512504648,"authorUserId":"disqus:stephen_cleary"}