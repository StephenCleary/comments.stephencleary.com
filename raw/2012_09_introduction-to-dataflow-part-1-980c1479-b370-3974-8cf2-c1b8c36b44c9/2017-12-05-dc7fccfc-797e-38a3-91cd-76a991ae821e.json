{"_id":"dc7fccfc-797e-38a3-91cd-76a991ae821e","authorName":"Stephen Cleary","authorEmailEncrypted":"RWzu518tqb9ReChfFmn/fIj3hxRbt2i+XfMNld4pBOyUxnAQ5bhOyYITAkSKzA0bkkiaYqKTvWGerOKGn4A4G3xqUDCoVi5/+L381jbOzbWTHSZASSInGdutZKbag3LlzwrobIK/zegEiEAse7UypXP6ti3jYmhqbMoVYxnHAxMambxFfuJwT3LtxkGZDoVyxlH00FKfnlj1oLhFPUtEvW5aRopPKlZkxFb8GSFq0iMt7UCrA+WXAD4GdrYkEx1DRFz2It2Q4RrWqrN/8JflAkQC4MBAh5kZ7hVF8pPLczWo6x7Hd6wbqjZeBTBQaQKszA1ak4HrS56eeMdeiiLlw4PSiJfvCZtbmBrHdkMbwbWQbKrPo4nKNNAwzG2Nk+aw8tZfMzc7p/94QIasFK01d45R8edCzMYl7pv0TABGETYzreqTP4/C+ackb644K886yMy2DAKAj4XaPr/rszct2aQjV9qv9SWA3DbIPwxSFSyZleSQlsWhAIAgbm5T1dF8YMgZiudBqPiGwImMECcHCHAN4NWXxxT0HoE3ZwKmkuagnXXIhQa2lb8Vr8i9oEJTjK19xXWoJstUzOXR2Rr9WQxBZEFJbnBH6jyLY0popftwGKU5r8Wj6d+KnxFMEx+EOP6RmcGUGRubYHjgKrcKpGLPj7I87cQ7i18fGIx0Zmo=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"You can wrap Parallel in Rx to get synchronous concurrency (parallelism). TPL Dataflow permits the same kind of parallelism, and also supports asynchronous concurrency. If your Do1/Do2 are synchronous, then doing it with Parallel or doing it with TPL Dataflow is pretty much the same thing.\r\n\r\nRegarding ObserveOn, this is a way for Rx data to \"jump\" thread contexts, usually used in the middle of a query so that the first part of it is executed on a thread pool thread (e.g., throttling), and then after the ObserveOn the rest of the query is executed on a UI thread (e.g., updating UI elements). TPL Dataflow also permits \"jumping\" contexts in that each block has its own scheduler. In the TPL Dataflow world, while the scheduler *can* be used on an ActionBlock for UI updates, it is more commonly used with a ConcurrentExclusiveSchedulerPair to coordinate one or more TransformBlocks/ActionBlocks with each other.","postId":"2012_09_introduction-to-dataflow-part-1-980c1479-b370-3974-8cf2-c1b8c36b44c9","replyTo":"b6414c54-ad6f-39e7-8c63-ee84e298ee1c","date":"2017-12-05T20:10:48Z","timestamp":1512504648,"authorUserId":"disqus:stephen_cleary"}