{"_id":"dc7fccfc-797e-38a3-91cd-76a991ae821e","authorName":"Stephen Cleary","authorEmailEncrypted":"BuNFNMgoKNSUHBXnLZ/xTwM3wN06hC+YSFS7WojYA3ZGaypmZkt3k5hLwd10TjwxNQjSNRtYR/T0FUa9mRE9f0hiy8IRX5zHf/XW709JOLjB2DQUA86Br/UOv/XdME8j7eMuLP6mM+081+tAGrYZuYc1pyGfjwlwzai2jGuKV3OpK4Z5zifI9oFDO8sUbpgw8VWgZ+3VOiht5gGPWex6jtJpEicKw49ticDWSdY0YWGAlE9/8esNQQa1yGTwPLpvp07omgG3GN1kkNUC01/HYoQ+4CT6G4u2CrCdn61G1V53oOrELlxUe1Oti85tkT90WVr5t0U4pRk1KFBY7eqo9mgskic66jG2xt9J6C4BKfT9GY6QR4z0ycRjai3U37zu2vKGIeVPGc61nusCfBgAGYJju8Wc2bu/tI74XQbN4kStZpfc1SpW8h6h9QKUG60lZ9iGWoO1IRBcYkVmRyNF96miAvPYY9i1EyD731XNcQHAUJBk/XsJv9x5dTlXjj0Tk+dPwUbhgSkzQPoGxm76xd+ZU2wxBQ/aA61JMd1mNs+cBc9+VYkGW42C1WT5v449HlmQildok4/O1/plY6YzL+QvYB4NC3vJ/zVjfXESTP3lI3nthykl9Mn1bpR8D4oCJcnaF6LeIZ6ia0wMrDaunFvnqt+DrvFE5DiasXY+VqI=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"You can wrap Parallel in Rx to get synchronous concurrency (parallelism). TPL Dataflow permits the same kind of parallelism, and also supports asynchronous concurrency. If your Do1/Do2 are synchronous, then doing it with Parallel or doing it with TPL Dataflow is pretty much the same thing.\r\n\r\nRegarding ObserveOn, this is a way for Rx data to \"jump\" thread contexts, usually used in the middle of a query so that the first part of it is executed on a thread pool thread (e.g., throttling), and then after the ObserveOn the rest of the query is executed on a UI thread (e.g., updating UI elements). TPL Dataflow also permits \"jumping\" contexts in that each block has its own scheduler. In the TPL Dataflow world, while the scheduler *can* be used on an ActionBlock for UI updates, it is more commonly used with a ConcurrentExclusiveSchedulerPair to coordinate one or more TransformBlocks/ActionBlocks with each other.","postId":"2012_09_introduction-to-dataflow-part-1-980c1479-b370-3974-8cf2-c1b8c36b44c9","replyTo":"b6414c54-ad6f-39e7-8c63-ee84e298ee1c","date":"2017-12-05T20:10:48Z","timestamp":1512504648,"authorUserId":"disqus:stephen_cleary"}