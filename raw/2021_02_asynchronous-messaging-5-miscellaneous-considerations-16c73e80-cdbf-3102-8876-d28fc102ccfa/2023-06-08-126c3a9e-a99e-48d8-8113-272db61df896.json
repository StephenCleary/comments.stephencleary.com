{"_id":"126c3a9e-a99e-48d8-8113-272db61df896","postId":"2021_02_asynchronous-messaging-5-miscellaneous-considerations-16c73e80-cdbf-3102-8876-d28fc102ccfa","postUri":"https://blog.stephencleary.com/2021/02/asynchronous-messaging-5-miscellaneous-considerations.html","replyTo":"","authorEmailEncrypted":"nkUr\u002BgyohIFxQ6nH4bmhux3usFmKQ2unRvb/\u002BGIRcNz6hu93v8i4Dk6oBC28evg6egMw0Zo9//ewvMzxa1cgSBBBt9YTJnnlw3ouGPPZ86B3uNcGKiWDN71uBbOp6Z3cHQgbFCizWnuoZBKsJ4D6VlNwWOaB6bYWPNyYe0d4TPgHFRnCT7rwJnez1AvHf3IVUujgQ1I5/7PSFogEkuF67yF70RodMvyd4kU/ruOA0y6Hl5digxKoOPBK9Tfj02oZ9N0/rIme3e9\u002BPwlb8UQtgTpc7jgg4n7rlTEKc\u002B/115hBNjVXArbQ8uWX2HQf6G6yvZYlV2Ryi\u002BU2lc9dFkvlNRamVjutY7raI/4dJ9UHI0kMGoPQCq5TCTuutJHmyHi8ZR2/\u002BCBvJv34ugJ7uHUDV/OIrtyVVLOmneTA3mp0mos4HX/6N/JYtM1JziYC6MI5NB2NB0dkx/2WZECqtRsldRYenC8hR0\u002B3JblyV47SNJtIHdcbin4GPLg7vpsXW39KpuLTEc8D3ToiB\u002BOZkPvfNGEhzJAgxl27LK9512FXNS1Ae\u002BHWwvQWoVTOSKArjVBQUIMnPFYbX29TQzc8u96XCiP4\u002BT7uMEo6F/UEOUeHzTd7vcHpYPqjPGxAEB\u002Bd/rQ1nL6V5R4rp8z6jef5GurpWctA7iosy54jLGv\u002Bz/UeLo8=","authorEmailMD5":"16a3ae6f32ac5c55016699883ecd535f","authorName":"Daniel Miradakis","authorUri":"https://www.didact.dev","message":"Although this is a few years after the fact, I just read through this entire series today, Stephen, and it is excellent - as is all of your content. You make some great points about the backend service architecture, scaling, and the durability of a queue.\n\nI\u0027m particularly interested in your last section of this document regarding the \u0022all-in-one\u0022 solutions like Sidekiq and Hangfire. I actually just listened to some interviews about Mike Perham, the solo-founder and one-man company behind Sikdekiq - really cool story. I liked his open-core approach to his framework, much like how Hangfire has developed theirs.\n\nAfter several years of deliberation, I\u0027m now building a .NET job processing/orchestration platform. I\u0027m going for an extremely decoupled design, similar to that of Apache Airflow or Prefect over in the Python world. What I envision doesn\u0027t exist in .NET today, but I\u0027m hoping to touch on many of the good points that you\u0027ve raised in this blog series with my overall design.\n\nI\u0027m going to have a multi-part architecture with mine, here is the general gist:\n- Background jobs/pipelines are defined inside a class library project. I\u0027m going to use .NET Standard 2.1.\n- The class library will have a sort of DI-plugin system built into it.\n- When the library publishes all of the DLL files to a publish location, a .NET Web API that will function as a task/job processing engine will DYNAMICALLY detect the DLL files, download them locally, and load them into the API. Normally, this would go against your blog series here, but the engine is a totally separate app from a production application - the REST API is ONLY used for the background jobs, so it\u0027s a separate entity entirely. I also don\u0027t imagine that it will be used much, so most of the threads in the engine will go to executing the jobs rather than processing HTTP requests.\n- The engine will execute the jobs, save metadata to a persistent storage with a queue (I\u0027m starting with good ole SQL Server), and poll for new DLL files periodically.\n- The engine will use SignalR to send realtime updates to a separate web dashboard(s) that can interact with the .NET Web API as necessary.\n- In the last few days, I\u0027ve decided that I need a 3rd component: I\u0027m also going to build a .NET console app to be run as a Windows Service (for on prem) or Azure Web Job (for cloud) that will ping the .NET Web API to keep it alive (to overcome app pool recycles in IIS and so on) as well as run periodic maintenance tasks in the persistent storage (SQL Server).\n\nI\u0027m calling this new platform Didact, the site isn\u0027t up just yet, but when it is, you can find it at: https://www.didact.dev\n\nNo idea how long this will take me, it\u0027s going to REALLY tough to build, but I would love to get your input as I build it out over the next few months. I\u0027m going for a really unique spin on the approach that Hangfire and other tools have traditionally taken.","date":"2023-06-08T20:15:35.2221912Z"}