{"_id":"a1e25450-040a-11ea-b774-b96eee85c6ec","postId":"2016_11_streaming-zip-on-aspnet-core-66a49df2-4f92-385b-8999-87a9f3054346","postUri":"https://blog.stephencleary.com/2016/11/streaming-zip-on-aspnet-core.html","replyTo":"","authorEmailEncrypted":"jb26w1lCnkgJRvn0KHZzrcjOE6sZPclGLC9U2COL/iEdwLkdRXRE+WSsbFfSGSxRCrBVOpjv2Svhp5+RSdEcuS5b2ctOb6HFN42sQLlQJfT2s2uAX7P6vgwBPbb+kNhdaJ2GH31d5XwYxhHmJQQj0lZsFMSCttc+G8qPMJJnuqbUne9EF/pqW+1ZPLQPsHE6i7bE5noFl0rHZAvxCmvrKRICSXZQ8q52AZ/545kFHaR2jOo/JTu/jIckTX2j0rBKhdDIcJUL2GNYGjp9mfd+4DfYJR9SVQhDCHQcIy3XQcC71w3fbPJKDNWcPw714ZsyvPMtaVwvF36QOtHu2CiVpIxn6D5v22GeKkMuhnqVmF8v4sQRDpHBL1IdxlGXVh7PFLVDOnK8jzFfnbIWZTJJZ+goZgCSmdVbTrdyGPyAYHdZP/RpIEhBAG0pTUeukQNtcnseje9gZ7icCGa/shH3g9mDmhaRlAImyThkn3TrW/Z7RbwMk9VL2fYOnbCjfWC6OALSO94H+mle9MinDBivULhD71SbesEXQqzfC5ZgF3cPuiU9UWJKoeY8Ht6VR3Y9eXMOzgOFbGfuXJZtHfjhhWCGo5Dj316/GXmkSFny//W+xRLw0GMG/Q+rNqOhDltZgDRQndhgkwLiDo9w0oZnMNuAwUbqbmnkXxVW4aSNyNw=","authorEmailMD5":"3ba0958f44043c5a10ea0a3f19497e17","authorName":"Taylor Graham","authorUri":"","message":"FYI since ASP NET Core 3.0, Synchronous IO on the request/response stream is disabled. This is a problem for streaming zip's because they call a synchronous dispose (and write to response stream).\r\n\r\nYou can get around it by allowing synchronous IO on kestrel config, and this will fix it for all routes. However, I feel like this a bit heavy handed. Instead I change it at the request level specifically for the `FileCallbackResult`, since that deals directly with the response stream.\r\n\r\nE.G. in the `FileCallbackResult.ExecuteResultAsync(...)`\r\n\r\n```\r\nvar syncIOFeature = context.HttpContext.Features.Get<IHttpBodyControlFeature>();\r\nsyncIOFeature.AllowSynchronousIO = true;\r\n\r\nreturn context.HttpContext.RequestServices.GetRequiredService<FileCallbackResultExecutor>().ExecuteAsync(context, this);\r\n```","date":"2019-11-10T22:37:10.363Z"}