{"_id":"473b57d4-be55-43f1-8795-bc3ac989b84d","postId":"2016_11_streaming-zip-on-aspnet-core-66a49df2-4f92-385b-8999-87a9f3054346","postUri":"https://blog.stephencleary.com/2016/11/streaming-zip-on-aspnet-core.html","replyTo":"","authorEmailEncrypted":"XUg26zx\u002BmmkBhNCitUtotchyi6WEyc94LbW1cjyxNtG8XnpHQ9T4ROSM8FR1YdDXS5vt0bgtGo8nHjWY5nNTVt9c3ZVBtG/LD9lBqBDHCviX0RlD/C1alDOhahWEAlmpkYbBWapnffCMCjZfN6kXrZbt4BUEB/qst1P0fWFL0OzC29nPN5yvhqr0GYXUgQXVBOIc7yv4GRf7ZkyWbI4qww\u002BAtqj\u002BQrYqGRzQ64etwQmdSkekfQDmuCKNXYEZme01Hl6ABf1BDugzQEFLJ64Wo\u002BU\u002BZYL/rw3vRpFlqjOAUajEUMqtH1fRs3Q1p\u002BtUQZz59HXw\u002BHDUOyDUoKuI20fD3kbmzohxsfjxBpajimdpMOyzewslPe5tAN\u002BfVZXXyG6CP3s04R9476SQjsKkV\u002Bo2QhxUWak3IJeZa/pj8H8eE8fsk8QFSYrQ0\u002B\u002B/hzHutBk2O7EkyyDD3SC7HC9I3J3DzJJd3IXCuIRhm6\u002BMam8p8Z6YA6QtrEAKDueODuzC8VtOmb7eS6fU84djZxDwxCW\u002BSDUXRhPI6ZOahhw3M5NJCI93Y54\u002Bn3H61UBzf9dvbMSMwwmKGglNuoylg/m4M14Eyps6GBIjcdbeZVnGLrmXrLGsCCxZ4G8h2DRbVnil7U8ibriB5XCTQ6J6T4vPphxzD\u002BGXLKhS79CFyckKsJQlcLQ=","authorEmailMD5":"8eb2af4b2eba0379409dd073e7e222a5","authorName":"Fidel Ernesto","authorUri":"","message":"Hi Stephen,\n\nI am trying to apply the same principle, but to stream a zip into an s3 bucket, it works \u0027fine\u0027.., but in the process i am losing some headers (zip headers), so when i open the file in, lets say windows explorer, it shows an error.. but when i open with 7zip it works, the are inside and is not corrupt or anything.. this is my code:\n\npublic async Task UploadZipStreamAsync1(IEnumerable\u003CFileResponse\u003E result, string keyName)\n{\n    var initiateRequest = new InitiateMultipartUploadRequest\n    {\n        BucketName = \u0022some_bucket\u0022,\n        Key = keyName\n    };\n\t\n    var initResponse = await _s3Client.InitiateMultipartUploadAsync(initiateRequest);\n\n    var partSize = 5 * 1024 * 1024; // 5 MB\n    var partNumber = 1;\n    var partETags = new List\u003CPartETag\u003E();\n\n    using var memoryStream = new MemoryStream();\n\n    using (var zipArchive = new ZipArchive(memoryStream, ZipArchiveMode.Create, true))\n    {\n\n        foreach (var file in result)\n        {\n            using (var originalFileStream = new MemoryStream(file.File))\n            {\n                var zipEntry = zipArchive.CreateEntry(file.FileName, CompressionLevel.SmallestSize);\n                using (var zipEntryStream = zipEntry.Open())\n                {\n                    await originalFileStream.CopyToAsync(zipEntryStream);\n                }\n            }\n\n            if (memoryStream.Length \u003E= partSize)\n            {\n                await UploadPartAsync(_s3Client, memoryStream, partNumber, initResponse.UploadId, partETags, keyName);\n                partNumber\u002B\u002B;\n\n                memoryStream.SetLength(0); // Clear the memory stream for the next file\n                memoryStream.Position = 0;\n\n                Console.WriteLine(\u0022Uploaded\u0022);\n            }\n\n            Console.WriteLine(file.FileName);\n        }\n    }\n\n\n    Console.WriteLine(\u0022Finish parts\u0022);\n\n    // Upload the last part if it exists\n    if (memoryStream.Length \u003E 0)\n    {\n        await UploadPartAsync(_s3Client, memoryStream, partNumber, initResponse.UploadId, partETags, keyName);\n    }\n\n    var completeRequest = new CompleteMultipartUploadRequest\n    {\n        BucketName = \u0022some_bucket\u0022,\n        Key = keyName,\n        UploadId = initResponse.UploadId,\n        PartETags = partETags\n    };\n\n    var completeResponse = await _s3Client.CompleteMultipartUploadAsync(completeRequest);\n}\n\nasync Task UploadPartAsync(AmazonS3Client s3Client, MemoryStream memoryStream, int partNumber, string uploadId, List\u003CPartETag\u003E partETags, string keyName)\n{\n    memoryStream.Seek(0, SeekOrigin.Begin);\n    var uploadPartRequest = new UploadPartRequest\n    {\n        BucketName = \u0022some_bucket\u0022,\n        Key = keyName,\n        UploadId = uploadId,\n        PartNumber = partNumber,\n        PartSize = memoryStream.Length,\n        InputStream = memoryStream\n    };\n    var uploadPartResponse = await s3Client.UploadPartAsync(uploadPartRequest);\n    partETags.Add(new PartETag(partNumber, uploadPartResponse.ETag));\n}\n\ndo you have any idea of how to solve this? \n","date":"2024-12-03T19:52:07.0433763Z"}