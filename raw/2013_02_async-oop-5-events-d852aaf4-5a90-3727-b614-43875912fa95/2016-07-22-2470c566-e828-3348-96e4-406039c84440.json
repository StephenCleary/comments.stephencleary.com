{"_id":"2470c566-e828-3348-96e4-406039c84440","authorName":"Stephen Cleary","authorEmailEncrypted":"jxZ8JaB2iRSiJ46i/PzFHQF/uRjflWw7/G0a9Fnf36BWLO6Zv0xDIPaRv0EuLVxwPGPsYiMRaKpX139U5v1LeMiOJBcUE0f7TqqNqYhLTTZ3c19vMt9izQkr8CtNpLP1CPs0sCiZpTXh39qBuSf50QUHG8sXT3SCYNBVY2vMAF9stFWcdv9AkBcOy2eTBMtm/6na7HxrL+FtwufXpMwNTrMDf4zTFIP5Tzi66Qm8EEQRqvQ5LkX4nZWTaFjEHkIUtL30FUxPf/wWBesbLNPMts5dxt/0MNsQhOfPmIuTNjVMvRqKjmf9xcqEufx+/s3I87GKFTYMYHTL4lnTvONhjBAA6moyGCJOohCy6UwG8AwybSdHv4l8osKkcoTlrrNUR3wfXeV/YxNftjcJgXkH3iS4/BdZzy8wiADtzO3vZ7ufLcaqtsbohIIptMD3BrPMk85xXQB1Ff0kp6ebpCBCfbX6G1zNDbwTM1wjZR583scNyzXU5MJOD4/eejinXx0r9RfAmAeOHxgrVyz+LRo8Lzt8tZtgE9EXSdGkmGMTUE6Ug0VaJFAokRXHmFAf4seUr4tEMJYN5XG6V725R73eBrl36s6rQIESwXhtli9yYMsqLsKyGpJsmI5ps+uWNnXdNmyB5shOwull+tomHTObvGc1z2HLb4NMdXDT3SYiVGI=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"It only violates encapsulation if you consider the event handler as private. This is often not the case, e.g., ICommand.Execute is not private. So exposing an ExecuteAsync is not problematic. If the event handler *is* private, then it's probably better to adopt a more async-compatible approach (I prefer deferrals; others go for Task-returning delegates), which allows the triggering code to detect when the handler has completed.\r\n\r\nUsing a SynchronizationContext for detecting completion of async void methods would be acceptable for unit tests (note that the async method still runs asynchronously; the SyncCtx just gives you the capability to detect when it has completed or raised an exception). I have a type called AsyncContext that can provide a SyncCtx for you: [https://github.com/StephenCleary/AsyncEx.Context](https://github.com/StephenCleary/AsyncEx.Context)","postId":"2013_02_async-oop-5-events-d852aaf4-5a90-3727-b614-43875912fa95","replyTo":"27a97a50-11fa-3da3-9f1b-27798ed7f05f","date":"2016-07-22T14:34:38Z","timestamp":1469198078,"authorUserId":"disqus:stephen_cleary"}