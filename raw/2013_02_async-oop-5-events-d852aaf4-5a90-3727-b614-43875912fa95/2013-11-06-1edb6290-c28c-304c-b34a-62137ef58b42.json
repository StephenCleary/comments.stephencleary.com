{"_id":"1edb6290-c28c-304c-b34a-62137ef58b42","authorName":"Thomas Levesque","authorEmailEncrypted":"nzoioJwz/YNe6jgfV7hoZtHzpdIb5QZvPmvyd+Wljqu2jQFnubW2RBm7jnxbDuW753RNBinSeJ1/KeHq1j9BzOLNWH6mwuvt7Q8WggwLyVs06oEt1ebxMRWPSspTeDxgtE2Ycx6pCzeoszXuo1ykqcq8mzy15X7muvmsvjXf4VoDNiY9Y76A9P3e4R/NghGd+qEFPIUOF008vObx321vCSbIfLOyZiCeEIRIHZCr9TcRKqAICEaplCG6w3Fa4GBKmVgp5KHMA8Qu81KucEjEb6PnX6fmIhDALKGAjw5Y6wv+dkmNx9Xq64tVQszRUEaIgSeigQUny0uGH2y8dBtuxfhkZGgb4Uhy4hT5WXsu3Qvhoknhc2bN3/Ybivi7zmuMkOfX/0PDbTWi4rBUoOTqGn+tNC+tg3y5UavNuyZvKY9u3IRD39lOnahw8GYSU3Aux6DrQU/TXqelnCChH2XKr/eBDFHEoRqdc3Yax2Vtiu3BeFC7Di9JPLVi8hUT3UKSvaI2QlEkzh1HDBHb2FiLREGi01J23xt86yjZDYw2DPO2eXNXMrMSjSCsdrj2uYg2ooqK/sazEjnq2PIchTVGEClTkgBNiNVEvaDsdKvM4t1PFaW/77xJsyY3PBy8iCQi+L9bQ0vfc7MlaIB1+i7b4GZBnycqg/hKnV0cXMLzfbw=","authorEmailMD5":"f9e09a438f84e6df0278f6ef56355783","message":"There is just one problem with your deferral implementation: if a misbehaved handler gets a deferral and doesn't dispose it (e.g. it wasn't in a using block and an exception occurred), the event producer remains stuck forever, waiting for a deferral completion that will never occur.  \r\n\r\nI used a different approach for my implementation. The deferral has an associated Task (created with a TaskCompletionSource), which is awaited by the event producer. When Dispose is called, the task is marked as complete. If the deferral is finalized before it was properly disposed, the task is marked as faulted, with a DeferralNotCompletedException. This way, the event producer will be notified of faulty handlers (well, of course it will have to wait for the next GC pass, but it's better than nothing)  \r\n\r\nHere's my Deferral class if you're interested: [https://gist.github.com/thomaslevesque/7325901](https://gist.github.com/thomaslevesque/7325901 \"https://gist.github.com/thomaslevesque/7325901\")","postId":"2013_02_async-oop-5-events-d852aaf4-5a90-3727-b614-43875912fa95","replyTo":"","date":"2013-11-06T01:55:16Z","timestamp":1383702916,"authorUserId":""}