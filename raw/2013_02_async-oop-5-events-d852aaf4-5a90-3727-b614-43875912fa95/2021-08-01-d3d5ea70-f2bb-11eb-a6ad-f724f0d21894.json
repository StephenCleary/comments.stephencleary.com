{"_id":"d3d5ea70-f2bb-11eb-a6ad-f724f0d21894","postId":"2013_02_async-oop-5-events-d852aaf4-5a90-3727-b614-43875912fa95","postUri":"https://blog.stephencleary.com/2013/02/async-oop-5-events.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Boris B.","authorUri":"","message":"Hi Stephen, great article, as always!\r\n\r\nI'm wondering why you didn't list a fourth approach, given that it's rather obvious: Have you event delegates include a `List<Task>` argument, so handlers can add a `Task` to this list, but only if they have any async work. Alternatively, use a single `Task` argument and invoke via the invocation list, so handlers can't remove tasks of others. After invoking the event for all handlers the event owner can just wait on all tasks to complete, either with `WhenAll` or in a `foreach` loop.","date":"2021-08-01T11:30:09.524Z"}