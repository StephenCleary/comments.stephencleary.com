{"_id":"948970b5-9e6a-3d7f-add6-29d33352bba8","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"Yes, if you explicitly specify TaskScheduler.Default, then it will run on the threadpool.\r\n\r\nHowever, LongRunning does *not* guarantee that it is started on a separate thread - that's a common misconception. LongRunning is merely a suggestion that the task is long-running. The *current implementation* will start it on a separate thread, but there is no guarantee of this behavior - i.e., a future version of .NET may decide to have a separate \"long-running thread pool\" and just pull a thread from that pool instead. Or a future implementation of NetStandard (e.g., one designed for embedded systems) may decide to just ignore the LongRunning flag completely.\r\n\r\nIf you absolutely need a separate thread, then use Thread. However, based on my experience, the probability that you actually *need* a separate thread is extremely low. There's a ~95% chance that you should just use Task.Run.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"57978e81-d2b6-310c-826d-1af71d17f69e","date":"2017-05-21T12:19:52Z","timestamp":1495369192}