{"_id":"57978e81-d2b6-310c-826d-1af71d17f69e","authorName":"David Wright","authorEmailEncrypted":"tifhKjlRm/LuUyfuPzLWxWKqYNA7qiYHxIBzVZOssxPPPwaxqOCSzrXq4YycJBNAU0jS6+GTivweuh9s5jzhKg+oV2iInVbH7uWv19vTeJgo+tOZxt5tXpH3y38sELOmB3ttDIpCR0T8xq7F4Ct80bZXxVg0vz/fM8MyNpgTjRCBr1bub3fdQQ3XzP+nWAmERZpn6aTlNUOvhRIV+VmSANzI/Un+NYGmNek6mu8kq+oFoKMLPp4G0Q7b2Aaq9un5FSWrKFXpf94P0i3WK9RT3ZKUs8dKirK/S0vSiRRL/ao8Oo/AcBx8CM/kgbk7/f9ssIyZwgCLbsjse50ZxvwjBW3/TzOVA72flk98sGUB/fEE2xyb+U51f7/doW6Bw3bLsm7ljZLIjycKnSTP48e0QmuAHqSD53qb4JiBdQ+8kslHnpsn2uv3fpz+NsjSo1ze1mNGmiqtUhjpKSsgDm+Yl5NtJXBOdkY1opdA7trvNxw9a8yBxE4QcJFnVXV8Mo6K+1J4S1GUFz8Up0jWC7cEhysU8aDeSeNbvcY1jSqHxv4kLTY9DMpd6Sq9QGJxn7OgHUAJGw2Z6VdmqjyfgEDUyzbMfjqmInXnYZCmIJX+vC3twqsfTgBzH/nXzSWtVsZyZJVzz1eK3e9One3kvfEC+qjQ7/qKDfYus4VUbf8lXQY=","authorEmailMD5":"493e9873244c4ee952e775e7f5dd072b","message":"Does the use of TaskScheduler.Default below constitute adequately specifying a TaskScheduler? Also, in this scenario, I really really want to guarantee that the thing being started is on a separate thread, hence the LongRunning. I'm under the impression that this is the only way to satisfy that guarantee, i.e. I can't rely on the ThreadPool for my use case? Is that correct?\r\n\r\n this.cts = new CancellationTokenSource();  \r\n Task<bool> commandRunnerTask = Task.Factory.StartNew<bool>(  \r\n () => commandRunner.InitiateRunOnNewThread(),  \r\n cts.Token, TaskCreationOptions.LongRunning, TaskScheduler.Default  \r\n );","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2017-05-20T19:33:54Z","timestamp":1495308834,"authorUserId":"disqus:disqus_gFHel0qnPC"}