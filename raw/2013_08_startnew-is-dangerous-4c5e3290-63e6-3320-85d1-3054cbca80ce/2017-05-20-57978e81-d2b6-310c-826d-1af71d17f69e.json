{"_id":"57978e81-d2b6-310c-826d-1af71d17f69e","authorName":"David Wright","authorEmailEncrypted":"r18UJdVmsYcafcJx2QyQCjPcdq5aDVA/FqWTBECHmNL9OijgRVYPBN5PEawO7UAB1dsfief0qHnoG94iKahkQ1oUM7bLROWMqXEFK7VDIm9flusu3NlRSwQ1uKV5ua6qBHPtS8w+zoixZ3KLBxB3qrWRmk4NfuCqsLdKSBEbQbNGwo94wOm1VXzp7LMLU/nr8EXGnUTCAkYai6bwNLbL9GQaFYICtUEqEZvAqpT3jS9dZf0n5n7LbITdU6uryP3szMqmbi3+DbNibV6gneP2LGQSnC+oHZUKilzEY7Z0vlmPSLFwg2Lf+FuvfVvALAJza8zUrmmK4E+aYEVu9Ug8gEpUHyFwlBdb0yL6shox5v9gZahtBC07vL2JyCJiMIWFl/mohF68sY0Fy2Cy4y/FOBeE2uQxgz2BQVcxff0h9GwO8aiE+15XpM1i8ktA81sYwtBrjggj1pIDY27+BLRwQhYkKZzVoo9zx/Jm8LtrBGTxbAQ4Qd7KC58+WAvsoUXcXWTzxvocloGAC9i67OQblmGYjIJqP2adJ2WJOTU82qbfOSApz0rt1j8kJ00wAZNXeX3R9DCSynPeg6M1gjsOfbocvuqbo7ABXuwT8WRaoJpONr9xAOnRwtc2gosJ+Onk6huOcUKC1qV7OrF0C3zGlq22rmGuNYDSVAFiDLzuDXI=","authorEmailMD5":"493e9873244c4ee952e775e7f5dd072b","message":"Does the use of TaskScheduler.Default below constitute adequately specifying a TaskScheduler? Also, in this scenario, I really really want to guarantee that the thing being started is on a separate thread, hence the LongRunning. I'm under the impression that this is the only way to satisfy that guarantee, i.e. I can't rely on the ThreadPool for my use case? Is that correct?\r\n\r\n this.cts = new CancellationTokenSource();  \r\n Task<bool> commandRunnerTask = Task.Factory.StartNew<bool>(  \r\n () => commandRunner.InitiateRunOnNewThread(),  \r\n cts.Token, TaskCreationOptions.LongRunning, TaskScheduler.Default  \r\n );","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"","date":"2017-05-20T19:33:54Z","timestamp":1495308834,"authorUserId":"disqus:disqus_gFHel0qnPC"}