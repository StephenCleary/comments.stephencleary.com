{"_id":"8c2a2ddb-211a-3628-aeb7-be0eaf064ef9","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"Sure, you can start two \"child\" tasks from a \"parent\" task. If the operations are asynchronous, this would be best represented as:  \r\n async Task ParentAsync()  \r\n {  \r\n Task child1 = Child1Async();  \r\n Task child2 = Child2Async();  \r\n await Task.WhenAll(child1, child2);  \r\n }\r\n\r\nIf your operations are synchronous, then you should use Parallel.Invoke or the like:  \r\n void Parent()  \r\n {  \r\n Parallel.Invoke(() => Child1(), () => Child2());  \r\n }\r\n\r\nI strongly recommend the use of Parallel for synchronous work. It is possible to use Task.Run or StartNew with AttachedToParent, but that's a whole other level of complexity.","postId":"2013_08_startnew-is-dangerous-4c5e3290-63e6-3320-85d1-3054cbca80ce","replyTo":"e2017b51-c82d-3440-ad3d-c22808973a14","date":"2014-11-13T18:38:36Z","timestamp":1415903916}