{"_id":"b25a99e0-d78f-11ec-9fbe-51e073df5339","postId":"2022_03_cancellation-4-polling-2bc2dbc8-929d-3a7d-8b43-4cdda9797b62","postUri":"https://blog.stephencleary.com/2022/03/cancellation-4-polling.html","replyTo":"9379a380-ca11-11ec-a798-4fa97a27e0b7","authorEmailEncrypted":"RTV73P3cNyBhxkjf6aTeIrg1r+GdVFHgXQoyWgn1NNor+O1HaZb/psCbe8M5jLcqSBw7f1g6/mQ6rzbibuNRBQl08Df/WPV539YYM155J7iGDZniciCi5HPwxjsIbvrUIrY73yU2dILNK+vwhuAC6hcRZ7nMc4miwnuynz5xaR1ZhuaZtM1W+cxFc+N5KY/sndVuFPd9RCXI1UcZ+aDYCvOzWbLT/yCqJS/Ihxsh2wLONKMJy5xEmFh5fAbvHRC9Lda/e+9crpwIN74DD1NWjk/iG6nGbfqcGp0YMKBJgrexL/gKc4h0QZO1U4w8p74U/lx6Glb4uyayKOXi//YyZBNRhy8AbJbym0aC/n8V7MA4JlRYGbMsrUJuNUdZkuV+LJ9kkYokXW+rDzfXnfK3TUYL9+kTML8zaNATQxCoR7zg8gXzYM/A4eiA2/drQhZToD5KlNXns4hnSOh+IxDEqVRZyvq2Ni0VrqUmFMlDc4+sXiG/07bNoOo3zHrZHkDmwkdVcaYNk1ZwRpjFxombndaFo1LK+GTWWdUIQduKkqLbkL7s1KMIXq3tgKhvMXH3qcWJgUjEH1spsRbNFXSBNsN4UoCHgpIETrHF9eRKqjJHII4fiJAXjhJvSe9thNbOn74IGARP+Ngw/17wopoC3HVXQoB0WlVg3CXDlCofjFo=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"If the caller *doesn't care*, then `while (!token.IsCancellationRequested) { ... }` is fine; it's functionally equivalent to `while (true) { token.ThrowIfCancellationRequested(); ... }`. Microsoft does use this in their background service template, which is a decision I disagree with.\r\n\r\nHowever, it's been my experience that for the vast majority of code, the caller *does* care. And then I've seen the `IsCancellationRequested` code get copied and pasted and the result is confusion as developers wonder how to communicate cancellation - when there has been a common pattern for communicating that cancellation since .NET 4.0.\r\n\r\nSo that's why I call this an antipattern (which may be too strong of a word): when the caller doesn't care, both patterns have the same semantics. But one of those patterns can be copied into places where the caller *does* care, and the other one can't.","date":"2022-05-19T16:21:11.625Z"}