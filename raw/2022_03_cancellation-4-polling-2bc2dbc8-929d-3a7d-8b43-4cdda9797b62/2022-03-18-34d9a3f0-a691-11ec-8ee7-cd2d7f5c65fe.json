{"_id":"34d9a3f0-a691-11ec-8ee7-cd2d7f5c65fe","postId":"2022_03_cancellation-4-polling-2bc2dbc8-929d-3a7d-8b43-4cdda9797b62","postUri":"https://blog.stephencleary.com/2022/03/cancellation-4-polling.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Sebastian Schumann","authorUri":"","message":"Great article series.\r\n\r\nThe infinite loop sample may cause a hint in Resharper that the containing method will never return.\r\nMaybe it's a possible solution to create an extension method for `CancellationToken` hat will check the instance for cancellation and always return `true`. Something like:\r\n\r\n```\r\npublic static bool NotCanceled(this CancellationToken self)\r\n{\r\n    self.ThrowIfCancellationRequested();\r\n    return true;\r\n}\r\n```\r\n\r\nThe usage may look like:\r\n```\r\nwhile (cancellationToken.NotCanceled())\r\n{\r\n    // no need for an initial ThrowIfCancellationRequested\r\n}\r\n```\r\n\r\nThis does not produce any hints and looks much similar to the common antipattern.\r\nWhat do you think about it?","date":"2022-03-18T07:58:33.112Z"}