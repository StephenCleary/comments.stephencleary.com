{"_id":"075984d4-c35c-3960-a0ef-a0d87e32961f","authorName":"FedeSpagno","authorEmailEncrypted":"rFxpbjW2IzgwEtGlO/Lc+h90oLC+GoQaeaLcMjwZIVCbvF20x/PuFv1E4sLbj6X573eylNUw4SPE4017jWANnEyNI3nZb31PdWGJswYzfM6UQv+4udbbrknX+7Wu6JVwLPxeLTnGjq496My8Mbj7qgs1OiqJS4QrWiDe5zMvvwJx4ojDHsUfmUrpgm14FBZaHxEwQygFajDKNV1Qzhp8Gf9NFn8cKAZX16p7kHwhLeA3uyi03sduXKefpynebIHUi6lF4tXsEoDxFxk5Rnx+CQVTdt/fMqHutCG780ANItIAQIS4rf2AEtQJH4K/7XR3IaQCK/o9XkLvQy6kdePGKQzdkJDg1bjwLp2D9s0ZaEdU3YLVsOcMlxv+zWV6BpxKE3nc3HGSSv0YMyycReZT1gQ10Q9AWQtuix3QrRhJozSwNOb5ZNkqUsfmO0DOEFh0OgiSbc9ZMSyYYR7N4c4SdOwPjXRSDUd1K/LdojO0s4ZeR3p4ixwL6DbApPhY2AG9ixZB5JwxaC7kNoFSHSnPCnQu+0AzIVOnyMhBzRhyNteHVGDxRItEcy9qhTc3TSLV0SZQPLeKqReBvLyV+3iWda21eaS8j2Yn6WYP+X8rC3d9qYb6xEP9Gm2GqQsIfLUU2D330OQDr58ybR0ffl/liS/iV4AiG0iaYh4Jrd2pK04=","authorEmailMD5":"f454b0b4a77b28b32050f44a6f880dd7","message":"Hi Stephen,  \r\n\r\nI read all the posts about IDisposable, finding them really interesting.  \r\n\r\nI implemented several times the \"old pattern\" finding it crappy and rarely safe as expected.  \r\n\r\nI still have some doubt, that you may help to clarify.   \r\n\r\na) First rule,nullify objects (neither managed nor unmanaged resource): In Java this may help GC, Is it completely irrelevant in .Net? Have you some link /docs to suggest?  \r\n\r\nb) Second rule: IMHO the most important uncovered aspect is about \"ObjectDisposedException\". ODE check is tedious and error prone even if the managed resource is correctly wrapped, (you may need to handle ODE at higher level) multithreaded programming may become a nightmare.   \r\n\r\nc) Third rule: same problems about ODE, plus even if I like the separation between wrapper and close wrapper ODE may becomes more complicated.   \r\n\r\nFinally few word about the concept of \"Managed Resource\" and IDisposable.  \r\n\r\nIn my opinion the concept of managed resource is a bit vague, and is more related to the intention of the programmer. IDisposable for example is widely used in RX framework to encapsulate a subscription (see IObserver/IObservable in 4.0) , it may be used to elegantly pool objects, and i found other interesting application of this interface and specific behavior in .Net (aka \"using\").  \r\n\r\nI appreciate your opinion, or better you may think to a new post about argument.  \r\n\r\nFedespagno","postId":"2010_02_how-to-implement-idisposable-and-3c2fddba-b46d-3993-a628-227ff6988d00","replyTo":"","date":"2010-02-17T14:53:57Z","timestamp":1266418437,"authorUserId":""}