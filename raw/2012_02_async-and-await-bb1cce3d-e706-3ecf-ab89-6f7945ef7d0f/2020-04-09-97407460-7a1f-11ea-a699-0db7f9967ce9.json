{"_id":"97407460-7a1f-11ea-a699-0db7f9967ce9","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","postUri":"https://blog.stephencleary.com/2012/02/async-and-await.html","replyTo":"","authorEmailEncrypted":"vygtkPM1YuRTUPLHtTyl7sn1YF2lmZox8iRc+0gNn6EHypM1JFmyKCvGtchYvBByeWB0wof6OP7DoBmfsEVQX0W7fzc3Rf1BXb+wAQmrQz0lepEBMm6OhR+JXkye574ZJoOi4vkXrekIg/i1O718x7+Dv/5PWeGWbUXyC1IazZ/z7TT/nQYFpugNsDWkWJ4boAFZ8ddVGqWxUpZVNvj22O6lvoQJtGCfQhyIsB328owJXcCGKZAiH6IAbsLflVv10pc7ADGtQQfS0Kq+5tyJ5EY4PqBcHlsd4jkaVdAQEvPoZM/lpJeoRH6Z1dAhz3BXJ6dzAgM5NQLuOAYEBlKbjIYbVFBGpi34qAbKLqeGm5XcjfPbmZXqQL9oOREhLzBvm+3NEtqTzNYi6suEK5Q5IctboRhh76ZE+/dNW2szeBgHcQ/lgrwhiLPYtPlww7EmbF5tZvR/h17Ik5G1hZIPDr8O0VKmxf9r7tCEW4Y5cg0B8hetcse7rrE3++tu0CO18gsY0u83beAiV5OZO5UqujK8eMhJmvEG48PU9s0481tuZPC8JMKhKamenvdhhentwMWY7zM5f0BYZWXkO/3CbEzVoOr1ZrDlXAHBIF1GFc/fLqjDGVi5QN8M9AU3vP+OfAkhS5MPHYSriWsaQANCI1tq4dZYBtUGMMry28eSZ/E=","authorEmailMD5":"0de97dbc0a3c15a790472d559201a2c6","authorName":"jac","authorUri":"","message":"You write: If “await” sees that the awaitable has not completed, then it acts asynchronously. It tells the awaitable to run the remainder of the method when it completes, and then returns from the async method.\r\n\r\nLater on, when the awaitable completes, it will execute the remainder of the async method. If you’re awaiting a built-in awaitable (such as a task), then the remainder of the async method will execute on a “context” that was captured before the “await” returned.\r\n\r\nthat mean: awaitable captures current context which excute the remainder of the async method, so how to context know the remainder?","date":"2020-04-09T05:04:29.128Z"}