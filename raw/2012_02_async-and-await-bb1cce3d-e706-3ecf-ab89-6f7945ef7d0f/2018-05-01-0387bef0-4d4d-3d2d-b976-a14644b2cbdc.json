{"_id":"0387bef0-4d4d-3d2d-b976-a14644b2cbdc","authorName":"Stephen Cleary","authorEmailEncrypted":"oDzvHruQoikAaeOcEAenqiU3tzJ4OyHZn7NfyKl1kGnxhTLdr/CFqetR+f5VEUmwi0eW9aAADWBwWeeR+k5M1kMP5o1Wvn7pevLJ6zmFBayJ96TfGbqVibbf2QRYCibAl7hXFEb3o9g4E7efgH8FrR1m+9JydsVRUVfyvLtC/VWDQwTKfcb3KveY6J3nghuxA6aPVa7X+xoOetiupc84v/OV9GHemud8+XaKh0gwNn7dJCq3w8DeHjt5Cstp19pvzxgkEifw3/tsOU1GMe/4bmTsWuLHAppmxfv77JiRQ8S/7OZ0aL5FhKlZBKFk9h46mvFbXh9N+o5dYkOmqAu1AvqfGAlNSXc7LUal8GgsxPCA/wYGt/5pQE3OjhIC7yVaHdWenok/j82OHnqQfZfXLjF9ghYYIXbW+zhnhqttzip2/IMpcOSPN95pcqUmY+didrnYpi2G961KB+vxjuRLPuCZs5NeIFlS27WrkRtWH9a8iwhnGjr/F843Wd5xSEt3CX+oADHJKufiKz1f3/ea3iBj22T46BIYPr9+c+EWHGWEmo7Lv1MEXDnVlUWBwY/6f4z7TmTKHaJ2pMzf9/AQRCNyZgztoOROUnAhGjz6AA734IIyfFObc1eYmunPZ0bkL8coSlQZHHujMDgBOe2RnukZWXHCShY/ZOAuINLePEk=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"What eventually happens to the thread depends on what the code does upstream. When the async method hits an await, it returns an incompleted Task. The thread can do whatever it wants.\r\n\r\nFor example, a thread *may* choose to block on the Task (e.g., by calling GetAwaiter().GetResult(), Wait(), or Result on the Task). In that case, yes, the thread is blocked until the async method completes. Please note that this is **not** recommended usage! One of the key async principles is \"don't block on async code\" - not only does it prevent the code from actually being asynchronous (obviously), it also can easily cause deadlocks. Instead, you should use \"async all the way\". More info here: [https://msdn.microsoft.com/en-us/magazine/jj991977.aspx](https://msdn.microsoft.com/en-us/magazine/jj991977.aspx)\r\n\r\nSo, how about a more realistic example of how threads behave in an \"async all the way\" scenario?  \r\nWith \"async all the way\", each Task is consumed by an await, which means that method returns an incompleted Task, which is awaited, so it's caller returns an incompleted Task, etc., all they way back to some kind of entry point.\r\n\r\nMost threading scenarios fall into one of two styles, depending on how the entry point works:\r\n\r\n1) Message loop. UI threads that use \"async all the way\" will eventually end up at an async void event handler (or what is logically an event handler, such as ICommand.Execute). In this case, when the await is hit in that method, it will return back to the message loop. The UI thread then continues processing its message loop normally. It is not blocked on any Tasks. It does block on whatever GetNextWin32Message API that it executes in its message loop.  \r\nEventually (when the operation completes), the continuation of the async method is queued to the message loop, where it is picked up and processed by the UI thread like any other message.\r\n\r\n2) Thread pool. The most common example here is ASP.NET. ASP.NET threads that use \"async all the way\" will eventually end up at an async Task controller method. In this case, when the await is hit in that method, it returns an incompleted Task to the ASP.NET runtime. The runtime then sets up a callback on that Task and frees that thread back to the thread pool. In this case, there's no blocking at all; the thread is completely free to be reused by other requests.  \r\nEventually (when the operation completes), the ASP.NET runtime grabs any available thread pool thread and executes the continuation of the async method.\r\n\r\nThread pool threads without ASP.NET (e.g., via Task.Run) behave similarly: when their await is hit, the thread is returned to the thread pool, and when the Task completes, any available thread pool thread executes the continuation of the async method.\r\n\r\nThere are some more rare scenarios as well. Sometimes it's useful to have a single thread that maintains a queue of work (similar to the message loop), but without any UI dependencies. This is more rare but certainly doable.\r\n\r\n---\r\n\r\nIf it helps, you can think of async/await/Task as just a nicer syntax for setting up a chain of callbacks. Each await registers a callback with the Task it's awaiting and then returns. So when you have a chain of async methods all calling and await'ing each other (which is the common case), then you end up with a chain of callbacks, starting at the innermost Task and pointing to its caller's method. This is how they actually exist in memory - as a chain of callback delegates.","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","replyTo":"2bd586f0-f2e8-3c7b-a28d-37b58589fe8f","date":"2018-05-01T14:47:32Z","timestamp":1525186052,"authorUserId":"disqus:stephen_cleary"}