{"_id":"98fd8b6d-0cd5-3c62-837b-ff4912b026de","authorName":"Joe Enos","authorEmailEncrypted":"","authorEmailMD5":"","message":"Great article.  \r\n\r\nJust wanted to clarify something to make sure I understand - I haven't used ConfigureAwait before, so I want to make sure I don't screw this up. Suppose I have MVC (regular or WebAPI) as my entry point, which calls code in my business layer, which in turn calls out to another API somewhere, and I want that all asynchronous. Assuming I want my controller to never lose its MVC context, I would be safe using ConfigureAwait(false) everywhere except the very first call from the controller to my business layer, right? For example:  \r\n\r\n// In MVC  \r\npublic class MyController : Controller {  \r\n public async Task<ActionResult> Go() {  \r\n Foo something = await _businessLayer.GetSomething();  \r\n return View(something);  \r\n }  \r\n}  \r\n\r\n// In my business library - a separate library which knows nothing about MVC or ASP.NET  \r\npublic class BusinessLayer {  \r\n public async Task<Foo> GetSomething() {  \r\n return await _myApiWrapper.GetSomething<Foo>(someUrl).ConfigureAwait(false);  \r\n }  \r\n}  \r\n\r\npublic class ApiWrapper {  \r\n public async Task<T> GetSomething(string url) {  \r\n var httpClient = new HttpClient();  \r\n var httpResult = await httpClient.GetAsync(url).ConfigureAwait(false);  \r\n var content = await httpResult.Content.ReadAsAsync<T>().ConfigureAwait(false);  \r\n return content;  \r\n }  \r\n}","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","replyTo":"","date":"2013-10-08T00:28:22Z","timestamp":1381192102,"authorUserId":""}