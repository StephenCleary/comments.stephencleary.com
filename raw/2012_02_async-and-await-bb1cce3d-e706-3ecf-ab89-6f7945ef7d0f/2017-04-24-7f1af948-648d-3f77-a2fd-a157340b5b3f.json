{"_id":"7f1af948-648d-3f77-a2fd-a157340b5b3f","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"For any \"library\" code, you should use ConfigureAwait(false). For \"application\" code, you generally shouldn't.\r\n\r\nIn the particular case of ASP.NET Core, it doesn't matter. All awaits do not capture a context, because there's no context to capture in the first place: [http://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html](http://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html)\r\n\r\nSo on ASP.NET Core, ConfigureAwait(false) doesn't do anything at all. It's neither good nor bad.\r\n\r\nConfigureAwait(false) does not cause a thread switch; if you did force a thread switch (i.e., \"await Task.Run(...)\"), then yes, that would be bad and harm your scalability.","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","replyTo":"6168f416-1a56-3e20-8288-41331078d043","date":"2017-04-24T18:35:55Z","timestamp":1493058955}