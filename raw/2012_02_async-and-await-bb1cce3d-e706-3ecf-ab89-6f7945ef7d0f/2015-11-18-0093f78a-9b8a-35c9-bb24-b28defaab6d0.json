{"_id":"0093f78a-9b8a-35c9-bb24-b28defaab6d0","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"In general, I recommend asynchronous database access. The question of whether to make the calls concurrently or sequentially is not one with an easy answer. Or, technically, any answer at all.\r\n\r\nIf you have 3 database calls to the *same database*, then it really depends. You can make 3 concurrent calls if your database backend can scale - e.g., if it's an Azure SQL or NoSQL database. If you're just calling a single db server with a single database on a single disk, then there's (usually) no real benefit to making the calls concurrent.\r\n\r\nAlso note that Entity Framework requires concurrent calls to use separate database connections (contexts). So there's additional overhead to consider there.\r\n\r\nThe only good way to know whether you should make the calls concurrently is to do it both ways and measure the difference.","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","replyTo":"c5051e73-3edb-3aaa-996b-d3f260f00157","date":"2015-11-18T02:10:10Z","timestamp":1447812610}