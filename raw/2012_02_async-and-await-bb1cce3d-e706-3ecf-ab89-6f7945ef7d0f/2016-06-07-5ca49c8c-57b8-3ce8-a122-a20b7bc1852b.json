{"_id":"5ca49c8c-57b8-3ce8-a122-a20b7bc1852b","authorName":"AJ","authorEmailEncrypted":"rAT6Yc7mgJYpZOrvFwsyZ/sQ/HN8ppGeAuLXezwPJuXzZgvgxg6pUlRaMVGU0gPKNpjGAXpHxQaV9pEVjzJSvJ6S+nT6wAx2sOBe74j6UehoTBzs6gCiIzHm2Tr0FgZYQ/Ye8LLLv4ps4z3HxLqDBnzVjzS5BD+PlzveKQTqlaT6gXanmUQ8T8qrsJUyRvjskEUTeXHTre94XNhu+UTUMY1NkXjzcbWIgCmmhEU+jstkZzJOeunqmAz4rNgd3Y1HM3+CczdFHIEzISRw1HNl497oXJbZr7LupIALeIAT73aBlnF03JNgTc7FfpNP7Q/TDzhX9Muxf4MADwRLcQH1i9sCC2j53V9eOmP8UsUlWH9HpDUKuu3GJXAW6CjWqyk2Wh/Fx7bwc5aw193maCBr8vz1qkz/XR+reT37duFZCPOfxk51PsD1Sg9w7jLEMuTCTjyq76AvBul9J18wvbfw7l3NZWf4cZO7HCn4RlSCeIFAEcRTAzS1foeAew9TMf+qjtS5YACBR+qpAwFBlTHorppgusyxrdEaQMw6SVfV9aE3V+xQkZzU22NpbHwIaoFshVQtTU5Qtat6RY1109NaWEd1NIZiRn8BvjszN1eEBxXVhqH1GgJ6GdRIXY/EwBvNSPnTYts1VGSpIX7piPrg8NSBDqq7SanKlHDl4pZ90bE=","authorEmailMD5":"b84e9d97a4571dbf590e639328016d8a","message":"I ran into something strange today where it appears that I could not use the await syntax.\r\n\r\nI have a method that uses a global (named) mutex and it has a helper class, but basically it is wrapped around my code via using(Mutex m = new Mutex(true, \"MYNAME\", out _owned)) { }\r\n\r\nWithin that using-block I have to call an async method (or \"want to\"). Calling it with await (even without the ConfigureAwait(false) ) would seem to allow the method to run correctly until it hit the Dispose() for the named-mutex (which is attempting a m.ReleaseMutex() ). This consistently threw a System.ApplicationException: Object synchronization method was called from an unsynchronized block of code.\r\n\r\nSo I guess whether or not the \"SynchronizationContext\" is maintained, the method may continue after the await call on a different thread...and that blows-up the ability for me to release my mutex.\r\n\r\nChanging the call from await to getting the returned Task and performing t.Wait(timeout), then retrieving the .Result works. It's certainly not elegant.\r\n\r\nCurious if I missed something obvious, or there's another way to ensure my entire method runs on the same thread (due to the Mutex needing to be released from the thread that owns it) using the more elegant \"await\"?\r\n\r\nThanks for a great read!  \r\n-AJ","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","replyTo":"","date":"2016-06-07T00:32:01Z","timestamp":1465259521,"authorUserId":"disqus:disqus_1uUWOrHsTm"}