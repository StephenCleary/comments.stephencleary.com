{"_id":"c332cee3-4520-3499-bc52-3754e8ba0761","authorName":"Oleksandr Ekzarov","authorEmailEncrypted":"dZwWzGaFYFvhbqJDdprtMFJdwV0mACOPtI3JFNgyPppvMunSf6OvorZOCR/ENUvUtfXHZwjOFdpQ8Y3VrLOc/IuhX1JpHkDiHBVsuFhsn5fax5ClWTWfVMJkEJssHnHMCxhiPEiuJg4DDLbYr9Ti3mOe55+dgnA/y8G72wKcg3kD5Gt60my50jJh6ZSHl02q4p7BL9iBXdXVxNTO0hf9ECIN+p3hMS3BdsllK3kSjGvWxWbVi+Q8eraln3Sw7ceZoCtQkv8QruH4lg38WZjyKPEggGJbGwZ/H+x/nlDUXtX8CLVQt7T0x69ZwO077c5TrT4B/VQsr7wpLV9sc9yVP0ayDjlxBbaa9ByhGPp5KVMD5Ugzs1PIgVXmJWz9volt9/OC6daCkRMCQ4NJkL0JNcbBfZOUgKIjEQSXJDznJQVa+NMgFgz9ANTFkUADYX/CW9X7lQu16NGYCimo/u+pxu4jozeQelMTej4GOVJz9RmObfSATPh82eUXcOCyhpWp0+FwBzBAw8wh0kiYGYqDBHzly2pRMaoPz5EHZp4pMn3UAnsT0WeVRFlmqBaexXQ0mWlXrOywKRVXq/kxAFau6ryi8bKkRX+9YbS29iPjS80vcwDvxjeHwWQW81CXitX+Wo3RXxiLhVdGbIXKvvhOnHehm+5Arw1dwYSNX/60q0g=","authorEmailMD5":"18cd2a6663b6a81d3074260cccc8c9f1","authorUri":"","authorUserId":"disqus:oleksandrekzarov","authorFallbackAvatar":"","message":"Very usefull article Stephen! I have one question for me is not so obvious.\r\n\r\nHere is an example (In Web Api async controller I have asyn action):\r\n\r\n.......  \r\npublic async MyController: ApiController {  \r\n ...async Task GetInfo()  \r\n {  \r\n await from e in DbContext.Entities select e.ToListAsync();  \r\n }  \r\n}  \r\n......\r\n\r\nSo, we have SyncContext which is request context, which in turns is separate thread(T1) from thread pool, which  \r\nactually handles this request. Then we make call to DB (by calling awaiter), which makes free our thread(T1),  \r\nand returns it to ThreadPool (so it become available for other ASP requests). But which thread executes awaiter itself in this case?\r\n\r\nFor me it seems, that we just release one thread and hold another one (for awaiter), but in this case we are loosing time  \r\non marshaling contextes. So WHO executes awaiter in this case? And what advantage of using this in this case you see? Or maybe advice me some tutorial about this.\r\n\r\nThank you!","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","replyTo":"","date":"2016-03-15T14:18:19Z","timestamp":1458051499}