{"_id":"fac3ef20-d607-11e8-9cf8-c9b6ddd6c0e8","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","postUri":"https://blog.stephencleary.com/2012/02/async-and-await.html","replyTo":"6f0b85d0-d556-11e8-b679-9f4cb5de2438","authorEmailEncrypted":"eo6ZQD6Nj//anUHXEfqfCjlFLHrOwEl8LH0ruD84BhHBYtWyFr8J2O683cbK/kUoK8/Ee7plQoup+aTh39e1BGctuv9+ul7gEmD82OYwYe7FAhcyf6nHgcPKpt5JPdRwO04fEknXfRkPsHu3zyAA2ISQt+740kXilo0LDSt1r/wzQUXKhKSMSJno++sM/6VFQZYMCezV1jOyeO5/tNgYy6FDJqh+1pxzzE0RUQHgXJqLQl3bU97UXjSrKvuI5p+6kWOPz92/v2HrMx3gw0gTJpZ9KINr12H5Fy+flgcN1teUn3vfuvlM0yrXKjGJIjtFGXsMLC/lek4+pzwhsJum8SgEN7UAak1O6RF9noDuwqWaGFEagQF5DmKAVGNGlSO2s5XcBg2c19dlceId3DNKpgk5BixNjXcDFfkOZ/cQSWbllWgKcJZ71vqfaEXZlgORpAeRTHWl3x7o7WtvoHZGYA6peqE6MbqHoicJJKYsRFTgwNz9xKkid+rfImgV4VYB830wN1QDorwM1TXO4Y5om0LmJMGbuUu67eO0XqWi1L4jsryQ1s9VCt8Hh3FROD95+KydDs8oqmMNtzjDFjNbWyVKh3NVoQ9htSeVNSjfD0JoUmDNTGeaygCchG1WPouWGLs21EECdtjeDWkM9grgFYTuVcFtlGk1g1o2oaQnTWA=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"1)\r\n\r\nThe statement `await Moe();` is the same as saying `Task t = Moe(); await t;`. In words, what is happening is that we are calling the method which returns a task, and then we await the task.\r\n\r\nThere are several possible scenarios where a task may have completed before the `await`. It may represent a cache hit; if `Moe` downloads a resource that is already in an in-memory cache, then `Moe` may return a task that is already completed. Or it could just be a very fast task; if `Moe` just delays for 1ms and the calling thread is swapped out at just the right time, then `Moe` could return an incomplete task that is completed before the `await` is reached.\r\n\r\n2)\r\n\r\nYes, the \"remainder\" is Part B. That is, it continues executing the next statement after the `await`.\r\n\r\n\"returns from the `async` method\" is referring to returning from the method that has the `await`; in the original example, this would be returning from `DoSomethingAsync`.","date":"2018-10-22T14:37:19.888Z"}