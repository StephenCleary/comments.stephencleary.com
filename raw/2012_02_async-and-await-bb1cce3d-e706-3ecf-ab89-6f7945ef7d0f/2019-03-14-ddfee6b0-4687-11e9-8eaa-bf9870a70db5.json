{"_id":"ddfee6b0-4687-11e9-8eaa-bf9870a70db5","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","postUri":"https://blog.stephencleary.com/2012/02/async-and-await.html","replyTo":"f1318270-4681-11e9-8eaa-bf9870a70db5","authorEmailEncrypted":"djzzHIrMYWPpaUQ1h/fp9cXa9qusAuaJ4EUY2NBO8YevLXsYZ9uEu94o0xjoGBLjDvpG36WL/+srgcAC11yG026bJTS5UbSG/A9+3HBMpSlUirLHPS7jjHT1OL0EaoEJudLS0uI5qCg1BoWT/ikTsvVeVw7OT80MnQpJystKkYLWQnvpGa9e+c0egjDYRNSVNQ7uFf1fTDnSnj0HpeiDWXmASGaZiD/3DshMu272prgWQ1Euloi1ydwdZXB84ksEDXevfE7I8GlxnocwECUKKTgZEKCW5GADva+EuDejZ4QVjdsikde/bcAsibRjUa2jFRFADLbzfSj4S4cdblZAOA/hm3FS7v0KGLg6RWoqX5bx92XCAWCR4tWA4/9Z+MnpbFwjNTjb/aznh4ycEyPzhDBzAdBAuW22a7/sjQQNqXcJGaUyDmA5qsMzsfBF76MCwgIbZtlBxEFgcQhkYdhRsKbjGgwFGfm1148uWDhYku3Go/MzG+RXfSilqUAy78TsomFNxrWR+TQMhDL99hZCFxgLs2ZL5rdPje0YFUmevi428o3kwiZQM9zQiKWBHeuEq8ycQe6IuMYKDFH7jH5VphKkFZ1jXpCszaEktpZI3lPJzQ590bt727v/ykIyQOUGz5hvPUm0rWHrXYT973gbfw+g17IriheaOJCNAfYWJog=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"The answer is \"it doesn't matter.\" `SynchronizationContext.Post` is called some way by something.\r\n\r\nLast I checked, timer events fire on thread pool threads, so a thread pool thread would call `SynchronizationContext.Post`. More specifically, there is one timer thread that queues up the timer events (to the thread pool) as each timer fires. But this is just an implementation detail. There are lots of low-level optimizations around how `async` uses the thread pool. It's entirely possible that the timer thread may change to understand `SynchronizationContext` and queue the timer events directly to that context rather than a thread pool thread. Maybe that optimization is already there. It doesn't really matter.","date":"2019-03-14T18:34:57.629Z"}