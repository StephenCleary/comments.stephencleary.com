{"_id":"905333d3-542e-3bf7-a42d-38b630345704","authorName":"Stephen Cleary","authorEmailEncrypted":"aaLEBQaQ1Y6T6VTIR06AhDvCsHHvQQaS9pxGGhTTaeQ6hNAvtRLh59c2RFEbAcF+xhltSoUr40eWsAx27shemsa10+lxEONFjXwX5qQ1/LcNTkx5djABk16DRj3D1bKJeq4zEwsFZ/KVS7MFGwecgGPl9D5hvFBqrVwrrZzkd9nzj9VnCV0W/Bvv/ShxBQ8IxPIpcKb/Jg5gTHJmpOYZwslj8yAItaU2tXwyueodedgs+8orn5CZCPjqGgbsm3ELOzPQAcHPmWZDIUNAWjG3S+o3BOKsHD1+8FZ5NJnzz6JckozL7YeSjYClH6mSkuy+5iSnnZWgI03wdvVMv7dy2DFht2vthskcvTlIeQ/NMgknWtRYQPT+68T8EdSA4ojggX98Av5uvNUiAvPpM8dWhgXPl+gh+S0PBV8Deb8VG9soOPDAxQWk8m17AEYxOIKXxRcqn4wBLNVzkGQ9a88EQDUsGI0F2eYFCrKt+nLLikulKaiLZDF/lWGugx5t7cduwrEbziboLo4P34LmCgsbAPi4+heHhAH7xumGjGlaJA2WTI+XtCRwT1ptMPhERcuqCQ2PYzme2HTbGOI16aKi4WvzmO93xScDcDGLfMR/y9G3c4L8SxXYdblOqiNs5OL/UUQHyk2PIc6CdE6PHnocchlDbplMDNKrwxo+R5Qac8o=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Don't ignore the compiler warnings. In this case, the compiler notifies you that DoJobAsync does not contain any await statements and will therefore run synchronously.  \r\n\r\nAs I said in this blog post, when an async method starts, it runs synchronously until it hits its first await. Since there is no await in DoJobAsync, then the entire method runs synchronously.  \r\n\r\nThe problem is in Thread.Sleep, which blocks the current (UI) thread. You want to avoid long blocking like this in async code. To fix this, you can replace Thread.Sleep with Await Task.Delay, which will asynchronously wait for the specified amount of time.","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","replyTo":"","date":"2013-07-30T17:23:10Z","timestamp":1375204990,"authorUserId":""}