{"_id":"b54a93f6-1357-3a18-a59b-25ae0868538f","authorName":"Stephen Cleary","authorEmailEncrypted":"Mo/s/kvmw+wH7hPrE/UqSxfr+Qc2DA4D9zrfnCF9+szKhUsm1k4Wk70Po8undm8mqTRNGOlR+uEP4v4L48BZH6fM+MUwXMcBazFH3z3Sd1SihL2A8vDsMpcZkyElTCP2IL/DpOSznblBRuwXFx9ek01FaOxvOZ2uoKNdRDwaHVq1DiMhCmD4FTDp2qg8sMPjBGpcSxk2VEv0wd70Po+NpCx/f+/FKlaJlk9P/6mUXPFUo26Qcft8vUobjgQr3rcBsVMiUuV85fyq81fOb8tOPvgGKvMydWBGy3jz3vn5iqNnJPok1LBlDxb9TGYgQrdvllAZT0TBZ8HZtH8v+3nylKUgKrV/u1lwQ849V02MEGNOjj5KVUKPV2nmmOq7vCTaN77lARCOgnnOZeSmlXb3rh2VgoIOpWCsZkCrXQUS4KHJjp3E8L++BwyCr9Wo+jErcVFBm8i+GXAYg3VYsKmdDEc11tbk6Wf68ueFpi0TfE3q1LZQsvsJLhCKKytoR88yIz7kxfdV80MPmmmoYw0VOSfZXNxI+CtoJmezgRKSf5qcXIABRwGFnNIxZhIlb+/EmaO4NnLX9xGWm2lo79zVkyV9FsRUYuMnlSgM2YMIKJGJqxMfmRtjiRBd2wfcSMS2CSLlE/GiA/m7GbTrVrkehvRzRAE+ENqojQDppX0Kpqo=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"No; \"async\" doesn't mean \"run on another thread\".\r\n\r\nThe way it would work is like this:  \r\n- TestAsyncCall calls DoSomethingAsync.  \r\n- DoSomethingAsync calls Task.Delay and awaits the task it returned. This causes DoSomethingAsync to return an incomplete task.  \r\n- TestAsyncCall stores that incomplete task into TaskResult1 and invokes DoSomething.  \r\n- DoSomething returns \"synch\" to TestAsyncCall.  \r\n- TestAsyncCall stores that string into Result2.  \r\n- TestAsyncCall awaits the task returned from DoSomethingAsync. This causes TestAsyncCall to return to its caller.\r\n\r\nsome time later...  \r\n- The task returned from Task.Delay completes.  \r\n- DoSomethingAsync resumes executing. It may be on the same thread or a different thread, depending on the context that was captured by its await (see my post on this page for details).  \r\n- DoSomethingAsync completes its task with the value \"asynch\".  \r\n- TestAsyncCall resumes executing. Again, it may or may not be on the same thread.","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","replyTo":"a2335ec3-165b-32d9-82ad-a616eb4de913","date":"2017-06-26T13:53:14Z","timestamp":1498485194,"authorUserId":"disqus:stephen_cleary"}