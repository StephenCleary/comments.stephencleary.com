{"_id":"1f0c5c2c-bc2c-3f52-bf84-f97b1d65ab9d","authorName":"Grateful","authorEmailEncrypted":"oYiycbldXGbJk0ZM9N8cRfySztJB0SB0kUybdX10NtXB3SgYY7xbTPHsYESjB3hqGqv+Td9r35WAdle3jpntl9mQ77fH7ynrEhquprsZY9IoRd3gPkn9OrvJ3kFs2ReRkZUcTNHkyDS5Ua6H4gZHsqyRKGQdU9WUD7Oe74tx1jVLDmwQWAU8QqrPVoPUNtVDpEJIx/Hu/p3fQTOZFeYcXkyMoMqRNagL1+4SkfnBLM74S3zjs7pnJGBpsyMphUBSv2Xglv65mxXmknLbFQ7dio0dfGHQSN18qyPefHNLsHtSFr/BHnj5Tloo7vzCfR9B0XCqgEBrpuk9yiMTMPsjLjvmCyjDR/nmwkc0Zy4eKpPbMRcVWZQcDjfWC/XEZDLNfGIB4MNlL8Ex7CR0BpJLiaxu6bWXA7rOVd5dvB7u2FalI94BcePr/Z5KMSdBSvkDMMdnR7b/G8bshbwl2a8sKOTjReL47woHeL5bpc7U0OmGvVo1JV3KsDQOPOk9FqHrGk8tAl/7s1FgiXYjfHIRsdTZzxvaA7HlPPluUM0RJDp7W3BlPurg7sWQWgEdTItha10TUZ5s4MF6c9uY6WoydtduuwKwGS5O+PCg9nXOyzAUrkRw7NL21bwh6AdBdqiWzXMcCSQ3zB3M/kHbA2zYgRuP9o2m4bSAf3e0px4JPk0=","authorEmailMD5":"0c2887c19932ba204e4abe9336971ade","message":"Thanks for the response Stephen. I think I'm finally grokking this stuff after banging on it all last night. i.e., It seems that my original statement \"So, for existing codebases where you have some long-running operations whose implementations you have to or want to leave alone (instead of changing them to async implementations or adding an async implementation of it), you can't just easily \"wrap\" async around them.\" is actually true. As you point out, the bottom line is that it doesn't even really make any sense to try to do what I was trying to do (because all I essentially accomplished in my 2nd solution was just moving the blocking call to a thread pool thread). IOW, it really is the case that to have an overall architecture in which asynchronicity is being sensibly utilized, the participating units of work, so to speak, need to be operations with async implementations. So starting at the beginning again, what I would really want to do is to supply an async implementation of the clsSlowOperation, instead of trying to \"wrap\" it up somehow. I hope that all sounds correct.","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","replyTo":"d7570814-2c26-30db-92bd-9b1ee4c9d8f4","date":"2015-01-04T22:38:38Z","timestamp":1420411118,"authorUserId":""}