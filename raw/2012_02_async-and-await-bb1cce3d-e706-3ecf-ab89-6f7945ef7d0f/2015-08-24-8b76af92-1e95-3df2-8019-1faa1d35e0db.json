{"_id":"8b76af92-1e95-3df2-8019-1faa1d35e0db","authorName":"Varun","authorEmailEncrypted":"uYjoDDhuNGR7AaO8CcfiHQM2TfbVjLmKHz/9L3H5IJwXQ8lBgEV3YhPpEnwwKUgshsK0T+TEny0INhe5jehuvOjYewCLDO7e0yGDu2Kryoj7XgJhcSysUdg8gQs7s70gynSLUshHuyMYLgznm7CXqFp7TE8VOpJ/6BmT3I2OZAD6RtXueR8khoEx7lrC7WehlZKYs1eUYRI5EJQyP2Jf9KzqAkcH6EDIdD25n62jjgOjgDz14jvdyIRr64mM3vmi+iPx1MfVN0nE32kSzDwz5vk/e2et5b4p1wKhKR4RXnd9GrpqDZAW526Pl6z/31Yy0k3CZXC/uUnIncvGJVXau2Rvn6OHAVTIoIz9PdCN7KQbo+B2Z9yMhqA53HNY9xS2P4YZHgP1BognDooOf/SZh2BsSdbFDXyJzmxy8LOapfA33TQb9bgWTaxroVcPKu+S29zCN4UCe0nbGZyGnrEz+4LX49nZjBhIvK9+ORDmRYnzC7rltrj+kWYoZWz7KpgBOpPZu31+SDPXfxcW0FekKUOdr5ln+CmHb0QlVIZM3YFHwakpa2fB1xfIZOZf9cIqXIolVB+cp0dwx/LJvI6nlXhsgP5H8nZi3IA+n3suV0Pq25mMAuep6pC6sI3KM7aV0/ARe8YRyyDz49+CJB5JdxFdqo3PUuUVBkecUCITOkw=","authorEmailMD5":"72bc0f61aa977594b000207e747601cc","message":"Hi Stephen,\r\n\r\nI have around 50 operations that needs to get the results appended. Each call takes time to complete around 1/2 sec and then aggregate time actually hurts performance. the example is in phone application context.\r\n\r\nI had implemented using   \r\nvar resultList=new List<resultmodel>();  \r\ntasklist.Add(httpclient.GetAsync(url));\r\n\r\nvar result =await Task.WhenAll(tasklist);  \r\nresultList.AddRange(result)  \r\nHope you got the situation.   \r\n1. To understand configureawait better way, Its a mechanism to avoid UI threads to be resumed from the async context (waiting to the await to complete). So this means that if you have .configureawait(false) the control is returned back to threadpool and the rest of the code after the await call is executed on UI thread.   \r\nIs there any better way to execute this scenario.  \r\nRegards  \r\nVarun","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","replyTo":"","date":"2015-08-24T09:48:44Z","timestamp":1440409724,"authorUserId":""}