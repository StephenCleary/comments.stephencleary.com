{"_id":"f03a6e36-cca1-3533-acfa-2202eba15e31","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"It's because the tasks *start* when you call the \"*Async\" methods. So by the time you await the consumer, the producer has already started. Await only (asynchronously) waits for the task to *complete*; it doesn't *start* anything.  \r\n\r\nUsing separate awaits is also an option, and some people do prefer that method. Personally, I prefer Task.WhenAll because IMO the intent of the code is clearer. (It's also slightly faster, but that usually doesn't matter in the async world because it would be dwarfed by whatever actual asynchronous work is being done).","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","replyTo":"","date":"2014-05-17T16:14:43Z","timestamp":1400343283}