{"_id":"2d3a2fe7-49b7-3dc0-ac47-e71bc8b2242c","authorName":"Stephen Cleary","authorEmailEncrypted":"JTukgv4dqIzJYlhaiOXfiobYMGVKIKUQrqhy2SvovV+s1pRHD2wcCYRIIbduGjgbZ1EDAjep1z1HCCg4a6b7W988M45PNPa333fzhRPTLr8N55NBp8DWls6m5LDFcU4ifV0IxDlJ0OO6RD0WIxYowZLN9517RLkgHH7dqfMA5s74I8OZpu0u2D4xaGsWTTbd++PUc8XZwDrZ2c1rcZRDgNq5+CY1dpvcsDlXrONdTrHLUXzwTvUb1JQbZV8FIuqp1poix1c6PLOh+wB6iFDb85/TbkGBfRDb3jfjOhV/jzb1+ckzvo+9VNNnfUc7XcG+Ojkb2w1T/IcrUZz6AzTDeHzKGB0jyyxsmYnGrCloGz7Omx0jslqrCeFt8R3kaXz3wPPnPkOjM7avmDFHOXTE/N8i2nZUEWh7ObF/22jagWtZlsXQETdJouG4m2XL7dBJX07Yw7IYo0DZQ0ejjOYLszaxZ5UjEhBdTcEeU5nmzdXmCfooqVBoCO3+wvCA0YzxI44SntDnGf4uP6H1zyz5K6VFpqJLItOM1PakDR8rnWjzmp/4bx0RAyNvouEr0OwvQMGB+VCwuIbdSI1xI2oubZB+6Vd+o0kSAjuINGdzb+mxh7tEXYz0Mw3ipQkSh5Ak2sIFLGZrbGE+riWCkm7YsxmTv9tWaDPcW7Xs2ZyHKQo=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I don't see that in that article, but that is correct. If your example was doing something that could possibly throw:  \r\n\r\npublic async Task Get()  \r\n{  \r\n var data = SomeMethodThatCanThrow();  \r\n return await ExecuteRequestAsync(data);  \r\n}  \r\n\r\nThen in that case you would probably want to keep the async/await. The reason is that if you keep them, then any exceptions from SomeMethodThatCanThrow will be placed on the returned task, which is what the caller expects for an asynchronous method. If you remove the async/await in this case, then any exceptions from SomeMethodThatCanThrow will be raised directly to the caller.  \r\n\r\nThe exceptions are not ignored; it's just a question of where they go. A method with an asynchronous signature should place its exceptions on the returned Task, not raise them directly.","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","replyTo":"","date":"2014-04-23T17:15:50Z","timestamp":1398273350,"authorUserId":""}