{"_id":"50b9f880-e4b5-11ea-9a49-d5f8577284ca","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","postUri":"https://blog.stephencleary.com/2012/02/async-and-await.html","replyTo":"","authorEmailEncrypted":"vq65jRZSdXgMxqtf7j3U92500UT8xsnGMtGbJqm+PECPrCfB20/DIX9rj/wvheowoWA0k+Ex6ew0TT7DARjNkCvz/KKf+ZpQfwKzrxUZsprjomhldAMdCyZ7ZtVc9UReeM7vNAOeKkPCFlOYuYMj6gEWcr1xBO8UFuH8pRGylW3jeiK/iOoaJPjNJ0lZXVchErVabQB16aEMc61zj/B18zWaa/yyUlw62+9lD8r2U11WC+c1CNaxxe8iG4vh5nd+DF5qvaAIRMX/aKIfAY3SapGVwrdurndKrZ/pUB9eAiumoTCZbRcEL0EFpyWFxOFb1grE2j5qibwUSw/j9yDFNAKK8ORWa5Gy5ZFpFYRgkOeVPZDdr6NZWlZ9l0cgRLWJbTY0pq/p6tvtV4coyiMGGI5NkfjCOyEyHkudomGDC8CLf/vZHDBUGy4R3sK/au54gdOSLyoczELss9LRf2cvyb8faOWO16/fnp6HljkN8yfRi2Gw+EifW7/XhuSj+MVsswBje6uUufrepaQKI3ao2xRIdK9Z0yLKo2OS3deVLbnRFWNrB2/Jkis+/ULNkmMoF+rIRyh5EkAn0ylFxxfRjdtYusP9+yJ+gDpM1MTwMqhSwtaqaG0kdoOSQ7awZbl8KcrOlBz5uPdSg0/ARGPy+5/4N1uofuiIaWf+y9KPhho=","authorEmailMD5":"7f18fe0b44decd628d126e932695a661","authorName":"Supi","authorUri":"","message":"Hello Stephen \r\n\r\nI noticed that the signature of Task.WhenAny is different from Task.WhenAll. Task.WhenAny returns a task whereas Task.WhenAll returns an array of results. \r\nWhile I do understand that Task.WhenAny has to return the task since if it had returned a result, we would not know to which task it belonged to. \r\nBut my confusion is - why await again on the task which has already completed. \r\n\r\n// awaiting any task that completes first\r\nTask<t> t = await Task.WhenAny(task1, task2, task3);\r\n\r\n// let's say task1 completed first - and so we know for \r\n// sure that its completed by now\r\n\r\n// why can't we do this \r\nvar result = t.Result(); // since we are sure this no longer blocks\r\n\r\n// instead of this\r\nvar result = await t;\r\n\r\nis it because we want to avoid these older patterns in favour of newer patterns ?\r\n\r\nThanks.","date":"2020-08-22T20:23:18.507Z"}