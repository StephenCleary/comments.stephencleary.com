{"_id":"fac3e235-8c1d-3abc-af64-0e271c3d5d61","authorName":"Grateful","authorEmailEncrypted":"AGnvVyb/oPu9P2lb2E3EhTRh6/2E2/NKl1DC6mmZD1uL+DK3+yH7XJyCSSrBdOlyb7FEbOtbRw8s7BgIhTEXiF371um3KhQAkihb0R/JfidkQIoygYKsseZutQutO1m3bCjFiEkxSCEeTV8gyrSUtqVokCN/HQQ2q/E53ZP7XVi+u9mAjvpONGjp5XeYEFcZTUA5CUkkSPLKrIHjpy7LlwQSHaVir3SkpgwjYMRbOsnMpTSRR3Xghf79ULHapZC0AkIJ09KgbV4I4xERx7bM014+riQmfbJmK2guQYNNrjvpLAh/W208S1IXieMvmFwNWDzyPZLp6ugfp6GLFSVZOziSsq8cZBfBSr2vqKJSrvwnaM6VTA7V238fR9RKcsEYEFqxD4/nWNdBEm75F7up96E1RykT0Vwijed3Qk2dd16BTLoefpBHSV5QozVyCqqeqGqdEq4QSDzqpHJcQ18LsiCVTLRNHaR74qQVR7cbRe1Tqd7h+CwIVKYBQtMChp2lwPjSxWYU3M63wI3m3rosVgLaSpFgiz+bX+30g0b0TXNH12+/L5z3Zy5Dd7xzeFYeRNfiLwq7IvGQDNdVODukVEmHmmkJxc87E19SuXOtGYqt1cWX98OtSocmdpMof6R/gEhEsCdeDfa+o/rL1RMyKJQdF0fARpsSpyDidBA0TvA=","authorEmailMD5":"0c2887c19932ba204e4abe9336971ade","message":"I think I figured it out (mostly). I simplified the console app code, and I made the method to be executed be of void return type. This is because I initially had it returning an int, but it turns out that if you try to refer to the Task.Result int variable value even in the next line of code after invoking the task, the task will execute synchronously. Simply by not referring to the Task.Result int variable value, the task executes asynchronously. It seems to make sense that it would work that way, but at the same time it would seem to make the usefulness of async/await/task stuff limited to executing operations that have void return type. In other research I have just done, it seems like there are more beneficial use cases of async/await/task within the context of ASP.NET MVC apps and other scenarios in which UIs are involved. But here is the code that I came up with to (kinda) do what I was wanting to do within a simple console app:\r\n\r\nusing System;  \r\nusing System.Collections.Generic;  \r\nusing System.Linq;  \r\nusing System.Text;  \r\nusing System.Threading.Tasks;  \r\nnamespace ConsoleApplication8  \r\n{  \r\n public class Program  \r\n {  \r\n static void Main(string[] args)  \r\n {  \r\n Console.WriteLine(\"In Main, right before calling clsSlowOperationInvoker.InvokeOperationAsync()...\");  \r\n clsSlowOperationInvoker objSlowOperationInvoker = new clsSlowOperationInvoker();  \r\n Task aTask = objSlowOperationInvoker.InvokeOperationAsync();  \r\n Console.WriteLine(\"Code to execute after the clsSlowOperationInvoker.InvokeOperationAsync() invocation...\");  \r\n Console.ReadLine(); // This is just here so the console window doesn't vanish!  \r\n }\r\n\r\n public class clsSlowOperationInvoker  \r\n {  \r\n public async Task InvokeOperationAsync()  \r\n {  \r\n Console.WriteLine(\"In clsSlowOperationInvoker, at beginning of InvokeOperationAsync() method...\");  \r\n clsSlowOperation objSlowOperation = new clsSlowOperation();  \r\n await Task.Run(() => objSlowOperation.Execute());  \r\n }  \r\n }\r\n\r\n public class clsSlowOperation  \r\n {  \r\n public void Execute()  \r\n {  \r\n Console.WriteLine(\"In clsSlowOperation, at beginning of Execute() method...\");  \r\n System.Threading.Thread.Sleep(10000); // say this executes a database stored procedure that takes 10 secs  \r\n Console.WriteLine(\"In clsSlowOperation, at end of Execute() method...\");  \r\n }  \r\n }  \r\n }  \r\n}\r\n\r\n// Output of program:  \r\n//  \r\n// In Main, right before calling clsSlowOperationInvoker.InvokeOperationAsync()...  \r\n// In clsSlowOperationInvoker, at beginning of InvokeOperationAsync() method...  \r\n// Code to execute after the clsSlowOperationInvoker.InvokeOperationAsync() invocation...  \r\n// In clsSlowOperation, at beginning of Execute() method...  \r\n// < not part of output - a 10-second delay occurs here >  \r\n// In clsSlowOperation, at end of Execute() method...","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","replyTo":"2f24ce7d-b8ac-34a7-afbc-60c1467b0f61","date":"2015-01-04T08:55:40Z","timestamp":1420361740,"authorUserId":""}