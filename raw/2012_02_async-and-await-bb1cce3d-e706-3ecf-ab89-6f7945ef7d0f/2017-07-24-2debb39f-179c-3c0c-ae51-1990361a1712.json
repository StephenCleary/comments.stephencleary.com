{"_id":"2debb39f-179c-3c0c-ae51-1990361a1712","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"Some tasks do have to \"run\" somewhere, e.g., Task.Run will queue work to the thread pool and return a task representing that work.\r\n\r\nHowever, most tasks used with async/await represent I/O operations, e.g., HttpClient.GetAsync will send an HTTP GET request and return a task representing the HTTP response. There is no code to \"run\" while waiting for the HTTP response, so there is no thread necessary for that task. You can read more about the details of how this works here: [http://blog.stephencleary.com/2013/11/there-is-no-thread.html](http://blog.stephencleary.com/2013/11/there-is-no-thread.html)\r\n\r\nThe current thread continues executing. The asynchronous method returns a Task object, just like any other kind of method return. So in your example, it would return that Task to the Main method, which then calls Task.Wait. Wait will block the current thread until that task completes.","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","replyTo":"ba1e2d4a-e2cd-3694-a30e-45ffdfe646d3","date":"2017-07-24T23:03:45Z","timestamp":1500937425}