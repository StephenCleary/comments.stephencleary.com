{"_id":"64a738ea-f853-3953-9761-899b0f57cdc9","authorName":"Stephen Cleary","authorEmailEncrypted":"jUwAE2M4/jD6eJgs/sNCA444IPhtTUnyH0vUUan9fb/KqqSIdUbnYvlGGSS2koIHfvOPUAPl5bfwWWGC/ahjTHBR0VLHfGy83Om3O2RJlgTudlBQU90C18pFhCQg57FiLe2wLyz3mRFcLrRuuYcBSu+e/JMQ9iP8/ze0g37JDPFyu2JDgddoMdIvbBvzue2e0HGnxfzg27hh3D/4u8s/iUEwIrNGZJl2LEfsDVqxvg/w0fgzmkBCva54GKZlRaEYeZV/R8q7Ge4KnCKwpiaHwMJ3f3HzZHFd/rknGVSnu7xQ5Ac9K5a3eYkb0V0SZhvG3rLNn+A6c0XuAiC91xoNiQKh7gshz2dlcaFMddjX39e6/HwBy5WYHXosCFg1PkIfbDNPbm1fcqAVipq1uinr6GT2CPfZnY+ZkRmR4QRcmVwoOxYO7cOd7GposvJdAhEP+VXwG+Qr792g6+uDI5lsPn9WXAb73+nY6j8waTAsDKWu6xbWZQ94SyOuU408pNJ6DxOjxPhiib8ft13Rx9WBpe7QPaVI+C8Hqoh54Lc01Mpv+qhoiHuniYmsxzRTef1AMWSHZZ47NKLgczxXhHwYdXSa6Qg5pLulzJIy1bds/MtKVCBIC15K1G5IXJbjLbKkJjKizNlFgR/1v9zJ5kNGkOUw8e7CC+5Fr6ycfKz5XBE=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"I explain the full mechanics of await in this blog post. At each invocation level, the caller chooses whether to await the Task that it gets from the invocation; if it awaits, then it returns an incomplete task to *its* method, etc. The thread pool does not come into play at all unless the code explicitly places work on the thread pool (i.e., `Task.Run`), or unless the `async` method continues without a context.","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","replyTo":"0e7d2b5e-ecea-336e-ac6a-e6a5fb62b348","date":"2016-06-01T20:40:32Z","timestamp":1464813632,"authorUserId":"disqus:stephen_cleary"}