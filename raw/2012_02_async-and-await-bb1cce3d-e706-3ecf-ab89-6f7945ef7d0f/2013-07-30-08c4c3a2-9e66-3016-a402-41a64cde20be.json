{"_id":"08c4c3a2-9e66-3016-a402-41a64cde20be","authorName":"Peter Klein","authorEmailEncrypted":"","authorEmailMD5":"","message":"Hi Stephen,  \r\n\r\nThis is the kind of explanation I had been looking for. But still, I can't figure out how to get things geared up. Please take a look at my simple code (VB.NET)  \r\n\r\nPublic Class Form1  \r\n\r\n Private Async Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click  \r\n TextBox1.Text += vbCrLf + \"No connection yet\"  \r\n TextBox1.Text += vbCrLf + Await DoAsync()  \r\n TextBox1.Text += vbCrLf + \"Done\"  \r\n End Sub  \r\n\r\n Private Async Function DoAsync() As Task(Of String)  \r\n Return Await DoJobAsync()  \r\n End Function  \r\n\r\n Private Async Function DoJobAsync() As Task(Of String)  \r\n Threading.Thread.Sleep(2000)  \r\n Return \"Connection made\"  \r\n End Function  \r\n\r\nEnd Class  \r\n\r\nThis works allright, but on the UI everything waits for 2 seconds. When I use a bigger amount of milliseconds, then everything waits that much longer. That is not the behaviour I would expect from asynchronism. But where do I miss the point?  \r\n\r\nHope to hear from you!  \r\nBest regards,  \r\nPeter","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","replyTo":"","date":"2013-07-30T11:59:58Z","timestamp":1375185598,"authorUserId":""}