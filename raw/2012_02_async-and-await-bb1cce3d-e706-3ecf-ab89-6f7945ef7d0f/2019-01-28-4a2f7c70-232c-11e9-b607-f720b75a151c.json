{"_id":"4a2f7c70-232c-11e9-b607-f720b75a151c","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","postUri":"https://blog.stephencleary.com/2012/02/async-and-await.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Sanjeev","authorUri":"","message":"Hi Stephen,\r\n\r\nI had the confusion around the UIContext and the UIThread. Since I have read somewhere that for the UIContext we have a single UIThread and hence it runs on the same thread before and after the asynchronous operation (when not using cofigureawait). Also I tried checking the threadId while debugging and got it same.\r\n\r\nSo then it means that the following proposition is correct in case of UIContext.\r\n\r\n// This code is running on UIThreadX\r\n\r\nawait DoSomethingAsync();\r\n\r\n// This code should continue on the same UIThreadX\r\n\r\nIf it is then it means that in case of UIContext, we have thread affinity.\r\n\r\nPlease clarify my doubt. \r\n\r\nAnd also can you give me some pointer for the ASP.NET request context as to how the Thread changes in the ASP.NET request context after an async operation.","date":"2019-01-28T18:41:14.650Z"}