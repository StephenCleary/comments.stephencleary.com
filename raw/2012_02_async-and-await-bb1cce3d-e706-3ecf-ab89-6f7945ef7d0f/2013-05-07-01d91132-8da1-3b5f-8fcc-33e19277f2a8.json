{"_id":"01d91132-8da1-3b5f-8fcc-33e19277f2a8","authorName":"Stephen Cleary","authorEmailEncrypted":"R3bpmjzqAc2Vd+ZL75DaeX2FPgGSLSKMU4usdsfgfVELKJniAkF9JNrsnaajKW9YJH8MR5nQkT66OVKdHRhoA2bR0MtVjh411YJwDK6rxLDjr5SFPQou4cVtAxgfBnDMmZyPA2JROzRenQJI2HzWi2czdy8zeCs4REfExH20oxWaM1aTdo1FdBefpPIH5YZpjc48YHFq6t3tDPV0l9z+5u9zNr3F0rrEF29PpnWwJDFAPd7FZ7svlXZN8RFa79bLkM0hr/O8VkqLYRF4RaBCKXMiNFUa6dIRSCNS32WNVcVVdmQAxn1TKp7VCHhuQMFTlnHh5W5M/Z5B982CFlF9ycOOHY6fI+2LJP93m88LkwtpL1d8yPPGK7YD1vc8mG8kfWIHPZ88ztBkgbbZafstHxrPvwK2qSb8AM2ocK46dUKxUrXsrFoMdVCxH6R5W3BdLmOnefp7+HCoY+lqmKlh9HQSU2PWsJSBYQz2vBy1rNckzPA/LP/rN1WE9taPChp1objFPRkFNe+tJjGEYGSwvsqhAM9NNzt6cxE0DKQLcz4C8qrFKynmGcOckHJZoaQureCCk7kiMyvMzmea2O3ac5iRjOAfLZv0OBFPHjQdN8buvUOLHIqbTNUvL2Wce6n3IKTyuqtNNINRLLgHGsTRMAM7JuaBpY3ZUkA/fOpUt8g=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Yes, a single task can be await'ed by any number of async methods. \"Await\" will first check the task to see if it has completed; if it is already completed, then there is no continuation at all. If the task is not already completed, then it will *add* a continuation to the task. Each task can have any number of continuations.  \r\n\r\nOne common use case for this is (shared) resources that require asynchronous initialization. You can declare the resource as such:  \r\n\r\n class MyClass  \r\n {  \r\n private readonly Task resource;  \r\n public MyClass()  \r\n {  \r\n resource = LoadMyResourceAsync(); // Note: no \"await\"  \r\n }  \r\n }  \r\n\r\nand then multiple methods can await that resource:  \r\n\r\n public async Task MethodA()  \r\n {  \r\n var res = await resource;  \r\n ...  \r\n }  \r\n\r\n public async Task MethodB()  \r\n {  \r\n var res = await resource;  \r\n ...  \r\n }  \r\n\r\nKeep in mind that when the resource is done loading, it will continue all async methods that have already await'ed it, and any new async methods that await it will continue running synchronously (since it is already loaded, there's nothing to wait for).  \r\n\r\nIf you want to *lazy*-load an asynchronous resource (very similar to this but delaying the loading of the resource until it's actually needed), I have another blog post for that: [http://blog.stephencleary.c...](http://blog.stephencleary.com/2012/08/asynchronous-lazy-initialization.html \"http://blog.stephencleary.com/2012/08/asynchronous-lazy-initialization.html\")","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","replyTo":"","date":"2013-05-07T01:31:34Z","timestamp":1367890294,"authorUserId":""}