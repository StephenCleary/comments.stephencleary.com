{"_id":"3c4f7920-1355-11e9-bddf-5fc5f93eb3d7","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","postUri":"https://blog.stephencleary.com/2012/02/async-and-await.html","replyTo":"5e1cb540-0f54-11e9-a188-d5ba736686be","authorEmailEncrypted":"MzA+8ujMNPXjeq46LfyUO3XHEGzSxe9As4VOmcf8seSgeXewNwH8882xChtvk8ElJkw6BXXjMfQNJu2uT+fUFPgDHeWCI2w0e32crn6NOsbuQoPI4NmE6ByRETnji5QDZ02pH8Fdqk7kPSNu49+8XNF5vD3OOrse44oLUyMyvnxCTcX34m94bg9lsH06HLabBv4ZdKVlC3Y43gKIPk+aVh6ODpo99gURFHHE19oVHqD3/aI67bPbBA/MbK9RXl5RvIcc+VNbSE8dhhmFD9j3T2LgRRqMWZzp0B65Y87xp5kghyXbzK7NMKJX9iMpbZbHt8RrYSBI3l3bpRp0ckVSO7FNTRdzrOiAvbsZYTYU9p5DLZOakrsdIovMZ4Qc381wZjdctVQTfN8mOEePuV6nWzKbvGBTZeTcWQw5BgLlAQBImA+HenTAocSjuwlMewBfzYtSp+SiPz29aD3gAQE4sPUAMIarI6xIjOt44ZsWM1wTAk5DwrtT5ui1XTpBOSl4BGtIudxznmhN4GOFMojqnxlfMyl68UVebMtLWdc0CB6blX+lUZrpZtvR9oPWnPP6sxEaMeThJkfhHwaoJjCvElZyE4/0m7p13hSgVMcAB5/UzAmb22XeLV6Fz5fb7yCCIuGycNu+P24hQiSF+josuvDr0/6+9huxtMGN3XGFbzE=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Your code needs the context whenever it depends on something the context provides.\r\n\r\nThat's a horrible answer, I know. :)\r\n\r\nBut the answer really does depend on which context you're talking about and what the code is doing. Here's the most common examples:\r\n- UI components must be accessed by their owning thread. The UI context will ensure that the code after `await` will resume running on the UI thread.\r\n- `HttpContext.Current` should only be accessed from within a request context. The ASP.NET Classic context will ensure that the code after `await` will be in the same request context. (ASP.NET Core does not have `HttpContext.Current` and does not need a context).\r\n\r\nMore generally, though, it's possible for you to create your own hosting system that has some definition of a \"context\", and you can write a `SynchronizationContext` that will integrate with `async`/`await` to resume on that context after every `await`. I've done this with my `AsyncContext` class, which is a thread with a context that always resumes on that thread, so it's like the UI context but without any UI capabilities (it's not an STA thread, does no message pumping, etc).","date":"2019-01-08T14:54:02.387Z"}