{"_id":"57b266f0-2331-11e9-b607-f720b75a151c","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","postUri":"https://blog.stephencleary.com/2012/02/async-and-await.html","replyTo":"4a2f7c70-232c-11e9-b607-f720b75a151c","authorEmailEncrypted":"uBn9pCJfhyex30EHHRIpFnWHbTbzz9W+2z4RJontomLcENWu5k+9o8VYtoHabmsdHcH3rJaE2OgV2NXl2GcF+3K79klJr6NLKD2ViRgs9jS3kSa9y3DVWkU3bGmzmQfOY5BvmyAmpiGcx1+4znrqxCDnViEuXitRX+qTOBd0ioFdydgMZ9hc3bdkr4KPNe+1oFp5B/iMePIUHtqm5icJoeQ1WEYph8N+8aMy+H6DKcZEERqMJkPW89M1AXwZeG3rWcr5GebJ1BkwFz7H9m9dw3ouRd0iu7X+k68MhFbuwy1HO/WuIsnk2j8YIE6G0La8U2D+bJlAWFIoq81CBvSdHvdk9MNVFH3tLiU3SslQjEKeebcjaYG4M4E07bACmhTHLeQSWbX5crXEGYhJ1WY+vflqm+NUZa5ZuMOA0daaprVD+SwNpkX9RGXNsCSDk8u6L6MAiBYACthBKJU/oJUDgYKriJAzUNn4HwOMmUwvVO/kSZ/ayAIrvLrtgjmRKIa7XE2EXmRwcD0hNoTYEpRTrW9PpEkXCUcsF5XrEsq3eP3mhCWvs6XZ3bmNzQJsvOqhImVGBZbjGR7ROZnzVVaDWuKFWCDDbsK7nK5j5c6TIocv6fBUZiRG79J6+M9RS0rXZ0Vpcn7woJTkG1WNFrSjkbun7EymsgYI1Ax6KcHyDAg=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Yes, the UI context is tied to a particular thread, and will resume on that same thread.\r\n\r\nThe ASP.NET context is different. When a request comes in, ASP.NET grabs one of its thread pool threads and has it handle that request. In the case of an asynchronous request, when your handler code yields back to the ASP.NET runtime, that thread pool thread is returned to the thread pool. It is no longer associated with that request. Later, when your handler code is ready to resume, ASP.NET will grab one of its thread pool threads and use it to continue the request. This may be the same thread pool thread or it may be a different one.\r\n\r\nFor more information on `async` in ASP.NET, see my [article on `async` ASP.NET](https://msdn.microsoft.com/en-us/magazine/dn802603.aspx).","date":"2019-01-28T19:17:24.747Z"}