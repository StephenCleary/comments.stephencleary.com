{"_id":"723b4504-cf7b-3202-ac9d-bbbf59185037","authorName":"Chiranjib Nandy","authorEmailEncrypted":"LFAcUSTSCnFiiBvxamz2djxQ/pbfZnYOs8Cu54CWx79rSd6n3x0ohpmauEK2dkDGv0skqP1DhLBIuy7r5Ge5gNsFzwPD1GLwO822OrBKtnZtpaeFbCeZY1LtQSt4hor28sxjFYXiwhVuLOleoQImUncA8lOoYsi8+PFs2jOUF8GxVa3Q7ocAlWDviDaL6ztCEZI4P5lKfZxS166VzXefssqoJ2ha6LejqqFqUHS94+bWJp+GnGRDFUgXJmMZGm/9cpf1VDCneQ4lvNZxqb5gWAbasya7lBPzh9MPThq/EAE0D3JpNR+ly4BMJ/XKy4WLhs1L7wBjXmiwPSYT66m9uT7L8N75TiuSEKEmnQ5R9kHtqSKreNgJDO6vyIJ86pyC6WJnoZrADEwNIZn7ejT5epFkRhQ3l7GS48mFR/NRTd3JEFsAs46bhyX0QUE2X1uFbEBNHxleDfSYZE6QUbsZSpv6ts/xy2XHh0NnMfcaKVnm0FEpOci8PGMPOqykZ/QphfiD0VKmq73/WdYEwOZuHq3e7o1XuNIz4Z3/KPIlCccEjwsPgfSunMj4Vx/UVVksSxBV3m95SLL1/iNyk8Rz8fKw/QmhRp0KcI15J7yLtyj9AHj4Qs0o/dPvmQpDSEukonfIHwSdTDeCD8ihNEvrNd43S+gyQNyTDtmPeHodVlc=","authorEmailMD5":"6fb9392412fb481f785a114073349699","message":"Okay got that . But now it is the problem I am talking about . Suppose in this simple example   \r\n static void Main(string[] args)  \r\n {\r\n\r\n Method();\r\n\r\n Console.WriteLine(\"Main Thread\");\r\n\r\n Console.ReadLine();\r\n\r\n }\r\n\r\n public async static void Method()\r\n\r\n {\r\n\r\n await Task.Run(new Action(LongTask));\r\n\r\n Console.WriteLine(\"New Thread\");\r\n\r\n }\r\n\r\n public static void LongTask()\r\n\r\n {\r\n\r\n Thread.Sleep(8000);\r\n\r\n Console.WriteLine(\"Long Task\");\r\n\r\n }\r\n\r\nThe main thread still continues and prints \"Main Thread\" after calling Method() and encountering an await for 8 seconds . So accordingly the Method() returns to the caller i.e. to the main function here once it encounters await , saves the synch context and keeps on executing from there . It prints \"Main Thread\" first . Then after 8 seconds complete , \"Long Task\" and then \"New Thread\" get printed.\r\n\r\nThis part I got . My question is in my application :\r\n\r\n public IList<createcaseoutput> createCase(CreateCaseInput CreateCaseInput,SaveCaseSearchInput SaveCaseSearchInput)\r\n\r\n {  \r\n.............  \r\n SQL.CaseSQL.getCreateCaseParameters(CreateCaseInput, out strSPQuery, out listParam);\r\n\r\n var AcctLst = rep.ExecuteStoredProcedure<createcaseoutput>(strSPQuery, listParam).ToList();\r\n\r\n if (!string.IsNullOrEmpty(AcctLst.ElementAt(0).o_case_seq.ToString()))\r\n\r\n {  \r\n await saveCaseSearch(SaveCaseSearchInput, AcctLst.ElementAt(0).o_case_seq);  \r\n}\r\n\r\nconsole.writeline(\"Async called\");  \r\n return AcctLst;\r\n\r\n }\r\n\r\n public async Task<ilist<savecasesearchoutput>> saveCaseSearch(SaveCaseSearchInput SaveCaseSearchInput,Int64? case_key)\r\n\r\n {  \r\n..........................  \r\n SQL.CaseSQL.getSaveCaseSearchParameters(SaveCaseSearchInput, case_key, out strSPQuery, out listParam);\r\n\r\n var AcctLst = await rep.ExecuteStoredProcedureAsync<entities.case.savecasesearchoutput>(strSPQuery, listParam);\r\n\r\n return AcctLst;  \r\n }\r\n\r\nHere also createCase is encountering await and it should return immediately right and execute the very next line itself and print \"Async called\" before even the SaveCaseSearch completes right ?\r\n\r\nOkay if I am thinking loud it might be \"control returns to the caller\" . So is it like if I wrap my call SavCaseSearch inside another async/await method named suppose   \r\nasync DoWork() {....  \r\n}\r\n\r\nand call this DoWork() from CreateCase() directly so then \"It will go on printing \"Async called\" once call to DoWork() encounters await and before it even completes ? Am I thinking in the correct way ?\r\n\r\nAlso sometimes I see and get confused between await someAsync() and await Task.Run(() => soemAsync()) .. what's the difference between them ? and which one to follow ?","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","replyTo":"76f9fd28-7776-3a62-a176-82bfdec62c60","date":"2016-04-15T09:48:32Z","timestamp":1460713712,"authorUserId":""}