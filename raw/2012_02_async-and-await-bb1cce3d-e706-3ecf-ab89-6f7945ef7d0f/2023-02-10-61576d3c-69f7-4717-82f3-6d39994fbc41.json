{"_id":"61576d3c-69f7-4717-82f3-6d39994fbc41","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","postUri":"https://blog.stephencleary.com/2012/02/async-and-await.html","replyTo":"4132319c-239b-4520-8df8-e70ee861f5bd","authorEmailEncrypted":"bPa1RDj\u002BPJ5e0jY1zR2LHN4VZ0TTPnNUbMyjqE4dxg6be9h330bYcdN6m2OQiJOljfj/ykT\u002BBQ/SApcue7dTapxDg6irrBH2Yk9n8zthRpiN6ySSz5gzOpQZatlCqYxNJHtj0iE55\u002B4zGpi2gWAc5xVvO6sszKMgyHYjXFr5\u002B7fXVp6/ajIiyf7MrIXPArfuLmb2bO2PlPv\u002B2zKmQBJGnNMOKl\u002BBQssUB85PlWECnCiJZBqQE/eA21RJLNbLmHcA5kw1T5oJ8SgPDn\u002BKtb3y5nwQsRcxVI5ogJO\u002BEc/GXBeoCON4HI4azI6\u002Bx4ZloJ3niueioSWRdNk2P0U/uCjnSe8QTZThDU38ho40rEpTdb56Wnius\u002BsCyl1cUE3z0kOMpUPWJyIhrdkEJGwy7IP8lbNrHfaPk2b62vzqc14OS74jEnInb\u002BOqRXSefbscBSKywvLa6v6r2nlogcW7\u002BuZ4skoAaGDJ140VD6Aj0mXEfUKYqxCpkjTQOz/8Lvo\u002BVIXv0PjcyD\u002Btm1lj0fOWxsgToui91eMnRGVdE3CRtZuDen4ZlUCVZVLh4ZjcefzVo9uKRgORH64W/0ezLp3\u002B6IxfwTSPCJxLJuTmb2w\u002Bw3uiwa1P7LB9OUjy2tbeaMABAu9f5l/p2QgFA5TwICzOJGHbaBFiwZE\u002BSyo5r2elPzYNG0E=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Hi Thomas,\n\nIdeally, yes, you would use [async all the way](https://learn.microsoft.com/en-us/archive/msdn-magazine/2013/march/async-await-best-practices-in-asynchronous-programming?WT.mc_id=DT-MVP-5000058#async-all-the-way). There are various scenarios where async doesn\u0027t work well, and that forces a redesign. Which is good.\n\nIn this specific instance, async doesn\u0027t work with constructors. Well... it *shouldn\u0027t* work with constructors. Asynchronous code, generally speaking, is usually doing I/O operations. And no constructors should be doing I/O operations. I have a [blog post](https://blog.stephencleary.com/2013/01/async-oop-2-constructors.html) specifically addressing async with constructors. Most of the time, I recommend using an asynchronous factory pattern instead. I.e., if an object requires some I/O to exist, then there should be some other object responsible for doing that I/O and constructing that object.\n\nHowever, \u0022async constructors\u0022 is often asked in another rather common scenario: when the constructor is for a ViewModel (or VM-like type), what\u0027s usually going on is that the user wants to do some I/O to load data to show to the user. Again, asynchronous code in a constructor here is just the wrong thing in the first place, but in the case of ViewModels, asynchronous factories don\u0027t work either (the UI must be shown immediately). So the appropriate solution for VMs is something more like [asynchronous data binding](https://learn.microsoft.com/en-us/archive/msdn-magazine/2014/march/async-programming-patterns-for-asynchronous-mvvm-applications-data-binding?WT.mc_id=DT-MVP-5000058), where the VM initializes into a \u0022Loading\u0022 state and then updates into a \u0022Display\u0022 state.\n\nHope this helps!\n       -Steve","date":"2023-02-10T15:54:29.1487685Z"}