{"_id":"4e531e00-ffbb-11ec-8278-c132177ae00a","postId":"2012_02_async-and-await-bb1cce3d-e706-3ecf-ab89-6f7945ef7d0f","postUri":"https://blog.stephencleary.com/2012/02/async-and-await.html","replyTo":"4c5274b0-d9ab-11ec-aa1f-c3f4e420c96e","authorEmailEncrypted":"wt3yOQYxUFhtLJUO0ReCVo4bLloTOTKKzOiFO6pmbui5nIMBIRwKdPRtyc20Bo079zalYF0zW4YRPHGukLLMLrscTaubFp2pbnMlb+Pjci1QrJBsHuSDkc8jNrkilfyMOHk0zKs6LepAZG7+qa9fQ0KQzg2DkN4SCEEz4EUL/sNAIK/ASt+BBFzhtpbJH3lgOeuq3VTGHWZr1GYWoH6VWzB4IbCCbS54ZYV8XaocuXqvEt1yEMMeKPOrrm6074zAw1N8jnoz43juMeRzFWoME2/22J5A8fN/HnHGzkmLp8dahpBi+tCKSOPZRkWGX5nbU/tjyRvE/dlqauAZyGaRwKNq7NdMLRkxXAPxouTygzh4IG2P9fLQCaGrsMi6kw9JeIAafF/e1f/oksIR4DryXurVoIJZFn3SDSPu9Z0DgTgvn5LBGmxdD33lgoVagGtYFCyUf5V4tXrAWJ2x7xtdcUiPAnabPChVzEJwx2M2uP/eJyD6PFFjbeRSATud/r0/5JyTC0+osowDzvFgZze/TZtnnPTppgR3MYJFvLd1et5IV6RFngecFqDp2Lj8fJlQ8JijYxUu9B2r1IJqo8GAHvVx/i6Nq83HUjPgcka0nJByWibTY2G/k5cF/HiJ2cUUdlgMg2bcZFRVcpilMsaisqIgkvzMsnC4WA6yYwzHkoc=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"The normal way to report errors from tasks is by placing an exception on the task.\r\n\r\nIn the most common scenario - an `async` method that returns `Task` - your code can just throw an exception and the `async` machinery will catch that exception and place it on the returned `Task` for you. So your code can just use `throw`, `try`, and `catch` exactly like normal and it will all work.\r\n\r\nA continuation-passing style like `void method(Action OnSuccess, Action OnError);` that is normally called like `method(() => /* success code */, () => /* error code */);` in the `async`/`await` world would look like `Task MethodAsync();` and would be called like `try { await MethodAsync(); /* success code */ } catch { /* error code */ }`.","date":"2022-07-09T19:14:08.105Z"}