{"_id":"9374c12a-313d-392f-af7c-e9fceff89a3a","authorName":"Jeff","authorEmailEncrypted":"Jcy/yNETN2UGVi1SgoJRfozw/jn5KnMeSQcW8beR8Z1mJ5WP0QOJezjUnYYAStyvBoTamkIgEYaWQa5TvzCjtjpWe+Ze+c4iZHcoqTfdKtNlVZEKuFog2NW2OwZ1w6UK9ZmiCQG3m80wELY2eYutjXxbSJuIuQvz9FtsttFR27IDstcFlXuyDNfJs3iMqYjkrfSJtoBDTEj6EhBtqJcUOdQ6iha/peLl9ThKX4urVc70iv/5A3/4oJUKyhscxM5Lp2DA1Kv8qEhFryv/Rf7PSvKy6D1zsMfdsDLq70g7sMr8cPVxGYXricyyRiYVavN2/odwwi3hzFMjL/28XK9nPxfsjvtW4GY+JejsT9gwWK9QyvLXG1mwjNJl3Bw1EnqL+QhEefxt4oclYMXKm8851sBq7ZkylP5aiV+ii5fLtaWyHBSwe0qKJgQVxjqi6kOk79S9N9FyQ6TaZGYAYkS7SdFmXVTXBaM6GZmLn6sx4g+AqtT4bY1pORLW6FIn43U8iJIyxmTgps4oLwH60hj2OEAF3LeAVXgU1CPwWyiwdGQGmP+MjBMTyEOUd/qCvNWftcmZg1+QtQLZa+Ru4GSqPj/h23QqCRWFhDJ9lwezdcELoBTsQp0kXrDL6eg3RApoCEPvzEY2sat/G8Dbf6g/F+x6jKrLie6MJxgwdofkptw=","authorEmailMD5":"dde3bf631a325497e9e1d211ae80dbcd","message":"Thanks Stephen, I'm doing refactoring such that async work in separate process but I still didn't get how that will avoid async over sync wrappers. Let me take a step back and elaborate:  \r\n1) I have a data abstraction library that is caused by several calls, not all of them are ASP .NET  \r\n2) Async work is done in a separate process P2.\r\n\r\nHowever, from the sync API provided by my library in #1, I need to queue/schedule work using one of the 3 approaches (say ActionBlock) outlined above in such a way that my sync API caller in #1 is not blocked while the async work is done in #2. So, I am still scheduling some async work from a sync API in #1, the actual handling/heavy lifting of the work is happening in a separate process. However, to even make that cross-process call from my library in #1, I need to have some thread that makes the cross-process call . I don't want to pay the penalty of making a cross process call from my sync API from library in #1.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"57cda899-4c47-3892-bd9b-be5979cd9e68","date":"2018-03-08T04:51:20Z","timestamp":1520484680,"authorUserId":""}