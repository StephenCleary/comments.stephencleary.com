{"_id":"9374c12a-313d-392f-af7c-e9fceff89a3a","authorName":"Jeff","authorEmailEncrypted":"YZEl3VnpRStulXT+M/bG6AkF1wBplDVzSvdVeG6Q7bTTHIKn/oGON3W0wzt0wP6iFaorxpnlSZJBsqUIFTiT/xelMyFWIENHaE9T8EklFLeLy2ysoQhPesYyITqwhS5DDroqI3s+HjXtSzEQXIwUk85r/rkiJ6QKV75pinTxPcUgIeTnSGJKXae0P3OEJVDaeG8dYHG/1/yBQEhdFNrJUCl0xXJR0JBnBq0SU8/T4x/N2te0YyG7gYU9dxhJjcbBJg4dopYjhwN15xjfJ5TQxicyQ+E40ujBHN0j8LJT9MMMaCLTRJw34tfXQAkwA/U40I/jxUyElOQxMyGNqAhWSUpQ3Ms+CbxxGmwSWoq7nBnGbKOQutE4kMAvjTVz9cxGHu+QpGVrJ92JPrVrK9ADfjdB1BBYo3eS1SfxoTyFc7U8m2BGiVlVF5kmzfF/tkQrT1sRa+ZozyegzzeI70FyjPF0+G0CG/nWA9nbdjXCEu2cmivP6YH9Pm1xN6cVS9N8KA49MEvqInmWxBtpWOPhwiWff20i8LTGGUeMsQZWsQSnJTCC+vQRHudf/odb6IVtz3cowvCyuclqsUHFS8BhkQRCrAeVBArpQAHjvSLi/kAqryG/cfUCWAapi248iZAxQNTnivsUKiKtg8ZppJ4My9CtBA5ssqGOgcy80n6vNdk=","authorEmailMD5":"dde3bf631a325497e9e1d211ae80dbcd","message":"Thanks Stephen, I'm doing refactoring such that async work in separate process but I still didn't get how that will avoid async over sync wrappers. Let me take a step back and elaborate:  \r\n1) I have a data abstraction library that is caused by several calls, not all of them are ASP .NET  \r\n2) Async work is done in a separate process P2.\r\n\r\nHowever, from the sync API provided by my library in #1, I need to queue/schedule work using one of the 3 approaches (say ActionBlock) outlined above in such a way that my sync API caller in #1 is not blocked while the async work is done in #2. So, I am still scheduling some async work from a sync API in #1, the actual handling/heavy lifting of the work is happening in a separate process. However, to even make that cross-process call from my library in #1, I need to have some thread that makes the cross-process call . I don't want to pay the penalty of making a cross process call from my sync API from library in #1.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"57cda899-4c47-3892-bd9b-be5979cd9e68","date":"2018-03-08T04:51:20Z","timestamp":1520484680,"authorUserId":""}