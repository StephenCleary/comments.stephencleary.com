{"_id":"9374c12a-313d-392f-af7c-e9fceff89a3a","authorName":"Jeff","authorEmailEncrypted":"o2oDO6axNuqled3t8TObXYzOkyA9N9izAGcPLjvkG/6bUOmRYBhkGsUndLX2Jcfyb2CtB/4DQNF2UY6hcQeviTxErBmaULPr1+gZj1txwZMdYZWbI8LPca3IyLNMRrlAm8Ps9zR0c0s5m6W19KPkqcD2ZUMutv9jEln4HNAhyEonBRK6GJXML1uXjeliXXNpr67HNBFz2ljZ6idh4emYy7jJ0azlYrLMQt8Cd16QQ4zdseU19pQl/LqLBl3YWo//l0TPgeY6DTlIgoKMUVSwSBKNqRi7XDse+AInYClaT6SMGXUkN5jxHxzGFgdvy20zDOY+XpLN9+HPzWfUP4iW27YS1MKavyEKSXgGldZFxfOni99zg4A28WNvVRm9LccBdYKfFu/y27C5xSsPDDTSld52Kuulz6xU9B8Mmyh4McpyXcnG+wX0FTkuQ6u3NPuG5LcL75j47N0jiFl/Ix2quUJlJt65lvftftcBbJmmW/CkyK60q8xMXOO1RJEJOT4AelSJgtK/4GY66edAo8Au+fRcHNIlhSq1PDMOhYegPiHn38R74o5C0VSI4VR+DzdYBX/T8ZGzj9TO5RAo5GyAZ8dnl5qAuO7WNTDuRFoIQH+n7Us5rftcu2rF1utzU8DAQ6aeNMy9u89wfG6kDQN0JN2+mKHplWWMqKV3w5FwmJw=","authorEmailMD5":"dde3bf631a325497e9e1d211ae80dbcd","message":"Thanks Stephen, I'm doing refactoring such that async work in separate process but I still didn't get how that will avoid async over sync wrappers. Let me take a step back and elaborate:  \r\n1) I have a data abstraction library that is caused by several calls, not all of them are ASP .NET  \r\n2) Async work is done in a separate process P2.\r\n\r\nHowever, from the sync API provided by my library in #1, I need to queue/schedule work using one of the 3 approaches (say ActionBlock) outlined above in such a way that my sync API caller in #1 is not blocked while the async work is done in #2. So, I am still scheduling some async work from a sync API in #1, the actual handling/heavy lifting of the work is happening in a separate process. However, to even make that cross-process call from my library in #1, I need to have some thread that makes the cross-process call . I don't want to pay the penalty of making a cross process call from my sync API from library in #1.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"57cda899-4c47-3892-bd9b-be5979cd9e68","date":"2018-03-08T04:51:20Z","timestamp":1520484680,"authorUserId":""}