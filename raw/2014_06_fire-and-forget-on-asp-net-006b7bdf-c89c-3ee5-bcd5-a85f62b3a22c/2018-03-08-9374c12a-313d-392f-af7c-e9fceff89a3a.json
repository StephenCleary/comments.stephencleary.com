{"_id":"9374c12a-313d-392f-af7c-e9fceff89a3a","authorName":"Jeff","authorEmailEncrypted":"WyXdzLJDMZBtDapW9QpDfy5QB0sGX7Q8gtj2OwpzNx/33WtOMtBPH8n8DwVfCxcbdWw1x3UQb8ay71H9gqXEcADxU0CdahGs8bkYgJls+gGTyvra4Cy/s0Rz5fB/O9op1NtktTFK7Zrez9dkUbcKQonpfJRuArCK5TQJZms4h/GbQqdTeWArG+G5lND0JDfMCOzULZP05eAo0JsFbatVIfC4e8e4AiP4XeCG4icpmV9eMPHOOoDXaEpdjGrjm/qXJqJkq693J3ahhrXQi5UvZlJ1/0eS9JQ4yv/3uakPUxtgvFsfDkElNpdeSH2IWlmthGISb0ooGoYxN4u6dH/ajhGbk5Z50Cj2k7bwpv7vVWyngN2qWPVprKp93f89BdYerreaJK7pcEor6Wc25IrDOc7uMBQbtUWGC5blGd7Gq9xsepY7Fn986dDk8lR7WXhODJfl6Zg2/19gbH+efLsG1Cxk37xMV4YTTpi63fThboz7g8aOkLM5/I+b+MvO5/Vah2QCImSAXkc6d7bMBLPPXFnZF9rlYF+WtFR3Vsankt19NCMOiECcWH2QO1Dknbggg7bpI9Hs4iECI2Vg9wKcVCH07GIezQG7Oj9R9p0TlGnws31PElpfcJo7+KQ1KjfBmtNa6eHdYseiSwCt4L7kE+wSoTT8Z/TGS5ZJ6i9rV6M=","authorEmailMD5":"dde3bf631a325497e9e1d211ae80dbcd","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"Thanks Stephen, I'm doing refactoring such that async work in separate process but I still didn't get how that will avoid async over sync wrappers. Let me take a step back and elaborate:  \r\n1) I have a data abstraction library that is caused by several calls, not all of them are ASP .NET  \r\n2) Async work is done in a separate process P2.\r\n\r\nHowever, from the sync API provided by my library in #1, I need to queue/schedule work using one of the 3 approaches (say ActionBlock) outlined above in such a way that my sync API caller in #1 is not blocked while the async work is done in #2. So, I am still scheduling some async work from a sync API in #1, the actual handling/heavy lifting of the work is happening in a separate process. However, to even make that cross-process call from my library in #1, I need to have some thread that makes the cross-process call . I don't want to pay the penalty of making a cross process call from my sync API from library in #1.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"57cda899-4c47-3892-bd9b-be5979cd9e68","date":"2018-03-08T04:51:20Z","timestamp":1520484680}