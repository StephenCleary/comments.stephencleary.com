{"_id":"a774efc4-1211-36b4-8acd-dead4fb506be","authorName":"odinserj","authorEmailEncrypted":"jvEQeZHCSBh7t806d+7bo7ihanm7PuWFAVFbYeX4ouvYvaemleV1Wj8o5bIpArOJct1+die2/Xvbk+PSvEdVZg2aNpPcfLfahsL8qspM5q+JuEKzYhPzbeFmXkLYPf0bRAONruq2FWnNSAwy+ZxwSjYce5z0MhIq6gzdc/MfETPSxakLOIvYtEge2kDfE+5HlPPKyt3zwy0IIaOH/fZCCUoZxGwMfL/9z/imeEoK+A07LRwUj1MK0mcG6QZ40dWI6w+m2A/z6ZHdsJocy0wA7e796KDAXXWWTcwJShwic4ifyU7UnbTkk31qznE+Mhkszb5nQzNxCSYWeItCE8u+j3mCc2HAWLpoONqIfDgTvaHYExwLcXq7VjlGdOu27ZdpZ7KjkVKeC8dMIl22BH402hRo7nEu7rfuJNEyoqnJTD1Prz7FP2T7XGLj+ndzV89m7SifAtu6L+7Wl6Zf7pMAEWQUgMkELYgM7Nwy+mE3jaYP8bx4MmB/qEOf+JFC7cpLSb3oQtFy5hPk7wCyKLNuUB+sCWVZPjZoy0/lLaWrDlf6KgbM5PlIdiRN7pntQRUMu/NgZHsw5of2D2NEtAuHrwTMVW7tyFLdJY7auQITNUkDbwRn+4vD79ohnJ8OQyuAa528KbcIgNn3g4mImi5kJl+moD1W+vgWwT+fguwejVc=","authorEmailMD5":"0a71abb01f527c8830f708948ca07351","authorUri":"","authorUserId":"disqus:odinserj","message":"Thanks for good post! I'd like to provide some things about HangFire.\r\n\r\n> I’d like to see support for Azure tables and queues as well\r\n\r\nCheck [https://github.com/odinserj/HangFire.Azure.ServiceBusQueue](https://github.com/odinserj/HangFire.Azure.ServiceBusQueue) and [https://github.com/odinserj/HangFire.Azure.QueueStorage](https://github.com/odinserj/HangFire.Azure.QueueStorage) repositories. They made as a proof-of-concept and not tested at all (and currently don't support the latest HangFire), but they can work together with SQL Azure.\r\n\r\n> The second assumption is that the code will not significantly change.\r\n\r\nYep, but you can put all the code related to background jobs to the separate folder, name it \"Jobs\", and refactor it carefully.\r\n\r\n> I’m not sure how the system will respond when it attempts to run the old background work.\r\n\r\nThe job will be failed (this is a well-known state for HangFire, nothing bad and unusual), there will be an error log message about this event, and you are able to fix it, redeploy your application and retry manually at any time.\r\n\r\n> as previously mentioned, HangFire prefers databases\r\n\r\nYep, it leverages databases for full transparency and manageability – it is very hard sometimes to debug background jobs.\r\n\r\nUPD. The way HangFire utilizes background jobs is well-known for Ruby on Rails developers – they processed many millions of jobs with HangFire's analogs – Sidekiq, Resque, delayed_job and others.","postId":"2014_06_fire-and-forget-on-asp-net-006b7bdf-c89c-3ee5-bcd5-a85f62b3a22c","replyTo":"","date":"2014-06-10T07:33:53Z","timestamp":1402385633}