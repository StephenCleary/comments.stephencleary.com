{"_id":"7b983f10-234a-11ec-ab6d-053298adc8e9","postId":"2013_04_recursive-re-entrant-locks-2b4ba4bb-380b-3fca-9765-9a08c2b8bda1","postUri":"https://blog.stephencleary.com/2013/04/recursive-re-entrant-locks.html","replyTo":"","authorEmailEncrypted":"NXdHBq55oQYKFQSSGZaSLfo9J8ECN4M18UQ18J6kA8mZyZOyEmw3HOK5rs0jY0I/LpGzeV266sAG1NMvYV9OIlU3cXOsxcMWk/UPupiK7O/qdDpbFzrz077qjcrWphY3O7XRKV50mTmJwgJOdEOQyFj2DMIw27AsvGfVGR9WYc/ip8K9qPzufl/dnwS1wCEg3a5xt7k3xrhbKKpHWDRLS2KOxx7sht56YQqT56gXeKMlXcG2wGTd5HFZAStnltDmDWUujd3+jzby51XwVJsXiAvEk48pIAYzlHWpS1QEx3g3HP6s47eBeA2OZhmbzbNOtKrb3sm+4b5WLc8ZlITDTeK1v9yTUsm9b6pl7sJ4UW4FCLfHbQrpD+/4NIs7cNNG135aPpfhdoAAIkpPM8kIOTwppqv4b3hcNdZcbDrCP1jtFUjomCu3Y98LCU3IUZn+duclhZ1K00soRv0v51/lfmI0Xa8lyfKdHPfyIiKuYyso8Z6G1whgOLz2WBicSpWF3dlYqqNmej8DsZicBc6J5bOt1kn3Vg515a//PnXh4aiIBpDLqj2obpdermBsciP11eKoTP/kpyzkO3QB3xWBgs9KREyu8dfdGgzBKdbGyawIlRpm2XdykDPBK/XLR3yeQsmeoN16Yv+0ehOZLijZdBAtPEBIUh/Do27t9u0iiAY=","authorEmailMD5":"c11d34cec748e365c7fe4e9394637216","authorName":"Max","authorUri":"","message":"Thanks for the article, Stephen!\r\n\r\nI wonder if you have a follow-up article on the asynchronous recursive locks, that you have mentioned in the conclusion? :)\r\n\r\nI have inherited a codebase with an asynchronous recursive lock implementation that I need to fix, preferably without rewriting every class that uses this lock. But the more I think about asynchronous recursive locks the less sure I am that it is a sane concept, even not considering the arguments you have made in this article.\r\n\r\nInitially, I thought such a lock could work by tying it to the `ExecutionContext`, using an `AsyncLocal` value to identify the associated \"async context\". But since `AsyncLocal` values would flow up the _syncronous_ call stack and down _any_ call stack, I could end up with multiple threads acquiring the lock simultaneously. And in fact, in some circumstances that is exactly what I would want, since I could end up on a completely different thread after an `await` in some method down the call stack and I would want to allow lock reentry there.\r\n\r\nThis seems schizophrenic on a whole another level -- I simultaneously _want and don't want_ to allow _multiple threads_ to be able to _enter the lock_. Do you have any comments? :)","date":"2021-10-02T06:32:15.261Z"}