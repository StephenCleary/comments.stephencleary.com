{"_id":"09c108d2-2c44-3870-bbcf-c107d173178e","authorName":"svick","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"http://www.blogger.com/profile/17579249405158039163","authorUserId":"","authorFallbackAvatar":"","message":"*If someone is working on A, they have to be very careful which invariants they violate while holding their lock, because B is depending on some subset of those invariants.*  \r\n\r\nBut that's not really about re-entrant locks, no? With your proposed refactoring into C_UnderLock(), the dependency is still there, the person who is working on A still has to know how that method behaves.","postId":"2013_04_recursive-re-entrant-locks-2b4ba4bb-380b-3fca-9765-9a08c2b8bda1","replyTo":"","date":"2013-04-26T04:10:59Z","timestamp":1366949459}