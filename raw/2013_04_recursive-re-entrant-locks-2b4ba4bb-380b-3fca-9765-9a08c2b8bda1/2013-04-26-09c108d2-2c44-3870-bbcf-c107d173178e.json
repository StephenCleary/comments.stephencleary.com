{"_id":"09c108d2-2c44-3870-bbcf-c107d173178e","authorName":"svick","authorEmailEncrypted":"WYYFJuQbIC15uHlKaFqiTxlmXZGz+akvbrQh5ieP9XUZT4aFpe0BsZwiLiHsVCGGS2GcSWsUcbL+9sNkDtGyt4HTe+vzK3ar2NdwlyPKD9JZU0jXMAub+g0UfEOX5j2dpxmIgh5juISVwanFkzUou1YYD53zHavIRG/X4tHsWxlJ3mVRq0NEHOZAEEBmASbWyQJDqfKC6zeLvW/J+qZG9oLwr+1yhJOeZHTNF1/9UivWXl0msFe2GbAR3TYIdqyCL1DBPP9SQEE3TNSIer3T10CRNy3jWgwjbDjRVu70pAMfeQR7Bew3kbNpBdsmGS3m0CPYfAfgxU1BL4TLIpijfxjl/JIb05XcwIxyQ/9xsSai+10vMk/IAUHHGRTAfj5SsWaIOIBQB+VjZxE1Bm77CWV1vVJEx57tPWWMInwkkiWDKsRLQCtzCobw8GOSaP0CLXe3CgA630uz536HwzJ5oILd6ThY3kj74bp+hqmble1AA8GIfMtlZF4Nq44KipkHnyLw51FrDtHzxcP5JFVfCvF4Cm2qMStiHN1AmRY/56LLSXfBq3mAAmo5O5CCQyXuWgJhFKSYIy+m1iTxhqmzcgxwhSgZ79OPNxHmGRX3lZuvwZvF9UG+NtDea5vai142DrgJt9etKub2CSPx0dQbxwfFoqqMZXIYoH13CMan3R8=","authorEmailMD5":"c865d9407b4b50e6e9b8ee52ef5c83d4","message":"*If someone is working on A, they have to be very careful which invariants they violate while holding their lock, because B is depending on some subset of those invariants.*  \r\n\r\nBut that's not really about re-entrant locks, no? With your proposed refactoring into C_UnderLock(), the dependency is still there, the person who is working on A still has to know how that method behaves.","postId":"2013_04_recursive-re-entrant-locks-2b4ba4bb-380b-3fca-9765-9a08c2b8bda1","replyTo":"","date":"2013-04-26T04:10:59Z","timestamp":1366949459,"authorUserId":""}