{"_id":"1dfcdbb0-d167-11ec-a689-c3ba71b18844","postId":"2012_02_async-console-programs-2120b75e-4001-37ec-a5ad-04ca51ccb801","postUri":"https://blog.stephencleary.com/2012/02/async-console-programs.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Andy California","authorUri":"","message":"A console application has no reason to be async. Async helps with thread exhaustion in web applications, I'll give it that -- does Console application have this problem? No. A console application doesn't need to be async, EVER.\r\nAnd now just because some 3rd party library has an async-only method, the recommendation is to rework my whole console application? And lose the ability to use Span, ref structs and \"out\" params and other goodies that don't play with async?\r\n\r\nSynchronous code is easy to understand and doesn't have any hidden problems unlike this async nonsense. I've been using this whole async/await for a few years now doing occasional reading on it, and honest to God, I have no certainty that I have when I use Tasks in sychronous code because of hidden UNDOCUMENTED problems like these that stem from things being done implicitly. At this point, the only way to be sure about how things work, is to know the whole implementation -- which I don't think would be a walk in the park, would it?\r\n\r\nI used to be a big fan of C#, but with buggy features like this that are intended to make the language easily accessible to mindless Javascripters who are not willing to put in any work to learn programming fundamentals, and end up confusing people who are serious about programming , and now have to focus on keeping up with new syntactic sugar features (and dealing with bugs they bring) rather than on writing code or learning something serious... C# is losing me.","date":"2022-05-11T20:15:35.816Z"}