{"_id":"65e69bed-5c31-3387-9b1d-7fa9c8b999c0","authorName":"Prasanna V. Loganathar","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"http://www.blogger.com/profile/05767806156414811301","authorUserId":"","authorFallbackAvatar":"","message":"Hi,   \r\n\r\nI was playing around with the AsyncContext, and suddenly, got into a situation which I couldn't explain. I've written a simple example below. All the tasks below seemed to execute as expected, until I put in the Console.ReadKey there. It seems the tasks complete, only when the AsyncContext ends. Am I missing something?  \r\n\r\n public class Program  \r\n {  \r\n private static ThreadLocal _localStr =  \r\n new ThreadLocal(() => String.Format(\"Hello from Thread: {0}!\", Thread.CurrentThread.ManagedThreadId));  \r\n\r\n private static void Main(string[] args)  \r\n {  \r\n Nito.AsyncEx.AsyncContext.Run(() =>  \r\n {  \r\n\r\n Console.WriteLine(_localStr);  \r\n\r\n Task.Factory.StartNew(() => Console.WriteLine(_localStr), CancellationToken.None,  \r\n TaskCreationOptions.None, TaskScheduler.FromCurrentSynchronizationContext());  \r\n\r\n Task.Factory.StartNew(() => Console.WriteLine(_localStr), CancellationToken.None,  \r\n TaskCreationOptions.None, TaskScheduler.FromCurrentSynchronizationContext());  \r\n\r\n Task.Delay(100).Wait();  \r\n\r\n Console.WriteLine(_localStr);  \r\n\r\n Console.ReadKey();  \r\n });  \r\n }  \r\n }","postId":"2012_02_async-console-programs-2120b75e-4001-37ec-a5ad-04ca51ccb801","replyTo":"","date":"2014-02-22T20:25:23Z","timestamp":1393100723}