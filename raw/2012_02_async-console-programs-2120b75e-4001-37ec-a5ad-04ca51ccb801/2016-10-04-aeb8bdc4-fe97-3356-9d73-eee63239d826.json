{"_id":"aeb8bdc4-fe97-3356-9d73-eee63239d826","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"Essentially, you create an `AsyncContextThread`:  \r\n var thread = new AsyncContextThread();  \r\nThis creates a new thread with its own AsyncContext and starts it running.  \r\nThen, you can queue work to it using its context's TaskFactory:  \r\n thread.Context.Factory.Run(...);  \r\nWhen you are done, use `Join` or `Dispose` to cause the thread to exit.\r\n\r\nIt looks like `Factory` won't show up in IntelliSense, but it is there. Sorry about that - I should have added `Run` methods to `AsyncContextThread` directly when I hid `Factory`. I've opened an issue for this here: [https://github.com/StephenCleary/AsyncEx.Context/issues/3](https://github.com/StephenCleary/AsyncEx.Context/issues/3)","postId":"2012_02_async-console-programs-2120b75e-4001-37ec-a5ad-04ca51ccb801","replyTo":"cda06c30-3bf3-3106-bdf9-ed434a35b57d","date":"2016-10-04T17:08:27Z","timestamp":1475600907}