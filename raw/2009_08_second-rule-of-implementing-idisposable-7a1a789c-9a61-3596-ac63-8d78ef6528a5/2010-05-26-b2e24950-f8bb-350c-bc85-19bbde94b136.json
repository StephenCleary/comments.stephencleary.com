{"_id":"b2e24950-f8bb-350c-bc85-19bbde94b136","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"@Rodi: The design here is that SingleApplicationInstance owns the Mutex resource. Since it owns that resource, it is responsible for freeing it.  \r\n\r\nFor this reason, the Dispose method does not have a bug. It is possible that someone may introduce a bug during refactoring, but the Dispose method as it stands does not have a bug.  \r\n\r\nIn particular, I would say it's wrong to have Dispose check namedMutex for null. This implies that the design is that SingleApplicationInstance may or may not own a Mutex resource.","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2010-05-26T20:41:48Z","timestamp":1274906508}