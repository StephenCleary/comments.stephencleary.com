{"_id":"79f06200-bf98-3df5-b44d-6bebb7a545da","authorName":"Stephen Cleary, Nito Programs","authorEmailEncrypted":"T9rmWLMRqHUzRUUrSFufm/CkkYDEIGiFEu4ywuuySRERh28ZZMx9x9fSW5TE7rF1kYKxbH+rJm/9Hbn1+XwNKbVmnUBbr6OqZv0gFrxIVvmZyWZ33fCQ+hd3PahFvDB1ax2k8ufStJgR2Xm4JMfsOnaJDTgD/jnUjsvCtfeZW78xXTTOxifQhh22po9RqiOQvkGWsMmIpRUe+0nLGam+WnSZxyX0qD7tGW3WwQpAbxdel9s0nO/AaTYYybqbNWlmBTM/6qGY4X25ZgpSsZYTn/mG/YCp2haM+VtnDuVNSfRoHOejr3UIrwi8uF9bs9F7LhOHY0EUus/+i0LRY1XQ7Fg7MpvpjW8amXsn7/BXsVCmZCO1qsYNfvv9sqy277TDPJlBQFB3JbSSTJ1ZANjO+8rfte3y1KEpN36kQveIwx4OY+xWvxNi4eYxwUzzrSch8s3vhxXHy7XxLVkbooaEnkekToIdiZ4XWlGAccv+Cc2wNiYa2XMQj/J5MQ5eVG5us0teLidIQdcuNL3XQrCc7roRvKHVf+8vHim/5tj87oi+Ksk+hWXpoig/mRoc2yXpz50PzWRfm2cXF5aqn+F98bUrw2zp11yV+NJwnRn/HUxZiqoXmEXa2UeKkhQQ3It/wSTyEIFaoJ8/hgjASOYHyIM5UhezEh+gVNcOEtJE82o=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"@Anonymous:  \r\n\r\nI don't include the \"if\" check precisely because the Dispose method should only dispose resources the object owns.  \r\n\r\nIf an object is refactored so that it no longer owns a resource, then Dispose needs to be refactored too (this would be true even if you had an if check).  \r\n\r\n(BTW, I did not say to use an \"if\" statement if the object maybe-owns its resource. I never encourage \"if\" statements in Dispose; an object either owns a resource or it does not. It may share an owned resource by owning a reference-counted Disposable, but this is rarely needed).  \r\n\r\nOn the other hand, *not* calling Dispose when you *should* can cause some very difficult-to-find bugs. Many classes *require* Dispose to be called, no \"if's\" about it (pardon the pun!).  \r\n\r\nSo I claim the \"if\" check makes the code *less* robust in the face of complex software processes and team maintenance over time.  \r\n\r\nWhat the benefits are of having an \"if\" check?  \r\n1. It does not help when refactoring. Changing resource ownership requires changes to Dispose regardless of whether there's an \"if\" check.  \r\n2. It does not help with robustness. If it actually avoids a null dereference, then you've only introduced a much harder-to-find error by skipping the owned resource's Dispose.   \r\n\r\nOn the other hand, I think *not* having an \"if\" check more clearly communicates the designed intent of the code. That is the reason for my recommendation (not for performance or avoiding code bloat ;).  \r\n\r\nThat said, you are free to take my advice and toss it in the trash. I am, after all, just a random blogger. :)","postId":"2009_08_second-rule-of-implementing-idisposable-7a1a789c-9a61-3596-ac63-8d78ef6528a5","replyTo":"","date":"2011-04-08T18:24:34Z","timestamp":1302287074,"authorUserId":""}