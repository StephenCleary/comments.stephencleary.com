{"_id":"3baca660-0910-11ec-b01e-757f10d01bf8","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"","authorEmailEncrypted":"HYg2i71mLrBAJhx+xEBOL09dlASRv2+POe+fLQObfUWX0+EJ7oqyybeBXg0+zgANVMF//MEiMExUPkCqzxgv1ViTjgLuUqb0rH8Szjd3iz3nqLySXvMQeqwLI7i0WMr0GZaapfJnjCZiU200ynr5udvn/vlxOtSPlPDqneQSzLfK+KlVakrlbQhEia9/2dBf9UzPvxyrtv3es3yDR6FHQw1MtsmwCp/Ry8yzgV4lvSszIL6O0TTiKPBXoNM2JH1iGfKYVQXGZH1qMy4hMoRs7l83jrbJxkEzxEPQehPEbVeGrqbl3UDxOiuf6EoxEzLdI7yRt2Gxj6PKKHRtYpLmhcSbZXGnuHolwYvvAsMED9tP0ZhTogwz/qxdBnCGxU27swtb/BlPSmEDAde8h//8cMaFGYffu6q74wSAzXPE1JW8FS4c73+1+KVOMcCGb2nIQTvrld9K4YjOG0IPPtUZuk5S7Xd/lJFEUYgpNLRWzuaAtnc9dV0lozGMgZXSmnE6GYlrQ+e+JzG9cvU5G/FZ/aGInrAKzGSLLJWSQv65jI1Swl4jxdvzDR+LkD4TWqTwNEozs/cxIaHcp2/3Crf1wbEJUeBM0BCdUNmZrze+nmvqiZQCZUuJJMOjBZMbCsTBvRhsFQVSDOIP5NRIqQcrOmEZ8trMVg20TgP6Uqd8K3U=","authorEmailMD5":"df9b1cab1c92b5a3ca9707a26333f53b","authorName":"Siavash Mortazavi","authorUri":"","message":"Hi, thanks for the article. I've tried this in a sample code and honestly, cannot understand the benefit. Here are 2 things: A. I usually log the exception on the outer-most block in the call chain, because if I log the details on every catch (or its exception filter), I will end up having redundant pieces of info. Then, B, I log the whole stack trace, and gladly Exception.ToString() is overloaded to dump the whole unwound stack. So, by combining A and B, I can have the detailed log of call chain and the line number of calls, from inner most block that has caused the actual exception, to the outer-most caller. \r\n\r\nSo, I cannot understand what extra \"data logging scope\" can an exception filter provides. Could you please provide more insight? \r\nI also tried to put a breakpoint on the 'when' clause to see if the variables in the current stack (in current try block) can be read, but unfortunately that's not the case, either.\r\n\r\nBy the way, when you use False, the catch block never get executed, so I think you can short-circuit it with an empty block like \"{}\". By using that and do the logging in your False method, the code can be more concise:\r\n\r\ncatch (Exception ex) when (LogException(ex)) {}\r\n\r\nThank you so much.","date":"2021-08-29T21:29:46.898Z"}