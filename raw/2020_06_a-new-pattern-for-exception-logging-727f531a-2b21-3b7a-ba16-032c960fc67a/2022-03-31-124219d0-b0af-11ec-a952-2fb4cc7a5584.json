{"_id":"124219d0-b0af-11ec-a952-2fb4cc7a5584","postId":"2020_06_a-new-pattern-for-exception-logging-727f531a-2b21-3b7a-ba16-032c960fc67a","postUri":"https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","replyTo":"9a02c620-b02e-11ec-82e2-516ed88685ae","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Spud","authorUri":"","message":"This is asp.net / kestrel, simple http handling.... I would put a pointer to a dictionary in asynclocal, so the pointer is immutable (modulo GC relocation?) but the data is obviously mutable... don't think I need a concurrent dictionary because I'm not using multiple threads to handle a single request.\r\n\r\nI don't see how this is less safe than getting the HttpContext.Current (whatever it's called) and throwing stuff into its .Items grab bag...\r\n\r\nI read your blog about the stack and am not sure I would run into that complexity... I would just be adding attributes while processing the request, and destroying it all at once at the end.   And of course, not starting two threads that diverge or conflict in any way with what they would push/pop.\r\n\r\nInteresting thought experiment... never before have I imagined an \"immutable stack\" concept being useful for anything...\r\n\r\nBy the way, I noticed your point about this exception trick not working with async.  I personally like async a lot, it's explicit about what's happening and seems pretty efficient.  What do you think? Will threads or async win the future?  Also, I like the ability to use exceptions for things, even signaling a 403 not authorized -- what are your thoughts on performance here.  Is capturing the stack trace too inefficient?  Should the industry look at perhaps a \"throw without traceback capture\"  optimization?","date":"2022-03-31T04:57:31.615Z"}