{"_id":"0d495355-4db0-3ad0-9bc3-3e50a399a6e2","authorName":"Assil AR","authorEmailEncrypted":"Hbj+YLglXVc67cfwuqT7ZboKegYSJ11yDDfCse+FTMCREqap6Sir76+daqmKJJRzZKoyB0pB1yCLjUs8rk9OLAXepyCdpLasfwsOum+R6/ybgdslE7J6zKuXwW6iNccRxJEI9ELbbdf53OjbvBHGlne/q4RINj6W9IHN4uMwsconQJPbrLEn/sCd3ay1ln+CVcZEYRpOAAyIsvlfWgajtJi6vN2/DqEUO0OmK16c5hZb44F7D6FfQS6PSUsmNXaPKa6Nvxm29JCNEjEsirsam0dc7BcaL8UGFRjBxvy52tNpWuY2OTFM3cLc8uEFRnZgiHYzIlVlvzHXfkByB4f88C2rovzqe+IOnHS7UYxQJ2DFtE83nPZjbPp1D4qu9O7vOKnJDyOZuU1LD20tbon/jml5MrUglHBHWrG47LFTZcyrC69IDGuDaRmtCu1anE1DEiwWVC1W8NH91//FiKsvnsarf/qnNcEf7/7B3fd9/k2EtpslEwi2VvLD+9IgyThP3MuOmQYWi7E5SzKybjySv3JOYtB8F+u0Ip14qxbxOxvkKEtPsMPHWeqwC4Ef3+5fSlGq23MvX8j3Udvqh4rooVB44+/qtbY+8HjRmVS8ESQgpHDkHuHBeLmCdpA3bVMY2s4f98F+NcZJ/YlNFm6Ny7150ocXbCj8l4bkhCoWbqw=","authorEmailMD5":"3e9c5cee36041dd7a396aaa5fdcd01b2","message":"Is this an acceptable implementation:\r\n\r\n using System;  \r\n using System.IO;  \r\n using System.Threading;  \r\n using System.Threading.Tasks;\r\n\r\n public class WriteOnlyStreamWrapper : Stream  \r\n {  \r\n private readonly Stream _stream;  \r\n private long _position;\r\n\r\n public WriteOnlyStreamWrapper(Stream stream)  \r\n {  \r\n _stream = stream;  \r\n }\r\n\r\n public override long Position  \r\n {  \r\n get { return _position; }  \r\n set { throw new NotSupportedException(); }  \r\n }\r\n\r\n public override bool CanRead  \r\n {  \r\n get  \r\n {  \r\n throw new NotSupportedException();  \r\n }  \r\n }\r\n\r\n public override bool CanSeek  \r\n {  \r\n get  \r\n {  \r\n throw new NotSupportedException();  \r\n }  \r\n }\r\n\r\n public override bool CanWrite  \r\n {  \r\n get  \r\n {  \r\n return true;  \r\n }  \r\n }\r\n\r\n public override long Length  \r\n {  \r\n get  \r\n {  \r\n return _stream.Length;  \r\n }  \r\n }\r\n\r\n public override void Write(byte[] buffer, int offset, int count)  \r\n {  \r\n _position += count;  \r\n _stream.Write(buffer, offset, count);  \r\n }\r\n\r\n public override void WriteByte(byte value)  \r\n {  \r\n _position += 1;  \r\n _stream.WriteByte(value);  \r\n }\r\n\r\n public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)  \r\n {  \r\n _position += count;  \r\n return _stream.WriteAsync(buffer, offset, count, cancellationToken);  \r\n }\r\n\r\n public override void Flush()  \r\n {  \r\n _stream.Flush();  \r\n }\r\n\r\n public override int Read(byte[] buffer, int offset, int count)  \r\n {  \r\n throw new NotSupportedException();  \r\n }\r\n\r\n public override long Seek(long offset, SeekOrigin origin)  \r\n {  \r\n throw new NotSupportedException();  \r\n }\r\n\r\n public override void SetLength(long value)  \r\n {  \r\n _stream.SetLength(value);  \r\n }  \r\n }","postId":"2016_11_ziparchive-on-write-only-streams-a498b4ea-1d1d-3c69-87a9-e97576de10bb","replyTo":"848d4384-ef66-3f83-8cc8-fa8ad47fbf57","date":"2017-08-25T11:40:58Z","timestamp":1503661258,"authorUserId":"disqus:assilar"}