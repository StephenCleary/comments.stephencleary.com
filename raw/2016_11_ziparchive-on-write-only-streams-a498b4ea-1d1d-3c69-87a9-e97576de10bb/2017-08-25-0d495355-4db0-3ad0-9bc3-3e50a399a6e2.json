{"_id":"0d495355-4db0-3ad0-9bc3-3e50a399a6e2","authorName":"Assil AR","authorEmailEncrypted":"n1geUHCzKV7ZY0NLEque6nFazqmdS4uMyjAwrJPRZP1oISSJusmNjoD4ZKakscqhVu7NrVjdclFSfqI/Hd+nM7JfVczT+XQ9EIGI2L8Ph/dPn0WzK0n3P/RYeI+nqsAv7pTNMOHW9+UAc4HZXIkzdh8p1HId+Ox1MsHw5AMR1FheMBRvkOumgQRDWWlX9YkC6T8ijr0ZQn4KGztRSxCd3S3YZp9Va92vPQQ4CMpFRmMuDLzCwdh5ZKtZPzQo4CgQx41B+sUPWT/NASrSGGYKCgf20hLUgPtQz9tQ8f/0Lbr2Db4rPREwoEkR5tu5vM+SZ4RqICMD80+Yvqfokn9N3te47FHmrXcePXaTaqHegaDMuuCr5DKefbhmA6uCZBYI7N7z0ZC68rfHxkseZk31C/+jDLFPZKQbcYFcsLkwJwQ6jOwW1HOmEIE3JIOQ68YvY21q5cb1qDNL6UZ6IwPpy8TCLODiy4hkl2Z6nN7f10iLEqWtNbsOSaJ+SSRG/eMD9BrBls2OAj4iW4Vm3A2IqsxuDeRRy6jDf55Q/u+gfyd4z7XXE6eoEvQnU/2zHJC0zDzWwlsneyXPLPOYUbxkVmn97VKTz0HD0Re2Omu2kkvXhfU+egvWDC6D6e9JuJ6x6A60Z5rMp0zt4isJWQVbPzN4yLhDy/PZYGNBUIzBYx8=","authorEmailMD5":"3e9c5cee36041dd7a396aaa5fdcd01b2","authorUri":"","authorUserId":"disqus:assilar","authorFallbackAvatar":"https://disqus.com/api/users/avatars/assilar.jpg","message":"Is this an acceptable implementation:\r\n\r\n using System;  \r\n using System.IO;  \r\n using System.Threading;  \r\n using System.Threading.Tasks;\r\n\r\n public class WriteOnlyStreamWrapper : Stream  \r\n {  \r\n private readonly Stream _stream;  \r\n private long _position;\r\n\r\n public WriteOnlyStreamWrapper(Stream stream)  \r\n {  \r\n _stream = stream;  \r\n }\r\n\r\n public override long Position  \r\n {  \r\n get { return _position; }  \r\n set { throw new NotSupportedException(); }  \r\n }\r\n\r\n public override bool CanRead  \r\n {  \r\n get  \r\n {  \r\n throw new NotSupportedException();  \r\n }  \r\n }\r\n\r\n public override bool CanSeek  \r\n {  \r\n get  \r\n {  \r\n throw new NotSupportedException();  \r\n }  \r\n }\r\n\r\n public override bool CanWrite  \r\n {  \r\n get  \r\n {  \r\n return true;  \r\n }  \r\n }\r\n\r\n public override long Length  \r\n {  \r\n get  \r\n {  \r\n return _stream.Length;  \r\n }  \r\n }\r\n\r\n public override void Write(byte[] buffer, int offset, int count)  \r\n {  \r\n _position += count;  \r\n _stream.Write(buffer, offset, count);  \r\n }\r\n\r\n public override void WriteByte(byte value)  \r\n {  \r\n _position += 1;  \r\n _stream.WriteByte(value);  \r\n }\r\n\r\n public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)  \r\n {  \r\n _position += count;  \r\n return _stream.WriteAsync(buffer, offset, count, cancellationToken);  \r\n }\r\n\r\n public override void Flush()  \r\n {  \r\n _stream.Flush();  \r\n }\r\n\r\n public override int Read(byte[] buffer, int offset, int count)  \r\n {  \r\n throw new NotSupportedException();  \r\n }\r\n\r\n public override long Seek(long offset, SeekOrigin origin)  \r\n {  \r\n throw new NotSupportedException();  \r\n }\r\n\r\n public override void SetLength(long value)  \r\n {  \r\n _stream.SetLength(value);  \r\n }  \r\n }","postId":"2016_11_ziparchive-on-write-only-streams-a498b4ea-1d1d-3c69-87a9-e97576de10bb","replyTo":"848d4384-ef66-3f83-8cc8-fa8ad47fbf57","date":"2017-08-25T11:40:58Z","timestamp":1503661258}