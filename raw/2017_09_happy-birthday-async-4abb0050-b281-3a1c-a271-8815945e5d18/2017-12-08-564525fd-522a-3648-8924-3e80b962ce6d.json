{"_id":"564525fd-522a-3648-8924-3e80b962ce6d","authorName":"Sujit Kumar Singh","authorEmailEncrypted":"kKEJgB+pqZLkLH+z97WXRcW2GiS6nEV4dw12UcLqQlsMcYTb30XC+BL6PyO6xxVcewhQ5/aULFj12cRxfd/RF8X+6KUOra1E1XWiq49wPcFil4dwa9nPH0f0ATA2FSFGLa9TloZV1omjIiLrWHckYQy3uPtCmBlV3oM+p31gDUoP2rJ++6vSpfKgX3Gj3SUc6sJqDob1FL9ZSKlg49PwQlSPFHLL09jYD2YGDIATjghj+b4+2/maCl90Wd7w/6ixNejaTMkG8nRkbWjDh0Cgo43LUZ6w8tMN8c9TE4Ii5MTUZ+onAIuxIKqqtWHPE8iShEeEGKrXsdRFawwodNozuhwaD26IRtH38JST+g8AnFEOyTpJFk8tNrC6PiBFVKYnbGlsIL0jcUACs3Arfs4VuufwGy46hoCLsy7R/fN8Pdzq+qreV8mrdd1atgDt/WG365hNypN+MqgvuJUYx19pfjvSgACbxsY19M0mSCPhqarUezRnav6EPwfYmHDanQr+KbM8I5vJMiQxX8ZO0aLYj18V4qWgtNwvRvDkW56tV5l9Wenbyn77ln2QS524YIS4NGRHwBw3re6SXi4wHzidtDSp6fv7u1C7KL2LhWwf0XJGv6r4ZyIbCOHH+N2nyfkHYQU9QhN+KSMLhVKDw20ePFOr7Y3NKFOIGUAYLKRBens=","authorEmailMD5":"b9c63b2bc2db67f7bdfd613d06b189ae","authorUri":"","authorUserId":"disqus:sujitkumarsingh","message":"Thanks Stephen for providing me the right path as you have been there and guided so many. Your articles are awesome but I am reading it many times to figure it out completely. One thing that confuses me while using async await and Task.Run is that\r\n\r\nComing from backgroundworker thread background, I run (beginWorkerAsync) it for long processes in my winform and when I need to update UI I call INVOKE, but if I have to update it to using async j/ await / Task.Run then I think I might do the following\r\n\r\n1) Use Task.Run and then should I update UI from there using INVOKE? But if I use this approach is it not the same as backgroundworker with the only advantage I see here is might be less code or more readability?\r\n\r\n2) I just can't think how async await fits in for my requirement because most of my code is CPU intensive and if I use it, it still runs on UI thread and hence freezes my UI\r\n\r\n3) Is async await only useful for Network scenario, as far as keeping UI responsive is concerned?\r\n\r\nThanks.","postId":"2017_09_happy-birthday-async-4abb0050-b281-3a1c-a271-8815945e5d18","replyTo":"8a505fd6-8c1d-3e8b-8042-3787f84c3924","date":"2017-12-08T03:34:08Z","timestamp":1512704048}