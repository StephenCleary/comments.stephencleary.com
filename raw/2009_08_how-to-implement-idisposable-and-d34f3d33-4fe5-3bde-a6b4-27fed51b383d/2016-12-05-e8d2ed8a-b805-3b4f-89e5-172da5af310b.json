{"_id":"e8d2ed8a-b805-3b4f-89e5-172da5af310b","authorName":"Stephen Cleary","authorEmailEncrypted":"fjtlkdK0EOfUo1n5WpZNsUpXTxc+mi5gsSVqcdO3AOUtq1tUDn/WNSt5K5bVqaGdVAKkmepPVk1gNeeaUywhRjAPCRSh+/gBHL6C7zKwGwo+ChhcFG9G/p16qRdymwj6OMRJ9QmjQLkGa0eBU8PErJh8LPH/r1PAOmj/CM1cyoSP8H4n/nPwCq3mOeWsLE8Ng3P43/qJxveImcKMIDr49mSdC8AknBviR6QiMa0gBvgpI+CDtsxDrCLKphjZ0rvYkWROTA7nAq1Gs2RHf9HHZIoq2kX4j+7AjtQfIRGfck+BbvcPsAPQFX+8R4rXLmFcdu/4ghloVT8qrvWJMN6DpX2ZK4BdzpCG5gMYbWR5xcJ32qcVXCSueZTI9UppQKiTdmt9XqIKR/9Nik2vR/PuFOXbRg2BXfQUR9Y7jWeLFaEZCvWhBiM43G1eBrY8T45zeORNMqEHGvur52zSlb7Ow2mQr3jw3RfPPdJ5KgxrDNrGCUD9Qq9NtpNYryuKqWII5Nh1TtX/hOJchgGEQbvN5h6QTENJdtpsfo5/0LQwcMENB5IbqWtUQBU/LylITKbwy+MJkiLnLzfbcYYCyKZqHYRRMcIVK3GSBFaerruIeHsZUPQQydtOgUl3BUTGXEyMrrxS+DTrXQqq4dutqxLLivsJcwRFKTRR3axr1RJCthU=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"It depends on your background. For example, with my background in C++, I see one major problem with the whole disposable system: it puts the burden on the client to dispose of the resource. C++ destructors do not; they are always called automatically when the object goes out of scope (RAII).\r\n\r\nI have nothing against using IDisposable for \"cleanup\" tasks - e.g., I use IDisposable to unlock async-compatible locks; this series is just looking at IDisposable with its original purpose in mind: disposing allocated resources.","postId":"2009_08_how-to-implement-idisposable-and-d34f3d33-4fe5-3bde-a6b4-27fed51b383d","replyTo":"8500c14e-1853-3795-b2da-02362700a4ae","date":"2016-12-05T14:20:46Z","timestamp":1480947646,"authorUserId":"disqus:stephen_cleary"}