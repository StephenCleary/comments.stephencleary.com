{"_id":"e8d2ed8a-b805-3b4f-89e5-172da5af310b","authorName":"Stephen Cleary","authorEmailEncrypted":"rFMAW8aPH+qK8pp7dNkvQhPJfD/1O3A8kYmBrhEqnv2/tRBziq7jpDWQ8kXZpOprtafBYut6sEZ0+fsREBWFLVUHu06Sn44pu/GuzDMd9rugHRQpBGnRJ4tFed9FQlsKoZ/ALC6XnesmG8KVY7WBoNcj5O5XLX++Lhz8aKKPWZ9/rVDIqJSoRPF4YCOalkjDdVUAEnxqHoICGq0KRTz/SPCrXT0v+ePYMDWHupVquOqObwVsw7+nLGD/dz1lOUbji143TYcFwNF9wEi6whKwqMt1nzxaCulifMR+Lc+hiQ/2G4L0XNNZckB2zlYGD8NXr8lySJYgR24U2mfz0jn0KT8HPoJuCm3vwbHPoGxbYkxwIUzfILTg+rJnXywyiDv1DAbMOq6wWjywE2AAC0ezrtEN9E8APen+IGxwUn4eKO3/6hBT9Xk2ILjbfgT/5Rq8Tk8ZcWnTGAaH3MBsEtMBMGo1BtFoqGPYEB8xpr7dhEfyl9drFKP7AWvoql1LH/ggsmqG73cMOpE/T2MXt5cc38BZJwIPL+tqzVzPJEiTCVDM4Yx5TuEMYPzy0GYn6Ln1ixx1UB2xuvCTuHYqb8ozMDXJY+NINxJE51QESTmKpT+z2FWRfaD0xMk44TAx+dh9emIkHZrTS8CwQ7+R0LK5nsxpfjYTqQkTsFsZgmwxDHg=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"It depends on your background. For example, with my background in C++, I see one major problem with the whole disposable system: it puts the burden on the client to dispose of the resource. C++ destructors do not; they are always called automatically when the object goes out of scope (RAII).\r\n\r\nI have nothing against using IDisposable for \"cleanup\" tasks - e.g., I use IDisposable to unlock async-compatible locks; this series is just looking at IDisposable with its original purpose in mind: disposing allocated resources.","postId":"2009_08_how-to-implement-idisposable-and-d34f3d33-4fe5-3bde-a6b4-27fed51b383d","replyTo":"8500c14e-1853-3795-b2da-02362700a4ae","date":"2016-12-05T14:20:46Z","timestamp":1480947646,"authorUserId":"disqus:stephen_cleary"}