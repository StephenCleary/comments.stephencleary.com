{"_id":"e8d2ed8a-b805-3b4f-89e5-172da5af310b","authorName":"Stephen Cleary","authorEmailEncrypted":"moO4XymjIUKHrKIAhNmBcqlbkcLP5pLOfWihtb9Z46CRj6y3DxLSVFbNdw86UrYI8F67r8G5VfYrdSP6nswq3Y0KIE3/qIAlVlfTo81FT7/HfhMpLwXPpBLrUtAGP5mWOtGINbp8J4UU+XGbZ5Hgn184D6pzaAf8Fij8oMQzyRu4uilGeqtmV/6H9sn443RijEIygepP3TMNJ8hFXUAnfCU/44W+ax4qHAwhCSxPvCzh45cdw6f3lRtGxWDoLYIpZgZe/GCIJbOuSxbqbMDKhawOy6JrvT4D/ScHfd0t+6mM2O7gFS55KwoHNFWUxz87k90AI274pcSoJFADBfVJB/IiJo4zq7P5RGeXB9Msm/rQxD44HOX4LdfoC/Viwcc+NqMpMAFShSEJ44hG6Dw6l2zu5vSOZc1/PPrbkf5cuIfxW6PBIRArqSlxa1j+nUOXXCohMfNZO2pPMv78gnBwoNULRljIbZPX7DF0w+9TGVppWaUS/bjvjZQZFBukUW6UCWyuC3MFi01SxAq0HNq/cln7RTtDLz9aCc+7Ld72fM2g9e6FOZreMhwfTuLzsOI4VBNAW6oO4Eb1IqFlzQCb7iWbL/uDYIYyfBYTvdG7bM1wo4m7Edo1O+cXc2q6AjHzqOv/aLD2d6Ntpv8A2a7aT5en4x4XzpORkbtKVOf8r/E=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"It depends on your background. For example, with my background in C++, I see one major problem with the whole disposable system: it puts the burden on the client to dispose of the resource. C++ destructors do not; they are always called automatically when the object goes out of scope (RAII).\r\n\r\nI have nothing against using IDisposable for \"cleanup\" tasks - e.g., I use IDisposable to unlock async-compatible locks; this series is just looking at IDisposable with its original purpose in mind: disposing allocated resources.","postId":"2009_08_how-to-implement-idisposable-and-d34f3d33-4fe5-3bde-a6b4-27fed51b383d","replyTo":"8500c14e-1853-3795-b2da-02362700a4ae","date":"2016-12-05T14:20:46Z","timestamp":1480947646,"authorUserId":"disqus:stephen_cleary"}