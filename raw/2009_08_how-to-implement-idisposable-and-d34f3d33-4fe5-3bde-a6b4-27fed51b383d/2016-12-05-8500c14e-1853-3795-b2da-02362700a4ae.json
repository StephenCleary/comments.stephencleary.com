{"_id":"8500c14e-1853-3795-b2da-02362700a4ae","authorName":"Jens Melgaard","authorEmailEncrypted":"bZXULrKX3IXOXjUJxngvbvil23lEQsmk9uVDhTZHTp2WSQ1kBVZRLdwHXQIl+IdUhvgAMC+q5jMiXFRQmECRJCLtQ8hLTJcy6D22IJG9OBsjPv/RKjLAkbAi4pZPYjKtKrl4qW5ATiukdIVKr4FL1ZqGvtaIu9VDRYr2gni/qdx8KF/34+f6SIUk6qZKeMD2OKv4IGAmLNhT/qGccaqdwfuMJoBRB84NX+wtFcQOoSpuHzcOllv2LnOceOmd+9XPQumvK6Qr3UsRUkSKZkKiFC2M+ZF5KlVfdYMuoH2jhJXTZDtGgZBH6/yW/JnZdjQ9I6vK1GYCYOpSf42LFe0pojVSci/EcZ5A7Z7BI8xiKARSUEzEr+t09aeUg1cBVy9hCNODYUiH//pfJ8qO+wXQPXJeU1UeXdOXTr+rhcxO26F9T1ufIaW+POjHLe3FK6uEdIURptZ6YpWeV8WxyYmbS9+lS99X+LJrY5lmOSb+UCrbi+HFohoOi33IhzjnUBbH9/O0aQYs2xG3qRPbFSn7cfZGpEbaZuu1jC+Dv7YYsklyiQJwH7FDKAt7wMKf5CBwoD1ANXeHSazmOH4bZ/wphSw3u/SbN6gdVKh0OoQzCBYFXTdkz3gk6A7BJg7Ej3RVMLfhOx2hAlBXBgu9GRwFjk+dlekf15e7yHkLCWZFfHw=","authorEmailMD5":"73444d6da4e960f1f7d41d3201b12d2c","message":"AFAIK IDisposeable is nothing more than an Interface that allows a language construct (the using statement) replacing:\r\n\r\nvar something = GetSomething();  \r\ntry {  \r\n something.DoIt();  \r\n AddSomeMoreCode();  \r\n} finally {  \r\n something.Done();  \r\n}\r\n\r\nWith:\r\n\r\nusing(var something = GetSomething()) {  \r\n something.DoIt();  \r\n AddSomeMoreCode();  \r\n} //And Done is implemented as Dispose instead.\r\n\r\n(And to be fair, that is a far cleaner syntax)\r\n\r\nSeeing it in that light I would argue that there is no problems with IDisposeable in it self, and there has never been.\r\n\r\nThe truth is that any single one of the problems mentioned would exist regardless of IDisposable. So it's hardly IDisposable's fault... If there is anything wrong with IDisposeable, it's what is written about it and tough about it... (This even comes from Microsoft them self who are more focused on what they wanted with the interface rather than what they managed to be capable of)... which overall has makes it all a huge mess.\r\n\r\nBut considering that the using statement can be useful in other scenarios as well. Then I wouldn't cling to strongly to these rules.\r\n\r\nOne could argue that it would be desired to unlock using for other interfaces, possibly user defined interfaces, but that is another talk.","postId":"2009_08_how-to-implement-idisposable-and-d34f3d33-4fe5-3bde-a6b4-27fed51b383d","replyTo":"","date":"2016-12-05T10:56:08Z","timestamp":1480935368,"authorUserId":"disqus:jens_melgaard"}