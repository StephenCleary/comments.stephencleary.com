{"_id":"15eb38e4-0273-38b8-84ab-3bc9f45273b9","authorName":"Alberto Antunes","authorEmailEncrypted":"CMXu/DZo9rIAEOk4DCq1CoKjLbO+hU9KgmEDHblUkvQuPspdmJlXj0pdlZcbvKLTAG65QahRnGu9JrTBTOH4gxuzr3YScXwPzs+4iVbwbgQJLNpfKARLFSsOw3MIkmlewvgSBsfsvOFDXGi38Wc2RnwkL3YDVvMV5eXZHfdyNPBavMyAJ/YB4/QpfDTj4G5cAixPXozZuYIRuyqgCF+YL7BTM1o6VKbKi85E8QRS6He+STGrO8dZfFmjGmOTUFaI3V9IrOxNALfkIQdS3Y08VodDhuWTOdJungZLeyRL6Yv4Qsn/aiBr9vCqSLFSNp/vAzCCuZ0U71rLlxfwaH/9Dz20xljsDNIvMI+kRo7d9ooro+r6hU+RqZzH5LafUt71yT3sarBWJt9ww+imgDy7TPtCtZNXkokP/wHGJTq0HmI4ExKFG0tugJdpjoq3Zp8XQMtt80XDHqWIyPK0HG8QCOebZVjVuFr9gTp+kThphnO45zNewiAIf0YBCQebvkANuszNo6jw2TQ6jLpesjR1UH9IfoZAgQvNwgUVEdGtUDPwA36RnyN/U2sMrqW12kLeTGIwy60DQevJK5bnR6aVdnC1aWXCArviLJ6d8/iWjZ6LkZqznCaZgKd7qzGMriFVvB8HVKUdUiSM64mdyPTfke85gsEp83qz/ptsQRG7+10=","authorEmailMD5":"07d521c848871c24805c64c5b3302289","message":"Thanks a lot for the great articles! I am facing a problem now using the NotifyTaskCompletion and had no luck finding a solution. I have a collection of ViewModels which have a property of the INotifyTaskCompletion<string>. I Have the values bound to the view like in the article and in the parent ViewModel that holds this collection of child VMs I have a foreach loop like this:\r\n\r\nforeach (var movie in movies)  \r\n {  \r\n var movieListItem = new MovieListItemViewModel(movie);  \r\n movieListItem.ImageSource = NotifyTaskCompletion.Create(imageLoader.GetImageUrl(movie.Name));  \r\n MovieListItems.Add(movieListItem);  \r\n }  \r\nThe problem is the GetImageUrl method calls an API that limits concurrent requests. Using this loop, all the requests are run at once and return errors. If I put a Thread.Sleep in the loop, the requests are run one by one and complete successfully, but of course since it is put in the constructor of the VM, it only shows up after all requests are done.  \r\nHow could I go about limiting the requests to be made one or two at a time in this scenario? Should I modify NotifyTaskCompletion and try to implement a delay there, or do you see a better approach that dumb old me does not see?   \r\nThanks again for sharing the awesome AsyncEx project!","postId":"2014_04_announcement-msdn-async-mvvm-articles-b2165e1d-7e99-386d-b481-ed64583f3ab7","replyTo":"","date":"2015-08-06T00:13:44Z","timestamp":1438820024,"authorUserId":"disqus:albertoantunes"}