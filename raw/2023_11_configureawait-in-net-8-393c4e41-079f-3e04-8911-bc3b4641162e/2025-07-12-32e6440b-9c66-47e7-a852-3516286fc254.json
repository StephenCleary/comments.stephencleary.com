{"_id":"32e6440b-9c66-47e7-a852-3516286fc254","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"d7811acd-24ed-4ef7-8587-2785bfb0f33e","authorEmailEncrypted":"ZoMzorO1wbJltUJWYj5phYig/zYRJTERTPP0D67Z07Q5zh0DZ\u002Ba2y5CAYb0ifDr2T0wmywkozHGgCyxAy9vfIgBDAlvVmYrX31M5ltVi31Hha6OGf2/vz\u002BqDWPhtWRgoAHxlNmtiuzcuQV8Lr2IdIJb2yTQvNcK4\u002BDTrOXgJlzuIWrML9\u002Benhah1jd43S3XK769sE1UMhp3JDyEGTF2diI4ujNsmK2Fz2LHF9ilq7shT67h8Sd6eky\u002B18UVwpERlJWz4oMMEWsZSITO\u002Baw0UBmNEvFPp2XQFuaN7TY/UmWtxY/BlGxu5FGPpLb1/\u002Bh2XAgHD/GbOtTFI5UgW9vCvoHldpLCk/UihE3YJ\u002BT3qK3/EPpGECy7NRGjfruZ8tDOwOhZrtgPTQ\u002BuRYuLF/8LhYHklmw8GRUIW3iURI0BzLt/pSHZGjBUzQmb4psbUVkxpssUGc3FzIqejLPLcGfC/qcUG2DUTk4UGkalBtrPtbnjOAct9NhI/RhIiRLHiw5wsKN\u002BILTcAAPMx16\u002B8oF4/Ja\u002Bxb0SBR1m1n/FVQi6Qyde\u002BwWMnTFn6PWAXUuTXCbzPxpLsTyGb9bBkz4ntBH4vk/0VJfu/3wpUvOHTQeBridlFF5kWt86LgIp/EgD4WkOv4xRHj1WOaJcp/3bAr1PNUf0MqaItA4Ri0IPCjH6s\u002BZg=","authorEmailMD5":"915b5ac6f433f99beba1085ffb655458","authorName":"Adam","authorUri":"","message":"This all super cool. BUT!!! \n\nI\u0027m running .Net in a single-threaded environment and every \u0060.ConfigureAwait(false)\u0060 is crashing the application as ThreadPool is simply not available. Furthermore, .Net does not provide any means to override this behavior which means that we can\u0027t use any library in which authors were patiently adding \u0060.ConfigureAwait(false)\u0060 on every line of code! Including some .Net libraries!\n\nI can\u0027t understand why this wasn\u0027t taken into account to at least allow configuring it and override the default behavior. \nIf anyone is curios what single-threaded environment I\u0027m talking about - it\u0027s C# code running in a browser as Unity3D application.\nBut anyway, a very nice article, Thanks!","date":"2025-07-12T14:29:35.6395243Z"}