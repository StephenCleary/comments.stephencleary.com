{"_id":"faebec67-9fb9-3d37-b43f-8acdf3371ac5","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"Most discussions like yours of rule one mention database access as an unmanaged or external (to the CLR) resource. But the MySQL .NET connector has a Dispose method which, according to the rules, makes it a managed wrapper. In fact, the MySQL .NET connector is listed on the MySQL site as fully managed. This makes all my database work fall under the simpler rule two.  \r\n\r\nWhat I'm really saying here is that the statement in your decision matrix that a managed resource is \"an instance of any class implementing IDisposable\" is much more valuable to understanding managed versus unmanaged than indiscriminately saying that a database connection is an example of an unmanaged resource. This was only made clear to me when I searched and found your decision matrix, which you intentionally split into a separate post. I really think you should throw in a link to that article in every \"Three simple rules\" page. I don't see it otherwise. Very valuable.  \r\n\r\nI've read a lot of very long, technical articles about the disposal pattern, most of which I didn't understand because they all seem to be written for someone who works in the MS OS development group or work through the API exclusively. That includes your own \"What Your Mother Never Told You...\" article. LOL. I work almost exclusively at the managed level, and it took me a while to really understand that. Your articles here have taken all the low-level obscurity and made it accessible and concise for application programmers like me. Thanks for the great work. It's really appreciated.","postId":"2009_08_third-rule-of-implementing-idisposable-832d2031-f442-3138-9c21-3930cda700c7","replyTo":"","date":"2012-03-23T07:07:44Z","timestamp":1332486464}