{"_id":"f60362c8-1cc9-3052-b73e-523bd698c962","authorName":"PassingBy","authorEmailEncrypted":"PouUoUIHapvJY9LTV2wyl/aOEV8VJ2ZrfqhMZA4xLeT061NVr1hrn9WVC402XzNR3nNqs+w1UUCEL6w3jHgTAPjJfRpE0KbLbSw6ybFb0l/swZUwCjM9YGbLZSe7plewKmGWgKw2aJEDNd10a924sFpidJqsi1TfnApTByr8s2xMznKmpWFxB6GzrVvG+2nO0gw7Vk9jpQsGkoH7HvqLd3YmgmBi/UdQgBPE8do0sIK/V2eqf3nAZPZ6Q0f6May1E+yX8yYk8do4EVilv4zVGOGg8h4SYLueywsw+9sk9FBCZZAjTEArEkW76hQ7SFv26RO0x6mpd9QvuJKtY3cW2g9xfm69q/F1DiyQFZ/2EsVyfX5aZ/wk/SChsv1WwXUofcFtnBqOj3h13n9FypI3cpgPqgRgnCh9QJEO/Vg/hVp1utIaAo6xYQQNG7aA/RTfp3Ugjty21uQJs3z4S7VWuso7aYvLU0CCud83u7bJMoYKrgp217Iqi44bSJghGZL2SerTurL6xLBBFu1bM26hxVoGCJVhlKWd6yuE90QW/F+/Am0mkKMilJBX9LAeDdlBahZY1Ck8c43UDYWnuCOubZG/A0UsusNIh37VxbVWPZ+WryuVf99bBwP/9yxX3MEASXmOYV6PQHBNS/wUjZ+wzMZ6B1yJV1cSAVAqW9V8k2c=","authorEmailMD5":"7303b498db923f32f44778477daadb2b","message":"Thanks for the fast reply. I appreciate it.  \r\nAnd you said that GetAwaiter and OnCompleted are extremely fast operation. Can I consider this that it is free from your old statement\r\n\r\n-------------Quote 1------------  \r\n'Conclusion: do not use Task.Run in the implementation of the method; instead, use Task.Run to call the method.'?   \r\n-----------------------------------\r\n\r\nFrom your article again.  \r\n-------------Quote 2------------  \r\nThe request starts processing on an ASP.NET thread.  \r\nTask.Run starts a task on the thread pool to do the calculations. The ASP.NET thread pool has to deal with (unexpectedly) losing one of its threads for the duration of this request.  \r\nThe original request thread is returned to the ASP.NET thread pool.  \r\nWhen the calculation is complete, that thread completes the request and is returned to the ASP.NET thread pool. The ASP.NET thread pool has to deal with (unexpectedly) getting another thread.  \r\n-----------------------------------\r\n\r\nThat is, because I still see that for the second example, Task.Run is running in a static method which is called from main thread. And one more time, you said that GetAwaiter in main thread is extremely fast.\r\n\r\nIf not, I would just let the method be 'synchronous' for the computing-bound algorihm and implement the aync in a main thread with a Task.Run as you said in the other article.\r\n\r\nBy the way, thanks to your concise post, I got a new insight to concurrency. Thanks again and have a nice day.\r\n\r\nPS. Sorry if you got a multiple set of notification because of my edit.","postId":"2012_02_creating-tasks-1fddee42-566c-340d-b868-e60118f33285","replyTo":"e3298318-0f99-35f7-8caf-e7303fda18e2","date":"2018-01-08T00:46:12Z","timestamp":1515372372,"authorUserId":"disqus:disqus_dyYQnhsWs6"}