{"_id":"5402faf0-d92c-11e8-aeb2-a14cbc5b8eb2","postId":"2012_02_creating-tasks-1fddee42-566c-340d-b868-e60118f33285","postUri":"https://blog.stephencleary.com/2012/02/creating-tasks.html","replyTo":"26fe1b10-d8ce-11e8-9ea4-a996cd0c12ea","authorEmailEncrypted":"ns3t390d4HDwb5Q1eiu11wkIbbZyvazixV6kuWBlZc/dibMSWtZ96T319pz486RZ5f16Mbw3cwqAcB6VzWM6jFHfL/mDpUsZD94Y3dtz2MC4i+jBBA2OZdJ0HMcTLNb4LIRecUh48FHloYkPCClqWBMZYrD7GvW/l6qkidqibL8jFUhiFTuBfKAlgx6eFziQIqO9LJv5NBKK8lJFEQEqlQ5kn5XKXh2ejSct4dApYvQ5u5281lLC1W8Zj+c8S64CehKAmpHD9eMdmjSxPiEDiwlp4BI1KUVqWzQNjUqzpcA7Yh8UEZc5sZwebIyrX6votjhh3sAXD2/TEp2XgEr04rOGiEQEK3OkAdsCBGcLDDOs3JqCue1pvKlmqsp3k720REPrQ2G5MCXD+9ylgMlGy5z3EjehyJc60kjKlFQVU8tbOplxfzsWdotgkR+vMwMRWpe+tEezCbGtEeTDv2yG4CFvx7SF4ywTKSr1NsqccdS3w6NJQZEuSFlaVzuIBf5acPZLM6CnOCYcfUqG/tLBQwe70qEz6ZHhD+A5geI1XPYvd+FNQsNYIgA+1A9OHzzLZcYdYfbEIw/Wtvi3yS6TXC05f6CoHuFshMOVkw06Blnou62mTSDR700ZZShmUeFSuw7PNRfaZ3YY7mKgC1X5wWZ0+2aLfeQwc+NC7PUAocQ=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"If you want to express cancellation, I think the best option would be to cancel the task.\r\n\r\nSo, if the dialog closes normally, you would use `TrySetResult`, and if the user cancels the dialog, you would use `TrySetCanceled`.\r\n\r\nIn general, I do not try to use `async`/`await` to control \"user flow\" like this in an application. I do not use \"awaitable dialogs\". In my experience, it works for simple things but quickly becomes too complex if the user has multiple choices. A more realistic (but also more complex) pattern for user interaction is Reactive Extensions (Rx). There's a fascinating project called [ReactiveUI](https://reactiveui.net/) that is specifically for defining your UI using Rx-enabled components, which makes a lot of sense to me (though I've never actually used it).","date":"2018-10-26T14:35:05.124Z"}