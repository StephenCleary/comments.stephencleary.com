{"_id":"f6693a60-40d0-11ed-86ce-5d0cf55af7bb","postId":"2022_09_modern-csharp-techniques-1-curiously-recurring-generic-pattern-d6c90b3b-a9d3-373f-a88b-442ad1e587ac","postUri":"https://blog.stephencleary.com/2022/09/modern-csharp-techniques-1-curiously-recurring-generic-pattern.html","replyTo":"","authorEmailEncrypted":"wE+eMc83Vsf0kLQ6u5bq/PQ3k0FWczuwMnPTS7i0mAt1HR0XRgv4bxSoqZrYIxcRFMqIIy6J0t8SPCD/aTUQvCzW60KVEh8kuK3DTqgejxNRqpU5/Hn95BQWS4tFFNAHzIWQINqyBhXlX6pPs5nBJli7OgBkrOkcpSIUNSF+Lm//Q8wjuBDnJ3zEvYYhQxN186SMxkXqOgk0t52Leh8zHPdygTfBh7rmqpmA9KuYXlwslgrsEQXqAFxsuqofNgsF9JEd+AaO37zJZRrGmRNnUKOYopBl35LpnMULpEBty8oaS+zgvwcy7H01/XG/hYpmFTFPUu3LR3TLFVO6NzoBHAIs1NzcU6uIgZ5F3SpJIQgSYW9zH1FQcs4lTcjsemzNYMo1dNY0h4D/PziXKny+6R4UvevWxPq2qRrRLenLsAEwJ+wowTFdr1LEUOPWifF0An7N9KnayDDIvpm5owYT79nrBbC4yNfVNODFifad+D6g3KGFqHsMRyN444P0eKc0D4JEh1MtbUUtjZO4sFJDgzsRRIbMg339XNUXWxUES7ZRd1OyXdEvlDpDA6O8UouUBrl9TUm2vhODQCElzYmIfdI6OIg5pglZt7JLqtYI7Mfj/ODAvTv6bkykuwMO7cDBOQVmtvX+AVHxg7lEZlL113N6VSbZqIggm5SiQ78anPM=","authorEmailMD5":"fb194a78a1e9047d0d9d8226d6e81ff3","authorName":"cao","authorUri":"","message":"I would add that one of the goals of the C++ CRTP is to avoid virtual calls, which is not possible for C# reference types.\r\n\r\nAlso, this pattern is not appropriate for complex class hierarchies. Once you \"close\" the generic parameter in type X, it is no longer possible to inherit from X and benefit from the pattern (although when the pattern is used in an interface  it is still possible to re-implement the interface).\r\n\r\nIn my view, the pattern should generally be avoided with base types, and used with caution with interfaces.","date":"2022-09-30T15:02:55.221Z"}