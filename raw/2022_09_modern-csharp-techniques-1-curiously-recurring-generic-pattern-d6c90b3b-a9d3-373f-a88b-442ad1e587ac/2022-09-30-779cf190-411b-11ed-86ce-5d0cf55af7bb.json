{"_id":"779cf190-411b-11ed-86ce-5d0cf55af7bb","postId":"2022_09_modern-csharp-techniques-1-curiously-recurring-generic-pattern-d6c90b3b-a9d3-373f-a88b-442ad1e587ac","postUri":"https://blog.stephencleary.com/2022/09/modern-csharp-techniques-1-curiously-recurring-generic-pattern.html","replyTo":"f6693a60-40d0-11ed-86ce-5d0cf55af7bb","authorEmailEncrypted":"QAoHI3q4BSH65k2yZ+YtinaouDbPq3ybnnJkXMXAq11Pucs60pd9CIdcJhEFs4A9j38A6qznrsmDpjpyaJpbsOlN4lTyLfj3Eu7iYa9uWpy+ckJ2mpAc25LKqoHo2gXl6CPeYldYjbN/RubNgs9gfr2xOBOrWAmdlvuegkMhQpVXKWWiwMlJinhWacYYEw8BteQak/y5lcX8PANorgdTBcqEqvs1+fwkB9R5/eKi1KUHvEldENHOuQS7A1nZCWTUXlfoi2sheNvP4yAwRwxfvGVnbtCAWJ/zbwDelyJA5aGafThGUVTz445AmFFCEVFZZE4wL3QdeuJjytzkQ/QtM5vWuhDMLj0a8BTjweGaFoBV6gloWXb0HWx6lLl64HfMayfxzuDXrjCnjd/dhA9Ee23qAQE0OatB1UwhNH9QEMFOsJGIQ27Def03N7P/ur7wleP4nJwV7PwfDtgkPwugTk3zF/zS1kkk9gq1pu4F7Dl/hgVrBCPYZNA10Fuy2+E24OscdCBxF83cTI44dRi4Zu+7MGhUh1uaohWWx8OFbeZsZA4PNBOL/qxvik26Ewwn5zPY7R35AHKn9NnBK0IkKm7PSe4MAfHC0tKpA655JcIMSrHFExW0TjtDpzVnT4ErF+Tpm2U6shyAcXN7lOF/tBc6uFxQ2kGucn7mTXQNpIY=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"> which is not possible for C# reference types.\r\n\r\nC# generics - as a run-time construct - are certainly limited in their form of code generation. But then C# also has the JIT compiler, which can optimize code to a surprising degree. In C#, *all* method calls are emitted by the compiler as virtual calls, and devirtualization happens in the JIT compiler.\r\n\r\nI agree with your point regarding complex hierarchies, though. In general, I avoid deep hierarchies.","date":"2022-09-30T23:56:14.682Z"}