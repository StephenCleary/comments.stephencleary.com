{"_id":"8cfddd80-5104-11ed-b867-5dc2ae03150f","postId":"2022_09_modern-csharp-techniques-1-curiously-recurring-generic-pattern-d6c90b3b-a9d3-373f-a88b-442ad1e587ac","postUri":"https://blog.stephencleary.com/2022/09/modern-csharp-techniques-1-curiously-recurring-generic-pattern.html","replyTo":"","authorEmailEncrypted":"asCm/GZJrWBdhJMBlEvlM5UaBEZaSR8YmfnnPDL2Z1ZDnQB7o7vn2c5gPyr+V29tgWIxnNuvMrP60kq4Pi2TFA6Iy7CHIlxOhdZeucr1XEWx18xxVBfS6xoJiGKSUwMROQ+2fA4HgEfEE9u70WyAQ5jSamMRcQ0RyT5qysEmyNo/hw6L0Tri9sIA1atsJV1shUA8GizwvHn8xU71gS82shpL1BJnVJHOeirQyenOR9Ck8zNoTQjho292Zl1OOm3hOzvvAM+4HiTb/fmekv0pSGRuEUsUfJfj63/H93wEObtD1Em3dz/nr8HqTWIvLysIrJ5HY7GeImVtgvGpM5NlH7CA28wlzIctqo8TczHOu2cR5mN+tARTlMSTz5nURvoJQFAzh22LW2OUmmWm0RliRFY8WWKdepKjtnS3g/U6sXfCSTNYM12CPYebIyspEsReDd+UkfJLv/x/2jb6x58ZDI0INUfDxetW062wTWuKVwOxJU77Ih4iw6HNEXmmpA3lighMhdtxFACYgNZgM79mpTsRWd+3i7GVVLeKU7zxP26MdLuBVGMErAzp3NIXHnlvpFEQM4s3i+eUdsAYAVAPTKyN98aRsZeNwZHR/JDhBznrB2S/zgNpnHeZlWYu6D3eu/T5J+oi3Ux6/RLR1u+F0vxDWVDZFN73uJHYCanP3Hw=","authorEmailMD5":"7bcbf5cbd8c19ed27fbc04388a1a2f48","authorName":"Sebastian Schumann","authorUri":"","message":"This technique is also very useful when you are trying to achieve operator overload.\r\n\r\nWe use typed id classes for our business objects. String would be possible, but then you might pass a wrong id to a method, for example. With dedicated classes this can't happen because the compiler prevents it.\r\n\r\nThe class then looks like this:\r\n\r\n    public abstract class Id<TThis> : IEquatable<Id<TThis>>\r\n        where TThis : Id<TThis>\r\n   \r\n\r\nAnd then operators are overloaded in the base class to make comparisons easier:\r\n\r\n    public static bool operator ==(Id<TThis>? left, Id<TThis>? right) => object.Equals(left, right);\r\n\r\n    public static bool operator !=(Id<TThis>? left, Id<TThis>? right) => !object.Equals(left, right);\r\n\r\nBut the best part is that the compiler prevents the comparison of two different id classes. So it can't accidentally happen that you compare `XId` with `YId`.","date":"2022-10-21T05:52:30.759Z"}