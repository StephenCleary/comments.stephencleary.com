{"_id":"605d28f0-3349-11ec-9c51-f1fa6761291d","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","postUri":"https://blog.stephencleary.com/2012/07/dont-block-on-async-code.html","replyTo":"0d8ae060-32d9-11ec-b706-b99e246a21e5","authorEmailEncrypted":"H0snK+Z9qS9MPtaN1b4IGr/p9kJIoNyeRsnWZq7akTG9FVE6PL5M6WiLI9WblyXwDWV3R2fRoyWpej6Y39AlniCaTJWQ35N7icCKMpZ71BAm/QnTRqMRMwbD4Phuv2COP3Nbqev9CCO4C8zhNFIyxJHiluh8xC+TuB1GWs4J/cCTOFJUbtnowy5g3LO9NlzgruGuf4NU8T1IP6MAX47Y1I3MPPse8RUH1+EWViu2tQvL6KVYwqFLNlaROLgi6FnmBO8Va1xEgQdhkRiuDayOplrU02ofOYYmUx+oKLEO0ZaRxsegvaSTHqgv0sfDK3R2Ym9StUO56GEMwJsR+pmm5MEITiHkxUIJJQled7SVX2K5CHF9FA0/0rXPQw/nTrZAwBkmG8/685Bm+TRsdok1iWA6zdxrffziB2cIFUkLD38GLVlgRETh3tDJb20PsAdC6avPITLZ2EtVrvGeH065hcTj8ghCwL2POo6rV/+wzs9Ia167y24bLS5Try/OeEUqJG6UJ/9LNd2RmPaG95pD+UG/gQflRsVFvkc6mCS5FwW66HHOYJ3UhB9nleCCuS6RPNYG6mSkET2iocZiqUOv+WVmqNoPKRV2Y3SSjvTIUf1zPdCck2Q2//NHZvTsPmJI6jdS71bQuNEYenPNcFDTJiF6dlVONv414AbZAbGcOck=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Sure; `Result` doesn't *always* result in a deadlock. Here's some cases where `Result` will not deadlock:\r\n1. If there's no context. E.g., ASP.NET Core, or the code is inside a `Task.Run` or something else that runs code outside of a request context.\r\n1. If the asynchronous work is already complete by the time `.Result` is called on the task. E.g., if it's cached, or just really fast.\r\n\r\nBut even in these cases, you don't want to use `.Result`, because that ties up a thread just waiting for that task to complete, and using `await` instead of `Result` will allow that thread to handle other requests instead of just waiting.","date":"2021-10-22T15:04:38.622Z"}