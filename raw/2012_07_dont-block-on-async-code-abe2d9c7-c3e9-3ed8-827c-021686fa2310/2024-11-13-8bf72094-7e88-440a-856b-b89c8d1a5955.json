{"_id":"8bf72094-7e88-440a-856b-b89c8d1a5955","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","postUri":"https://blog.stephencleary.com/2012/07/dont-block-on-async-code.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"woo","authorUri":"","message":"But there is another less hacky way -- much better to invoke the awaitable method in a synchronous way which does not block the UI thread.\n\nCompare this to your original situation:\n\n\u0060\u0060\u0060\n// My \u0022library\u0022 method.\npublic static async Task\u003CJObject\u003E GetJsonAsync(Uri uri)\n{\n  // (real-world code shouldn\u0027t use HttpClient in a using block; this is just example code)\n  using (var client = new HttpClient())\n  {\n    var jsonString = await client.GetStringAsync(uri);\n    return JObject.Parse(jsonString);\n  }\n}\n\n// My \u0022top-level\u0022 method.\npublic void Button1_Click(...)\n{\n  // CHANGE IS HERE  var json = Task.Run(async () =\u003E await GetJsonAsync(...)).GetAwaiter().GetResult();\n  textBox1.Text = json;\n}\n\u0060\u0060\u0060","date":"2024-11-13T18:39:20.7023603Z"}