{"_id":"34a692c7-5c46-306e-9d73-5df819c8dd86","authorName":"Stephen Cleary","authorEmailEncrypted":"hoZ5y/Vcr3dSJ3VAHYf4+CkqZRzfqsuAoKxLgmmrWEAww34jTwUXtsi/X33l7RGk5917+hmjLLdwsymaO/DXVy/VHLp4sGIwYGA4fXHh93Q2NDsKjdm5aiF/b/CZ/e7o6d40mQG0gevyVvin14ZNQji0GCxrKPdlEADQ5Oh/HtiPaqUo744C6urRRSjTqZxYMpyOVDMq0LC8WF4KkhicMeK14DVLu8rc3xcSaq/5w0n6EO+zmwpmUb42SVDXIXr7HNr/C7IqQmYcmlcL3BisAn43LgWjlfIpoleXV+HB9J6B+YXKOF/tBr6S4R/B+MgzkmtPv0VkfcBsyCA95knxfKOYre9BlMAvqjLMQdHT+uMHIAqZmFp0D+Dc13wWZWK0JFp8WmColPCLCEXr/XFrtqSrvoV4iZCpldhWsm5ZjXI1ajp9wSbLYiOD/j0Jp7rN2YcOl/svoq8o35xlkT4YdPDXdRWTqNz7YXUbd7vuM2zqLIy2mH9MDrKW4Zo0U5AL2q/6Fdt87pUmimik8UT0gzmDjAFekT0t7mQRl7yecAeP3izkLgUHAseRUJpVilOY7tp6nNHUtwH6YVPSnGEvtHZwpYzGaXhnCEGG+dYbfzTJWjZqkXbq+j7fIUTlw6PQnt9UavI5vgpPJHdnPra/HAaAmmAujvk81Iqn8is7G5Q=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Actually, the problem isn't the SyncCtx. Each request gets its own SyncCtx, which is independent from all the other ones.\r\n\r\nAlso, the problem (and solution) doesn't have to do with async vs sync. Async on ASP.NET only returns the thread to the thread pool; it does not return a response to the client.\r\n\r\nWhat you're most likely seeing is the ASP.NET session state behavior. A \"session\" is shared between the requests, and (by default) each request will want read/write access to the session state. This is what causes all the requests to wait for each other - because they each want that write lock. To work around this, disable session state whenever possible; i.e., apply [SessionState(SessionStateBehavior.Disabled)] or [SessionState(SessionStateBehavior.ReadOnly)] to your controllers.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"afcdbab2-aeaa-3ce6-b8df-bc9876183b86","date":"2015-01-22T18:07:20Z","timestamp":1421950040,"authorUserId":"disqus:stephen_cleary"}