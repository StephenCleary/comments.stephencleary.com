{"_id":"2264f711-4d92-31f7-8d59-9134bd4e9e43","authorName":"Stephen Cleary","authorEmailEncrypted":"iyr3HGnotU+BOt8htKj2on3T9Ojz0Iukz/ETlL8xy3MLgBmBQBqWjzrI2b7DMn6U9v0BHRoC7sevVL5x9s3DEWxiAbif6/L9XDziHf2i4xFKsf/Ajj+mei82ib8Sf+Z3N3dU9jXCnxg5GLUbewSUaSYRQ0FfeMoQE7Y4aVOq96fOjZ8fKciHWTSCGwl436Sz3WJ4PRxZO2rqhjqqI6rnh7mZh1QZ34AikSCC+4RqbDT1nI9jR6iDRTNihACHL0E5JUNIUWjr/YnjFTD8iLVwluivPzOneaoSAKPRvsxZDQ2EuQ9qkrziFuSYtYBA43fyPru+lZ1SUG+bEZrs+DsNOiiPPtbQA0LNdSEif8aro0HTAphpu/N7b5uTJTycI0FIgnfB69jY+Dsc0z4r3pHYcOqnJj18Hd6GO8rfil2v3Oai3hDslzXIrufVUWFIq1p4KDQvbIvOey8Xz2XRGI1/sGQJm9XIc1gjGTXuqkk43cxS08X9VnkunLNmOt7yIC5WXV2vyp6lxMvt1lIqbwMDc9Ft4KPlF2+TZlBmiYQFK6wJ9XYINDGQ6hd0mLyMh1LoSBuOrxXfffB5WcV/dntYOOOBZ2tC7MrcaN5UTrJsWythT+cu8o22utgiWdKKvDHvLsy1yCY+rnjG1jJ6JVroC02H9WIdMajO0tfqMhLeV/w=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"The deadlock you're seeing is precisely because it is in a *single*-threaded context.\r\n\r\nThe thread is blocked on the Task, waiting for it to complete. Meanwhile, the async method is ready to continue, but it's blocked waiting for the thread/context to be free so it can finish executing.\r\n\r\nAsync code enables single-threaded concurrency, and so permits single-threaded deadlocks.\r\n\r\nWhile I agree that it would be nice to avoid the \"async all the way\" rule, there is simply no way to do that. No language is going to avoid this. In functional language terms, async is a \"future monad\". And in functional languages, all monads spread through your code \"all the way\" just like async does in C#.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"313ed9bf-9461-3363-9941-37c40e29a3e6","date":"2015-10-29T18:29:35Z","timestamp":1446143375,"authorUserId":"disqus:stephen_cleary"}