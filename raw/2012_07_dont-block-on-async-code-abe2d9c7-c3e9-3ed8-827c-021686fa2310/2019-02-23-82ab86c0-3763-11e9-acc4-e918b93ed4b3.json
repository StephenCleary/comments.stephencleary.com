{"_id":"82ab86c0-3763-11e9-acc4-e918b93ed4b3","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","postUri":"https://blog.stephencleary.com/2012/07/dont-block-on-async-code.html","replyTo":"67837f90-3760-11e9-acc4-e918b93ed4b3","authorEmailEncrypted":"jDDEEctFYaVCcW0oHURnxL9DTR2wCyuIAAqiPU8XbKVhjkRjYd6z7LJP4slIeiqerjeqB1zTin3IbxQyEhoUwqkKG8lk1BRR+ZxgKH/Ghu5yVbctmdTtz8GUt0ok8BfwvPcB+mHoDQ7MviM3O+VKK/XhbDppkz2i6IjMVGF04uamQSby5hhdJrZBIHIpxO7ocnS9WTfQ3UL9US3AieQ4bwVhOdyXX5zkvESKQUcaE+FXATYVPsajXW/EHQBWHo7TTQz7dudXZoYKV3n1Rnd+LpNWezn0EtwcfSh6PRZJsMhdbqsVxy6Li+FbPwNYIQTdmzqIy2yaLizTpHOqoUrMwLJ+Mu8ujsmUYBUcdsWQOO0TshQwTVsCc4QgWrOG4QR/DgEkGfKd2wTVp4Wu0dbvBKSmu+LSsFqAkVflMU3YE2eR4WeMg8GaX+8EsjHiT05GGGeKuIoZigITkONgZyI2dyd4NNtclA55tAnJVwKOIm4CNXOdnn/sGnyDT5ZjCt4DRxHyVU1Qx9Kuwn6UCiTOVgXJ8tUzfXZg74ZJmB3kCUuSpVE/9lScimv6TeApEnsha1fAj8GVkwEuGxBpEAb7K2rwf85bol9CKlhnk0h4WgDVEnjPx4C7OA7dUcBgL+ofXDkbLWvoe7cBMjs0szT7lL24a0aHHhArkQ4BkrCRVco=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"[I confirm this behavior](https://blog.stephencleary.com/2012/12/dont-block-in-asynchronous-code.html); the cause is an optimization in `await` where it schedules its continuations with the `ExecuteSynchronously` flag.\r\n\r\nThere isn't a great way around this; there's no way to tell `await` to not use that flag. The only real options are to not block in asynchronous code (which I do recommend!), and passing the `TaskCreationOptions.RunContinuationsAsynchronously` flag to the `TaskCompletionSource<T>`, which overrides the `ExecuteSynchronously` flag by forcing the continuation onto a new thread pool thread.","date":"2019-02-23T12:06:55.121Z"}