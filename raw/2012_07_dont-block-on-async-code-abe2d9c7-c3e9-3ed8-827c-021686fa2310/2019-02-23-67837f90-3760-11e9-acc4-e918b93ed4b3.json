{"_id":"67837f90-3760-11e9-acc4-e918b93ed4b3","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","postUri":"https://blog.stephencleary.com/2012/07/dont-block-on-async-code.html","replyTo":"","authorEmailEncrypted":"KSghkq7qtjBiTtuZGZuPCiSCX3sQDVh7yhfAGHyFfjb9ejC7ia7Jclv/KYDdRdknFzL/7fBSIWb0trYpS28oX0tforFKmxzRK5jroxFZd/EJy5iPhAxU3XRyMGByRnCqWA80tU9VWFZfTlY/gxBXNp6HdSSg5BEaFCHqtGJsjRj/nnEt7KrBo0Tz+RafszQTcWUXNGQlf5dkFlfuWYNeDVDQ4R7xQL31wrvs9+G3yf7HfhePin6yGZP3h6Vk8sg9XVQJFNidIS8NhVpRCoArRGqeRMHOd8ZwxKWQd2Ly81p6ZAw6gEL4m+lXrE3M0Slbzpgoo/DVMTxDeUTIKWx/ZX4/y+LQDWA4vo10kC6K+EauhqpkFuBDaR5tiC2hrpfSGzqAOkOIOO7tkDcnXw6PKiERU6HWKzMcvw6c1aloqZOvF7ETef+XsAxZWeqplkT2u2P0QfN1CJTt82jn9ZYY1Vkasv+du4cjBtsGqE0DK8e5ODsjSQn2QRv4Q9OxLzmis0ogKaGUSrbtWOWrdroXVk2c1JgfgqzKfSxwxeuv1+mKLxk/ifbKtqJMSNeIONBNAPq/E4DjOAvwgUQ4Gmve6SDHQ9aczWKcFmR0eCqdRbUCxHhRN086B3V1AN899EPowf6pUB7iMwq1I0atiVPpmodXDralOceyyW55WG29H8U=","authorEmailMD5":"e644d63e03f0404046566f9771691e6b","authorName":"Andreas Tr√ºtschel","authorUri":"","message":"I found another source of locking up the program that is actually not a deadlock but is even harder to find. This occurs if a task is awaited in more than one place and the continuation that is wired up first blocks. In this case the other continuations are not invoked. This seems to be true even if there is no synchronization context present.\r\n\r\nFor example (\"X2 end\" is never printed to the console):\r\n\r\n        private static void Main(string[] args)\r\n        {\r\n            var tcs = new TaskCompletionSource<object>();\r\n            var task = tcs.Task;\r\n\r\n            X1(task);\r\n            X2(task);\r\n\r\n            tcs.SetResult(null);\r\n\r\n            Console.ReadLine();\r\n        }\r\n\r\n        private static async void X1(Task task)\r\n        {\r\n            Console.WriteLine(\"X1 start\");\r\n            await task;\r\n            while (true)\r\n            {\r\n                Thread.Sleep(10000);\r\n            }\r\n        }\r\n\r\n        private static async void X2(Task task)\r\n        {\r\n            Console.WriteLine(\"X2 start\");\r\n            await task;\r\n            Console.WriteLine(\"X2 end\");\r\n        }\r\n\r\nStephen, can you confirm this is true and if you do have a solution other than \r\n- not blocking in a continuation \r\n- Spinning up a separate task for each continuation?","date":"2019-02-23T11:44:41.054Z"}