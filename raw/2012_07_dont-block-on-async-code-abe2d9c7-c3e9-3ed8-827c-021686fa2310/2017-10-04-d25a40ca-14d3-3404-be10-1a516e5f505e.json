{"_id":"d25a40ca-14d3-3404-be10-1a516e5f505e","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":"Hi Doron,\r\n\r\nWe're saying the same thing. Take a look through this article again as well as the linked intro article: [http://blog.stephencleary.com/2012/02/async-and-await.html](http://blog.stephencleary.com/2012/02/async-and-await.html)\r\n\r\nawait by default captures a context (which is the current SynchronizationContext *or* the current TaskScheduler). In the UI situation, it's a UI SyncCtx, which is tied to the UI thread. In the ASP.NET Classic situation, it's a request SyncCtx, which is not tied to a particular thread but only allows in one thread at a time.\r\n\r\nConfigureAwait(false) tells await not to capture the context (which means it will resume on a thread pool thread).\r\n\r\n(Sorry about the delayed reply; Disqus has been marking lots of comments as spam and I just noticed today)","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"9ff182c0-f911-3913-a685-ec07600bd5fb","date":"2017-10-04T16:29:03Z","timestamp":1507134543}