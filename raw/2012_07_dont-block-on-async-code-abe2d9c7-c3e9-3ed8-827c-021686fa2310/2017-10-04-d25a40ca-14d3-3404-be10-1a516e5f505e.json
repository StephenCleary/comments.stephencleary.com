{"_id":"d25a40ca-14d3-3404-be10-1a516e5f505e","authorName":"Stephen Cleary","authorEmailEncrypted":"s1XADOLURIe5q2DpRaRVUvM0rm+e8FzX7x480X6RqjuqYiW9zZgErlUDPUyR06QxYbXMFtVXa8bbe7++3iEHDx7QOnOw2xEBuPWfRy6nlsvv6B79ZE/K2GUBdIJuBFv/pZL00CDheJz0jKflwDdrwTMd1HLMtx0vRKiqi4cjbQ91fxfA6SDJZO2f2/YYlO9T+vfptmHrmRSpEebwPT0lYdqu9+qz8vEQxjmh90aG0hps/nH68VhxlGZxVXDOPkNWfYC4pcH9koJtnbOzCDhiOyxI+7zvsf/cFrGBsh3G3B3dGBBCE2iJt5iDJK/1OPNYwKgYGf9+XnwdEGm201eg2bY3fXSlSPpv4UI+jDIZrkdOOnel9RF2bB2TfhGWHVThw/K/J5/oCdaXRSaVYMBJbid8WayJ745hFSXlAPwWHKrwKF4PceWBXhJDkrot7lLgzTYIxDrK9sTg6nH/zzWMrVECNCJgW+jQ+qX9q1xPJIQbHPyrylxuKgvCPdv9AY2R8ocp0DWhScIsS6ynXUsJBLFLgTTUnssjCUr0SaK6wlBHqH0jCtG2XblCjs4fnDxTqI3UBxhZ/qthhrR/D+vWuv7bU0kt7ssKYGNC33CFwHBPffjUspbI+6z1mWw9xwTrM0iFS6VunBdw1ty2mfA/FOAXbyyIuwvTOKkwSZVgxqY=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","authorUri":"","authorUserId":"disqus:stephen_cleary","message":"Hi Doron,\r\n\r\nWe're saying the same thing. Take a look through this article again as well as the linked intro article: [http://blog.stephencleary.com/2012/02/async-and-await.html](http://blog.stephencleary.com/2012/02/async-and-await.html)\r\n\r\nawait by default captures a context (which is the current SynchronizationContext *or* the current TaskScheduler). In the UI situation, it's a UI SyncCtx, which is tied to the UI thread. In the ASP.NET Classic situation, it's a request SyncCtx, which is not tied to a particular thread but only allows in one thread at a time.\r\n\r\nConfigureAwait(false) tells await not to capture the context (which means it will resume on a thread pool thread).\r\n\r\n(Sorry about the delayed reply; Disqus has been marking lots of comments as spam and I just noticed today)","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"9ff182c0-f911-3913-a685-ec07600bd5fb","date":"2017-10-04T16:29:03Z","timestamp":1507134543}