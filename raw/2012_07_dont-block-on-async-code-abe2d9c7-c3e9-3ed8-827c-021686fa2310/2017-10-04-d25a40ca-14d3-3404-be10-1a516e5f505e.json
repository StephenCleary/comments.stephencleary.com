{"_id":"d25a40ca-14d3-3404-be10-1a516e5f505e","authorName":"Stephen Cleary","authorEmailEncrypted":"pC2dpeKISW83BVnNn5YrnyC4Sqi/7yL0jDHDnllvv2VT8bkD7SfOKLTCgwB0R3fpfoA8gS6OQTpFmM6GuNX8zXpT+hfOqQYyZqWcLAE3VkXldEEAQ4SbOueeQSsU+XTIKYAPGmvorxU3iuNwk7VkCvhstSnGwf5QCNZUfyExeZFf0aQfZNRp7eqMK8OkkuTf94z+PWH8NqjV6umBo/5VZX+U24LUkJiZ+Te6kF8xcbqKe3Va8tX2GF8PByu8/Cen0SAVoM9TAa4/TBaS+mHUq2LLxXthhVNgeC4igAy2dakSF4L9zspl7uC5gGBtDl76LEAXeGlnbE1pczBc8TiNC0/Mc3ZloR2zCLm16ek2XmooUlkXlDewJKivw2dNkRrnxgnKnnY5/bRCDsRmKtstUTmEgd1tt0YHwrkOhaoPugoXECoxe5fvW7b4Azx6sAHuJyNpXfMTCu8PDiOwVuFob/pMlZEfoFpM1lYiU0vadTX8BfUi1Rg/H4DXTU1oeMQ9ubfQnNorMhy4rvzRgsMGoKNCR5QcNJAyUKpZ8Ane6S/BAz12xfeXSFVf7/nwfKJC5GJqdVLXAHp+01L2MIYz8ha/RUqL04Y0+7EWjXL/7SrbMy8jUancAL2eP3wMYoUibBI2c6B9kXPC1wGY+JK4v+bKEU7ER7Djc4tJg74RLvY=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"Hi Doron,\r\n\r\nWe're saying the same thing. Take a look through this article again as well as the linked intro article: [http://blog.stephencleary.c...](http://blog.stephencleary.com/2012/02/async-and-await.html \"http://blog.stephencleary.com/2012/02/async-and-await.html\")\r\n\r\nawait by default captures a context (which is the current SynchronizationContext *or* the current TaskScheduler). In the UI situation, it's a UI SyncCtx, which is tied to the UI thread. In the ASP.NET Classic situation, it's a request SyncCtx, which is not tied to a particular thread but only allows in one thread at a time.\r\n\r\nConfigureAwait(false) tells await not to capture the context (which means it will resume on a thread pool thread).\r\n\r\n(Sorry about the delayed reply; Disqus has been marking lots of comments as spam and I just noticed today)","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"9ff182c0-f911-3913-a685-ec07600bd5fb","date":"2017-10-04T16:29:03Z","timestamp":1507134543,"authorUserId":"disqus:stephen_cleary"}