{"_id":"d25a40ca-14d3-3404-be10-1a516e5f505e","authorName":"Stephen Cleary","authorEmailEncrypted":"IXtMi4HdOY5F8ujt2yGDWIUjrFGkEXPb6L5Y392Ej0HVZ4ZHV6xDbACiSQKq0aecQpE1qglQVgdmmFUr5f3HripuEiz17qrOt6uqR+E5oZQi51wcSSzFt+Xdtg0v1juqOazMHlR5XH1tQcYlUnG+AaO9myFnZfwSB0ea1XJQ0CgpAcDdHl0uopGHmB3wQBu/kKu8w1lMAzmHRyQZ0inLak1EkZgWmfOBONfzJnPslKDgm8IpGB/i0cbe0nnRJqa9KnOCS6rgNWGqOxVQCJQYASgLFzPoLCo2t7GHEqzJ9HVfifQbmAN0ExkhtZ0FtrjR1JAdDTE3kvbEqltvjz/I4SYzVXrXylewAyh72QDc5xb0HWpV2KnfPU5mcs9kg3fVCqm1CVD3VZ75wkeJlcuONa2V8bN3i7J4omXABcda9xBSp2Cn5lrQgb62pX64BBRtnDjzL0GxjwOOixW3kRvL4ZYTlqdA7b/horv/ejiTncjD9d2ScYBlQiQ2cGDbr1v7WVzPKa+OWZbouvf594DaA1PrmQVNNaNray1WYza720YVsHpjRw6w8dwwiBVKRiolSxyibQHIy5p1TDlHof+fAOlfsLS4j0k4HyMcuerpg9giAxle7iAg/JVNUyp4v/5CJKJk8InAIeyOIdSdTBBDljSA3UW5sU0BoJaqxGjRyrQ=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"Hi Doron,\r\n\r\nWe're saying the same thing. Take a look through this article again as well as the linked intro article: [http://blog.stephencleary.c...](http://blog.stephencleary.com/2012/02/async-and-await.html \"http://blog.stephencleary.com/2012/02/async-and-await.html\")\r\n\r\nawait by default captures a context (which is the current SynchronizationContext *or* the current TaskScheduler). In the UI situation, it's a UI SyncCtx, which is tied to the UI thread. In the ASP.NET Classic situation, it's a request SyncCtx, which is not tied to a particular thread but only allows in one thread at a time.\r\n\r\nConfigureAwait(false) tells await not to capture the context (which means it will resume on a thread pool thread).\r\n\r\n(Sorry about the delayed reply; Disqus has been marking lots of comments as spam and I just noticed today)","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"9ff182c0-f911-3913-a685-ec07600bd5fb","date":"2017-10-04T16:29:03Z","timestamp":1507134543,"authorUserId":"disqus:stephen_cleary"}