{"_id":"e681e320-b131-37d2-85a9-1950bed6308f","authorName":"Brondahl","authorEmailEncrypted":"gqeFXTs0eqr4svcYg4CI+s5lg7y1Vt3LiP9f+MRS9EDeEnBVKqDOAX/7wTBzgIw/U0P6Gy7D5DtY47SE/sn03R6cBXaXLi8W6B6ryPdsbu5RYp/V/V9xngosaQC8RCKtN/zCew53xQ5LCFu/X9nQej1OOhg96Ey8ClVvzxnAz8f89G0XBElCxV0zWHs0ayUrSScU1rMLgRX5iJnBcnyjvtYK8/B1u0U6W2Ej5cAPZS/nqxtUEf95HPu+tOCQR5bszgnqElI5VZdHrrkwzynsgA+jAKNFWStljz4GW+B/o4aG0H+HQA9PuqnE+deRyWNRCzRrNsiYlH8XM0kCJ7jn1r/X7ELq7jG9AxHYojVbg31eQS91WQUWOJtaBVlMdzCcgqRG8O3Dhj4mEz3u5VBQ73FRWSrNYdueg2RjAiiCk9smG82skutQJ6jjmSXWsU1T8n4xpxM72AI7S63B3517D8kA/YMZ8A8lhIb7Xu4CRmystMYxTjxp1tR7LzwcTFzJnS23RVr4Utk1Ehij55/8ec3rcvgFkK8ErGYx4tlvZPIwHgcbXfjHo9dUmybTR2dYBl0Osy7kCh1nj2dIyMpTDzIYkCcziYIXRc8+72Y2yhahuSskkB4XygIHWgtbH0UvZqKg6kYSVLh1fJ12WJHdfy90W00H7vSsOyhx9LZq770=","authorEmailMD5":"c807195c3caef0cc89ed8bbf9717a710","authorUri":"","authorUserId":"disqus:Brondahl","authorFallbackAvatar":"https://disqus.com/api/users/avatars/Brondahl.jpg","message":"Hi there,\r\n\r\nThanks for this great post.  \r\nHave I correctly understood, then, that if your current code has been triggered by Task.Run() (or even TP.QUWI, if your code is /very/ old school) then the Context is NOT one of these awkward blocking ones ... it's a ThreadPool context and thus it's fine to call await without .ConfigureAwait(false), and then to block on the result of that call.\r\n\r\nI've currently got some multi-threaded code that is Task.Running a bunch of threads, each of which currently calls WebRequest.GetResponse() and synchronously waits on the result, and the initiating thread is calling WaitAll on the collection of Tasks that it ran.\r\n\r\nI believe I can convert to await GetResponseAsync, bubbling async through the methods until it hits the initiating thread, at which point I leave the WaitAll untouched. And I can do all this without needing to use ConfigureAwait(false) and also without triggering a Deadlock.\r\n\r\nHave I got that right?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2016-05-14T09:42:01Z","timestamp":1463218921}