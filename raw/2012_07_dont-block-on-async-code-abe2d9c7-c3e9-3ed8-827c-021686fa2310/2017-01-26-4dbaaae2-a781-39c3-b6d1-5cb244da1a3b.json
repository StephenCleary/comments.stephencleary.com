{"_id":"4dbaaae2-a781-39c3-b6d1-5cb244da1a3b","authorName":"Tengiz Tutisani","authorEmailEncrypted":"Eo2Lp50a8L0xX5jjC9PFACNFLhewJVeFA/zrac9C2I8xRorV/m0IOGiez4M1RoDX+xC/CBk/GxX5IO2WMnyXR1UqyYQfunXI5QkduZvh0YKyKkIa/8dNQaCiXFbp0wUbcwbMTvjfNymcueYJqFDlCSn/9RvUPZzK9uAzLYD+ZIyqO24Gi8EVdTRcKg5k6R5wSEPBzXgSDm6wSRQJv6QEtQRAcHccXVR6Hew3R0XkcXm83OoGO5pO/NnMUKhXRXCxWUytSl4XnqLe5aY/sUUW8HSpP3sMmYbS3aVm0Ge/KkjBb1n5S3XDYxdViBx9JJaWNWgHcxWJR75XbYhguZE7HR8BEl/pDvxOI0+mDNtnmGyMC1X3LyKV/AM9IbICkvEBprjJzivW0iyGX9083Y4VhAo4LtW3wy8ZUrBfbKsIGcN1NstkOdKn0uOGevdUzNe3MJJ4z6vMbAIuVn29ZYoTs7Cs9dT6zYdGlWHF5XkJlzAJL2DW67atUOO5eOGWkQiNGoJ+dCHeMLu/Ii9wljw5AfPszjiLaazuMbMwi9Kg078zvBmh99mU5MjiuyBnUkhGAjtXq+IBQCkv8YSKQUZNPfkkXQuwt729sHITb9zj2sqTmHJ8HcHTIkptWCHtvlELfBTGdjVZIPqgfcq7+Ae8gWG6TR6AxoNaMhHlMTnxpWw=","authorEmailMD5":"0c38a91503d5685bbee3b370fbe8827a","message":"\"If you're going to use ConfigureAwait(false), then every method you call should also use ConfigureAwait(false).\" - you lost me there.  \r\nI'm not quite following, why would you want every called method to do what you (as a caller) do? every method decides what it wants to have when await resumes, that's the exact purpose of ConfigureAwait() method.  \r\ne.g. if we have chain of all async methods calling each other: controller action A calling method B calling method C calling some operation D (A -> B -> C -> D), then A can decide that it does not need context after resuming, so it will say ConfigureAwait(false); then B can decide that it needs context so it will say ConfigureAwait(true); then C can decide it does not need so it will say ConfigureAwait(false). As a result, only B will resume on the very original context, while both A and C will not.   \r\nWhat exact problem do you see in this scenario? is it not how you would expect it to work? it completely meets my intuitive expectations. Every method makes its own decision whether it needs a context or not.  \r\nYes, by default you will get the same context, but who cares? defaults are just a question of taste. Every method in the call stack still has its own right to choose, regardless of all the other methods before or after on the same call stack.  \r\nI hope you see my point.\r\n\r\nHowever, I must say that if default was false, that would make things simpler, only when combining it with Task. Everything else about ConfigureAwait works just fine. It's just annoying that the default behavior creates the deadlock, so you'd need to explicitly opt out in the library code. That part I agree. I guess Microsoft didn't consider this combination scenario very well.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"ff5f686b-c6cf-3c0a-af10-197889527b8a","date":"2017-01-26T02:46:18Z","timestamp":1485398778,"authorUserId":"disqus:tengiztutisani"}