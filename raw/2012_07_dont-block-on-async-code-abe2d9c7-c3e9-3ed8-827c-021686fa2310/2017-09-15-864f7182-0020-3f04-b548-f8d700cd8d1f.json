{"_id":"864f7182-0020-3f04-b548-f8d700cd8d1f","authorName":"greggwon","authorEmailEncrypted":"IBy1KogeKo/SKsL9KJg9ykcOf++N001kydK4C8AC7BhE2791bdqtNw5e5fm8vGpaCORwf433WtL6onps6FDlDfZzOuKC7V/xPs5/aDBCq8jk22ES6uzeJEB5dCKcwndZkNuoRavas7Loh3x6Ks3cSut5dbGP63piQLYVB/QeaoOyQyIBudo2gFhg4kJRN2lxP8kXTHwepJxYU4dj69iSojUrFTE3fFhWWvUeDgPywX8e1gLzMZe1O7k7BJo4o1QWmywdGK0l8wD4s9Lg72483pf+U/HqA0ej/vxAuHrG+x6O+M9N0xT+KlLnmlNhXeCtoieLUow/AJaOiZjSC2djO99bn+XnAmYC8GlRFJEttnBGu0KmiOnxK1rKr+whFKmUm3dRr6cZwSAkL5Z2ReB2aG48SzezqiSG8ptbV0K4eYGY5NKGZqOjmpfB+OtDdv2s9qEXu7qL1WCye4bWKezoSC7BnlMjCanOC/uzHw3CjtsbxBTpmLcbVvnznVK0Z+JZfnTfN4caFIEk20s8jcsp0oDKbzKtMVY9r/i07p+H/0gJVfAGK3XAcchzNdBPe83vjFDWoOojUxHBCE7ACkCIex28dVbgDrKK+ODjKlgCAR+OdUnxE67KGflAyyqmN1i3p2mHqdLpa+II9uXVy/Ylrq7C/mTh84A/xos9/5pBdD8=","authorEmailMD5":"142c71b27a71ba2448701da921b0d14e","message":"The problem is that getting the result and using the result are mixed in together. The better design is to clearly manage the three phases of async data gathering and use, into an API which includes managing state so that \"dispatching\" windows actions happens in the right context.\r\n\r\npublic interface DispatchManagement<t> {  \r\n void SetupUI();  \r\n T PerformAsync();  \r\n HandleResult( T value );  \r\n HandleError( Exception ex );  \r\n}\r\n\r\nNow, implement some classes around this interface, and have the base class use the correct Dispatcher, for your context, in SetupUI() and the Handle* methods and dispatch PerformAsync with a Task/Thread that comes from a pool.\r\n\r\nNow, you have something that will actually work. You could use delegates for these methods instead, so that lambdas could be used instead of whole classes. However you package it, then, there is no \"context\" different from the code, and there is no thread lock nonsense involved in creating linear code flow between two threads.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-09-15T19:13:52Z","timestamp":1505502832,"authorUserId":"disqus:greggwon"}