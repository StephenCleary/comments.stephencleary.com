{"_id":"acde32c3-9dd5-38dd-8695-36c7f60cc8c1","authorName":"Anthony Plant","authorEmailEncrypted":"sMZrciANI9pjy4WW/AOdN8Gg9SIQBCfkEOLJ71CnItshxRxeZU4pS6MGlveQz5PDIvuigb0oD0JXcrisnuZNYSxMkVPgFWFpDknt+X3kH7T8jdQhU297YG4WE0dXASTdSmAVqNWzIhcrBd/m4fxoYFj5x9UYUJDRJE5vJfKUouefQ4qwUEHuKDbDy4UZ9DAE5qYJCxPiXd3FQivkR909qzOPCTzgOAaeWPsF06oHPsPhbxBBW5zzHkRZCBPeVmKMeuhEaId8g69NPaUkElnth9aZ3FqSvNqGW1Cw/uFCjBn5UD4/zoNyDvLNhrSexQL+SfYTZzxJ6IWGuLgrZktgDrXzQYQ/d+Rt69KAs0ceNeoG9vlKPy5iRhWBOhRnDIRVlbYFeXA5AEh0mHBjVnsZJQD9G60YcuwEXIUInB7VF1VLBtgkb6YwhUC8GB6KEDpXWGEAklcGfgXhYKyUpg/Y0Hb/hdnJJ9j8d3MfIrVSKkSfU2HMafwNdygXQbLbilB0G6GjPhFYGcRu8uioffwply8eLMLcIzHcsXq4FeHSPtE3DL95ZRb3R1y3Qe9RGPVQwezBXRw8qzj7of1OmNf6sJFRNLqBmEafhBEqC4Ej4nEchh7UHg/Me2nk1a8a6y6pVot+xIStaHXFBTyQU3ej4aBIw/H+hKoui+S1uXbdhZg=","authorEmailMD5":"bbc5ecbb4bdcaad916239ffd687d028b","message":"This is a great post and a really useful follow-up to your equally great introduction to async/await. This is a real bugbear of mine, though. I can happily block on a Task unless that Task happens to come from an async method, in which case I get deadlocks.\r\n\r\nFrom an interface/implementation point of view, it *should* be the case that - as far as the consumer is concerned (and given that it's all that's specified by the contract) - a Task is a Task is a Task.\r\n\r\nNot that I would encourage blocking on async code in *principle* either; however, it seems to me that something's not quite right (from an encapsulation perspective) when the caller needs to be aware of implementation details of the interface method it's calling in order to know what is/isn't a valid invocation pattern.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2015-07-29T15:22:19Z","timestamp":1438183339,"authorUserId":"disqus:anthony_plant"}