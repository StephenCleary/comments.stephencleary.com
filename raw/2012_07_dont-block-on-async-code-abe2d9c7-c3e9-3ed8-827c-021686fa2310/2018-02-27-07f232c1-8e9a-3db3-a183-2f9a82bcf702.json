{"_id":"07f232c1-8e9a-3db3-a183-2f9a82bcf702","authorName":"Varun Bhargava","authorEmailEncrypted":"sWRy90k6yY9LqD3OktR0HNOyYD1F4PKbdWs9e6ONlu5A/eFxw5bCPi51ovLlMfnTmwiyVb/2T7VpZPhvECuNWYW0i1bTcWviWqUf+wDLIccLXt8t9xdkBHQNei8Z4pRFz15ujwMOT+4WAlU5FQuqT/6A+LP8KQ2dl+ora89fxEPYHnpzTprXeZ7x9X/L8ssPTQy7cQvecoKjBpATajCV+AOfkZr2FivMSppiP45Cr+lbhrz3Yf29IzbDAdHgiu3Hn5zUbe2dAbI8bB79Bsu7vlYeRnazFymI9jZs3R65Hui4BCrYOACXdbb++/5MESdxh/XHFaM3/HRV5bxuyip3Z5ech4oDwGbgsJLqteckaJijwk4DaGAqwum9V0WQdth7Op0b0rqanQMmP9N7clRJClbCUXcoRZX43gZCA/WlxqsY71pr6RSkc8XTeNHXHiDvjzFbXMW3FYMf091mMeD8MWIaZSfjRHhMaH9WgCPCUwGxkUOAleT32aPZab4xJq0h7acJnE4rSRDkTONKgxaDOci5AdQP7pcs2G1JBJx7PAKwVLvYohdQT+Z9WegbXOT4PhG+64MRLXjN0gjL0Axht35nGIOnERviEaah0ZCxMEzeHfklqsSx904Tnh6eahQnplcrt+kBZlBv/n+1euGyoIGOTUk7c3TGexhXC5mWJP0=","authorEmailMD5":"4126b5c5e664cb207ef3cdb64858fda8","message":"Thanks Stephen. This is what we're trying to do\r\n\r\npublic string MethodSyncVersion(string secretName)  \r\n{  \r\n return this.MethodAsync(secretName).GetAwaiter().GetResult();  \r\n}  \r\npublic async Task<string> MethodAsync(string key)  \r\n{  \r\n return (await ANetworkCall.GetSomething(key).ConfigureAwait(false)).Value;  \r\n}\r\n\r\nDue to some reason we have to have an synchronous version of our method which under the covers is just calling the async method and blocking on it.\r\n\r\nThe consuming code calls  \r\nvar result = MethodSyncVersion(key);\r\n\r\nThis is the line that intermittently gets deadlocks. Another thing worth mentioning is that these calls happen inside an IOC container during instantiation of an object bound in singleton scope (which will have locks of its own).\r\n\r\nJust so I can understand better, what could be the exact reason that this sometimes works and sometimes doesn't?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"febe2270-e37c-3014-aa10-9c4b959cb219","date":"2018-02-27T22:54:25Z","timestamp":1519772065,"authorUserId":"disqus:disqus_ZZpGv0gXZl"}