{"_id":"fb685f31-1d3c-3ac8-9936-c4301457db0f","authorName":"Bowen Zhu","authorEmailEncrypted":"NsFkrYQ1nmu79QfUFnQeVDXYBstgdMOup7pdY5+q5RGx91XXF3K7KY7xy5Yui+7gUyVsJ23K9XeWVoafNsPDkgKJViUPODcEPO4l3znVB3MLdvJ97Glrju8IhBXW/B8kw09gesaXOrnCUHnlKhFBLaCjtIVu8O0WFGM0hGwWrJi7dh0Tzg/9Gw2OaVZtdqqMTdZI+vwcr/i3FOwoDkQ7ioLdDn+eKzUK+YZCMtukj9tm+Garldie9OdXwnO3FbibHQLESwFW8MCWgjWUQGrVfVHxs2PV+Py5tvVTStNmewm3xmtFHg8p2il4lOV4WwpsmtOtdGzexa9sJurt/UPqS/vM+LGeh6gZlNppPd8eT06X7xDTq2VIOmaZuvKsfP9jUzRD7btz82ZFFtAHCZCZxHAI3ydwaRjU/JUpG+NtLfA1DdJ1+yI2r5jWmqk8/h9FapvMpI18acyLz6QewrtTsxJXxU/1ewYXmGmtMX0A/VRZuvd68I6p5rKDGH4QU5KoLTGrmNRy7+f9vUCxH3i+3B34XGdca8mDqAPCu7zFJeyS9q+aDAvhO5UgziOpQ8v/Ob5jUyhi5saPnQU3HljUp0N6O1oGuJ0Xhsk2jmH42nzy1GCVfLweB4ux3eXdv+HritP74DEelGYdJLODTlvzVfT/lr7THg32ompUiWuG32c=","authorEmailMD5":"b6420a5dd5fb035ae3c24e4081b3604d","message":"Thanks for your insight. I have been trying to figure out one thing all day, but still not very sure of my finding. Could you help take a look at it?  \r\nIn an Asp.Net async api controller, I want to pass an singleton(context) down to another http message handler which would execute later. The only correct way is to use HttpContext.Current, and any code before it in the function should use await without ConfigureAwait(false), if any, which means to use back the SynchronizationContext.   \r\nCallContext.LogicalData is not reliable, neither does thread local storage and thread static data. It's possible that CallContext.LogicalData will be lost under heavy load, together with async programming.  \r\nAre above statements all true?  \r\nAnd I remember you mentioned somewhere, we should create a context boundary in the codebase, for context-dependent/without ConfigureAwait(false), context-free/with ConfigureAwait(false), respectively, correct ?\r\n\r\nAnd another question, so in a WinForm UI program, consider below code  \r\npublic async void button1_eventhandler()  \r\n{  \r\n await InvokeFuncAsync().ConfigureAwait(false);  \r\n this.EditControl1.Disabled = false;  \r\n}\r\n\r\nthis.EditControl1.Disabled = false; should fail in some way, correct? because the resumed thread didn't load back the SynchronizationContext, but in my test, it actually works, any part I missed?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"aaad59d2-a97a-3e69-a557-5dd693d32ad5","date":"2018-01-20T02:17:17Z","timestamp":1516414637,"authorUserId":"disqus:bowen_zhu"}