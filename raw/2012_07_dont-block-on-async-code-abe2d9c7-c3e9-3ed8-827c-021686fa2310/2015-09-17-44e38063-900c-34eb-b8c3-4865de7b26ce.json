{"_id":"44e38063-900c-34eb-b8c3-4865de7b26ce","authorName":"Stephen Cleary","authorEmailEncrypted":"rySvWpD8A8iskCp0YdXEM5ahVry6HWQ6rZL4dFgw6rn3Ad7orXwetLqu+1Uwu7C1w3d/O9SKTiYhrXaFDiQEFJUCI//WATHVq98l56AhUO+GpP09QkBZOdlRWtMyxpytVMEYdmJZDq432dAFMIQD6v3/MSt+5jyJwxuegOPqYZWIUsQ815m/RGJM3lZ3q9x7bmktQdfdprypYvQ+nkpyu7seLWju0fxDfVaOg4iMg7UA/AwXGIuYdPzZmUMk4tqSWGBQLZNsPQF9MS62XwyT6YTUm0IipC8ySnCDtmPbsQUYJwKdCViLZ4IQPHcsbeRUEwR4ajo/gFoDr2oDEfC7M1OYLL4yVV/0K6O4fdBy1b3OfHdBQPf9NV+k/hpSP2Oea8Lr75QB3q4aDka3xlqR8n30sCwZ5UyUm19cGTqgsN5Lg9GPyL/30eLVwWlkMkr8ov4Am01wAyFBrjbFyfn60n0lLcfitr2l1HY2PAML0VW7ivptzI8e20d9XQGQmc5VC2DrWXYFobQlfujAbG4NYug6zeYStCoOabHhxyBiMhww+uhE3/H22htA/OmDs0niMqN6UoCleh0+78KqGFqPYv0Yp24SH5tVS8s/RY+wVUAHCY2o5CKjEsMc16RAfu7jN7YoADZ9ZjNYZWQ3O3KCaLiRLW0HDIvSjbugrCBydoo=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I would say that deadlocks are more caused by sync-over-async behavior. That pattern is unnatural and should be avoided whenever possible. If your code isn't blocking to begin with, then ConfigureAwait just becomes an optimization hint, as it should be.\r\n\r\nIf you think about it from a higher-level (architectural) perspective, blocking on async code just doesn't make any sense - the blocking is actually preventing the async code from being asynchronous.\r\n\r\nThere is almost always a way to avoid sync-over-async - the only non-preventable scenarios AFAIK are ASP.NET MVC filters and ASP.NET MVC child actions, both of which have already been addressed in ASP.NET vNext.\r\n\r\nThat said, I do agree that I wish the default was ConfigureAwiat(false).","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"e59b81ae-8886-31d0-941d-c85c6f819a4a","date":"2015-09-17T12:17:30Z","timestamp":1442492250,"authorUserId":"disqus:stephen_cleary"}