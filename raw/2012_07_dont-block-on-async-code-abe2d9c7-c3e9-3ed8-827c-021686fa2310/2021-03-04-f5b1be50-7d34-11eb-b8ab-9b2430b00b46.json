{"_id":"f5b1be50-7d34-11eb-b8ab-9b2430b00b46","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","postUri":"https://blog.stephencleary.com/2012/07/dont-block-on-async-code.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Levi","authorUri":"","message":"Hello Stephen, great article explaining essential stuff. \r\n\r\nI have a question that might not be directly related to this article, however \r\nthe underlying problem may have its root there. If not, it would be great if \r\nyou could point me to article/example addressing this kind of issue, since I haven't \r\nfound explicit one so far. \r\n\r\nI created two tasks that run the same method, Get() (method in two different objects of the same class). \r\nThat method consists of creating and running a list of tasks all of which run the same method, GetJsonAsync().\r\nThe goal is to measure not only time performance for each \"inner\" task, i.e. how  long it takes for each GetJsonAsync to complete, but also the overall performance of the \"outer\" task.\r\n\r\nThe problem is that, each of the two tasks takes about 4s to complete. When only one task is ran instead of two, it takes below 2s. \r\nNow, it might not be a big difference at first glance, but this way of running tasks is pulled out of a project of mine\r\nwhich deals with ~200 \"inner\" tasks and gives even bigger difference in the similar situation, almost double the time needed for one.\r\nAnother issue is that sometimes there's a significant difference between time performance\r\nof those two tasks, like there is some kind of blocking.\r\n\r\nHere is a link to the github repo I created with this example, using your code from this article: \r\nhttps://github.com/levi177/TaskPerformance\r\n\r\nDid I miss some point here? I put await everywhere it should be put, but still it looks like there is some sort of blocking or waiting. I'm aware that time performance depends on multiple factors, but I would like to realize the software-side impact with this tasks approach. \r\nIt might be something with ThreadPool or TaskScheduler, but all I have are loose assumptions. Is it reasonable to expect two essentially same tasks to execute with similar time performance?","date":"2021-03-04T21:59:58.204Z"}