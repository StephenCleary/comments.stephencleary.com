{"_id":"fa0441c3-b394-3e08-bc51-97ef74c485d4","authorName":"Christopher Carrer","authorEmailEncrypted":"vACm/jOmzc4w2ywnRagfxPLarVEQA2hAwy0VOsys0gvQ4J1m3L7zBwozVgCVg+ntwFD0tsDrHF8I9qC7VTNhyN46ZJM//fVgcDaqHb6Zd2sXPjpXqpFoDUr8rlSBkz0P4OzcR2HBjHFh4MnVSXbgOSlhPAkEOPYaB8n99l0wJLeo/4f58xsh14oUI1RaIds1yOPofgwRk0LKR9cKpG4v5pgLLFkjN90v5+TtkL4YdzwBiAyac+SI3rzzs+LwKUINVIn9Km6Sy44EjYEzDVfK9nFflJOKHyvOUejCQvF8teWMoh6BctkzWRa1sooD6XQf81NIyM9U3MAn9TpzPKLHaBiDeDJMAnLoG3qfx2GPjAiHISlrsYi0aqzc5FiFxln92MNL40wA6mCHKsOHz5u2/D1cDGg1RrlFwiFnwGWJw6zAZ+C90LbmidtAYNJEL9u1tlmzpprqj5sKU4l1XqEkEa1apG0xAjxUTwUXjgaamHsBDqWda2s9n25yEM7PVOuZH8yviqbLvsdB917s621AfItXWZF/tn56mfr/5QTlIcePtoxvDoWcRIwzPWUa6TWHNh0u3oVcl6yasEMi1wpQPxi3xoHx89XfbNKdjzgNeRxWZ5QjmO5DcP7OOZ3n2vPk9pl6utkp39Qi72jJgCEV8/Bjv7MS846tozT5voJ1OBE=","authorEmailMD5":"8f879e3f8c211a45166d50f0b72fe363","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"Great post, Stephen, thanks!\r\n\r\nI'm running into an interesting problem with Transactions/TransactionScope (side note: I'm using the async flow enabled option) that I'm not sure how to solve. I'm trying to implement IEnlistmentNotification for a custom Azure provider but I'm a bit stumped on how to properly handle async calls. In essence, I want to make calls to azure storage using the async library calls but that means I have to 'await' somewhere and that is the issue.\r\n\r\nThe IEnlistmentNotification interface defines 'void' methods so I can't 'await' any of the calls I need to make to azure. Sure, I can switch everything to be synchronous, but boy that really stinks that I will lose the power of async in this scenario.\r\n\r\nI have tried googling/SO'ing, but save a few articles I saw that didn't really help, there is shockingly little information on IEnlistmentNotification with async/await.\r\n\r\nGot any ideas for me to research?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-04-25T15:29:06Z","timestamp":1493134146}