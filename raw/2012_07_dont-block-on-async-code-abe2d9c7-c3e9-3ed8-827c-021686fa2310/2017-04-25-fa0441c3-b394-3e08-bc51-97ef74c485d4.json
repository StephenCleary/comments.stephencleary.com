{"_id":"fa0441c3-b394-3e08-bc51-97ef74c485d4","authorName":"Christopher Carrer","authorEmailEncrypted":"Udg4u4E6XUo03JO3x6c5EVWNdJ3YTE8aV6OAlPsesuWoPQKpoJ0nqOyapgjES1kVmmccILlA6cdDVlBdv1oK73sQ6dJfk6GRYUWqPgN71Pbp1nIueh2u+QMp+L8BNND7l4rDI42m6BF3dv303UxGk59QpEanKpwiq5FE1Qvv90QWD7Q+pZQdFzasnbLF2VKYf9cy+l7lR0NJ0hTDrgV7RNZGip9zNNs2XfqYUzTKwG9jlgncbceR89nqw8jhMdbUuSdn75CWgK4RHxC4N8yTwGhLz6bUmB4WDmKfqwcGLdDAZRQVle5TG/FGOAMDnv4Bafx474FiBeQQQMyc1E2JMam3IV3xZEYjnldMOCk37xJZMRF8KJz9mqxbwpb2+ol8WRBbWwvtuhCbTq+vCXVTAa8iViBK11xvOfDC7hxf5gLOXdU9XSWiACODiwB8GWGdFwaVF0erWzUJIDaesUL0fouglGxM98/VOX17ST+ySgEwXQqUg78r7FPmwdsvhnGoqyCzBeDttT7KxrFW+Wy3Fb+offbRhqKv+0NlsxkFxz1A+tBcPsOhJLyzwySfJOaS3pii4Ht4QGTRX9dXfhVHi6Sxq+bb6wzFhS79R3l2KGLb8oYOvzSeUiyA/a47F0SFBNn5yCMLSHNAgROkD1mvBnZidGJLmJY13O0626avRcM=","authorEmailMD5":"8f879e3f8c211a45166d50f0b72fe363","message":"Great post, Stephen, thanks!\r\n\r\nI'm running into an interesting problem with Transactions/TransactionScope (side note: I'm using the async flow enabled option) that I'm not sure how to solve. I'm trying to implement IEnlistmentNotification for a custom Azure provider but I'm a bit stumped on how to properly handle async calls. In essence, I want to make calls to azure storage using the async library calls but that means I have to 'await' somewhere and that is the issue.\r\n\r\nThe IEnlistmentNotification interface defines 'void' methods so I can't 'await' any of the calls I need to make to azure. Sure, I can switch everything to be synchronous, but boy that really stinks that I will lose the power of async in this scenario.\r\n\r\nI have tried googling/SO'ing, but save a few articles I saw that didn't really help, there is shockingly little information on IEnlistmentNotification with async/await.\r\n\r\nGot any ideas for me to research?","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"","date":"2017-04-25T15:29:06Z","timestamp":1493134146,"authorUserId":""}