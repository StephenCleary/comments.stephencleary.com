{"_id":"ff5f686b-c6cf-3c0a-af10-197889527b8a","authorName":"Stephen Cleary","authorEmailEncrypted":"RfoxPvzag6pzV6LlIDaF+ECrF2pxkrRGoCfI4KMVdfBYX6MVSnpe+KyxU5hOdkc63zDP1AT+hf/pQvVLrXLhqIcQae2DCwssSHEdikX2xYpldPvnAkv19mhIc2IpeCBcEVLLJujue79H9lsJVzjn3Vk0dNnmnPT1D4Tw8FttwZO3kdndDYcq6vzWqKugVECxWQoHez0gJfU876bggxZqfvBWz3M6AzDHcaQ5Ibr2P0/lvDKm6ZPggvLgc7xOcllLwvubR2KiQg7oNr/B4oJUr06lqsY2VPpK4TgMvj7NSrf22A327eLOb5zRc9CVuiMdQ0GkBpxdpNgChQA6nJRYw0gA0lTW6RziA2X3OkhnCgFPkPbqlTIStD+hWzMOXkhVZWaH4Cs1ekPc0FMLCB9kXSLILWSlP8/mdWd8vGTO//Q+G8E2CEh6/5Q2T7VGSvwRj6qMmAV8i9KAjnxWo6O0Ll2zoEmKRESXM6AWu/813HhvA2VtjTmIIhnfgSJp7L4QFPNI9Obilu+XuwDfWoPOttZYFoQG4t43PJjMqD1cCZ/If3KK57uX8uRJK6m87P9ZkM1X4TB94eFYPknPYdjxlzrKX1aBuU/pnJEEq0fBqPs4knbeyJzpezJfRP17imWc7g3XFhgkcNuLd65tnKVMZforGKDVDFg2dyVxEQTz20g=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"I don't think ConfigureAwait(false) should be used everywhere. It should only be used in methods that do not need to resume on their calling context.\r\n\r\nThere are two components to this deadlock. The SynchronizationContext is one component; the async method resuming on a one-thread-at-a-time context is the other. If you remove either, there is no deadlock. Real-world UI or ASP.NET applications cannot just decide to be Console applications instead, so \"make it a Console app\" is not a realistic way to avoid the deadlock. That leaves the other part of the deadlock - the async capturing of the context - which is avoided by ConfigureAwait(false).\r\n\r\nSince the default behavior of await is equivalent to ConfigureAwait(true), it doesn't make sense to only apply ConfigureAwait(true) to a UI layer. You can just use the default behavior.\r\n\r\nRegarding \"If you are writing a class library used in both UI and non-UI applications, you should not be concerned with ConfigureAwait inside the library, but only outside.\" - that is not actually possible. It would be nice if it was, but it's not. If you're going to use ConfigureAwait(false), then every method you call should also use ConfigureAwait(false).\r\n\r\nThink of it this way: if some code calls a library method like this: `await FuncAsync().ConfigureAwait(false);`, this is roughly equivalent to `var task = FuncAsync(); await task.ConfigureAwait(false);`. So `FuncAsync` has already been called, it has already executed to its first `await`, and it has already captured the context before it returns its task, and before the calling code executes `ConfigureAwait(false)`. It's too late at that point.","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","replyTo":"dd990e1e-dbbd-3904-bd06-999567348960","date":"2017-01-25T17:46:56Z","timestamp":1485366416,"authorUserId":"disqus:stephen_cleary"}