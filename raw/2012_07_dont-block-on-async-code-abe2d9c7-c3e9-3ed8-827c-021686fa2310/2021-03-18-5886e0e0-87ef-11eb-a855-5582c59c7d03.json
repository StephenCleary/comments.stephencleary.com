{"_id":"5886e0e0-87ef-11eb-a855-5582c59c7d03","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","postUri":"https://blog.stephencleary.com/2012/07/dont-block-on-async-code.html","replyTo":"f5b1be50-7d34-11eb-b8ab-9b2430b00b46","authorEmailEncrypted":"q27Cr+oN+vEvJgt7JuwAeZ5yGZOzrCUzmfegBmoSZXBtV1OOfXF+POUI96BeMRgWJ11BombCVudTiPaiqCbgPAT0fZXATw0at+ZHxnHat++lLdplsr99CegMoVKbnqR4/O/zuM4j3f2jeoR4GAatjfjwTtgUf1Z56wM9znalxTg2vsE//U7T8l6A/DCTjlhEaZWZov3Ub6mlu8f227IXWX2kAvvEXjm+TIJSeT7hMGtxuYcdVoVI2TjRgGcYn1JMXEEz4AvaI7kX3nAMi8WT0tF6q2YSD4DWeDbkUx6YujE7DzPjdgsMozChydw2BrRYCtLEmA7XKDxl1Q/pFRc7Y26T5VXyUTbIwYNtZs7B/Y7s00Vm9POe/+o3LVN/vZXF6aPchG0oYZFgb/8X5qe2NOp1mnqeSTnzy7kkIcv/AuL64RPZjQ2bxuE1RR7R9P3B0ubJgGJp3T+63ZVBZ9fzAd61sv4WEVYwkcny+L/FkYj1qU3kXXBXjSxibVcmaWi0fp06S9Hznm2EpB2sQqdVcyIkp6v2GmgAdC0qmNZQE3YxAAfKCrCgVCPmhBr2x1PD0wcAufLz7OpNGr+hlVxdrEK1rIVb8Wcbk2cCD/8y7KPktTpVzz5mia0EB1QIlyq1W+jDADIahkJHiJezFohPzpruafLB8DND8ddpkiMGZ34=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"> Another issue is that sometimes there's a significant difference between time performance of those two tasks, like there is some kind of blocking.\r\n\r\nI believe this is the case. It's not actually the async code at all but the networking stack that is throttling you. When running on .NET Framework (not .NET Core), [`ServicePointManager.DefaultConnectionLimit`](https://docs.microsoft.com/en-us/dotnet/api/system.net.servicepointmanager.defaultconnectionlimit) will limit you by default to 2 connections per host (for clients in non-ASP.NET apps) or 10 connections per host (for clients in ASP.NET apps). With many urls pointing to the same host, they'll end up waiting for each other.","date":"2021-03-18T13:39:21.947Z"}