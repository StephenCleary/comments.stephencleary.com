{"_id":"a456c20c-451e-46b6-aa24-f54f814ec562","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","postUri":"https://blog.stephencleary.com/2012/07/dont-block-on-async-code.html","replyTo":"e9f1f0ef-d838-47fe-be1f-6d486a7802ee","authorEmailEncrypted":"jpUDQcMFpMdnZoTK0MGmczHyAIK2kLhuAEWIdYMaLPAVNjDaQM7yHaSjhTpinSCHDNoggmo6wqTX\u002BFkFCad1TUQyyVrbtLHmdI5v09VW/5Dt3986Eav8hlY09P10/8W8KtfYVVVCKwebmpPTef/NeBJ8ZB1dLTSihV0s9AieSgFXcwRv0NNqAOQJWKanP7V4ovLuQFwhbivkgVakUHrgHNlACv4dN/Wn/nQn049ujZMWY4Gg4w0Ku/28ut2KHBAwXq/TUoZXFiZjMfm7BUVYGxZACiwDqJYsM/EKT1v\u002BgBcGL8Fnye8r500XPObAUeVcJLf4PMCyVaH2tTDD9s665rkcVitdXjWAK8ylc9jdYMoV8m48Fx1KyiRCKZyc29P87FefcvR5NzkuNf\u002BsWv69qawCPIcAKy5X6JqFdenIDfQPHtNUTYUfGd5g3Q\u002BtLH5HN1YuLYBYn6AKjUbRrlcpYgtgUNLj6i9ft0JFZy49F9PNmJwCkcyn2KY6qs2Ai56tYgSUBfcYLGkzTzQ4z/yfKJCdSGgbACT5sP8JFppSuUxfOrgCfb2y/eyu2UwMPKZ7k5et7\u002Bl\u002BLTKHZCbNI1njFkYRMbq4oNdY\u002BpP3kicV5TfijMYlSglVszGsrGpcGp1F4\u002B12uvc/NE51L5xgds6piPCOnwNzbSM1ypP2tYusk\u002Bc=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"\u003E can we claim that in case we don\u0027t use await and just use .Result in pre-Core ASP.NET, code before .Result and code after .Result will be executed in same thread, unlike await ?\n\nThat\u0027s true regardless of platform. \u0060.Result\u0060 blocks the current thread until the task completes. It never yields, so it can never switch threads.\n\n\u003E even if we set ConfigureAwait(true) another thread can continue after await.\n\nThat\u0027s still true. \u0060task.Result\u0060 is very different than \u0060await task.ConfigureAwait(true)\u0060 - one is synchronous and the other is asynchronous. In ASP.NET, any asynchronous code can resume on a different thread.\n\n\u003E So I am confused why is there deadlock happening ? Can\u0027t it just take another available thread after await block in GetJson even if block original thread?\n\nYes, it will take another available thread. The problem is that before this thread starts resuming the \u0060async\u0060 method, it first enters the ASP.NET context. And this context is a one-thread-at-a-time context. Any thread can run in that context, but only one at a time. You can think of like this: any code executing in that context must hold a lock while it\u0027s in the context. So the other thread is available but it\u0027s blocked from entering the context by the thread already in that context. That\u0027s what causes the deadlock.","date":"2023-11-05T13:55:34.5972669Z"}