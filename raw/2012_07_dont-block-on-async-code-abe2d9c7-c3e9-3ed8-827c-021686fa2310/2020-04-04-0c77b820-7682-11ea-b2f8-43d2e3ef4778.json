{"_id":"0c77b820-7682-11ea-b2f8-43d2e3ef4778","postId":"2012_07_dont-block-on-async-code-abe2d9c7-c3e9-3ed8-827c-021686fa2310","postUri":"https://blog.stephencleary.com/2012/07/dont-block-on-async-code.html","replyTo":"333018b0-7676-11ea-8042-d90d58266173","authorEmailEncrypted":"ktujjhBfMEgQfod68lpHie/Wx9fn3jZrSmRxYHcxPcpDfuHJuakSj8KB8g7bjN9VGgsvH7VcWP68naUe1rfkfp8/ryL6gRwqfzgsjC3O3QNkDMWdWM1cxvjHb3bvKXD/doQ12reokj3AKOBpV/VkIlBjdmO0Z82BClIZqi3rc73tYvQDW1bavGYfpzG6w76+8zeeD7udQkFPrNMLr3iS68u97cEln61a6QhXi9t5aNgZIXvZE/3tTuMcUe0NmYqprjeK3Z6V6Wr4XR0ZsXjqpSwp7G3i+eUQ6gQ3AXWUbrmDCDKBRIiSbmPf0Paeo9N3k0XD6HuYqriFNfBt7Lc8t7PfzfBlxLYjeHFgUP5NP9rfwcmGTLH+t7/2CXV9IjGmdrSQ2eZvNPY3XcZA7Y7mXbXk7UAPSgrOS712Pp2w8uidLK6OkFiQmIyPsrwICwEgMpminLDyG9dSjESLutoO57EKhmB7iI0osmdi9ETRxTkLIz67q0tGk6fx8jm4sJOQeZFz8kTQVcIAG88+MWcgK4qCfLwYA2D1WWDdFEKEtOl008x4JQmjxkZJLOAraE73M9MIJ9SHZaZk5uhPo2qraboAqqRybMx61uP8FCmnOInaiEVt7L9ycoSCya7RiMzeixV3JqvWixI64+GX4LmOiqHuSx1ow6RDod9ZjteR3+o=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"There are two conditions necessary for this kind of deadlock:\r\n\r\n1. Code that blocks on asynchronous code.\r\n1. A context that only allows one thread in at a time.\r\n\r\nThe deadlock happens because the code blocks in the context. If either one of these conditions is *not* present, then there is no deadlock. This blog post focuses on removing (1) - i.e., not blocking on asynchronous code.\r\n\r\nASP.NET Core is quite different than ASP.NET pre-Core. ASP.NET Core [does not have a context](https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html). So it removes condition (2) and this kind of deadlock can no longer happen on ASP.NET Core.","date":"2020-04-04T14:39:11.766Z"}