{"_id":"f700c570-2290-11eb-a090-3b27858fcd8f","postId":"2014_12_a-tour-of-task-part-6-results-b6e44095-ed73-3545-8772-598d69dec4ab","postUri":"https://blog.stephencleary.com/2014/12/a-tour-of-task-part-6-results.html","replyTo":"076b58a0-226c-11eb-8c16-05e84175b167","authorEmailEncrypted":"IXI28EGsDq4PjLWZuOg8jTQdwi8CxWTywT4NHyUUsDl4XI0zWAf6Goa2knQJ7SDWESXN1rdcqQD5xGI2+YZGWxPBlwBL0SRSb323yUzC0EOZrFT+PnQRglQT5PnF+t6T4Pjz/tYmgSGFaSByEnP4CkX6HDG3xz8A2CUQTlTC1xvcxnatFUsfJ7utpTs3z0x9PvmV/W0TfGS4V+LRAM2Fzwmv0H+maAvedJK5yKeilaSb0Akv4J2NvRM6HEdMoZ/zELIB3S5XaPpzTqcv0VyQpcvTrufQecMuOVJlbjbUEzxTVUFfH0vnJpCH88Mgvs9Fa5T3cnD1sQYMZ365VYbUE+FKGvi5gzYmeF5KS4uh13BLaJnZbhM8NTtJ2Oxdkraz70/1O0XWbbGyiIDIZGEsrtW8YHiHTJxUIUuUoOTRRctG/M8+sZAcp7MsFCgMrm1rSkRoqxrOuCNjMpjIL2xSaGWqTlZfGwOBMhmLIYXy/9+57zmjH7EOLYODYT6YCipsfRC6Q6y4lqTSfRZP7gMUKD1EB43g4Ofjmo0Bne2xA/AQq6l/v2KSAdw9fe9YECeyv300CN14U7LhVkqe5uH/aD8oJThgoE6VVdwXNxkf9+j66ZGpph/a0tP6VjK8res62ewlNOo3ho6ptMH69YoIBPNubdP0t8rY6rT3oh3TJBI=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"It is safe to access `Result` if a task has been already completed. The only tricky part you have to watch out for is that if the task completed with an exception, `Result` will wrap that exception in an `AggregateException`. For this reason, I generally use `await` even if the task is already completed; the `await` overhead is minimal.\r\n\r\nIf you want to process tasks as they finish, then there are techniques by [Stephen Toub](https://devblogs.microsoft.com/pfxteam/processing-tasks-as-they-complete/) and [Jon Skeet](https://codeblog.jonskeet.uk/2012/01/16/eduasync-part-19-ordering-by-completion-ahead-of-time/) that I've [included](https://github.com/StephenCleary/AsyncEx/blob/8a73d0467d40ca41f9f9cf827c7a35702243abb8/src/Nito.AsyncEx.Tasks/TaskExtensions.cs#L184) in my [AsyncEx library](https://www.nuget.org/packages/Nito.AsyncEx).\r\n\r\nHowever, it's been my experience that most of the time a better solution is to introduce a new `async` method. So, if you have a bunch of tasks that are the result of calling `OneAsync` and you want to call `TwoAsync` on their results as they complete, then a better solution is to create a new `async` method `Task OneAndTwoAsync() { var result = await OneAsync(); await TwoAsync(result); }`. This generally results in cleaner code.\r\n\r\nHope this helps!","date":"2020-11-09T13:39:18.221Z"}