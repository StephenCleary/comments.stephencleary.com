{"_id":"95e8a37c-81a0-32c4-b89a-c943dcfae0da","authorName":"Max","authorEmailEncrypted":"p0zSoael8CpOuqk84BEcWI7WujCE4kFoYJE+5OfDtqmjoDb6bMQrS1/x1ba1DqLv8s5WMFiLI2JAuHv/6BqE7iHX9th1XWbwCX8KEev6ZIFLXzjv9kSbOhgwT+H4SjhdRu17h6BfReVcEzaw0cb3HOiFJ0L0iI6pAYNqLurYcws1rpoXqBM2C8PkYLMlqx+CNLjPbtV1Et46Ra/5svu4nxqmKkDtV9duK9kxvysKq6GVsHfy5GrZlHNsLC6QceASZuT16b3TtFFQ3CM3uCT8YEJz5XawNraEtJJO6EZuB1OioN3PXyYL4nlupZ/tkbSSs8Z1uhpZKcps+wsDpsEOpQIBZ7H0wOwA92ItAMU/wdAdooL0Xxswf81T5kgGSql9BQhHyBXi3W7zlVBiR8Qya9Foy0g8ScjzXsmVgUhJixJFLqFe94xY/mVP6y7kh9C6D5MaOampUTeVi7HP0XX7IM0xT7CFZz3aTDP0XMdUxIVNfxKRjg7d1awEidlckQ12/y9pcHdLgRHBUuDEBGfAySOSJ4Uco/UEYHObTqUhahE0hOleOE7EzrqGx00Kh+BHtKxiDRwlVKYeKkCLngVFFU9UjQsDGVLpPr9lIZHi1CLyACHuKoAlKTi1Xim+OMiNzcuPIMkSfbjRpWTOPD9oXhW2Kke+5BXlGJvK8cQ/ilA=","authorEmailMD5":"605b046ff2b480851e0607a41ed2215a","message":"Hi, we have fair amount of quite complex code (business layer, involves accessing data base and other services) that can be used both from ASP.NET and some background processing. I don't want to duplicate this code by implementing sync and async versions of it. So, I see two options:  \r\n1. Implement async versions of everything by default, and then our background thread call them in the way you describe here. I assume the preferred method would be task.GetAwaiter().GetResult().  \r\n2. Implement sync versions.\r\n\r\nMy inclination is to go with first approach. It is more convenient and allows flexibility of making decision that something to be used in background process to be deferred.\r\n\r\nDo you see better solution, or potential problems with this one, like deadlocks, or performance considerations? Since there are no UI threads involved in background processing, I would assume deadlocks are not an issue.\r\n\r\nThank you.","postId":"2014_12_a-tour-of-task-part-6-results-b6e44095-ed73-3545-8772-598d69dec4ab","replyTo":"","date":"2016-12-05T18:44:15Z","timestamp":1480963455,"authorUserId":"disqus:disqus_tBCipkZ9pI"}