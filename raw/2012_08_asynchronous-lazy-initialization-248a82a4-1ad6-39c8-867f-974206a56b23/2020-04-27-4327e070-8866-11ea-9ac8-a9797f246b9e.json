{"_id":"4327e070-8866-11ea-9ac8-a9797f246b9e","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","postUri":"https://blog.stephencleary.com/2012/08/asynchronous-lazy-initialization.html","replyTo":"f3fdd5d0-87e9-11ea-b2b6-7d872f40276c","authorEmailEncrypted":"YKCVf209zO2R2B9opAwqZXIP2i7oD7hDq4sWlWQVBLpofmVcn+jzNKCn2rzTu8QsAcCbu+Rg+Md/sqi09YpvVlF0Ni1sIjNzyv493kK0hKg7gBmfko4mVCFXQFDIT+koe9bMiQbN788gsaeRbZcT67x/V02HMwo0wpCY0kIkULL8lH5iaN8lqkYL//yXl9BP2Cd0bmZBLO+K4Zhf9EH0t7SdMgXhcjQq6Fvj4Yur23IDvE0xga5LAKSm8FVgJnnRSPwIoNbX56dsHUq+n+Oc/rNfU6aDmtWlhChIf7x1VAnaIFSPVotKhHrjN/6UyCUXou8NYQJHwLqpXvgZ4u9brORLYK4/V4OnOEOqHed+zfmb+6C3FI6fmSVBee9Ok6vOdrAYE7sJnTqft+COaIetNnbRzrBeTcp2y57vK1qxWBjDqNLTxhqKF8TtvA+exP1rvaC3eUzANlLqiEJtDfIUBWm4IecqPwU3pxZLDODX0tWt94HR54KrYZF7djo77CLPuTPC8ztdGYGVQylJ+vVH5YBqhC4dHkgp03JLOiioKpwafdtWjYqiIDd0vzeTngyC5nc10HZvA7mXPAVLwIUrxWWi/hz1Z/sAkz7NfN6Jjjmfj8jj9olET17TVI0L0hdg5yzQ7SiWCsU1th2tAlZMiYqVHkiE9KwZ5Nv69FcSGpM=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Ah, I see what you mean.\r\n\r\nYes, that constructor is not available in the library. I felt it didn't make sufficient sense for an *asynchronous* lazy to take a synchronous delegate. You can still get the same behavior by wrapping your `Func<T>` in a `Task.Run`.","date":"2020-04-27T09:05:38.526Z"}