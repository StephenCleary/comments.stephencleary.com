{"_id":"97856346-5792-3560-834b-4e777b86c1f4","authorName":"Stephen Cleary","authorEmailEncrypted":"AQnyAo96izIrFMOnlhAIudm1BEp8HFWWwVig22bGjC0vVheoUzMHthZ2l3kC0yFib6RnW+1gH/6WJjDBH/DVoT/bZgewFNsNa9HZrCjli94F7Aw1a05UpsX1PzvHnL342jh6ZsCArvjWwwjH8Yu91AzFJMK7YVvefRgEn0NZ6jiboT2sHAnIykEqWKWd6WtAHruqRwdo6zgRSnIRsI4LU0phqPfdD4BlGHIoK2byVwDLcr04Himyb8UNKwOK6Ug0aMap5TLHkGPABC/gPzLWpr29u8CtgMpSa+j5kMVDrCJUuqHJGif0BCzrQm5IMaDz82yb1vPKdh/THz7ds3y42zJDvGKxXsNTURezjovfgXxV+4RrlcPZgwanEjrjav9a6cyUhYjk22FcgdD3NGo9vDaRqhHdrn3LzUcYGmWFbBWNQIOfJzvp/LUdnRifdrIMvZTiAqJ/GS2tqClo5QRslgmnVf+kEnQ0QktMHbetW/sy95UqFzDzpyOnore95ceeIVe8cnlJPrto5zIWp07H8IIhd2ehBuUvkGFaVZ4lST4ERf8Mq1gOm25YYlAKts6/jucJmh5PE+dSS+mAX8x58w6IFF5PKtvrmWMoIw5YAhm4Ku9bvjb1IPv8zqn3q2D0XbaveUPteGFktglzq196bDp1SMjVLcq63zUd2t3DCSo=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","message":"The Task.Run is just for consistency. In many cases of lazy initialization, the factory function could be invoked from different contexts. This *could* create a race condition in some scenarios where the factory function may run on the UI thread *sometimes*, or on one of several ASP.NET contexts. To keep the context predictable, it is always run on a thread pool thread.\r\n\r\nHowever, this is not always desirable either. So the current version of AsyncLazy<t> ( [https://github.com/StephenC...](https://github.com/StephenCleary/AsyncEx.Coordination/blob/master/src/Nito.AsyncEx.Coordination/AsyncLazy.cs \"https://github.com/StephenCleary/AsyncEx.Coordination/blob/master/src/Nito.AsyncEx.Coordination/AsyncLazy.cs\") ) takes a flag argument that allows you to skip the Task.Run call.","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"7ca88b7e-62da-3b91-bf66-28346cf67748","date":"2016-10-31T13:13:50Z","timestamp":1477919630,"authorUserId":"disqus:stephen_cleary"}