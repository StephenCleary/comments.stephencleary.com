{"_id":"97856346-5792-3560-834b-4e777b86c1f4","authorName":"Stephen Cleary","authorEmailEncrypted":"AAOD9vomKQGLvzYjh/NCyhgF27j72YHBdqtvgefu/ZRCP1FvkoIhd+Xg/XvsiKUgBnAGGWqex/GriOxgeFYSFvJvxdt1nFJaMnFaOFLttvhiCwvb0VRW9eORejyhBJyzVXqUrJjBWXLitgahs1q4VQDtuFdLja6YeEUFohjUwYEEbmz+wM89ffsrHlJzdtg+DcDRBOr8927XbISpN6K5Fl7poXkUWiInnVhJKVy+J0pRbMFGRssIj88cPnLe8LVbNluKUbEUPPfXZRZJ5ms1V6vYRIeiIslQ0aOTJsRngbxKh4RIgrjR74IkdheUGDbhoVxomW1IAxtdITn6D1rOpVcSzykISeInI5y1lpXGZBueF7VHzlEmNahh3eY6/QjvbsCSvtOVEuSn9hPvCub0TSAgqdCwJjWABdpTL8PmF56RYGWyOqwmvIaOYZnzYdUm0emoT3D8vFfmUcpHeKxcsX+HcXNKfSEmYa2cQV52YfHT/kfGERMp4Y8XDWgRs9EvZCoB2ZJX3SaEEfzT0HUsv+TN7/HCreXDxGjmBaoPIDYmhdSs/NvtIA+hbWMtC6lxmJDkQH/woZqYZ9d+KIj+PkUxHC8BwG8qz9eczza+RM+JBrLGdxOaIIjrjyEHB0/M+buqcjXDuAsZ4jBqL+rGG0Tm69j+Vt5Zeof4WQIHGns=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"The Task.Run is just for consistency. In many cases of lazy initialization, the factory function could be invoked from different contexts. This *could* create a race condition in some scenarios where the factory function may run on the UI thread *sometimes*, or on one of several ASP.NET contexts. To keep the context predictable, it is always run on a thread pool thread.\r\n\r\nHowever, this is not always desirable either. So the current version of AsyncLazy<t> ( [https://github.com/StephenCleary/AsyncEx.Coordination/blob/master/src/Nito.AsyncEx.Coordination/AsyncLazy.cs](https://github.com/StephenCleary/AsyncEx.Coordination/blob/master/src/Nito.AsyncEx.Coordination/AsyncLazy.cs) ) takes a flag argument that allows you to skip the Task.Run call.","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"7ca88b7e-62da-3b91-bf66-28346cf67748","date":"2016-10-31T13:13:50Z","timestamp":1477919630,"authorUserId":"disqus:stephen_cleary"}