{"_id":"97856346-5792-3560-834b-4e777b86c1f4","authorName":"Stephen Cleary","authorEmailEncrypted":"sVICNnCNaXrwK307Uxsti2JUJk36ywT86WdXvggt7Boo/GnFv3UKW0TjpWZlkOYK5v/98x2llJDlFCTWYklvKy33EnJibpTfupc1S3HHvL4VPaslF8s7nuttHuI74fHuVm1MULB2k0l3THC7xFw4s1IfvBSx3KXdWxikw5YqOXLrHiZNvC8bbxvX/263n8QYi+/aXiLKpfb3dfDYSTQDWJCcGjPWXx3/ZsTs5lT0Kc+YI+guxyzlWp6oNICWjbmSA1QxibitIIXTk5QPorGRsNYMFHzjY94rRSB1HoZ8/T83GZZxFiuBudYx8IwnfkuD18h5gcf4CiSG9ih0J++d7IKZ9VKyP2LvxzD0InrCpybr4EywVd++QvdrP1DyJg0MVcTVUKHqIoQarXMGNa501fvK4rOk5EPlAV4jSrvCOgJCcyuRAE7s2z1T7hWKjiJ2EjWzXDrxRzi+o0AXvTmuh6kIamo1abuGD96xey+P38GoE+cQFgdzLDdjKxWlCKFIg6HSfwjQeQhwArM7gnZ8ghL+y5JwcgaerbaNveCxqK0xcF7cqQoSIFE1C4v5Z52mGIaTTjevRK7RdyE52DmRQCL0297YCcXWgY8FfsoSFGCCjZHTLIUH2V+CWeXsR85YoDc+hNMt8aMg2PCxxq/5mWglkCzQAzAFJQIs99S9IJ8=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"The Task.Run is just for consistency. In many cases of lazy initialization, the factory function could be invoked from different contexts. This *could* create a race condition in some scenarios where the factory function may run on the UI thread *sometimes*, or on one of several ASP.NET contexts. To keep the context predictable, it is always run on a thread pool thread.\r\n\r\nHowever, this is not always desirable either. So the current version of AsyncLazy<t> ( [https://github.com/StephenC...](https://github.com/StephenCleary/AsyncEx.Coordination/blob/master/src/Nito.AsyncEx.Coordination/AsyncLazy.cs \"https://github.com/StephenCleary/AsyncEx.Coordination/blob/master/src/Nito.AsyncEx.Coordination/AsyncLazy.cs\") ) takes a flag argument that allows you to skip the Task.Run call.","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"7ca88b7e-62da-3b91-bf66-28346cf67748","date":"2016-10-31T13:13:50Z","timestamp":1477919630,"authorUserId":"disqus:stephen_cleary"}