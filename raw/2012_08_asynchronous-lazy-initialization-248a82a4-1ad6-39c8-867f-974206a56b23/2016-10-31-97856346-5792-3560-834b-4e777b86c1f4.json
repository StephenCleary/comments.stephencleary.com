{"_id":"97856346-5792-3560-834b-4e777b86c1f4","authorName":"Stephen Cleary","authorEmailEncrypted":"UTVpA8VQDjgsJcJQkQDjXzfrnEjX26N/j8q3o01cp4y651E8cvbw4FxUJznSRmHb6xkROb7K9RcAol0d6J7dZAvMA5aDO/wmZBh+qMxeUnk6XuNTcz+c3mWOzYr92rKUXU3BgK5uUZu2cHSsPr+5W1kftNaSqPyJ1RCn1vjcaj5B68B5U6vDb1cfxwl6U2rLZFXIDWRfrX3sBYAheKS3Kmn8pUJ5ANQL1YSbmXYaEO0sw1H9omxUeydBlhKFwzyQ6aSe1N4rsg0zE1NW/V1ysXafYca8LuMC4LFit8qN23+Dind8/UmX7cfqPkwe2YurZe1SO0ioPJ5VCSapeiCcNmaEl1LGeOKDTiaOqTnw0VaTUyKHCctTmI8oRvXLoRBp+J29DKHtAw8NPSDdB3WsTWSjyNWQp/jnmdcSZUCgZMys/4ioZo54kbDY0yhp0v6SbkL1RsRvNANlErUMBy8D46RmWfPU0Qic6h0+QnU4vbzQJo9RestDoSA1B7YNSbwLD2EuYlEYMXUBuLEbGMx3Cg8Br80eBZXhXFyclB4R+uxOr+2Wcgyd9VC61n0gENJN76kc2Q2me903pIvCtrgI/OsYoGU/9DJsuVwHcnc8bXDwY1YhVhQurpL9UxJnjx/OeuZ9v7VAuO3KD6DPlDPCC7HlApHf5ikoU0BMUg3Jx3E=","authorEmailMD5":"ad2250182ff26a84dda974e50cd94382","message":"The Task.Run is just for consistency. In many cases of lazy initialization, the factory function could be invoked from different contexts. This *could* create a race condition in some scenarios where the factory function may run on the UI thread *sometimes*, or on one of several ASP.NET contexts. To keep the context predictable, it is always run on a thread pool thread.\r\n\r\nHowever, this is not always desirable either. So the current version of AsyncLazy<t> ( [https://github.com/StephenCleary/AsyncEx.Coordination/blob/master/src/Nito.AsyncEx.Coordination/AsyncLazy.cs](https://github.com/StephenCleary/AsyncEx.Coordination/blob/master/src/Nito.AsyncEx.Coordination/AsyncLazy.cs) ) takes a flag argument that allows you to skip the Task.Run call.","postId":"2012_08_asynchronous-lazy-initialization-248a82a4-1ad6-39c8-867f-974206a56b23","replyTo":"7ca88b7e-62da-3b91-bf66-28346cf67748","date":"2016-10-31T13:13:50Z","timestamp":1477919630,"authorUserId":"disqus:stephen_cleary"}