{"_id":"9f410180-2f1f-11e9-9447-21eee9ff7847","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","postUri":"https://blog.stephencleary.com/2015/03/a-tour-of-task-part-9-delegate-tasks.html","replyTo":"306b0a40-2f19-11e9-9447-21eee9ff7847","authorEmailEncrypted":"USeiDEdKP3CdDld2wflKZCY3HNhNzONG0OKI3GdGZ9miphVFktgOgrVEm6398INSXPt4BkfxhjmNA9M5Mpwky/7kCtH17abUGNlOofhENu0qiumIAcGMrBxOTuDYSq5zu0/pIKN2iQf1derRxQsStdNJzc3CNaZtyoQjr0VzPXgHUZR3oK6AQ0oVWInTRUVcscwIL+5Q+DU7oizw6eoACJUSgnxhStQqubt1ZNWbCwFBoSHf6+Maz6t+DFlnAww1g52OccVW/reYYel6NCQ1qB54SsKFQC5RLzim2Ih+4nKYTLcPyZpJ1Gl+FZ7WmxLMUFQkgVK9dVarCVyweBlykDEDHrpsQ6t416RKjlm1D0aXqpQg6Httw9NINBiEfeK5YPK+5XGF/HxeqJJeEdHloZGjIiMJhOGVNxYmCBL+8N61p4xXyP2x4yvcHiNvQ1Qml+GL/ZZ9HGQLUfVVfOBKIct46QeK6wktmxS5VE4+XVSBdYKVoqTHLJJ+GUfAiC3VQTAT79Tnl63OyhXVdohzQgUuG2j1vdILmlHanh73DrSBbpwH63X0T5FWLpgg3SWHkarcC8GFKSrD12EYuAQM9ubXtseKfFBtVpPod9YakrImmPcRVbmHQ8ZfYBRiKefEWnaXhDDUZ0tYJKaXdxgbk8kMrzfYGoaQeVWYKg5reuU=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Yes, if the thread pool is saturated, then passing a `CancellationToken` to `Task.Run` may make sense; it will cancel the task before it starts if it can. Passing the `CancellationToken` has the same effect as calling `token.ThrowIfCancellationRequested();` as the first line of the delegate, with passing it being slightly more efficient (it may not need a thread pool thread to cancel the task).\r\n\r\nThe important takeaway for this article is that `CancellationToken` will not cancel the delegate once it starts running, which is an extremely common misconception.","date":"2019-02-12T23:40:47.832Z"}