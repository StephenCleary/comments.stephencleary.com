{"_id":"72ada546-72b4-36df-bc7f-3b4e0586f976","authorName":"Ryan","authorEmailEncrypted":"J1FGg4Nefzubn6MNls58MSSfOTYJ9VBMvO6GJsRLHkrR2QguJ70+hFUyx0xwGhAO4mfOkVpr4LRj6mTnEl71+5FIB4fB0TZG8rqU0JvYKNDSgsd34zju8NARONQpgzWHYcZDvLnXYntN8diNwVXL49UkdP9VXiMueiEQa2PuV+VD5BiUWHXrPqy90mCjkpnFSkeaNbBhtUtZobMbQ313JuP7zPB9do3nCRffR+dkBdu8hsG56/4mn2DdgZmI+zIGG4MPiYcYm2lEielEZ7ac6PzzkQrts2Tx2iiZiDNLrTMwJsBMWHhqvaMfchliL2w/1kqZ/N9LTooHZvtDDAi9sS9uRqkhnuQqgDfgbUmelZZoQfiF5LQhJDBXceW8hr9/dMqoo5RfvENiZJXwrTwCE+VvfT5oxCQ7Bulxl3r0N5DDb8SeP7cV3aTq8m8pXZOUeR6pqZqEDVlmJ86EdXWmQJrKPGBo0PBFfOqHJhgqey9dNrIp+4F/CBS9g/2RdM3WFLfVCcvtsjnR961OgigvfSGVkA6wCg6A1t7/nrixjHXYyXzQ37Zrgp3172NnIVAy58Bp6XyP8e4SiyKUuRDJC3AQSZCCamozNXn8+ZRpX/Ui88Dfy33YVRWE+JABIfqVf5S/ohl9ZsZLEsXusgZN2kYjxac+P6wMVw2TgL+kRow=","authorEmailMD5":"81a4cd92a3a74962f5775f58dc73bd86","message":"I actually was wrong about Execute above - it returns void rather than Task. And I was able to simply declare it as async, which worked fine, but the exception wasn't being caught & handled in the base class code (assuming this is context related). I believe the logic is working now using the Task.Factory.StartNew(...).Unwrap().Wait() solution.\r\n\r\nSadly the code in BaseClass is outside my purview - gotta pick my battles :)","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"ca557d58-946c-3922-8764-06535435669b","date":"2015-08-25T05:14:16Z","timestamp":1440479656,"authorUserId":"disqus:ryanrolnicki"}