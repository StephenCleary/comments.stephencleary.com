{"_id":"72ada546-72b4-36df-bc7f-3b4e0586f976","authorName":"Ryan","authorEmailEncrypted":"DeD9VIB4txOcoVDFcn5e6WSMb61VH7Vsm312LN/owuU/Tu87VJtukHFoRY6etSCmHS2/5UHcDCOSJ4vMNA8nmqvFAYwx0xpeRFypQk4Vv0qBVsO46zNdjj+7fXcOCh/x03PNzYJU8dEpr70hTSyTb3H62aCYASnU6AFYm1jKCFqpXKITMPTAm4MVeBVLkZJIPmw7IF/mVA64GbJ2hBUNx0wX6whUvsKGYo26qRRtIUVbEmFWh01g9B5HKSnugteOTiMhEvax1lOqwj3kblQ7FFNXmvZLgBNb8UHuA6Q2DgnoeSxWnaErN6l4VPAKNU4P7QCVDRQi9Vaad0D5cUZHv2Ob0Hy5gpk/GX+b+ASFc4Ut/0rV0SLxRALh4BV6ASw2xztfEBoiPOLbBAtlMfhiCIzZ4mGnY3lgwYIH44rtjSudvLGG7sco4HA+X9rhtHj2Yhm0QhcfxmT+Jp7pCX3pUsh6lIFN/rRf4Ue+LXF0UIJQjGDXK4olrr7MJ09DMhqgYsc/fSMJY4h4uClSBcOiv6cqPKoX/pvwOH/Wia3pQl8bSMLbhuvzoirua9XoYfsmDSwsz/GU3fXqzECdwepAm166wAlr2p/A/NnyYH3+S2siwfQqM7g2FZK1iiFBE8UYBIV5XRM1YLTnHhjjzRDLO8ABiD0JGk5yT+tG5xxtfMU=","authorEmailMD5":"81a4cd92a3a74962f5775f58dc73bd86","message":"I actually was wrong about Execute above - it returns void rather than Task. And I was able to simply declare it as async, which worked fine, but the exception wasn't being caught & handled in the base class code (assuming this is context related). I believe the logic is working now using the Task.Factory.StartNew(...).Unwrap().Wait() solution.\r\n\r\nSadly the code in BaseClass is outside my purview - gotta pick my battles :)","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"ca557d58-946c-3922-8764-06535435669b","date":"2015-08-25T05:14:16Z","timestamp":1440479656,"authorUserId":"disqus:ryanrolnicki"}