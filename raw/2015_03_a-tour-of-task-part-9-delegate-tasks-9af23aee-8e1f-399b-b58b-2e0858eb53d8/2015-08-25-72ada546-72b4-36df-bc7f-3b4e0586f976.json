{"_id":"72ada546-72b4-36df-bc7f-3b4e0586f976","authorName":"Ryan","authorEmailEncrypted":"HrO5CYm6/6KNCOB0h4HFiqn+05NhGi1nV9JvyaQhrWt6EedDmE2mORjhQbLHb+0FjEfdf+ZfrULRPjvzSwi2YD6np6WMLBs2y0jlI7/SOxKY1akECu50d3Q2prDgsfQmk+KzHQW7+VZHwVNozNJjWWRiFdXSqCMUeM5RI5CPdHczpBDqC6qV1d0IOHaylPzNhcMOC2yuTwenJ3ZSEipADNYyhqir6kUj4GZWW5l/Q6QG5XPUHEoMvzuqEFdXBmdoecQo7xJcsCTdMPRS7fxGc8Uft/pUFF0uVMfd0+ZMNYnyhl6EdDUGdG68IclZ8PUtA55cRWwKf9/W/2NZInBB4ex8eWnOQKMRVPMko2beFGWo/D2dd7vvgqVlY5d6FNrTV2WgTkpEB/jcRJOdNLQJe6rZ+jgceje06xalZE1LCBIx1s/Lc5tnQkI73kDyeZh9kkYMbNryXgR/Ccc9fQ0DIaPjJS5MS7E9bO5AjbI188l12HjH2DlqSTkLarkBZwTmoJLN3xERJceLXDi45ZbqN+dbY54lbgjlqttyB3/5yObFibVk1NabV5PPbguHjyo00Z0w5j+GJqsqjh3B7gekbx0REaZkc6lcHgFGm1eOUq9fz75VAaZb+c+fe2rb4WkcrNzXXFPL9Mwlbcge1h6u2kZ1icdZjYaCSzbEelSjA6Y=","authorEmailMD5":"81a4cd92a3a74962f5775f58dc73bd86","message":"I actually was wrong about Execute above - it returns void rather than Task. And I was able to simply declare it as async, which worked fine, but the exception wasn't being caught & handled in the base class code (assuming this is context related). I believe the logic is working now using the Task.Factory.StartNew(...).Unwrap().Wait() solution.\r\n\r\nSadly the code in BaseClass is outside my purview - gotta pick my battles :)","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"ca557d58-946c-3922-8764-06535435669b","date":"2015-08-25T05:14:16Z","timestamp":1440479656,"authorUserId":"disqus:ryanrolnicki"}