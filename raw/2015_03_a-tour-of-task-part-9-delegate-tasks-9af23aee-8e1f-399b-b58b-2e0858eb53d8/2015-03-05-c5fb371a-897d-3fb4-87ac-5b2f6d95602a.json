{"_id":"c5fb371a-897d-3fb4-87ac-5b2f6d95602a","authorName":"Stephen Cleary","authorEmailEncrypted":"","authorEmailMD5":"3db7b6e14d9da42751e4bab03bc4d034","authorUri":"https://stephencleary.com/","authorUserId":"","authorFallbackAvatar":"","message":".NET 4.6 is planning to add a Task.FromException method. In the meantime, you can use TaskCompletionSource<t> and call SetException.\r\n\r\nOf course, if MyFunc is marked async, you can just throw the exception directly rather than returning a completed task.","postId":"2015_03_a-tour-of-task-part-9-delegate-tasks-9af23aee-8e1f-399b-b58b-2e0858eb53d8","replyTo":"eed07573-b7ad-3fe4-ad55-05f096f8fae8","date":"2015-03-05T13:19:46Z","timestamp":1425561586}