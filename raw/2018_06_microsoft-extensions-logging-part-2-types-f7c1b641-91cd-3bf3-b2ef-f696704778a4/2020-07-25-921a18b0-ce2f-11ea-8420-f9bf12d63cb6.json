{"_id":"921a18b0-ce2f-11ea-8420-f9bf12d63cb6","postId":"2018_06_microsoft-extensions-logging-part-2-types-f7c1b641-91cd-3bf3-b2ef-f696704778a4","postUri":"https://blog.stephencleary.com/2018/06/microsoft-extensions-logging-part-2-types.html","replyTo":"","authorEmailEncrypted":"dKVzi+xBpMF56YAU/B5dxnABL0hbW7+PwSf3wiNN62Et5gUOWXHOKF6B0mnS5iUG7GiI64hDXAZwk2gYzQpox8J7a5fxwqNpXyEXkp53asODGWFrVyeQ40VY5qu40j+gIVufZXAqeYmPCFM8JfWfgXfjOfgn+5unHLfVg4Z7k9ZbXvkKAew4/IvC58OVqN43FuPxv1Zn2AboIo49uW6s5bTTulV818U1gdpm0y0AuWFysnOsf1hKrPiFfFP24j8z+T138jIxr/Ie46eVBk2DPya4FeruE5UAg4VPT6B3ZXDfR9INT2W06UWJO4sBd2nCjWUS1hxf5lp6ODdHuQH45M+ASogUJlCsgF+duSdGa/ZEoQcebvnWqdNN5T0B4S/jP63408BKMM8Dmy2IuBjUMbKTfFOG5IghZSKuYm+m793jumS4KopIEPTIl6xXgB0cQQWZh2KIRtoWJp7F9T8zWF1Rda0l+bWObGRPqrONQVQYjVFf8cRB1g08SCh2BvM5ZMmWDXeLJWfcaRGOUalgn1K0y7RSIC6NWhDd4bWSEPqeqvjlUBLqH4evvEibCumuZQduP2Xyh+RCO3ta/XHRyesoVG5q/gItKH00ETCRCFnWN963ytjdfbwbOppTYjXu17xmZWShMEXEdGaC8qDpciv8uNt6sCP9iyK5gK9ckd4=","authorEmailMD5":"423b3a53955b02190eeb23a50a63ce1a","authorName":"KD","authorUri":"","message":"Hi Stephen, Nice blog. \r\n\r\nWe are currently using plugin based architecture (McMaster Plugin project on Github) and loading plugins in or ASP Net Core API project at startup time. Now the plugin we use uses a nuget package library which ofcourse has some logging on its own. \r\n\r\nThe problem i am facing is how can I inject the ILogger<T> into my library because plugin is just a dll with no DI magic. Dependencies that Plugin needs in constructor are injected via DI from asp net core API project, however, nuget packages library that this plugin uses is purely an internal library to plugin and I am not able to pass ILogger<nugetLibraryClass> to its constructor. \r\n\r\nIf I just pass ILogger to my plugin however, I can just pass on the same to nuget library. will that be Okay ? \r\n\r\nThanks","date":"2020-07-25T04:30:30.059Z"}