{"_id":"4db09c1c-56ba-4b35-aa31-99ddeb7f59b4","postId":"2022_10_modern-csharp-techniques-2-value-records-b4619e8d-ff25-3436-9580-1327163e2a81","postUri":"https://blog.stephencleary.com/2022/10/modern-csharp-techniques-2-value-records.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Nick","authorUri":"","message":"Happened across this post while looking for something else and had a question about your use of value records as IDs.\n\nI\u0027ve taken this same approach in the past and do like how much easier value records are to make \u0022do the right thing\u0022.  However, one thing I\u0027ve gone back and forth on is what to do with empty or missing values. I\u0027m curious what your thoughts are on the best approach when an object may or may not have a \u0060CustomerId\u0060, for example.  Would you make it nullable, compare it with \u0060default\u0060, or reference some sort of \u0060CustomerId.Empty\u0060 value?  Or maybe something else?\n\nEach options has downsides, but I admit I like avoiding the repeated and easily missed null checks.  This does mean that \u0060default\u0060 needs to have a valid meaning, which might not be the case for all primitives, such as a wrapped \u0060int\u0060.  And the third way requires more code to support the empty value, somewhat undermining the simplicity.\n\n(Aside: The value I\u0027ve gotten from reading your articles and posts over the years has been immense.  Thank you!)","date":"2024-08-05T23:01:57.1897593Z"}