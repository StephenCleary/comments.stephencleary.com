[{"_id":"9d1745b0-51e9-11eb-bf6f-f3869da4b784","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html","replyTo":"db1dfd10-51dd-11eb-bf17-c58a60efa65c","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Lector","authorUri":"","message":"+1","date":"2021-01-08T19:42:17.400Z"},{"_id":"db1dfd10-51dd-11eb-bf17-c58a60efa65c","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html","replyTo":"","authorEmailEncrypted":"XbwAbmMqvaculQEGKHj+ZHaD7/zVY2a+R6BQsZWfpLVzZ6alhRfxKX/aKbn2YITM7eFSnWfQyxrwvNVM1ZXaoSlef3mbq4+dLr1jpURuphINpeHi/hGOT/631yM/xTyDHu7GVR4IrQdVo+YtLMEoFajMTwckTQebcWdIuXwFl1Aq7kKVm3P1CPc36HlMnKYLfAx/D5IxMLziqHnVjJZwjzkY+kLHkfE2i270Z6F9R138V5RcUIVDtcpGOfJg0pqmIn0fNl4N3RRbJ9Y0Zrz7Jw4yFsRdyGoP2yXUuZn/h/V9UXIo+DAeIWkHUB5A2bHAXudDyqTgo2UZTfclco8T5x9/yvUm4rdAB5Go897TLDqPNHjWCCLMEm29hDAMwIUd/GyTe8BkhqI8kqLHH7z/2Zdhw/H2aq4tET9nYZhIorR5ezUNI8uTxuXrCBlgKl516gx6Legz+InS41sQLsU2ko8M0r54lTdOBt2wsPGGNVsD2hekQcrVKf3fseo5myco+mxx09Sniill9iB7yh/dviOpiClCBUwietNKBZdfbX9aMADTDNCCejn61/cyNeu18pp5/6wZWdkRsehKuxCQfh3RRRZl5GpbnfxH8Ze6zTZkkhZdv4J0CWrggsZ4BUL8wCBYHFzXMY+7kYxV9htvB84CddAu6HmujbSFxcGG5TE=","authorEmailMD5":"deb34a5de3d444f0b7b3783e2dcdca84","authorName":"Michael Burns","authorUri":"","message":"I'm looking forward to this series, thanks Stephen.","date":"2021-01-08T18:18:07.438Z"},{"_id":"0a2e27c0-52b4-11eb-961a-cf4f84f65490","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+NitoPrograms+%28Nito+Programs%29","replyTo":"45d425b0-524e-11eb-a19d-2ff5f1adc90f","authorEmailEncrypted":"KlAFBtDreuOYNtN25Mf2IEYIv6jogJKX/+V7HpZza9GcgWhIV8HpQEWlqu/wqx9JH//6gO1F0w9Xw5F73/NftK+yYz4L0tALCkCudYyl3zXCM2eD2oSHghlsjV5+3VwtStLbQAgyMSnMCW4qBsUg9Tc2TjJScpddnY2ISc34GszCACH8eTgduXVKOEeNELhk4E2NWzUADKgDI5xubTxlgLMzzYp4Ufl46nI7V3VojCtRx8809PVE1SJ69uWRQ9vGOZ+XSR2AO45rp0Ebd/uGlPWwKpwEVrjd/s77rhYKSmDu038zumSy5gPEqHcvT5ggOKhYwScq+Xil9LjalWlS7YPHJzvrieeOEyiJ0Cwi1Og/c+d3dCKlWqdvhhQqBL8pc1qtp3xQyLSn8EL4BmFNoUMv2Md1abgV7nP1yX5Ew4yO/L8gH/ALs6T9v4Wjfn7MN/PcNQ6aUH5jL4sJiMQPKGRygH6UjwY59Aasrvs2t9lg/cBW/fsqm0bbhofxq03E6lCKCDF/ijSxxt6d9d9rArNveZFAMvNPs8pFHck7N4CHvjcjNkcwKFSWjAqQSlo0Oc70Vdh3uF0MTuxFnAkTQr2mTZ0iuRw+PJA+FK7odhSsMkq4YJMm/3nZRKXkzJcEUWE7sI/1V9ND7zX24IxuaNaLNHGzHDm5O/yKco6BHLg=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Well, that depends. If you don't care whether your background work completes or not, then you don't need a durable queue. But if that's the case, why have the background work at all? I'd say in the vast, *vast* majority of the time, a durable queue is necessary for correct operation.","date":"2021-01-09T19:51:18.870Z"},{"_id":"45d425b0-524e-11eb-a19d-2ff5f1adc90f","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+NitoPrograms+%28Nito+Programs%29","replyTo":"","authorEmailEncrypted":"pgJ14UKeIDXaYhHRFXARbzdDFvBhglrNizsLPZSiMRs8wutcKidRrFJYcL6RSrFhUDNMgZf31RFD6bOQtnXVH1+65gpgviRAgFxKNk3b3KBYeQaR9aBXPKY/WTopXqvG+QM5vv8a5ZhJVeyD5u8GSFOAY/rCxfINGlKOAkQ/bKmC93YZcCQo/zpvR5BOQy/OX4PITklpfQ2dP/r3A9cV3RX7bfzGmJ7vbc0Q3pJlr5GA/YznLqgairxfzVVtrO24W3fhdFfDc7/g6pGrQfsApF3HNFnfFv21wYwRwiYghaPU/ohNZsZrhk4zTNbQ22BfuHmHXnhvCb0GXlRQjGDIXCjBCk9BtRWbrVcAhEWjM+UaxRsbV5pZnYDP0vIGOdQwCPLH6ba/P0akbUqjF9+mSnQl3GNspdGd2w8LRgtFXFtJIkW9KTNCEnHhQbn+oy6vwsPPXi5NBpRnJ5HrxVRhxVXZYy/JfPjpuEsqBGQTkDodt80cIipSgpjPBvUoGH9ep3C7ikAhdb5cUrVaV2cJkrIvOTNHlpmpjT9CU398/4shPBqQzI3r+iIpqx2ELAN6QjXekhf1z/IXqOOE2YDo5evXMPpjtjpi4GxL4natgisVMiQvFmwJ7Ql/rC+nywB8/71w7afLEG15Wmp3fUIi8Th+tfOCShHW7HH+0V5EBqo=","authorEmailMD5":"5473de3439038d22891045e7d8984dc7","authorName":"macias","authorUri":"http://przypadkopis.wordpress.com/","message":"Durable queue is not a must, in some cases durability is needed, in some cases it is undesired. Not mentioning that durability increases complexity of the system. As for feedback I again disagree, I have hard time imagining a system which does not require any feedback (even such simplistic as success/failure).","date":"2021-01-09T07:42:50.219Z"},{"_id":"b061c200-535e-11eb-bf9e-8b50c0110c4c","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html","replyTo":"ccad65d0-535a-11eb-bf9e-8b50c0110c4c","authorEmailEncrypted":"dUW2qwjAIEYbLFWY1FYDzOWi7iT56lbFPrXlc5Q0XW01FW2GfV4yGmVAVA1FLuKZT26Looe+96pKgBhKlaQXYn0dwzwV76Ks47+I6sGkYq4/WsR4PY/zVuzKOpewIf5BQemh/LslTKScmExydrWHv65Fk0If2hCZdm854zK+2PwOvHS+rhxfErB2Ll9Jl/toYWQHLFyJ3cVBXUFCHj+HvexTjnptU6qT6fbC5C+4s4jnjhLXHI+utdHGeb+wv2Pel2l1fiYUYeLm7+Ewy6tJFsYaHWSr5XhQ0GE0jjnitlkEpBe/Ib7nCAMvxQO3euF6IjLZn8awu+Psz0ieG1Wpx57BHlmbbqjOFqToq260mLtQDUoOS7tRyuYKnqEyNWeCuOSCSoq70Eb04csY+6HH/+dZKaTh4ASZIqTOYywtGe3YBB+Ap1giOrd6V+yWS5XTlGPCL571Za7inZa//bHTQAQ0OPYIVoiUrGcrZswAQcoCYH2nZoP6WUbyx/w4OTKfIv20xZrwV6ySDA0h3oDC6KMcxpXlH6LsqRt1fGqcsQuK3E9mHirDaMISmoJxfVbpLMKWmpIjNI/RDXoXX85gr3bYqhhJaKYXagzAdR3wUGt05UkkCgGn8ClBUvma7G7ZmzK4PimpNBmDpBCaDPR3LgaVMVGTxKnrEsln0iAzzKk=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"I'll cover durable queues in more detail this week. In my experience, durable queues (especially cloud queues) have great diagnostics support, and rather than backpressure they scale out. What I refer to as a \"durable queue\" is completely different than a websocket or named pipe or any other kind of communications connection.","date":"2021-01-10T16:12:51.836Z"},{"_id":"ccad65d0-535a-11eb-bf9e-8b50c0110c4c","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html","replyTo":"","authorEmailEncrypted":"bJf6/7zPFszmwXllouRLQqUEQm40tgjy+LjDpullajiX30ZQUCpCum3oUq6fjch35JQiiMyB7Km/iov+jTitgwKyX73LI8vmL5qJOJk3ZBxQ+6dIq3grQUrbB0vtJK5Sb6JZMLTk0iC98wPot1FCiEqlTQZoBAUhVXhheZa3K0uAvYUf1mRJ8GeYul1+RQ1KRAeXK8xTbcDAz5bxxUQVCBpOb0PRHauNZB/hZPW2a4xEdXH09k/nEXOiA/l8yeOHWg7Ooj4pnyONlTDgTTZT+SdWOovyzFQMNazjPj4IWu7m0ue/76G30b/g6Ksk8yh/Io0oxUddvyhrPZIKYh/rS+5NOJRtc/KfXFePWSOX6Vs3M3vj6hJPahTImv8m7iBQjKvZIaWnae+7saOTGTiNK7mQInBYGSM/aRbIdBy0HrtGv1TG9pM8Qmj2WJvUMbs5STpmsIvJvL8k+xvZm4eVfDSzlXpMfTQHgfS6UjHKCBrj8av+2JBJjhiGSs/yvof/xTCjUt5ZDN0yBfF5egldTeDD61ADQKK0inhiYrxPYZjAsVcOtIrQYesnmlhV5x2qT6GyXHiF0I9ehivtpme+WVGOt7QiIeCMgf6Mte8AY5gkReLoJ3S6g7oR4QzmnTA0aKpViWC+UvgXVO8sT5nzO6W6h+hvA720xx7DLDCuLaM=","authorEmailMD5":"98ef0371256aeebaa378d1acc31ff4a8","authorName":"Alois Kraus","authorUri":"https://aloiskraus.wordpress.com/","message":"I hate every queuing system from a debugability point of view. It is just so much harder to find out why something has got stuck if async/await is used or additionally a queue is added. \r\nA classic example is e.g. if you send data to Chrome over a websocket faster then the browser can process it, it will run Out of Memory. Everything is async and what is working too slow on the incoming messages is very hard to find out given that Chrome uses several processes to do its work. Any queue without backpressure which is blocking the inflow at some point is problematic.","date":"2021-01-10T15:45:01.427Z"},{"_id":"654ba600-53b3-11eb-bd85-2196157b5b4f","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html?utm_source=csharpdigest&utm_medium=email&utm_campaign=345","replyTo":"db689ae0-53af-11eb-bd85-2196157b5b4f","authorEmailEncrypted":"iKv3eD3JSFzbqB0ZpF7D1ieFgIo5NWL//8ozeI81ZEG1osSj8QECbbjM+dDreQBL+gCV9OVAVXW5vuTaJciCYb9tK2jU7vs0OsYU0dhpf4EWZ/bpvSswMdqIny3V7CIgVAydGp4gBFo42HnRk0R2PNISi95bQBUxwZPo94hNudzLPNiWQtHkm2uZXHy8Rw1yum8qbUTMFYOwycnTLbm2/lWT2HUcWw/dQglNwrLI/AX1v+Lak0mIDXlCD/eF1GW7YpDwZzdDWxUe4i3IEg3WwyItiIJfC2LF5AdWMvbTsydzGKGFW4ghZ44hf+sJ5qt2EXUJpsrAhmU1cQkj7h4t/ceCQaO96raBazC2OYiHUinwhESJN0C/gcqCGdo3i/nrkDSZVhWN8eGIYonK5byG6oOk9ABVtjZmOZM5g/4eRsJNU11o+8+cXmLgX0Vss5XEw/jdNmUD9ITlAn7k3YuK7RYg4gL0qp07qEnhHFz3eNeGnEwqfUKzZ25l8hTNYiIQt17xwLtR+QM2siT2Mub6twpim+l0EzVAaYf1pzNWueDIpSwIyZVFMT8DpuE8h4ywzxBlTABCzCGKv4cnMN153fQT3LFZIEJCROjIosG2jmvlWVFOAzD/uIlYesL8pnEIL2ZeLeV+eo9WjfK1KleiJgV5+BcWyaxQbLW1o1Yp3rw=","authorEmailMD5":"082eadf33c0dff56f01a18db3a64967d","authorName":"Ray Spaeth","authorUri":"","message":"Thank you for the compliment and quick response! IMHO Actor based programming in general...and Akka.NET in particular...solve a number of thorny issues in async distributed systems. The renowned Dr James McCaffrey acknowledged/discussed this here: https://jamesmccaffrey.wordpress.com/2017/12/04/the-akka-net-framework/\r\n\r\nAlso IMHO, the Achilles heal of Akka.NET has been a lack of built-in at-least-once-delivery for out-of-process messages. It wasn't exactly easy to implement but I eventually figured out how to integrate Service Bus Queues with Akka.NET actors as solid mechanism for guaranteed at-least-once-delivery of out-of-process messages. \r\n\r\nIf interested, I'd be most honored to privately collaborate with you and help you expand your understanding of where Actor based programming could really enhance what you're trying to accomplish with this series of posts. I suspect you've got access to my email address from this forum; if not please let me how you'd like to communicate.","date":"2021-01-11T02:19:13.161Z"},{"_id":"a9f55f90-53ad-11eb-bd85-2196157b5b4f","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html?utm_source=csharpdigest&utm_medium=email&utm_campaign=345","replyTo":"","authorEmailEncrypted":"XGIPQyuqgFCZFClJgJl9hTx0uwEmIFogvmBzG0mCY9v5urYKP/yUrRJUcFfoYRi2/QAbNNe0QX5VMaV1+g+rco+iATKrNZ3tVrcTGlq5x9D19GeLzrI0EvHcMIKGjI3WWDnCgYurFmOrA+0aIGaSHLlaDo83gpJG5ug4LS0JZbLt4PaVI3o5bnKNUgZkkVxsrgKDlXJU5BXZZatZz3cplkL5IvTWzbwrr6SqefB8D0tjsso/uURc5lag/4+vFdhHGFOQD9G7S+R49F0VwtHfMVbcD590alpaVZQKtMesgomibNKFvN7zM+OXMzNn1en4s8Z8+LTcu0PWHwDOLhEVuATqQkEzjzByvRhb3nHEiVN8obVrZtLNhMxe8Yn18FUEKK4h6KjVHD8HQyU8tJ+KJ1qB/8HsIFJER/ajtTuIIMHxxAXKl4RLmfu9dnTsTYlmH9+BMVdJm6Q0xJxKxde3hAAa1+ZZBK8XH+v3uJ/gzj+IA+5YaA6nhu6MRjrFWj2bMAPiO8rSBcAmeC449zDxE7SpG38N4Kuv7hdXon2cFnpNVsKcsmqjJjm0xy9TKDJiI5MpsBaySZlTe/uUroAp14gKO56q0/2/bZA+vX2nsfzDbsrnHBCup6ocBY/CO68/Z7zlpR0GO2gx8K9RDI0f3AsUV0eVShxle/E8R/KJyn4=","authorEmailMD5":"082eadf33c0dff56f01a18db3a64967d","authorName":"Ray Spaeth","authorUri":"","message":"Have been using this concept with great success for around 4 years. My implementation puts an Akka.NET Actor in a Mediator role behind the API controllers to interact with the durable queue (I use Service Bus Queues both on-prem and in Azure). The queue listeners/responders in the backend service are also Akka.NET actors. The controllers use Akka.NET's \"Tell\" mechanism for fire & forget; the awaitable \"Ask\" mechanism when a reply is needed. Result is a highly asynchronous, very loosely coupled, messaging based, and extremely performant distributed system that readily scales. That being said, I'm most interested in your further posts on this topic.","date":"2021-01-11T01:38:11.379Z"},{"_id":"db689ae0-53af-11eb-bd85-2196157b5b4f","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html?utm_source=csharpdigest&utm_medium=email&utm_campaign=345","replyTo":"a9f55f90-53ad-11eb-bd85-2196157b5b4f","authorEmailEncrypted":"S3TVJ8ZRTwGRBohhBhNu69GdLDoAQuKJAZaw8TeVOVmbZOqUm+6YzuCjFg5irschReOhg0sB/iAUBNsgq8mcbv66jViw5VEaRkbw7hcSMTrnJdyFUurvj48828p6ctA/X+WAfet4G2NnQUEhgInyG8jIBe/5LaCMoyLEAujN2zvRyLNII9yQrCbeOlT0Q6HqEzU7I/TWn3Kcn+jBtGzQpBoTQ35JnHillcGDwa2R4mrm8gSaP2qhBTkqgkkbn6coBStEzzpRK1Ro+nufa4g69EhMTEtPDpQppXVZY0IN3rxz2svHCoqJqa2el7Pma5MjbbWFZuVPWiyJtEOODyGOnrWVj3ot1mszcUKdaMBVMAvXFrzTgVbSxnE9p6HIaX80Tr/SGdZyzOvbpb6EycplSjnYZO5R89AIgex5Dz6pZueoDkN//+foIJmezkmQUD/ZKj02ftJJ7eyL+TwOpPf7ZmjqnBDwcWrx2Q2Bj4LNPTdTAm9LNCZaZa/Gf9lLAjXL6hONW11YYr3NP9M+ZYxxzyT3HYykDFFs3AI5YpeuRxjE20LYPb5DrfmvrzLBZ9k94AB5W2WQBbcpXZ9VGY84lGSFvz86uKSw7UYagYa7jyu316Mkd9lX+8osNQLtPm8KFG/q4lNVV4YPTZ00brTFrYuy3qorkAY9PgKwQsrFwWs=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"That's a very interesting architecture! I've always been fascinated by Akka.NET (and Orleans), but haven't had much of a chance to play with them.","date":"2021-01-11T01:53:53.364Z"},{"_id":"7bdbbf90-54a8-11eb-b5b0-8154c460b92b","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html","replyTo":"","authorEmailEncrypted":"BmvxEMtp9uGw/f7YrjQDGf72CwvlXec19fo2PGUATC4AYzxj0QNXeqyJV5OQrmRAkotbRcfpTiIQu1FNFWWpT4/7MqVcfOUoL2NrpmQPBHSqKcaIVM55ujfyjpnBtOoRYidnBtST/inJMi6/e+qvtbAPBvN3EC2z24Db0xhm39vNMl55t78ooMZvTT775kHSIp+Cayk1vhh1gPVvQPvwQHO/KjarYnHmfyqMPc0RrOcqFGDBTcVurP/ZC650aBkySmhfCC98qfNNe1g0i/a0UW8XnSKOuSe90MrIWgmy5bvy+2/nOOov20bg8D9bzLWtyd2jOaMVciOESZKfVHCDQdcFCEDjkQCgC/dGt7UkABW9UqpzQwy+EwTjrSeuJRsJNnizErZ2aPJaornUtKSBejl+7M2stJXcje1G5KeOOwzNKJa5PjjIdNZz6DnwIMkZjmgYaDOA7juapfPbjM7O2YeQr0xcuHShpkSus76jDM+emA7cgkuKeuSTugb4FAa+driXBCKax/3WASWSgVp0iqwBofWmixo5Myr4J1GYr9CpiduvasiLRJszs+Agi7F/Y7LZcEeT/4Qu5raKowyOYZFzPOKbEQPQVjd1asbdOJJnyb6NZTN9/U8mmjepoe0vcHAcT0Z9LnmA32bl0enLDEg74ee2u46Iu33zyW7ieT4=","authorEmailMD5":"63ec2f8bc46a7b2f6b84cda58de159e3","authorName":"Oleg Iaremchuk","authorUri":"","message":"I've been using persistence queues for already a couple of years. It is very hard to imagine microservice-based architecture without queues. Having a chain of synchronous calls (HTTP) to multiple services is not resilient and makes it much harder to process high load(one service in the chain can slow down the entire platform) also deployment wise - it is soooo much easier to deploy service when it reads from the queue (Cancellation tokens + nacking the messages). Yes, it isn't a silver bullet, if you need a response - you need to use HTTP (or webhook/callback as an option if the processing of the request takes too long). Great article, looking forward to the next chapter!","date":"2021-01-12T07:33:37.817Z"},{"_id":"56355320-5744-11eb-8328-5fc6dd106934","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+NitoPrograms+%28Nito+Programs%29","replyTo":"7a926f80-5741-11eb-8328-5fc6dd106934","authorEmailEncrypted":"C76k4GqfRTX2hYcYeAPfBCD5PSQrE+T/hjsD5rWAWMRU8h3AOi4KeFqgqwNFEdXjA1IR2YMtTMjyHm0sjnjb7u5STU1cBWyrsPRQSuf3oepnpGFfcBN+Oa0ipfovcWeSGhyvDBLzdoNNsIbpb9r61hzLU7TDwR+JSi1kgpaxuqOL+JdhuqYRHIE0Jl1ypeOPQdMvady/foGrYby/8cCgfcpq5oWkRrLLflVLec10ab+5Lo9Kmrvp9/sCzweLlcjfFb7ODa/WlqmF1su1UpzBeqF2VYIpATEeJTvNCwYwVqK5CPL8GXaXeKVmEUROsXEffcp2+VgAEgyHpqdCwXHPFYJCVE1GiUlL4YjQQ4hv3Xj9nCCkdZ6jz9pk1tRLZMLzuOfLUHy6pyhyDeRdexGX8wl8qmFOyKTzCma33+ERO8HXhuhb1l4P4wbDRsj8/CXOjiDu9mk7IZlOoWRbtrd3G2Vc7lRICdQqf/zfWP0m9MlaO5JTE3fZ2d/8Ezwnxh+LE1cRIIDFZgyhHyOmi/+7xQYkxSEn5vP3QWNwfutV3Q4FYZzLct8jmit1MWXxrxltynH5E1XOCKU/xHPZfWaG83NbtMRYvR/uLR6adBjeNzHDkD26QyS0Q98mFM2eZyUJm4o5FPIzH5tgdTSY8v3gXxi3T1q/xWQthUDb063LDAk=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"I'm sticking with \"vast\" in the sense of \">99% of the time\". Software used in life-and-death situations sometimes requires a different approach. *Sometimes*; e.g., the requirements could include a Mutual Assured Destruction policy.\r\n\r\nConsider the client's perspective. They send a request and then get a non-error response. It is reasonable for the client to conclude that the operation will be attempted. Perhaps delayed a second or two if it happens to be in the middle of a rolling upgrade or something, but in the >99% case, the client has a reasonable expectation that the operation will be attempted based on a non-error response. Without durable queues, the client cannot make that assumption; it is entirely possible that the client makes a request, receives a non-error response, and then the requested operation is never even attempted. It just disappears.","date":"2021-01-15T15:14:18.782Z"},{"_id":"7a926f80-5741-11eb-8328-5fc6dd106934","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+NitoPrograms+%28Nito+Programs%29","replyTo":"0a2e27c0-52b4-11eb-961a-cf4f84f65490","authorEmailEncrypted":"qGZC+fR+SG3XXwVGaTirl+3Ww73rizfyHo6cCZdhnv5Hn+7N6Zmo8Z02otQ2uwtOqOHQvIqtgsE3qAIwvpROxBDxZWRq0EeFvFaoMJfrdyex+Fe/c6v2/3BMHCVilzx6BUY/R2cJR6ZLnAL73fpfawBPN61utMmjrwOcK9YGqnic/bqssV1YulRX2JMBqL+gt8o1aNBhdZb2A+ytjnQsQ3llBuLM3SLkuDy1cvgrfwYpiikaH5biHXyHWSBc0EVW6W0vtGr2US2sxLzawdtvKI3dQvsEXPaDVn1aWvPZKzHeK/lrdXSUQCTNem6fzzSR33z/JCEr2E7maf8xilcCkcpnihSyYobPgJHhbbU49ivu4wbqlfiXD5jtPOm0JUm+t4LMHY5QtOiX3YhReR8aQID5EpmKSr/ZdQ3ZrgfPmMXq4u3ZbTP2eZOCJO09131T1ZIxxTfdgRF/ADQ7R/dCzsHswSiTKjZR+UIA38k4bhZGMbLcJGqdkNU+PcFRLmIXEP8+M22P16qXgARJ2WAk3YH6J0OILMTvqTXEBkkxpluPAkbY/2jcCteiasGM1+TNeJZpAUJ+Of+RHQf+HW2a1kVILnz8PcV65SUShrMU99V5aS7bk1ZKI4T/UQnYLTGxJRmDL0yPf5phSnoqlqavUuLkHwzlsB87YYjGFdQJXKM=","authorEmailMD5":"5473de3439038d22891045e7d8984dc7","authorName":"macias","authorUri":"http://przypadkopis.wordpress.com/","message":"I don't know about \"vast\" or not, but it seriously depends. Say you want a fire a missile, I bet you don't want a queue to resume all the jobs automatically just because the system is back operational. I do care about the outcome but only in live system, on every crash, interruption, or the only job performed automatically on resume should be \"reset\"/\"default\".","date":"2021-01-15T14:53:51.067Z"},{"_id":"7a1024a0-5848-11eb-ab1c-c5d301f9f852","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html?utm_medium","replyTo":"","authorEmailEncrypted":"S50j4Bi2thAodNZWC1X5e2uzR32WvlMlYkV1cx37UcRhCGCfNVqvL3tIxXn6Y3NXDf2YVdnSuu7q8Y4BnL2M8ss/gKecF/nBe+91FjseYy3Xw8OFaTCxox6xAehji5noUZFfbECtmp3mZZFhnsrwlOvVo+wSKsuiv4lLZTvfeCUJ96XM53z+NzbfoXXv3nWyd1+47PYKhpziHFBGKJ0AkvM2HkPGvK8jWQ2fzoIqjTPgZxU6oih9v++cHtaRhVX8VklFf/glQtwZui2uH4nNuy/ZeFbnCLUS9p8dbtcFrCi5tP3z+uqc2slyRlyOzCWrty4GGhrrwz/oOzlEFRMVp/Gvon7S5NylfPvC9qQmJcvaXPlJErCZ3uXOTRQxmjFQNCiFQSMn7BzmnvZkCEFeX54jiP2bLYAQThctpJGQj5mkvSmT/tMkBTerGjV7Ceq2Mxe8Xd69l2MB9ePVYPheDJ2cBB1NXp0LDiFuxMdIDerUuXAzuu6LMGhE8aWTKjmWnZYrhl3vvmTD9ABMAtS8ABkjRvSxOFJdmHI4R1bA8tunZC+rVq4J08zWNsfqMCaoam94Kr6A5kmwsDJoORddPW8SoSNd2ocXAFamFTRenVtK+ST9iD8/xOVf65aLYgJQFrG1xecQIWRNArpMpIq/T8HY22pIJ57YB+j9zKwEKKY=","authorEmailMD5":"b611b9f0d807cf39e24fbe472756aeb8","authorName":"lukas","authorUri":"","message":"Its a classic solution - https://www.youtube.com/watch?v=AhcFZ8LzKJ8","date":"2021-01-16T22:16:27.637Z"},{"_id":"38d55280-61a3-11eb-951e-797bff66f24a","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html","replyTo":"c77b5a60-619a-11eb-972a-29dede965fab","authorEmailEncrypted":"RU4BknGmQQRiZBeo5ZJJrELbGW4DTWFtBEl66So2vre+KGUeoDFpbQbCL2GVeAAMcw6eu9nAj4pXb+aJQh6B+M7A/T6e4ug2w/vNABr8eeuSvDquhBziBvvZ6XOBbkpwkaEwiRJCKLbxtW7yGh4z42KK2UvuvW4L9gzCFaMmXLZHALvqHj4pvjbqxBF7LrdSjpYkmZJR+oMVusJc0BcJh+y42n4QtrtWternxpAbY/uteUnJS3DlxyxkaI7AOJsi//VUgC4ku1xhRbcKMvEVN0Fqu8ZmgtdBixHMMTy9qvPkNRXhV1omTcmIAWG8sPq1SVNvSyrTU2mOljilI3OiWCS5YyQhq1AIvIeAKwJvpZ7SN2lkSUqb08I6BNGXB+aXE2igKMwV2Ree1vWB1TibAV8+509vt9JzryC2djDUBvwjgYhlAXs169ZctfXb8J/kjSte5xB8CPFsZYiHI9g7FpU5JaE20QkMI64tAlQcFgfZ9qQF89ttLXxxxZfVOw8JyqrL9YZLOaiguKSTdHujxUt8g/3EKGg1C/ZU5/7NYA0gBZL1vmpDc1O00fp44z43R5An1IdlIL5MNGUtJczdV7VQ/AVzjPg1M3y6GfbeUjyV4hdId19iny2dEr0UDSwpeKYQtgYe5Mml7Yu/q8VXnZqV+SRT4IeirFRqdQskmDw=","authorEmailMD5":"44c8925e7622641fcbf73c0d0c23672b","authorName":"Josh Noe","authorUri":"","message":"My mistake, new article! Nice!\r\n\r\nAn example where lost operations might be OK: An app that notifies (ex. emails) someone on certain updates. If recieving the update notification is not critical, more a \"nice to have\", and frequent, consistent updates are expected, then a lost notification here and there might be an acceptable trade-off compared to the cost of implementing a durable queue.","date":"2021-01-28T19:58:42.832Z"},{"_id":"4dfd9a30-6191-11eb-92ef-4b8983b0b403","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Josh Noe","authorUri":"","message":"Don't be scared off by the author's gospel that fire and forget isn't what you want 99% of the time. If your use-case can handle the occaisional \"lost\" operation due to server restarts etc, then firing and forgetting is perfectly fine, and much simpler than using queues etc.\r\n\r\nI understand this is an old article, but it's linked from a few highly-viewd SO questions, so just want to clear things up.","date":"2021-01-28T17:50:27.471Z"},{"_id":"c77b5a60-619a-11eb-972a-29dede965fab","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html","replyTo":"4dfd9a30-6191-11eb-92ef-4b8983b0b403","authorEmailEncrypted":"iXuK1qLITaUKvpQItgJulJsc9MzRNpJQoy43pPAzPZbGzSlmqsrMUnTpj/J8nZ+9OUjadpxdbAcfuekC8x+BiFjzEuWJiSIhQpKyUKul3B7V7Bo37OE8n2sb/GDhxhPtqSn+OKQ5FMxtPA5ArgrPICUAhsZgJHLBi/TxPi4CjtEiriYSo8sEb6si+kXjR7vX+DmngLsUCTIfSGug6Yeov78NqwUqHpqnIzfv7d7KtFIbALwhbSQOeSYZ55Ds45BL2P1O9YSHx85IvOSw8K/0IG9acoYAayqpZ922wUL9BL7raBKtDiT8G0hBZQvcbmlU1RwWpyV++dBCQCuo1shaHmdk8lrN50gt6fHyyWa9m8wbsJC2nRU2QBr8xcsQ24etjKuba+FzQXzkT4XZ6kO91NpqnD5xru9hfjjDvYyXl1C/kHMoG0aDDNyyJplamhXCeLoOu8F9BIIdVnDvDZNJn7pv26puY/7rGjuy7VzmKcTl0jArpVALV3pQfZMnLDn2bNc21yaq64YKYIaU0E0lhLNZb4XPS+e0ryJ0x1atrrBz3z3njk4JzAwI8pD7qEEjDLUvk1HI6MgbzXTA4EmhAfs2bLcBbWsUV3CZrumBM3Tyb+Sl9B7YewjBa/M6wCg3bOwf1MGyD3Auho47hoslvbZTjVm5c/XLcQrfvlyHuHA=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"This is true (except for being an old article ;).\r\n\r\nIf you are fine with your operations being lost without any logs or anything, then you don't need a reliable architecture.\r\n\r\nI've almost never been in that situation, though. Perhaps that's just a result of the kinds of systems I've worked on; almost every one carries an expectation that when a user requests work to be done, then that work will be done.","date":"2021-01-28T18:58:16.755Z"},{"_id":"bc77a7a0-7323-11eb-bc4d-fd2413c20b1c","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html","replyTo":"","authorEmailEncrypted":"d1Ft+pmVvt0Uk7W/3HaONlXVganCmICvl0zzf4V/aZGPamrMV608Evg5PhnDV1AczJj0b1ja86R8JNt/w5FFreMi5l27wnNXVt+0FKJoWq77/krWl0/Ucz9mHfkfA8aLg1U7+q5kF0f8FlaB4L/9UyS8Thsf8VUyyJnqyxjnNH4/Ftg9ij63sCAfhdV1B+Hl7sysk5GenIvgDNoagpJ3wzz24EU/KNvdep5P22mECX8qp5vMXxeBW7fOdVDeamSGz1iwLEqe0F1K0fZ4FFLDyP3cSxi3Q6zqQBGBshTJkOE73B+N5oEDrwGrG48wBdK+PWvQolUV/gQ4qgndKOvFM+gpt9+imFcHSPcWZ4n3jXZbSPJWwnAa38nzjNqbwTAEfIKIJrX55xhzY5U2hrot9To/GXCm1mZEVD4EJpc7F5WnniKMKD1jhxaPzll+QXzy+YdTcHo+oLRrL7D0B5jIAwULi9Bx/GmaaMIJROXzTm4NB7cbwUFMjbeFzv5dM+F/t9HOhdxdflXlYjDgTKcoE2ldfsVcPxZoIouIxcSknLUr+omaagWq0Nq779+tt2uTPKK3MQRz1kzcS/LmpXIV+xLz50DHlyrom6neu49SqEkBuYq9u+rKfsmq/ZL+mJAfk2i4lT/tHP9w7rNzkmJHg3G2Sdzc/p/ImOufxMRPwKc=","authorEmailMD5":"47611b7d2c7233e221eb7d3b5e558097","authorName":"Rick P","authorUri":"","message":"Ideal timing given that I have started to dive into these issues at work. We're following the same general route, so I'm interested to see where these posts go and what we may not have considered.","date":"2021-02-20T02:31:29.164Z"},{"_id":"7d492410-9226-11eb-b03a-e56aab08c53d","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html","replyTo":"","authorEmailEncrypted":"MleJmBwwzaC+SRC9NfEBIapEsUnK/OtWFSQW5r1RRYM2B16h7/W0vZGf6ltVbL2x2Q6tKF49k/W1yECuOTf8iE8AIV11W05dclmENAz8A5LmrARzrukvVWSZ865nooDdLZlbyx18pFj718czeFySKzRYDWRBmyVcGhGdoZWQ0NAnX7VgiTearpGsZPrWk3jWPBLlA8FvdLkQl7IgcdLGoc5Bph+U1N5ijhVc73TU//TTs8U8R5gxnPvPPbUZHzn+d5cvUnWHL3BwGdXsY3C1uc7Q+vOv877dwklcxn8CsSPlUgyUjGrlss6ukYAqpgqobzmUnsd9me122hZpHri+6LgMgTbgq1HQn1Dez1ATWIbtDa7UlWjtgGg7EZxg0IemphvDuletlZqLSYCBZsNkT4J9FrKkNJWIE2ehRLje1sYk8y/7uijFG3tV1I/C3Zo6d6Jubl/8vhp0RBsADMsEiC04m/QLjzNms+KFbcgym5IlZaU4dQUqEgz55Sgd5CjJbvH1ffbSUzDnYEoFo+Mdj7Xbbm5+SYKOx0eWH1rReLqujV8zbqSWsefO4zqykcd39sAR6cv1OgEOVngRUY7V68H2Zk7NWNheinbbJdgjId6680ChUwP6F8W8Ta0fBJGE6V6tyIvnQj2PY+mle3qBjeKcHzr7HArMg24qw9Wyp3c=","authorEmailMD5":"61fd8ecaec126e7e599021e3c6775a8e","authorName":"Ariel","authorUri":"","message":"Hi Stephen, I'm inside a problem and I would like to know if you can help me. I'm new in async messages so I really don't understand how to implement it. My application is running in ASP.NET Framework 4.5.\r\n\r\nI receive notificacions from a service. That notification calls to my \"MyMethod\" passing a json.\r\n\r\nThis is my current method:\r\npublic HttpStatusCodeResult MyMethod()\r\n        {\r\n            try\r\n            {\r\n                StreamReader stream = new StreamReader(Request.InputStream);\r\n                json = stream.ReadToEnd();\r\n                Object myObject = new JavaScriptSerializer().Deserialize<Object>(json);\r\n\r\n                bool result = HERE I DO SOMETHING THAT RETURNS TRUE OR FALSE\r\n                if (result)\r\n                     return new HttpStatusCodeResult((int)HttpStatusCode.OK);\r\n\r\n                    return new HttpStatusCodeResult((int)HttpStatusCode.InternalServerError);\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                return new HttpStatusCodeResult((int)HttpStatusCode.InternalServerError);\r\n            }\r\n        }\r\n\r\nWhat's the problem? That services requires the HTTP CODE response in less than 500ms. Now, the \"HERE I DO SOMETHING THAT RETURNS TRUE OR FALSE\" takes more than 500ms (it takes between 700 and 2000ms generally).\r\n\r\nWhat I need? Return the HTTP CODE before and then process my logic.\r\n\r\nCould you give me some code example to know how to implement async messaging (if it's the best solution)?\r\n\r\nI would appreciate your help.\r\n\r\nThanks!\r\n\r\nAriel","date":"2021-03-31T13:39:18.261Z"},{"_id":"1e0ea900-d8f0-11eb-b968-d76a3395ed13","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html","replyTo":"7d492410-9226-11eb-b03a-e56aab08c53d","authorEmailEncrypted":"mLejrkqIG8bdb2ZMBc3mTX5rRkAZ9YsRZyQ9qPhTF8iZFOc5aaraIWzJENoqC9i6dMnPjuox+3eVnrYGfECKN90gdjYDaKFW+NZMZ8P6fIJJF/9hSceG3KPU847YP3MRT4eN871TdvYr+tNZMYh11+uR7OQAzexB5vDJ8L5cWgJUA6FX1ZWqRiTSo1L4DiVYnWRBSvOjZkKFel0ENIaYoSGICO0FYgzA7I/k4OE5UQAsQ7oweuZtdK7ygjr4BImAHEJsi2uzKTCpUw6ZBgpoQA8q8H1BotVeI0TLLAApSjZE4/vs46E87kEvIAbGGBsxyDEy1OZ5vtaltCfFVl59RosK+d/jwIy1FmC/4plMAjV3358AfQ7hG2vaRSNKQaXWekFRTBsTbos69+zIB+Qih9WcY+CVQPNB1ZNVvr413QC/e/eLR5DInvSbZWFzhMV243eq0CbEn9g7KincrHrGPSMRIsqE0Mt2WEeAlKMd2SES+zvss/FbdC4VT4gmkI9xz02zOuzf0CdFnj4BX+yQ3dGzdAZhyXteScMpaV637DjT7hLxg9TyX2xj5mullXbQxQ+YLbOq1RahnGJzcyR0aFytZm1T5L70P4/5Rgoox+OF23rHP0DnwlTKNyH/AfnQfpydknpxEcV5S8ikn+uLJoo1fo6WooPp0SwJ+d2Lxe8=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Hi Ariel,\r\n\r\nWhat you're attempting to do is impossible. Your code will get the boolean result in say 1000ms, and it will determine the response code based on that result *after* that time, but it must return a response code in 500ms. It's quite clear this is impossible unless the web server can travel back in time.\r\n\r\nYou could return a different response code, e.g., `202 Accepted` and use a basic distributed architecture. See the other blog posts in this series for details.\r\n\r\nHope this helps!","date":"2021-06-29T15:38:58.157Z"},{"_id":"2406c640-9424-11ec-9179-d1e8d91d0c37","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html","replyTo":"","authorEmailEncrypted":"f7pKF9m0WjFuAj0UhkvUTkWVHNVN1JQx8Qp9+4xVAP3xHfu/fuCh+pTCGSAZYuXqfld2B3WXCg8MgqNU0CDSuqyC7Ez+QBZBnF7IPcl4a9U8jODqHFqmzZ8ZPvp/oo4xL1xN9ZNL9MqiblLSZ5fJodoP9RefHBWZz3fEBibf3voctJ+fa2nPihLRWUlmGGAC1Y3jGRuBP+wdZXXzvtb6BEyg+rMeidsPllV3g6dU+l57R+9DosZRd+Kl4PUiPyP3Zu/4LjM4iVKD4KZsDoI50z0WLxY+pQ03bieubfZgM5MZBjWaDmUESIzorKNfZDFa0AN3/T9kLI+Vz2jdvmhutxkAbIsIEGNY4WXYbXqAjHEpsWDKE5y5OA+U921s8WOmoGEdNMJPeRyJXyMcRawUnB2/Bb54EJtac2e/qrIW0G9W68sEVd5BqHX0N90S9XxdqH9JS69A5vQ+gkgmlJWcYAxOdGuSJnC7Ycm4bMUBeg7+VOPlP4sqmCfTm1dmsVpk/73HfPrvPHMnuLeHHTZRcF3jja1fjjXLNU1tB5YdW5qVPyD5kxPXPUUNW1KhZXn2VWd377LG8UxBOfwZ0qHcGN45spmevMWXqgFizsN7Kx4faDHsHiWA5T0YYaKWydxQw7NHO/42mQ49WAXdTe4uVFGKRqXgK43kYi3dBmFyTmY=","authorEmailMD5":"ee833101b4abc6cabdc63fae893f0182","authorName":"Ivalberto","authorUri":"","message":"Hi Stephen, I have a big dude ... I have an async task in my controller, I receive an audio file, saving in blob storage, and after that, I need to process the audio with conversation transcription services from azure, I return a HTTP code 200 if saving the audio is correctly and creating a new task to send the audio stream to azure services? Can you suggest an approach for this ?","date":"2022-02-22T21:12:28.762Z"},{"_id":"65dd9ed0-aa19-11ec-b52a-eb0d8ec9ea52","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html","replyTo":"2406c640-9424-11ec-9179-d1e8d91d0c37","authorEmailEncrypted":"MNOqjnWiZTb3qBP8LYG897jugQvzB/CznWohK4B0Fn7HwinfzR+CVjVlj66YfZW0xk0cI8VpLBsCQrYfxIVL/ubkP32MojETsYDCwakywVhIlC/76AS8yfNTpE93Xjj8zds85pSfyfZRsA1M9pLBUIDv00u6QgpIWczbGrpxxVC9CJ4XIy4uDH8s4ewWzKgaJUzlyHvV8/YBTHIyP/8U04waBy3aleXY44XjBKq5OAOq0wR7ybGwayLvOo3ZuIgLFVhUuUTXnDWyH6USzmGOX2Vy4O3HyOQwiYB49PRqHZQdWE51s+uLloR04D9yjyiuANlEDoz11FdSN6ZxEy/pRbmqKzCQ4fu2RmM2a81rYXwtk9C6BaOtdkf6rGa4vRMPaz4WpwxDGMmnlwrmuvLfzbKp9RXdfpV2dSpnHQs3ZzKeO76v2uInF7LxbB8wlq88cTJrIbsgRsOtjK+FvNwjXO7YHt5slsgWIoweTwutdxGeQeGY37mXQ0tjKlJgHI35tM8dQVQHjnGOi2LtBXWtXn7MiYFql44viF+Q+Xgtm3dBC9ZVgSaoHvXKzwYZQbwPhqHGjuFxWBAoGsYUsthLXHm96cU/XtN9tTwSoT806V7fnOKIMLJx1KU1s46kPnq5qTSdY7k8X8UQJizpSN5APMkbJx5SCZySBYTF3wwKgMk=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"It sounds like instead of creating a new task, you should be putting a request in a durable queue, and having a backend processor send the audio stream to Azure.","date":"2022-03-22T19:51:00.338Z"},{"_id":"236ed080-d716-11ec-9200-6b5018082027","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html","replyTo":"","authorEmailEncrypted":"DdTm+Om//2Qih3pPoRleaIJeqCN9huKrzvC6HhIRpZs5HQke8N/uolMS2bz7Pt7GFhqF1BYPOXhQSdvl1cagE/1EuCBASq0moacWTVJJbbgAjMkVZ4sEyGNfV0odph13Xjg/58G6od+2eFb8ydTFEFKkEG99vjP3eV1ascJOl8jLf5I7+A+9JX8b//gXvB1Hde4ovwIXw/WGj5C1+hg+jvNsGMFN/8O0a2s6SUX4jsV9MTcuPeEhW5Lg2Xe7+BLwPVwT9JKhTBHsu3Uq+MW/U/qnb91IxWSuhFBzA+RsicphyzFrtzHe7KEIIFBrmbpGeFGSx+SeCna2BfaU8fUaJChNhTs7zUFnr9nF6ZN2hwopi/FuHkwbJtErk1FkAw9pbxKs1weYoFLweS34DdfZXb6J9wtrGPsH6z6KKJ+4EtCiASOJscv6zoHt+h7SuH2PEu/OGKeIxxn0uY4V8t03te9wKUfWb9XApyzeodzUaDlvYCwF0o+2TAVUBD907vsBn4rN+5Ndnh5CXGIuy6eycXWwKMmLH2rduRK68x3L23qz/AwZPAwv+EZjICAvxEJDq4P2DFgJ1Orw4ChC0BSVb1jxnND25VFM+Jx+NwB06bc9JV/B5cYqG9F+jvhBynUtWjSrI3z/VVjtZxYYgXOgcCnOZb0tFJnJ5II1OpImRqU=","authorEmailMD5":"3105e7844ad4c9fb7a728c3b1370ecc2","authorName":"masakazu ohashi","authorUri":"https://docs.microsoft.com/en-us/answers/questions/846530/sharepoint%20%20%20%20%20%20%20%20%20%20%20%20web%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.html","message":"こんにちは。スティーブン。\r\n\r\n私はASP.NET、Sharepointの初心者です。\r\nC#の開発は5年あります。\r\n現在、sharepointdesignerで作成したサイトページに\r\nWebユーザーコントロール（C#）を貼り付けたページがあり、\r\nボタンをクリックした際に同期処理が動き、\r\nそれが3時間かかっています。\r\nクラウドサービスのALBの最大タイムアウトが1時間までしか設定できず、\r\nボタンをクリックした際に非同期処理で、30分に1回、ALBにpingを投げる処理をボタンクリックイベントにc#に追加しました。\r\n実際に動かしてみると、sharepointでasync属性の設定が必要であるとエラーになり、サイトページにasync属性を追加しましたが、\r\nそうすると別のエラーが出てしまいます。\r\nMicrosoftサポートに問い合わせをしたら、sharepointのサイトページでは、async属性は非対応であり、アプリケーションページを作成すればできると言われましたが、\r\n私はsharepoint初心者であり、ASP.NET初心者でもあるため、\r\nアプリケーションページでの書き方がわかりません。\r\nどのように書いたら良いか教えて頂けませんか？","date":"2022-05-19T01:51:02.741Z"},{"_id":"ced5d450-ffbb-11ec-8278-c132177ae00a","postId":"2021_01_asynchronous-messaging-1-basic-distributed-architecture-7a2e5de8-b7aa-36d3-b1f0-bffca77b29b7","postUri":"https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html","replyTo":"236ed080-d716-11ec-9200-6b5018082027","authorEmailEncrypted":"VvGi3f6lxBfEj47zLNxRDg7GVF8ND7XJJOH0MePTW1AdjghswEP71v9ZRSSlu/7IwkzH4Z1wGUOTXRh5ymEILl6VJCNUeTH1c09Nqwoft8Rjj06vEEvLBprNypYqxpdo9sKNoOUK4dXELwHhO0xUpiU3wcavv6CjwzOF8oS8bSRN1XLXrco5Cu+uBr4xB1HrpxOtqpJyJ5AsnHXoonfGJcVw4kUQZKmKcDnc07phJiVuAESRfX4YaKmhdB3LiTkDp+ljycTB6DMpTeyLcP8MTnXS7zj+ZGJnNKg7xB3LIhlhaWerMcuDm3e/gPzCJ9rjXHkO+nuZhenRZj6o3ARmDf7WaoVzgF70IvLnTi1swebPpFFb8AJKxv7uuEZvJsa5O6J3KqqyQchlxaA5bxEMbGeekhUs2+fwYsebVtfqTUPV3+HVvc7ITzcouj6VLosJ/6STq8WxEzgBECXCe5GxGf0RBeR10o8WC0Px1KR/GEGCfdlCSgUudA8waCVGJL/v8tEb6gK6qO+yZ5no/QUsog5ifjk9sez32TYd0BPih5LufwwQ2GFTE3LBooGD8o4qVLU/0X2LYygBAQ7+t8XjCUSV5qMmEEOEu8ejNf6Vdx9DMmC1yV+N0/5CV6hlr0BQUgKgPv+Ik3UaoMpeFj691lheLuEnKAnjH1EjCEHViCM=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"> Hello. Steven. I'm new to ASP.NET , Sharepoint. C # has been in development for 5 years. Currently, I have a page with web user control (C #) pasted on a site page created by sharepoint designer, and when I click the button, the synchronization process works and it takes 3 hours. The maximum timeout of ALB of cloud service can be set only up to 1 hour, and the process of throwing a ping to ALB once every 30 minutes by asynchronous processing when the button is clicked has been added to c # in the button click event. When I actually run it, I get an error when sharepoint needs to set the async attribute, and I added the async attribute to the site page, but then I get another error. When I contacted Microsoft support, I was told that the sharepoint site page doesn't support the async attribute and I can do it by creating an application page, but I'm new to sharepoint and I'm also new to ASP.NET . I don't know how to write it on the application page. Can you tell me how to write it?\r\n\r\nI'm afraid I don't have any experience with SharePoint. But in general, `async` isn't going to help you if you have a 3 hour web request. You'll need to queue up the work into some kind of durable queue and then process it later. I'm not sure of the best way to do this with SharePoint/ALB, sorry.","date":"2022-07-09T19:17:43.707Z"}]