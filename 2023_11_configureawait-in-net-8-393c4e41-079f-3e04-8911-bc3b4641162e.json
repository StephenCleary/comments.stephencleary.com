[{"_id":"3b9d5f2f-5afc-4233-816e-7c9603c77604","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"e3843946-f761-434b-a0e1-a0a517027b30","authorEmailEncrypted":"RxroSKq5qBUbN/ldfC5mlckyZedrjiQrvLWPt3HFKCY2hkeVDPKZEzhvjnbRZOTJ2GMriwP4+AUuyxhVGtSMhxzXB5n8Qwg19qfthTQsF6FFtGt6rhl2HKghtnhv9iNOd/r2t2XzLXfZ4SqOPbstaBpnFz/teTbI1DNWJVDoMaxahHBGQ1Kiq5IdBeLLJC9AdhTBXL76MBisYzSdwkWthMh92q/DjNtOVi0R4+td2c0WmVeKfw68YcHycExdg02WJ06wbUbj9iY9wgx0dbYzLAJdMs68HOkqM5g5SfzKb0twdGhxp+XpOAMQkZsOiX0qR871zSGnH3/U5zqjTimLqW0ME/PUr+Ax8xlaXEvGCQUSASN/aOTOuUobfxltRbRaGKf3t6TXu4ShZu82NYZl8VfdWOwE5gk00oKHm52+gambuitpjsH3kLweSnAd2Oq5Tlk/D95KrxCDsEHu/FT068w3Tj951r6poOGpirCtOR1MxV+/X0CTdemKh8xZXWMHlJguRiqq9zrQYBe/XbmYrt+xwE2B4mZuJ7gAKLn3BGo8eo85iHgi/E318X7JsK7KtTxS1YSEyO9KNUFMFJkGwZxCc5nts26248ltqJlCUm/65kdRB+HFqOXa4XG9CxAk0gmtWoA18KMKhoJ+sNmBktEpZNVOj+IEDwgNFvsdcnM=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Glad it was helpful!","date":"2023-11-09T21:05:06.1830936Z"},{"_id":"e3843946-f761-434b-a0e1-a0a517027b30","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"","authorEmailEncrypted":"VWWH48QS7ojEVpnvP+89lkjNxGY0RlU3QDcsRLUWLqTCSQjCaASM5CA2cdH+i3qZUazWQiyKZD/TwEHsJWMmgLcS5t/7xoSYNuny/FC0rFBbjBuvjO+OMk6ncp943hByxQCvqTnqnS42GsBd/Xhu7KywYHXFPkKTJFWrHxGd7/mPqC5d3biPoJKvgLaDrlDEt+tS4gNTiIqTc2A0+MvmdsbI4L+bbIv5TQnZJFxEz/7GIKpAklVNj9Hxph7fT8FE0ftyeztzgmPV3vOulIeeM//6rshF9ffTIiZVLG/QeTzpAHbw9WhSRfQFhKNQ53KD+E1AK08mkmYl+J6rwT7JX7fX1yeoeJJGTENyU7FeIrzN5+XC0JZOsxz96x1d7D6gAGg4WoKmrubPYkGcLeVRRlXvWqqAgjDM56l6gDE7BaFjxQKEWSfOk7FMsegiAZVfu8KdTgEh4XgIco4BUBMx35wvnhdhGnzACj5vPg2DaOhLi1vhROlfzS45MTAQNd1vESUfQzSGAzmlcBrapzfUVX/HLllIanZ8SLOgi69qtK9AmuAw7Lf+fRTniPEEq1Qlqd11+zIKqyZEpC7fOoq0Y5AWbMP17JbJEqoJfrEJW7hkshS9weLiYE9yvTwHmlGxpQRMVJ8vdbWgp15bPlCKOOWIBaQuhgc5ttyczThVmYc=","authorEmailMD5":"b362c65335b82eb7c75eb7cebb34f0af","authorName":"Ogxd","authorUri":"","message":"Thanks for this once again amazing article. Plenty of stuff to play with ðŸ˜€","date":"2023-11-09T19:49:15.5686689Z"},{"_id":"96f8b99b-cc2f-4758-8e99-bd483304ee45","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"","authorEmailEncrypted":"h6yQkDd7CEqBtVTzQZBa9IbWy/zDh/JMmQYv9np8aUqlQkPfVdYkaL/kdqk+DIXLEsQrbDETMiZjlSMd1wJxsL62W+AlBAvRZ6AbNFpt+Sz1eZCd/tkp5eP2zPN0WzhABM9mHuOTVa9tlrNBd5Tfi1nJIoDslEJL5qocuwm1vMbcWAaagoKaXqUh0nxQw+MzpEIWcZVBL4MLmebIqh464mytwCpUDWCyE542OiUACS1hKyfYYyC5UizEGUHGia0FitabMTcbNDCCBWbFltT0p1csdMkg2rIP7SyXEohwHMD6h9zPO/ZyxJfSzCioceeRnfeqfjQ6Y2LEeGtsIH+hhcV2dyEl70izbHlOXmn2jL/6e8lTWtVE3c7GsujjGzPJJlC45uLItTdrPu6+tBE98X7JL3VMccbN3Dh3vNpavFUkCyE4XGaRUKTNXkT53fS0Rmqs76gYWxFAi/cNXbxheo8QplPNpg2TBNxV1F1t8B18VGhAT+uvhJLhligfGhPV03OdZm6Oy+wyZUGUIUb2PmuaH77EIzzIMv4HXqx+Clk/ssTK5JjrCuCLnO+EWOCtyy6MQTPBlFrLywojlANltCoLRem7wvcXchRU0OwDXNABVngrKc9WKfs+RV/t5iqardYJwuG+ceBu516wOxnb8WtOT1DQkNjlkjxxT6ZVGn8=","authorEmailMD5":"2a32f6e00b7e996955044363ca05abfc","authorName":"Ozan","authorUri":"","message":"I wasn't even aware of ConfigureAwait until I turned all code analyzers in .Net and checked the warnings.\nIt was recommending to set ConfigureAwait almost in every call :)\nAlways interesting to read your deep diving technical covers, thank you for sharing! :)","date":"2023-11-11T03:16:45.6570150Z"},{"_id":"7008d2b8-5c5e-4ec4-9ea5-deb61dabad2b","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"","authorEmailEncrypted":"m77LIy/VPWhsXobuSTEpszEYPIlrTL6g9fWVOi1TCCN8V35Q+Foe5Xx6WOM5AAvJJ/R6HoirBQaDoictzF4hPVQMfDMBfvnfR/ZLYYTQMopmXzPofrm8gp2kyJwvKIxNgi0N0Q1SooaFdZKkDhD4w1mqiZAgEBKA+cu1NmnTZIr0+prXnrDkcTJY6QqOMFhNMBATjaUOj4g6MImAOo3m97A3xqH/otSwMtt1U4/OkBR+sE2OyqMr7LmSFjWtbbnNxkJg8LS1CIiJfQonLgNmkE9mgzOqvrQ8EBAKOpnIbPgV/4hPOrgvCAoRQ43KM/Pxy8oEQIpJRnHlsFiddrYejIy//3BkdhZNc9DTYiyqPVQnavlyRV17vYFkWUTFSGzYJ5rF9GD3gQ9EsILmBpUGJCWN8w2K1dpoyoHMnM2W3XSoQxKdZTkonUczrYTtTXXHpMJryq/9vnojnLOIiPQJSxJPmnliiicHYSGdRI6ZcSpNMN6bBYvjniSD3Yc9Umfl4y25rsEQ4AfVMNwT1GpWnPatEdOexLHFDLAV+QnCtNMksprkVbNRD4FgkiQiN1wpLq31SQ6W4VfY8b4t0bjRU7rhiyiO2XI+t+NCujkt2JQgAw1y1yjb0TT8BitEUIiSUsL5KDXH4z/D/Fn9kNNKrCJJNhNFXU7+/6JBWr6b8YE=","authorEmailMD5":"3652bc2aecf09d547c69367ff6b1a7a6","authorName":"Anthony","authorUri":"https://anthonysimmon.com/","message":"Thanks Stephen, that's a great read. I've heard of this a few weeks or months ago and your explanations and examples are very clear.\n\nYou say \"I find forcing asynchronous behavior most useful in unit testing. It can also be used to avoid stack dives in some cases\". Would you mind elaborating?\n\nAlso there's a typo in \"ConinueOnCapturedContext\".","date":"2023-11-12T04:50:41.1659772Z"},{"_id":"d13c2889-a17a-47e0-83b5-b89e06c9e560","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"","authorEmailEncrypted":"RqRqH2Pt5c1EtG0j8t8o3Nzdi3aylZXWeDKf6Z5DvJPDFNZxYoUdafEg8NpwTP+p23XP1R3KYkxPLmZBOf8OsC4vPb1cj1GbdZwelLdw7ESp3KHcslugbZLrrirreRP3Td7sBKDRjXyYcyvK52oC3NX2/ol+gIK8//hkM/W9TUPT+WgkiMX3Q401ApoB2AeaEcIBBsAScdZY9ddjY2Vaz26YU8W59OOa7kOv6FWmd3+bSl/noTk5UNxCaNljl3CMykGHgP11CepGGfPoS4D44f/WeaE2DZUIO+M9Bh7RJ+LuNzm1FSI0lj5S2wFvonk5+aqKXe88NYbptzuslwNiudovYmrK3DWd6zUbdhd+3gSsRHuDfZB2ib05alx5KLdKS5g9iCWumJRrzsyLn51Dch5laaromOHvOEj9YjnyFJG7WL3HCxVVXYhBPwpgRxb6L/nrbKSWNWaOIwndEEts3JEwqU32wWbX2ZWnsqOFz6b+/0CkPrR/kseyCk4YztkM+GXTmeYILiDh+lbOW1GNXz2p7yV2xnKhaOnlAtygJPmev6OR+JXPWbsXxtDreDlGTcQtKonSEilZi5vVqdH163fhcR6wxkKDqNAi0f+M3PWMe+HgKZawI7oPHnuJF7L4DL1nyPEX8JwV7mmVc25mbwOjtOC/WoDvOePQ2I8t3R0=","authorEmailMD5":"c4f9b21a2d78baac116d885f4cd80e96","authorName":"Ð•Ð¼Ð¸Ð» ÐšÐ°Ð»Ñ‡ÐµÐ²","authorUri":"","message":"May be you'll be interested in this\nhttps://github.com/dotnet/runtime/issues/94620","date":"2023-11-12T15:19:22.5181646Z"},{"_id":"21249e41-b93e-4517-a651-f2d712e1ab0b","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"","authorEmailEncrypted":"Q7UXIYs0jWWEvLH76QH9yYRhEw96+HFej3+5ZGQAj+emc86SMKglHFOfHmg5V1O/SxUeB7gMVGHPAql795LAvul7IK/ovDm/DC61gDKTw+q3ZCxc3ppyAD4ze4WbFbsvjM3dZZZmw40nHGx0Z8JdPpZlUBSXXZunWBYQUYkaS9CFom6ijP31qRcWYbPW5mDCF/PemqE4Tu2pLU7E8rvFRAhgVcQKgugy69kmSXZNXti/yxYE7da3N04dMh+2fejlGT8GkK7s132+3jKL4kIhSbm6H99Khw9oVKeu5CnuGn4EIjV6ajlqSgdIN1eO3VjqRpI5fWlK97/3KbHA4P03sGMi0z55aE2AHNP+wCwy1cllHbJId2Lhk8nrRbZbmA4eMFHBWMokJjb+yfesK6AQBjajLNzom0CaoetR8MmCnd/OtkJrglGxHCwDQ3DAlFZ22+8uuCbJCLfjOgIVm8fDR/7n18pOg9veyl/VVMd5CLN+YUvxVj+EqJLGbL8aMJLDGbsmPStxP2VgQSBZ7hCBkBPqJ42kua9eV4xG1cxqgTRUYZRTxdT1LFBDOQVu18NoC9uKItfxVZO2GvIKj8WzOxrMdFtU7Da7nPpjjRVI2TD+I/uy0+eia3l9xeIcurFasEirGceAB5Xlcb4coCO4N3jCTkcbCfNZeUssmz+gtiI=","authorEmailMD5":"c910cbf66908e2de84ee64660b59ec82","authorName":"Carlos","authorUri":"","message":"Using ConfigureAwaitOptions.ContinueOnCapturedContext it is not clear how it will work in net core app as it does not have a SynchronizationContext.  How it will work in a Net Core application?","date":"2023-11-15T11:57:52.0392521Z"},{"_id":"22d291a4-52f5-46ac-8ce2-b5c3d0c38d30","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"7008d2b8-5c5e-4ec4-9ea5-deb61dabad2b","authorEmailEncrypted":"ZOtJej3tLUor4+PuepoFFIgwV+exZHXgzZiQDqgXMtNfI6psOBOHH/SW1OqfGUU+Lpht+uIV3PTRkSTKcZLa5ZziHhExmkyYvcNss1WIzGNC6vfKEy6sb3POUq7ffGFNSJimsKqlrrp5CyzyiZ0KkUXGnBwiqYvu2SUI3nXWBrDYxublmZw4lmmPhjw1DczvD5aABDYhBfqSTAbeGoRjTCh1catPuTnqmDNw4J8H7UmKKwx5Y5Xxe1nT2COmxSOYkyqDkgu4343ZAJEpbL/hgxpPEocnLivSieEMJIgY4NOPTVbIymEJFvTFqKnzu//ij/TxBnR2ThEQHLvwXIZctNsQCL/S4kOd4mussEMjug7zAdVfwAnaBFU/aBIczHYlDYxkgAAAd4tU1Vz6O74Aj//M7LvxVQm1TtEkCuL6xMo4XaaHxGSJsTYN4d9QxMk3l3Xo2HOnppSMOh74K8Vpc8Y2Kz3su4QAH/2qlIz/tgu7P1dlJtlWS+ApaB7MoL2a3DxD7SKC3bSPcV1sD8bIzsJTCDwL78NpyaXnRkT3hT3TNMUAJ2oWGpZEelVfMn9H85+zGiEP33BVJIPcY1gT7urbAVPFQIBpzv+5q2DMCpUe/ba8F+GfWGFZ4UxO40hiQivtOe/skjNSKkyTuQOuLWYlso4t2I/amBi8k90cE8c=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Sure!\n\nFor the unit testing situation, it's sometimes useful (or necessary) to check how the behavior differs when the system under test receives a synchronously-completed task vs an asynchronously-completed task. E.g., if `A` calls `B`, you're testing `A`, and `B` returns a task. Most unit testing just has `B` return an already-completed task, which is fine but does cause `A` to behave synchronously. If you need to test the asynchronous case of `A` then you need `B` to return an incomplete task (but one that ideally completes quickly so your unit tests aren't delayed). In that case, I currently use `Task.Yield` to force asynchronous behavior during the unit test.\n\nRegarding stack dives, this is a much more rare situation. It usually shows up with recursive algorithms that deal with cached asynchronous data. When the cache is empty, the data is asynchronously retrieved, and the algorithm gets back an incomplete task which it awaits. However, when the cache is populated (i.e., contains already-completed tasks), then the algorithm gets back a completed task and continues synchronously with its recursive calls on the same stack.\n\nI've never seen this kind of stack dive in my own code, but I have tracked it down for other people, so it does happen - just very rarely.","date":"2023-11-15T15:59:43.6262008Z"},{"_id":"55caf6c8-9b71-4843-888f-5a8065bc46ce","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"d13c2889-a17a-47e0-83b5-b89e06c9e560","authorEmailEncrypted":"d7k0oPeXIV031w5b4QXOX+TrA+/KjqYl4MakLM4n3Q5NoEGtk8fztZofj82huHNz0D2b2AlMMa2d/MiUpBXNoBR896oCuoGsJQqE0X65zW9bYbPyeQOc8JUhySmDKQiCSHHQ6h8TLjSjn08CocFF4AD5AxHexicOKE/MTr0OzcmSeXe6QeDH+VmHUHuvvAm4/ekTGNqaX06Fp9bZustzsVD/M4RDdFp1Kp/F5EJjJtLjtj2QjAD4cu5KqWhhlpKeVPgF5fcKwedFr8SczGW3AYrzLOqqaZR50aroYsYsAnu4j8pmEqE1pZZM6b2HwRApC48T4M3d+8EGSfHpH2UJnji8zLkJaQfWSH92/des/4svYimyNBA02ypCGjhAVIPOWHIQbESdTHA+970hThDG/L7BwIzquL6JVHuylqaLtyWMjzO2fk0tv3B3AGTPenyaFhINDwVzXPE42Wr0VhSgjz4QMWooFfEFhMrwVFdC9E95aGEnyMXKCofV0VqbN8ZrEjRvqwai34h4gKrOzi0QTRLgpbD3wuMBKcLAxFnMCS5yp2I9eHQkDmqqHNgGcV6D8OtnRYaQeC6jnnYBmtUnPBWzj+h/llMc0IYCNO4y9dDdFAleFW1GaQMDPKezQL14y1KK8N6hClizIs7JecErKQWZgrBUTswoWCnoMYuwOP0=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Interesting; thanks!","date":"2023-11-15T15:49:56.7397501Z"},{"_id":"9b1ae00c-54fa-4c7b-b592-4d4bb1a11f41","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"21249e41-b93e-4517-a651-f2d712e1ab0b","authorEmailEncrypted":"EV1cdp+Yjc6FwBpojvGCykgsSPSA6wXAhRlWuAfvfliiDPFKwr7gj28LI1fOi2I9480X8a26h0EsKSvz0799oJLSex8Q9eVA30IpUh0/bQOJEMHJhghOBC9kGzXek8W5kxb4K51ldDahgK/Tkp77wV2H8WXSCNyXme/oEAzK9DsgOYoF57gLQRSEgq55kqi40XZ2vxkrYmOfNwZ5OmZurkCW231lQUKLbOsHOOcKc8YMpNvxww72rjjjsuI5hAUS+hWtE3Xom2/HcLb7Jo4NlbJ1sTYKKhOZ+P23WRWunTvqCLDnGQ4JuEEM3KwEybVmFhHDS0RPnFXllUkgHiNm6ylqKrJza6515qETOzrmsULHrcbBX0u3tIspn2+BTTdjp8y9EbbhQkCXGPXUZj+y2uADBACE8Ed/4DaP8PUk4m0q++OtEDdArO1WVQUYEsHKFVJoD4H5OK96yHHCuVC7yglWXsXfP7oM3U1ExlPrGOnUWjBfusi1B+s64Ki+zItyr+dxq/inVkooekafssjZrCld08KvJMPF7r6OjZjw9MZ3TkZRVYRzhcTMBp5huo0qK3no4Fd7XyS288CPDy9K4gfZj0KRs+Doe/QY0HcrdY1nrd2i9YrIRobU5haTro1SOvfFoSl9nmn1yXKCQRlikOj43VgSgZmVXLohRF2hXKs=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"It's the same as `ConfigureAwait(true)`; if there is no context to capture, then the `ContinueOnCapturedContext` flag is ignored. There's no exceptions or anything like that.","date":"2023-11-15T15:48:06.9320071Z"},{"_id":"b8d263c5-65cb-40a5-b4fa-849a51311903","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"","authorEmailEncrypted":"I+TO1VoytpZtLDZR/y7K5kp2/Yq4H1dyxbuvZIqVehuUMII3AMYBAR5D9dNDnv6uih/ZwdOSeB4bmM4m3OcyiBVnCm3OliRKOFHTGk8efwMmGWA4pZV+1b6a+9Hf6Ij0r3Y/wTXvUCUUtbWDVRf4wBCc8wSwqfsueJMAta1RXaIz6KdiJIvU9gJUsuO2lyBH1TPVIrCiAzgmGLlwxmlxpgj+g2+2mAeALKr01GMNZRnTl79jnQ3FecyxZ5/CJ5cyB9kQGdnCgu4nT+kZGtAMj790tGzgddTuK+NTAc2mp8u/DvahBryP6oFISc0V5RttFJnY6nzMOPoa/0bNx7QCXRDuRNgMZ50yeF854jINRgG0PhvYyxwG2E3zIztFMcEyvsjaznniwhN7p5KnwJmYDcFWx3ld6YCRtnX59KBIWSovObODrrvyKB9hRV3unrDi7CaHsoO1tSnSHFAwZsfY6WFq+nglbFBtj0p/ka0Kh1UDlEEBGWTpUWxfZv7Sj55lhcs3ESkZk9oA5+afgYzbmbfnWgndCpu8ZVGkcg70/fGfp6cD8rtW9cXJjeaqMS0b6VU4tf0rjCA0fQ70pdNBarA0CzEgfeXQyohup3OXWCi+4TQ5v0XKeezyVdXRkbWVliAt0d+MtUceqZgdHW9FDlFBcewDbWAvUIJcmzYgf/c=","authorEmailMD5":"f5f5fb94b715781c28b020a531989234","authorName":"Yegun Kim","authorUri":"https://github.com/ibocon","message":"Great, article! Thanks! `ConfigureAwaitOptions.SuppressThrowing` can be useful when sending telemetry information.","date":"2023-12-01T06:01:38.5586250Z"},{"_id":"26035951-8f63-45ea-90ab-c0774fdc9159","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Rodrigo","authorUri":"","message":"It has been really useful to me so far. However, I'm wondering about its relevance in new applications, such as those built on .NET Core or .NET 7 and beyond. I'm questioning the necessity of certain annotations, presumably in the code, considering there is no SynchronizationContext and I'm not developing library code. It seems like some method annotations might be unnecessary for the context I'm working in","date":"2023-12-11T19:30:48.2292396Z"},{"_id":"0618edbe-1c2d-4948-a036-f8e1f3d8e342","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"26035951-8f63-45ea-90ab-c0774fdc9159","authorEmailEncrypted":"wY+8s2QjjsLo4ZYUenpsY9qb9a6m1lYtuDsjBzsUUlX7S5TBsK/pp/sDXvQSNjwnYZLIuez+w806/HHNZoVmUPfvhNJpx7ketrtBPiT7t+2r+HpRRzz/yiRO9+1rUgi/FLc90Kqwx5Sr1gDBgnm6rHa26mP4SpIlj5TuJE1/fMV3hYnNxfkZaoyk4AWCjKkLDk3JcGVcv+HzYf8BhKnJrNGs997aW9F2zB1apivQX7sHRNTS+mUKTlE4+3lfQll1aB8mdeVk8/9WrIYmcVXJUjTNvP2b2/92Zza1NdTQKec2qxrBCbYgMQQjUWgJ27cOdVRflwQXHOoUZBEKERT95SQiz9ksHZvazrDEVuQeP0El8GkfaAFWfPR8zH7FpjASmxenUqwR/Xvo9AIaZCrlJ3D19dTJDIygkr5fTdMrFqPm9DEKceion/MOtev//JDkvn03XeSBig+fOHfXxZ3rvXbBGNCPz+SBbBIJUEaTMXXXiP6gj0F5JzJU1chd4VKmDio/pmoeadbclt0IygNxDY90jE3T+Art/kaQYHSB1ffTsjY7dMsttLQVhxwHKiMkuw+Q9DDuWNCXqm060V6W7b4y3z/HJwmgWF9605BB0nKFQxkljjSSPw5xHC85r2oBaQOt02o7x58pFW0ZctO5bSt1DVgmoMsKMM68Tejbwqk=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"If you're referring to `ConfigureAwait(false)` specifically, I recommend to use it for library code and not application code. If you don't write any library code (not even private library code), then you probably won't ever have to use it.\n\nNote that .NET Core _can_ still have a `SynchronizationContext`. I work on a .NET Core WPF application which has a `SynchronizationContext`, like all other .NET Core WPF applications. It is true that _ASP.NET_ Core does not have a `SynchronizationContext` any more.","date":"2023-12-15T00:59:47.5803344Z"},{"_id":"1bdc1c6e-482e-4410-adbf-0150ba169472","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Orney","authorUri":"","message":"Great article Stephen ;) , as usual. Thanks for your contribution :)\n\nbtw: the link \"normal behavior for await\" seems to be broken ;)","date":"2024-01-24T20:46:50.9521533Z"},{"_id":"76298970-60ea-45ce-bfcc-0b83155d1c98","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"1bdc1c6e-482e-4410-adbf-0150ba169472","authorEmailEncrypted":"Jzh25P2TLkQeF1FH2wqSsJh+eBxgUwD7QQWcIFpGJRTOnJztxU4ylZ5tClmRerj2Ii97VBCZON2r0LiqAtZ3G1z/SyviyXNVn/dbX/YAPswT2ZNXwGIvRdF0qF+NtzE2xG360eXGS73NA1MvROqexz0W9Yk0pZ5xRVLmayY/+o2nEAv8kbmwKwkCRc5+FAO+Pe686uZHWr9eX0lzjQfEcDSn30X4ZZe2GSG5HPyB88l4QlajahoShVpaaSmuYOdiJn6LgkTvPnSQwW2E652SLlNPepmoKjl1gaGe+l71gtcSlPQIv2TA7cedQpngvhuy5LQhFo+1xrISXz7KRtRU73NiwmlHpfLa3ywJtbK8iGH44A0gCsTYMflfyhDE4Jm9JDJbAqCXPw7MEZTL939EjtoA8H9Ca0VqbkYViICbAGYnAE4R0O83nLksbwlICm21h9bOJSMt1cBsVP7ixmosdO0ioh7TIrWA2uBv2zC5efVI23WwLwYv/HPdHntajNMw58nymdSx/cSYHjr4s7aXtYY8xmKt4hjFnLG89PUdDwiUapXzXXYHcMXAAeGI6b9hC27qn9yU8D0nsDFJEtHRWxzOkZbMYgE+J7Rhv7+omee2S3MIArgSvrYVcEZDYC6KMLeRxrs9PvI61yhjbSaah9skq1WA7xxTpPKuXEuFCmg=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Fixed! Thank you for letting me know!","date":"2024-01-27T14:04:17.5581180Z"},{"_id":"509e0ed9-6a26-4aa9-bbe3-b179a61ed842","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"","authorEmailEncrypted":"TEqSM9CtCd/moZ9dwZpwtIRz3bRMTCd+hwcfCZcxbrYLFBZvg5bRfahxVGnHv6ezzBGjA+3k6ranFtYeQ4a8ahtWAHHwTJUP478MkGuFxbWDHRb32HuaRmVtuI/zg2AVwSyElzwScU3g847Q1+XEpAVoi5SPpNKElUuazNvtnnlXbf0Xr6ItukYPfazfZCSllO/wEve3UyMG8nNzZI1QXzZSo1MRbzf/VYkjzYbbuDSrnY0dtOnqrm5B3sIdnKE1JGZuseQVv4diTVJiz7Emyz/c4IeJmWPMpLjUW0khVdy46yLAiW03j3gGC1bSd94DFoVI/Up2Cy5jDpBigwW2QaFGdRlAeoRBXVNO6vsiE9Ym63iAkNBwItuVVHEoNAWZiLE+dNe3GHe0Mjf5sdEHSLcVQKLdqRTYBeqe4G4PD+P4iE6c0GjOiA4G+FwJKfCSSsJXq/kd4b0lth752otr9X50Vbgt7+qI2eH9s6LEfrzH2j/+7Li9Y5Q7fx8dqngA/a15zB44PLYbFXxIsE9K9oaTOwz71p01sVbh9ECjNJam0ZexHm602yC8P01311VZj6DdaHEYtSltWeRD9FcTwEhCfGS0DnC1CrtFogwER+0sjw8yhuSIdp8ptbwV9MeK9Q+PgElnYFFT2a8Ze+GNREREfuBThi9qLoY4Qz8NQVQ=","authorEmailMD5":"2aa3e280dce23ee824e67abedabc2978","authorName":"David Catteuw","authorUri":"","message":"Thanks for the great post, as always, Stephen. \n\nI really don't like those ConfigureAwait suffixes making my code unreadable, so I've been using the Fody weaver to add them into compiled code automatically. \n\nI wonder if the language team couldn't just make this configurable on the compiler, so we could override the default behaviour for all awaits within a project, without any postprocessing magic...","date":"2024-04-07T13:18:11.3057149Z"},{"_id":"831f894c-f19d-4d83-b681-0c005b37424b","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"","authorEmailEncrypted":"X1HMW7CCck0gTM8OJGWYWv0gi1fK1T+xZ7XWQBvt0woIy4iKWzYpidPvJ04O78vpiS+9QBf8LaVZN6RCV3m8P+E1tI6StEMCEigeLjM90Pnn2WdAGllN6gg4MF80wcQWOTtWEsMaO9pN4DU4uGa6Ix0eZkuW7szj30JBlLv5g52uQyXZGCZDs3pOY4ONKfBQXX4pMGzsPGZELDGDWMOiRiF+oorNvIbG/ics796ThJmVziQO6FdZKsBuh2VEYj8ZxQDXq6MWKzkA+Mq5MURY3/pdSu3Be3DNnoXRkwKI0K2eM5mueXXME6l/iTJW0d1iH64mG6aE6Veq6c5+E5jpDfxJoqU58zV8fAcGRQ2BJPydGAqMh0PiqalLqkzITRDZh46HUvRXxKrjWXhEsz4yFKH7pgQHQFCd1jNLXIxr3J5HruPXHF4WUYihAHTuy379T16A47RyfqxKGDLlcYRfL1IyU9uABtuVfyN9gJXPGIB5uLqm/PXzdJOXXKbcgX/1n4yLKBObBdGwyWeEviZZJnJvawcSpjO3C7eO1nOkdGP1+55d5MiEa4BDADijPJxQy8brG5EIGK6dG3aMPSRKkmxnqt7wuxOryRo5DC0GIz4xjV4MzWdBQRKvI3t20KA9qTMzbYOt1DseU/hMr7/ZSWSLnTqfOfJmpjB8PtnKMyI=","authorEmailMD5":"d93e43aa4049b43d5460426a0f9ae144","authorName":"Theodor Zoulias","authorUri":"","message":"I would like to point out that the statements below are inaccurate:\n1. â€‹falling back on the thread pool context if none is provided\n2. the async method resumes on any available thread pool thread\n\nIn .NET 8 there is no mechanism that actively redirects the continuations to the `ThreadPool`. In case a task completes on a thread not owned by the `ThreadPool`, that's where the `await` continuation will run. For experimental demonstrations of this behavior see [this](https://stackoverflow.com/questions/19543240/what-thread-runs-the-code-after-the-await-keyword/77392646#77392646) StackOverflow answer.","date":"2024-07-17T15:56:47.9443536Z"},{"_id":"a52806e8-a7b4-4153-afc7-ea3a66eb1246","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"","authorEmailEncrypted":"LQHLhp9/pQ+XbTxBpi+RVszX1OdoLEj/qh8comJZ1pTcyynEr/unskY8EwFBCA37LbpRKsdyp6COUSHOwA0+TlQJaHBeExjfbkRD9CcGYLLUOhzwHhrU/Rb7dkDz6010yeu5SECWZATUjs1JgyhD4+ulEt1acMpVNMaFhcxZ3QlAY/6deWlueo7+9uablRgTPkb/fADFiPESuOs+vz/f0B7CJoDeaw5RSIoOD8MbvI2SFTpVQBJNC4B+Tci+4Ps9QqejUgxvmTrEI/P7E6GGRRHUOQR/44S7E6CDFnkcedeS/Lh3pByeUKdHJzSVx0Hkjs3AsRWDOroTMxoqnij5q7O+WbilTm9csSSzmyum7mvEnBIHNWD6tLOADyD6fuKT61urKOt5gHaXjVuGHPEptyrJJObfGisrI1HUUhM3OB6giAODRAAishp3xSOmOpDMFIZolpbAOxkwWiwk5JxqPqKwKLQS5YqkN0bESOHvyut2gvB8SKqTTXS2FzIhr0ckT2K75mtMZ3hckQTLHE3Vd96WFe3HNiOuXe9sEykXcx/oZD7w0ZEyR+hZPEcPEe5orW/T95pV5I6lNSIj/WCypmOOBzAmUO0jkhUj0ZDEJBO6Stsh1pjAbxqDAIJQtYrd+aCmgkYvGWfT1coHevae1kTuDlpP25/lLk3+UeSXuxQ=","authorEmailMD5":"480b8e21d37e1f9dc03c3e1a5f892e00","authorName":"Ivan","authorUri":"","message":"so, if you use `await task.ConfigureAwait(ConfigureAwaitOptions.ForceYielding)` as the first await in your library method code, you're allowed to skip all the other await ConfigureAwaits in that method? cause the synchronization context will be lost by that point","date":"2024-08-05T18:39:40.1338697Z"},{"_id":"91eba9ec-18cc-44d0-bf89-dabc596765df","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"","authorEmailEncrypted":"sfH/OW5sF7tv/S5qlVC9Uv17XE0tRyVqLx956pZSFWy95W/zGDUoB8dZhS49KvK1iSI58gmj9gGyFmplk7B9amtTGj8Rs7bO2tmWJUuGq5H2GXpUUPDNmHiDZvknKxZKYldVqHEJBafoqDyBYGqNkjlDeL21EM8sOWbKApgRinwN82pvaN3o/PtanzYquc/I33lOwsy2ZxS99/lELzcoFjfzkmrT5G7c67CAa72xxMIwX8ll6SSujWWqlsVQZdFmU5p8RWJ2rgLAPJwGRDP/lb2MTnIjHjjNOaFJNu4XKwdRiujNcRJNJDRgHT0p+C32+oGDF+cVuXlAcewx8cCepglHVS0A2TzryUE4QleBdBdy8k+n9lj5wAncrB5NSAcAZ3vTx3vD083Nzrzcr3ZVXK140xHc+btzkfYqzFUcNq3k5Gk+RqDjJOcmIG4rZSD6hkZMMhp0Y91+neCPoC2aAhmLsEJL3XI7dDN98/j63oaXpXNHDSvpc65UN8goTl+Yv8IWl6dgwC1M2PflXbOjaE72nMVCWn4iEs0suY6iCl+ryNcn7HJo83/A5voDmS46Fj23entKeveNnaRuFWF7FmGZvq4ZwHZLq3soL6J25F5oA51BCS9Fa9OQukxJYW8I0WNymxlhfxpz6bZMN8oWDmGdwgd6Ni3P4gVd0krSavI=","authorEmailMD5":"66a055a4479b5a22f2982d5476315230","authorName":"TomÃ¡Å¡ Pajurek","authorUri":"","message":"Hello Stephen,\n\nthank you for another in-depth article.\n\nI have a question regarding the point 2) in the list of common misconceptions: `ConfigureAwait configures the await, not the task. `\n\nIt is perfectly clear why the code in the second example does not make sense: `var task = SomethingAsync(); task.ConfigureAwait(false); await task;` -> the `ConfigureAwait` does not mutate the `Task` itself but rather is returning `ConfiguredTaskAwaitable` so the `ConfigureAwait` does not have any effect on the final `await task`.\n\nHowever, it is not clear to me why the first example (`SomethingAsync().ConfigureAwait(false).GetAwaiter().GetResult()`) is wrong as well. In this example the `GetAwaiter` is called on the `ConfiguredTaskAwaitable` returned by `ConfigureAwait` so I would say that whatever options are passed to the `ConfigureAwait` will apply. Did you mean to emphasize that the `ConfigureAwait(false)` does not make sense with together with `.GetResult()` or is there some deeper issue that would cause also `var cta = SomethingAsync().ConfigureAwait(false); await cta;` not to work as expected?\n","date":"2024-08-12T11:27:40.5408760Z"},{"_id":"6be757d3-0af3-43bd-bbb5-bc22da7c33ef","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"91eba9ec-18cc-44d0-bf89-dabc596765df","authorEmailEncrypted":"jS1scJivH7AU/WEEUdUVzy2SPpa/hn9acFJ47W8/xtIoDcRDTQ+YoCetyjEn4r8ml8RoXlKB3hP8cVPlhXtdD+RQ2kI/UNHWM1Qd3h3q+1x1KGpAD++A2mI/7AKBpMfdjKcjkG/K5iZ3pJFfZivp7y3abyhyFwB5I+1AYOfmngaW/OfxSISw1Ge0wVy2Jll3w2D+TjDgFGuhu7fQeVZGD6M4xpyI4xxAOS6F8pmjQBM3mOKo/LEvQ47j897joI5M8wWZOiM6M0weNXRU/6Z7T/QVixYBAGTXG8+3RLDQGUOaK/rr+jI18QXim7nnGoDLjn06W/feUs8gYtdenZ2K7Ou9mAexCLrb9zJt9cx9aPXpqMOLzhf3wAF6MOxNu1fXPQ/5HZ4dliQP13X34l7n9YwLTpBLGRa1r4lx3SqHUuWXy9Uev6AvfvuF86J/HUMt9O4hBK0WANpwmFxze3uO6i77x/wKwQuD4jRDjF3rC7Qg02y3835YwK9K/lRxZcSCsx4bXnASjMdxuLsxF+fxzMF7uHGLpp9/QFax+FmbWk0Pmi6tj9g/4RnynCUvCXWYjwAdvPpYwbqs7Y0Rxatwb/JUb07nf6DytevFwfB2abRzUU9z+E45UtKIt5PySUOQCLgq+EHza/SOHUsSmQLrTYjTViiyhXJ2vAEKXTGVOV4=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"You are correct; there is a `ConfiguredTaskAwaitable` and it is that type's `GetAwaiter().GetResult()` that is called. The point I was making is that `ConfigureAwait(false)` doesn't change the behavior of `GetAwaiter().GetResult()` at all; the code is blocking, and since there's no \"resume\" in this case, the `ConfigureAwait(false)` is meaningless.","date":"2024-08-15T08:13:51.7725460Z"},{"_id":"d2317875-65b3-444f-8c61-66ca8bc1a621","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"a52806e8-a7b4-4153-afc7-ea3a66eb1246","authorEmailEncrypted":"NvC+1gNwb0+LbPxukTAJemUS4qYUa+aUlemAqbYgNq41KkBtf3MZYIjccMut1yTHJ9GkjQN1u2ZGQDa2yx2TKeN2JkaoNBvSeRKQPx+RHJcirKbiTaLMSQYyADddyLaFaiA2Ch0P5NuPhHC608PwbPdq82iqoD+EXFAJcLQNRl6INjDjZ7PL9zs6HrEF/meX5dUDW0LnWxNPXmJlqycC9ujDO6qPwFWtCCv06pLGyaypgShDlIQ3+t6FU3K6p9b3Jqd/hkJZUKy4ckHa6OXq+CjK36y9xXvfJ28Re4I3d4n3FZNwnKpTemQ97smmzBncWEtdGsnczcAtHx7o8UYupd6CDG2fW1LKdVXNTYju1bTmXFbUPupgp9tUGVaOmRIoYrzZfHMTmA3i1/uENuWL7e5cwFt7zeNenEx/T4M5z3jWqg/O0dPIAUnAWCAVdcavKg4e4LKeovTVLhn84AZ8iu2NFkOu/lqR8ULb1eWjfdFGQ3/opWDoYuabMB7rwr79TOHvFmwLExDmCPINeJ8/wjm6JzvP+EbCdXr0i8bY+YRIjcLgmsY2SjtljfAi5bPSqnle6+3ULNvB+NR5L38yOBLpqaTZNxRjgLqkAXx3p4WxDz59hKg2vKYV+MFGiIooreEvVtEP81kB4GXIAjp0wr9GdBsQBaaO9qI1jr2qht8=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"In the general case, yes; `ForceYielding` will resume on a thread pool thread. (Technically there are some edge cases with custom threads as Theodor Zoulias pointed out).\n\nPersonally, though, I strongly prefer using `Task.Run` if I want a certain block of code to run on the thread pool instead of switching contexts in the middle of a method. I find `Task.Run` results in code that is easier to read and understand.","date":"2024-08-15T08:10:54.9806171Z"},{"_id":"a8a97a4d-27c3-4d87-b923-b3093549520f","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"","authorEmailEncrypted":"JWap+WuHdRXR29xNSwXpJy0ejQ91hr+E7kbLUSpEbom2e8vz6q6Ses+NkFzMAmENgJ3fe5sViYJKrvKE7mAf4aRhPq3DEvSN8KRtzEF7ZHbeb3e/gKy9Fa6Pf21PEpM6Xs8cVHGhOGVHII2+cgpD64hc9AFVRddeaqVofuqrgrgn/cQXMKFNxPJB+g0y4x7Tf7PLvD3/yTLcTicOWIpraLIakyevq5TRw7UPKSbqS7Z3KFmk1/9ZFdhuxMFoZF94Ki8lPNF6LKaMpyV85yIVq2W3qyjZ27+hEHnm2UC1YEo4/QXfjhbSmr/h3iJPO7N8VfJkONJ+1OP7H489SnBu0fJc2XjGqfxDkBJUoEviUovlnUSNV0s0x8UyP5wi3t6heVtJZ+iqThEEfeRPYtrL2kgz3GB5RI/PmSfi0neIfoKf6THFGX/Kf9Sa80X6YXIg/QcuhYiJUtKfslaQO8hq4v6JouPhh1YjQAmA2txtAlzdXV8zYPWRdu5Qg/fBBELLlsF5KnKm5o6UHMsmXDHdPYaUFW9qkVf6H5r68Na2Kq+aDZt9wZxstIZshsGtgryWx/mUf3aPYxcnVaG3wD1x1nLtMnbi2JS5DA+SC2j8DepKXAJec8euqwVhw7cfknbuFCrOXXr+S+I0cQdw3WoWP7jCn219Qc82FUIP3XcvMeU=","authorEmailMD5":"66a055a4479b5a22f2982d5476315230","authorName":"TomÃ¡Å¡ Pajurek","authorUri":"","message":"Clear. Thanks for the response.","date":"2024-08-20T14:18:32.0695683Z"},{"_id":"9719f04e-e2ce-461e-8997-c64658576512","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"","authorEmailEncrypted":"NC/NO9Su3YvBAsm5PxYPwxink5iWNZBnef2oogYDcxxwlPS9e5++o/EiYINJv00HRSq7BG7w1juvbU3ahfNxsTE99oJwARirwZX9JawJasGOz2nBitt2sW8/jCrl9XpOWt8KkSRJgRRPkC3GT2sijkMkZ8AwFMFHo91gadXSxUPQoOSaZAFDgy2HYZnc+4ZJV1cD5uKQERAib4vBC6dZDszE+QoRU1Pq9tNKhjnmhaj+08iN16yMdRGRm+YR0lK6koWAFHY7gn5erkGmWL9Aeak1cQVzoCsRLq11+i5jP8NYvIkQUKsMOGWC0Z5gnMONSlDEezOL086VPRtf02b2jN4qDzR79BBfw9AvDhlve77/BXuS/3CeLO5jDH9bs/wgNgWInZHbQ18jK8Lk/QwG7WjPzqSv7kah0cvq9vBnB1njoDo+oV+xRmgvZn7FmZPqxcztngYPiXx77EBczgFd80c1y5Z8NG4uppNIEoeaXZsP/SczRL5Wc57K1o+78UouzpqTvG1Y0DhUhMHuwJni3vp9h0kpdXgIImy5Zsxe/LNh9zR1JedVVL67EkJoSK0LeMKgpjSZDT3fh+j4tzW5xJDl5KhZCpx70vcMSpQzmY4kKe4O+uY/VaW53x7UihZSVvQaIh0KEOSMaGlP202iuBK35Yo1spW9EM22Vr4wkVU=","authorEmailMD5":"9a878cf552ab2d17928dbf250967cd1f","authorName":"Julian Dominguez","authorUri":"","message":"Are we ever going to get a way to mark an entire assembly with a set of default continuation options? This would be extremely useful for library code","date":"2024-09-03T18:58:30.7884353Z"},{"_id":"40b90340-9197-4abf-ba49-1a58db767197","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"9719f04e-e2ce-461e-8997-c64658576512","authorEmailEncrypted":"kjT3R/Ib7ZHUTRbi4nmNsqlJ8gd2cJ+tWTGFKnHWP7uqfDELSgXFz/dTu0qrZnVaK6x24V34tGhPhC7S6A/yF15r7RcwkCU8BsEGv02hTecjMGisSrRtjkr3pvLmV9H08Ygqmr+XCd+9NJx12tp9p9hTW8wt7XJXgwLgdj4S1VUcDaV9yJSJv4CTWiTwI2lPERLRtYwNcHcUhOS5tR0cn39oVEIvLHF3xHo0hJkY2GXzdXsuqNcCUjreD+u4liZtJ6ov/Pnu68AeR2hFK5Pm2wbaB0IPIVmeHI9SdVQWIuzF9Cm3PpwQfE46VDJKi5waNK81KQWeH1ys4jn4vBdOgJ1yDSXvsyY35YDz0oqAr7m25sGac3pX6ZIFBonq1IqqU074uuSnpehc7PY1opHxpo78x6FkGaZ8UXbpDadY71Hsszv2W6TgiMqbGVn8z79GUsVhM4eufFfsV6C9QXQ88g1TJ+tie/IGP8bxBzaaMRW3llikMwFHjf45qczuUso+eqrx1+VizIsuygxiRznGBSX4t1QlIfKv/oAlVAFHl6lNsryjmWpMG3fCs6vg4QbfDpqzYIK6iBke8N2oFpOrX5RkXY+GekcuQCgZzAHHykAvVw+OGIe/W7VKU4L4dd4lOlc6Ak220ah336EBgFiyBg+a9cI9LB7ev1nvUUV4tmw=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"I seriously doubt it. The language team has considered it, but rejected it because it means common C# code can no longer be understood in isolation. E.g., think about Stack Overflow: all the relevant answers would now be \"it depends on your project settings\" instead of \"here's what it's doing\".","date":"2024-09-04T12:57:16.0361830Z"},{"_id":"d7811acd-24ed-4ef7-8587-2785bfb0f33e","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"","authorEmailEncrypted":"Mtb0XIJ21O22fu+W8xRzKC2O8fXj38MiCo5v4CBH64q7VSJmGnDhE5my+UhjUN+sDcA/JcKjCMyHU0sEGaRMxWmJMStMaFmoAEGEa6j6h/1EbIrFdISOnqXqBIhVrPL7r536226gZJQLCqZsc09CP7Lo6uzxbPG7ZIKYV9g6s1yUd+PthkXWNurFjEGNkFrlsW7NXs33VG7RSG4T2aicD5R+Q9QuCeAKxZ+9xDICLzpZqhctLSpH7Lo5BjZesY1QF2rryIiwKRUHTVGNUGVKV9OSdglhDRvbM4ZneMLQJ4QphmyGcTZfadBd8AvS5IgJkx/dKRjsaa6Kh9mAYuhQNhKdbOVGe2udHj2rcgx3t9h6C7ZzaRSDBARSqrJFOgWtEjSeB2FNtfjTwqhIhkPGfPb80ih6vtfUlZT+Caw/g1FPblGK2AkCmzCuF2chkbeagXHScpFwhyQtmo+2ZLPZNFDfcAzLNPp80INMybfZa5PqqLG4mjjudivz2TCrt9oV8GfiIcqb5QIzeU+8PNXQvNxt/Zc1dv/9aS0HVtzIhyF01xUwJ8oZyjVIxvkOLar5s4Ea9TiPuZGeDLvSAYtnNsefSOtNnRPHnzVvo9SiYd66RnWO/e+qbNrdd/EVGslkf6Rh9+dNU0GtiOii6SGB5n7ADIBPCxpWuE/hz49NJvw=","authorEmailMD5":"d21fef25bd65ccafb2873ff6fc0de4bc","authorName":"Robert","authorUri":"","message":"Is backward compatibility maintained with the default behavior? I understand that with the *new* overload of `ConfigureAwait()`, the default has changed to not capturing the sync context. However, your sample of `await task;` is ambiguous: It could be `ConfigureAwait(true)` (previous default) or `ConfigureAwait(None)` (new default). How does it know which to use?\n\nOf course, if backward compatibility was broken intentionally, my question is invalid...","date":"2024-10-27T13:40:17.4606506Z"},{"_id":"ff2981b4-f05f-47d9-a87a-0755abf11044","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8","replyTo":"0618edbe-1c2d-4948-a036-f8e1f3d8e342","authorEmailEncrypted":"hhuR3C15Y1jsDcHpEYWvoahWxJAcfhbZeMszQsf452bQLOkFf8n+EuhCpnwKcxAIhAZY0hn85fRJfitc6ftYi1wfVHBa0Qx9g3OBKKIC2912Qu17Oo99t2uXT/4S3qVSraWjf/3N9/UN08A1TTUrqTGXxWNOCAM8IPtzjADf2zK3jNjD99BnebLA2bxFWtJK+sO0I5fiwQTrE7hoqMki8+i+1t8GezYRyLZpFbyP5PAb1igaCNwjTzMCtHAtRa1+/Tt9OAaMzkgmWg4wG3YXEBBHowCO2hK18CpfKzCMLZGahANSl6LuwU4M7wW1HX1tRexa7ZO7ka4aLFIeo03df9CCHPJDjOmGtw6bF1wjuKFYXB5K0tUxAeKKiPvbpcnHGSck7uS//n373nkUK+wPfLUW16vWO+wg9j1P8Vbser2NOiiv9Bk5UH/if2X33SXtWCON9uEjs6KlYbyvpg8DfZCuJgJ9UcT1oTgMUVP3QFVcm2oishKuT+ndCQe6I3cdqKvlLXCvgrj5Zh/yrL8831NK3bcubDNOdZM+Gb1CzKCNyOG+6vXQFYaZ1WKtSNwkBhLiH95iHzMNtiWK19qZ+wlC2CrxEv6jQh3FR4eu9yOh0ZFN0YR0xNOQVrg1lXxIpDCSjNaf0mSl1nK3voGTYy3mDdquGkw6qt0+GlxuYB4=","authorEmailMD5":"f3d3ec9c822e0265c5baf8257beb3fbf","authorName":"charles","authorUri":"","message":"In an asp.net core web api solution,  there are an asp.net core web api project, and other projects like Business layer or Data access layers which are library code.\nDo you mean we don't need to use .ConfigureAwait(false) only in the web api project, but still need to use it ini Business and Data access projects?\nThanks","date":"2025-05-15T09:52:43.1118422Z"},{"_id":"32e6440b-9c66-47e7-a852-3516286fc254","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"d7811acd-24ed-4ef7-8587-2785bfb0f33e","authorEmailEncrypted":"ZoMzorO1wbJltUJWYj5phYig/zYRJTERTPP0D67Z07Q5zh0DZ+a2y5CAYb0ifDr2T0wmywkozHGgCyxAy9vfIgBDAlvVmYrX31M5ltVi31Hha6OGf2/vz+qDWPhtWRgoAHxlNmtiuzcuQV8Lr2IdIJb2yTQvNcK4+DTrOXgJlzuIWrML9+enhah1jd43S3XK769sE1UMhp3JDyEGTF2diI4ujNsmK2Fz2LHF9ilq7shT67h8Sd6eky+18UVwpERlJWz4oMMEWsZSITO+aw0UBmNEvFPp2XQFuaN7TY/UmWtxY/BlGxu5FGPpLb1/+h2XAgHD/GbOtTFI5UgW9vCvoHldpLCk/UihE3YJ+T3qK3/EPpGECy7NRGjfruZ8tDOwOhZrtgPTQ+uRYuLF/8LhYHklmw8GRUIW3iURI0BzLt/pSHZGjBUzQmb4psbUVkxpssUGc3FzIqejLPLcGfC/qcUG2DUTk4UGkalBtrPtbnjOAct9NhI/RhIiRLHiw5wsKN+ILTcAAPMx16+8oF4/Ja+xb0SBR1m1n/FVQi6Qyde+wWMnTFn6PWAXUuTXCbzPxpLsTyGb9bBkz4ntBH4vk/0VJfu/3wpUvOHTQeBridlFF5kWt86LgIp/EgD4WkOv4xRHj1WOaJcp/3bAr1PNUf0MqaItA4Ri0IPCjH6s+Zg=","authorEmailMD5":"915b5ac6f433f99beba1085ffb655458","authorName":"Adam","authorUri":"","message":"This all super cool. BUT!!! \n\nI'm running .Net in a single-threaded environment and every `.ConfigureAwait(false)` is crashing the application as ThreadPool is simply not available. Furthermore, .Net does not provide any means to override this behavior which means that we can't use any library in which authors were patiently adding `.ConfigureAwait(false)` on every line of code! Including some .Net libraries!\n\nI can't understand why this wasn't taken into account to at least allow configuring it and override the default behavior. \nIf anyone is curios what single-threaded environment I'm talking about - it's C# code running in a browser as Unity3D application.\nBut anyway, a very nice article, Thanks!","date":"2025-07-12T14:29:35.6395243Z"},{"_id":"07c1dcf7-448b-4c98-96ab-d932b0b0abf9","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8","replyTo":"ff2981b4-f05f-47d9-a87a-0755abf11044","authorEmailEncrypted":"onHmvile46KiAfkZQ7q/gQ+kt36GMBLc9tFdTSZ35Qb0qPWeutVtqu+D0HR6JeDUE16ICmOq8i3h1VTEECnlAXp8rP+povkEoN3n22nncXAvkuQ3PLucy+8WuzzqqzvKIV5KeArxZ3SnTV6To6OxSjMibbLx6bLg0n/T8O1gMxuCQcToz7gFwZ2BOKNXq44LnUUFccPFv8ou6lM5Bv5WorBUHlyC1qzakSLLahjlUL/hHZCm4dJpdWXChUco4Ido9s+OB2XFIs+jf6x3f0hmvLl31kcqu4jqrLSafmpRBG7eaN46lQdHMnza65LgcsF8+6MhHwuB9r4gaRUFS/mExBj+2LB44k06NbQ3WWfLf6CkM+EraPWBU9uiNc4x8tIBQWt2aE0PJqgjNxwoPuLjDTei/h1jhm0Q2cdC0mmFBf3cHaRAKiu1K1wFvsrbkKoDa8LeEIphOSeHy9a+uWSzh5VHgBQrNxTbECtSyBn0ZWfjO+wnsAx+WQyGAi+Dzec1++EEqUlTi8fHqEEQh3kquRyGyBIvSgQ+xjho88t6WyRmdKNbB00v7L6qO0qiwSWWEVifUO748+NSKK3ZwkM7hU3lGMF9fcN0NZQzhqMtjopXlbIKFbubdfnT9y2YvVDQOMYQhqt7xmXo9qhCck9BP1UZXAjWSRrh9VPwOpIp7K4=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"It depends on whether those Business and Data access projects are intended for reuse. When I'm talking about \"library\" in this blog post, I mean something that would be distributed, e.g., via NuGet.\n\nIn the case of an ASP.NET project that also has Business and Data access projects that are in the same solution and will only be used by that ASP.NET project, then they don't need to use `ConfigureAwait(false)` either.","date":"2025-07-18T20:05:17.9865810Z"},{"_id":"1667c0d5-8141-46bf-b733-79741c1b5bf7","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"32e6440b-9c66-47e7-a852-3516286fc254","authorEmailEncrypted":"EQAGxIjfyDyq/Kywmq13txm4XSOv4W4wFPHuQLqZw6t5dV0JgQS6nYZ3mh564rsL75vJ184dOMlqquB78hidgZNAr+f75YHw3vv4BEVDTqwzaVL6qNIizFcpJfLpzp03MDBxD4jt097tYs6BYpyX+s0d4Ds30qUutJxAVE6GDQn7XQvNDJmre+puWMdZ2HmAmdWOGewpfNNFf6JJK+Z5F9+wF5PhC0VP3UFJdDsdJ6nWFdvJ8eaijZw5IBDT0hUoha67BkluFir28T0oef+/7fEPFjaAhntvSlArqiRBp6IRnqwJR6+3RfxJ+sfF6u096krXpQdxD88bvLIdkctWpnSR8G8tOkobgq8ucto3NK2b01XuEFfY28u4QBON4HdFPjosZPCiIGKCDGTOfiF7f6YLCtAN1Y/3hm8V4e7Obv52kLrWd56Xi3RFEA/ug5dxMlEr451d0WtkIPqNe1WaIU5iwg9vEWj77aMMMo3o9OcSjuKk2QGGPl1x1S/PsII6qD50SYVOiuTF24LFWm+6AhB5RT45n3M7PpbkdSz+uMOoN0XdeNddtpuYro3xDbemUatavnLm7cSEPah4U9NW15t7g6CSfMCcso50u5YXs0LwOcYKx1WwcRce2rGU/q79MNFzZqLsjwMvJkuisOSeA4tXfwBvb2bozw2JQyXqp2w=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"This is a very unusual situation. .NET in general assumes the presence of a thread pool. It is likely that large portions of the BCL as well as many libraries make that assumption.\n\nI have very little experience with Unity3D, or .NET development in the browser in general, sorry.\n\nYou can raise a GitHub issue with the C# team to request overriding `ConfigureAwait(false)` project-wide, or have some kind of \"single-threaded environment\" switch, but it's unlikely to happen.","date":"2025-07-18T14:48:12.1628489Z"},{"_id":"b13ce370-8f88-408c-a6d8-aabfdf4c32f5","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"d7811acd-24ed-4ef7-8587-2785bfb0f33e","authorEmailEncrypted":"icyR4iBv5M0dT4nvKJidJLsWV3otWPCs44WBq8udB7fRv/+f423WIEkjpOH3T6IJg80WO/ndMOHqQRI/UByspknxwSbI9j+VDVqj+DTx/oUN8IUTYNurs8F5QaPKGeYvgziRM7pszB5OCNXVR+JJo9RPtk9SoYwtQJ1jMtSqA+y9zzmRqgiIsOEv/At9/eXBlcLHkQx28YVvuSTG2BsBqYnsBM53p5I0ptHdmL2MIgCiO2mg9dvewdtRGivgALdpJeER9Xeqt6oPuv+vj2wi34UKCRJlzxbFig4q1CjTWbLMGWMYicjgJ/JwNW4aoZyQMF8xp6IEK0hDnTcDAwtaw759m7DjDGvdotJWjYonIG1Scsaq/WbNyAOdKm7Z3wr36bNzw9hAzxXpWrNGJEKK1rIJnmnDUAb5qH8y2LYbDyv+1PjC1ucB4EfvirWvhztxGNv+ay2C/bSujnnPuvUFDkmsN9cO15It/wHQrMpk5E/pK5qRFBLFjg35Bods1SPMsf/+7wWdn2tDpn9lnHoBnPmpIN29bxfEzM2+Rw8AgT7gIi/9aa0jzJCWp/982t0WaemN/sgH12XjYwkOfOoWNFVA8EgE/F8D2ErGeQR0cl1DsuV/ARg9Pl/REH27RrXALE9oae0yWkVcgxqjCRQMXK6toZXwseJg84MoR5/s+fU=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Backwards compatibility is fully maintained. An `await` without any `ConfigureAwait` at all is still the same as `ConfigureAwait(true)`. `None` is the \"default\" in the sense that it's the default (0-valued) value of the new `ConfigureAwait` overload - but if the new overload isn't called at all, then the old default still applies.","date":"2025-07-18T14:44:25.9932003Z"},{"_id":"41bccfd0-5fd4-4f56-9c3c-6f9b90aebf5a","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"509e0ed9-6a26-4aa9-bbe3-b179a61ed842","authorEmailEncrypted":"uiy0X7DoLMduUs3wZKqFKo59Y2YLc6N7eIiIv0jccjpRcATnmf94CtbM91vp4hIiksdBvUkoI+gGv09k+jPhKsUo6FljxdjLWJENDhKAzzxoNl2GHqHrWN+nlK31dHyaYFKhrKUUifBSxMZ1j4AD1rNBcGCPt1w8oQ4TRAvzrsaxX7FlRl+QF/PICfWhSfbe5SR6h5WNQSa9OrYJyT5xbI0rQlNdmYQbxBUPtjyptus2SokkQTkg0aENbXvSgJGHSREvmHQRE8Xq7HPVrz9LgGRgWNlSPh4Sa28ORIX8DE27Sv225CCZUpPEl5FmxtBgjuOhV2JFwFjJ2VPWj+suJ+3PyTWmDPTnuNRTdNymQc1rRD0zAys4RQctBNR6gW+W7L9cXP4Ng7zt4k9fMRr4VIyLwto9Lebf5izgXRyQZoiuVGhjcVc75e1PeYuF1cqXuvEtnM1fgBm1QYGHZGTpKFMxCnQq0w9QJTl6RTjvXdi4dcaxhuygS8r9FfgmR/U6iA+2qj9WQ9ZcewpH5b2l8sLiRhsq3zpCudetCi8jG8wgb+IXnWm9NUXuz97w7Kg3HA6V2Pkkb3B6Ik/izNqH10Hi1z9VnNpCuLdpxVSyP8LtARi2RIlgPvTHAiQ2SIYLCJ3mUa0Z1zCwruKj5AIhzzAqFQpBHJTApyqkmeL1R/M=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"I think Fody is a great approach! The language team generally avoids changing semantics based on some project setting, because that expands the context you need to keep in your head when understanding code (or context that everyone on Stack Overflow now needs to ask for).","date":"2025-07-19T00:15:51.1755622Z"},{"_id":"58736456-da4e-44a4-bd56-016579fad70d","postId":"2023_11_configureawait-in-net-8-393c4e41-079f-3e04-8911-bc3b4641162e","postUri":"https://blog.stephencleary.com/2023/11/configureawait-in-net-8.html","replyTo":"","authorEmailEncrypted":"hp/B/zF1iRoVGbskLFVWXbpxm3DAon73xgVW45i4lLuX9C+no1nLZEsEjeSaqCbNFn8NyIyl8fprsk+8jLcBIIkzhK/rQZV6KA2BUEBxWYX/GMxhammlvwgyTUjTHGu+oTwaFflrq+Yu8JSMSVYpiHLeEQLYcS15U/zR88GzVPSuqKQLWK5uA/bHJjtsYStsngNiZeVHsyxOT2NBFGb6GkE+AY1j98TYTDo9/p4JOQC1ShM+OnvArQnPNaG5pdRvIL6JcuoeVDQbhZg8WX5Xg8RpNSU0fdtSN6V4kuIxUWvXx37NPYuRithe3uaeJ7J2v3HUR9WyfWudSYVs5AUtFlYUJnD/Xbf6xhaySMNh4g/73qswFgI8wt1+7p5hfdTVd7BZ2RQR92U2Jj7PIgPmKgNgZzIcJYSKIimEs8T5ELP4G3LmuT3vwPAHdOkHaluFZWHSS+reFcNU9rT16ZEUaaRI4/z0U1NL/qymEjS38FjlofBGXonWcCyap5vGnevROFIIBckIz87aeCtaiIPm81pfWoCZElLaalhfm85SKYjdpnLya35ffVCZuyjPeFwiIeKeZs4zD7R+7YNZPGKe1xbI+3nU1U2zC6QoIuduUxS8B9ijKV+Sjhy+i7AibIQqu/5HM1Gv55HUc7y6okGqWsTsaAvfmnEXyTal0T9LpRk=","authorEmailMD5":"79c8e221a3041d4049515a2575a1925b","authorName":"Michael Croes","authorUri":"http://mycroes.nl","message":"I like the choice for the enum overload, because now we can do:\n```csharp\ntask.ConfigureAwait(0);\ntask.ConfigureAwait(0.0);\ntask.ConfigureAwait(0f);\ntask.ConfigureAwait(0d);\ntask.ConfigureAwait(0b0);\n```\n\nIn all seriousness, doing `ConfigureAwait(0)` does seem like a decent alternative for `ConfigureAwait(false)` or `ConfigureAwait(ConfigureAwaitOptions.None)`.","date":"2025-08-26T21:09:42.6432514Z"}]