[{"_id":"e883381a-ea6f-3383-ab34-1f65887a680e","authorName":"svick","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"http://www.blogger.com/profile/17579249405158039163","authorUserId":"","authorFallbackAvatar":"","message":"Any particular reason why you chose not to pass the cancellation token also as a parameter to Task.Run()?","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","replyTo":"","date":"2013-09-12T21:10:44Z","timestamp":1379020244},{"_id":"70a07b2c-89e4-3759-832e-1de84d202b3f","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"I'm not sure cancellation as an exception is a good thing. There are valid reasons why you may want to cancel a task, and therefore wouldn't want an exception thrown. In fact the more I think about it the worse that sounds.","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","replyTo":"","date":"2013-09-13T12:57:03Z","timestamp":1379077023},{"_id":"c58f9259-b4d7-38a1-9b44-3e47ad24cb72","authorName":"Anonymous","authorEmailEncrypted":"","authorEmailMD5":"","authorUri":"","authorUserId":"","authorFallbackAvatar":"","message":"I'm pretty sure he is not saying that cancelling the Task causes an exception. What it means is that using cancellation in a Task, compared to a BackgroundWorker, is all in the same place.. if that makes sense.. you have to write your Task with the cancellation logic, instead of checking for cancellation in the RunWorkerComplete handler.","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","replyTo":"","date":"2014-02-20T22:08:42Z","timestamp":1392934122},{"_id":"0b0abb20-7974-11e8-9b58-1bb68f7113a8","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","postUri":"https://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html","replyTo":"312fbbb0-7970-11e8-9b58-1bb68f7113a8","authorEmailEncrypted":"YaMpVrTb7Wa90L05SXomCrINY1xjNlOrEyGD4p5zmCaVEIsElRCvc0MHj8SB4SNU9CYePjcXFHISyhSKhT8sj+dcnxAeFfTNgEuftPq2i27JrDM5IH6BauzV5HLaRgu5pNueZriI3PQXnCB3Asl0ycnAWhDN/XI6URHqhiCqcO/hi9+3r714WbjUz1j/AanFopSukF964n2qZqpeiphOOL8BN2VnXARQ3bBcgYx9S7dpHCsPyl1UQbbqnbaRmSpJKxEa4byZ9cM302t9rMz8hviPCik5CEBAs0mA3yAExtzlCbfXbd679MrNqt1efH98dgsKuhtT7q7TgTsyQ2Jvtoj9iJoZIjfVdvrYasovdw4i1S03T/ijD9DlICuBY4ittMljFWoVuDYLMQ4Q7zr0KSrQAmn5r/UnnaTbX9lOEhmdkEG/Tj4AW00dx3riEdmSTKhBBNqISUexXtQegWH1hr++GyAOJJpd5RYlpcW9ELdi6gbjmBf2WS6jF3TkS5rh3dS6C4hUjdwDDWTtuZKrPTDO75G7WwX0ArxL9dS+fVG93xHDK+s6D9Yzdn9G+FjX5XhIMuMW8cyffSJgeG50HJrr+bmXF2U3aEU3kVtJw3I/hYc7JewwppteCksEGbkcRZ5Ho5IooP46a/V0/bcXreopkKHIRLqLJRjyINcDQf4=","authorEmailMD5":"28dde5772b48c92e08b8050411aa5ba8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"I'm not sure what you mean by \"didn't work.\" Could you clarify? What did you expect the code to do and how is that different than what it actually did?","date":"2018-06-26T19:06:34.702Z"},{"_id":"312fbbb0-7970-11e8-9b58-1bb68f7113a8","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","postUri":"https://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Detlef","authorUri":"","message":"try\r\n        {\r\n            await Task.Run(() =>\r\n            {\r\n                for (int i = 0; i != 100; ++i)\r\n            {\r\n                token.ThrowIfCancellationRequested();\r\n                Thread.Sleep(100);\r\n            }\r\n        });\r\n        MessageBox.Show(\"Completed.\");\r\n    }\r\n    catch (OperationCanceledException)\r\n    {\r\n        MessageBox.Show(\"Cancelled.\");\r\n    }\r\n\r\n\r\nthis pattern didn't work for me. I had to change it to:\r\n\r\n        await Task.Run(() =>\r\n        { \r\n             try\r\n            {\r\n                  for (int i = 0; i != 100; ++i)\r\n                  {\r\n                        token.ThrowIfCancellationRequested();\r\n                        Thread.Sleep(100);\r\n                   }    \r\n              }\r\n              catch (OperationCanceledException)\r\n                    {   }           \r\n        });\r\n        MessageBox.Show(\"Completed.\");\r\n\r\nThanks a lot for this  very helpful comparison. I","date":"2018-06-26T18:39:00.830Z"},{"_id":"0a9ce180-bb88-11e8-89fb-bde33cd2d3fe","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","postUri":"https://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html","replyTo":"508c5a20-bb85-11e8-89fb-bde33cd2d3fe","authorEmailEncrypted":"AfsoWgJYr6lWaIcMdyB6b21yY0iOt0txRp+6p7Ls3Ax/bqjXshMrGndFKjwdKF4PQe3zkaquj0UhGg+MPaYD131214fq5qg8PZ0B/3eW8QF9wDSXqdw8bIve2Jf10iDjx3QppIGuPMacAhhWF8IGDVIjTOQEGeyAQ2x6yXW1Sq7kbyQR1HsXIQhWOZSvllI+ujq4iBFMKgKfWPa0JcReB1JMCtwUmh4LgSVJ2mg7GvWgHKfKDPz9ECvsriETF/5AhWvOOIq8lnt1Ih2c7JfyAx4Qxd74o1P7Qn5dRaTnC05UH2etOKa03YQ6JOI20jQJFg7jsMf9nb7ahHXvy6WXI2KtXhBA115AVK8xStGvByRYoPi/5EYBDd6tfLPnYj/fqSLPi6X5o0iWfqcGYA+fvhmr/6Ctyh4bqNtM45CYBz9DvjGwPHi73bODzHS8EHGff41qFMDXcthYmNggo1Q3P09ScSCXg/YJczlqDC+cNmvUxaRtUjA9Hpehqy5rvuXkTXEAXp+3xzixupuUn0QJSeDv8fL5rnlkM4tN6HHR2lnRqlz05uMuNoBHLVj0yz1bwJaWjNAHlQVaUC1MBVEUS/7Ew+n8FFFJA7FwCQqBpazWATirMUpzZUHxsRpY3X8oC2+ABLBHod1AkZ/DoD/0p7HAzDyLIUQYu2W2gk+0/F4=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"That is an artifact of how VS handles exceptions. Because the `async` method is rewritten as a state machine, and because the state machine is compiler-generated code, when VS sees the exception being thrown, it assumes it's a problem. There is no *user* code catching it - it's caught by the compiler-generated code instead. VS thus breaks early as a first-chance exception.\r\n\r\nIt would be possible to fix this behavior, but that would require VS to have special knowledge of the C# compiler internals, which just isn't sustainable in the long term.","date":"2018-09-18T21:16:00.958Z"},{"_id":"508c5a20-bb85-11e8-89fb-bde33cd2d3fe","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","postUri":"https://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html","replyTo":"0b0abb20-7974-11e8-9b58-1bb68f7113a8","authorEmailEncrypted":"oL2a00EAPgj0T3znc4Mwn+U2l5rDY96U1WqFBMqJdqT6DDFxgY0W6hR9rVULsHQOsFFm1fkgZ173hXLR+n5/r5zuRxs4LdvS8kJj+tI/N7psWwQkivliWpd58ufeO/EZLfa7fksUYc19kSf7NfzxgLp1Kc/8LQQlHYyR/cPMljSwmVoqufh4EWBQS7AaqpsNro/V/jxDi8Keg5Z2jrX79ickmsuXa4JiTqJ2v19aevPg//+6XaCOIilATUMTXsp9Sewracwy9wkjfu+F0/gKItldemH8AqhxMiSPoRGkwF+foNTLbBpHdOtU3XFwYZ863XRu4uO51oIGMuiIdVGiANnU5wzuVBnyG8E1hfrFp6IH4qVRAej8HwhfYChTrc76jHLuce5fllsQr/HK6gTF3ELeU6iDerTgOnauK69oN9VK9UbQilIWSjsoKmcHUu0JPVyKkU/0TNMJ1wU0scFxf0EEKhIsqtsxNIMV5l1IR4wjepH0dovFAJk9OnOVHfv47xyD1/sOxvdFz1hdXA0N3v9bm5V0s4/yG084TZqDlhvLvCcKGWofXFhyGB2sbUlO7V6WliTTm8YszP7BJwlNOTviYmClm65yh7f1xjxnf8xMlbwaLjoPCPs3Da3kWX7C6Y9yuqo+UI7t4YIRJkSNdE+Mwq2I8xH9NSljVRscETY=","authorEmailMD5":"83179169bc4ee81741eefc050ca328e8","authorName":"Jonathan McNeil","authorUri":"","message":"When I run your code I get a \"UserUnhandledException\" error when throwing the cancellation using the token from within the async method.   If you press continue from there in VS the exception is then handled by your try-catch block\r\n\r\nWith his code I never see the unhandled exception error.  Not 100% sure why.  Hopefully this helps.","date":"2018-09-18T20:56:29.821Z"},{"_id":"9830f370-7527-11e9-b939-cd471c60cfae","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","postUri":"http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"C Perkins","authorUri":"","message":"Docs mention that the CancellationTokenSource should be disposed.  That should be easy by wrapping in using block or calling it in a finally block.","date":"2019-05-13T02:34:13.466Z"},{"_id":"50c131d0-78ab-11e9-8fc4-5bfc95b35edf","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","postUri":"https://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html","replyTo":"9830f370-7527-11e9-b939-cd471c60cfae","authorEmailEncrypted":"MmumZ3mRN632rzD81GJMSGh187jmAhiLBjCI0mxj9u+9a9Y8M7tPkh8gHZhBfuhJSRt1IoKCTSOByE/VBRM0qbOyR30P/WG6sDSIx8LDCJGQ5pmuK+OzoBh2Dgm83z53dKFDMDgbIoaxa5g/OkQ/9FnPhsnCZjK6jYUKCUUHD0GSKDm3i+QyAig4Nq8Rnc/Z9un/jbdjBlwc+Otl/3cuK6MQZl4GxpV371Mf0y7tyUTG4q+I3VxVzcSUAqSeEk4fPXzcC6CUPJ3xtn6nEm6Qf1pyBc+8pnjAKuRwRtTNdK70lp5J2BaPzBqHJ676vYKS88y4DSIWdo4XJuXbhQGprkG4lNeGjBQnRMheUJ53p63PkOL0Vrjv7bVg9DFQeULQCkM41qDIBQtFEgba4hPzqRKzrug/M32EdMcfBKQmcvYLq6T1tGALP/6ZM2yNBy4lBVpEfiM/sgtLNJmMNp6a18jdYOwxnz9NMPR2fSHmgxU+/gX48A0CzQJn7bNdKpfjzdjLHOWKEWHezlGvL8xy+wfUyCFRSrk1VSxZU7aPBwWntJ70uRYh1a+IP9hm22Ja5Dv5t/V+piHxOYMCERSHaU9Y2mX6PsSXdz4A1vMFltgK99IFjvl5uJj/AGvMGAEgYW+ZVLlssOVcrGhdoaHMwpA5nMMxerxhoHPKexoz6NM=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Yes, thanks for pointing that out!\r\n\r\nIn this example the `CancellationTokenSource` is a member variable (since it needs to be accessed from two different methods), so it should be disposed in the class's `Dispose` method.","date":"2019-05-17T13:54:40.972Z"},{"_id":"bc1b92c0-f79a-11eb-85da-8b0bd83fcb03","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","postUri":"https://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html","replyTo":"50c131d0-78ab-11e9-8fc4-5bfc95b35edf","authorEmailEncrypted":"f6ATcNv2RD8D7uU10BX0DvwwOsSsuis3nAtmkhnehquW9Vflgc+EEkiIWVAm/A2lR70Lycdbq/KEFCp9lacMffpg3Ssv++o2RWJPBaG8nLGO5ywtA5q07FbE76OB7qVFzr7Jx99Rd3xAy9O2ywpmYhfCM6GwsF0Ayt9dEiaFYVRidNZhvwxssasloRyGnuz7/0yZGP+JKAmYdghfn7G66r6qCk1Zc6y8qQgPItmlMZMyZfuewRa1cKxUEubwInxPk0cKbCq9ixVOEkgjt0Q2oFyL3T5pGP1cDGR5Vz1Kvr25ooo6TnqWzsWup83yNF4QXzoFOCo535AwEKAocYmwdJ3zpT7jIXrjuLgYrcptbzmHd5gXj1FWH7kHwO/gZNTcpGHTUOGyEypALWn+kKvJCuf4YpTyDSUg2CZNt3aZzdBOWzZvC2HeubDGzGmHiixRhebTCy4E4yX+u7GGfWO0koKF+qFN12h99yIw6CP0TJi0oQOo1xBzecg6Sp5b/+HBQrWspHl8WpW4xohkeZ1oQDxLxO+Y14BOLcDLluuTZwGvBMNmQhkyA89IScrt67IbQOnOcETCXcHPWYkQrJ827X+3Oj2L5hBWDQy12A/TKR4Qr1/EtIHWEjhpyLLjsoIS1eE2GKRgGdwdA2sJ5Ei4S5XMUX//Px5RyyuKMs49Hbg=","authorEmailMD5":"f9a925838d5c9437e576f66658f167b7","authorName":"Serhiy Yaroshko","authorUri":"","message":"Great! But your answer isn't complete. Let's imagine we'll click button2 several times in a row, every time a new CancellationTokenSource instance will be created - when they will be disposed?","date":"2021-08-07T16:15:52.024Z"},{"_id":"1c743d30-fe2f-11eb-8029-d136489c6dab","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","postUri":"https://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html","replyTo":"bc1b92c0-f79a-11eb-85da-8b0bd83fcb03","authorEmailEncrypted":"hHpNNRgdbVFQtvLcxE9tpo2z+up6E5gL8NcbpW9yli6qjVKm+yyDUmmC6uemAzz9wMkPzfD32BTamYVgvmf+zeNswVtjHai30FzmHdkieU0GAGxnDryRzhtuW8Hr/duDdNOy7Db1+EIrOKBINrBfJKAPF3XvshYR5EWVDUVm5WjDYVMWrAMR4wk/Me9ZtWJnemJAZr9c9prrGlI5szJ8FzVgF14CuWb2bl/LdAN1TLQWCFBx7YC0Cu5nETQQFXlbHg5+65n/mOEurI9jXzo42S1a7NlP19HF1EfbwihkkwSUNNp1unuF9CQ0zTbd+ko15A6wQ6chNkW98fNgxJbd6PZA2F/1ThyotdedjulPRt146IzwZDAUPs7KByR0T0NzyY/G1/XgwGR/cKXuNYsCrZrX5KpuBis9Cywkm8wsezXKhxfp7Kfn66zChxsL2Lq8NWWoj+0kKmULMAKOkosEZNInSgg77nRAWfEnK7m4Y9pA/J+o3PxH82+lVR7LGQ+tPG5BNEYz/scMsxeurCaySACH53Z5E7+gpgdr2hSrYLUiV1NeqaLD22nvC/PPE2mtNq0ArAEoLbsvzy9z03/3O81zv1TwuPeqGp/AzH7L7Uxi5xI8grVus3Hoq5JVbnmJsx9UtI8K8X967uXJ7mmi8MPW4Nzb7RX4aQfQTHw3Okk=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"They won't be, and that's fine.\r\n\r\nIf you want to cancel each previous operation, then you could modify `button2_Click` so that it cancels the previous one. As the code is currently written, it starts a new operation and the cancel button only cancels the most recent one.","date":"2021-08-16T01:13:06.064Z"},{"_id":"2fbaf680-ff84-11eb-8a3c-cf8e5f9c2e1d","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","postUri":"https://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html","replyTo":"1c743d30-fe2f-11eb-8029-d136489c6dab","authorEmailEncrypted":"djvk0GTcvhjIgLfq/zSrBbfydLv6+KVb6lR/Mbsuh68cKFELEmVuvQo4lKpTIGl90UB2jqb+cAgwkUWJBSYMR2UrMJ0VK4x57+ZzzSqFccgbFqJahwHPvPKTCv5a+atnsvWjDU3rPnW07B/4EsWOZ/3CH2U5NwW0KDk7kphspTstdTgB7ixOAPKPzBNrIpS4jDx6m+AuYE6hSplpBBufii2ygwloL4ORSeTZ67wWma2qlVex6nIA83WrmdoEb0YqFmCE5WB5mAtMAl6g3FFCRS37btpd9VG15lMjhjUyrKbugz4uD3t1GXa1e7gZFt2yqIIceSLojtbLXUTkY1wtcVNMd/RHgrk8A0lR4V8UKe9LDvGuaJ5H04ADDvBeUyoegwkBIdRdN/MH0V8I5jkujTHE413++zMAWPnBT/BebSO9MZm0Z7QX7sFDqQBrkTksYUDJfI0xC/XztRTrFGebNBOAB1y+TV9jTqQQfLyDkIvw5cvJqaOCK6SRktr3ZsizRr+bb7QHLyQ9GjDIanq3baXz5aM30y6BaRGftT2n199dh1TD4y1+/X82+oXOq69Rxdl8E86rqNM797v/Vg4tmiKdq0oTn4Za7qOoa1qCJBCUoHuWSqsRQzkZtxJgxmXtUixT7boYyUA/t9dgHdKuiRCHRSlpROmDKhI5Cnrvbr0=","authorEmailMD5":"f9a925838d5c9437e576f66658f167b7","authorName":"Serhiy Yaroshko","authorUri":"","message":"The question was about disposing of the _cts. Look: the button2_Click creates an instance of CancellationTokenSource, then tries to run a task and catches an OperationCanceledException - excellent, but when _cts will be disposed? Perhaps there should be *finally { _cts.Dispose(); }*?","date":"2021-08-17T17:54:36.894Z"},{"_id":"00583eb0-0011-11ec-a60b-93eded6841eb","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","postUri":"https://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html","replyTo":"ce402260-ffc2-11eb-9e24-8ba088b3ba29","authorEmailEncrypted":"mSrMACxsYfTGJ/2olc/IuQgYgbQUDNZuDFf1/YcdfKX89PUjXfvah9EW1AaDyQ6o6XXQ4qjiraGWMbmSLOoLce2evSmeU4avcVON6JimNILOZqccUMEPbzrKOLiAhC+RvUIeilF0+AqwyAb7LdrNbxKz5xBD1ZyCD4+wsnc6BUViRPv7iGkVy66wxKTaOUGLZFtl+mZzCUAXyRl87yDg/wRBwKDOVgK/+AJM3Mq978UzNYgWigilIBa9eB0D0IKnVtwRTvFftx3HfKDuN7xijYfF7fDLjcBiu2xmluhXXoXMwd4xuwTZXdDKZiB5vjYo741K51jgDdPz7AVtHBqyhISBMjNRxyPVAySaUAEXruexCtkSjTXiKUeyk7Wo0qzaE4YZG9JXUv8jk9LWhjIjgi0ZHezy3ZR6t8l6743/oqNoJr+jGdfWNFCFG7+iKm2IbrjlU28ICzrxLoLYVMVe7EW0HFViTjoIuqesVGQj6amMcInCpUOD1YURTYCSfBRT41f7hLt6aWHDRf5wQ3wOI0hH+zJAK73eijPVJakyaFchgwQ27ccr9utVox5G6oOkqmgsXMovzcMDH1Jtxyywfm3Q+P2ZVhNqfYvtW4035YudaR0nhZt6R4U+enUHFxlF8Gs3RJiZbnr/7XfO8AzoE5hXp1Mlyn2Gyw/81hqpBYw=","authorEmailMD5":"f9a925838d5c9437e576f66658f167b7","authorName":"Serhiy Yaroshko","authorUri":"","message":"\"nothing else will ever use it\" - yes! of course! clearly.\r\n\r\nSorry, Stephen, but you confused me: you wrote earlier \"it should be disposed in the class's Dispose method\" and now you wrote \"it doesn't have to be disposed\" - ??? Should only _uncanceled_ CTS have to be disposed?\r\n\r\nI saw in my program, that the CTS remains \"alive\" and accessible after cancellation: it is possible to ask CTS.IsCancellationRequested, for example.","date":"2021-08-18T10:42:36.390Z"},{"_id":"b59fd510-004f-11ec-a168-3dc53b614538","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","postUri":"https://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html","replyTo":"c30ba730-002a-11ec-9e69-6b718e5265ae","authorEmailEncrypted":"qRB9EaJox2JJLANFDs0hu/laswxT1+j7s/v1jI/l/pBmkzVN7rikXSISeN4FnTBFqqqAEgjDwQnekhxreccg+3BERZHFflXvG5QlswLXI3jEW894k24jbD6Q5pVzTPnM5h9tceASVPZoOhWCeWmMdmoHFJrAJYzy8fKrrGTWR2NtyK2yfoVgdptpuEoEFF4IPRl5VIEQp7y2H0U0P2IgqZcxHviQy3M7rrvJM4dEUA+BQ4s7Gt8GYVTRd3yJNpgma2V3mjrnqTWok4SwwXk591XG3H8px6YF9NJhQpQEOClKi3s2jPCBoOQo0cwFgnVF/seOCNfczRf6XjuIZRtzm2HO5FBYxJFiQpsx69n0Ca5tzanRRsquMZ5iM3pdBE7N8xIu3hdvaP0VFVnZ6J4qRwJQC9ejK4OWfbJSdGe5Nvd/PXZ8y78ijPUTxCclbQBpTZuSjvgsQkGbRetAT4lX1nXWOe7jc+HiWfT/CukCrgNmdfa2PW0MD6hcAH3iKl0yLQX5lkgKw3nHo0xxbf6a+kBcvfw24QPaSjNQM6WqKno9lleCy1m8/iTjG7kqOKL2EXHQm3OcAgBCyzooxbX8RxKOFhPczX34CiVTOL5FOjEmfyUTY0RBykQfpptohSqi0VR9dbKx1ywQaMNWUuZ3tEHq2NxXajDmo3tYo3Zja6M=","authorEmailMD5":"f9a925838d5c9437e576f66658f167b7","authorName":"Serhiy Yaroshko","authorUri":"","message":"Thanks a lot for explanation. Your blogs are very helpful!","date":"2021-08-18T18:11:29.267Z"},{"_id":"c30ba730-002a-11ec-9e69-6b718e5265ae","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","postUri":"https://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html","replyTo":"00583eb0-0011-11ec-a60b-93eded6841eb","authorEmailEncrypted":"SasSCYk8tkKgiBhn7CP2cjShOFLq8aJKb34coUs2wt9DQkLVuu2s4GtTVVtHM2bwNuaBfIZGlxZP35pfRVKgYBfe8pMYUP+ttPlnEGMC8iYZTW7Gi77ETd1UKhe6+aoiGl9fzG5b3gZuSoyXGqZkg288lyZkHzbp8ZhiMKk8h6F9hP+RWXvzFE3BKrclqAJiENtpDp1J/Z7/Jn9kMarxoijqDpdNCTVeryV854W5Oxl+E+eCIedi2BIWu9ovH0Iwc6d0nGrWCDHNotiJcLjiYOs2kfpjU8G9vv64O6lyuQQDqsc4wd7suqb3YrAe7FBhCBLTGHaCC+a616fztW4tEFlY1ATkm0Iv6+1mSBwoedCuhOq+mGmkvITeLkycx5lUA+JoUL8hehwUs2VnLjru7bK/ICNEqJqHTL09PcfeH0uXU1Du4rTB4gsHOGGbtuVKJ0GFR8jvXqOiyr3meYsCQNmI14Gxul7wcRcXf19XhxIGYN++EpYoiziaYb25LHaXMLoZrj6nYNi9BvW/493eByD14y5hEeFGlY7rkI4XwpjSoVqPXC4MKXdPFL/pd29WDxYtVuwOne0chEDeMAY72MtfIpwEwbQqBuCHkdJEG+uP47g6FJ6xb9A09dZhipZy3mu8l7bUnwmmEfGpWTAcv7xTRrzEe3WOSIWe0aA9+pM=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"I commonly leave CTSs undisposed because they're not worth the trouble to dispose. I do try to structure things so that they're always eventually *cancelled* which is pretty much the same thing for that type.","date":"2021-08-18T13:47:00.422Z"},{"_id":"ce402260-ffc2-11eb-9e24-8ba088b3ba29","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","postUri":"https://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html","replyTo":"2fbaf680-ff84-11eb-8a3c-cf8e5f9c2e1d","authorEmailEncrypted":"Ub4n79BdYnEg11Hc5aEJo2m3cr8+/61YAT6sFIdWW/iQMYr4H6/NHbHK/j0AmW7nXBHIQT+eicTUhJxgGbdLsMfle4j9b6N4Qm3N9x4Ef/fyGvLQpkXRHmd1y/2WymeOe9vEuWOop2qlRnGXhJKoLMLg6uoyk+z54j1cWiUIFvoRbPbLmXurTBiX8flvRCfqMCoxUTcwx+ZFSTxJQiTcznQC+ZLFHaN1pgDu90V7hHo7BPvVPFMR67lCtXe1YGzbx66At6NE6NG5n188QssKg5Z4vY/Ye/VNFhcEXBVepVyDqc6uYWh7+d8J+A4By9EvMKcjt1aCyAaqDc4BS66tXEtgF3o9311USuU49kxHB/kHFttE41qd9f+DUDVKpyuKqvIMXwalwcY1WKER2A1lnyvQjKQ5EF+ciATs1fGjyPQg1yj+z27Ddi0r0aYtUScPMk6Qn9r3b21CntcahxOIdJDrS6NKK97oq98vwuZgOCzXHt1olTP1tjVvedC0cN7I6FRxgS5r18lNLTjLXLcdm3alvF0gfJUdQYZkJXv5/GhkQVmt8ePRYT6YuDWfXKukAiErME8GF+Hpg3EwWJjj7oKBib2Y8/Gfx2OAaTScianncyJCuJ1F7QUsj6gXoDthEIs5fSAtnjiQKdA71mT551SD8V/iZ+QRIKmbuiNrBeM=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"The tricky part about disposing CTS is that you have to be sure nothing else will ever use it: all code listening to the token must be complete, and no code should attempt to cancel it after being disposed.\r\n\r\nAlso, cancellation actually cleans up all the resources anyway, so if one is canceled it doesn't have to be disposed.","date":"2021-08-18T01:22:51.657Z"},{"_id":"bb2511a0-63b2-11ec-8ad3-c30f69466807","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","postUri":"https://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html","replyTo":"","authorEmailEncrypted":"NNL2RVxaadadWVPJPmYNtyNRctl9k6+ltYL5VfV5de31oN4pFBuZKNKLrv+HJ8ev7JMXxDWAm7WP0qFM8F6uKW8v6kDe/eOwfcEZxND0cpa/Ud12/rqItpKqLLL8c0fyE11CkGmeFTAlHlxjqT5lp0/ABrMoYRQ/sAcgjVBenFn7iJAx9FeFBinHErpD6s1fhkpncjAEOYl4zqrFEzzUemmK2Afe0eS37y6DgCLqes+ybyrWOhMVTSlY4Ksb29QNT7+JHgXiAe6Sdg7QQBm27+N/YfKcIGG46SA8Bq2vFwmxPQq/RtEwT4HZ2WtLWu4e1Tba++VVs1Xs3H7Wog6J5/BbKiG14nLsCk3vWY66/kMoZr+tWJ9IeTo6JbxsfS9ZcSrUW6pX456VkgUcMA5RktJR84KHbd50mdtcGJ+PgojatpzKVu3dYQ12OjQdFw6TdDltv0iq6EHMPDLe6VDVddvd/X9cp2JOHBkQGvAnRTx+j7Uk5tyypFszEg97B3Rblng4Bi6Y7cgOazF+USzHEdEr/InY64hnsqhxklsPAnWo8f56nj282dCbo09fOMwkR3OwKe4WymfKXIcEGw0ynfm7abvU3uscYLgyNFRxpt8KCiBWfBQcCxvk7XCzAt0XxBzEKiuxGfJ76yAOMA8gGENW0unFrcVfq6fEPl3XQ94=","authorEmailMD5":"d9ebd111e4366ae43c17854164371a94","authorName":"Ghouse pasha","authorUri":"","message":"If i want to implement a functionality to fetch a single record from database for every second and post that data to API using HttpWebRequest in windows forms without effecting or freezing UI. Which of the above should i use?","date":"2021-12-23T05:39:43.956Z"},{"_id":"dc09ccb0-66bb-11ec-8be4-49f74e847e2e","postId":"2013_09_taskrun-vs-backgroundworker-round-4-e33eb673-a094-3715-9282-0e28e7b5e733","postUri":"https://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html","replyTo":"bb2511a0-63b2-11ec-8ad3-c30f69466807","authorEmailEncrypted":"lT9BGzZu3FuUY9JTL7oaAlWPC42Th1ENt1CJ/Ls+9JbfPPaRBTDEqmoeJKBAG+CINlrvecdvzGq073w78MZ4I5cleNrODfksejcHOAPhPKdRg/Pr0Oy5kUgCMxgUnQ5JmTHf4gHJC6a5YsWnI4TyvceT9UcUXdfEYx7CSZhNLuH0p/+GjiHmCk6H13wkNKts7+Qwe/2DgmS59ODAozk0BCP9NkK8nyXFniOzAy6jRe9UOQFa3YROkgO9RFbINZkurJXPvxuQlmqx0DCKuYlX17o6RR7C5/py/J3vy3KKHkAF+bBmsnEKg/+bjmmQda12o8h9AEsn2DZrgyR21044Fsvq/jqa6msyeYm7N9LDlRY7Xg89H1g7Sdd6gG4ITaOsa7Ymi93p9Ra5PYAQCLQdwGd2tOvsSmIRfSp61C1GMygYxx7lWHgGladITr9AUHUItdXaI8BlMwLa2INt2SQbmg8zpFtwa8vcwtWn7Gr95832phqDWhLIdR0l1ddwtP/d0CqWO/qhtRwKPe6TdrOFJ3SwP6ZiqjDRAp//urDuhTpNvyG62qJxvVs3ttqh7byZ17IKCWaBhwrHweJ7i6KM4EgwcLhjmrpMCRoxHnsfPUh8yVWm1cJx59bf65YB+gVAUMvSsX9tJpJxOjavAQlSbAQa4L03dP3vYNtYNHppagA=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Since fetching from a database and posting to an API are both asynchronous operations, I would recommend using standard `async`/`await` calls.\r\n\r\nThat's the general rule, but there *may* be exceptions.\r\n\r\n`HttpWebRequest` is an old technology (see `HttpClient` for the modern approach). It does proxy resolution synchronously, even on asynchronous calls, and I believe it may do DNS resolution synchronously as well, at least on some platforms. So, if you find that the standard `async`/`await` isn't sufficient to free up the UI, then you'd want to wrap the asynchronous posting code in a `Task.Run`.\r\n\r\nAlso, the vast majority of databases support asynchronous queries... but not all of them. SQLite, for example, implements a blocking \"asynchronous\" API. So if your database is SQLite, then you'll need to work around that by using `Task.Run` for your database fetches as well.","date":"2021-12-27T02:22:37.941Z"}]