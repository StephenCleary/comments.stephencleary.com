[{"_id":"78d15d30-a73a-11ea-821b-255203224253","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"","authorEmailEncrypted":"F6N7CCndSXFNKCnuNSAQBiRhtbOOuQpkvch0WyVQZ8B09xLdaFz7FdhofkG2HUZ+sfNj6R5A42GZKH8XEIDAnAnphogZxCTn1LCMC/b8ouRe85fIzVqxLKc7qDWGYsQTLzjM7WAoa/5M5zPk04yEPwsun9NnueO2S6joXXHz/JQvcSsBdoxQ9VxmfpIiMexFy+zGcCn4QpIs2z1uUjDUlDov4xBw/BeD6e+E9QsLBTQ86vHPaCgIKGnrVTMQ3NYAY7K2pNQ0T+E0IO/xl47G5heHkvOeFNbm7a0AEm2CNhOgrfegcilxuHBpzdX+4kxkeEAg0jGGeSzDlmEFnhSBhix5UCjnssTXW6+1SKlrTDbbk6dlBRxp3g55aDWe31N9L+J27ZFVh7pQWFYuuH+A9f8MJDDaEIjBMcUuKdDF8Fbhg1KuzYRXH1shnHjp9CoTbw2MKH+B/w2MEAd6JbTkXmdecjPId046Npz0o8IF+8G4WOf/hl6rS3JI/Kw9R7TjPaiPzw4GElz7yZBlcCUwKAJdu0Tgrvo04coz3J0Orgcs/G+2hipW4OMnNTPCvyImFuIt/mIflp6+RrFZzyY9P+AXF5UNHDtZhsfSryknEbxKzOTsBxngt+0dvMA1tkCxvJ60b/fOYl3NxMF/rqmKJ8IToE9cthEz7WzjMdQ/YQM=","authorEmailMD5":"496e6cdafe3ebcad93f8748bfaa3bd9c","authorName":"Julian Hanssen","authorUri":"","message":"Great post! Just wondering, why the trick with \"when False()\"? What makes that different from just logging in the catch and then throwing?","date":"2020-06-05T14:40:16.784Z"},{"_id":"bf967d40-a7a3-11ea-b22d-fbff1993581f","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"78d15d30-a73a-11ea-821b-255203224253","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"John","authorUri":"","message":"Nice write-up. I learned this lesson the hard way as it was not so evident when starting out.","date":"2020-06-06T03:13:52.674Z"},{"_id":"d335c870-a7e8-11ea-94d9-21ae2112fbb1","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"78d15d30-a73a-11ea-821b-255203224253","authorEmailEncrypted":"BTMdp9T1mS+Hx4Lh+0qvpWH+MOefygte7xrh6lqW9RNAM3fZRQ/C0HaGvQuKrsVxh3yHHf7QYvSTDZxi1YkdHfmmtH/zVlb/yXllkqGJLR8o6Sr44L1T19GzuYdE2NGu4qDPLMPLLSLBGR4oLLn2SW6JI5vhifLmVIEiVoNePxWhlr/W+msujYvrdxu7ZwfqkO0BU2Qb+zD/xlYpj7kLnpYRvgHwlaIRoiDpmGXX2TYmmYs9gq5wpw7ttLu1D5VOykrvj9XijP2T7Vp/bbRsLBKpLAX10bONHt85KNloRMZWhc9OLpZjU4PycCGLEfVtkQqDUupnJTW5KjNnaDLriIz+9GBzECrLGWkHZesYj0RYgij7fFZKWXtZgW+I18hRuYmdbK4JNrLgZUr9ANcCdhFR267/znfY+GRSXQqv+GsM1tdzaRJo8AHVketsh5qZHrEk62vZWFa/pnddqtCNbpsIsYwBNxhpKQtrppInxkEuVGbJbQ1MfUFtJR1asCCGfcnGVCJf6fYPIvOdGS5+fiXllmvPGd+GNOuJ/owWTx7ZMX+ga3S40iXlMBHPWzwQBwvJtep+RaT7+T80RAzsVQwdFFrwGUmsU8rvn8LvOygFeTv3oZOom0LxSAZ0tiYW/swOpcsxz5ZX8lb3IDpcMki7vhM7sY9qHxZLdYmEHqE=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Great question. I'm planning a blog post on this pattern soon, but essentially returning `false` from the exception filter prevents the stack from being unwound. Catching and rethrowing (even with `throw;` and not `throw exception;`) will unwind the stack to this point and then throw the exception again.\r\n\r\nIn many cases this doesn't matter, but there is one important case: logging contexts.","date":"2020-06-06T11:28:20.868Z"},{"_id":"aaadab70-abda-11ea-9057-3d8b9f1d2c75","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"d335c870-a7e8-11ea-94d9-21ae2112fbb1","authorEmailEncrypted":"nldR9zuEoh8XUZf9wP8YVESFfyH6A95nKgmmQ3zafDUNJL4jSNO1s45ekdkbCAja/di23sDZHhxAiG1YC8dtXmc7xn3rR8Pq9QN5C6NxJCzYG22bbHyb1ugOyaoMHY5335Hq8wl28nATpmmuZrymGMv8nJBnQAvcTKtIfNs93GlWkaxfE+c6fjdtZrDykIuKW1/B0lYEKs1KaULkSb2OpwYsU3NEFlJgETQt/DniDzbWw2DVUG/ICfAorI1LiVNZd/JZpqJdEqwHAEZ4XxTjGT5B0mG6ECZKaVofo5T0low99NiXYMzj+/oMCwV2TdKS+G+V9SPVuBIrm2LN2n2iR2R9YFr9pezUlyqn4jDoEJtXuuCmPj71yw78qMw05LtGWrdXgmxqcMCcXyNLPEsBo/8EUYa5h9clmmi3nr4TIZHCg5+I4p4ZIGAsWzSyzDsKWZXuE1ZQoFJ2yW6IxpGXL2aimW+BqpSBTgHH3P6nIC2wL0hOqr0LwB0InJ0B51k0yIWITYK+thCnMZ+qpVwaIxp0hPWdTLj4ZLpJ6496AVtIU9dpH8qRoSDEdUmy5f+lhB/hTfr2KE77KHLMIAbAnbMoyXODL/aYLfurWU2QWvv8+WLdP+fSkNZOKO883SjBtava4X/97xUz1cJqnYk1jz6kAH57tsTIGKh2Pw7JbDY=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Blog post is up now: https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html","date":"2020-06-11T11:57:04.511Z"},{"_id":"5d909960-b265-11ea-a868-2d28d91fdf57","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"e5ffd7f0-b262-11ea-a868-2d28d91fdf57","authorEmailEncrypted":"mepqWA4fFFovFr/dgePvKyFivq5UQaBAb5QSBOfP0+LKWG8fU48XFu86XVa5LMwzRQN5Ov4biMVmKyFcC+p/0JngneQSZDOnfthqnXOuUpa+l9UaPoPhTQvv67NPslltZ/6a1bHnYUV+1E0vJhjX8WZj04tcenrDitHyikZ9ptphsYzW5bWvhx6GljCUf3H2rN3qacaidfkuR1lLTVnSl8j2aUAmq1cWfzSpuquyMb9NwPYL01CUWykSJZxDT8jZnhjZZcyriyVoVZcqnJ2fCnv23LDHor2Yf1jZxGVk1ykyVjEi3xqZ7jXE95CLqz3Wa2WwX4KPDiTbSgJZwbu5uYjOw8SDi5+qUmE2YBik4/lhZRMVH52Lf4iaChJiYGJJoSMDsH2TED+1iqrNmobiOvLr8xD6Rf0FyfUys0dtYIoRP89w15qNSnklFM/KR059h9pS5eJqAaaeJgVSprzeqhcBOJ2qXurcGP2v32egZyzumIR8rICE8xTki9y40z+l77bfdMQ+HJbSngUiKX3NRVvzejXcKF8CXKowDgm8X7shGJAEVPsKd1Mqy7ztvsRR0aiv8g5GxV/0iTzk/fx4cSZd0IIyZQU46FWOvLSrMIEdy+8L1QLu1vQSe932Eo7kz8xgVPLcXUCczdP0Ov5YkZ3G37JbH96wE6r6qB+A0tE=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"I'm not aware of any .NET Core app that runs multiple Win32 services in a single process. The only `ServiceBase` type used by .NET Core is `WindowsServiceLifetime`, which is an `IHostLifetime`, and there can only be one of those per process.\r\n\r\nFor a .NET Core to have multiple services, you'd need a `ServiceBase` type that uses `IHostedService`, and a custom lifetime that interacts with those and supports multiple services. I'm not aware of anyone who has done that.\r\n\r\nOr it may make more sense to have `ServiceBase`-derived types and have each one create its *own* host. That seems to make more sense to me - each one would want different dependency injection and possibly different configuration. I'm not sure if .NET Core supports multiple hosts; and if it does, it's not going to be the most natural path.","date":"2020-06-19T19:45:02.242Z"},{"_id":"e5ffd7f0-b262-11ea-a868-2d28d91fdf57","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Andrii","authorUri":"","message":"Thanks for the post, that's definitely something to keep in mind.\r\nAre there any parallels with Windows services here? If so, what happens when the host is running multiple services and one of the services calls `IHostApplicationLifetime.StopApplication()`? Will the host stop all other services and exit?","date":"2020-06-19T19:27:22.718Z"},{"_id":"0b0701e0-f449-11ea-a00f-b79f815fca04","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"","authorEmailEncrypted":"VusgkG+wAVLSNHEQMpLo4IyPXHSEqDX/yOwMG9LqvMHjCIHdeJw9qOdNr3ZUvY4vwSIbB11uh8Wz9UW1PQsSmR6FI6d2CGJf7goAPp4WULdvG8GsOd4pmP0HjHW4SjBguNZpRH3lKjwx6V6c9bAT1BKy22Y0LS2ctqn49OLnmM2x0VMC5VZLkHbB/MfdMgjRE+NvWPl1kDWMjrgj4v9OBKXgvqzDApB4iR68mkDU9eZ7ug2iiWITtSuxFXIN8kxp6+YDhh3X8BtVj10QnXorvnbHaEtNi/M74xVuJYI0fBq9ngn+E3BjqFoiEIkaZSvi+nVe1dEfduMOP63ckx7LMC4o20tuHRH8Ix/tHFSoN53/TKrCRCstcx2Ix+UhmS23MrqtQ+oU/V207V20aj3zSFBJnj3kd2eyWSQef+QTNE8wp3kaYHhf6THeeJisJ+aDTrG+QGYBlpGfbB/vjrmn1bvXMVsbs21o7Ho60tpqm4Tc8IaEIrNFoEiB9oGjWAZbCVOjMn/ucXybsCO2rYaw/Oumj3YrruckScgGFNGa7IrXuHTqatn2jI7v0hhT0iGO2K6LXBFymKRAuRfne9xYbYVb4qvZ5IuPv5st4ySVO9Q/i6Gg+5A/+mRj6736yXyY3U0OfatKU9l9YsPcvpRMEq4eluMWK87cDDyCvD9giGE=","authorEmailMD5":"83a205a155eca63163c0cf52a7d8930f","authorName":"Jo Canhoto","authorUri":"","message":"In your example putting _hostApplicationLifetime.StopApplication();  always gets called.  so in this case, the service is done, and tell the application to \"Stop\".  Correct?   Does any other wiring need to happen?","date":"2020-09-11T16:08:34.685Z"},{"_id":"4734e660-f605-11ea-a11b-979985d7b4f2","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"94859b60-f5f8-11ea-9e7d-49244c1447a1","authorEmailEncrypted":"JNQD8O2LsJNTX0qqIOvd4gcpV9VUFs3V0dg4YOLPtFf9L/WRcY76W1r0m4CoIZ/OciZiQx6J+trwHp8uwEd5osYzEAPxJ0kbq8luq/rKtLXw4nWbm34Lyy5AkJNwFIW42fStbZlhT1g6nz5NQg+2hGMXTBD7gpjHZYjZFhF4izjq5CseXOuNm6iG8XvIxRTFQISmw/ek4Kqn5gXyQwi3IlRckTzFRBqDPnlGhGCe84CM2e69ssaHgJe05xtEYp8qUnYujavjAhuflGFBKPIR/nVHCJknkfRnj/rvVUrZ/LNDpjFsGDwm7GQKV5/w6cNfsSWbTGrdx7Nzx5x4/iogMw4XuUX92vLf4tYOKfBffu1SZHfjjLXHWTDZe+pc5Ze9YPljngi8Wnk38B+GswD0RArVaveg4rePW96VyGKIK+lLIRsZyHjW5Dd4G7OU0tP6mSAXuoZBIPUym4ImL5n82KyxoXvNcK4HUO2+HUhLrMCBW2FgKAMchfJaLR/dZw7XKaQURNbRZyaowVKdGNo9xi6K57QMwNrI/lW7gUkP/cWlVjyLR55/CaU1fWDMk3MjuP9Le5zV5eGeXUbF7MX2m2tmW6+5jomuhrNDXESoaU5DHE3u95IGPsBVnhZXVmeQfI2ExzN1/sSDg2CvhKbttbarI6XeW9ZYNhdCy1tsmdU=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Thanks!","date":"2020-09-13T21:08:32.043Z"},{"_id":"54a1b7d0-f5bd-11ea-816a-15463d977261","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"0b0701e0-f449-11ea-a00f-b79f815fca04","authorEmailEncrypted":"Gq0xt9LERwM31aPtZQqT9zO2tgz8A1apDvbjvRK8jkGv9t7gbkQxuOo0X3lbMrum07MaVP3hU7pnpd/kM0dDAhe/iLZzOYQFIUCBem2bwSPCzNW7iF9ihCmxa4uy2PLExCt7ZZm6IQnz1Vcq7e+XO++ptjDvfvAHeUtMxRR3NC9XySDLtr/uPhJ2pbNrbVMSi/h63L7f/I1B5TwlLejIZDP4jOngEzExskCdtsOy6u+2tt+FpJfhCOrLNQmanuUoN5nr8HcvUX4qVc6boZDCc+DKrAcoJdyrd29TRHLpRjma1s9D3OeQndhdyyz6ISo6kP5zapWELXVdBEApXwPH/JTITEFJZPz2IJvHCzNKvudTNyyV4pbBDcxc73pFnKJJsVHO5JNXKkJWauo0BErJXo/Ta8h1JF7EPg+VK7FrQcF3/rTd5ctFea3vK8loqJf4s59tBGg6WmLWZBwwEVOebgsvTbM/yi+VXUxuGrpNvNztJdhibR4Xw8SV1tAmcMMaGndXSCebzAOaIoZn2+1jNYZKBOpeGuiKkq+TCnAhqYiqZ+20cO6RzGbmXre1tp4a8FaAydvBXWqRF1NDLZa2uYVdMAqrX7z64icmFDSBh2JdN4ehgABduHVyJFBuRLPd7KxTicpSpdV7/ii4IBvRcSlTtNQ+78hRoNhcV+wVG2A=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Nothing else is necessary. The intent is to stop the application anytime the background service stops.","date":"2020-09-13T12:33:30.811Z"},{"_id":"94859b60-f5f8-11ea-9e7d-49244c1447a1","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"","authorEmailEncrypted":"EfG5SLGaCf7A+nvJ2YgUtAecR5ykv/XwqkustQcHFmd+tknnC+6d4U8akRH3xR047rnd7j0jOiSdYHrn5mWJKUENj7vV7JcA03KXXznmG+dEAISg5wZrqiiuWvbpAVY3N1Vnt+ovvns1h74ZhJF7zcRjaiOVAdV/cz8uV325AzRqDiYesKzlts6rF9oiOATXoAsFvSYJfRrhqOOnxn3hq+JZaFPdgnacEKbE9UGadLzUGxXQPfUqQd1EI2ZOMWMg0sTU3nXLwbSTocoKubh82F2PGkcw2bMBUVnQb+fmv2M4Qc2sZW6ewTUQa59RPOuIJenZK8XFhH9JYD7JnT+7LGxMBZGfFX9vwoV0VqpxoG5JKdoVCDc7jEZBpwHvIaJbTzC+kCQcAmZM4YzlJiknsQXxqe0Gq/ePTv6E3ckvmHznEqguMNJXS0I+jQ+4jdvx/wJJKg8Tgww1mrzLFskS9zmhhzJSPVmaqIMdB3YJQ2CH9xy5kAI2z6eVoriy5Y7x1o+emb/lVo6+EIBWRO4LRyCH2s10ddjxGYMXTCRbYUPsRH/MZ2EnHON9OStbMtE2fBvsI0GxCRPv8SMqzqyv+Rxuo/HmmFn30fn331pZjEZNDvHsJSVPc3tqhP5PbVl7zEnPOLl6rPSWKNpGS4ukQCPT++gYhOvPWICE/EqcykM=","authorEmailMD5":"61522f7f3be7cf77704dd730a6f91940","authorName":"Christian Christiansen","authorUri":"","message":"Nice post. There is a typo:</p>\r\ncatch (Exception ex) when False(() => this._Logger.LogCritical(ex, \"Fatal error\"))</p>\r\nneeds to be</p>\r\ncatch (Exception ex) when (False(() => this._Logger.LogCritical(ex, \"Fatal error\")))</p>","date":"2020-09-13T19:37:38.332Z"},{"_id":"abb1dc90-19d9-11eb-ab83-5111b5bec834","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"","authorEmailEncrypted":"ojSWA5RS4wTUX5x+XaYNnzOKRjNyDOlCCu7XUiGTlqHvwefJTqSzNDtdW3Yg4qTXOU+dGr+ny59B2ysiek1Xik/peG9byDvkkDCQr3Jrk1rfpqCBYVZ8eCpX4T8UnSusDKXL1USwQm6nu1wO4XAKBbkme1k7e6ETkI6mw9nP9dDG9Ntx7VjQPkN9Ppmi2OFnAM4nA7VK+FZ6QbRS49TdHby7z7RncS6oivg1dGoVX4ui015flCkkG5+1jsSE8++1q9fLOwIKrZnrBtyTX1I+RLO17siCnZhkgZnkFH+Z7jkd6yceXtkiw0nB0/rV6HQS7i4Wh57xQEuaIBXTLCQzhLAdBFBKkldaBTU8i3DeHqOdKCXjfNS5CyBGoYal2BjxStNIBFqnfJ74o//4jrWmzURa0+CN3jEzIMB60p21fyUOfSdB9/MyRYspBEudD9hft2qkSTp5gvvpM0a55ZoFqwGJvr9wqIL5CDzhfL0M6p1fzab2qClr//MzrCnlapQCV6GOZGnAxgft4A9CXAs9NvUQyEJGXFhJhm1FsXeqSMEqIL678oSslSMgZRH9m5MQP1rfJO+jf/dYtCopskeSuIXNtvPPKJbBhiS0o+t0beqsuv2dw8BTHKRt4rLnqYQlCRj3fo/HHWqQ73I8JAcwDdxlVvx1wqtv9nmC2bnTegU=","authorEmailMD5":"7dd713c9e4fed25355845acb9648fe8c","authorName":"Luka","authorUri":"","message":"Hi Stephen. I'm writing my first .NET Core service and I'm trying to grasp the basics...<br>\r\nSo I presume in this case (of this post) the service (and the host) are <i>supposed</i> to exit when there's no more work to be done. Isn't this the very unlikely scenario as most of the long running workers are basically meant to do work forever?<br><br>\r\nAnd related to your \"Silent failures\" post - my worker calls DoWork after a set interval inside a While (which itself is in ExecuteAsync). I'm wondering should I wrap my DoWork in try-catch inside a While loop, as opposed to wrapping While, if my goal is to just Log the exception thrown by DoWork and continue looping in While and calling DoWork?<br> It sounds silly but I'm asking this because I'm not sure how ExecuteAsync behaves. Is it, in case of long running workers, called only <b>once</b> in application lifetime, during the initial start of the worker? Or perhaps Host can call it multiple times, for example if ExecuteAsync throws an exception?","date":"2020-10-29T11:27:04.765Z"},{"_id":"948de540-2299-11eb-a090-3b27858fcd8f","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"abb1dc90-19d9-11eb-ab83-5111b5bec834","authorEmailEncrypted":"JYgkYVFDRoVrgIKOKtAdp13nlrfyTa4R9OXcPKktfd59RWsVR099pAt3uA23oPprwjHrTR2ylo5G0FfIgMvy4J7Quig1Fqj4wrCU2TRqZDZR2BKN4bQxBiNhzIRFX033u049mTttpIxwjuDxihXpMUXsJSTIhLpXlXGcLXZsAgbmmcy6ZXyt2K7uTOVp9IsinJVZkruelB1Axo4oW5ZWhE+16gr5Sa+Iuh2r3LD26nVtwKkzcF60FZD3bmukrunSlSrCQe48DlyViamSIEfZ6grHyaTE7YhEwhb6XLph4iy9gfM/nyVtKxU8vwnhqrqv/2+2OvW4khullme+MJiVy+xgIchhHCZX/o7Fk66JdUbe5I110Vb6koe4RYIGisTiY7AGzS8tDHky/10pKH2EC4F8KfKJ33FkRFxwYIE4STRiHEWHnlsP1+QWaQzPYYJWY1/76Vurx2+g0Uu5YcyXE37bQtOH0pXFgVoaRkLSDD/PcOfWPUxYVEZjuragV11InfD3q+JgsVwjQ0OORDBA3n0BICOBnEjdJQef8W14QUPyAs7E+h3h1kphY+9Lf+i3rQpUCRpGOtRxDvA4DK843uaMdR6L7T5EN5WLpej7hit/L9uz/9OnuC4fmeBuzY1Mi286Njws9bsn5zPROEiIXEKM+kfOW4Z84Lrh+0kN40Q=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"The primary purpose of this post is to exit the application when the background service faults or is requested to exit. Normally, background workers have a loop that keeps executing \"forever\" - which is in quotes because it really means \"until I've been requested to exit *or* have an unexpected exception\". The out-of-the-box behavior in those cases are for the background worker to exit but then the host just continues running (usually doing nothing at all). By hooking into `IHostApplicationLifetime`, the host is also exited in these cases.\r\n\r\n> if my goal is to just Log the exception thrown by DoWork and continue looping in While and calling DoWork?\r\n\r\nThis is a more nuanced question. The problem is that in the general case of unexpected exceptions, it's not possible for an application to know whether it is safe to process more work. So most systems will retry the message and place it in a dead letter queue if it continues faulting. Fully resilient systems will exit the entire application and have it restarted by an external system.\r\n\r\n`ExecuteAsync` is called exactly once, when the worker is started. The API would allow a host to call it multiple times, but the default host does not do this.","date":"2020-11-09T14:40:58.517Z"},{"_id":"b1b95a70-4191-11eb-9b49-03a25c37a34d","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"","authorUri":"","message":"What do i do if want to do the opposite? Basically, here's my scenario. I have a quite a few long running processes running on my BackGroundService.  My BackgroundService uses the host's IServiceProvider to get some RequiredServices in its scope. My AsP.Net Core host application exits and it disposes the IServiceProvider. This causes my BackgroundService to throw exception on the IServiceProvider dependency that it's trying to use. How do I stall my HostServer so that all the BackgroundService processes are completed? I don't want to put in a random `.UseShutdownTimeout(TimeSpan.FromMinutes())` in my HostServer HostBuilder","date":"2020-12-19T00:32:37.619Z"},{"_id":"8fa6e980-42d5-11eb-8869-e37b446acfb5","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"b1b95a70-4191-11eb-9b49-03a25c37a34d","authorEmailEncrypted":"AeBXnH5ExXndpG8IZCE35Md8MUIaqjHOngtwxUhhkx6/FGCaoZXKzWXekJf/V1A23jmA22F22ZV60E8zSf754yNy5ylzhboEKAs9JWz3PImofRxgwTQCQO3G5dJ7GgRlEsFEQlMvNS9TdwQ7kc6YYWr/BOdzQZXLmFn0315lxW9vi68zSQzCGt4p4jUpB4F7xf8PMB5u2W5Heq5YdHgtsExFkggEYynY6ybLtZhQ5PS5k7noyzzFDKwk8xPXF58I0Jx5hBjlestkyzQrsTyFB1WhWeXPIEU1pOvxc6pUAGs+Byx+L0FlCrQMmyJYi0T90s1ofVXRAg2wtFVvQXN8eCHyt/uMiyvtKiR10LUui0+YDyLBjt7FErSV/kG7oxsxd9atad0P0ZXMG00IDCufK5Ggs33LLpq9ThXEzLvMTldkoarIb3gWXLOZqWAZawWUpnFQnfIwWVGVulpT1TR/181yUUviU7VDpgKI7vqtpZaBAo0FKpfEHtvYQYORerUbrpNTCg6pxkoZbARoiWwKJKYrmq8PaHytluWiPMHAWOnMiC+idEPIH7UwuFs+luVnZZBxcd8Jy2j9e7fSouu6KdRKxmjgonQHc8P9+qKeMqLOWty1Iqk7xAfRA9t5W0wXmGHc0AGl05nE2e1bqydNexjgi+xCf6zBdIJcFT8kTLg=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Are you sure this is what's happening? The `BackgroundService.StopAsync` method [includes code that waits for `ExecuteAsync` to complete (or a timeout)](https://github.com/dotnet/runtime/blob/e18d25e1a81d359097371615ff1a3407597c0bb3/src/libraries/Microsoft.Extensions.Hosting.Abstractions/src/BackgroundService.cs#L76).","date":"2020-12-20T15:10:57.345Z"},{"_id":"27d68960-432e-11eb-a0b6-990c59635bfe","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"d75d1f20-4324-11eb-a7e4-816f9e6b3705","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"","authorUri":"","message":"Ah! I was not aware of the 2 phase shudown. Thank you. Does that work the same way when I'm hosting my application via the `WebApplicationFactory<Startup>` TestServer for  Integration Testing..? The issue that I described in my very first comment seems to happen only in during runing Integration Tests on our CI tool. In my Integration Testing TestFixture I mock a few of my external dependancies but I do not mock the BackgroundService. And that is by intent. But the TestServer hosted via `WebApplicationFactory` does not seem to honor the 2 graceful shutdown when it comes to the BackgroundService task completion.","date":"2020-12-21T01:45:08.368Z"},{"_id":"5b233510-432f-11eb-a0b6-990c59635bfe","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"27d68960-432e-11eb-a0b6-990c59635bfe","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"","authorUri":"","message":"This kind of explains the problem I'm facing. https://andrewlock.net/extending-the-shutdown-timeout-setting-to-ensure-graceful-ihostedservice-shutdown/\r\n\r\nBut I would like a better solution than what's provided there to solve it...","date":"2020-12-21T01:53:43.829Z"},{"_id":"758a52b0-4331-11eb-a0b6-990c59635bfe","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"27d68960-432e-11eb-a0b6-990c59635bfe","authorEmailEncrypted":"DDSutvxM6306pRAwkMmLFCeo0FCdf+U8BHZTqmI06wecgCkE3ikCe/Vq4wclEyKSqk5WkjbVj+ThKJD4s1ailvSvK3esmVV/0wb4SoYRTGSaaLoLrOjz7eUbFtuBFBjz+k14ox+asxPO6iaoO7Qjx0ipS4otKbfIvHW62LodujT4QJXchW3aLtgmkNCCJHyk9vYEcOTKU1UtDBrhlrrBz5iPq2cpuQgmWybr5flO72y2qzXDEegInPtLNwoIy4bSBbOxSVY7WOLFNVju3QsgXDwOU2Zp/rBIJjQqWHc5L7SboBACw6fUkFIvSoj0FAk45EFgbjF6yK5KXPgGigIfXemZpprZcL9KCzZtbbqeUHWTQCSD1pfinqagUAe7bDK43t2aROh4izOx8JL2gtXYSfEatCvuLs0E4XhVPYbjyMa1y4xFiilDryvGqHb+mrjx6sMw1eBW0IrwQX3Gja7/6Kx7HoEGaS1qvSvtp5m2JyQ8+6oGWmyqAu+/Cm8yfwnOTgIQ21KuLR2YvQen9QZWMBcdpb3zYfdsIKTG50MiLtsuTDjvJrA6BklJeF5+dAIWJ1l+OtfK9nt+QRYH9LFoHblBi97NK7WschpIAA7bvsEpFIiDeFZQGUjVWQdlkpUVTakcjEA/4TRwbHptjodv6JPP7CRSB5uIbfIr36+k2xk=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Ah, I have no experience with that test host. If it acts as its own host, then it could have its own shutdown semantics.\r\n\r\nYou could override `StopAsync` and attempt to block the host shutdown until the `IHostedService` is done. But how the host responds to that is really up to the host.","date":"2020-12-21T02:08:47.142Z"},{"_id":"cd4f6160-4323-11eb-a7e4-816f9e6b3705","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"8fa6e980-42d5-11eb-8869-e37b446acfb5","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"","authorUri":"","message":"`/ Wait until the task completes or the stop token triggers`\r\nI suppose, the `or` part of that statement is my problem. From what I'm understanding, when the host is shutting down, it calls the `StopAsync` of the BackgroundService with a cancellation token which gets passed on to the Task.Delay. So it no longer waits for the jobs on the bBckgroundService to finish and the host shuts down disposing off the IServiceProvider which my BackgroundService is still making use of","date":"2020-12-21T00:31:01.584Z"},{"_id":"d75d1f20-4324-11eb-a7e4-816f9e6b3705","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"cd4f6160-4323-11eb-a7e4-816f9e6b3705","authorEmailEncrypted":"FREifW7UNqOGCAowWDnQ1F+m2LnFt6weMm5A06jb4Dg4LjqcGtQ/IuVyKfURFiWMSXlOXuPhs1qDdJrHMqGbG6zcnc115ub9GiSThHYo/Aq924lAl3t6Rv1pWUg0QUJbvcfOigRUce61sxKjWmnRwr/NM7plCltB3DDzJEFYZ6/SlPHq0BAKhqW8IFCybAgoWHBc2N7DNQwjfl5uKJDQDjfL/yqyi0z2ZGynsK5RpSAVLbPUJbojUbo4OyA7fZhz6rtYDgnOAfXkx616nuda+GGKzKS4n++yI2TM+uM+cO8lNbIDYogYf79U8PIlXOAIIbGICeFkm3fdVaByY4JgeAVp2ZXjhhycBmA/Ge3kORCjMQ0Df0XCfeTBtmY4gdQV8epY/9AapNCa0c7/XN56XCRYRTb4/xN1x4s9dhPiwpf26R4RmeSEZIyN7WAS9fKD0aF2At4zH5+bqJf7SFkx4+/V6itReZpzcxh4FAc5/LAjDyicI8jcJs+d5Rff5rMz8e6Z9DSeav7q9aGVXKSGtYt9aPwcD2aWROTAGM58IFGlBezdNGAdPrMZnGleeGGpxgFYJYctkFZzYO6bVpyRWM+5Fv2zBKuPEJyvTBxZteimmNCp6GZ4359PicxEpUB2fo3atShahlztiYkGxltEhoDm6yGCx39mnKZvi9E3ITo=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"There's two phases to the .NET Core host shutdown: a \"gentle stop\" which is when `StopAsync` is called, and an \"immediate stop\" which is when the `CancellationToken` is triggered. The intent is to have the application shut down gracefully if possible but also get a second \"I'm serious now\" signal. `BackgroundWorker` passes along the graceful shutdown request (by cancelling the `ExecuteAsync` cancellation token), and when the host says \"I'm serious now\" (by cancelling the `StopAsync` cancellation token), the `BackgroundWorker` just stops waiting.\r\n\r\nAFAIK, the time in-between the graceful and immediate shutdown signals is ten minutes by default, which is a considerable time. If you want your shutdown to wait indefinitely, you'll need to override `StopAsync`.","date":"2020-12-21T00:38:27.931Z"},{"_id":"25b1c030-0f27-11ec-90d0-47114c4bbbf7","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"","authorEmailEncrypted":"TOMoGPRfWoWtKdYQeB5XSYJCTmvWcZCG1q1S65rqLnqxAHZA3L9dkTUy7LpRcLQToysA2VHmu6zGMbh76iI/wN+K71PmfWW2IbLLYp8cmZTD4dyoUjTB/wGsTw3IQsgIjWZx/rkGGyVp0W0ESQ9OYq/9bqbiSd/mJ+3SD9j89ajAknBPkpvBSUmmvVZ5MUntvBjDhcdNIIS/zOBlzvEoDRodzUDtQ2DzJLxN1tVFXCAgTfu4DEMmceYZtwERe1YTWDrI/kJrqJFYLWkPoLEskXg2UPG+c/hIZKnLoj+hZH3eeEYXLp44pVBPvsImwb7o1+s7YAoL2WFhudeIhLjjciiidyo0d6NIDnly0RStfNEGlIfpJWt9olKDDH5Dy4tbwAckp8sTdctow7kjttQib6JdHHf0C+gP1tB1DhyIjHkB3k7ba5/FYL5CivrLut4qL0oiQgKno2HYI1rN+Yz2AxdXzHft0CG/WVNqDWkL1Hr6zt782TU14v8+at1+UfGaIqUizhkQ0ng3ZAOxWzFP/rbSmkfUgeCq+xzOWYmfabb7y2VH+uUTa5JMEJ2FbNELR2A1FzXAiJ30ZUcBgTj37bnN6EaRbbcR6Qt01QPRGYCvKUMbiwnRsSbvmDGGhV2u71C0kxy8dgvpVwjo2nRmxd4oGcwVLejSta6n9Dz7+18=","authorEmailMD5":"610a4385b9e7700d07675dbac363635c","authorName":"sm","authorUri":"","message":"What if you have 2 BackgroundServices and you wish to only exit when both have completed/finished..?","date":"2021-09-06T15:28:55.480Z"},{"_id":"23660890-0f81-11ec-89e2-71c6940e3f6b","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"25b1c030-0f27-11ec-90d0-47114c4bbbf7","authorEmailEncrypted":"YaDwQgUeUqrVD9Ypw3fJaf2gD0Gb8f00kk1l6KPctmJ/LAoPZwNOS7Y3npN1kuAohCt2fLTwomGqwHORpi3VzjPjuwKoUInMX2bzjck9inMldVcXC+y/Ul48QE5PBbLlr7JTq4ypKZR01wNKefiiUF4WR/s7Ivau7qjXhdDiwmiHN4RjHpN4P1Mq4xVV4iuFQFncu9g5FTF1hOPYZOqT8ja4sUlwqTXZ2NVpEkJSM2RHWDSymWbOSBC688skNLCeM77BEB0+b2yHwNxjf1GruzTA65QCFS91Q88rxqANorELQ2WHEh/nnL5hFRo9olVYpuI2ari+W4lXq0qXgdqW8qtZu3xLI70NV7/M4LGqXWQ6rBpukolerfItrgqQblt+T3qFd6Juyi0TzzOpsgdPI7j30Nx3ZF+zFROx1+Jig/3lRjmHwKag0OLZM9jHtsMdJDazJaQPKmLZ+Mw6YCC1adL9l/ySSGqvIgUSO8ZvDrAm3KmaSgzotBhe+bxuQrv+9yujvqfiRUx5fhgAkOsj+qXYvg0eZnSrKqEE2tPuzIEIezuCzxW9x/Kjb7lw4LLn3sak4x3WhdcmueZxRZUNi/CDsf1hV3j5GwrSDkkp/uDil9RipEyq3vzvn4i1z3Tipw08dbvc98NOjpG5I/3vtrKkYYXCcCmgIJgAG0tHW6w=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"You'll need to keep track of how many background services you need to exit, and only shut down the host when they're all done.","date":"2021-09-07T02:13:06.231Z"},{"_id":"7761c7f0-4270-11ec-a611-9bd859aa6ed3","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"","authorEmailEncrypted":"gHB3fR+wVIQrSQDK6E4qgnHeeRMCgrTVyWcSrlZhyecWNm+5Hzd857hhhJu2EjA2oVVtKY3wFWdWZOavxL39XGkvXZ8LD85GgLhNnNTs9+numKfqZTVwqO1FHQShnxWfpDJLjE6vfY27TswQLlTrE/Y4vaEJvnP0N93TN9uA4z66TyuLYGlok494QSnrbfYPGxsRkjayfurM1kX9o9zSxa//Rs8Mc0dlz99AVMn69hMIUdrE5Q25RGXHkaCkRv1WbDvaUzQGE9wqWV0WCA/AVpW3Jj+53OhWqS/a72Iy/gjdbdwRs3ixA+bapqOXGMAH1KvczG8SoHHaQ93mLhqJfEKBOvS9nXul0U1KoGrI0g69JKXdoFeD4h28yF+suUC6M3hb5pApg4i1s8aTtNrRRHfkaK5JLR01cKhXCQ8V3gBCgLbSYMqCefwtU0YDXK6Ll5GR8O1jpHR7LiptMPjWTINC2Yj7y1BpVorJYgpiOcujOOUvYvNyLOhlBvDTZ/vU4M0PVtYKHDi36Vbh4bYDkxXzmuFWnakMG5w6NIJh5S8ZAWCpxpx3yMeczhudoAxtGwLcejwoNCstwzA1KxUQtidjvZ0XHD/GnOQiJoBS07QcFW3ezVl/JxKQLavjJULibWl1qCDAtGCbdoUnBnxbVthNC3jtPV1i3P7sdVxm0cI=","authorEmailMD5":"2f2d9b2b62bbe8cdea5035d7c9f3978a","authorName":"Kenny Eliasson","authorUri":"","message":"Hi! Great post that we've implemented in .NET 5. With the release of .NET 6 this should be the default behavior it seems, is that your understanding as well?\r\n\r\nSee https://docs.microsoft.com/en-us/dotnet/core/compatibility/core-libraries/6.0/hosting-exception-handling","date":"2021-11-10T21:52:15.080Z"},{"_id":"6c0686c0-66ba-11ec-8be4-49f74e847e2e","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"7761c7f0-4270-11ec-a611-9bd859aa6ed3","authorEmailEncrypted":"nx7gmEWgiAVXP7+laYKCJg7ZbHkbtbc2676/VBsdfSQq4yv7BSrhBL+238yKwiEV35+deFAHSr7LX17mn4EQx6E0Xrij6noJO/FgSeEBsm9NE0r3w7ZNfYMxf1lM051zFcrDdo2VatReSdUh+z2AovSzDNe8YHXi8fGuU+C5Y9N9zHnpDNLSQ6XKsSp2ByODoIst8v7gBpdUMT/UbIaFayQXttt7mY1AhPJ+ANNBzSxtxovz/ndNjqGjtaTK3tsgloHv72kNoADIcdlsNyib1ColEwqsB0MPsgUZ6PUICEgq1yjs+Xj2KFZVl27Wa+yr6PI1sgQLUjZlFXfrvHtFtHbfkJCrMIJj/Ytv3z5RCASJssO8CfmJWmW1FDJ1BNpv/UIyck9WJqxhiWEWR6mdbdZ4sxCPcKeu1gVjwSwdm95gPRhON6/E8dsjdMmh3RPMboEMJv5J5I74n6Qbv/QLp1tdqlLqzkTH7AKKlAVR8jZnTnWQrJyRECv3cBrvHkSWcY/vU0KPVUkH9jlE4fdPN1MCiEaSUT5kXPWnh6z7rAFyFm9AkQ2WGdNxSZ3MoX3Rnkr1BKo+EyOd6aAC4whRTxcTj68jtmwsHXkWn+WHkM3HP0Dgg+ZE5Rl11ImG1FuU94AFq5ERl0mnaDMjLx6jTAgPaEd2GCNVr/SYoQhfSSA=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"I haven't actually tested it out yet, but it looks like unhandled exceptions will now stop the host. In my example code, a *successful* exit (i.e., completion of the background worker) will also stop the host. Whether this is desirable or not depends on the application.","date":"2021-12-27T02:12:20.543Z"},{"_id":"9356b840-8e73-11ec-8244-6307ee396a14","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Hector Rivas","authorUri":"","message":"This is great, I can now stop the app on failure to start!\r\n\r\nMy two cents, an exception filter to allow actual (say normal) app shutdown to be graceful.\r\n\r\n<pre>\r\ncatch (TaskCanceledException)\r\n{\r\n}\r\ncatch (Exception exception) when ...\r\n{\r\n    throw;\r\n}\r\n</pre>","date":"2022-02-15T15:25:59.087Z"},{"_id":"ee0f9840-8e75-11ec-8244-6307ee396a14","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"9356b840-8e73-11ec-8244-6307ee396a14","authorEmailEncrypted":"jve+mvNSbMjhT9g8jKz9yFilkl672eK6eEMP51xJZu4PIoY63Gv9F47XsG+XwUy34JJRJd8ltmbc2PR9Rvoo7gHIHcN6NwS5ra0aVVPv7ocvjlFQg4tUpLT1BX9cBDm1swItAFb3uvuYwrW7Ha3D1JbGJ9CLkq+mo+8Jlo8fUGEFtLT+BAfG1hWznjvRQt7e8tY1xhV11+WkTcEvAwwr/mUF061m70t18I9DKOrRPQlMRRbokCtWyQ1qdOi50pMw5SLt2lWy1/uPKSbcrVlFEb7tVPLbe2Dn4YNOOaMRWIFvjzWfHnO38ifSlHrlxmfIa2TFz2cA8SaG0tNITy6PXIefYrz5QYM8Uk0pcPswCAAb9hH4fHbWzC9MoF/PJLfkt9Z4v3NXFMuWIGiFvLqbCsw4y9lkvl9upEjLVVAib+ZmIIKvqW9u2MRk6SgUm3ikmQ61Nxe1MpKhbZYH5UDvCED6JTUyntab3FnQ7qcWoNSxqApCblk0xOGZrpYHb75bRjy5OJcKDdppSiOBJfbVukqekOy4TVeloDixlU3VlHGwCwny7NyVuy3IGcAZ1g0ljwWXWkf1QNTO9ja4oN9LMSyG5fDT2aWcH7W7oHP6lgav8zLFXwguotknh+XgL1eqE4jwmqZGWvtuFpxVt1FjTSapUqMvRe+KBf2mSOf1fEI=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Good idea!","date":"2022-02-15T15:42:50.048Z"},{"_id":"c4f5f550-0876-11ed-aa4c-3fdd065aab1e","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"cff1baa0-07c9-11ed-b4c5-8b5b3a4bcbb8","authorEmailEncrypted":"Pcx+SnB86Ye0x1ytWT0AaobYRrJGqRIQqtwaV96BRpjhs8ITHp6NQGMEOjZHK7kJiDHT+O+/iimpGGR6uVrWnLGPVQMC/GtUFH5OfUbyrHRPIf+NqONrS5gvy+MwHAcsx4CR8xpfow8MKb+px73jElZ1iJlJBCR3TsKZY/DQNsRvvzrlu2TpxBhWOaiX42QIdPmm2OOs7f3oWI9c4VOG2q5W6c1CerY01Z8DtHKblBi0KTZZtN3uHDLFZLWS5cIwWSUNG5xM149RXSRuriPtyuJBYCDWxMirP/N/wAvSJP9drDrPgPmN3fgkSuwveVtxfNZGVAvXwA3TYpOpDB/CpmhIGJFnsiMdb0Jv4bYkpVMXrzl2NT9K6nhchoSyGjNBMtd8LbKTRSelD/gFBKrg7CRQBejcGzyLPUu/47jlqfN7wqtamROwSdgypaqG46HmvBCd7U+3uEWof9W08jWvONzuDGpv2EICbHkwkH4Jn5HmN/dz37uuARqNsp/3Pk7lgKwTP9GjiAndde9ygkQ9Ee0gs9PsSmkfGVvRlIYdbXzYdN171VcHU06ajZwvRczgL2ZNbfr/Is728m/SvYdkQeQarMt6JJQGb5SNvZKecsqBB/BCPhRsZHlNNZnS3NhI6dLAM9Naruw8yXrXR52f6PwgTyvZZpoegPvfUWwoUyU=","authorEmailMD5":"17d3b2721e96ce7cf395ac5a51fa0d61","authorName":"Dave","authorUri":"","message":"Answering my own question, I found the answer in this [GIT repo](https://github.com/dfederm/GenericHostConsoleApp). By storing a task as a class variable and await it in the StopAsync method, even if another service called StopApplication on the host, the host will wait for the task to complete before graceful shutdown. Nice!","date":"2022-07-20T21:56:12.374Z"},{"_id":"cff1baa0-07c9-11ed-b4c5-8b5b3a4bcbb8","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"","authorEmailEncrypted":"nM2h3P/L174WPX6aV8LKC94845ytJ2nzMYItRZf//1LaarWzQ5HSVWaaS2AMD/svQdy7oRoYBTdJ6zg6LnPYWTWTmW4yckR2SiU2KpCzG9aO/x24F5Zzkg4BP7PA6Gzr5e1ifgpnbHRmxrcDZIc7kXQ79cDIILWFoEB0ggnWc4jb7ZGZw0By6tjKFH126Jo44Ev/8mbJ3XXSPsIl36aZXlOg3KfoLNXKXqpN+0sIN9/Ks0YzgI8shfioLe6gwY3P8OGlyzku8A7Sxk5FaOSfruhkOfn0116pF0zsd2V4vukPuiPBk88kAws4z+WdMcruKeRDZ61d7maTHzEmLSWIZKwWC3OMJ7yoDeYFEFIFOO1qZJQ3kzu3i4012RurIoQdmGCArpMAmRTkO2i5markDanI79VZkORQmchmCtHAL5bRVgGdi8IcMVz3Qxpw+pzmbNDIteT7JUpultOgjX/r8Rh4TfcuPntFyTmhZfvMgm4qlIA4ecGmNktI5LtMPZNIEZQ+PKjI+L6uoJ167WS7hd8eRuQrmZypj+1H/lO8nP8CV79LxFaN8UH3TOMd+RyqgvVpO/Xg0fu+hmenawQ/OMhqGG6jt5+IWqNzETaCA0GgyZ5H6unOTBVbnu43lSYId7CTAqp0Ypo4UHMFp6g/Blm4R+KRJ2JBfs4Lz+FdUiw=","authorEmailMD5":"17d3b2721e96ce7cf395ac5a51fa0d61","authorName":"Dave","authorUri":"","message":"I am currently grappling with something in this space. Specifically, a console app which hosts 2 services, each implementing IHostedService. Things are simple with 1 hosted service. You inject the IHostApplicationLifetime, call StopApplication (at some point) and it works well. But what if there are 2 (or more) hosted services? As soon as you call StopApplication on any of them, the whole host comes tumbling down and the slowest service does not complete its work.\r\nJust curious as to whether you are aware of a way around that. A hacky approach would be to call StopApplication in the slowest, or add a delay in one service which is so long that the rest of the services will definitely have completed before it. Not elegant solutions.","date":"2022-07-20T01:18:07.886Z"},{"_id":"40ebdf00-23eb-11ed-bd7a-d1caebeb1360","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"","authorEmailEncrypted":"WqTMia4H5c5uE4k46L0evOkJYDoKFk7aTSgBACxkiu/UKsOn94hMMpYogJugOj0+tQOaauoeqbS3bBsCD8W1TroEMpHp2yFJPDwi5c6s4em11NJBSkBSJOLPZ2e99qJhibW0jbHf5RbS4cVq+Is4ExcbjdRoQD1QbCgVJxU/6dfXRIw28lIVmdv9eXjYNtHUUB6Z89CTfbiZb9JJbQplhZrUHFT/N0PSXz0QE3QK+Yqz8q15RD6hcXoGWX7VD2FbNOM90gXniUt0ah4RnAeGT8KHelKZQrsnwj1RLLY14kI4KzXDLVYEHOr9fWYU1NwkJUiH+aibs2T0/4Rc0TnMs9ZluZEgYJh9CBw/KWPP7ssREUGwcPMILvF1wPiQnzd6AkTq8S4Gvx/ZZ+WxHA2xd/H5OnvVP9T+0YIcrLEbEQFmkpevR02T35P+F0RkFVUqRNwbl94ful2scAsGzmTPxiEEImZOlQgfNFQiIsdV09pFhIInFxY+sNBJndTmKHnmLCDT+ycrPrCVJTtIAhAT7wwrLaugeNwSfSpti5TycL2GbdqoaXJt6OkNl3Hd7JhzskKc2vth+Uypdlfn66KupSp3H8JY59zL3Us01UR0Mu3rMEgE78BBBqaY9oU01GOfmgl9sc8dUebVet2gbPqAIpOyggyPH8ycr2f2x0Gk0FI=","authorEmailMD5":"70fc1752ed75fa968107bbaa500cfe8a","authorName":"Juliano Leal Goncalves","authorUri":"https://github.com/julealgon","message":"How do I communicate a non-zero exit code when using `IHostApplicationLifetime.StopApplication()`?","date":"2022-08-24T20:28:03.415Z"},{"_id":"62797d50-240c-11ed-880b-4f1e77ccd94d","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"40ebdf00-23eb-11ed-bd7a-d1caebeb1360","authorEmailEncrypted":"m1jvvDDn0okwITCDQ/QQaGO/Shxd02JBqIZuoXxirDD5H1hjCFkbckvEPW3n4fAhU3noHr+cDgjOaw4C+LvCxkWoWh9UH4uE0d+N0gvGzeTYjYI6rg7/5R+Yndbdgt0XMV8j63fDiY+OSJxZ8E3Zz6U4+XSLcJJMQih93MrUZVmwLRmKwKxKkpea5oQAYM7ZbzRpZiUgwkSmWRi5Jty8T5NAvn1+wENIpCRTDlyaTIQRAtnEKDsGnzGj6vX+vuPwDYacLbQ6RwJKBYo0umZxu3EDKEcp/4ePDazg/AMDz0FuCpUwTxzGjD/5YcSfdcmRqq2B7yaqzf0aBnY3pRXA7iYtY8sbm7HUHSFQXFTS8szD87uUi6/O7hUCBdgzKVRExo5NPQt4N++jTC4Tkxs0qtLmnZb4D0gRW1VDC6NvM+E8Fs8ILMvM0KpF+DZ0m/lbysPI6JhEeTlGAleZvdTwqBk+tOYDOuWBhOW9ArsDGDA7eraqZlnyJPpXzGFqDqofDCortFJFp1yVxpxEZIoWQw/5rq4Ks8a0m+ObbmT08lgIwkUfK8ivCMtCUpLcXz9yTia65YAn6Ic6WXuM0c/CwDAOuHoEZAIQqIscahtibbqzbAqHGt0zgYL0vTD91TBLJXd4VGgwSE5+2pW8sQOrwyLR5twPkqIBYAQ5Bjq02UI=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"You would have to set it first, e.g., either set `Environment.ExitCode` or `ServiceBase.ExitCode` (if `IHostLifetime is ServiceBase`).\r\n\r\n```\r\nif (_hostLifetime is ServiceBase serviceLifetime)\r\n  serviceLifetime.ExitCode = -1;\r\nelse\r\n  Environment.ExitCode = -1;\r\n```","date":"2022-08-25T00:25:13.057Z"},{"_id":"ad651d60-302d-11ed-8be7-2f01d71b125a","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"","authorUri":"","message":"Hello Stephen, first of all thanks for the great articles which always have something to teach. One question, would it be a good idea to forward the `stoppingToken` to the `Task.Run` and to every async method inside the body of `Task.Run` ?  \r\nFor example:  \r\n```\r\nprotected override Task ExecuteAsync(CancellationToken stoppingToken) => Task.Run(async () =>\r\n{\r\n    try\r\n    {\r\n        _logger.LogInformation(\"Work started\");\r\n        await Task.Delay(TimeSpan.FromSeconds(8), stoppingToken);\r\n        _logger.LogInformation(\"Wordk ended\");\r\n    }\r\n    finally\r\n    {\r\n        _hostApplicationLifetime.StopApplication();\r\n    }\r\n}, stoppingToken);\r\n```","date":"2022-09-09T10:53:46.117Z"},{"_id":"f39a2287-082d-4bb8-ad40-222d1a217f64","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"ad651d60-302d-11ed-8be7-2f01d71b125a","authorEmailEncrypted":"kzrhdHXvReXOsdZwjL01FHJFs4UeWRU2PULq07ImDyWtAsxHc4CUlunzR0+Q09MNAb3pQwK9ABAoIw7o9WC2Oo0oP5/BryKcbgC+0saEY3qctd7vhPZJwe2pMofayD4fG5Q24eTUYBGKnfu9wVnw9QNZLLoJqRTBa6gV7PeTPh+SbM/zElr9F58M1ycBuRLtGtmpxQp6wswcnz4WbC6QrPSbO65vXBSRE6ecUEeEMS1aXefsTppqbz05EDs/V3Tozjgb/54RwWQHZEggolGFEX/QcB2psDj3nd1KXXzuWKas6wmrGkx3nTCVYVG/ewzEYUzB03Xt8AGCzSsg7I9YnMATyLrq7VXM4XwQLiIG1lEGB3I5zDP1IAC9sBzaakRXicMuQdHSHajPuiHYhoMkzOS1w/0R+Am73dEV4q5j+dQhxQFO2JOm3W66Ruk/2ex/sa99xxazd9G9gLetVPZ7B8buSLGCD+hB3l1+hQK5qb9rWbGxguSuay73yzUt0vjlGTQQiyFNv4pyME8AhbsdVvSQtKIZmO+uZYnVBjzbHBlWFuoZ+5PQlJy7UllvI9zqv2n72BXarqEDMKG75rB75mHl/r7p9/4K9XUToqoSd5ON2ZW+zXj4IoDndsvNEg8pDgyZPIF/83H5SuMzkmATlVMIUxHL0sTUuPaywjXTydw=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"It should be passed to every asynchronous method in the body - in this example, the `Task.Delay`.\nI don't bother passing it to `Task.Run`. I believe the `CancellationToken` parameter for `Task.Run` was an API design mistake and that the parameter shouldn't exist.","date":"2022-12-30T03:10:09.2629446Z"},{"_id":"3a2c7124-1cf8-4801-8e73-2f6420400f04","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"HellRazor","authorUri":"","message":"All new here, how does this fit in when the background service is built as a Windows Service? Can we expect that the service will be stopped and need to be restarted manually after?\n\n","date":"2023-02-07T19:58:39.4081267Z"},{"_id":"90a08a0e-2dd6-4ddc-98f3-8b03191ad2d2","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"3a2c7124-1cf8-4801-8e73-2f6420400f04","authorEmailEncrypted":"L9Klj+gdk5ZuX5aPxNHAAmLiFfmc/kmrKnqJR7q2KOqrd35AUxoAqhZfWIX8y3GtEuGxePhmcrMvsLjbuKZDtBl7Z47hxP0FFVsFq1D1foDLIn5Y6vN7jDPqCs3VluPP4mLIObrCMecTSUt8lQFrHZDHU5d7f3sqBKHYGBoMqb35/MWVohY7J+Ul174NKuZGFApNEflJpJamOJvVdQOO/+/frSrNr6cTZ+TX6ZsQz3kNtkESh5KOoTI/5A/tfp/F4RIxZkRMI12lCBT2zrqUypW+tg6z4CBSyFZDOD0wnzAGWWRcBrYb4N6TQPNGpqC/lhcEAS/H1+2pNPBMLJ17gFaem5FSwXfhOVanQU/E3iyZ0eRV60hrz982nMsC/8gfxysqbIGD5apqBc5fTYfnSBMFXEzFXfUMR9HM3sF2J+j5KbP/CLSxIdt2q82tjN2DpeemJ6LH62nsHL6qyTBKTjNOCCjJ2dcT9l24yrKkC3l/vyHZ0LE/YBSDFTquSwx8ZXXaagFDYpWylr50E6Mu8tCZ8p9Q1ENFLNgUlF4oKCf+QecmeblKd5LLChQOT61X8jHhgsY+hJVm9dscx5ei2N+IScZezKNkzb8OfjVAw1Kgvf/jTSm808m/NNigCCx7QEQZkWUnWxgv2YD953y+yAeNkqkSTN/eGRrnur1C0sk=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"Getting `BackgroundService` to work as a Win32 service has a few rough edges. The host uses a Win32 service lifetime, which will shut down the host (including its background services) when requested by the SCM. The .NET host doesn't work well with multiple services in a process, so I'm just going to ignore that possibility and say that the entire process exits when the Win32 service exits.\n\nNow, if the background service *itself* wants to shut down the host - hence the Win32 service - hence the process - it can do so at any time using code similar to the code in this article. However, you *normally* want to restart the service on a fatal error like that; see https://blog.stephencleary.com/2020/06/servicebase-gotcha-recovery-actions.html for details on how to instruct the SCM to restart your service automatically.","date":"2023-02-08T00:06:43.3131855Z"},{"_id":"2c229c33-43f8-4ebc-88eb-e57155fb2da8","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Mike","authorUri":"","message":"Another excellent article in the series!\n\nIf a shutdown is already pending - due to `SIGINT` (CTRL+C) - then the finally block probably shouldn't attempt to stop the app again.\n\n```cs\nfinally\n{\n  // only stop app if error occurred in this class\n  if (!_hostApplicationLifetime.ApplicationStopping.IsCancellationRequested)\n    _hostApplicationLifetime.StopApplication();\n}\n```\n\nWhat do you think?","date":"2023-10-04T07:12:37.0963331Z"},{"_id":"a63be85f-242b-4c4c-a47d-a11df0c09448","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"2c229c33-43f8-4ebc-88eb-e57155fb2da8","authorEmailEncrypted":"H4lYxTdL6v15QWw1xP6aBMbn8k/pYSrB3t9XzG9W59a38n1w/ZSoGUboUNVqVFIxR47CfyfiNHgQK15WpsEiUNUKFrxgjCv9s+0gdozcqp8yq64M3vf1AXNTZuym3jz0Vr5A0FMvkCLg/OM5g6TnKCrglSPfkljInMCrN3WsW1OwmWky7tQXbMddySLQiikhG7VAxmbGInyhLEWhR4lRfcEiFjj52WgUQVDB9enB5is4jlJHfTWsBPhsrkUezgl6o2bQc2X3k4hyBOm402vaiknXpkkgGrRJylPVKZy7HywB/QfD7SLKRyFdzbC2VfPGjpz40vIAOrWaOtQ4gQqXQ//brcNng4KOadOZEIbfxdBYftMKz+OgBSnWryr3i1znbAyrtrRwX1g3NxcT0+43cP9PIgOenZ00GUnMLTAYAHVcO4hkcTCAd0jaBoTsY/xdLAYeTjCk02PlCPAESfB+n3mXAv+fSTMEP/sloqwt6R0Jw1OcKaPTatPsLszBJcWFlhoGphncoCU1JIZ3XSXQOuSRww7VfHvaf0au09mknRv1Rurh/Pi8onsVC/NzwuqUwPK3EReQRSJjs08+t3vZDUcL4deKc4f7G7dvjgW6HWrtXaLQ6fwUS4cb3voFYS1d8NvJ4ANrn7Ibs0EnvKJZaLzptPjFUlXrVaNnoWz42/Q=","authorEmailMD5":"23448e78d187fba56d8bc263081ac5d8","authorName":"Stephen Cleary","authorUri":"https://stephencleary.com","message":"I believe if the app is already shutting down, then it will ignore additional shutdown requests.","date":"2023-10-04T08:38:20.8898357Z"},{"_id":"349508cc-9c57-4499-a8c8-30f933dd2772","postId":"2020_06_backgroundservice-gotcha-application-lifetime-5429f1cf-c680-37af-bab1-366c9509a363","postUri":"https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html","replyTo":"","authorEmailEncrypted":"","authorEmailMD5":"","authorName":"Casey","authorUri":"","message":"Thank you, thank you, thank you!","date":"2025-03-03T23:54:36.9148438Z"}]